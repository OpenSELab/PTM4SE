--- a/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java
+++ b/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java
@@ -245,6 +245,7 @@ public class JavaReflectionTreeBuilder extends JavaReflectionVisitorImpl {
 		ctMethod.setSimpleName(method.getName());
 		ctMethod.setBody(factory.Core().createBlock());
 		setModifier(ctMethod, method.getModifiers());
+		ctMethod.setDefaultMethod(method.isDefault());
 
 		enter(new ExecutableRuntimeBuilderContext(ctMethod));
 		super.visitMethod(method);
--- a/src/main/java/spoon/support/visitor/java/reflect/RtMethod.java
+++ b/src/main/java/spoon/support/visitor/java/reflect/RtMethod.java
@@ -34,9 +37,10 @@ public class RtMethod {
 	private Annotation[] annotations;
 	private Annotation[][] parameterAnnotations;
 	private boolean isVarArgs;
+	private boolean isDefault;
 
 	public RtMethod(Class<?> clazz, String name, Class<?> returnType, TypeVariable<Method>[] typeParameters, Class<?>[] parameterTypes, Class<?>[] exceptionTypes, int modifiers, Annotation[] annotations,
-			Annotation[][] parameterAnnotations, boolean isVarArgs) {
+			Annotation[][] parameterAnnotations, boolean isVarArgs, boolean isDefault) {
 		this.clazz = clazz;
 		this.name = name;
 		this.returnType = returnType;
@@ -47,6 +51,7 @@ public class RtMethod {
 		this.annotations = annotations;
 		this.parameterAnnotations = parameterAnnotations;
 		this.isVarArgs = isVarArgs;
+		this.isDefault = isDefault;
 	}
 
 	public Class<?> getDeclaringClass() {
@@ -89,6 +94,10 @@ public class RtMethod {
 		return isVarArgs;
 	}
 
+	public boolean isDefault() {
+		return isDefault;
+	}
+
 	@Override
 	public boolean equals(Object o) {
 		if (this == o) {
@@ -120,7 +129,34 @@ public class RtMethod {
 	public static RtMethod create(Method method) {
 		return new RtMethod(method.getDeclaringClass(), method.getName(), method.getReturnType(),
 				method.getTypeParameters(), method.getParameterTypes(), method.getExceptionTypes(), method.getModifiers(),
-				method.getDeclaredAnnotations(), method.getParameterAnnotations(), method.isVarArgs());
+				method.getDeclaredAnnotations(), method.getParameterAnnotations(), method.isVarArgs(),
+				//spoon is compatible with Java 7, so compilation fails here
+				//method.isDefault());
+				_java8_isDefault(method));
+	}
+
+	private static Method _method_isDefault;
+	static {
+		try {
+			_method_isDefault = Method.class.getMethod("isDefault");
+		} catch (NoSuchMethodException | SecurityException e) {
+			//spoon is running with java 7 JDK
+			_method_isDefault = null;
+		}
+	}
+
+	private static boolean _java8_isDefault(Method method) {
+		if (_method_isDefault == null) {
+			//spoon is running with java 7 JDK, all methods are not default, because java 7 does not have default methods
+			return false;
+		}
+		try {
+			return (Boolean) _method_isDefault.invoke(method);
+		} catch (IllegalAccessException | IllegalArgumentException e) {
+			throw new SpoonException("Calling of Java8 Method#isDefault() failed", e);
+		} catch (InvocationTargetException e) {
+			throw new SpoonException("Calling of Java8 Method#isDefault() failed", e.getTargetException());
+		}
 	}
 
 	public static <T> RtMethod[] methodsOf(Class<T> clazz) {
