--- a/src/main/java/spoon/refactoring/Refactoring.java
+++ b/src/main/java/spoon/refactoring/Refactoring.java
@@ -36,10 +36,14 @@ public final class Refactoring {
 	 * 		New name of the element.
 	 */
 	public static void changeTypeName(final CtType<?> type, String name) {
+
+		final String typeQFN = type.getQualifiedName();
+
 		final List<CtTypeReference<?>> references = Query.getElements(type.getFactory(), new TypeFilter<CtTypeReference<?>>(CtTypeReference.class) {
 			@Override
 			public boolean matches(CtTypeReference<?> reference) {
-				return type.getQualifiedName().equals(reference.getQualifiedName());
+				String refFQN = reference.getQualifiedName();
+				return typeQFN.equals(refFQN);
 			}
 		});
 
diff --git a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
index 96ba423..7039feb 100644
--- a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
+++ b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
@@ -91,9 +91,8 @@ public class SnippetCompilationHelper {
 
 		if (ret instanceof CtClass) {
 			CtClass klass = (CtClass) ret;
-			klass.setSimpleName(klass.getSimpleName().replaceAll("^[0-9]*", ""));
-			klass.setParent(ret.getFactory().Package().getRootPackage());
 			ret.getFactory().Package().getRootPackage().addType(klass);
+			klass.setSimpleName(klass.getSimpleName().replaceAll("^[0-9]*", ""));
 		}
 		return ret;
 	}
--- a/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java
@@ -130,35 +128,9 @@ public class CtFieldReferenceImpl<T> extends CtVariableReferenceImpl<T> implemen
 	@Override
 	@SuppressWarnings("unchecked")
 	public CtField<T> getDeclaration() {
-		final CtField<T> ctField = lookupDynamically();
-		if (ctField != null) {
-			return ctField;
-		}
 		return fromDeclaringType();
 	}
 
-	private CtField<T> lookupDynamically() {
-		CtElement element = this;
-		CtField optional = null;
-		String name = getSimpleName();
-		try {
-			do {
-				CtType type = element.getParent(CtType.class);
-				if (type == null) {
-					return null;
-				}
-				final CtField potential = type.getField(name);
-				if (potential != null) {
-					optional = potential;
-				}
-				element = type;
-			} while (optional == null);
-		} catch (ParentNotInitializedException e) {
-			return null;
-		}
-		return optional;
-	}
-
 	private CtField<T> fromDeclaringType() {
 		if (declaringType == null) {
 			return null;
