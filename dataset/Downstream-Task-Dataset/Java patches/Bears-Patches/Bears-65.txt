--- a/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java
+++ b/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java
@@ -217,10 +217,20 @@ public class JavaReflectionTreeBuilder extends JavaReflectionVisitorImpl {
 	}
 
 	@Override
-	public void visitAnnotation(Annotation annotation) {
+	public void visitAnnotation(final Annotation annotation) {
 		final CtAnnotation<Annotation> ctAnnotation = factory.Core().createAnnotation();
 
-		enter(new AnnotationRuntimeBuilderContext(ctAnnotation));
+		enter(new AnnotationRuntimeBuilderContext(ctAnnotation) {
+			@Override
+			public void addMethod(CtMethod ctMethod) {
+				try {
+					Object value = annotation.getClass().getMethod(ctMethod.getSimpleName()).invoke(annotation);
+					ctAnnotation.addValue(ctMethod.getSimpleName(), value);
+				} catch (Exception ignore) {
+					ctAnnotation.addValue(ctMethod.getSimpleName(), "");
+				}
+			}
+		});
 		super.visitAnnotation(annotation);
 		exit();
 
--- a/src/main/java/spoon/support/visitor/java/JavaReflectionVisitorImpl.java
+++ b/src/main/java/spoon/support/visitor/java/JavaReflectionVisitorImpl.java
@@ -154,6 +154,9 @@ class JavaReflectionVisitorImpl implements JavaReflectionVisitor {
 	public void visitAnnotation(Annotation annotation) {
 		if (annotation.annotationType() != null) {
 			visitClassReference(annotation.annotationType());
+			for (RtMethod method : getDeclaredMethods(annotation.annotationType())) {
+				visitMethod(method);
+			}
 		}
 	}
 
