--- a/src/main/java/io/vertx/ext/jdbc/impl/JDBCConnectionImpl.java
+++ b/src/main/java/io/vertx/ext/jdbc/impl/JDBCConnectionImpl.java
@@ -47,7 +47,7 @@ class JDBCConnectionImpl implements SQLConnection {
 
   private final JDBCStatementHelper helper;
 
-  private SQLOptions options = new SQLOptions().setAutoGeneratedKeys(true);
+  private SQLOptions options;
 
   public JDBCConnectionImpl(Context context, JDBCStatementHelper helper, Connection conn, PoolMetrics metrics, Object metric) {
     this.vertx = context.owner();
diff --git a/src/main/java/io/vertx/ext/jdbc/impl/actions/JDBCUpdate.java b/src/main/java/io/vertx/ext/jdbc/impl/actions/JDBCUpdate.java
index d7ff950..a5df713 100644
--- a/src/main/java/io/vertx/ext/jdbc/impl/actions/JDBCUpdate.java
+++ b/src/main/java/io/vertx/ext/jdbc/impl/actions/JDBCUpdate.java
@@ -42,42 +42,43 @@ public class JDBCUpdate extends AbstractJDBCAction<UpdateResult> {
   }
 
   private PreparedStatement prepareStatement(Connection conn) throws SQLException {
-    if (options != null) {
-      if (options.isAutoGeneratedKeys() && options.getAutoGeneratedKeysIndexes() == null) {
-        generateKeys = true;
-        return conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
-      }
+    if (options == null) {
+      generateKeys = true;
+      return conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
+    }
 
-      if (options.getAutoGeneratedKeysIndexes() != null) {
-        // attempt to guess type from index 0
-        if (options.getAutoGeneratedKeysIndexes().getValue(0) instanceof String) {
-          String[] columnNames = new String[options.getAutoGeneratedKeysIndexes().size()];
-          for (int i = 0; i < columnNames.length; i++) {
-            columnNames[i] = options.getAutoGeneratedKeysIndexes().getString(i);
-          }
+    if (!options.isAutoGeneratedKeys()) {
+      generateKeys = false;
+      return conn.prepareStatement(sql, Statement.NO_GENERATED_KEYS);
+    }
 
-          generateKeys = true;
-          return conn.prepareStatement(sql, columnNames);
-        }
+    if (options.getAutoGeneratedKeysIndexes() == null) {
+      generateKeys = true;
+      return conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
+    }
 
-        // attempt to guess type from index 0
-        if (options.getAutoGeneratedKeysIndexes().getValue(0) instanceof Integer) {
-          int[] columnIndexes = new int[options.getAutoGeneratedKeysIndexes().size()];
-          for (int i = 0; i < columnIndexes.length; i++) {
-            columnIndexes[i] = options.getAutoGeneratedKeysIndexes().getInteger(i);
-          }
+    if (options.getAutoGeneratedKeysIndexes().getValue(0) instanceof String) {
+      String[] columnNames = new String[options.getAutoGeneratedKeysIndexes().size()];
+      for (int i = 0; i < columnNames.length; i++) {
+        columnNames[i] = options.getAutoGeneratedKeysIndexes().getString(i);
+      }
 
-          generateKeys = true;
-          return conn.prepareStatement(sql, columnIndexes);
-        }
+      generateKeys = true;
+      return conn.prepareStatement(sql, columnNames);
+    }
 
-        // invalid type
-        throw new SQLException("Invalid type for auto generated keys");
+    if (options.getAutoGeneratedKeysIndexes().getValue(0) instanceof Number) {
+      int[] columnIndexes = new int[options.getAutoGeneratedKeysIndexes().size()];
+      for (int i = 0; i < columnIndexes.length; i++) {
+        columnIndexes[i] = options.getAutoGeneratedKeysIndexes().getInteger(i);
       }
+
+      generateKeys = true;
+      return conn.prepareStatement(sql, columnIndexes);
     }
 
-    generateKeys = false;
-    return conn.prepareStatement(sql, Statement.NO_GENERATED_KEYS);
+    // invalid type
+    throw new SQLException("Invalid type for auto generated keys");
   }
 
   @Override
