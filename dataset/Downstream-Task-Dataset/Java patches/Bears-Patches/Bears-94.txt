--- a/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java
+++ b/src/main/java/org/springframework/data/util/ParameterizedTypeInformation.java
@@ -52,35 +52,6 @@ class ParameterizedTypeInformation<T> extends ParentTypeAwareTypeInformation<T>
 		this.type = type;
 	}
 
	/**
	 * Resolves the type variables to be used. Uses the parent's type variable map but overwrites variables locally
	 * declared.
	 * 
	 * @param type must not be {@literal null}.
	 * @param resolvedType must not be {@literal null}.
	 * @param parent must not be {@literal null}.
	 * @return
	 */
	private static Map<TypeVariable<?>, Type> calculateTypeVariables(ParameterizedType type, Class<?> resolvedType,
			TypeDiscoverer<?> parent) {

		TypeVariable<?>[] typeParameters = resolvedType.getTypeParameters();
		Type[] arguments = type.getActualTypeArguments();

		Map<TypeVariable<?>, Type> localTypeVariables = new HashMap<TypeVariable<?>, Type>(parent.getTypeVariableMap());

		for (int i = 0; i < typeParameters.length; i++) {
-
-			Type value = arguments[i];
-
-			if (!(value instanceof TypeVariable)) {
-				localTypeVariables.put(typeParameters[i], value);
-			}
+			localTypeVariables.put(typeParameters[i], flattenTypeVariable(arguments[i], localTypeVariables));
		}

		return localTypeVariables;
	}

 	/*
 	 * (non-Javadoc)
 	 * @see org.springframework.data.util.TypeDiscoverer#doGetMapValueType()
--- a/src/main/java/org/springframework/data/util/TypeDiscoverer.java
+++ b/src/main/java/org/springframework/data/util/TypeDiscoverer.java
@@ -134,7 +134,7 @@ class TypeDiscoverer<S> implements TypeInformation<S> {
 
 		if (fieldType instanceof TypeVariable) {
 			TypeVariable<?> variable = (TypeVariable<?>) fieldType;
-			return new TypeVariableTypeInformation(variable, type, this);
+			return new TypeVariableTypeInformation(variable, this);
 		}
 
 		if (fieldType instanceof GenericArrayType) {
--- a/src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java
+++ b/src/main/java/org/springframework/data/util/TypeVariableTypeInformation.java
@@ -32,61 +31,22 @@ import org.springframework.util.Assert;
 class TypeVariableTypeInformation<T> extends ParentTypeAwareTypeInformation<T> {
 
 	private final TypeVariable<?> variable;
-	private final Type owningType;
 
 	/**
	 * Creates a bew {@link TypeVariableTypeInformation} for the given {@link TypeVariable} owning {@link Type} and parent
 	 * {@link TypeDiscoverer}.
 	 * 
 	 * @param variable must not be {@literal null}
 	 * @param owningType must not be {@literal null}
 	 * @param parent must not be {@literal null}.
 	 */
-	public TypeVariableTypeInformation(TypeVariable<?> variable, Type owningType, TypeDiscoverer<?> parent) {
+	public TypeVariableTypeInformation(TypeVariable<?> variable, TypeDiscoverer<?> parent) {
 
 		super(variable, parent);
 
 		Assert.notNull(variable, "TypeVariable must not be null!");
 
 		this.variable = variable;
-		this.owningType = owningType;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.springframework.data.util.TypeDiscoverer#getType()
-	 */
-	@Override
-	public Class<T> getType() {
-
-		int index = getIndex(variable);
-
-		if (owningType instanceof ParameterizedType && index != -1) {
-			Type fieldType = ((ParameterizedType) owningType).getActualTypeArguments()[index];
-			return resolveType(fieldType);
-		}
-
-		return resolveType(variable);
-	}
-
-	/**
-	 * Returns the index of the type parameter binding the given {@link TypeVariable}.
-	 * 
-	 * @param variable
-	 * @return
-	 */
-	private int getIndex(TypeVariable<?> variable) {
-
-		Class<?> rawType = resolveType(owningType);
-		TypeVariable<?>[] typeParameters = rawType.getTypeParameters();
-
-		for (int i = 0; i < typeParameters.length; i++) {
-			if (variable.equals(typeParameters[i])) {
-				return i;
-			}
-		}
-
-		return -1;
 	}
 
 	/*
