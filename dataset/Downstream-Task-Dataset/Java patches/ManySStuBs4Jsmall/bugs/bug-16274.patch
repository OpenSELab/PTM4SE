diff --git a/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java b/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java
index 5d54cd5..73d69df 100644
--- a/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java
+++ b/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java
@@ -32,7 +32,7 @@
  * will be placed into the distributed map and they will stay in-memory until they are
  * explicitly removed or implicitly evicted (if eviction is configured).
  */
-public interface MapLoader {
+public interface MapLoader<K, V> {
     /**
      * Loads the value of a given key. If distributed map doesn't contain the value
      * for the given key then Hazelcast will call implementation's load (key) method
@@ -42,7 +42,7 @@
      * @param key
      * @return value of the key
      */
-    Object load(Object key);
+    V load(K key);
 
     /**
      * Loads given keys. This is batch load operation so that implementation can
@@ -51,5 +51,5 @@
      * @param keys keys of the values entries to load
      * @return map of loaded key-value pairs.
      */
-    Map loadAll(Collection keys);
+    Map<K, V> loadAll(Collection<K> keys);
 }
\ No newline at end of file
diff --git a/hazelcast/src/main/java/com/hazelcast/core/MapStore.java b/hazelcast/src/main/java/com/hazelcast/core/MapStore.java
index bf2de23..48993c6 100644
--- a/hazelcast/src/main/java/com/hazelcast/core/MapStore.java
+++ b/hazelcast/src/main/java/com/hazelcast/core/MapStore.java
@@ -36,14 +36,14 @@
  * Store implementation can be called synchronously (write-through)
  * or asynchronously (write-behind) depending on the configuration.
  */
-public interface MapStore {
+public interface MapStore<K, V> {
     /**
      * Stores the key-value pair.
      *
      * @param key   key of the entry to store
      * @param value value of the entry to store
      */
-    void store(Object key, Object value);
+    void store(K key, V value);
 
     /**
      * Stores multiple entries. Implementation of this method can optimize the
@@ -51,19 +51,19 @@
      *
      * @param map map of entries to store
      */
-    void storeAll(Map map);
+    void storeAll(Map<K, V> map);
 
     /**
      * Deletes the entry with a given key from the store.
      *
      * @param key key to delete from the store.
      */
-    void delete(Object key);
+    void delete(K key);
 
     /**
      * Deletes multiple entries from the store.
      *
      * @param keys keys of the entries to delete.
      */
-    void deleteAll(Collection keys);
+    void deleteAll(Collection<K> keys);
 }
\ No newline at end of file
diff --git a/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java b/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java
index 5d54cd5..73d69df 100644
--- a/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java
+++ b/hazelcast/src/main/java/com/hazelcast/core/MapLoader.java
@@ -32,7 +32,7 @@
  * will be placed into the distributed map and they will stay in-memory until they are
  * explicitly removed or implicitly evicted (if eviction is configured).
  */
-public interface MapLoader {
+public interface MapLoader<K, V> {
     /**
      * Loads the value of a given key. If distributed map doesn't contain the value
      * for the given key then Hazelcast will call implementation's load (key) method
@@ -42,7 +42,7 @@
      * @param key
      * @return value of the key
      */
-    Object load(Object key);
+    V load(K key);
 
     /**
      * Loads given keys. This is batch load operation so that implementation can
@@ -51,5 +51,5 @@
      * @param keys keys of the values entries to load
      * @return map of loaded key-value pairs.
      */
-    Map loadAll(Collection keys);
+    Map<K, V> loadAll(Collection<K> keys);
 }
\ No newline at end of file
