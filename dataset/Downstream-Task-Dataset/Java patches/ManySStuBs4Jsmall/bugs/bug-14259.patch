diff --git a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java
index f02383c..331bab2 100644
--- a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java
+++ b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java
@@ -50,23 +50,26 @@
   }
 
   public void testPassWithOneNew() {
-    String js =
-        "var goog = {};" +
-        "goog.require('foo.bar.goo'); var bar = new foo.bar.goo();";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('foo.bar.goo');",
+        "var bar = new foo.bar.goo();");
     testSame(js);
   }
 
   public void testPassWithOneNewOuterClass() {
-    String js =
-        "var goog = {};" +
-        "goog.require('goog.foo.Bar'); var bar = new goog.foo.Bar.Baz();";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.Bar');",
+        "var bar = new goog.foo.Bar.Baz();");
     testSame(js);
   }
 
   public void testPassWithOneNewOuterClassWithUpperPrefix() {
-    String js =
-        "var goog = {};" +
-        "goog.require('goog.foo.IDBar'); var bar = new goog.foo.IDBar.Baz();";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.IDBar');",
+        "var bar = new goog.foo.IDBar.Baz();");
     testSame(js);
   }
 
@@ -77,17 +80,20 @@
   }
 
   public void testPassWithTwoNewNodes() {
-    String js =
-        "var goog = {};" +
-        "goog.require('goog.foo.Bar');goog.require('goog.foo.Baz');" +
-        "var str = new goog.foo.Bar('g4'), num = new goog.foo.Baz(5); ";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.Bar');",
+        "goog.require('goog.foo.Baz');",
+        "var str = new goog.foo.Bar('g4'),",
+        "    num = new goog.foo.Baz(5);");
     testSame(js);
   }
 
   public void testPassWithNestedNewNodes() {
-    String js =
-        "var goog = {}; goog.require('goog.foo.Bar'); " +
-        "var str = new goog.foo.Bar(new goog.foo.Bar('5')); ";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.Bar');",
+        "var str = new goog.foo.Bar(new goog.foo.Bar('5'));");
     testSame(js);
   }
 
@@ -174,11 +180,13 @@
   }
 
   public void testNewNodesMeta() {
-    String js =
-        "var goog = {};" +
-        "/** @constructor */goog.ui.Option = function(){};"
-            + "goog.ui.Option.optionDecorator = function(){"
-            + "  return new goog.ui.Option(); };";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "/** @constructor */",
+        "goog.ui.Option = function() {};",
+        "goog.ui.Option.optionDecorator = function() {",
+        "  return new goog.ui.Option();",
+        "};");
     testSame(js);
   }
 
@@ -215,9 +223,13 @@
   public void testNewNodesWithMoreThanOneFile() {
     // Bar is created, and goog.require()ed, but in different files.
     String[] js = new String[] {
-        "var goog = {};" +
-        "/** @constructor */ function Bar() {}" +
-        "goog.require('Bar');",
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "function Bar() {}",
+            "/** @suppress {extraRequire} */",
+            "goog.require('Bar');"),
+
         "var bar = new Bar();"};
     String warning = "'Bar' used but not goog.require'd";
     test(js, js, null, MISSING_REQUIRE_WARNING, warning);
@@ -225,8 +237,11 @@
 
   public void testPassWithoutWarningsAndMultipleFiles() {
     String[] js = new String[] {
-        "var goog = {};" +
-        "goog.require('Foo'); var foo = new Foo();",
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "goog.require('Foo');",
+            "var foo = new Foo();"),
+
         "goog.require('Bar'); var bar = new Bar();"};
     testSame(js);
   }
@@ -234,9 +249,13 @@
   public void testFailWithWarningsAndMultipleFiles() {
     /* goog.require is in the code base, but not in the correct file */
     String[] js = new String[] {
-        "var goog = {};" +
-        "/** @constructor */ function Bar() {}" +
-        "goog.require('Bar');",
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "function Bar() {}",
+            "/** @suppress {extraRequire} */",
+            "goog.require('Bar');"),
+
         "var bar = new Bar();"};
     String warning = "'Bar' used but not goog.require'd";
     test(js, js, null, MISSING_REQUIRE_WARNING, warning);
@@ -275,66 +294,73 @@
   }
 
   public void testNoWarningsForThisConstructor() {
-    String js =
-      "var goog = {};" +
-      "/** @constructor */goog.Foo = function() {};" +
-      "goog.Foo.bar = function() {" +
-      "  return new this.constructor; " +
-      "};";
+    String js = Joiner.on('\n').join(
+      "var goog = {};",
+      "/** @constructor */goog.Foo = function() {};",
+      "goog.Foo.bar = function() {",
+      "  return new this.constructor;",
+      "};");
     testSame(js);
   }
 
   public void testBug2062487() {
     testSame(
-      "var goog = {};" +
-      "/** @constructor */goog.Foo = function() {" +
-      "  /** @constructor */ this.x_ = function() {};" +
-      "  this.y_ = new this.x_();" +
-      "};");
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "goog.Foo = function() {",
+            "  /** @constructor */",
+            "  this.x_ = function() {};",
+            "  this.y_ = new this.x_();",
+            "};"));
   }
 
   public void testIgnoreDuplicateWarningsForSingleClasses(){
     // no use telling them the same thing twice
     String[] js = new String[]{
-      "var goog = {};" +
-      "/** @constructor */goog.Foo = function() {};" +
-      "goog.Foo.bar = function(){" +
-      "  var first = new goog.Forgot();" +
-      "  var second = new goog.Forgot();" +
-      "};"};
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "goog.Foo = function() {};",
+            "goog.Foo.bar = function(){",
+            "  var first = new goog.Forgot();",
+            "  var second = new goog.Forgot();",
+            "};")
+    };
     String warning = "'goog.Forgot' used but not goog.require'd";
     test(js, js, null, MISSING_REQUIRE_WARNING, warning);
   }
 
   public void testVarConstructorName() {
-    String js = "/** @type {function(new:Date)} */var bar = Date;" +
-        "new bar();";
+    String js = "/** @type {function(new:Date)} */var bar = Date; new bar();";
     testSame(js);
   }
 
   public void testVarConstructorFunction() {
-    String js = "/** @type {function(new:Date)} */var bar = function() {};" +
-        "new bar();";
+    String js = "/** @type {function(new:Date)} */var bar = function() {}; new bar();";
     testSame(js);
   }
 
   public void testAssignConstructorName() {
-    String js = "var foo = {};" +
-        "/** @type {function(new:Date)} */foo.bar = Date;" +
-        "new foo.bar();";
+    String js = Joiner.on('\n').join(
+        "var foo = {};",
+        "/** @type {function(new:Date)} */",
+        "foo.bar = Date;",
+        "new foo.bar();");
     testSame(js);
   }
 
   public void testAssignConstructorFunction() {
-    String js = "var foo = {};" +
-        "/** @type {function(new:Date)} */foo.bar = function() {};" +
-        "new foo.bar();";
+    String js = Joiner.on('\n').join(
+        "var foo = {};",
+        "/** @type {function(new:Date)} */",
+        "foo.bar = function() {};",
+        "new foo.bar();");
     testSame(js);
   }
 
   public void testConstructorFunctionReference() {
-    String js = "/** @type {function(new:Date)} */function bar() {}" +
-        "new bar();";
+    String js = "/** @type {function(new:Date)} */function bar() {}; new bar();";
     testSame(js);
   }
 
diff --git a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java
index f02383c..331bab2 100644
--- a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java
+++ b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java
@@ -50,23 +50,26 @@
   }
 
   public void testPassWithOneNew() {
-    String js =
-        "var goog = {};" +
-        "goog.require('foo.bar.goo'); var bar = new foo.bar.goo();";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('foo.bar.goo');",
+        "var bar = new foo.bar.goo();");
     testSame(js);
   }
 
   public void testPassWithOneNewOuterClass() {
-    String js =
-        "var goog = {};" +
-        "goog.require('goog.foo.Bar'); var bar = new goog.foo.Bar.Baz();";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.Bar');",
+        "var bar = new goog.foo.Bar.Baz();");
     testSame(js);
   }
 
   public void testPassWithOneNewOuterClassWithUpperPrefix() {
-    String js =
-        "var goog = {};" +
-        "goog.require('goog.foo.IDBar'); var bar = new goog.foo.IDBar.Baz();";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.IDBar');",
+        "var bar = new goog.foo.IDBar.Baz();");
     testSame(js);
   }
 
@@ -77,17 +80,20 @@
   }
 
   public void testPassWithTwoNewNodes() {
-    String js =
-        "var goog = {};" +
-        "goog.require('goog.foo.Bar');goog.require('goog.foo.Baz');" +
-        "var str = new goog.foo.Bar('g4'), num = new goog.foo.Baz(5); ";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.Bar');",
+        "goog.require('goog.foo.Baz');",
+        "var str = new goog.foo.Bar('g4'),",
+        "    num = new goog.foo.Baz(5);");
     testSame(js);
   }
 
   public void testPassWithNestedNewNodes() {
-    String js =
-        "var goog = {}; goog.require('goog.foo.Bar'); " +
-        "var str = new goog.foo.Bar(new goog.foo.Bar('5')); ";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "goog.require('goog.foo.Bar');",
+        "var str = new goog.foo.Bar(new goog.foo.Bar('5'));");
     testSame(js);
   }
 
@@ -174,11 +180,13 @@
   }
 
   public void testNewNodesMeta() {
-    String js =
-        "var goog = {};" +
-        "/** @constructor */goog.ui.Option = function(){};"
-            + "goog.ui.Option.optionDecorator = function(){"
-            + "  return new goog.ui.Option(); };";
+    String js = Joiner.on('\n').join(
+        "var goog = {};",
+        "/** @constructor */",
+        "goog.ui.Option = function() {};",
+        "goog.ui.Option.optionDecorator = function() {",
+        "  return new goog.ui.Option();",
+        "};");
     testSame(js);
   }
 
@@ -215,9 +223,13 @@
   public void testNewNodesWithMoreThanOneFile() {
     // Bar is created, and goog.require()ed, but in different files.
     String[] js = new String[] {
-        "var goog = {};" +
-        "/** @constructor */ function Bar() {}" +
-        "goog.require('Bar');",
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "function Bar() {}",
+            "/** @suppress {extraRequire} */",
+            "goog.require('Bar');"),
+
         "var bar = new Bar();"};
     String warning = "'Bar' used but not goog.require'd";
     test(js, js, null, MISSING_REQUIRE_WARNING, warning);
@@ -225,8 +237,11 @@
 
   public void testPassWithoutWarningsAndMultipleFiles() {
     String[] js = new String[] {
-        "var goog = {};" +
-        "goog.require('Foo'); var foo = new Foo();",
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "goog.require('Foo');",
+            "var foo = new Foo();"),
+
         "goog.require('Bar'); var bar = new Bar();"};
     testSame(js);
   }
@@ -234,9 +249,13 @@
   public void testFailWithWarningsAndMultipleFiles() {
     /* goog.require is in the code base, but not in the correct file */
     String[] js = new String[] {
-        "var goog = {};" +
-        "/** @constructor */ function Bar() {}" +
-        "goog.require('Bar');",
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "function Bar() {}",
+            "/** @suppress {extraRequire} */",
+            "goog.require('Bar');"),
+
         "var bar = new Bar();"};
     String warning = "'Bar' used but not goog.require'd";
     test(js, js, null, MISSING_REQUIRE_WARNING, warning);
@@ -275,66 +294,73 @@
   }
 
   public void testNoWarningsForThisConstructor() {
-    String js =
-      "var goog = {};" +
-      "/** @constructor */goog.Foo = function() {};" +
-      "goog.Foo.bar = function() {" +
-      "  return new this.constructor; " +
-      "};";
+    String js = Joiner.on('\n').join(
+      "var goog = {};",
+      "/** @constructor */goog.Foo = function() {};",
+      "goog.Foo.bar = function() {",
+      "  return new this.constructor;",
+      "};");
     testSame(js);
   }
 
   public void testBug2062487() {
     testSame(
-      "var goog = {};" +
-      "/** @constructor */goog.Foo = function() {" +
-      "  /** @constructor */ this.x_ = function() {};" +
-      "  this.y_ = new this.x_();" +
-      "};");
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "goog.Foo = function() {",
+            "  /** @constructor */",
+            "  this.x_ = function() {};",
+            "  this.y_ = new this.x_();",
+            "};"));
   }
 
   public void testIgnoreDuplicateWarningsForSingleClasses(){
     // no use telling them the same thing twice
     String[] js = new String[]{
-      "var goog = {};" +
-      "/** @constructor */goog.Foo = function() {};" +
-      "goog.Foo.bar = function(){" +
-      "  var first = new goog.Forgot();" +
-      "  var second = new goog.Forgot();" +
-      "};"};
+        Joiner.on('\n').join(
+            "var goog = {};",
+            "/** @constructor */",
+            "goog.Foo = function() {};",
+            "goog.Foo.bar = function(){",
+            "  var first = new goog.Forgot();",
+            "  var second = new goog.Forgot();",
+            "};")
+    };
     String warning = "'goog.Forgot' used but not goog.require'd";
     test(js, js, null, MISSING_REQUIRE_WARNING, warning);
   }
 
   public void testVarConstructorName() {
-    String js = "/** @type {function(new:Date)} */var bar = Date;" +
-        "new bar();";
+    String js = "/** @type {function(new:Date)} */var bar = Date; new bar();";
     testSame(js);
   }
 
   public void testVarConstructorFunction() {
-    String js = "/** @type {function(new:Date)} */var bar = function() {};" +
-        "new bar();";
+    String js = "/** @type {function(new:Date)} */var bar = function() {}; new bar();";
     testSame(js);
   }
 
   public void testAssignConstructorName() {
-    String js = "var foo = {};" +
-        "/** @type {function(new:Date)} */foo.bar = Date;" +
-        "new foo.bar();";
+    String js = Joiner.on('\n').join(
+        "var foo = {};",
+        "/** @type {function(new:Date)} */",
+        "foo.bar = Date;",
+        "new foo.bar();");
     testSame(js);
   }
 
   public void testAssignConstructorFunction() {
-    String js = "var foo = {};" +
-        "/** @type {function(new:Date)} */foo.bar = function() {};" +
-        "new foo.bar();";
+    String js = Joiner.on('\n').join(
+        "var foo = {};",
+        "/** @type {function(new:Date)} */",
+        "foo.bar = function() {};",
+        "new foo.bar();");
     testSame(js);
   }
 
   public void testConstructorFunctionReference() {
-    String js = "/** @type {function(new:Date)} */function bar() {}" +
-        "new bar();";
+    String js = "/** @type {function(new:Date)} */function bar() {}; new bar();";
     testSame(js);
   }
 
