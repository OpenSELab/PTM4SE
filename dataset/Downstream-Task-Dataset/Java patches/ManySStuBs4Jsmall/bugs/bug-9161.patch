diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index da90b2f..cf423bb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -52,8 +52,8 @@
      * Optional prefix for warning suppressions that are only intended to be
      * recognized by checkstyle. For instance, to suppress {@code
      * FallThroughCheck} only in checkstyle (and not in javac), use the
-     * suppression {@code "checkstyle:fallthrough"}. To suppress the warning in
-     * both tools, just use {@code "fallthrough"}.
+     * suppression {@code "checkstyle:fallthrough"} or {@code "checkstyle:FallThrough"}.
+     * To suppress the warning in both tools, just use {@code "fallthrough"}.
      */
     public static final String CHECKSTYLE_PREFIX = "checkstyle:";
 
@@ -163,7 +163,7 @@
                         .getLastColumn() >= column;
             final boolean nameMatches =
                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())
-                    || entry.getCheckName().equals(checkAlias);
+                    || entry.getCheckName().equalsIgnoreCase(checkAlias);
             if (afterStart && beforeEnd && nameMatches) {
                 return true;
             }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java
index 109def3..4efd42c 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java
@@ -29,7 +29,7 @@
     private int L; private int X; // L should NOT fail, X should
 
     // test "checkstyle:" prefix
-    @SuppressWarnings("checkstyle:constantname")
+    @SuppressWarnings("checkstyle:ConstantName")
     private static final int m = 0; // should NOT fail ConstantNameCheck
     private static final int n = 0; // should fail ConstantNameCheck
 
@@ -48,7 +48,7 @@
     }
 
     // test fully qualified annotation name
-    @java.lang.SuppressWarnings("illegalcatch")
+    @java.lang.SuppressWarnings("illegalCatch")
     public void needsToCatchException()
     {
         try {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index da90b2f..cf423bb 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -52,8 +52,8 @@
      * Optional prefix for warning suppressions that are only intended to be
      * recognized by checkstyle. For instance, to suppress {@code
      * FallThroughCheck} only in checkstyle (and not in javac), use the
-     * suppression {@code "checkstyle:fallthrough"}. To suppress the warning in
-     * both tools, just use {@code "fallthrough"}.
+     * suppression {@code "checkstyle:fallthrough"} or {@code "checkstyle:FallThrough"}.
+     * To suppress the warning in both tools, just use {@code "fallthrough"}.
      */
     public static final String CHECKSTYLE_PREFIX = "checkstyle:";
 
@@ -163,7 +163,7 @@
                         .getLastColumn() >= column;
             final boolean nameMatches =
                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())
-                    || entry.getCheckName().equals(checkAlias);
+                    || entry.getCheckName().equalsIgnoreCase(checkAlias);
             if (afterStart && beforeEnd && nameMatches) {
                 return true;
             }
