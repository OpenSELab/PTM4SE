diff --git a/src/com/google/javascript/jscomp/JSDocInfoPrinter.java b/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
index a3ed329..075a1e0 100644
--- a/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
+++ b/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
@@ -82,13 +82,13 @@
       for (String name : info.getParameterNames()) {
         sb.append("@param {");
         appendTypeNode(sb, info.getParameterType(name).getRoot());
-        sb.append("} " + name + " ");
+        sb.append("} " + name + "\n");
       }
     }
     if (info.hasReturnType()) {
       sb.append("@return {");
       appendTypeNode(sb, info.getReturnType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasThisType()) {
       sb.append("@this {");
@@ -98,7 +98,7 @@
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasBaseType()) {
       sb.append("@extends {");
@@ -108,7 +108,7 @@
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     for (JSTypeExpression type : info.getImplementedInterfaces()) {
       sb.append("@implements {");
@@ -118,12 +118,12 @@
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasTypedefType()) {
       sb.append("@typedef {");
       appendTypeNode(sb, info.getTypedefType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasType()) {
       if (info.isInlineType()) {
@@ -133,18 +133,18 @@
       } else {
         sb.append("@type {");
         appendTypeNode(sb, info.getType().getRoot());
-        sb.append("} ");
+        sb.append("}\n");
       }
     }
     if (!info.getThrownTypes().isEmpty()) {
       sb.append("@throws {");
       appendTypeNode(sb, info.getThrownTypes().get(0).getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasEnumParameterType()) {
       sb.append("@enum {");
       appendTypeNode(sb, info.getEnumParameterType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     sb.append("*/");
     return sb.toString();
diff --git a/test/com/google/javascript/jscomp/CodePrinterTest.java b/test/com/google/javascript/jscomp/CodePrinterTest.java
index 39672c9..0fda5fb 100644
--- a/test/com/google/javascript/jscomp/CodePrinterTest.java
+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java
@@ -1863,12 +1863,12 @@
 
   public void testPreserveTypeAnnotations() {
     preserveTypeAnnotations = true;
-    assertPrintSame("/**@type {foo} */var bar");
+    assertPrintSame("/**@type {foo}\n*/var bar");
     assertPrintSame(
         "function/** void */f(/** string */s,/** number */n){}");
 
     preserveTypeAnnotations = false;
-    assertPrint("/** @type {foo} */\nvar bar;", "var bar");
+    assertPrint("/** @type {foo}\n*/\nvar bar;", "var bar");
   }
 
   public void testDefaultParameters() {
diff --git a/test/com/google/javascript/jscomp/JSDocInfoPrinterTest.java b/test/com/google/javascript/jscomp/JSDocInfoPrinterTest.java
index 106e280..1635e49 100644
--- a/test/com/google/javascript/jscomp/JSDocInfoPrinterTest.java
+++ b/test/com/google/javascript/jscomp/JSDocInfoPrinterTest.java
@@ -65,57 +65,57 @@
     builder.recordParameter("bar",
         new JSTypeExpression(JsDocInfoParser.parseTypeString("string"), ""));
     JSDocInfo info = builder.buildAndReset();
-    assertEquals("/**@param {number} foo @param {string} bar */",
+    assertEquals("/**@param {number} foo\n@param {string} bar\n*/",
         JSDocInfoPrinter.print(info));
     builder.recordParameter("foo",
         new JSTypeExpression(new Node(Token.EQUALS, IR.string("number")), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@param {number=} foo */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@param {number=} foo\n*/", JSDocInfoPrinter.print(info));
     builder.recordParameter("foo",
         new JSTypeExpression(new Node(Token.ELLIPSIS, IR.string("number")), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@param {...number} foo */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@param {...number} foo\n*/", JSDocInfoPrinter.print(info));
   }
 
   public void testTypes() {
     builder.recordReturnType(
         new JSTypeExpression(JsDocInfoParser.parseTypeString("number|string"), ""));
     JSDocInfo info = builder.buildAndReset();
-    assertEquals("/**@return {(number|string)} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@return {(number|string)}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordParameter("foo",
         new JSTypeExpression(new Node(Token.ELLIPSIS, IR.string("number")), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@param {...number} foo */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@param {...number} foo\n*/", JSDocInfoPrinter.print(info));
     builder.recordThrowType(new JSTypeExpression(new Node(Token.STAR), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@throws {*} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@throws {*}\n*/", JSDocInfoPrinter.print(info));
     builder.recordTypedef(new JSTypeExpression(new Node(Token.QMARK), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@typedef {?} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@typedef {?}\n*/", JSDocInfoPrinter.print(info));
     builder.recordType(new JSTypeExpression(new Node(Token.VOID), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {void} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {void}\n*/", JSDocInfoPrinter.print(info));
 
     // Object types
     builder.recordEnumParameterType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("{foo:number,bar:string}"), ""));
     info = builder.buildAndReset();
     assertEquals(
-        "/**@enum {{foo:number,bar:string}} */", JSDocInfoPrinter.print(info));
+        "/**@enum {{foo:number,bar:string}}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordEnumParameterType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("{foo:(number|string)}"), ""));
     info = builder.buildAndReset();
     assertEquals(
-        "/**@enum {{foo:(number|string)}} */", JSDocInfoPrinter.print(info));
+        "/**@enum {{foo:(number|string)}}\n*/", JSDocInfoPrinter.print(info));
 
     // Array types
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("!Array<(number|string)>"), ""));
     info = builder.buildAndReset();
     assertEquals(
-        "/**@type {!Array<(number|string)>} */", JSDocInfoPrinter.print(info));
+        "/**@type {!Array<(number|string)>}\n*/", JSDocInfoPrinter.print(info));
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("Array"), ""));
     builder.recordInlineType();
@@ -127,12 +127,12 @@
         JsDocInfoParser.parseTypeString("!Set<number|string>"), ""));
     info = builder.buildAndReset();
     assertEquals(
-        "/**@type {!Set<(number|string)>} */", JSDocInfoPrinter.print(info));
+        "/**@type {!Set<(number|string)>}\n*/", JSDocInfoPrinter.print(info));
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("!Map<!Foo, !Bar<!Baz|string>>"), ""));
     info = builder.buildAndReset();
     assertEquals(
-        "/**@type {!Map<!Foo,!Bar<(!Baz|string)>>} */", JSDocInfoPrinter.print(info));
+        "/**@type {!Map<!Foo,!Bar<(!Baz|string)>>}\n*/", JSDocInfoPrinter.print(info));
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("Map"), ""));
     builder.recordInlineType();
@@ -144,17 +144,17 @@
     builder.recordImplementedInterface(
         new JSTypeExpression(JsDocInfoParser.parseTypeString("Foo"), ""));
     JSDocInfo info = builder.buildAndReset();
-    assertEquals("/**@implements {Foo} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@implements {Foo}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordImplementedInterface(
         new JSTypeExpression(JsDocInfoParser.parseTypeString("!Foo"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@implements {Foo} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@implements {Foo}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordBaseType(
         new JSTypeExpression(JsDocInfoParser.parseTypeString("Foo"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@extends {Foo} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@extends {Foo}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordBaseType(
         new JSTypeExpression(JsDocInfoParser.parseTypeString("!Foo"), ""));
@@ -163,7 +163,7 @@
     builder.recordImplementedInterface(
         new JSTypeExpression(JsDocInfoParser.parseTypeString("Bar.Baz"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@extends {Foo} @implements {Bar} @implements {Bar.Baz} */",
+    assertEquals("/**@extends {Foo}\n@implements {Bar}\n@implements {Bar.Baz}\n*/",
         JSDocInfoPrinter.print(info));
   }
 
@@ -171,54 +171,54 @@
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function()"), ""));
     JSDocInfo info = builder.buildAndReset();
-    assertEquals("/**@type {function()} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function()}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(foo,bar)"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(foo,bar)} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function(foo,bar)}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(foo):number"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(foo):number} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function(foo):number}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(new:goog,number)"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(new:goog,number)} */",
+    assertEquals("/**@type {function(new:goog,number)}\n*/",
         JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(this:number,...)"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(this:number,...)} */",
+    assertEquals("/**@type {function(this:number,...)}\n*/",
         JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(...number)"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(...number)} */",
+    assertEquals("/**@type {function(...number)}\n*/",
         JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function():void"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function():void} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function():void}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function():number"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function():number} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function():number}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(string):number"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(string):number} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function(string):number}\n*/", JSDocInfoPrinter.print(info));
 
     builder.recordType(new JSTypeExpression(
         JsDocInfoParser.parseTypeString("function(this:foo):?"), ""));
     info = builder.buildAndReset();
-    assertEquals("/**@type {function(this:foo):?} */", JSDocInfoPrinter.print(info));
+    assertEquals("/**@type {function(this:foo):?}\n*/", JSDocInfoPrinter.print(info));
   }
 }
diff --git a/src/com/google/javascript/jscomp/JSDocInfoPrinter.java b/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
index a3ed329..075a1e0 100644
--- a/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
+++ b/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
@@ -82,13 +82,13 @@
       for (String name : info.getParameterNames()) {
         sb.append("@param {");
         appendTypeNode(sb, info.getParameterType(name).getRoot());
-        sb.append("} " + name + " ");
+        sb.append("} " + name + "\n");
       }
     }
     if (info.hasReturnType()) {
       sb.append("@return {");
       appendTypeNode(sb, info.getReturnType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasThisType()) {
       sb.append("@this {");
@@ -98,7 +98,7 @@
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasBaseType()) {
       sb.append("@extends {");
@@ -108,7 +108,7 @@
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     for (JSTypeExpression type : info.getImplementedInterfaces()) {
       sb.append("@implements {");
@@ -118,12 +118,12 @@
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasTypedefType()) {
       sb.append("@typedef {");
       appendTypeNode(sb, info.getTypedefType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasType()) {
       if (info.isInlineType()) {
@@ -133,18 +133,18 @@
       } else {
         sb.append("@type {");
         appendTypeNode(sb, info.getType().getRoot());
-        sb.append("} ");
+        sb.append("}\n");
       }
     }
     if (!info.getThrownTypes().isEmpty()) {
       sb.append("@throws {");
       appendTypeNode(sb, info.getThrownTypes().get(0).getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasEnumParameterType()) {
       sb.append("@enum {");
       appendTypeNode(sb, info.getEnumParameterType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     sb.append("*/");
     return sb.toString();
