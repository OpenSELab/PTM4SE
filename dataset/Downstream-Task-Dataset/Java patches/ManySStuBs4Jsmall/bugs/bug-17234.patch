diff --git a/gdx/src/com/badlogic/gdx/utils/ArrayMap.java b/gdx/src/com/badlogic/gdx/utils/ArrayMap.java
index f6873d9..f460df5 100644
--- a/gdx/src/com/badlogic/gdx/utils/ArrayMap.java
+++ b/gdx/src/com/badlogic/gdx/utils/ArrayMap.java
@@ -61,14 +61,14 @@
 	 * @param ordered If false, methods that remove elements may change the order of other elements in the arrays, which avoids a
 	 *           memory copy.
 	 * @param capacity Any elements added beyond this will cause the backing arrays to be grown. */
-	public ArrayMap (boolean ordered, int capacity, Class<K> keyArrayType, Class<V> valueArrayType) {
+	public ArrayMap (boolean ordered, int capacity, Class keyArrayType, Class valueArrayType) {
 		this.ordered = ordered;
 		keys = (K[])ArrayReflection.newInstance(keyArrayType, capacity);
 		values = (V[])ArrayReflection.newInstance(valueArrayType, capacity);
 	}
 
 	/** Creates an ordered map with {@link #keys} and {@link #values} of the specified type and a capacity of 16. */
-	public ArrayMap (Class<K> keyArrayType, Class<V> valueArrayType) {
+	public ArrayMap (Class keyArrayType, Class valueArrayType) {
 		this(false, 16, keyArrayType, valueArrayType);
 	}
 
@@ -76,8 +76,7 @@
 	 * will be ordered if the specified map is ordered. The capacity is set to the number of elements, so any subsequent elements
 	 * added will cause the backing arrays to be grown. */
 	public ArrayMap (ArrayMap array) {
-		this(array.ordered, array.size, (Class<K>)array.keys.getClass().getComponentType(), (Class<V>)array.values.getClass()
-			.getComponentType());
+		this(array.ordered, array.size, array.keys.getClass().getComponentType(), array.values.getClass().getComponentType());
 		size = array.size;
 		System.arraycopy(array.keys, 0, keys, 0, size);
 		System.arraycopy(array.values, 0, values, 0, size);
