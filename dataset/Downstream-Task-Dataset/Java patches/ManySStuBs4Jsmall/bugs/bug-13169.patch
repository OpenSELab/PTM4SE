diff --git a/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java b/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java
index fd8f2b8..5c93381 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java
@@ -68,7 +68,7 @@
     {
         BlockBuilder blockBuilder = getType().createBlockBuilder(new BlockBuilderStatus(), length);
         for (int i = start; i < start + length; i++) {
-            if (getType() == BIGINT) {
+            if (getType().equals(BIGINT)) {
                 BIGINT.writeLong(blockBuilder, (long) i);
             }
             else {
@@ -83,7 +83,7 @@
     {
         List<Number> values = new ArrayList<>();
         for (int i = 0; i < length; i++) {
-            if (getType() == BIGINT) {
+            if (getType().equals(BIGINT)) {
                 for (int j = 0; j < WEIGHT; j++) {
                     values.add((long) start + i);
                 }
@@ -103,7 +103,7 @@
     {
         List<Number> values = new ArrayList<>();
         for (int i = 0; i < length; i++) {
-            if (getType() == BIGINT) {
+            if (getType().equals(BIGINT)) {
                 for (int j = 0; j < WEIGHT; j++) {
                     values.add((long) start + i);
                 }
@@ -172,10 +172,10 @@
             ImmutableList<Number> list = sampledList.build();
             BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size());
             for (Number sample : list) {
-                if (getType() == BIGINT) {
+                if (getType().equals(BIGINT)) {
                     BIGINT.writeLong(builder, sample.longValue());
                 }
-                else if (getType() == DOUBLE) {
+                else if (getType().equals(DOUBLE)) {
                     DOUBLE.writeDouble(builder, sample.doubleValue());
                 }
                 else {
diff --git a/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java b/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java
index fd8f2b8..5c93381 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java
@@ -68,7 +68,7 @@
     {
         BlockBuilder blockBuilder = getType().createBlockBuilder(new BlockBuilderStatus(), length);
         for (int i = start; i < start + length; i++) {
-            if (getType() == BIGINT) {
+            if (getType().equals(BIGINT)) {
                 BIGINT.writeLong(blockBuilder, (long) i);
             }
             else {
@@ -83,7 +83,7 @@
     {
         List<Number> values = new ArrayList<>();
         for (int i = 0; i < length; i++) {
-            if (getType() == BIGINT) {
+            if (getType().equals(BIGINT)) {
                 for (int j = 0; j < WEIGHT; j++) {
                     values.add((long) start + i);
                 }
@@ -103,7 +103,7 @@
     {
         List<Number> values = new ArrayList<>();
         for (int i = 0; i < length; i++) {
-            if (getType() == BIGINT) {
+            if (getType().equals(BIGINT)) {
                 for (int j = 0; j < WEIGHT; j++) {
                     values.add((long) start + i);
                 }
@@ -172,10 +172,10 @@
             ImmutableList<Number> list = sampledList.build();
             BlockBuilder builder = getType().createBlockBuilder(new BlockBuilderStatus(), list.size());
             for (Number sample : list) {
-                if (getType() == BIGINT) {
+                if (getType().equals(BIGINT)) {
                     BIGINT.writeLong(builder, sample.longValue());
                 }
-                else if (getType() == DOUBLE) {
+                else if (getType().equals(DOUBLE)) {
                     DOUBLE.writeDouble(builder, sample.doubleValue());
                 }
                 else {
