diff --git a/lib/rhino/src/org/mozilla/javascript/NativeMath.java b/lib/rhino/src/org/mozilla/javascript/NativeMath.java
index 2119b7a..40dc4d7 100644
--- a/lib/rhino/src/org/mozilla/javascript/NativeMath.java
+++ b/lib/rhino/src/org/mozilla/javascript/NativeMath.java
@@ -105,7 +105,7 @@
             case Id_acos:
             case Id_asin:
                 x = ScriptRuntime.toNumber(args, 0);
-                if (x == x && -1.0 <= x && x <= 1.0) {
+                if (!Double.isNaN(x) && -1.0 <= x && x <= 1.0) {
                     x = (methodId == Id_acos) ? Math.acos(x) : Math.asin(x);
                 } else {
                     x = Double.NaN;
@@ -158,7 +158,7 @@
                     ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
                 for (int i = 0; i != args.length; ++i) {
                     double d = ScriptRuntime.toNumber(args[i]);
-                    if (d != d) {
+                    if (Double.isNaN(d)) {
                         x = d; // NaN
                         break;
                     }
@@ -182,7 +182,7 @@
 
             case Id_round:
                 x = ScriptRuntime.toNumber(args, 0);
-                if (x == x && x != Double.POSITIVE_INFINITY
+                if (!Double.isNaN(x) && x != Double.POSITIVE_INFINITY
                     && x != Double.NEGATIVE_INFINITY)
                 {
                     // Round only finite x
@@ -225,7 +225,7 @@
     // See Ecma 15.8.2.13
     private double js_pow(double x, double y) {
         double result;
-        if (y != y) {
+        if (Double.isNaN(y)) {
             // y is NaN, result is always NaN
             result = y;
         } else if (y == 0) {
@@ -246,7 +246,7 @@
             }
         } else {
             result = Math.pow(x, y);
-            if (result != result) {
+            if (Double.isNaN(result)) {
                 // Check for broken Java implementations that gives NaN
                 // when they should return something else
                 if (y == Double.POSITIVE_INFINITY) {
