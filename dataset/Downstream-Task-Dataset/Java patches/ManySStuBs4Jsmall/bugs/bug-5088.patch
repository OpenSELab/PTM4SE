diff --git a/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/JettyHttpContentTypeTest.java b/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/JettyHttpContentTypeTest.java
index 3c8ff87..f03afac 100644
--- a/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/JettyHttpContentTypeTest.java
+++ b/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/JettyHttpContentTypeTest.java
@@ -34,11 +34,11 @@
                                                              "text/plain; charset=\"" + CHARSET + "\"");
         getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_CHARACTER_ENCODING, CHARSET);
         getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_URL,
-                                                             "http://0.0.0.0:" + getPort() + "/foo");
+                                                             "http://127.0.0.1:" + getPort() + "/foo");
         getMockEndpoint("mock:input").expectedPropertyReceived(Exchange.CHARSET_NAME, CHARSET);
 
         byte[] data = "Hello World".getBytes(Charset.forName(CHARSET));
-        String out = template.requestBodyAndHeader("jetty:http://0.0.0.0:{{port}}/foo", data,
+        String out = template.requestBodyAndHeader("jetty:http://127.0.0.1:{{port}}/foo", data,
                 "content-type", "text/plain; charset=\"" + CHARSET + "\"", String.class);
         assertEquals("Bye World", out);
 
@@ -51,11 +51,11 @@
         getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.CONTENT_TYPE,
                                                              "text/plain;charset=\"" + CHARSET + "\";action=\"http://somewhere.com/foo\"");
         getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_CHARACTER_ENCODING, CHARSET);
-        getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_URL, "http://0.0.0.0:" + getPort() + "/foo");
+        getMockEndpoint("mock:input").expectedHeaderReceived(Exchange.HTTP_URL, "http://127.0.0.1:" + getPort() + "/foo");
         getMockEndpoint("mock:input").expectedPropertyReceived(Exchange.CHARSET_NAME, CHARSET);
 
         byte[] data = "Hello World".getBytes(Charset.forName(CHARSET));
-        String out = template.requestBodyAndHeader("jetty:http://0.0.0.0:{{port}}/foo", data,
+        String out = template.requestBodyAndHeader("jetty:http://127.0.0.1:{{port}}/foo", data,
                 "content-type", "text/plain;charset=\"" + CHARSET + "\";action=\"http://somewhere.com/foo\"", String.class);
         assertEquals("Bye World", out);
 
@@ -67,7 +67,7 @@
         return new RouteBuilder() {
             @Override
             public void configure() throws Exception {
-                from("jetty:http://0.0.0.0:{{port}}/foo")
+                from("jetty:http://127.0.0.1:{{port}}/foo")
                         .to("mock:input")
                         .transform().constant("Bye World");
             }
