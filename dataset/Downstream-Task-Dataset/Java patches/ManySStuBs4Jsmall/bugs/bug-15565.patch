diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java
index e159071..3784671 100644
--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java
@@ -382,7 +382,7 @@
         condition.signal();
         lock.unlock();
 
-        createThreadWaitsForCondition(latch, lock, condition, null).start();
+        createThreadWaitsForCondition(latch, lock, condition, new CountDownLatch(0)).start();
         // if the thread is still waiting, then the signal is not stored.
         assertFalse(latch.await(3000, TimeUnit.MILLISECONDS));
     }
diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java
index e159071..3784671 100644
--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionBasicTest.java
@@ -382,7 +382,7 @@
         condition.signal();
         lock.unlock();
 
-        createThreadWaitsForCondition(latch, lock, condition, null).start();
+        createThreadWaitsForCondition(latch, lock, condition, new CountDownLatch(0)).start();
         // if the thread is still waiting, then the signal is not stored.
         assertFalse(latch.await(3000, TimeUnit.MILLISECONDS));
     }
