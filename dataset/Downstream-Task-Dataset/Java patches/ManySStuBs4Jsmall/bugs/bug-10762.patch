diff --git a/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java b/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java
index 196b8d5..5441320 100644
--- a/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java
+++ b/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java
@@ -136,7 +136,7 @@
         // expected calculation
         Nd4j.getRandom().setSeed(123);
         INDArray weightsExpected = Nd4j.randn('f',shape);
-        weightsExpected.muli(FastMath.sqrt(2.0 / shape[0] + shape[1]));
+        weightsExpected.muli(FastMath.sqrt(2.0 / (shape[0] + shape[1])));
 
         assertEquals(weightsExpected, weightsActual);
     }
diff --git a/deeplearning4j-nn/src/main/java/org/deeplearning4j/nn/weights/WeightInitUtil.java b/deeplearning4j-nn/src/main/java/org/deeplearning4j/nn/weights/WeightInitUtil.java
index 7a13879..3e45fb3 100755
--- a/deeplearning4j-nn/src/main/java/org/deeplearning4j/nn/weights/WeightInitUtil.java
+++ b/deeplearning4j-nn/src/main/java/org/deeplearning4j/nn/weights/WeightInitUtil.java
@@ -123,7 +123,7 @@
                 ret = Nd4j.randn(order, shape).divi(FastMath.sqrt(shape[0]));
                 break;
             case XAVIER_TORCH:
-                ret = Nd4j.randn(order, shape).muli(FastMath.sqrt(2.0 / shape[0] + shape[1]));
+                ret = Nd4j.randn(order, shape).muli(FastMath.sqrt(2.0 / (shape[0] + shape[1])));
                 break;
             case ZERO:
                 ret = Nd4j.create(shape, order);
diff --git a/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java b/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java
index 196b8d5..5441320 100644
--- a/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java
+++ b/deeplearning4j-core/src/test/java/org/deeplearning4j/nn/weights/WeightInitUtilTest.java
@@ -136,7 +136,7 @@
         // expected calculation
         Nd4j.getRandom().setSeed(123);
         INDArray weightsExpected = Nd4j.randn('f',shape);
-        weightsExpected.muli(FastMath.sqrt(2.0 / shape[0] + shape[1]));
+        weightsExpected.muli(FastMath.sqrt(2.0 / (shape[0] + shape[1])));
 
         assertEquals(weightsExpected, weightsActual);
     }
