diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java
index beb24d3..12d9834 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java
@@ -96,9 +96,7 @@
     @SqlType(StandardTypes.TIME_WITH_TIME_ZONE)
     public static long currentTime(ConnectorSession session)
     {
-        // Stack value is number of milliseconds from start of the current day,
-        // but the start of the day is relative to the current time zone.
-        long millis = getChronology(session.getTimeZoneKey()).millisOfDay().get(session.getStartTime());
+        long millis = UTC_CHRONOLOGY.millisOfDay().get(session.getStartTime());
         return packDateTimeWithZone(millis, session.getTimeZoneKey());
     }
 
@@ -107,9 +105,7 @@
     @SqlType(StandardTypes.TIME)
     public static long localTime(ConnectorSession session)
     {
-        // Stack value is number of milliseconds from start of the current day,
-        // but the start of the day is relative to the current time zone.
-        return getChronology(session.getTimeZoneKey()).millisOfDay().get(session.getStartTime());
+        return UTC_CHRONOLOGY.millisOfDay().get(session.getStartTime());
     }
 
     @Description("current time zone")
diff --git a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
index b384e64..ab26279 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
@@ -143,14 +143,14 @@
     @Test
     public void testLocalTime()
     {
-        long millis = new LocalTime(session.getStartTime(), DATE_TIME_ZONE).getMillisOfDay();
+        long millis = new LocalTime(session.getStartTime(), DateTimeZone.UTC).getMillisOfDay();
         functionAssertions.assertFunction("LOCALTIME", TimeType.TIME, toTime(millis));
     }
 
     @Test
     public void testCurrentTime()
     {
-        long millis = new LocalTime(session.getStartTime(), DATE_TIME_ZONE).getMillisOfDay();
+        long millis = new LocalTime(session.getStartTime(), DateTimeZone.UTC).getMillisOfDay();
         functionAssertions.assertFunction("CURRENT_TIME", TIME_WITH_TIME_ZONE, new SqlTimeWithTimeZone(millis, session.getTimeZoneKey()));
     }
 
diff --git a/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java b/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java
index beb24d3..12d9834 100644
--- a/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java
+++ b/presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java
@@ -96,9 +96,7 @@
     @SqlType(StandardTypes.TIME_WITH_TIME_ZONE)
     public static long currentTime(ConnectorSession session)
     {
-        // Stack value is number of milliseconds from start of the current day,
-        // but the start of the day is relative to the current time zone.
-        long millis = getChronology(session.getTimeZoneKey()).millisOfDay().get(session.getStartTime());
+        long millis = UTC_CHRONOLOGY.millisOfDay().get(session.getStartTime());
         return packDateTimeWithZone(millis, session.getTimeZoneKey());
     }
 
@@ -107,9 +105,7 @@
     @SqlType(StandardTypes.TIME)
     public static long localTime(ConnectorSession session)
     {
-        // Stack value is number of milliseconds from start of the current day,
-        // but the start of the day is relative to the current time zone.
-        return getChronology(session.getTimeZoneKey()).millisOfDay().get(session.getStartTime());
+        return UTC_CHRONOLOGY.millisOfDay().get(session.getStartTime());
     }
 
     @Description("current time zone")
