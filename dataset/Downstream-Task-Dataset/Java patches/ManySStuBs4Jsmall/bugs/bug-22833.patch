diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java
index 2184e40..02bcbd0 100755
--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java
+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java
@@ -29,7 +29,7 @@
     protected String packageVersion;
 
     protected String invokerPackage = "io.swagger";
-    protected String sourceFolder = "src/main/flex";
+    protected String sourceFolder = "flash";
 
     public FlashClientCodegen() {
         super();
@@ -83,7 +83,7 @@
                 .defaultValue("1.0.0"));
         cliOptions.add(new CliOption(CodegenConstants.INVOKER_PACKAGE, CodegenConstants.INVOKER_PACKAGE_DESC));
         cliOptions.add(new CliOption(CodegenConstants.SOURCE_FOLDER, "source folder for generated " +
-                "code. e.g. src/main/flex"));
+                "code. e.g. flash"));
 
     }
 
@@ -124,8 +124,7 @@
         //modelPackage = invokerPackage + File.separatorChar + "client" + File.separatorChar + "model";
         //apiPackage = invokerPackage + File.separatorChar + "client" + File.separatorChar + "api";
 
-        final String invokerFolder = (sourceFolder + File.separator + invokerPackage + File.separator
-                + "swagger" + File.separator).replace(".", File.separator).replace('.', File.separatorChar);
+        final String invokerFolder = (sourceFolder + File.separator + "src/" + invokerPackage + File.separator).replace(".", File.separator).replace('.', File.separatorChar);
 
         supportingFiles.add(new SupportingFile("ApiInvoker.as", invokerFolder + "common", "ApiInvoker.as"));
         supportingFiles.add(new SupportingFile("ApiUrlHelper.as", invokerFolder + "common", "ApiUrlHelper.as"));
@@ -133,14 +132,15 @@
         supportingFiles.add(new SupportingFile("ListWrapper.as", invokerFolder + "common", "ListWrapper.as"));
         supportingFiles.add(new SupportingFile("SwaggerApi.as", invokerFolder + "common", "SwaggerApi.as"));
         supportingFiles.add(new SupportingFile("XMLWriter.as", invokerFolder + "common", "XMLWriter.as"));
-        supportingFiles.add(new SupportingFile("ApiError.as", invokerFolder + "exception", "ApiErrors.as"));
+        supportingFiles.add(new SupportingFile("ApiError.as", invokerFolder + "exception", "ApiError.as"));
         supportingFiles.add(new SupportingFile("ApiErrorCodes.as", invokerFolder + "exception", "ApiErrorCodes.as"));
         supportingFiles.add(new SupportingFile("ApiClientEvent.as", invokerFolder + "event", "ApiClientEvent.as"));
         supportingFiles.add(new SupportingFile("Response.as", invokerFolder + "event", "Response.as"));
         supportingFiles.add(new SupportingFile("build.properties", sourceFolder, "build.properties"));
         supportingFiles.add(new SupportingFile("build.xml", sourceFolder, "build.xml"));
-        supportingFiles.add(new SupportingFile("AirExecutorApp-app.xml", sourceFolder + File.separatorChar
-                + "bin", "AirExecutorApp-app.xml"));
+        supportingFiles.add(new SupportingFile("README.txt", sourceFolder, "README.txt"));
+        //supportingFiles.add(new SupportingFile("AirExecutorApp-app.xml", sourceFolder + File.separatorChar
+        //        + "bin", "AirExecutorApp-app.xml"));
         supportingFiles.add(new SupportingFile("ASAXB-0.1.1.swc", sourceFolder + File.separatorChar
                 + "lib", "ASAXB-0.1.1.swc"));
         supportingFiles.add(new SupportingFile("as3corelib.swc", sourceFolder + File.separatorChar
@@ -181,13 +181,13 @@
 
     @Override
     public String apiFileFolder() {
-        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar
+        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar + "src/"
                 + apiPackage().replace('.', File.separatorChar)).replace('/', File.separatorChar);
     }
 
     @Override
     public String modelFileFolder() {
-        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar
+        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar + "src/"
                 + modelPackage().replace('.', File.separatorChar)).replace('/', File.separatorChar);
     }
 
@@ -253,7 +253,7 @@
         } else if (p instanceof ArrayProperty) {
             return "new Array()";
         } else {
-            return "null";
+            return "NaN";
         }
     }
 
diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java
index 2184e40..02bcbd0 100755
--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java
+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/FlashClientCodegen.java
@@ -29,7 +29,7 @@
     protected String packageVersion;
 
     protected String invokerPackage = "io.swagger";
-    protected String sourceFolder = "src/main/flex";
+    protected String sourceFolder = "flash";
 
     public FlashClientCodegen() {
         super();
@@ -83,7 +83,7 @@
                 .defaultValue("1.0.0"));
         cliOptions.add(new CliOption(CodegenConstants.INVOKER_PACKAGE, CodegenConstants.INVOKER_PACKAGE_DESC));
         cliOptions.add(new CliOption(CodegenConstants.SOURCE_FOLDER, "source folder for generated " +
-                "code. e.g. src/main/flex"));
+                "code. e.g. flash"));
 
     }
 
@@ -124,8 +124,7 @@
         //modelPackage = invokerPackage + File.separatorChar + "client" + File.separatorChar + "model";
         //apiPackage = invokerPackage + File.separatorChar + "client" + File.separatorChar + "api";
 
-        final String invokerFolder = (sourceFolder + File.separator + invokerPackage + File.separator
-                + "swagger" + File.separator).replace(".", File.separator).replace('.', File.separatorChar);
+        final String invokerFolder = (sourceFolder + File.separator + "src/" + invokerPackage + File.separator).replace(".", File.separator).replace('.', File.separatorChar);
 
         supportingFiles.add(new SupportingFile("ApiInvoker.as", invokerFolder + "common", "ApiInvoker.as"));
         supportingFiles.add(new SupportingFile("ApiUrlHelper.as", invokerFolder + "common", "ApiUrlHelper.as"));
@@ -133,14 +132,15 @@
         supportingFiles.add(new SupportingFile("ListWrapper.as", invokerFolder + "common", "ListWrapper.as"));
         supportingFiles.add(new SupportingFile("SwaggerApi.as", invokerFolder + "common", "SwaggerApi.as"));
         supportingFiles.add(new SupportingFile("XMLWriter.as", invokerFolder + "common", "XMLWriter.as"));
-        supportingFiles.add(new SupportingFile("ApiError.as", invokerFolder + "exception", "ApiErrors.as"));
+        supportingFiles.add(new SupportingFile("ApiError.as", invokerFolder + "exception", "ApiError.as"));
         supportingFiles.add(new SupportingFile("ApiErrorCodes.as", invokerFolder + "exception", "ApiErrorCodes.as"));
         supportingFiles.add(new SupportingFile("ApiClientEvent.as", invokerFolder + "event", "ApiClientEvent.as"));
         supportingFiles.add(new SupportingFile("Response.as", invokerFolder + "event", "Response.as"));
         supportingFiles.add(new SupportingFile("build.properties", sourceFolder, "build.properties"));
         supportingFiles.add(new SupportingFile("build.xml", sourceFolder, "build.xml"));
-        supportingFiles.add(new SupportingFile("AirExecutorApp-app.xml", sourceFolder + File.separatorChar
-                + "bin", "AirExecutorApp-app.xml"));
+        supportingFiles.add(new SupportingFile("README.txt", sourceFolder, "README.txt"));
+        //supportingFiles.add(new SupportingFile("AirExecutorApp-app.xml", sourceFolder + File.separatorChar
+        //        + "bin", "AirExecutorApp-app.xml"));
         supportingFiles.add(new SupportingFile("ASAXB-0.1.1.swc", sourceFolder + File.separatorChar
                 + "lib", "ASAXB-0.1.1.swc"));
         supportingFiles.add(new SupportingFile("as3corelib.swc", sourceFolder + File.separatorChar
@@ -181,13 +181,13 @@
 
     @Override
     public String apiFileFolder() {
-        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar
+        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar + "src/"
                 + apiPackage().replace('.', File.separatorChar)).replace('/', File.separatorChar);
     }
 
     @Override
     public String modelFileFolder() {
-        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar
+        return (outputFolder + File.separatorChar + sourceFolder + File.separatorChar + "src/"
                 + modelPackage().replace('.', File.separatorChar)).replace('/', File.separatorChar);
     }
 
@@ -253,7 +253,7 @@
         } else if (p instanceof ArrayProperty) {
             return "new Array()";
         } else {
-            return "null";
+            return "NaN";
         }
     }
 
