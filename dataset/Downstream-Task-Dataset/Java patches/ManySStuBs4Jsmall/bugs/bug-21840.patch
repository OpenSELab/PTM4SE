diff --git a/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index 7b6c6cd..861113b 100644
--- a/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -90,7 +90,7 @@
           throw new IllegalArgumentException("Method " + method + " has @Produce annotation on " + eventType
               + " which is an interface.  Producers must return a concrete class type.");
         }
-        if (Void.class.isAssignableFrom(eventType)) {
+        if (eventType.equals(Void.TYPE)) {
           throw new IllegalArgumentException("Method " + method + " has @Produce annotation but has no return type.");
         }
 
diff --git a/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index 7b6c6cd..861113b 100644
--- a/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -90,7 +90,7 @@
           throw new IllegalArgumentException("Method " + method + " has @Produce annotation on " + eventType
               + " which is an interface.  Producers must return a concrete class type.");
         }
-        if (Void.class.isAssignableFrom(eventType)) {
+        if (eventType.equals(Void.TYPE)) {
           throw new IllegalArgumentException("Method " + method + " has @Produce annotation but has no return type.");
         }
 
