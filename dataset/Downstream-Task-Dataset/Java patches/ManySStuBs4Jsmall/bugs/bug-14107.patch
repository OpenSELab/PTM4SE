diff --git a/src/com/google/javascript/jscomp/ConformanceRules.java b/src/com/google/javascript/jscomp/ConformanceRules.java
index e6dc148..14ffec1 100644
--- a/src/com/google/javascript/jscomp/ConformanceRules.java
+++ b/src/com/google/javascript/jscomp/ConformanceRules.java
@@ -1018,7 +1018,7 @@
     private Constructor<?> getRuleConstructor(Class<Rule> cls)
         throws InvalidRequirementSpec {
       for (Constructor<?> ctor : cls.getConstructors()) {
-        Class<?> paramClasses[] = ctor.getParameterTypes();
+        Class<?>[] paramClasses = ctor.getParameterTypes();
         if (paramClasses.length == 2) {
           TypeToken<?> param1 = TypeToken.of(paramClasses[0]);
           TypeToken<?> param2 = TypeToken.of(paramClasses[1]);
diff --git a/src/com/google/javascript/jscomp/GatherRawExports.java b/src/com/google/javascript/jscomp/GatherRawExports.java
index 3bfd81e..8f67397 100644
--- a/src/com/google/javascript/jscomp/GatherRawExports.java
+++ b/src/com/google/javascript/jscomp/GatherRawExports.java
@@ -39,7 +39,7 @@
   // collapse properties, so the two entries here protect goog.global in the
   // two common cases "collapse properties and renaming on" or both off
   // but not the case where only property renaming is on.
-  private static final String GLOBAL_THIS_NAMES[] = {
+  private static final String[] GLOBAL_THIS_NAMES = {
     "window", "top", "goog$global", "goog.global" };
 
   private final Set<String> exportedVariables = new HashSet<>();
diff --git a/src/com/google/javascript/jscomp/ant/CompileTask.java b/src/com/google/javascript/jscomp/ant/CompileTask.java
index 995c4e2..880b05d 100644
--- a/src/com/google/javascript/jscomp/ant/CompileTask.java
+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java
@@ -482,7 +482,7 @@
     }
 
     if (!Strings.isNullOrEmpty(sourceMapLocationMapping)) {
-      String tokens[] = sourceMapLocationMapping.split("\\|", -1);
+      String[] tokens = sourceMapLocationMapping.split("\\|", -1);
       LocationMapping lm = new LocationMapping(tokens[0], tokens[1]);
       options.setSourceMapLocationMappings(Arrays.asList(lm));
     }
diff --git a/src/com/google/javascript/jscomp/ConformanceRules.java b/src/com/google/javascript/jscomp/ConformanceRules.java
index e6dc148..14ffec1 100644
--- a/src/com/google/javascript/jscomp/ConformanceRules.java
+++ b/src/com/google/javascript/jscomp/ConformanceRules.java
@@ -1018,7 +1018,7 @@
     private Constructor<?> getRuleConstructor(Class<Rule> cls)
         throws InvalidRequirementSpec {
       for (Constructor<?> ctor : cls.getConstructors()) {
-        Class<?> paramClasses[] = ctor.getParameterTypes();
+        Class<?>[] paramClasses = ctor.getParameterTypes();
         if (paramClasses.length == 2) {
           TypeToken<?> param1 = TypeToken.of(paramClasses[0]);
           TypeToken<?> param2 = TypeToken.of(paramClasses[1]);
