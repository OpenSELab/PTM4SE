diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java
index 4c6ec1a..17ca34d 100644
--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java
+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java
@@ -48,11 +48,11 @@
  *      private volatile boolean isRunning;
  *
  *      @Override
- *      public void run(Object checkpointLock, Collector<T> out) {
+ *      public void run(SourceContext<T> ctx) {
  *          isRunning = true;
  *          while (isRunning && count < 1000) {
- *              synchronized (checkpointLock) {
- *                  out.collect(count);
+ *              synchronized (ctx.getCheckpointLock()) {
+ *                  ctx.collect(count);
  *                  count++;
  *              }
  *          }
@@ -104,17 +104,17 @@
 	 *
 	 * @param <T> The type of the elements produced by the source.
 	 */
-	public static interface SourceContext<T> {
+	interface SourceContext<T> {
 
 		/**
 		 * Emits one element from the source.
 		 */
-		public void collect(T element);
+		void collect(T element);
 
 		/**
 		 * Returns the checkpoint lock. Please refer to the explanation about checkpointed sources
 		 * in {@link org.apache.flink.streaming.api.functions.source.SourceFunction}.
 		 */
-		public Object getCheckpointLock();
+		Object getCheckpointLock();
 	}
 }
diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java
index 4c6ec1a..17ca34d 100644
--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java
+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/functions/source/SourceFunction.java
@@ -48,11 +48,11 @@
  *      private volatile boolean isRunning;
  *
  *      @Override
- *      public void run(Object checkpointLock, Collector<T> out) {
+ *      public void run(SourceContext<T> ctx) {
  *          isRunning = true;
  *          while (isRunning && count < 1000) {
- *              synchronized (checkpointLock) {
- *                  out.collect(count);
+ *              synchronized (ctx.getCheckpointLock()) {
+ *                  ctx.collect(count);
  *                  count++;
  *              }
  *          }
@@ -104,17 +104,17 @@
 	 *
 	 * @param <T> The type of the elements produced by the source.
 	 */
-	public static interface SourceContext<T> {
+	interface SourceContext<T> {
 
 		/**
 		 * Emits one element from the source.
 		 */
-		public void collect(T element);
+		void collect(T element);
 
 		/**
 		 * Returns the checkpoint lock. Please refer to the explanation about checkpointed sources
 		 * in {@link org.apache.flink.streaming.api.functions.source.SourceFunction}.
 		 */
-		public Object getCheckpointLock();
+		Object getCheckpointLock();
 	}
 }
