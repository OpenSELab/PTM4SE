diff --git a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
index 2003f19..d04c611 100644
--- a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
+++ b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
@@ -65,7 +65,7 @@
         sqlTypes.put("ROLLERSHUTTERITEM", "SMALLINT");
         sqlTypes.put("STRINGITEM", "VARCHAR(32000)");
         sqlTypes.put("tablePrimaryValue", "CURRENT_TIMESTAMP");
-        logger.debug("JDBC::initEtendedSqlTypes: Initialize the type array sqlTypes={}", sqlTypes.values());
+        logger.debug("JDBC::initSqlTypes: Initialized the type array sqlTypes={}", sqlTypes.values());
     }
 
     /**
@@ -127,7 +127,7 @@
             logger.debug("JDBC::doCreateItemsTableIfNot tableExists={} therefore sql={}", tableExists, sql);
             Yank.execute(sql, null);
         } else {
-            logger.debug("JDBC::doCreateItemsTableIfNot tableExists={}, did no CREATE TABLE", tableExists);
+            logger.debug("JDBC::doCreateItemsTableIfNot tableExists={}, did not CREATE TABLE", tableExists);
         }
         return vo;
     }
@@ -160,7 +160,7 @@
         String sql = histItemFilterQueryProvider(filter, numberDecimalcount, table, name);
         List<Object[]> m = Yank.queryObjectArrays(sql, null);
 
-        logger.debug("JDBC::doGetHistItemFilterQuery gor Array length={}", m.size());
+        logger.debug("JDBC::doGetHistItemFilterQuery got Array length={}", m.size());
 
         List<HistoricItem> items = new ArrayList<HistoricItem>();
         for (int i = 0; i < m.size(); i++) {
diff --git a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
index 16c3481..f2eddf5 100644
--- a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
+++ b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
@@ -77,7 +77,7 @@
         sqlTypes.put("ROLLERSHUTTERITEM", "SMALLINT");
         sqlTypes.put("STRINGITEM", "VARCHAR");
         sqlTypes.put("SWITCHITEM", "VARCHAR");
-        logger.debug("JDBC::initSqlTypes: Initialize the type array sqlTypes={}", sqlTypes.values());
+        logger.debug("JDBC::initSqlTypes: Initialized the type array sqlTypes={}", sqlTypes.values());
     }
 
     /**
diff --git a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
index ea8aab1..a12dd49 100644
--- a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
+++ b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
@@ -74,7 +74,7 @@
     public void updateConfig(Map<Object, Object> config) {
         configuration = config;
 
-        logger.debug("JDBC::updateConfig: configuration.size = " + configuration.size());
+        logger.debug("JDBC::updateConfig: configuration.size = {}", configuration.size());
 
         // mandatory user
         String user = (String) configuration.get("user");
@@ -102,7 +102,7 @@
                 enstr += key + " = " + parsedURL.getProperty("" + key) + "\n";
             }
             logger.warn(
-                    "JDBC::updateConfig: SQL url is not well formated:\n{}Please configure url in openhab.cfg like 'jdbc:<service>:<host>[:<port>;<attributes>]'",
+                    "JDBC::updateConfig: SQL url is not well formatted: {}\nPlease configure url in openhab.cfg like 'jdbc:<service>:<host>[:<port>;<attributes>]'",
                     enstr);
         } else {
             logger.debug("JDBC::updateConfig: mandatory user={}", user);
@@ -217,7 +217,7 @@
         logger.debug("JDBC::updateConfig: found serviceName = '{}'", serviceName);
         if (StringUtils.isBlank(sn) || sn.length() < 2) {
             logger.error(
-                    "JDBC::updateConfig: url Required database url like 'jdbc:<service>:<host>[:<port>;<attributes>]' - please configure the jdbc:url parameter in openhab.cfg");
+                    "JDBC::updateConfig: Required database url like 'jdbc:<service>:<host>[:<port>;<attributes>]' - please configure the jdbc:url parameter in openhab.cfg");
         } else {
             serviceName = sn;
         }
@@ -275,10 +275,10 @@
         } catch (ClassNotFoundException e) {
             driverAvailable = false;
             logger.error(
-                    "JDBC::updateConfig: could NOT load JDBC-driverClassName or JDBC-dataSourceClassName ClassNotFoundException: '{}'",
+                    "JDBC::updateConfig: could NOT load JDBC-driverClassName or JDBC-dataSourceClassName. ClassNotFoundException: '{}'",
                     e.getMessage());
             String warn = ""
-                    + "\n\n\t!!!\n\tTo avoid this error, place a appropriate JDBC driver file for serviceName '{}' in addons directory.\n"
+                    + "\n\n\t!!!\n\tTo avoid this error, place an appropriate JDBC driver file for serviceName '{}' in addons directory.\n"
                     + "\tCopy missing JDBC-Driver-jar to your OpenHab/addons Folder.\n\t!!!\n" + "\tDOWNLOAD: \n";
             if (serviceName.equals("derby")) {
                 warn += "\tDerby:     version >= 10.11.1.1 from          http://mvnrepository.com/artifact/org.apache.derby/derby\n";
diff --git a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java
index 15d5969..a6c1f1f 100644
--- a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java
+++ b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java
@@ -131,7 +131,7 @@
     }
 
     public Item storeItemValue(Item item) {
-        logger.debug("JDBC::storeItemValue: Item={}", item.toString());
+        logger.debug("JDBC::storeItemValue: item={}", item.toString());
         String tableName = getTable(item);
         if (tableName == null) {
             logger.error("JDBC::store: Unable to store item '{}'.", item.getName());
@@ -156,7 +156,7 @@
             logTime("insertItemValue", timerStart, System.currentTimeMillis());
             return r;
         } else {
-            logger.error("JDBC::getHistItemFilterQuery: TABLE is NULL, cannot get Data from not existing Table.");
+            logger.error("JDBC::getHistItemFilterQuery: TABLE is NULL; cannot get data from non-existent table.");
         }
         return null;
     }
@@ -237,7 +237,7 @@
             return tableName;
         }
 
-        logger.debug("JDBC::getTable: no Table found for itemName={} in sqlTables", itemName);
+        logger.debug("JDBC::getTable: no table found for item '{}' in sqlTables", itemName);
 
         // Create a new entry in items table
         isvo = new ItemsVO();
@@ -245,7 +245,7 @@
         isvo = createNewEntryInItemsTable(isvo);
         rowId = isvo.getItemid();
         if (rowId == 0) {
-            logger.error("JDBC::getTable: Creating table for item '" + itemName + "' failed.");
+            logger.error("JDBC::getTable: Creating table for item '{}' failed.", itemName);
         }
         // Create the table name
         logger.debug("JDBC::getTable: getTableName with rowId={} itemName={}", rowId, itemName);
@@ -253,7 +253,7 @@
 
         // An error occurred adding the item name into the index list!
         if (tableName == null) {
-            logger.error("JDBC::getTable: tableName was null, could not create a table for item '{}'", itemName);
+            logger.error("JDBC::getTable: tableName was null; could not create a table for item '{}'", itemName);
             return null;
         }
 
diff --git a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcPersistenceService.java b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcPersistenceService.java
index fc2d06f..3e466ff 100644
--- a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcPersistenceService.java
+++ b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcPersistenceService.java
@@ -147,11 +147,11 @@
     public Iterable<HistoricItem> query(FilterCriteria filter) {
 
         if (!checkDBAccessability()) {
-            logger.warn("JDBC::query: db not connected, query aborted for item '{}'", filter.getItemName());
+            logger.warn("JDBC::query: database not connected, query aborted for item '{}'", filter.getItemName());
             return Collections.emptyList();
         }
         if (itemRegistry == null) {
-            logger.error("JDBC::query: itemRegistry == null Ignore and Give up!");
+            logger.error("JDBC::query: itemRegistry == null. Ignore and give up!");
             return Collections.emptyList();
         }
 
@@ -163,7 +163,7 @@
         try {
             item = itemRegistry.getItem(itemName);
         } catch (ItemNotFoundException e1) {
-            logger.error("JDBC::query: unable to get item for itemName: '{}'. Ignore and Give up!", itemName);
+            logger.error("JDBC::query: unable to get item for itemName: '{}'. Ignore and give up!", itemName);
             return Collections.emptyList();
         }
 
@@ -172,11 +172,11 @@
             item = GroupItem.class.cast(item).getBaseItem();
             logger.debug("JDBC::query: item is instanceof GroupItem '{}'", itemName);
             if (item == null) {
-                logger.debug("JDBC::query: BaseItem of GroupItem is null. Ignore and Give up!");
+                logger.debug("JDBC::query: BaseItem of GroupItem is null. Ignore and give up!");
                 return Collections.emptyList();
             }
             if (item instanceof GroupItem) {
-                logger.debug("JDBC::query: BaseItem of GroupItem is a GroupItem too. Ignore and Give up!");
+                logger.debug("JDBC::query: BaseItem of GroupItem is a GroupItem too. Ignore and give up!");
                 return Collections.emptyList();
             }
         }
@@ -184,7 +184,7 @@
         String table = sqlTables.get(itemName);
         if (table == null) {
             logger.warn(
-                    "JDBC::query: unable to find table for query, no Data in Database for Item '{}'. Current number of tables in the database: {}",
+                    "JDBC::query: unable to find table for query, no data in database for item '{}'. Current number of tables in the database: {}",
                     itemName, sqlTables.size());
             // if enabled, table will be created immediately
             if (item != null) {
diff --git a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
index 2003f19..d04c611 100644
--- a/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
+++ b/bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
@@ -65,7 +65,7 @@
         sqlTypes.put("ROLLERSHUTTERITEM", "SMALLINT");
         sqlTypes.put("STRINGITEM", "VARCHAR(32000)");
         sqlTypes.put("tablePrimaryValue", "CURRENT_TIMESTAMP");
-        logger.debug("JDBC::initEtendedSqlTypes: Initialize the type array sqlTypes={}", sqlTypes.values());
+        logger.debug("JDBC::initSqlTypes: Initialized the type array sqlTypes={}", sqlTypes.values());
     }
 
     /**
@@ -127,7 +127,7 @@
             logger.debug("JDBC::doCreateItemsTableIfNot tableExists={} therefore sql={}", tableExists, sql);
             Yank.execute(sql, null);
         } else {
-            logger.debug("JDBC::doCreateItemsTableIfNot tableExists={}, did no CREATE TABLE", tableExists);
+            logger.debug("JDBC::doCreateItemsTableIfNot tableExists={}, did not CREATE TABLE", tableExists);
         }
         return vo;
     }
@@ -160,7 +160,7 @@
         String sql = histItemFilterQueryProvider(filter, numberDecimalcount, table, name);
         List<Object[]> m = Yank.queryObjectArrays(sql, null);
 
-        logger.debug("JDBC::doGetHistItemFilterQuery gor Array length={}", m.size());
+        logger.debug("JDBC::doGetHistItemFilterQuery got Array length={}", m.size());
 
         List<HistoricItem> items = new ArrayList<HistoricItem>();
         for (int i = 0; i < m.size(); i++) {
