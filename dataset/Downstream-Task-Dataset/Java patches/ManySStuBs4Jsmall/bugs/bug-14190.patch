diff --git a/src/com/google/javascript/jscomp/ChainCalls.java b/src/com/google/javascript/jscomp/ChainCalls.java
index 6f71284..da0687c 100644
--- a/src/com/google/javascript/jscomp/ChainCalls.java
+++ b/src/com/google/javascript/jscomp/ChainCalls.java
@@ -133,7 +133,10 @@
           return;
         }
         if (!goodFunctionNodes.contains(rValue)) {
-          NodeTraversal.traverse(compiler, rValue, gatherFunctions);
+          // TODO(moz): In ES6, t.getScope() might return a scope that is not
+          // a valid cfg root, might need something like t.getCfgScope().
+          new NodeTraversal(compiler, gatherFunctions).traverseInnerNode(
+              rValue, rValue.getParent(), t.getScope());
           if (badFunctionNodes.contains(rValue)) {
             return;
           }
diff --git a/src/com/google/javascript/jscomp/ChainCalls.java b/src/com/google/javascript/jscomp/ChainCalls.java
index 6f71284..da0687c 100644
--- a/src/com/google/javascript/jscomp/ChainCalls.java
+++ b/src/com/google/javascript/jscomp/ChainCalls.java
@@ -133,7 +133,10 @@
           return;
         }
         if (!goodFunctionNodes.contains(rValue)) {
-          NodeTraversal.traverse(compiler, rValue, gatherFunctions);
+          // TODO(moz): In ES6, t.getScope() might return a scope that is not
+          // a valid cfg root, might need something like t.getCfgScope().
+          new NodeTraversal(compiler, gatherFunctions).traverseInnerNode(
+              rValue, rValue.getParent(), t.getScope());
           if (badFunctionNodes.contains(rValue)) {
             return;
           }
