diff --git a/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java b/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java
index 0acd29f..f218366 100644
--- a/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java
+++ b/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java
@@ -121,7 +121,7 @@
                 session,
                 types,
                 emptyList(),
-                node -> new IllegalStateException("Expected node: %s" + node),
+                node -> new IllegalStateException("Unexpected node: %s" + node),
                 WarningCollector.NOOP,
                 false);
         expressionAnalyzer.analyze(expression, Scope.create());
diff --git a/presto-main/src/test/java/com/facebook/presto/sql/TestSqlToRowExpressionTranslator.java b/presto-main/src/test/java/com/facebook/presto/sql/TestSqlToRowExpressionTranslator.java
index 03f1ae0..1f2bcda 100644
--- a/presto-main/src/test/java/com/facebook/presto/sql/TestSqlToRowExpressionTranslator.java
+++ b/presto-main/src/test/java/com/facebook/presto/sql/TestSqlToRowExpressionTranslator.java
@@ -113,7 +113,7 @@
                 TEST_SESSION,
                 TypeProvider.empty(),
                 emptyList(),
-                node -> new IllegalStateException("Expected node: %s" + node),
+                node -> new IllegalStateException("Unexpected node: %s" + node),
                 WarningCollector.NOOP,
                 false);
         expressionAnalyzer.analyze(expression, Scope.create());
diff --git a/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java b/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java
index 0acd29f..f218366 100644
--- a/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java
+++ b/presto-main/src/main/java/com/facebook/presto/cost/FilterStatsCalculator.java
@@ -121,7 +121,7 @@
                 session,
                 types,
                 emptyList(),
-                node -> new IllegalStateException("Expected node: %s" + node),
+                node -> new IllegalStateException("Unexpected node: %s" + node),
                 WarningCollector.NOOP,
                 false);
         expressionAnalyzer.analyze(expression, Scope.create());
