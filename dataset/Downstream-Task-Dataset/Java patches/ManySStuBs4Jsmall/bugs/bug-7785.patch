diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java
index 997f73e..a0f18c6 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java
@@ -128,7 +128,7 @@
     Assert.assertEquals(ValidTxnList.RangeResponse.NONE,
         validTxns.isTxnRangeValid(5L, 10L));
 
-    validTxns = new ValidReadTxnList("10:4:5:6");
+    validTxns = new ValidReadTxnList("10:5:4:5:6");
     Assert.assertEquals(ValidTxnList.RangeResponse.NONE,
         validTxns.isTxnRangeValid(4,6));
     Assert.assertEquals(ValidTxnList.RangeResponse.ALL,
@@ -223,24 +223,24 @@
   @Test
   public void stringifyValidTxns() throws Exception {
     // Test with just high water mark
-    ValidTxnList validTxns = new ValidReadTxnList("1:");
+    ValidTxnList validTxns = new ValidReadTxnList("1:" + Long.MAX_VALUE + ":");
     String asString = validTxns.toString();
-    Assert.assertEquals("1:", asString);
+    Assert.assertEquals("1:" + Long.MAX_VALUE + ":", asString);
     validTxns = new ValidReadTxnList(asString);
     Assert.assertEquals(1, validTxns.getHighWatermark());
     Assert.assertNotNull(validTxns.getInvalidTransactions());
     Assert.assertEquals(0, validTxns.getInvalidTransactions().length);
     asString = validTxns.toString();
-    Assert.assertEquals("1:", asString);
+    Assert.assertEquals("1:" + Long.MAX_VALUE + ":", asString);
     validTxns = new ValidReadTxnList(asString);
     Assert.assertEquals(1, validTxns.getHighWatermark());
     Assert.assertNotNull(validTxns.getInvalidTransactions());
     Assert.assertEquals(0, validTxns.getInvalidTransactions().length);
 
     // Test with open transactions
-    validTxns = new ValidReadTxnList("10:5:3");
+    validTxns = new ValidReadTxnList("10:3:5:3");
     asString = validTxns.toString();
-    if (!asString.equals("10:3:5") && !asString.equals("10:5:3")) {
+    if (!asString.equals("10:3:3:5") && !asString.equals("10:3:5:3")) {
       Assert.fail("Unexpected string value " + asString);
     }
     validTxns = new ValidReadTxnList(asString);
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java
index 997f73e..a0f18c6 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java
@@ -128,7 +128,7 @@
     Assert.assertEquals(ValidTxnList.RangeResponse.NONE,
         validTxns.isTxnRangeValid(5L, 10L));
 
-    validTxns = new ValidReadTxnList("10:4:5:6");
+    validTxns = new ValidReadTxnList("10:5:4:5:6");
     Assert.assertEquals(ValidTxnList.RangeResponse.NONE,
         validTxns.isTxnRangeValid(4,6));
     Assert.assertEquals(ValidTxnList.RangeResponse.ALL,
@@ -223,24 +223,24 @@
   @Test
   public void stringifyValidTxns() throws Exception {
     // Test with just high water mark
-    ValidTxnList validTxns = new ValidReadTxnList("1:");
+    ValidTxnList validTxns = new ValidReadTxnList("1:" + Long.MAX_VALUE + ":");
     String asString = validTxns.toString();
-    Assert.assertEquals("1:", asString);
+    Assert.assertEquals("1:" + Long.MAX_VALUE + ":", asString);
     validTxns = new ValidReadTxnList(asString);
     Assert.assertEquals(1, validTxns.getHighWatermark());
     Assert.assertNotNull(validTxns.getInvalidTransactions());
     Assert.assertEquals(0, validTxns.getInvalidTransactions().length);
     asString = validTxns.toString();
-    Assert.assertEquals("1:", asString);
+    Assert.assertEquals("1:" + Long.MAX_VALUE + ":", asString);
     validTxns = new ValidReadTxnList(asString);
     Assert.assertEquals(1, validTxns.getHighWatermark());
     Assert.assertNotNull(validTxns.getInvalidTransactions());
     Assert.assertEquals(0, validTxns.getInvalidTransactions().length);
 
     // Test with open transactions
-    validTxns = new ValidReadTxnList("10:5:3");
+    validTxns = new ValidReadTxnList("10:3:5:3");
     asString = validTxns.toString();
-    if (!asString.equals("10:3:5") && !asString.equals("10:5:3")) {
+    if (!asString.equals("10:3:3:5") && !asString.equals("10:3:5:3")) {
       Assert.fail("Unexpected string value " + asString);
     }
     validTxns = new ValidReadTxnList(asString);
