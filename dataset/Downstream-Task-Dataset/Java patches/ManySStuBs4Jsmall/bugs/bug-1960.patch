diff --git a/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java b/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
index 6a3acbb..9391a8b 100644
--- a/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
+++ b/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
@@ -45,7 +45,7 @@
     public AbstractBroadcasterProxy() {
         try {
             Class jerseyBroadcasterUtil = Class.forName("org.atmosphere.jersey.util.JerseyBroadcasterUtil");
-            jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class});
+            jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class, Broadcaster.class});
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -95,7 +95,7 @@
     protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (r.getRequest().getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null) {
             try {
-                jerseyBroadcast.invoke(null, new Object[]{r, e});
+                jerseyBroadcast.invoke(null, new Object[]{r, e, r.getBroadcaster()});
             } catch (Throwable t) {
                 super.invokeOnStateChange(r, e);
             }
diff --git a/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java b/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
index 6a3acbb..9391a8b 100644
--- a/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
+++ b/modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
@@ -45,7 +45,7 @@
     public AbstractBroadcasterProxy() {
         try {
             Class jerseyBroadcasterUtil = Class.forName("org.atmosphere.jersey.util.JerseyBroadcasterUtil");
-            jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class});
+            jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class, Broadcaster.class});
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -95,7 +95,7 @@
     protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (r.getRequest().getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null) {
             try {
-                jerseyBroadcast.invoke(null, new Object[]{r, e});
+                jerseyBroadcast.invoke(null, new Object[]{r, e, r.getBroadcaster()});
             } catch (Throwable t) {
                 super.invokeOnStateChange(r, e);
             }
