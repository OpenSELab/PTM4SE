diff --git a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
index f653910..899681a 100644
--- a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
+++ b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
@@ -147,12 +147,10 @@
       throw new AssertionError("Edge found in incoming but not outgoing");
     }
     // TODO: cut down the number of .get calls
-    if (outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&
-        outgoingEdges.get(source).get(dest).size() == 0) {
+    if (outgoingEdges.containsKey(source) && (!outgoingEdges.get(source).containsKey(dest) || outgoingEdges.get(source).get(dest).size() == 0)) {
       outgoingEdges.get(source).remove(dest);
     }
-    if (incomingEdges.containsKey(dest) && incomingEdges.get(dest).containsKey(source) &&
-        incomingEdges.get(dest).get(source).size() == 0) {
+    if (incomingEdges.containsKey(dest) && (!incomingEdges.get(dest).containsKey(source) || incomingEdges.get(dest).get(source).size() == 0)) {
       incomingEdges.get(dest).remove(source);
     }
     return foundOut;
diff --git a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
index f653910..899681a 100644
--- a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
+++ b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
@@ -147,12 +147,10 @@
       throw new AssertionError("Edge found in incoming but not outgoing");
     }
     // TODO: cut down the number of .get calls
-    if (outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&
-        outgoingEdges.get(source).get(dest).size() == 0) {
+    if (outgoingEdges.containsKey(source) && (!outgoingEdges.get(source).containsKey(dest) || outgoingEdges.get(source).get(dest).size() == 0)) {
       outgoingEdges.get(source).remove(dest);
     }
-    if (incomingEdges.containsKey(dest) && incomingEdges.get(dest).containsKey(source) &&
-        incomingEdges.get(dest).get(source).size() == 0) {
+    if (incomingEdges.containsKey(dest) && (!incomingEdges.get(dest).containsKey(source) || incomingEdges.get(dest).get(source).size() == 0)) {
       incomingEdges.get(dest).remove(source);
     }
     return foundOut;
