diff --git a/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java b/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java
index a02d694..0919e1d 100644
--- a/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java
+++ b/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java
@@ -1870,7 +1870,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void getUserListStatuses(final int listId, final Paging paging) {
+    public void getUserListStatuses(final long listId, final Paging paging) {
         getDispatcher().invokeLater(new AsyncTask(USER_LIST_STATUSES, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -1908,7 +1908,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void destroyUserListMember(final int listId, final long userId) {
+    public void destroyUserListMember(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(DESTROY_LIST_MEMBER, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -1924,7 +1924,7 @@
     }
 
     @Override
-    public void deleteUserListMember(int listId, long userId) {
+    public void deleteUserListMember(long listId, long userId) {
         destroyUserListMember(listId, userId);
     }
 
@@ -2032,7 +2032,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void getUserListSubscribers(final int listId, final long cursor) {
+    public void getUserListSubscribers(final long listId, final long cursor) {
         getDispatcher().invokeLater(new AsyncTask(LIST_SUBSCRIBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2070,7 +2070,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListSubscription(final int listId) {
+    public void createUserListSubscription(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(SUBSCRIBE_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2108,7 +2108,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void showUserListSubscription(final int listId, final long userId) {
+    public void showUserListSubscription(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(CHECK_LIST_SUBSCRIPTION, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2146,7 +2146,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void destroyUserListSubscription(final int listId) {
+    public void destroyUserListSubscription(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(UNSUBSCRIBE_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2185,7 +2185,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListMembers(final int listId, final long[] userIds) {
+    public void createUserListMembers(final long listId, final long[] userIds) {
         getDispatcher().invokeLater(new AsyncTask(CREATE_LIST_MEMBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2201,7 +2201,7 @@
     }
 
     @Override
-    public void addUserListMembers(int listId, long[] userIds) {
+    public void addUserListMembers(long listId, long[] userIds) {
         createUserListMembers(listId, userIds);
     }
 
@@ -2233,7 +2233,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListMembers(final int listId, final String[] screenNames) {
+    public void createUserListMembers(final long listId, final String[] screenNames) {
         getDispatcher().invokeLater(new AsyncTask(CREATE_LIST_MEMBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2249,7 +2249,7 @@
     }
 
     @Override
-    public void addUserListMembers(int listId, String[] screenNames) {
+    public void addUserListMembers(long listId, String[] screenNames) {
         createUserListMembers(listId, screenNames);
     }
 
@@ -2281,7 +2281,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void showUserListMembership(final int listId, final long userId) {
+    public void showUserListMembership(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(CHECK_LIST_MEMBERSHIP, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2319,7 +2319,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void getUserListMembers(final int listId, final long cursor) {
+    public void getUserListMembers(final long listId, final long cursor) {
         getDispatcher().invokeLater(new AsyncTask(LIST_MEMBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2357,7 +2357,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListMember(final int listId, final long userId) {
+    public void createUserListMember(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(CREATE_LIST_MEMBER, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2373,7 +2373,7 @@
     }
 
     @Override
-    public void addUserListMember(int listId, long userId) {
+    public void addUserListMember(long listId, long userId) {
         createUserListMember(listId, userId);
     }
 
@@ -2405,7 +2405,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void destroyUserList(final int listId) {
+    public void destroyUserList(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(DESTROY_USER_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2443,7 +2443,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void updateUserList(final int listId, final String newListName, final boolean isPublicList, final String newDescription) {
+    public void updateUserList(final long listId, final String newListName, final boolean isPublicList, final String newDescription) {
         getDispatcher().invokeLater(new AsyncTask(UPDATE_USER_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2500,7 +2500,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void showUserList(final int listId) {
+    public void showUserList(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(SHOW_USER_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
diff --git a/twitter4j-async/src/main/java/twitter4j/api/ListsResourcesAsync.java b/twitter4j-async/src/main/java/twitter4j/api/ListsResourcesAsync.java
index d3721e9..b8c1fcc 100644
--- a/twitter4j-async/src/main/java/twitter4j/api/ListsResourcesAsync.java
+++ b/twitter4j-async/src/main/java/twitter4j/api/ListsResourcesAsync.java
@@ -53,7 +53,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/statuses">GET lists/statuses | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void getUserListStatuses(int listId, Paging paging);
+    void getUserListStatuses(long listId, Paging paging);
 
     /**
      * Show tweet timeline for members of the specified list.
@@ -76,12 +76,12 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy">POST lists/members/destroy | Twitter Developers</a>
      * @since Twitter4J 2.1.0
      */
-    void destroyUserListMember(int listId, long userId);
+    void destroyUserListMember(long listId, long userId);
 
     /**
      * @deprecated use {@link #destroyUserListMember(int, long)} instead
      */
-    void deleteUserListMember(int listId, long userId);
+    void deleteUserListMember(long listId, long userId);
 
     /**
      * Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.
@@ -165,7 +165,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers">GET lists/subscribers | Twitter Developers</a>
      * @since Twitter4J 2.1.1
      */
-    void getUserListSubscribers(int listId, long cursor);
+    void getUserListSubscribers(long listId, long cursor);
 
     /**
      * Returns the subscribers of the specified list.
@@ -187,7 +187,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create">POST lists/subscribers/create | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void createUserListSubscription(int listId);
+    void createUserListSubscription(long listId);
 
     /**
      * Make the authenticated user follow the specified list.
@@ -210,7 +210,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show">GET lists/subscribers/show | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void showUserListSubscription(int listId, long userId);
+    void showUserListSubscription(long listId, long userId);
 
     /**
      * Check if the specified user is a subscriber of the specified list.
@@ -233,7 +233,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy">POST lists/subscribers/destroy | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void destroyUserListSubscription(int listId);
+    void destroyUserListSubscription(long listId);
 
     /**
      * Unsubscribes the authenticated user form the specified list.
@@ -255,12 +255,12 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all">POST lists/members/create_all | Twitter Developers</a>
      * @since Twitter4J 2.1.7
      */
-    void createUserListMembers(int listId, long[] userIds);
+    void createUserListMembers(long listId, long[] userIds);
 
     /**
      * @deprecated use {@link #createUserListMembers(int, long[])} instead
      */
-    void addUserListMembers(int listId, long[] userIds);
+    void addUserListMembers(long listId, long[] userIds);
 
     /**
      * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
@@ -288,12 +288,12 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all">POST lists/members/create_all | Twitter Developers</a>
      * @since Twitter4J 2.1.7
      */
-    void createUserListMembers(int listId, String[] screenNames);
+    void createUserListMembers(long listId, String[] screenNames);
 
     /**
      * @deprecated use {@link #createUserListMembers(int, String[])} instead
      */
-    void addUserListMembers(int listId, String[] screenNames);
+    void addUserListMembers(long listId, String[] screenNames);
 
     /**
      * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
@@ -321,7 +321,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members/show">GET lists/members/show | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void showUserListMembership(int listId, long userId);
+    void showUserListMembership(long listId, long userId);
 
     /**
      * Check if a user is a member of the specified list.<br>
@@ -345,7 +345,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members">GET lists/members | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void getUserListMembers(int listId, long cursor);
+    void getUserListMembers(long listId, long cursor);
 
     /**
      * Returns the members of the specified list.
@@ -368,12 +368,12 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create">POST lists/members/create | Twitter Developers</a>
      * @since Twitter4J 2.1.1
      */
-    void createUserListMember(int listId, long userId);
+    void createUserListMember(long listId, long userId);
 
     /**
      * @deprecated use {@link #createUserListMember(int, long)} instead
      */
-    void addUserListMember(int listId, long userId);
+    void addUserListMember(long listId, long userId);
 
     /**
      * Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members.
@@ -400,7 +400,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/destroy">POST lists/destroy | Twitter Developers</a>
      * @since Twitter4J 2.1.1
      */
-    void destroyUserList(int listId);
+    void destroyUserList(long listId);
 
     /**
      * Deletes the specified list. Must be owned by the authenticated user.
@@ -424,7 +424,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/update ">POST lists/update | Twitter Developers</a>
      * @since Twitter4J 2.1.1
      */
-    void updateUserList(int listId, String newListName, boolean isPublicList, String newDescription);
+    void updateUserList(long listId, String newListName, boolean isPublicList, String newDescription);
 
     /**
      * Updates the specified list.
@@ -460,7 +460,7 @@
      * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/show">https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers</a>
      * @since Twitter4J 2.2.3
      */
-    void showUserList(int listId);
+    void showUserList(long listId);
 
 
     /**
diff --git a/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java b/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java
index eab4772..cb74507 100644
--- a/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java
+++ b/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java
@@ -1102,7 +1102,7 @@
     }
 
     @Override
-    public UserList deleteUserListMember(int listId, long userId) throws TwitterException {
+    public UserList deleteUserListMember(long listId, long userId) throws TwitterException {
         return destroyUserListMember(listId, userId);
     }
 
@@ -1303,7 +1303,7 @@
     }
 
     @Override
-    public UserList addUserListMembers(int listId, long[] userIds) throws TwitterException {
+    public UserList addUserListMembers(long listId, long[] userIds) throws TwitterException {
         return createUserListMembers(listId, userIds);
     }
 
@@ -1346,7 +1346,7 @@
     }
 
     @Override
-    public UserList addUserListMembers(int listId, String[] screenNames) throws TwitterException {
+    public UserList addUserListMembers(long listId, String[] screenNames) throws TwitterException {
         return createUserListMembers(listId, screenNames);
     }
 
@@ -1446,7 +1446,7 @@
     }
 
     @Override
-    public UserList addUserListMember(int listId, long userId) throws TwitterException {
+    public UserList addUserListMember(long listId, long userId) throws TwitterException {
         return null;  //To change body of implemented methods use File | Settings | File Templates.
     }
 
diff --git a/twitter4j-core/src/main/java/twitter4j/api/ListsResources.java b/twitter4j-core/src/main/java/twitter4j/api/ListsResources.java
index 4a51f80..7e596cb 100644
--- a/twitter4j-core/src/main/java/twitter4j/api/ListsResources.java
+++ b/twitter4j-core/src/main/java/twitter4j/api/ListsResources.java
@@ -108,9 +108,9 @@
     UserList destroyUserListMember(long listId, long userId) throws TwitterException;
 
     /**
-     * @deprecated use {@link #destroyUserList(int)} instead
+     * @deprecated use {@link #destroyUserList(long)} instead
      */
-    UserList deleteUserListMember(int listId, long userId) throws TwitterException;
+    UserList deleteUserListMember(long listId, long userId) throws TwitterException;
 
     /**
      * Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.
@@ -394,9 +394,9 @@
     UserList createUserListMembers(long listId, long[] userIds) throws TwitterException;
 
     /**
-     * @deprecated use {@link #createUserListMembers(int, long[])} instead
+     * @deprecated use {@link #createUserListMembers(long, long[])} instead
      */
-    UserList addUserListMembers(int listId, long[] userIds) throws TwitterException;
+    UserList addUserListMembers(long listId, long[] userIds) throws TwitterException;
 
     /**
      * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
@@ -412,7 +412,7 @@
     UserList createUserListMembers(long ownerId, String slug, long[] userIds) throws TwitterException;
 
     /**
-     * @deprecated use {@link #createUserListMembers(int, long[])} instead
+     * @deprecated use {@link #createUserListMembers(long, long[])} instead
      */
     UserList addUserListMembers(long ownerId, String slug, long[] userIds) throws TwitterException;
 
@@ -442,9 +442,9 @@
     UserList createUserListMembers(long listId, String[] screenNames) throws TwitterException;
 
     /**
-     * @deprecated use {@link #createUserListMembers(int, String[])} instead
+     * @deprecated use {@link #createUserListMembers(long, String[])} instead
      */
-    UserList addUserListMembers(int listId, String[] screenNames) throws TwitterException;
+    UserList addUserListMembers(long listId, String[] screenNames) throws TwitterException;
 
     /**
      * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
@@ -459,7 +459,7 @@
     UserList createUserListMembers(long ownerId, String slug, String[] screenNames) throws TwitterException;
 
     /**
-     * @deprecated use {@link #createUserListMembers(int, String[])} instead
+     * @deprecated use {@link #createUserListMembers(long, String[])} instead
      */
     UserList addUserListMembers(long ownerId, String slug, String[] screenNames) throws TwitterException;
 
@@ -577,9 +577,9 @@
     UserList createUserListMember(long listId, long userId) throws TwitterException;
 
     /**
-     * @deprecated use {@link #createUserListMember(int, long)}} instead
+     * @deprecated use {@link #createUserListMember(long, long)}} instead
      */
-    UserList addUserListMember(int listId, long userId) throws TwitterException;
+    UserList addUserListMember(long listId, long userId) throws TwitterException;
 
     /**
      * Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members.
diff --git a/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java b/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java
index a02d694..0919e1d 100644
--- a/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java
+++ b/twitter4j-async/src/main/java/twitter4j/AsyncTwitterImpl.java
@@ -1870,7 +1870,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void getUserListStatuses(final int listId, final Paging paging) {
+    public void getUserListStatuses(final long listId, final Paging paging) {
         getDispatcher().invokeLater(new AsyncTask(USER_LIST_STATUSES, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -1908,7 +1908,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void destroyUserListMember(final int listId, final long userId) {
+    public void destroyUserListMember(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(DESTROY_LIST_MEMBER, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -1924,7 +1924,7 @@
     }
 
     @Override
-    public void deleteUserListMember(int listId, long userId) {
+    public void deleteUserListMember(long listId, long userId) {
         destroyUserListMember(listId, userId);
     }
 
@@ -2032,7 +2032,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void getUserListSubscribers(final int listId, final long cursor) {
+    public void getUserListSubscribers(final long listId, final long cursor) {
         getDispatcher().invokeLater(new AsyncTask(LIST_SUBSCRIBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2070,7 +2070,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListSubscription(final int listId) {
+    public void createUserListSubscription(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(SUBSCRIBE_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2108,7 +2108,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void showUserListSubscription(final int listId, final long userId) {
+    public void showUserListSubscription(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(CHECK_LIST_SUBSCRIPTION, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2146,7 +2146,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void destroyUserListSubscription(final int listId) {
+    public void destroyUserListSubscription(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(UNSUBSCRIBE_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2185,7 +2185,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListMembers(final int listId, final long[] userIds) {
+    public void createUserListMembers(final long listId, final long[] userIds) {
         getDispatcher().invokeLater(new AsyncTask(CREATE_LIST_MEMBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2201,7 +2201,7 @@
     }
 
     @Override
-    public void addUserListMembers(int listId, long[] userIds) {
+    public void addUserListMembers(long listId, long[] userIds) {
         createUserListMembers(listId, userIds);
     }
 
@@ -2233,7 +2233,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListMembers(final int listId, final String[] screenNames) {
+    public void createUserListMembers(final long listId, final String[] screenNames) {
         getDispatcher().invokeLater(new AsyncTask(CREATE_LIST_MEMBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2249,7 +2249,7 @@
     }
 
     @Override
-    public void addUserListMembers(int listId, String[] screenNames) {
+    public void addUserListMembers(long listId, String[] screenNames) {
         createUserListMembers(listId, screenNames);
     }
 
@@ -2281,7 +2281,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void showUserListMembership(final int listId, final long userId) {
+    public void showUserListMembership(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(CHECK_LIST_MEMBERSHIP, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2319,7 +2319,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void getUserListMembers(final int listId, final long cursor) {
+    public void getUserListMembers(final long listId, final long cursor) {
         getDispatcher().invokeLater(new AsyncTask(LIST_MEMBERS, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2357,7 +2357,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void createUserListMember(final int listId, final long userId) {
+    public void createUserListMember(final long listId, final long userId) {
         getDispatcher().invokeLater(new AsyncTask(CREATE_LIST_MEMBER, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2373,7 +2373,7 @@
     }
 
     @Override
-    public void addUserListMember(int listId, long userId) {
+    public void addUserListMember(long listId, long userId) {
         createUserListMember(listId, userId);
     }
 
@@ -2405,7 +2405,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void destroyUserList(final int listId) {
+    public void destroyUserList(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(DESTROY_USER_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2443,7 +2443,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void updateUserList(final int listId, final String newListName, final boolean isPublicList, final String newDescription) {
+    public void updateUserList(final long listId, final String newListName, final boolean isPublicList, final String newDescription) {
         getDispatcher().invokeLater(new AsyncTask(UPDATE_USER_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
@@ -2500,7 +2500,7 @@
      * {@inheritDoc}
      */
     @Override
-    public void showUserList(final int listId) {
+    public void showUserList(final long listId) {
         getDispatcher().invokeLater(new AsyncTask(SHOW_USER_LIST, listeners) {
             @Override
             public void invoke(List<TwitterListener> listeners) throws TwitterException {
