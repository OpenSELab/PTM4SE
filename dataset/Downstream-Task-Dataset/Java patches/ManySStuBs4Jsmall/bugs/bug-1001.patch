diff --git a/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java b/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java
index a7bde68..693255b 100644
--- a/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java
+++ b/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java
@@ -53,7 +53,7 @@
     Preconditions.checkState(!contains(payload), "the payload already exists in the DAG");
 
     // construct the new node
-    DirectedAcyclicGraphNode<T> newNode = new DirectedAcyclicGraphNode<T>(payload);
+    DirectedAcyclicGraphNode<T> newNode = new DirectedAcyclicGraphNode<>(payload);
     mIndex.put(payload, newNode);
 
     if (parents.isEmpty()) {
@@ -177,8 +177,7 @@
     List<T> result = new ArrayList<>();
 
     Set<T> input = new HashSet<>(payloads);
-    Deque<DirectedAcyclicGraphNode<T>> toVisit =
-        new ArrayDeque<DirectedAcyclicGraphNode<T>>(mRoots);
+    Deque<DirectedAcyclicGraphNode<T>> toVisit = new ArrayDeque<>(mRoots);
     while (!toVisit.isEmpty()) {
       DirectedAcyclicGraphNode<T> visit = toVisit.removeFirst();
       T payload = visit.getPayload();
diff --git a/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java b/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java
index a7bde68..693255b 100644
--- a/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java
+++ b/core/common/src/main/java/alluxio/collections/DirectedAcyclicGraph.java
@@ -53,7 +53,7 @@
     Preconditions.checkState(!contains(payload), "the payload already exists in the DAG");
 
     // construct the new node
-    DirectedAcyclicGraphNode<T> newNode = new DirectedAcyclicGraphNode<T>(payload);
+    DirectedAcyclicGraphNode<T> newNode = new DirectedAcyclicGraphNode<>(payload);
     mIndex.put(payload, newNode);
 
     if (parents.isEmpty()) {
@@ -177,8 +177,7 @@
     List<T> result = new ArrayList<>();
 
     Set<T> input = new HashSet<>(payloads);
-    Deque<DirectedAcyclicGraphNode<T>> toVisit =
-        new ArrayDeque<DirectedAcyclicGraphNode<T>>(mRoots);
+    Deque<DirectedAcyclicGraphNode<T>> toVisit = new ArrayDeque<>(mRoots);
     while (!toVisit.isEmpty()) {
       DirectedAcyclicGraphNode<T> visit = toVisit.removeFirst();
       T payload = visit.getPayload();
