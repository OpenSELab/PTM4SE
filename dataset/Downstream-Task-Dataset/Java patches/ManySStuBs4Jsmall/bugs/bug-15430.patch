diff --git a/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java b/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java
index 7c9ba86..ac717b8 100644
--- a/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java
+++ b/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java
@@ -169,7 +169,7 @@
                 return BigInteger.valueOf(number.longValue());
             }
             if (value instanceof Boolean) {
-                return ((Boolean) value) ? BigInteger.ZERO : BigInteger.ONE;
+                return ((Boolean) value) ? BigInteger.ONE : BigInteger.ZERO;
             }
             return new BigInteger(value.toString());
         }
@@ -193,7 +193,7 @@
                 return BigDecimal.valueOf(number.doubleValue());
             }
             if (value instanceof Boolean) {
-                return ((Boolean) value) ? BigDecimal.ZERO : BigDecimal.ONE;
+                return ((Boolean) value) ? BigDecimal.ONE : BigDecimal.ZERO;
             }
             return new BigDecimal(value.toString());
         }
diff --git a/hazelcast/src/test/java/com/hazelcast/query/impl/TypeConverterTest.java b/hazelcast/src/test/java/com/hazelcast/query/impl/TypeConverterTest.java
index 8aa1433..6518789 100644
--- a/hazelcast/src/test/java/com/hazelcast/query/impl/TypeConverterTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/query/impl/TypeConverterTest.java
@@ -162,14 +162,13 @@
     @Test
     public void testBigIntegerConvert_whenPassedBooleanValue_thenConvertToBigInteger() throws Exception {
         Boolean value = Boolean.TRUE;
-        Comparable expectedBigIntValue = BigInteger.ZERO;   // Boolean TRUE means 0
-                                                            // Boolean FALSE means something non-zero, i.e. 1
+        Comparable trueAsNumber = BigInteger.ONE; // Boolean TRUE means non-zero value, i.e. 1, FALSE means 0
 
         Comparable comparable = TypeConverters.BIG_INTEGER_CONVERTER.convert(value);
 
         assertThat(comparable, allOf(
                 is(instanceOf(BigInteger.class)),
-                is(equalTo(expectedBigIntValue))
+                is(equalTo(trueAsNumber))
         ));
     }
 
@@ -277,14 +276,13 @@
     @Test
     public void testBigDecimalConvert_whenPassedBooleanValue_thenConvertToBigDecimal() throws Exception {
         Boolean value = Boolean.TRUE;
-        Comparable expectedDecimal = BigDecimal.ZERO;   // Boolean TRUE means 0
-                                                        // Boolean FALSE means something non-zero, i.e. 1
+        Comparable trueAsDecimal = BigDecimal.ONE; // Boolean TRUE means non-zero value, i.e. 1, FALSE means 0
 
         Comparable comparable = TypeConverters.BIG_DECIMAL_CONVERTER.convert(value);
 
         assertThat(comparable, allOf(
                 is(instanceOf(BigDecimal.class)),
-                is(equalTo(expectedDecimal))
+                is(equalTo(trueAsDecimal))
         ));
     }
 
diff --git a/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java b/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java
index 7c9ba86..ac717b8 100644
--- a/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java
+++ b/hazelcast/src/main/java/com/hazelcast/query/impl/TypeConverters.java
@@ -169,7 +169,7 @@
                 return BigInteger.valueOf(number.longValue());
             }
             if (value instanceof Boolean) {
-                return ((Boolean) value) ? BigInteger.ZERO : BigInteger.ONE;
+                return ((Boolean) value) ? BigInteger.ONE : BigInteger.ZERO;
             }
             return new BigInteger(value.toString());
         }
@@ -193,7 +193,7 @@
                 return BigDecimal.valueOf(number.doubleValue());
             }
             if (value instanceof Boolean) {
-                return ((Boolean) value) ? BigDecimal.ZERO : BigDecimal.ONE;
+                return ((Boolean) value) ? BigDecimal.ONE : BigDecimal.ZERO;
             }
             return new BigDecimal(value.toString());
         }
