diff --git a/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java b/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java
index 73151da..ab145db 100644
--- a/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java
+++ b/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java
@@ -52,20 +52,20 @@
     // the expected dependency answers (basic)
     String[] testAnswers = new String[] {        
         "root(ROOT-0, died-2) nsubj(died-2, Sam-1) tmod(died-2, today-3)",
-        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, which-5) ref(book-4, which-5) rel(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
+        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, which-5) ref(book-4, which-5) dobj(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
     };
       
     // the expected dependency answers (collapsed dependencies)
     String[] testAnswersCollapsed = new String[] {
         "root(ROOT-0, died-2) nsubj(died-2, Sam-1) tmod(died-2, today-3)",
-        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) rel(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
+        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
         
     };
     
     // the expected dependency answers (conjunctions processed)
     String[] testAnswersCCProcessed = new String[] {
         "root(ROOT-0, died-2) nsubj(died-2, Sam-1) tmod(died-2, today-3)",
-        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) rel(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
+        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
     };
     
     for (int i = 0; i < testTrees.length; i++) {
diff --git a/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java b/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java
index 73151da..ab145db 100644
--- a/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java
+++ b/test/src/edu/stanford/nlp/trees/GrammaticalStructureTest.java
@@ -52,20 +52,20 @@
     // the expected dependency answers (basic)
     String[] testAnswers = new String[] {        
         "root(ROOT-0, died-2) nsubj(died-2, Sam-1) tmod(died-2, today-3)",
-        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, which-5) ref(book-4, which-5) rel(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
+        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, which-5) ref(book-4, which-5) dobj(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
     };
       
     // the expected dependency answers (collapsed dependencies)
     String[] testAnswersCollapsed = new String[] {
         "root(ROOT-0, died-2) nsubj(died-2, Sam-1) tmod(died-2, today-3)",
-        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) rel(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
+        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
         
     };
     
     // the expected dependency answers (conjunctions processed)
     String[] testAnswersCCProcessed = new String[] {
         "root(ROOT-0, died-2) nsubj(died-2, Sam-1) tmod(died-2, today-3)",
-        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) rel(bought-7, which-5) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
+        "nsubj(saw-2, I-1) root(ROOT-0, saw-2) det(book-4, the-3) dobj(saw-2, book-4) dobj(bought-7, book-4) nsubj(bought-7, you-6) rcmod(book-4, bought-7)"
     };
     
     for (int i = 0; i < testTrees.length; i++) {
