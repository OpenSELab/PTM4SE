diff --git a/src/edu/stanford/nlp/ie/NumberNormalizer.java b/src/edu/stanford/nlp/ie/NumberNormalizer.java
index b3ebc32..b483c00 100644
--- a/src/edu/stanford/nlp/ie/NumberNormalizer.java
+++ b/src/edu/stanford/nlp/ie/NumberNormalizer.java
@@ -263,7 +263,7 @@
 
     // get numeric value of each word piece
     for (int curIndex = 0; curIndex < numWords; curIndex++) {
-      String curPart = fields[curIndex];
+      String curPart = fields[curIndex] == null ? "" : fields[curIndex].trim();
       Matcher m = alphaPattern.matcher(curPart);
       if (m.find()) {
         // Some part of the word has alpha characters
diff --git a/src/edu/stanford/nlp/pipeline/StanfordCoreNLP.java b/src/edu/stanford/nlp/pipeline/StanfordCoreNLP.java
index 4f88117..ec11d95 100644
--- a/src/edu/stanford/nlp/pipeline/StanfordCoreNLP.java
+++ b/src/edu/stanford/nlp/pipeline/StanfordCoreNLP.java
@@ -188,7 +188,7 @@
   }
 
   public StanfordCoreNLP(Properties props, boolean enforceRequirements, AnnotatorPool annotatorPool)  {
-    this.pool = annotatorPool;
+    this.pool = annotatorPool != null ? annotatorPool : constructAnnotatorPool(props, getAnnotatorImplementations());
     construct(props, enforceRequirements, getAnnotatorImplementations());
   }
 
@@ -205,7 +205,7 @@
     if (props == null) {
       throw new RuntimeIOException("ERROR: cannot find properties file \"" + propsFileNamePrefix + "\" in the classpath!");
     }
-    this.pool = new AnnotatorPool();
+    this.pool = constructAnnotatorPool(props, getAnnotatorImplementations());
     construct(props, enforceRequirements, getAnnotatorImplementations());
   }
 
diff --git a/src/edu/stanford/nlp/ie/NumberNormalizer.java b/src/edu/stanford/nlp/ie/NumberNormalizer.java
index b3ebc32..b483c00 100644
--- a/src/edu/stanford/nlp/ie/NumberNormalizer.java
+++ b/src/edu/stanford/nlp/ie/NumberNormalizer.java
@@ -263,7 +263,7 @@
 
     // get numeric value of each word piece
     for (int curIndex = 0; curIndex < numWords; curIndex++) {
-      String curPart = fields[curIndex];
+      String curPart = fields[curIndex] == null ? "" : fields[curIndex].trim();
       Matcher m = alphaPattern.matcher(curPart);
       if (m.find()) {
         // Some part of the word has alpha characters
