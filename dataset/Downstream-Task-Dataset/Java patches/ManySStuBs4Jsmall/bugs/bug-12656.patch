diff --git a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
index 88b79e1..94baa7b 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
@@ -116,7 +116,7 @@
         super(testSessionBuilder()
                 .setSystemProperty("legacy_timestamp", String.valueOf(legacyTimestamp))
                 .setTimeZoneKey(TIME_ZONE_KEY)
-                .setStartTime(new DateTime(2017, 04, 01, 12, 34, 56, 789, UTC_TIME_ZONE).getMillis())
+                .setStartTime(new DateTime(2017, 4, 1, 12, 34, 56, 789, UTC_TIME_ZONE).getMillis())
                 .build());
         TIMESTAMP = legacyTimestamp ? LEGACY_TIMESTAMP : NEW_TIMESTAMP;
     }
@@ -838,7 +838,7 @@
     public void testLocale()
     {
         Locale locale = Locale.KOREAN;
-        Session localeSession = testSessionBuilder()
+        Session localeSession = Session.builder(this.session)
                 .setTimeZoneKey(TIME_ZONE_KEY)
                 .setLocale(locale)
                 .build();
@@ -918,7 +918,7 @@
         // but our test framework doesn't support that syntax directly.
 
         Session oldKathmanduTimeZoneOffsetSession =
-                testSessionBuilder()
+                Session.builder(this.session)
                         .setTimeZoneKey(TIME_ZONE_KEY)
                         .setStartTime(new DateTime(1980, 1, 1, 10, 0, 0, DATE_TIME_ZONE).getMillis())
                         .build();
@@ -926,7 +926,7 @@
         TimeZoneKey europeWarsawTimeZoneKey = getTimeZoneKey("Europe/Warsaw");
         DateTimeZone europeWarsawTimeZone = getDateTimeZone(europeWarsawTimeZoneKey);
         Session europeWarsawSessionWinter =
-                testSessionBuilder()
+                Session.builder(this.session)
                         .setTimeZoneKey(europeWarsawTimeZoneKey)
                         .setStartTime(new DateTime(2017, 1, 1, 10, 0, 0, europeWarsawTimeZone).getMillis())
                         .build();
diff --git a/presto-main/src/test/java/com/facebook/presto/type/TestTimeBase.java b/presto-main/src/test/java/com/facebook/presto/type/TestTimeBase.java
index 4117e1c..b540fef 100644
--- a/presto-main/src/test/java/com/facebook/presto/type/TestTimeBase.java
+++ b/presto-main/src/test/java/com/facebook/presto/type/TestTimeBase.java
@@ -145,7 +145,7 @@
     {
         TimeZoneKey timeZoneThatChangedSince1970 = getTimeZoneKey("Asia/Kathmandu");
         DateTimeZone dateTimeZoneThatChangedSince1970 = getDateTimeZone(timeZoneThatChangedSince1970);
-        Session session = testSessionBuilder()
+        Session session = Session.builder(this.session)
                 .setTimeZoneKey(timeZoneThatChangedSince1970)
                 .build();
         try (FunctionAssertions localAssertions = new FunctionAssertions(session)) {
@@ -161,7 +161,7 @@
     {
         // Australia/Sydney will switch DST a second after session start
         // For simplicity we have to use time zone that is going forward when entering DST zone with 1970-01-01
-        Session session = testSessionBuilder()
+        Session session = Session.builder(this.session)
                 .setTimeZoneKey(getTimeZoneKey("Australia/Sydney"))
                 .setStartTime(new DateTime(2017, 10, 1, 1, 59, 59, 999, getDateTimeZone(getTimeZoneKey("Australia/Sydney"))).getMillis())
                 .build();
diff --git a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
index 88b79e1..94baa7b 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctionsBase.java
@@ -116,7 +116,7 @@
         super(testSessionBuilder()
                 .setSystemProperty("legacy_timestamp", String.valueOf(legacyTimestamp))
                 .setTimeZoneKey(TIME_ZONE_KEY)
-                .setStartTime(new DateTime(2017, 04, 01, 12, 34, 56, 789, UTC_TIME_ZONE).getMillis())
+                .setStartTime(new DateTime(2017, 4, 1, 12, 34, 56, 789, UTC_TIME_ZONE).getMillis())
                 .build());
         TIMESTAMP = legacyTimestamp ? LEGACY_TIMESTAMP : NEW_TIMESTAMP;
     }
@@ -838,7 +838,7 @@
     public void testLocale()
     {
         Locale locale = Locale.KOREAN;
-        Session localeSession = testSessionBuilder()
+        Session localeSession = Session.builder(this.session)
                 .setTimeZoneKey(TIME_ZONE_KEY)
                 .setLocale(locale)
                 .build();
@@ -918,7 +918,7 @@
         // but our test framework doesn't support that syntax directly.
 
         Session oldKathmanduTimeZoneOffsetSession =
-                testSessionBuilder()
+                Session.builder(this.session)
                         .setTimeZoneKey(TIME_ZONE_KEY)
                         .setStartTime(new DateTime(1980, 1, 1, 10, 0, 0, DATE_TIME_ZONE).getMillis())
                         .build();
@@ -926,7 +926,7 @@
         TimeZoneKey europeWarsawTimeZoneKey = getTimeZoneKey("Europe/Warsaw");
         DateTimeZone europeWarsawTimeZone = getDateTimeZone(europeWarsawTimeZoneKey);
         Session europeWarsawSessionWinter =
-                testSessionBuilder()
+                Session.builder(this.session)
                         .setTimeZoneKey(europeWarsawTimeZoneKey)
                         .setStartTime(new DateTime(2017, 1, 1, 10, 0, 0, europeWarsawTimeZone).getMillis())
                         .build();
