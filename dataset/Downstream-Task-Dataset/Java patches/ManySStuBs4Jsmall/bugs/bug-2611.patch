diff --git a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java
index 90cc5a9..f66fea2 100644
--- a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java
+++ b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java
@@ -52,7 +52,7 @@
 import java.util.Collection;
 
 @Api(value = "Pipelines/Pipelines", description = "Pipelines for the pipeline message processor")
-@Path("/system/pipelines")
+@Path("/system/pipelines/pipeline")
 @Consumes(MediaType.APPLICATION_JSON)
 @Produces(MediaType.APPLICATION_JSON)
 public class PipelineResource extends RestResource implements PluginRestResource {
@@ -74,7 +74,7 @@
 
     @ApiOperation(value = "Create a processing pipeline from source", notes = "")
     @POST
-    @Path("/pipeline")
+    @Path("/")
     public PipelineSource createFromParser(@ApiParam(name = "pipeline", required = true) @NotNull PipelineSource pipelineSource) throws ParseException {
         final Pipeline pipeline;
         try {
@@ -97,7 +97,7 @@
 
     @ApiOperation(value = "Parse a processing pipeline without saving it", notes = "")
     @POST
-    @Path("/pipeline/parse")
+    @Path("/parse")
     public PipelineSource parse(@ApiParam(name = "pipeline", required = true) @NotNull PipelineSource pipelineSource) throws ParseException {
         final Pipeline pipeline;
         try {
@@ -116,7 +116,7 @@
 
     @ApiOperation(value = "Get all processing pipelines")
     @GET
-    @Path("/pipeline")
+    @Path("/")
     public Collection<PipelineSource> getAll() {
         final Collection<PipelineDao> daos = pipelineService.loadAll();
         final ArrayList<PipelineSource> results = Lists.newArrayList();
@@ -128,7 +128,7 @@
     }
 
     @ApiOperation(value = "Get a processing pipeline", notes = "It can take up to a second until the change is applied")
-    @Path("/pipeline/{id}")
+    @Path("/{id}")
     @GET
     public PipelineSource get(@ApiParam(name = "id") @PathParam("id") String id) throws NotFoundException {
         final PipelineDao dao = pipelineService.load(id);
@@ -136,7 +136,7 @@
     }
 
     @ApiOperation(value = "Modify a processing pipeline", notes = "It can take up to a second until the change is applied")
-    @Path("/pipeline/{id}")
+    @Path("/{id}")
     @PUT
     public PipelineSource update(@ApiParam(name = "id") @PathParam("id") String id,
                              @ApiParam(name = "pipeline", required = true) @NotNull PipelineSource update) throws NotFoundException {
@@ -160,7 +160,7 @@
     }
 
     @ApiOperation(value = "Delete a processing pipeline", notes = "It can take up to a second until the change is applied")
-    @Path("/pipeline/{id}")
+    @Path("/{id}")
     @DELETE
     public void delete(@ApiParam(name = "id") @PathParam("id") String id) throws NotFoundException {
         pipelineService.load(id);
diff --git a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineStreamResource.java b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineStreamResource.java
index 3157326..7f9a45d 100644
--- a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineStreamResource.java
+++ b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineStreamResource.java
@@ -39,7 +39,7 @@
 import javax.ws.rs.core.MediaType;
 import java.util.Set;
 
-@Api(value = "Pipeline/Streams", description = "Stream assignment of processing pipelines")
+@Api(value = "Pipelines/Streams", description = "Stream assignment of processing pipelines")
 @Path("/system/pipelines/streams")
 @Consumes(MediaType.APPLICATION_JSON)
 @Produces(MediaType.APPLICATION_JSON)
diff --git a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/RuleResource.java b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/RuleResource.java
index 6016965..8438ae2 100644
--- a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/RuleResource.java
+++ b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/RuleResource.java
@@ -50,8 +50,8 @@
 import java.util.Collection;
 import java.util.stream.Collectors;
 
-@Api(value = "Pipeline/Rules", description = "Rules for the pipeline message processor")
-@Path("/system/pipelines")
+@Api(value = "Pipelines/Rules", description = "Rules for the pipeline message processor")
+@Path("/system/pipelines/rule")
 @Consumes(MediaType.APPLICATION_JSON)
 @Produces(MediaType.APPLICATION_JSON)
 public class RuleResource extends RestResource implements PluginRestResource {
@@ -74,7 +74,7 @@
 
     @ApiOperation(value = "Create a processing rule from source", notes = "")
     @POST
-    @Path("/rule")
+    @Path("/")
     public RuleSource createFromParser(@ApiParam(name = "rule", required = true) @NotNull RuleSource ruleSource) throws ParseException {
         final Rule rule;
         try {
@@ -98,7 +98,7 @@
 
     @ApiOperation(value = "Parse a processing rule without saving it", notes = "")
     @POST
-    @Path("/rule/parse")
+    @Path("/parse")
     public RuleSource parse(@ApiParam(name = "rule", required = true) @NotNull RuleSource ruleSource) throws ParseException {
         final Rule rule;
         try {
@@ -117,7 +117,7 @@
 
     @ApiOperation(value = "Get all processing rules")
     @GET
-    @Path("/rule")
+    @Path("/")
     public Collection<RuleSource> getAll() {
         final Collection<RuleDao> ruleDaos = ruleService.loadAll();
         return ruleDaos.stream()
@@ -126,14 +126,14 @@
     }
 
     @ApiOperation(value = "Get a processing rule", notes = "It can take up to a second until the change is applied")
-    @Path("/rule/{id}")
+    @Path("/{id}")
     @GET
     public RuleSource get(@ApiParam(name = "id") @PathParam("id") String id) throws NotFoundException {
         return RuleSource.fromDao(pipelineRuleParser, ruleService.load(id));
     }
 
     @ApiOperation("Retrieve the named processing rules in bulk")
-    @Path("/rule/multiple")
+    @Path("/multiple")
     @POST
     public Collection<RuleSource> getBulk(@ApiParam("rules") BulkRuleRequest rules) {
         Collection<RuleDao> ruleDaos = ruleService.loadNamed(rules.rules());
@@ -144,7 +144,7 @@
     }
 
     @ApiOperation(value = "Modify a processing rule", notes = "It can take up to a second until the change is applied")
-    @Path("/rule/{id}")
+    @Path("/{id}")
     @PUT
     public RuleSource update(@ApiParam(name = "id") @PathParam("id") String id,
                              @ApiParam(name = "rule", required = true) @NotNull RuleSource update) throws NotFoundException {
@@ -170,7 +170,7 @@
     }
 
     @ApiOperation(value = "Delete a processing rule", notes = "It can take up to a second until the change is applied")
-    @Path("/rule/{id}")
+    @Path("/{id}")
     @DELETE
     public void delete(@ApiParam(name = "id") @PathParam("id") String id) throws NotFoundException {
         ruleService.load(id);
diff --git a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java
index 90cc5a9..f66fea2 100644
--- a/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java
+++ b/src/main/java/org/graylog/plugins/pipelineprocessor/rest/PipelineResource.java
@@ -52,7 +52,7 @@
 import java.util.Collection;
 
 @Api(value = "Pipelines/Pipelines", description = "Pipelines for the pipeline message processor")
-@Path("/system/pipelines")
+@Path("/system/pipelines/pipeline")
 @Consumes(MediaType.APPLICATION_JSON)
 @Produces(MediaType.APPLICATION_JSON)
 public class PipelineResource extends RestResource implements PluginRestResource {
@@ -74,7 +74,7 @@
 
     @ApiOperation(value = "Create a processing pipeline from source", notes = "")
     @POST
-    @Path("/pipeline")
+    @Path("/")
     public PipelineSource createFromParser(@ApiParam(name = "pipeline", required = true) @NotNull PipelineSource pipelineSource) throws ParseException {
         final Pipeline pipeline;
         try {
@@ -97,7 +97,7 @@
 
     @ApiOperation(value = "Parse a processing pipeline without saving it", notes = "")
     @POST
-    @Path("/pipeline/parse")
+    @Path("/parse")
     public PipelineSource parse(@ApiParam(name = "pipeline", required = true) @NotNull PipelineSource pipelineSource) throws ParseException {
         final Pipeline pipeline;
         try {
@@ -116,7 +116,7 @@
 
     @ApiOperation(value = "Get all processing pipelines")
     @GET
-    @Path("/pipeline")
+    @Path("/")
     public Collection<PipelineSource> getAll() {
         final Collection<PipelineDao> daos = pipelineService.loadAll();
         final ArrayList<PipelineSource> results = Lists.newArrayList();
@@ -128,7 +128,7 @@
     }
 
     @ApiOperation(value = "Get a processing pipeline", notes = "It can take up to a second until the change is applied")
-    @Path("/pipeline/{id}")
+    @Path("/{id}")
     @GET
     public PipelineSource get(@ApiParam(name = "id") @PathParam("id") String id) throws NotFoundException {
         final PipelineDao dao = pipelineService.load(id);
@@ -136,7 +136,7 @@
     }
 
     @ApiOperation(value = "Modify a processing pipeline", notes = "It can take up to a second until the change is applied")
-    @Path("/pipeline/{id}")
+    @Path("/{id}")
     @PUT
     public PipelineSource update(@ApiParam(name = "id") @PathParam("id") String id,
                              @ApiParam(name = "pipeline", required = true) @NotNull PipelineSource update) throws NotFoundException {
@@ -160,7 +160,7 @@
     }
 
     @ApiOperation(value = "Delete a processing pipeline", notes = "It can take up to a second until the change is applied")
-    @Path("/pipeline/{id}")
+    @Path("/{id}")
     @DELETE
     public void delete(@ApiParam(name = "id") @PathParam("id") String id) throws NotFoundException {
         pipelineService.load(id);
