diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java b/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java
index b2325fa..13c4aa0 100644
--- a/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java
+++ b/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java
@@ -447,7 +447,7 @@
     if (remainingInternal() <= 0) {
       return EOF_BLOCK_ID;
     }
-    Preconditions.checkState(mBlockIndex < mBlockIds.size(),
+    Preconditions.checkState(mBlockIndex >= 0 && mBlockIndex < mBlockIds.size(),
         PreconditionMessage.ERR_BLOCK_INDEX.toString(), mBlockIndex, mPos, mBlockIds.size() - 1);
     return mBlockIds.get(mBlockIndex);
   }
@@ -458,7 +458,7 @@
    */
   private long getBlockId(long pos) {
     int index = (int) (pos / mBlockSize);
-    Preconditions.checkState(index < mBlockIds.size(),
+    Preconditions.checkState(index >= 0 && index < mBlockIds.size(),
         PreconditionMessage.ERR_BLOCK_INDEX.toString(), index, pos, mBlockIds.size() - 1);
     return mBlockIds.get(index);
   }
@@ -484,8 +484,8 @@
   }
 
   /**
-   * Checks whether the current block stream has remaining bytes, if not, advance to the next block
-   * stream, otherwise, this is a no-op.
+   * Checks whether the current block stream has remaining bytes, if not, advances to the next block
+   * stream. Otherwise, this is a no-op.
    *
    * This should only be used in streaming read APIs. For APIs like {@link #seek(long)},
    * {@link #skip(long)}, the block stream should be updated according to the current read position,
diff --git a/core/common/src/main/java/alluxio/exception/PreconditionMessage.java b/core/common/src/main/java/alluxio/exception/PreconditionMessage.java
index e54c652..aa09974 100644
--- a/core/common/src/main/java/alluxio/exception/PreconditionMessage.java
+++ b/core/common/src/main/java/alluxio/exception/PreconditionMessage.java
@@ -25,7 +25,7 @@
   COMMAND_LINE_LINEAGE_ONLY("Only command line jobs are supported by createLineage"),
   EMPTY_FILE_INFO_LIST_FOR_PERMISSION_CHECK(
       "The passed-in file info list can not be empty when checking permission"),
-  ERR_BLOCK_INDEX("Current block index %s of position %s exceeds max index %s"),
+  ERR_BLOCK_INDEX("Current block index %s of position %s is out of range [0, %s]"),
   ERR_BLOCK_REMAINING("The current block still has space left, no need to get new block"),
   ERR_BUFFER_STATE("Buffer length: %s, offset: %s, len: %s"),
   ERR_CLOSED_BLOCK_IN_STREAM("Cannot do operations on a closed BlockInStream"),
diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java b/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java
index b2325fa..13c4aa0 100644
--- a/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java
+++ b/core/client/fs/src/main/java/alluxio/client/file/FileInStream.java
@@ -447,7 +447,7 @@
     if (remainingInternal() <= 0) {
       return EOF_BLOCK_ID;
     }
-    Preconditions.checkState(mBlockIndex < mBlockIds.size(),
+    Preconditions.checkState(mBlockIndex >= 0 && mBlockIndex < mBlockIds.size(),
         PreconditionMessage.ERR_BLOCK_INDEX.toString(), mBlockIndex, mPos, mBlockIds.size() - 1);
     return mBlockIds.get(mBlockIndex);
   }
@@ -458,7 +458,7 @@
    */
   private long getBlockId(long pos) {
     int index = (int) (pos / mBlockSize);
-    Preconditions.checkState(index < mBlockIds.size(),
+    Preconditions.checkState(index >= 0 && index < mBlockIds.size(),
         PreconditionMessage.ERR_BLOCK_INDEX.toString(), index, pos, mBlockIds.size() - 1);
     return mBlockIds.get(index);
   }
@@ -484,8 +484,8 @@
   }
 
   /**
-   * Checks whether the current block stream has remaining bytes, if not, advance to the next block
-   * stream, otherwise, this is a no-op.
+   * Checks whether the current block stream has remaining bytes, if not, advances to the next block
+   * stream. Otherwise, this is a no-op.
    *
    * This should only be used in streaming read APIs. For APIs like {@link #seek(long)},
    * {@link #skip(long)}, the block stream should be updated according to the current read position,
