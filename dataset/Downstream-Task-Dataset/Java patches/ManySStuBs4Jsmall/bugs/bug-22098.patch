diff --git a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
index f957e2b..b239c5a 100644
--- a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
+++ b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
@@ -562,9 +562,7 @@
           incomingEdges.get((V) edge.getDependent()).get((V) edge.getGovernor()).remove((E) edge);
           edgeIterator.remove();
         } else {
-          // TODO(from gabor): This passes the tests, but actually leaves the graph in an inconsistent state.
-          edgeIterator.remove();
-//          throw new UnsupportedOperationException("remove() is only valid if iterating over semantic graph edges (Gabor was too lazy to implement the general case...sorry!)");
+          throw new UnsupportedOperationException("remove() is only valid if iterating over semantic graph edges (Gabor was too lazy to implement the general case...sorry!)");
         }
       }
     }
diff --git a/src/edu/stanford/nlp/ie/util/RelationTriple.java b/src/edu/stanford/nlp/ie/util/RelationTriple.java
index 852ef7d..923655f 100644
--- a/src/edu/stanford/nlp/ie/util/RelationTriple.java
+++ b/src/edu/stanford/nlp/ie/util/RelationTriple.java
@@ -106,11 +106,11 @@
   }
 
   public Pair<Integer, Integer> subjectTokenSpan() {
-    return getSpan(subject, x -> x.index() - 1, x -> x.index() - 1);
+    return getSpan(subject, CoreLabel::index, CoreLabel::index);
   }
 
   public Pair<Integer, Integer> objectTokenSpan() {
-    return getSpan(subject, x -> x.index() - 1, x -> x.index() - 1);
+    return getSpan(subject, CoreLabel::index, CoreLabel::index);
   }
 
   /** An optional method, returning the dependency tree this triple was extracted from */
diff --git a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
index f957e2b..b239c5a 100644
--- a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
+++ b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java
@@ -562,9 +562,7 @@
           incomingEdges.get((V) edge.getDependent()).get((V) edge.getGovernor()).remove((E) edge);
           edgeIterator.remove();
         } else {
-          // TODO(from gabor): This passes the tests, but actually leaves the graph in an inconsistent state.
-          edgeIterator.remove();
-//          throw new UnsupportedOperationException("remove() is only valid if iterating over semantic graph edges (Gabor was too lazy to implement the general case...sorry!)");
+          throw new UnsupportedOperationException("remove() is only valid if iterating over semantic graph edges (Gabor was too lazy to implement the general case...sorry!)");
         }
       }
     }
