diff --git a/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java b/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java
index c074148..a5d9db2 100644
--- a/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java
+++ b/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java
@@ -34,7 +34,7 @@
     CoreMap m = new ArrayCoreMap();
     String text = "We present a paper that focuses on semantic graphs applied to language.";
 
-    String graphString="[present/VBP-2 nsubj:We/PRP-1 dobj:[paper/NN-4 det:a/DT-3] ccomp:[applied/VBN-10 mark:that/IN-5 nsubj:[focuses/NN-6 prep_on:[graphs/NNS-9 amod:semantic/JJ-8]] prep_to:language/NN-12]]";
+    String graphString="[present/VBP-2 nsubj>We/PRP-1 dobj>[paper/NN-4 det>a/DT-3] ccomp>[applied/VBN-10 mark>that/IN-5 nsubj>[focuses/NN-6 nmod:on>[graphs/NNS-9 amod>semantic/JJ-8]] nmod:to>language/NN-12]]";
     SemanticGraph graph = SemanticGraph.valueOf(graphString);
 
     //String phrase = "semantic graphs";
diff --git a/test/src/edu/stanford/nlp/semgraph/SemanticGraphTest.java b/test/src/edu/stanford/nlp/semgraph/SemanticGraphTest.java
index 836c57f..8bb703b 100644
--- a/test/src/edu/stanford/nlp/semgraph/SemanticGraphTest.java
+++ b/test/src/edu/stanford/nlp/semgraph/SemanticGraphTest.java
@@ -138,28 +138,28 @@
   }
 
   public void testTopologicalSort() {
-    SemanticGraph gr = SemanticGraph.valueOf("[ate subj:Bill dobj:[muffins nn:blueberry]]");
+    SemanticGraph gr = SemanticGraph.valueOf("[ate subj>Bill dobj>[muffins compound>blueberry]]");
     verifyTopologicalSort(gr);
 
     List<IndexedWord> vertices = gr.vertexListSorted();
-    gr.addEdge(vertices.get(1), vertices.get(2), EnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
+    gr.addEdge(vertices.get(1), vertices.get(2), UniversalEnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
     verifyTopologicalSort(gr);
 
-    gr = SemanticGraph.valueOf("[ate subj:Bill dobj:[muffins nn:blueberry]]");
+    gr = SemanticGraph.valueOf("[ate subj>Bill dobj>[muffins compound>blueberry]]");
     vertices = gr.vertexListSorted();
-    gr.addEdge(vertices.get(2), vertices.get(1), EnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
+    gr.addEdge(vertices.get(2), vertices.get(1), UniversalEnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
     verifyTopologicalSort(gr);
 
-    gr = SemanticGraph.valueOf("[ate subj:Bill dobj:[muffins nn:blueberry]]");
+    gr = SemanticGraph.valueOf("[ate subj>Bill dobj>[muffins compound>blueberry]]");
     vertices = gr.vertexListSorted();
-    gr.addEdge(vertices.get(1), vertices.get(3), EnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
+    gr.addEdge(vertices.get(1), vertices.get(3), UniversalEnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
     verifyTopologicalSort(gr);
 
     // now create a graph with a directed loop, which we should not
     // be able to topologically sort
-    gr = SemanticGraph.valueOf("[ate subj:Bill dobj:[muffins nn:blueberry]]");
+    gr = SemanticGraph.valueOf("[ate subj>Bill dobj>[muffins compound>blueberry]]");
     vertices = gr.vertexListSorted();
-    gr.addEdge(vertices.get(3), vertices.get(0), EnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
+    gr.addEdge(vertices.get(3), vertices.get(0), UniversalEnglishGrammaticalRelations.DIRECT_OBJECT, 1.0, false);
     try {
       verifyTopologicalSort(gr);
       throw new RuntimeException("Expected to fail");
@@ -233,7 +233,7 @@
   }
 
   public void testHasChildren() {
-    SemanticGraph gr = SemanticGraph.valueOf("[ate subj:Bill dobj:[muffins nn:blueberry]]");
+    SemanticGraph gr = SemanticGraph.valueOf("[ate subj>Bill dobj>[muffins compound>blueberry]]");
 
     List<IndexedWord> vertices = gr.vertexListSorted();
     for (IndexedWord word : vertices) {
diff --git a/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java b/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java
index c074148..a5d9db2 100644
--- a/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java
+++ b/test/src/edu/stanford/nlp/patterns/CreatePatternsTest.java
@@ -34,7 +34,7 @@
     CoreMap m = new ArrayCoreMap();
     String text = "We present a paper that focuses on semantic graphs applied to language.";
 
-    String graphString="[present/VBP-2 nsubj:We/PRP-1 dobj:[paper/NN-4 det:a/DT-3] ccomp:[applied/VBN-10 mark:that/IN-5 nsubj:[focuses/NN-6 prep_on:[graphs/NNS-9 amod:semantic/JJ-8]] prep_to:language/NN-12]]";
+    String graphString="[present/VBP-2 nsubj>We/PRP-1 dobj>[paper/NN-4 det>a/DT-3] ccomp>[applied/VBN-10 mark>that/IN-5 nsubj>[focuses/NN-6 nmod:on>[graphs/NNS-9 amod>semantic/JJ-8]] nmod:to>language/NN-12]]";
     SemanticGraph graph = SemanticGraph.valueOf(graphString);
 
     //String phrase = "semantic graphs";
