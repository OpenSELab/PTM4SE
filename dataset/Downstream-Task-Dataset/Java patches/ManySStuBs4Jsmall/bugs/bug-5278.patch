diff --git a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java
index 91ff0f9..c955c1c 100644
--- a/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java
+++ b/components/camel-univocity-parsers/src/test/java/org/apache/camel/dataformat/univocity/UniVocityFixedWidthDataFormatUnmarshalSpringTest.java
@@ -50,7 +50,7 @@
         result.expectedMessageCount(1);
         result.assertIsSatisfied();
 
-        List body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
+        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
         assertEquals(3, body.size());
         assertEquals(Arrays.asList("A", "B", "C"), body.get(0));
         assertEquals(Arrays.asList("1", "2", "3"), body.get(1));
@@ -67,7 +67,7 @@
         result.expectedMessageCount(1);
         result.assertIsSatisfied();
 
-        List body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
+        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
         assertEquals(2, body.size());
         assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0));
         assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1));
@@ -83,7 +83,7 @@
         result.expectedMessageCount(1);
         result.assertIsSatisfied();
 
-        List body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
+        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
         assertEquals(2, body.size());
         assertEquals(asMap("A", "1", "B", "2", "C", "3"), body.get(0));
         assertEquals(asMap("A", "one", "B", "two", "C", "three"), body.get(1));
@@ -99,7 +99,7 @@
         result.expectedMessageCount(1);
         result.assertIsSatisfied();
 
-        Iterator body = assertIsInstanceOf(Iterator.class, result.getExchanges().get(0).getIn().getBody());
+        Iterator<?> body = assertIsInstanceOf(Iterator.class, result.getExchanges().get(0).getIn().getBody());
 
         // Read first line
         assertTrue(body.hasNext());
@@ -139,7 +139,7 @@
         result.expectedMessageCount(1);
         result.assertIsSatisfied();
 
-        List body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
+        List<?> body = assertIsInstanceOf(List.class, result.getExchanges().get(0).getIn().getBody());
         assertEquals(2, body.size());
         assertEquals(Arrays.asList("A", "B"), body.get(0));
         assertEquals(Arrays.asList("N/A", "D"), body.get(1));
