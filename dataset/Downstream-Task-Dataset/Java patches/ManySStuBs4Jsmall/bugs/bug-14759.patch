diff --git a/guava-tests/test/com/google/common/graph/AbstractGraphTest.java b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java
index 1ef26c2..0ad35cf 100644
--- a/guava-tests/test/com/google/common/graph/AbstractGraphTest.java
+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java
@@ -202,21 +202,21 @@
         assertTrue(!graph.edgesConnecting(node, adjacentNode).isEmpty()
             || !graph.edgesConnecting(adjacentNode, node).isEmpty());
         assertThat(graph.incidentEdges(node)).isNotEmpty();
-        assertThat(graph.incidentEdges(node)).hasSize((int) graph.degree(node));
+        assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));
       }
 
       for (Integer predecessor : graph.predecessors(node)) {
         assertThat(graph.successors(predecessor)).contains(node);
         assertThat(graph.edgesConnecting(predecessor, node)).isNotEmpty();
         assertThat(graph.inEdges(node)).isNotEmpty();
-        assertThat(graph.inEdges(node)).hasSize((int) graph.inDegree(node));
+        assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));
       }
 
       for (Integer successor : graph.successors(node)) {
         assertThat(graph.predecessors(successor)).contains(node);
         assertThat(graph.edgesConnecting(node, successor)).isNotEmpty();
         assertThat(graph.outEdges(node)).isNotEmpty();
-        assertThat(graph.outEdges(node)).hasSize((int) graph.outDegree(node));
+        assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));
       }
     }
   }
diff --git a/guava/src/com/google/common/graph/AbstractGraph.java b/guava/src/com/google/common/graph/AbstractGraph.java
index 134a02d..9a1a69d 100644
--- a/guava/src/com/google/common/graph/AbstractGraph.java
+++ b/guava/src/com/google/common/graph/AbstractGraph.java
@@ -45,17 +45,17 @@
   }
 
   @Override
-  public long degree(Object node) {
+  public int degree(Object node) {
     return incidentEdges(node).size();
   }
 
   @Override
-  public long inDegree(Object node) {
+  public int inDegree(Object node) {
     return inEdges(node).size();
   }
 
   @Override
-  public long outDegree(Object node) {
+  public int outDegree(Object node) {
     return outEdges(node).size();
   }
 
diff --git a/guava/src/com/google/common/graph/Graph.java b/guava/src/com/google/common/graph/Graph.java
index 674077a..5382cb3 100644
--- a/guava/src/com/google/common/graph/Graph.java
+++ b/guava/src/com/google/common/graph/Graph.java
@@ -306,33 +306,36 @@
 
   /**
    * Returns the number of edges {@linkplain #incidentEdges(Object) incident} in this graph
-   * to {@code node}.
+   * to {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incident edges
+   * in this graph, returns {@code Integer.MAX_VALUE}.
    *
    * <p>Equivalent to {@code incidentEdges(node).size()}.
    *
    * @throws IllegalArgumentException if {@code node} is not an element of this graph
    */
-  long degree(Object node);
+  int degree(Object node);
 
   /**
    * Returns the number of {@linkplain #inEdges(Object) incoming edges} in this graph
-   * of {@code node}.
+   * of {@code node}.  If this node has more than {@code Integer.MAX_VALUE} incoming edges
+   * in this graph, returns {@code Integer.MAX_VALUE}.
    *
    * <p>Equivalent to {@code inEdges(node).size()}.
    *
    * @throws IllegalArgumentException if {@code node} is not an element of this graph
    */
-  long inDegree(Object node);
+  int inDegree(Object node);
 
   /**
    * Returns the number of {@linkplain #outEdges(Object) outgoing edges} in this graph
-   * of {@code node}.
+   * of {@code node}.  If this node has more than {@code Integer.MAX_VALUE} outgoing edges
+   * in this graph, returns {@code Integer.MAX_VALUE}.
    *
    * <p>Equivalent to {@code outEdges(node).size()}.
    *
    * @throws IllegalArgumentException if {@code node} is not an element of this graph
    */
-  long outDegree(Object node);
+  int outDegree(Object node);
 
   //
   // Element mutations
diff --git a/guava-tests/test/com/google/common/graph/AbstractGraphTest.java b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java
index 1ef26c2..0ad35cf 100644
--- a/guava-tests/test/com/google/common/graph/AbstractGraphTest.java
+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java
@@ -202,21 +202,21 @@
         assertTrue(!graph.edgesConnecting(node, adjacentNode).isEmpty()
             || !graph.edgesConnecting(adjacentNode, node).isEmpty());
         assertThat(graph.incidentEdges(node)).isNotEmpty();
-        assertThat(graph.incidentEdges(node)).hasSize((int) graph.degree(node));
+        assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));
       }
 
       for (Integer predecessor : graph.predecessors(node)) {
         assertThat(graph.successors(predecessor)).contains(node);
         assertThat(graph.edgesConnecting(predecessor, node)).isNotEmpty();
         assertThat(graph.inEdges(node)).isNotEmpty();
-        assertThat(graph.inEdges(node)).hasSize((int) graph.inDegree(node));
+        assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));
       }
 
       for (Integer successor : graph.successors(node)) {
         assertThat(graph.predecessors(successor)).contains(node);
         assertThat(graph.edgesConnecting(node, successor)).isNotEmpty();
         assertThat(graph.outEdges(node)).isNotEmpty();
-        assertThat(graph.outEdges(node)).hasSize((int) graph.outDegree(node));
+        assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));
       }
     }
   }
