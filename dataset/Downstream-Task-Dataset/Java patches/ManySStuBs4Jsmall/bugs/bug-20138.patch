diff --git a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java
index b831e1b..c23abee 100644
--- a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java
+++ b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java
@@ -727,7 +727,7 @@
             throw new APIException("Order.retrospective.stopped.cannot.discontinued");
         }
         if (!isRetrospective && !orderToStop.isActive()) {
-            throw new APIException("Cannot discontinue an order that is already stopped, expired or voided");
+            throw new APIException("Order.stopped.cannot.discontinued");
         }
 		else if (isRetrospective && !orderToStop.isActive(discontinueDate)) {
             throw new APIException("Order.retrospective.stopped.cannot.discontinued");
diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java
index fa589f7..32c7edf 100644
--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java
+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java
@@ -3211,7 +3211,7 @@
         order.setNumRefills(duplicateOrder.getNumRefills());
 
         expectedException.expect(APIException.class);
-        expectedException.expectMessage("Cannot have more than one active order for the same orderable and care setting");
+        expectedException.expectMessage("Order.cannot.have.more.than.one");
         orderService.saveRetrospectiveOrder(order, null);
     }
 }
diff --git a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java
index b831e1b..c23abee 100644
--- a/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java
+++ b/api/src/main/java/org/openmrs/api/impl/OrderServiceImpl.java
@@ -727,7 +727,7 @@
             throw new APIException("Order.retrospective.stopped.cannot.discontinued");
         }
         if (!isRetrospective && !orderToStop.isActive()) {
-            throw new APIException("Cannot discontinue an order that is already stopped, expired or voided");
+            throw new APIException("Order.stopped.cannot.discontinued");
         }
 		else if (isRetrospective && !orderToStop.isActive(discontinueDate)) {
             throw new APIException("Order.retrospective.stopped.cannot.discontinued");
