diff --git a/src/com/google/javascript/jscomp/newtypes/FunctionType.java b/src/com/google/javascript/jscomp/newtypes/FunctionType.java
index 7c091e6..7c7b819 100644
--- a/src/com/google/javascript/jscomp/newtypes/FunctionType.java
+++ b/src/com/google/javascript/jscomp/newtypes/FunctionType.java
@@ -150,10 +150,10 @@
   // We can't represent the theoretical top function, so we special-case
   // TOP_FUNCTION below. However, the outcome is the same; if our top function
   // is ever called, a warning is inevitable.
-  public static final FunctionType TOP_FUNCTION = new FunctionType(
+  static final FunctionType TOP_FUNCTION = new FunctionType(
       // Call the constructor directly to set fields to null
       null, null, null, null, null, null, null, null, false);
-  public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(
+  private static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(
       // Call the constructor directly to set fields to null
       null, null, null, null, null, null, null, null, true);
   // Corresponds to Function, which is a subtype and supertype of all functions.
diff --git a/test/com/google/javascript/jscomp/NewTypeInferenceTest.java b/test/com/google/javascript/jscomp/NewTypeInferenceTest.java
index 4e8b258..c8426e5 100644
--- a/test/com/google/javascript/jscomp/NewTypeInferenceTest.java
+++ b/test/com/google/javascript/jscomp/NewTypeInferenceTest.java
@@ -7786,17 +7786,17 @@
         TypeCheck.INEXISTENT_PROPERTY);
 
     typeCheck(
-        "/** @const */ var s = (true) ? null : null;\n" +
+        "/** @const */ var s = true ? null : null;\n" +
         "function g() { s - 5; }",
         NewTypeInference.INVALID_OPERAND_TYPE);
 
     typeCheck(
-        "/** @const */ var s = (true) ? void 0 : undefined;\n" +
+        "/** @const */ var s = true ? void 0 : undefined;\n" +
         "function g() { s - 5; }",
         NewTypeInference.INVALID_OPERAND_TYPE);
 
     typeCheck(
-        "/** @const */ var b = (true) ? (1<2) : ('' in {});\n" +
+        "/** @const */ var b = true ? (1<2) : ('' in {});\n" +
         "function g() { b - 5; }",
         NewTypeInference.INVALID_OPERAND_TYPE);
 
diff --git a/src/com/google/javascript/jscomp/newtypes/FunctionType.java b/src/com/google/javascript/jscomp/newtypes/FunctionType.java
index 7c091e6..7c7b819 100644
--- a/src/com/google/javascript/jscomp/newtypes/FunctionType.java
+++ b/src/com/google/javascript/jscomp/newtypes/FunctionType.java
@@ -150,10 +150,10 @@
   // We can't represent the theoretical top function, so we special-case
   // TOP_FUNCTION below. However, the outcome is the same; if our top function
   // is ever called, a warning is inevitable.
-  public static final FunctionType TOP_FUNCTION = new FunctionType(
+  static final FunctionType TOP_FUNCTION = new FunctionType(
       // Call the constructor directly to set fields to null
       null, null, null, null, null, null, null, null, false);
-  public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(
+  private static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(
       // Call the constructor directly to set fields to null
       null, null, null, null, null, null, null, null, true);
   // Corresponds to Function, which is a subtype and supertype of all functions.
