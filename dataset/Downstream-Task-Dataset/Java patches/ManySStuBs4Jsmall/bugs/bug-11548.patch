diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java
index 16b75ed..9480bf3 100644
--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java
+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java
@@ -599,9 +599,9 @@
       // Worker is still running this task
       final URL url = TaskRunnerUtils.makeWorkerURL(
           zkWorker.getWorker(),
-          "/druid/worker/v1/task/%s/log?offset=%d",
+          "/druid/worker/v1/task/%s/log?offset=%s",
           taskId,
-          offset
+          Long.toString(offset)
       );
       return Optional.of(
           new ByteSource()
diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java
index 176a3a1..6352b86 100644
--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java
+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunnerUtils.java
@@ -99,12 +99,12 @@
     }
   }
 
-  public static URL makeWorkerURL(Worker worker, String pathFormat, Object... pathParams)
+  public static URL makeWorkerURL(Worker worker, String pathFormat, String... pathParams)
   {
     Preconditions.checkArgument(pathFormat.startsWith("/"), "path must start with '/': %s", pathFormat);
     final String path = StringUtils.format(
         pathFormat,
-        Arrays.stream(pathParams).map(s -> StringUtils.urlEncode(s.toString())).toArray()
+        Arrays.stream(pathParams).map(StringUtils::urlEncode).toArray()
     );
 
     try {
diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java
index b3c6f77..b4ebdf6 100644
--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java
+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java
@@ -112,7 +112,7 @@
  *  3. GET request for getting list of assigned, running, completed tasks on Middle Manager and its enable/disable status.
  *    This endpoint is implemented to support long poll and holds the request till there is a change. This class
  *    sends the next request immediately as the previous finishes to keep the state up-to-date.
- *
+ * <p>
  * ZK_CLEANUP_TODO : As of 0.11.1, it is required to cleanup task status paths from ZK which are created by the
  * workers to support deprecated RemoteTaskRunner. So a method "scheduleCompletedTaskStatusCleanupFromZk()" is added'
  * which should be removed in the release that removes RemoteTaskRunner legacy ZK updation WorkerTaskMonitor class.
@@ -858,7 +858,12 @@
       return Optional.absent();
     } else {
       // Worker is still running this task
-      final URL url = TaskRunnerUtils.makeWorkerURL(worker, "/druid/worker/v1/task/%s/log?offset=%d", taskId, offset);
+      final URL url = TaskRunnerUtils.makeWorkerURL(
+          worker,
+          "/druid/worker/v1/task/%s/log?offset=%s",
+          taskId,
+          Long.toString(offset)
+      );
       return Optional.of(
           new ByteSource()
           {
diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java
index 16b75ed..9480bf3 100644
--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java
+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java
@@ -599,9 +599,9 @@
       // Worker is still running this task
       final URL url = TaskRunnerUtils.makeWorkerURL(
           zkWorker.getWorker(),
-          "/druid/worker/v1/task/%s/log?offset=%d",
+          "/druid/worker/v1/task/%s/log?offset=%s",
           taskId,
-          offset
+          Long.toString(offset)
       );
       return Optional.of(
           new ByteSource()
