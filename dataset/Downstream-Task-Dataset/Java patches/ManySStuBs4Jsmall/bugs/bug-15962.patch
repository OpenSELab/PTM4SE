diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java b/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java
index ca81b4e..35c996e 100644
--- a/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java
+++ b/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java
@@ -302,7 +302,7 @@
         Arrays.sort(criterias);
         // we do want to hold references to key&value pairs and don't want to depend on Record
         // since Record content may be changed.
-        final Object[][] evictableKeyValuePairs = new Object[evictableSize][evictableSize];
+        final Object[][] evictableKeyValuePairs = new Object[evictableSize][2];
         int indexKVP = 0;
         // check in case record store size may be smaller than evictable size.
         final int evictableBaseIndex = Math.min(evictableSize, index - 1);
diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java b/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java
index ca81b4e..35c996e 100644
--- a/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java
+++ b/hazelcast/src/main/java/com/hazelcast/map/MapEvictionManager.java
@@ -302,7 +302,7 @@
         Arrays.sort(criterias);
         // we do want to hold references to key&value pairs and don't want to depend on Record
         // since Record content may be changed.
-        final Object[][] evictableKeyValuePairs = new Object[evictableSize][evictableSize];
+        final Object[][] evictableKeyValuePairs = new Object[evictableSize][2];
         int indexKVP = 0;
         // check in case record store size may be smaller than evictable size.
         final int evictableBaseIndex = Math.min(evictableSize, index - 1);
