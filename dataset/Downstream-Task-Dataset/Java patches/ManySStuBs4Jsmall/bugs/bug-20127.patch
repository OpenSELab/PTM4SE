diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java b/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java
index 460b97d..42960d5 100644
--- a/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java
+++ b/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java
@@ -108,7 +108,7 @@
 				if (log.isDebugEnabled()) {
 					log.debug("The following fields cannot be changed for " + getSupportedType() + ":" + changedProperties);
 				}
-				throw new APIException("Editing some fields: " + changedProperties + " on " + getSupportedType().getSimpleName() + " is not allowed");
+				throw new APIException("Editing some fields " + changedProperties + " on " + getSupportedType().getSimpleName() + " is not allowed");
 			}
 		}
 		
diff --git a/api/src/test/java/org/openmrs/OrderEntryIntegrationTest.java b/api/src/test/java/org/openmrs/OrderEntryIntegrationTest.java
index d21c8d4..0d587e4 100644
--- a/api/src/test/java/org/openmrs/OrderEntryIntegrationTest.java
+++ b/api/src/test/java/org/openmrs/OrderEntryIntegrationTest.java
@@ -296,7 +296,7 @@
 		assertFalse(encounter.getOrders().isEmpty());
 		encounter.getOrders().iterator().next().setInstructions("new");
 		expectedException.expect(APIException.class);
-		expectedException.expectMessage(Matchers.is(Context.getMessageSourceService().getMessage("editing.fields.not.allowed", new Object[] { Order.class.getSimpleName() }, null)));
+		expectedException.expectMessage(Matchers.is(Context.getMessageSourceService().getMessage("editing.fields.not.allowed", new Object[] { "[instructions]", Order.class.getSimpleName() }, null)));
 		encounterService.saveEncounter(encounter);
 		Context.flushSession();
 	}
diff --git a/api/src/test/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptorTest.java b/api/src/test/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptorTest.java
index 1bcb94c..e893bba 100644
--- a/api/src/test/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptorTest.java
+++ b/api/src/test/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptorTest.java
@@ -70,7 +70,7 @@
 		String[] currentState = new String[] { "new" };
 		ImmutableEntityInterceptor interceptor = new SomeImmutableEntityInterceptor();
 		expectedException.expect(APIException.class);
-		expectedException.expectMessage(is(Context.getMessageSourceService().getMessage("editing.fields.not.allowed", new Object[] { Order.class.getSimpleName() },  null)));
+		expectedException.expectMessage(is(Context.getMessageSourceService().getMessage("editing.fields.not.allowed", new Object[] { "[immutable]", Order.class.getSimpleName() },  null)));
 		interceptor.onFlushDirty(new Order(), null, currentState, previousState, propertyNames, null);
 	}
 	
@@ -100,7 +100,7 @@
 		String[] currentState = new String[] { "new" };
 		ImmutableEntityInterceptor interceptor = new SomeImmutableEntityInterceptor();
 		expectedException.expect(APIException.class);
-		expectedException.expectMessage(is(Context.getMessageSourceService().getMessage("editing.fields.not.allowed", new Object[] { Order.class.getSimpleName() },  null)));
+		expectedException.expectMessage(is(Context.getMessageSourceService().getMessage("editing.fields.not.allowed", new Object[] { "[immutable]", Order.class.getSimpleName() },  null)));
 		Order order = new Order();
 		order.setVoided(true);
 		interceptor.onFlushDirty(order, null, currentState, previousState, propertyNames, null);
diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java b/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java
index 460b97d..42960d5 100644
--- a/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java
+++ b/api/src/main/java/org/openmrs/api/db/hibernate/ImmutableEntityInterceptor.java
@@ -108,7 +108,7 @@
 				if (log.isDebugEnabled()) {
 					log.debug("The following fields cannot be changed for " + getSupportedType() + ":" + changedProperties);
 				}
-				throw new APIException("Editing some fields: " + changedProperties + " on " + getSupportedType().getSimpleName() + " is not allowed");
+				throw new APIException("Editing some fields " + changedProperties + " on " + getSupportedType().getSimpleName() + " is not allowed");
 			}
 		}
 		
