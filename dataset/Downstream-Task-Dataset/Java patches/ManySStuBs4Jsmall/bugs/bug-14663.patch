diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
index ff5d2c3..a0ac68a 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
@@ -91,7 +91,7 @@
     // An execution exception holds a runtime exception (from throwables.propogate) that holds our
     // original exception.
     assertEquals(service.runException, service.failureCause());
-    assertEquals(service.state(), Service.State.FAILED);
+    assertEquals(Service.State.FAILED, service.state());
   }
 
   public void testFailOnExceptionFromStartUp() {
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
index e0d0e3b..910cd61 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
@@ -323,7 +323,7 @@
     Thread t2 = newStartedThread(c2);
     awaitTermination(t1);
     awaitTermination(t2);
-    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);
+    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);
   }
 
   /**
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java
index 6a14131..c60d469 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java
@@ -42,7 +42,7 @@
     list.add(new MockRunnable(countDownLatch), exec);
     list.add(new MockRunnable(countDownLatch), exec);
     list.add(new MockRunnable(countDownLatch), exec);
-    assertEquals(countDownLatch.getCount(), 3L);
+    assertEquals(3L, countDownLatch.getCount());
 
     list.execute();
 
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java b/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java
index edbcd8c..2da2b16 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java
@@ -1199,7 +1199,7 @@
             assertNull(q.peek());
             assertNull(q.poll());
             assertNull(q.poll(0, MILLISECONDS));
-            assertEquals(q.toString(), "[]");
+            assertEquals("[]", q.toString());
             assertTrue(Arrays.equals(q.toArray(), new Object[0]));
             assertFalse(q.iterator().hasNext());
             try {
diff --git a/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
index ff5d2c3..a0ac68a 100644
--- a/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
@@ -91,7 +91,7 @@
     // An execution exception holds a runtime exception (from throwables.propogate) that holds our
     // original exception.
     assertEquals(service.runException, service.failureCause());
-    assertEquals(service.state(), Service.State.FAILED);
+    assertEquals(Service.State.FAILED, service.state());
   }
 
   public void testFailOnExceptionFromStartUp() {
diff --git a/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java b/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
index e0d0e3b..910cd61 100644
--- a/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
+++ b/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java
@@ -323,7 +323,7 @@
     Thread t2 = newStartedThread(c2);
     awaitTermination(t1);
     awaitTermination(t2);
-    assertEquals(c1.counts + c2.counts, SIZE * COUNTDOWN);
+    assertEquals(SIZE * COUNTDOWN, c1.counts + c2.counts);
   }
 
   /**
diff --git a/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java b/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java
index 6a14131..c60d469 100644
--- a/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java
+++ b/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java
@@ -42,7 +42,7 @@
     list.add(new MockRunnable(countDownLatch), exec);
     list.add(new MockRunnable(countDownLatch), exec);
     list.add(new MockRunnable(countDownLatch), exec);
-    assertEquals(countDownLatch.getCount(), 3L);
+    assertEquals(3L, countDownLatch.getCount());
 
     list.execute();
 
diff --git a/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java b/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java
index edbcd8c..2d200da 100644
--- a/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java
+++ b/guava-tests/test/com/google/common/util/concurrent/JSR166TestCase.java
@@ -1199,7 +1199,7 @@
             assertNull(q.peek());
             assertNull(q.poll());
             assertNull(q.poll(0, MILLISECONDS));
-            assertEquals(q.toString(), "[]");
+      assertEquals("[]", q.toString());
             assertTrue(Arrays.equals(q.toArray(), new Object[0]));
             assertFalse(q.iterator().hasNext());
             try {
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
index ff5d2c3..a0ac68a 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
@@ -91,7 +91,7 @@
     // An execution exception holds a runtime exception (from throwables.propogate) that holds our
     // original exception.
     assertEquals(service.runException, service.failureCause());
-    assertEquals(service.state(), Service.State.FAILED);
+    assertEquals(Service.State.FAILED, service.state());
   }
 
   public void testFailOnExceptionFromStartUp() {
