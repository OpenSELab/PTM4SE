diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java
index ed39639..9f04e14 100644
--- a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java
@@ -50,12 +50,12 @@
      * entered the desired state or not, where polling criteria is bound by
      * either default polling strategy or custom polling strategy.
      */
-    public Waiter bucketNotExists() {
+    public Waiter<HeadBucketRequest> bucketNotExists() {
 
         return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>()
                 .withSdkFunction(new HeadBucketFunction(client))
                 .withAcceptors(
-                        new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS))
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(404, WaiterState.SUCCESS))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
@@ -69,15 +69,15 @@
      * not, where polling criteria is bound by either default polling strategy
      * or custom polling strategy.
      */
-    public Waiter bucketExists() {
+    public Waiter<HeadBucketRequest> bucketExists() {
 
         return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>()
                 .withSdkFunction(new HeadBucketFunction(client))
                 .withAcceptors(
-                        new HttpSuccessStatusAcceptor(WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(301, WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(403, WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(404, WaiterState.RETRY))
+                        new HttpSuccessStatusAcceptor<HeadBucketResult>(WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(301, WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(403, WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(404, WaiterState.RETRY))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
@@ -91,13 +91,13 @@
      * not, where polling criteria is bound by either default polling strategy
      * or custom polling strategy.
      */
-    public Waiter objectExists() {
+    public Waiter<GetObjectMetadataRequest> objectExists() {
 
         return new WaiterBuilder<GetObjectMetadataRequest, ObjectMetadata>()
                 .withSdkFunction(new HeadObjectFunction(client))
                 .withAcceptors(
-                        new HttpSuccessStatusAcceptor(WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(404, WaiterState.RETRY))
+                        new HttpSuccessStatusAcceptor<ObjectMetadata>(WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<ObjectMetadata>(404, WaiterState.RETRY))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
@@ -111,12 +111,12 @@
      * entered the desired state or not, where polling criteria is bound by
      * either default polling strategy or custom polling strategy.
      */
-    public Waiter objectNotExists() {
+    public Waiter<GetObjectMetadataRequest> objectNotExists() {
 
         return new WaiterBuilder<GetObjectMetadataRequest, ObjectMetadata>()
                 .withSdkFunction(new HeadObjectFunction(client))
                 .withAcceptors(
-                        new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS))
+                        new HttpFailureStatusAcceptor<ObjectMetadata>(404, WaiterState.SUCCESS))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java
index ed39639..9f04e14 100644
--- a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java
+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/waiters/AmazonS3Waiters.java
@@ -50,12 +50,12 @@
      * entered the desired state or not, where polling criteria is bound by
      * either default polling strategy or custom polling strategy.
      */
-    public Waiter bucketNotExists() {
+    public Waiter<HeadBucketRequest> bucketNotExists() {
 
         return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>()
                 .withSdkFunction(new HeadBucketFunction(client))
                 .withAcceptors(
-                        new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS))
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(404, WaiterState.SUCCESS))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
@@ -69,15 +69,15 @@
      * not, where polling criteria is bound by either default polling strategy
      * or custom polling strategy.
      */
-    public Waiter bucketExists() {
+    public Waiter<HeadBucketRequest> bucketExists() {
 
         return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>()
                 .withSdkFunction(new HeadBucketFunction(client))
                 .withAcceptors(
-                        new HttpSuccessStatusAcceptor(WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(301, WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(403, WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(404, WaiterState.RETRY))
+                        new HttpSuccessStatusAcceptor<HeadBucketResult>(WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(301, WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(403, WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<HeadBucketResult>(404, WaiterState.RETRY))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
@@ -91,13 +91,13 @@
      * not, where polling criteria is bound by either default polling strategy
      * or custom polling strategy.
      */
-    public Waiter objectExists() {
+    public Waiter<GetObjectMetadataRequest> objectExists() {
 
         return new WaiterBuilder<GetObjectMetadataRequest, ObjectMetadata>()
                 .withSdkFunction(new HeadObjectFunction(client))
                 .withAcceptors(
-                        new HttpSuccessStatusAcceptor(WaiterState.SUCCESS),
-                        new HttpFailureStatusAcceptor(404, WaiterState.RETRY))
+                        new HttpSuccessStatusAcceptor<ObjectMetadata>(WaiterState.SUCCESS),
+                        new HttpFailureStatusAcceptor<ObjectMetadata>(404, WaiterState.RETRY))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
@@ -111,12 +111,12 @@
      * entered the desired state or not, where polling criteria is bound by
      * either default polling strategy or custom polling strategy.
      */
-    public Waiter objectNotExists() {
+    public Waiter<GetObjectMetadataRequest> objectNotExists() {
 
         return new WaiterBuilder<GetObjectMetadataRequest, ObjectMetadata>()
                 .withSdkFunction(new HeadObjectFunction(client))
                 .withAcceptors(
-                        new HttpFailureStatusAcceptor(404, WaiterState.SUCCESS))
+                        new HttpFailureStatusAcceptor<ObjectMetadata>(404, WaiterState.SUCCESS))
                 .withDefaultPollingStrategy(
                         new PollingStrategy(new MaxAttemptsRetryStrategy(20),
                                 new FixedDelayStrategy(5)))
