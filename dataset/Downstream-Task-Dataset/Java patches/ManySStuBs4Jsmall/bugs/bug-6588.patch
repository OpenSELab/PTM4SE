diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java
index 6a56e46..0d7553b 100644
--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java
+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java
@@ -1031,7 +1031,7 @@
 			} catch (InvalidTypesException e) {
 				//pojoFields.add(new PojoField(field, new GenericTypeInfo( Object.class ))); // we need kryo to properly serialize this
 				throw new InvalidTypesException("Flink is currently unable to serialize this type: "+fieldType+""
-						+ "\nThe system is using the Avro serializer which is not able to handle all types.", e);
+						+ "\nThe system is internally using the Avro serializer which is not able to handle that type.", e);
 			}
 		}
 
@@ -1054,7 +1054,7 @@
 		try {
 			clazz.getDeclaredConstructor();
 		} catch (NoSuchMethodException e) {
-			LOG.warn("Class "+clazz+" does not have a default constructor. You can not use it as a POJO");
+			LOG.warn("Class " + clazz + " must have a default constructor to be used as a POJO.");
 			return null;
 		}
 		
