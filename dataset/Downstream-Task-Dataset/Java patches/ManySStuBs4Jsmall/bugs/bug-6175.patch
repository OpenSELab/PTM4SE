diff --git a/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java b/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java
index 775497e..f094caa 100644
--- a/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java
+++ b/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java
@@ -40,12 +40,12 @@
     }
 
     @MessageDriven(uri = "direct:startHeaderExpression")
-    public void doSomethingHeaderExpression(String payload, @Header(name = "number") int count) {
+    public void doSomethingHeaderExpression(String payload, @Header("number") int count) {
         template.sendBodyAndHeader("mock:result", "Bye " + payload, "count", count);
     }
 
     @MessageDriven(uri = "direct:startMany")
-    public void doSomethingManyExpression(String payload, @Constant(value = "5") int count, @Header(name = "number") int number) {
+    public void doSomethingManyExpression(String payload, @Constant(value = "5") int count, @Header("number") int number) {
         template.sendBodyAndHeader("mock:result", "Bye " + payload, "count", count * number);
     }
 
diff --git a/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java b/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java
index 775497e..f094caa 100644
--- a/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java
+++ b/components/camel-spring/src/test/java/org/apache/camel/component/bean/MyBeanBindingConsumer.java
@@ -40,12 +40,12 @@
     }
 
     @MessageDriven(uri = "direct:startHeaderExpression")
-    public void doSomethingHeaderExpression(String payload, @Header(name = "number") int count) {
+    public void doSomethingHeaderExpression(String payload, @Header("number") int count) {
         template.sendBodyAndHeader("mock:result", "Bye " + payload, "count", count);
     }
 
     @MessageDriven(uri = "direct:startMany")
-    public void doSomethingManyExpression(String payload, @Constant(value = "5") int count, @Header(name = "number") int number) {
+    public void doSomethingManyExpression(String payload, @Constant(value = "5") int count, @Header("number") int number) {
         template.sendBodyAndHeader("mock:result", "Bye " + payload, "count", count * number);
     }
 
