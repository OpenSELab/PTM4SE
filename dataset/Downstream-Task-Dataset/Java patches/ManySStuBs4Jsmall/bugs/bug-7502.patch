diff --git a/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java b/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java
index d55d27b..016457e 100644
--- a/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java
+++ b/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java
@@ -149,7 +149,7 @@
     assertNotNull("Leader should exist", currentLeader);
     LOG.debug("Current leader index is "+currentLeader.getIndex());
 
-    byte[] znodeData = ZKUtil.getData(CANDIDATES[0].getWatcher(), LEADER_ZNODE);
+    byte[] znodeData = ZKUtil.getData(currentLeader.getWatcher(), LEADER_ZNODE);
     assertNotNull("Leader znode should contain leader index", znodeData);
     assertTrue("Leader znode should not be empty", znodeData.length > 0);
     int storedIndex = Bytes.toInt(znodeData);
@@ -167,7 +167,7 @@
     assertNotNull("New leader should exist after abdication", currentLeader);
     LOG.debug("New leader index is "+currentLeader.getIndex());
 
-    znodeData = ZKUtil.getData(CANDIDATES[0].getWatcher(), LEADER_ZNODE);
+    znodeData = ZKUtil.getData(currentLeader.getWatcher(), LEADER_ZNODE);
     assertNotNull("Leader znode should contain leader index", znodeData);
     assertTrue("Leader znode should not be empty", znodeData.length > 0);
     storedIndex = Bytes.toInt(znodeData);
@@ -185,7 +185,7 @@
     assertNotNull("New leader should exist after stop", currentLeader);
     LOG.debug("New leader index is "+currentLeader.getIndex());
 
-    znodeData = ZKUtil.getData(CANDIDATES[0].getWatcher(), LEADER_ZNODE);
+    znodeData = ZKUtil.getData(currentLeader.getWatcher(), LEADER_ZNODE);
     assertNotNull("Leader znode should contain leader index", znodeData);
     assertTrue("Leader znode should not be empty", znodeData.length > 0);
     storedIndex = Bytes.toInt(znodeData);
diff --git a/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java b/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java
index d55d27b..016457e 100644
--- a/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java
+++ b/src/test/java/org/apache/hadoop/hbase/zookeeper/TestZKLeaderManager.java
@@ -149,7 +149,7 @@
     assertNotNull("Leader should exist", currentLeader);
     LOG.debug("Current leader index is "+currentLeader.getIndex());
 
-    byte[] znodeData = ZKUtil.getData(CANDIDATES[0].getWatcher(), LEADER_ZNODE);
+    byte[] znodeData = ZKUtil.getData(currentLeader.getWatcher(), LEADER_ZNODE);
     assertNotNull("Leader znode should contain leader index", znodeData);
     assertTrue("Leader znode should not be empty", znodeData.length > 0);
     int storedIndex = Bytes.toInt(znodeData);
@@ -167,7 +167,7 @@
     assertNotNull("New leader should exist after abdication", currentLeader);
     LOG.debug("New leader index is "+currentLeader.getIndex());
 
-    znodeData = ZKUtil.getData(CANDIDATES[0].getWatcher(), LEADER_ZNODE);
+    znodeData = ZKUtil.getData(currentLeader.getWatcher(), LEADER_ZNODE);
     assertNotNull("Leader znode should contain leader index", znodeData);
     assertTrue("Leader znode should not be empty", znodeData.length > 0);
     storedIndex = Bytes.toInt(znodeData);
@@ -185,7 +185,7 @@
     assertNotNull("New leader should exist after stop", currentLeader);
     LOG.debug("New leader index is "+currentLeader.getIndex());
 
-    znodeData = ZKUtil.getData(CANDIDATES[0].getWatcher(), LEADER_ZNODE);
+    znodeData = ZKUtil.getData(currentLeader.getWatcher(), LEADER_ZNODE);
     assertNotNull("Leader znode should contain leader index", znodeData);
     assertTrue("Leader znode should not be empty", znodeData.length > 0);
     storedIndex = Bytes.toInt(znodeData);
