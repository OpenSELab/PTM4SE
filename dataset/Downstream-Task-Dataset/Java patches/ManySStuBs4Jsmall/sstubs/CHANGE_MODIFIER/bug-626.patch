diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index 8b95e6c..cac1ae9 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -731,7 +731,7 @@
   }
 
   /** Checks for validity of the control structures. */
-  private final HotSwapPassFactory checkControlStructures =
+  final HotSwapPassFactory checkControlStructures =
       new HotSwapPassFactory("checkControlStructures", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -740,7 +740,7 @@
   };
 
   /** Checks that all constructed classes are goog.require()d. */
-  private final HotSwapPassFactory checkRequires =
+  final HotSwapPassFactory checkRequires =
       new HotSwapPassFactory("checkRequires", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -749,7 +749,7 @@
   };
 
   /** Makes sure @constructor is paired with goog.provides(). */
-  private final HotSwapPassFactory checkProvides =
+  final HotSwapPassFactory checkProvides =
       new HotSwapPassFactory("checkProvides", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -764,7 +764,7 @@
           "functions are set.");
 
   /** Generates exports for @export annotations. */
-  private final PassFactory generateExports =
+  final PassFactory generateExports =
       new PassFactory("generateExports", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -781,7 +781,7 @@
   };
 
   /** Generates exports for functions associated with JSUnit. */
-  private final PassFactory exportTestFunctions =
+  final PassFactory exportTestFunctions =
       new PassFactory("exportTestFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -846,7 +846,7 @@
    * A lot of the options are not configurable, because ReplaceMessages
    * has a lot of legacy logic.
    */
-  private final PassFactory replaceMessages =
+  final PassFactory replaceMessages =
       new PassFactory("replaceMessages", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -872,7 +872,7 @@
   };
 
   /** Checks that CSS class names are wrapped in goog.getCssName */
-  private final PassFactory closureCheckGetCssName =
+  final PassFactory closureCheckGetCssName =
       new PassFactory("checkMissingGetCssName", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -889,7 +889,7 @@
    * replacement values for the classnames.  If null, the raw class names are
    * inlined.
    */
-  private final PassFactory closureReplaceGetCssName =
+  final PassFactory closureReplaceGetCssName =
       new PassFactory("renameCssNames", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -912,7 +912,7 @@
    * Creates synthetic blocks to prevent FoldConstants from moving code
    * past markers in the source.
    */
-  private final PassFactory createSyntheticBlocks =
+  final PassFactory createSyntheticBlocks =
       new PassFactory("createSyntheticBlocks", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -923,7 +923,7 @@
   };
 
   /** Various peephole optimizations. */
-  private final PassFactory peepholeOptimizations =
+  final PassFactory peepholeOptimizations =
       new PassFactory("peepholeOptimizations", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -937,7 +937,7 @@
   };
 
   /** Same as peepholeOptimizations but aggressively merges code together */
-  private final PassFactory latePeepholeOptimizations =
+  final PassFactory latePeepholeOptimizations =
       new PassFactory("latePeepholeOptimizations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -951,7 +951,7 @@
   };
 
   /** Checks that all variables are defined. */
-  private final HotSwapPassFactory checkVars =
+  final HotSwapPassFactory checkVars =
       new HotSwapPassFactory("checkVars", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -960,7 +960,7 @@
   };
 
   /** Checks for RegExp references. */
-  private final PassFactory checkRegExp =
+  final PassFactory checkRegExp =
       new PassFactory("checkRegExp", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -978,7 +978,7 @@
   };
 
   /** Checks that no vars are illegally shadowed. */
-  private final PassFactory checkShadowVars =
+  final PassFactory checkShadowVars =
       new PassFactory("variableShadowDeclarationCheck", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -988,7 +988,7 @@
   };
 
   /** Checks that references to variables look reasonable. */
-  private final HotSwapPassFactory checkVariableReferences =
+  final HotSwapPassFactory checkVariableReferences =
       new HotSwapPassFactory("checkVariableReferences", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -998,7 +998,7 @@
   };
 
   /** Pre-process goog.testing.ObjectPropertyString. */
-  private final PassFactory objectPropertyStringPreprocess =
+  final PassFactory objectPropertyStringPreprocess =
       new PassFactory("ObjectPropertyStringPreprocess", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1059,7 +1059,7 @@
 };
 
   /** Checks type usage */
-  private final HotSwapPassFactory checkTypes =
+  final HotSwapPassFactory checkTypes =
       new HotSwapPassFactory("checkTypes", false) {
     @Override
     protected HotSwapCompilerPass createInternal(final AbstractCompiler
@@ -1086,7 +1086,7 @@
    * Checks possible execution paths of the program for problems: missing return
    * statements and dead code.
    */
-  private final HotSwapPassFactory checkControlFlow =
+  final HotSwapPassFactory checkControlFlow =
       new HotSwapPassFactory("checkControlFlow", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -1104,7 +1104,7 @@
   };
 
   /** Checks access controls. Depends on type-inference. */
-  private final HotSwapPassFactory checkAccessControls =
+  final HotSwapPassFactory checkAccessControls =
       new HotSwapPassFactory("checkAccessControls", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -1121,7 +1121,7 @@
   }
 
   /** A compiler pass that resolves types in the global scope. */
-  private class GlobalTypeResolver implements HotSwapCompilerPass {
+  class GlobalTypeResolver implements HotSwapCompilerPass {
     private final AbstractCompiler compiler;
 
     GlobalTypeResolver(AbstractCompiler compiler) {
@@ -1143,7 +1143,7 @@
   }
 
   /** Checks global name usage. */
-  private final PassFactory checkGlobalNames =
+  final PassFactory checkGlobalNames =
       new PassFactory("Check names", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1162,7 +1162,7 @@
   };
 
   /** Checks that the code is ES5 or Caja compliant. */
-  private final PassFactory checkStrictMode =
+  final PassFactory checkStrictMode =
       new PassFactory("checkStrictMode", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1211,7 +1211,7 @@
   };
 
   /** Checks that all constants are not modified */
-  private final PassFactory checkConsts =
+  final PassFactory checkConsts =
       new PassFactory("checkConsts", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1220,7 +1220,7 @@
   };
 
   /** Computes the names of functions for later analysis. */
-  private final PassFactory computeFunctionNames =
+  final PassFactory computeFunctionNames =
       new PassFactory("computeFunctionNames", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1229,7 +1229,7 @@
   };
 
   /** Skips Caja-private properties in for-in loops */
-  private final PassFactory ignoreCajaProperties =
+  final PassFactory ignoreCajaProperties =
       new PassFactory("ignoreCajaProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1238,7 +1238,7 @@
   };
 
   /** Inserts runtime type assertions for debugging. */
-  private final PassFactory runtimeTypeCheck =
+  final PassFactory runtimeTypeCheck =
       new PassFactory("runtimeTypeCheck", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1248,7 +1248,7 @@
   };
 
   /** Generates unique ids. */
-  private final PassFactory replaceIdGenerators =
+  final PassFactory replaceIdGenerators =
       new PassFactory("replaceIdGenerators", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1264,7 +1264,7 @@
   };
 
   /** Replace strings. */
-  private final PassFactory replaceStrings =
+  final PassFactory replaceStrings =
       new PassFactory("replaceStrings", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1283,7 +1283,7 @@
   };
 
   /** Optimizes the "arguments" array. */
-  private final PassFactory optimizeArgumentsArray =
+  final PassFactory optimizeArgumentsArray =
       new PassFactory("optimizeArgumentsArray", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1292,7 +1292,7 @@
   };
 
   /** Remove variables set to goog.abstractMethod. */
-  private final PassFactory closureCodeRemoval =
+  final PassFactory closureCodeRemoval =
       new PassFactory("closureCodeRemoval", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1302,7 +1302,7 @@
   };
 
   /** Special case optimizations for closure functions. */
-  private final PassFactory closureOptimizePrimitives =
+  final PassFactory closureOptimizePrimitives =
       new PassFactory("closureOptimizePrimitives", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1311,7 +1311,7 @@
   };
 
   /** Collapses names in the global scope. */
-  private final PassFactory collapseProperties =
+  final PassFactory collapseProperties =
       new PassFactory("collapseProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1322,7 +1322,7 @@
   };
 
   /** Rewrite properties as variables. */
-  private final PassFactory collapseObjectLiterals =
+  final PassFactory collapseObjectLiterals =
       new PassFactory("collapseObjectLiterals", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1335,7 +1335,7 @@
    * Try to infer the actual types, which may be narrower
    * than the declared types.
    */
-  private final PassFactory tightenTypesBuilder =
+  final PassFactory tightenTypesBuilder =
       new PassFactory("tightenTypes", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1348,7 +1348,7 @@
   };
 
   /** Devirtualize property names based on type information. */
-  private final PassFactory disambiguateProperties =
+  final PassFactory disambiguateProperties =
       new PassFactory("disambiguateProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1364,7 +1364,7 @@
   /**
    * Chain calls to functions that return this.
    */
-  private final PassFactory chainCalls =
+  final PassFactory chainCalls =
       new PassFactory("chainCalls", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1376,7 +1376,7 @@
    * Rewrite instance methods as static methods, to make them easier
    * to inline.
    */
-  private final PassFactory devirtualizePrototypeMethods =
+  final PassFactory devirtualizePrototypeMethods =
       new PassFactory("devirtualizePrototypeMethods", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1388,7 +1388,7 @@
    * Optimizes unused function arguments, unused return values, and inlines
    * constant parameters. Also runs RemoveUnusedVars.
    */
-  private final PassFactory optimizeCallsAndRemoveUnusedVars =
+  final PassFactory optimizeCallsAndRemoveUnusedVars =
       new PassFactory("optimizeCalls_and_removeUnusedVars", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1421,7 +1421,7 @@
    * Look for function calls that are pure, and annotate them
    * that way.
    */
-  private final PassFactory markPureFunctions =
+  final PassFactory markPureFunctions =
       new PassFactory("markPureFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1434,7 +1434,7 @@
    * Look for function calls that have no side effects, and annotate them
    * that way.
    */
-  private final PassFactory markNoSideEffectCalls =
+  final PassFactory markNoSideEffectCalls =
       new PassFactory("markNoSideEffectCalls", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1443,7 +1443,7 @@
   };
 
   /** Inlines variables heuristically. */
-  private final PassFactory inlineVariables =
+  final PassFactory inlineVariables =
       new PassFactory("inlineVariables", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1468,7 +1468,7 @@
   };
 
   /** Inlines variables that are marked as constants. */
-  private final PassFactory inlineConstants =
+  final PassFactory inlineConstants =
       new PassFactory("inlineConstants", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1480,7 +1480,7 @@
   /**
    * Perform local control flow optimizations.
    */
-  private final PassFactory minimizeExitPoints =
+  final PassFactory minimizeExitPoints =
       new PassFactory("minimizeExitPoints", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1491,7 +1491,7 @@
   /**
    * Use data flow analysis to remove dead branches.
    */
-  private final PassFactory removeUnreachableCode =
+  final PassFactory removeUnreachableCode =
       new PassFactory("removeUnreachableCode", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1502,7 +1502,7 @@
   /**
    * Remove prototype properties that do not appear to be used.
    */
-  private final PassFactory removeUnusedPrototypeProperties =
+  final PassFactory removeUnusedPrototypeProperties =
       new PassFactory("removeUnusedPrototypeProperties", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1516,7 +1516,7 @@
    * Process smart name processing - removes unused classes and does referencing
    * starting with minimum set of names.
    */
-  private final PassFactory smartNamePass =
+  final PassFactory smartNamePass =
       new PassFactory("smartNamePass", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1548,7 +1548,7 @@
    * Process smart name processing - removes unused classes and does referencing
    * starting with minimum set of names.
    */
-  private final PassFactory smartNamePass2 =
+  final PassFactory smartNamePass2 =
       new PassFactory("smartNamePass", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1564,7 +1564,7 @@
   };
 
   /** Inlines simple methods, like getters */
-  private final PassFactory inlineSimpleMethods =
+  final PassFactory inlineSimpleMethods =
       new PassFactory("inlineSimpleMethods", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1573,7 +1573,7 @@
   };
 
   /** Kills dead assignments. */
-  private final PassFactory deadAssignmentsElimination =
+  final PassFactory deadAssignmentsElimination =
       new PassFactory("deadAssignmentsElimination", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1582,7 +1582,7 @@
   };
 
   /** Inlines function calls. */
-  private final PassFactory inlineFunctions =
+  final PassFactory inlineFunctions =
       new PassFactory("inlineFunctions", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1599,7 +1599,7 @@
   };
 
   /** Removes variables that are never used. */
-  private final PassFactory removeUnusedVars =
+  final PassFactory removeUnusedVars =
       new PassFactory("removeUnusedVars", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1618,7 +1618,7 @@
   /**
    * Move global symbols to a deeper common module
    */
-  private final PassFactory crossModuleCodeMotion =
+  final PassFactory crossModuleCodeMotion =
       new PassFactory("crossModuleCodeMotion", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1629,7 +1629,7 @@
   /**
    * Move methods to a deeper common module
    */
-  private final PassFactory crossModuleMethodMotion =
+  final PassFactory crossModuleMethodMotion =
       new PassFactory("crossModuleMethodMotion", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1644,7 +1644,7 @@
   /**
    * Specialize the initial module at the cost of later modules
    */
-  private final PassFactory specializeInitialModule =
+  final PassFactory specializeInitialModule =
       new PassFactory("specializeInitialModule", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1654,7 +1654,7 @@
   };
 
   /** A data-flow based variable inliner. */
-  private final PassFactory flowSensitiveInlineVariables =
+  final PassFactory flowSensitiveInlineVariables =
       new PassFactory("flowSensitiveInlineVariables", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1663,7 +1663,7 @@
   };
 
   /** Uses register-allocation algorithms to use fewer variables. */
-  private final PassFactory coalesceVariableNames =
+  final PassFactory coalesceVariableNames =
       new PassFactory("coalesceVariableNames", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1675,7 +1675,7 @@
    * Some simple, local collapses (e.g., {@code var x; var y;} becomes
    * {@code var x,y;}.
    */
-  private final PassFactory exploitAssign =
+  final PassFactory exploitAssign =
       new PassFactory("expointAssign", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1688,7 +1688,7 @@
    * Some simple, local collapses (e.g., {@code var x; var y;} becomes
    * {@code var x,y;}.
    */
-  private final PassFactory collapseVariableDeclarations =
+  final PassFactory collapseVariableDeclarations =
       new PassFactory("collapseVariableDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1699,7 +1699,7 @@
   /**
    * Simple global collapses of variable declarations.
    */
-  private final PassFactory groupVariableDeclarations =
+  final PassFactory groupVariableDeclarations =
       new PassFactory("groupVariableDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1710,7 +1710,7 @@
   /**
    * Extracts common sub-expressions.
    */
-  private final PassFactory extractPrototypeMemberDeclarations =
+  final PassFactory extractPrototypeMemberDeclarations =
       new PassFactory("extractPrototypeMemberDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1719,7 +1719,7 @@
   };
 
   /** Rewrites common function definitions to be more compact. */
-  private final PassFactory rewriteFunctionExpressions =
+  final PassFactory rewriteFunctionExpressions =
       new PassFactory("rewriteFunctionExpressions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1728,7 +1728,7 @@
   };
 
   /** Collapses functions to not use the VAR keyword. */
-  private final PassFactory collapseAnonymousFunctions =
+  final PassFactory collapseAnonymousFunctions =
       new PassFactory("collapseAnonymousFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1737,7 +1737,7 @@
   };
 
   /** Moves function declarations to the top, to simulate actual hoisting. */
-  private final PassFactory moveFunctionDeclarations =
+  final PassFactory moveFunctionDeclarations =
       new PassFactory("moveFunctionDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1745,7 +1745,7 @@
     }
   };
 
-  private final PassFactory nameUnmappedAnonymousFunctions =
+  final PassFactory nameUnmappedAnonymousFunctions =
       new PassFactory("nameAnonymousFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1753,7 +1753,7 @@
     }
   };
 
-  private final PassFactory nameMappedAnonymousFunctions =
+  final PassFactory nameMappedAnonymousFunctions =
       new PassFactory("nameAnonymousFunctions", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1768,7 +1768,7 @@
     }
   };
 
-  private final PassFactory operaCompoundAssignFix =
+  final PassFactory operaCompoundAssignFix =
       new PassFactory("operaCompoundAssignFix", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1777,7 +1777,7 @@
   };
 
   /** Alias external symbols. */
-  private final PassFactory aliasExternals =
+  final PassFactory aliasExternals =
       new PassFactory("aliasExternals", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1790,7 +1790,7 @@
    * Alias string literals with global variables, to avoid creating lots of
    * transient objects.
    */
-  private final PassFactory aliasStrings =
+  final PassFactory aliasStrings =
       new PassFactory("aliasStrings", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1804,7 +1804,7 @@
   };
 
   /** Aliases common keywords (true, false) */
-  private final PassFactory aliasKeywords =
+  final PassFactory aliasKeywords =
       new PassFactory("aliasKeywords", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1813,7 +1813,7 @@
   };
 
   /** Handling for the ObjectPropertyString primitive. */
-  private final PassFactory objectPropertyStringPostprocess =
+  final PassFactory objectPropertyStringPostprocess =
       new PassFactory("ObjectPropertyStringPostprocess", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1825,7 +1825,7 @@
    * Renames properties so that the two properties that never appear on
    * the same object get the same name.
    */
-  private final PassFactory ambiguateProperties =
+  final PassFactory ambiguateProperties =
       new PassFactory("ambiguateProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1837,7 +1837,7 @@
   /**
    * Mark the point at which the normalized AST assumptions no longer hold.
    */
-  private final PassFactory markUnnormalized =
+  final PassFactory markUnnormalized =
       new PassFactory("markUnnormalized", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1850,7 +1850,7 @@
   };
 
   /** Denormalize the AST for code generation. */
-  private final PassFactory denormalize =
+  final PassFactory denormalize =
       new PassFactory("denormalize", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1859,7 +1859,7 @@
   };
 
   /** Inverting name normalization. */
-  private final PassFactory invertContextualRenaming =
+  final PassFactory invertContextualRenaming =
       new PassFactory("invertNames", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1870,7 +1870,7 @@
   /**
    * Renames properties.
    */
-  private final PassFactory renameProperties =
+  final PassFactory renameProperties =
       new PassFactory("renameProperties", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1926,7 +1926,7 @@
   }
 
   /** Renames variables. */
-  private final PassFactory renameVars =
+  final PassFactory renameVars =
       new PassFactory("renameVars", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1972,7 +1972,7 @@
   }
 
   /** Renames labels */
-  private final PassFactory renameLabels =
+  final PassFactory renameLabels =
       new PassFactory("renameLabels", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1981,7 +1981,7 @@
   };
 
   /** Convert bracket access to dot access */
-  private final PassFactory convertToDottedProperties =
+  final PassFactory convertToDottedProperties =
       new PassFactory("convertToDottedProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1990,7 +1990,7 @@
   };
 
   /** Checks that all variables are defined. */
-  private final PassFactory sanityCheckAst =
+  final PassFactory sanityCheckAst =
       new PassFactory("sanityCheckAst", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1999,7 +1999,7 @@
   };
 
   /** Checks that all variables are defined. */
-  private final PassFactory sanityCheckVars =
+  final PassFactory sanityCheckVars =
       new PassFactory("sanityCheckVars", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -2008,7 +2008,7 @@
   };
 
   /** Adds instrumentations according to an instrumentation template. */
-  private final PassFactory instrumentFunctions =
+  final PassFactory instrumentFunctions =
       new PassFactory("instrumentFunctions", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -2101,7 +2101,7 @@
     return additionalReplacements;
   }
 
-  private final PassFactory printNameReferenceGraph =
+  final PassFactory printNameReferenceGraph =
     new PassFactory("printNameReferenceGraph", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -2126,7 +2126,7 @@
     }
   };
 
-  private final PassFactory printNameReferenceReport =
+  final PassFactory printNameReferenceReport =
       new PassFactory("printNameReferenceReport", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index 8b95e6c..cac1ae9 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -731,7 +731,7 @@
   }
 
   /** Checks for validity of the control structures. */
-  private final HotSwapPassFactory checkControlStructures =
+  final HotSwapPassFactory checkControlStructures =
       new HotSwapPassFactory("checkControlStructures", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -740,7 +740,7 @@
   };
 
   /** Checks that all constructed classes are goog.require()d. */
-  private final HotSwapPassFactory checkRequires =
+  final HotSwapPassFactory checkRequires =
       new HotSwapPassFactory("checkRequires", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -749,7 +749,7 @@
   };
 
   /** Makes sure @constructor is paired with goog.provides(). */
-  private final HotSwapPassFactory checkProvides =
+  final HotSwapPassFactory checkProvides =
       new HotSwapPassFactory("checkProvides", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -764,7 +764,7 @@
           "functions are set.");
 
   /** Generates exports for @export annotations. */
-  private final PassFactory generateExports =
+  final PassFactory generateExports =
       new PassFactory("generateExports", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -781,7 +781,7 @@
   };
 
   /** Generates exports for functions associated with JSUnit. */
-  private final PassFactory exportTestFunctions =
+  final PassFactory exportTestFunctions =
       new PassFactory("exportTestFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -846,7 +846,7 @@
    * A lot of the options are not configurable, because ReplaceMessages
    * has a lot of legacy logic.
    */
-  private final PassFactory replaceMessages =
+  final PassFactory replaceMessages =
       new PassFactory("replaceMessages", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -872,7 +872,7 @@
   };
 
   /** Checks that CSS class names are wrapped in goog.getCssName */
-  private final PassFactory closureCheckGetCssName =
+  final PassFactory closureCheckGetCssName =
       new PassFactory("checkMissingGetCssName", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -889,7 +889,7 @@
    * replacement values for the classnames.  If null, the raw class names are
    * inlined.
    */
-  private final PassFactory closureReplaceGetCssName =
+  final PassFactory closureReplaceGetCssName =
       new PassFactory("renameCssNames", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -912,7 +912,7 @@
    * Creates synthetic blocks to prevent FoldConstants from moving code
    * past markers in the source.
    */
-  private final PassFactory createSyntheticBlocks =
+  final PassFactory createSyntheticBlocks =
       new PassFactory("createSyntheticBlocks", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -923,7 +923,7 @@
   };
 
   /** Various peephole optimizations. */
-  private final PassFactory peepholeOptimizations =
+  final PassFactory peepholeOptimizations =
       new PassFactory("peepholeOptimizations", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -937,7 +937,7 @@
   };
 
   /** Same as peepholeOptimizations but aggressively merges code together */
-  private final PassFactory latePeepholeOptimizations =
+  final PassFactory latePeepholeOptimizations =
       new PassFactory("latePeepholeOptimizations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -951,7 +951,7 @@
   };
 
   /** Checks that all variables are defined. */
-  private final HotSwapPassFactory checkVars =
+  final HotSwapPassFactory checkVars =
       new HotSwapPassFactory("checkVars", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -960,7 +960,7 @@
   };
 
   /** Checks for RegExp references. */
-  private final PassFactory checkRegExp =
+  final PassFactory checkRegExp =
       new PassFactory("checkRegExp", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -978,7 +978,7 @@
   };
 
   /** Checks that no vars are illegally shadowed. */
-  private final PassFactory checkShadowVars =
+  final PassFactory checkShadowVars =
       new PassFactory("variableShadowDeclarationCheck", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -988,7 +988,7 @@
   };
 
   /** Checks that references to variables look reasonable. */
-  private final HotSwapPassFactory checkVariableReferences =
+  final HotSwapPassFactory checkVariableReferences =
       new HotSwapPassFactory("checkVariableReferences", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -998,7 +998,7 @@
   };
 
   /** Pre-process goog.testing.ObjectPropertyString. */
-  private final PassFactory objectPropertyStringPreprocess =
+  final PassFactory objectPropertyStringPreprocess =
       new PassFactory("ObjectPropertyStringPreprocess", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1059,7 +1059,7 @@
 };
 
   /** Checks type usage */
-  private final HotSwapPassFactory checkTypes =
+  final HotSwapPassFactory checkTypes =
       new HotSwapPassFactory("checkTypes", false) {
     @Override
     protected HotSwapCompilerPass createInternal(final AbstractCompiler
@@ -1086,7 +1086,7 @@
    * Checks possible execution paths of the program for problems: missing return
    * statements and dead code.
    */
-  private final HotSwapPassFactory checkControlFlow =
+  final HotSwapPassFactory checkControlFlow =
       new HotSwapPassFactory("checkControlFlow", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -1104,7 +1104,7 @@
   };
 
   /** Checks access controls. Depends on type-inference. */
-  private final HotSwapPassFactory checkAccessControls =
+  final HotSwapPassFactory checkAccessControls =
       new HotSwapPassFactory("checkAccessControls", true) {
     @Override
     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@@ -1121,7 +1121,7 @@
   }
 
   /** A compiler pass that resolves types in the global scope. */
-  private class GlobalTypeResolver implements HotSwapCompilerPass {
+  class GlobalTypeResolver implements HotSwapCompilerPass {
     private final AbstractCompiler compiler;
 
     GlobalTypeResolver(AbstractCompiler compiler) {
@@ -1143,7 +1143,7 @@
   }
 
   /** Checks global name usage. */
-  private final PassFactory checkGlobalNames =
+  final PassFactory checkGlobalNames =
       new PassFactory("Check names", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1162,7 +1162,7 @@
   };
 
   /** Checks that the code is ES5 or Caja compliant. */
-  private final PassFactory checkStrictMode =
+  final PassFactory checkStrictMode =
       new PassFactory("checkStrictMode", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1211,7 +1211,7 @@
   };
 
   /** Checks that all constants are not modified */
-  private final PassFactory checkConsts =
+  final PassFactory checkConsts =
       new PassFactory("checkConsts", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1220,7 +1220,7 @@
   };
 
   /** Computes the names of functions for later analysis. */
-  private final PassFactory computeFunctionNames =
+  final PassFactory computeFunctionNames =
       new PassFactory("computeFunctionNames", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1229,7 +1229,7 @@
   };
 
   /** Skips Caja-private properties in for-in loops */
-  private final PassFactory ignoreCajaProperties =
+  final PassFactory ignoreCajaProperties =
       new PassFactory("ignoreCajaProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1238,7 +1238,7 @@
   };
 
   /** Inserts runtime type assertions for debugging. */
-  private final PassFactory runtimeTypeCheck =
+  final PassFactory runtimeTypeCheck =
       new PassFactory("runtimeTypeCheck", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1248,7 +1248,7 @@
   };
 
   /** Generates unique ids. */
-  private final PassFactory replaceIdGenerators =
+  final PassFactory replaceIdGenerators =
       new PassFactory("replaceIdGenerators", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1264,7 +1264,7 @@
   };
 
   /** Replace strings. */
-  private final PassFactory replaceStrings =
+  final PassFactory replaceStrings =
       new PassFactory("replaceStrings", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1283,7 +1283,7 @@
   };
 
   /** Optimizes the "arguments" array. */
-  private final PassFactory optimizeArgumentsArray =
+  final PassFactory optimizeArgumentsArray =
       new PassFactory("optimizeArgumentsArray", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1292,7 +1292,7 @@
   };
 
   /** Remove variables set to goog.abstractMethod. */
-  private final PassFactory closureCodeRemoval =
+  final PassFactory closureCodeRemoval =
       new PassFactory("closureCodeRemoval", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1302,7 +1302,7 @@
   };
 
   /** Special case optimizations for closure functions. */
-  private final PassFactory closureOptimizePrimitives =
+  final PassFactory closureOptimizePrimitives =
       new PassFactory("closureOptimizePrimitives", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1311,7 +1311,7 @@
   };
 
   /** Collapses names in the global scope. */
-  private final PassFactory collapseProperties =
+  final PassFactory collapseProperties =
       new PassFactory("collapseProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1322,7 +1322,7 @@
   };
 
   /** Rewrite properties as variables. */
-  private final PassFactory collapseObjectLiterals =
+  final PassFactory collapseObjectLiterals =
       new PassFactory("collapseObjectLiterals", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1335,7 +1335,7 @@
    * Try to infer the actual types, which may be narrower
    * than the declared types.
    */
-  private final PassFactory tightenTypesBuilder =
+  final PassFactory tightenTypesBuilder =
       new PassFactory("tightenTypes", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1348,7 +1348,7 @@
   };
 
   /** Devirtualize property names based on type information. */
-  private final PassFactory disambiguateProperties =
+  final PassFactory disambiguateProperties =
       new PassFactory("disambiguateProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1364,7 +1364,7 @@
   /**
    * Chain calls to functions that return this.
    */
-  private final PassFactory chainCalls =
+  final PassFactory chainCalls =
       new PassFactory("chainCalls", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1376,7 +1376,7 @@
    * Rewrite instance methods as static methods, to make them easier
    * to inline.
    */
-  private final PassFactory devirtualizePrototypeMethods =
+  final PassFactory devirtualizePrototypeMethods =
       new PassFactory("devirtualizePrototypeMethods", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1388,7 +1388,7 @@
    * Optimizes unused function arguments, unused return values, and inlines
    * constant parameters. Also runs RemoveUnusedVars.
    */
-  private final PassFactory optimizeCallsAndRemoveUnusedVars =
+  final PassFactory optimizeCallsAndRemoveUnusedVars =
       new PassFactory("optimizeCalls_and_removeUnusedVars", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1421,7 +1421,7 @@
    * Look for function calls that are pure, and annotate them
    * that way.
    */
-  private final PassFactory markPureFunctions =
+  final PassFactory markPureFunctions =
       new PassFactory("markPureFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1434,7 +1434,7 @@
    * Look for function calls that have no side effects, and annotate them
    * that way.
    */
-  private final PassFactory markNoSideEffectCalls =
+  final PassFactory markNoSideEffectCalls =
       new PassFactory("markNoSideEffectCalls", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1443,7 +1443,7 @@
   };
 
   /** Inlines variables heuristically. */
-  private final PassFactory inlineVariables =
+  final PassFactory inlineVariables =
       new PassFactory("inlineVariables", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1468,7 +1468,7 @@
   };
 
   /** Inlines variables that are marked as constants. */
-  private final PassFactory inlineConstants =
+  final PassFactory inlineConstants =
       new PassFactory("inlineConstants", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1480,7 +1480,7 @@
   /**
    * Perform local control flow optimizations.
    */
-  private final PassFactory minimizeExitPoints =
+  final PassFactory minimizeExitPoints =
       new PassFactory("minimizeExitPoints", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1491,7 +1491,7 @@
   /**
    * Use data flow analysis to remove dead branches.
    */
-  private final PassFactory removeUnreachableCode =
+  final PassFactory removeUnreachableCode =
       new PassFactory("removeUnreachableCode", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1502,7 +1502,7 @@
   /**
    * Remove prototype properties that do not appear to be used.
    */
-  private final PassFactory removeUnusedPrototypeProperties =
+  final PassFactory removeUnusedPrototypeProperties =
       new PassFactory("removeUnusedPrototypeProperties", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1516,7 +1516,7 @@
    * Process smart name processing - removes unused classes and does referencing
    * starting with minimum set of names.
    */
-  private final PassFactory smartNamePass =
+  final PassFactory smartNamePass =
       new PassFactory("smartNamePass", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1548,7 +1548,7 @@
    * Process smart name processing - removes unused classes and does referencing
    * starting with minimum set of names.
    */
-  private final PassFactory smartNamePass2 =
+  final PassFactory smartNamePass2 =
       new PassFactory("smartNamePass", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1564,7 +1564,7 @@
   };
 
   /** Inlines simple methods, like getters */
-  private final PassFactory inlineSimpleMethods =
+  final PassFactory inlineSimpleMethods =
       new PassFactory("inlineSimpleMethods", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1573,7 +1573,7 @@
   };
 
   /** Kills dead assignments. */
-  private final PassFactory deadAssignmentsElimination =
+  final PassFactory deadAssignmentsElimination =
       new PassFactory("deadAssignmentsElimination", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1582,7 +1582,7 @@
   };
 
   /** Inlines function calls. */
-  private final PassFactory inlineFunctions =
+  final PassFactory inlineFunctions =
       new PassFactory("inlineFunctions", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1599,7 +1599,7 @@
   };
 
   /** Removes variables that are never used. */
-  private final PassFactory removeUnusedVars =
+  final PassFactory removeUnusedVars =
       new PassFactory("removeUnusedVars", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1618,7 +1618,7 @@
   /**
    * Move global symbols to a deeper common module
    */
-  private final PassFactory crossModuleCodeMotion =
+  final PassFactory crossModuleCodeMotion =
       new PassFactory("crossModuleCodeMotion", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1629,7 +1629,7 @@
   /**
    * Move methods to a deeper common module
    */
-  private final PassFactory crossModuleMethodMotion =
+  final PassFactory crossModuleMethodMotion =
       new PassFactory("crossModuleMethodMotion", false) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1644,7 +1644,7 @@
   /**
    * Specialize the initial module at the cost of later modules
    */
-  private final PassFactory specializeInitialModule =
+  final PassFactory specializeInitialModule =
       new PassFactory("specializeInitialModule", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1654,7 +1654,7 @@
   };
 
   /** A data-flow based variable inliner. */
-  private final PassFactory flowSensitiveInlineVariables =
+  final PassFactory flowSensitiveInlineVariables =
       new PassFactory("flowSensitiveInlineVariables", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1663,7 +1663,7 @@
   };
 
   /** Uses register-allocation algorithms to use fewer variables. */
-  private final PassFactory coalesceVariableNames =
+  final PassFactory coalesceVariableNames =
       new PassFactory("coalesceVariableNames", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1675,7 +1675,7 @@
    * Some simple, local collapses (e.g., {@code var x; var y;} becomes
    * {@code var x,y;}.
    */
-  private final PassFactory exploitAssign =
+  final PassFactory exploitAssign =
       new PassFactory("expointAssign", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1688,7 +1688,7 @@
    * Some simple, local collapses (e.g., {@code var x; var y;} becomes
    * {@code var x,y;}.
    */
-  private final PassFactory collapseVariableDeclarations =
+  final PassFactory collapseVariableDeclarations =
       new PassFactory("collapseVariableDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1699,7 +1699,7 @@
   /**
    * Simple global collapses of variable declarations.
    */
-  private final PassFactory groupVariableDeclarations =
+  final PassFactory groupVariableDeclarations =
       new PassFactory("groupVariableDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1710,7 +1710,7 @@
   /**
    * Extracts common sub-expressions.
    */
-  private final PassFactory extractPrototypeMemberDeclarations =
+  final PassFactory extractPrototypeMemberDeclarations =
       new PassFactory("extractPrototypeMemberDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1719,7 +1719,7 @@
   };
 
   /** Rewrites common function definitions to be more compact. */
-  private final PassFactory rewriteFunctionExpressions =
+  final PassFactory rewriteFunctionExpressions =
       new PassFactory("rewriteFunctionExpressions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1728,7 +1728,7 @@
   };
 
   /** Collapses functions to not use the VAR keyword. */
-  private final PassFactory collapseAnonymousFunctions =
+  final PassFactory collapseAnonymousFunctions =
       new PassFactory("collapseAnonymousFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1737,7 +1737,7 @@
   };
 
   /** Moves function declarations to the top, to simulate actual hoisting. */
-  private final PassFactory moveFunctionDeclarations =
+  final PassFactory moveFunctionDeclarations =
       new PassFactory("moveFunctionDeclarations", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1745,7 +1745,7 @@
     }
   };
 
-  private final PassFactory nameUnmappedAnonymousFunctions =
+  final PassFactory nameUnmappedAnonymousFunctions =
       new PassFactory("nameAnonymousFunctions", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1753,7 +1753,7 @@
     }
   };
 
-  private final PassFactory nameMappedAnonymousFunctions =
+  final PassFactory nameMappedAnonymousFunctions =
       new PassFactory("nameAnonymousFunctions", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1768,7 +1768,7 @@
     }
   };
 
-  private final PassFactory operaCompoundAssignFix =
+  final PassFactory operaCompoundAssignFix =
       new PassFactory("operaCompoundAssignFix", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1777,7 +1777,7 @@
   };
 
   /** Alias external symbols. */
-  private final PassFactory aliasExternals =
+  final PassFactory aliasExternals =
       new PassFactory("aliasExternals", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1790,7 +1790,7 @@
    * Alias string literals with global variables, to avoid creating lots of
    * transient objects.
    */
-  private final PassFactory aliasStrings =
+  final PassFactory aliasStrings =
       new PassFactory("aliasStrings", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1804,7 +1804,7 @@
   };
 
   /** Aliases common keywords (true, false) */
-  private final PassFactory aliasKeywords =
+  final PassFactory aliasKeywords =
       new PassFactory("aliasKeywords", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1813,7 +1813,7 @@
   };
 
   /** Handling for the ObjectPropertyString primitive. */
-  private final PassFactory objectPropertyStringPostprocess =
+  final PassFactory objectPropertyStringPostprocess =
       new PassFactory("ObjectPropertyStringPostprocess", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1825,7 +1825,7 @@
    * Renames properties so that the two properties that never appear on
    * the same object get the same name.
    */
-  private final PassFactory ambiguateProperties =
+  final PassFactory ambiguateProperties =
       new PassFactory("ambiguateProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1837,7 +1837,7 @@
   /**
    * Mark the point at which the normalized AST assumptions no longer hold.
    */
-  private final PassFactory markUnnormalized =
+  final PassFactory markUnnormalized =
       new PassFactory("markUnnormalized", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1850,7 +1850,7 @@
   };
 
   /** Denormalize the AST for code generation. */
-  private final PassFactory denormalize =
+  final PassFactory denormalize =
       new PassFactory("denormalize", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1859,7 +1859,7 @@
   };
 
   /** Inverting name normalization. */
-  private final PassFactory invertContextualRenaming =
+  final PassFactory invertContextualRenaming =
       new PassFactory("invertNames", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1870,7 +1870,7 @@
   /**
    * Renames properties.
    */
-  private final PassFactory renameProperties =
+  final PassFactory renameProperties =
       new PassFactory("renameProperties", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1926,7 +1926,7 @@
   }
 
   /** Renames variables. */
-  private final PassFactory renameVars =
+  final PassFactory renameVars =
       new PassFactory("renameVars", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -1972,7 +1972,7 @@
   }
 
   /** Renames labels */
-  private final PassFactory renameLabels =
+  final PassFactory renameLabels =
       new PassFactory("renameLabels", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1981,7 +1981,7 @@
   };
 
   /** Convert bracket access to dot access */
-  private final PassFactory convertToDottedProperties =
+  final PassFactory convertToDottedProperties =
       new PassFactory("convertToDottedProperties", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1990,7 +1990,7 @@
   };
 
   /** Checks that all variables are defined. */
-  private final PassFactory sanityCheckAst =
+  final PassFactory sanityCheckAst =
       new PassFactory("sanityCheckAst", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -1999,7 +1999,7 @@
   };
 
   /** Checks that all variables are defined. */
-  private final PassFactory sanityCheckVars =
+  final PassFactory sanityCheckVars =
       new PassFactory("sanityCheckVars", true) {
     @Override
     protected CompilerPass createInternal(AbstractCompiler compiler) {
@@ -2008,7 +2008,7 @@
   };
 
   /** Adds instrumentations according to an instrumentation template. */
-  private final PassFactory instrumentFunctions =
+  final PassFactory instrumentFunctions =
       new PassFactory("instrumentFunctions", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -2101,7 +2101,7 @@
     return additionalReplacements;
   }
 
-  private final PassFactory printNameReferenceGraph =
+  final PassFactory printNameReferenceGraph =
     new PassFactory("printNameReferenceGraph", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
@@ -2126,7 +2126,7 @@
     }
   };
 
-  private final PassFactory printNameReferenceReport =
+  final PassFactory printNameReferenceReport =
       new PassFactory("printNameReferenceReport", true) {
     @Override
     protected CompilerPass createInternal(final AbstractCompiler compiler) {
