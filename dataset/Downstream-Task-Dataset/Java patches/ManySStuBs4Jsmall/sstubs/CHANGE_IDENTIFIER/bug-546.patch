diff --git a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java
index a964c06..7b69c96 100644
--- a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java
+++ b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java
@@ -71,7 +71,7 @@
     @Override
     protected void doStop() throws Exception {
         if (server != null) {
-            LOG.trace("Terminating gRPC server");
+            LOG.debug("Terminating gRPC server");
             server.shutdown().shutdownNow();
             server = null;
         }
@@ -93,10 +93,10 @@
         }
         
         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {
-            LOG.info("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());
+            LOG.debug("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());
             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));
         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {
-            LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort());
+            LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort());
             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());
         } else {
             throw new IllegalArgumentException("No server start properties (host, port) specified");
diff --git a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java
index fcc2ed7..2a2030a 100644
--- a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java
+++ b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcProducer.java
@@ -72,10 +72,10 @@
         if (channel == null) {
             initializeChannel();
             if (endpoint.isSynchronous()) {
-                LOG.info("Getting synchronous method stub from channel");
+                LOG.debug("Getting synchronous method stub from channel");
                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());
             } else {
-                LOG.info("Getting asynchronous method stub from channel");
+                LOG.debug("Getting asynchronous method stub from channel");
                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());
             }
         }
@@ -84,7 +84,7 @@
     @Override
     protected void doStop() throws Exception {
         if (channel != null) {
-            LOG.trace("Terminating channel to the remote gRPC server");
+            LOG.debug("Terminating channel to the remote gRPC server");
             channel.shutdown().shutdownNow();
             channel = null;
             grpcStub = null;
diff --git a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcUtils.java b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcUtils.java
index 39861cd..00cf25b 100644
--- a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcUtils.java
+++ b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcUtils.java
@@ -28,8 +28,8 @@
 import org.apache.camel.util.ReflectionHelper;
 
 /**
- * GrpcUtils helpers are working with dynamic methods via Spring reflection
- * utilities
+ * GrpcUtils helpers are working with dynamic methods via Camel and 
+ * Java reflection utilities
  */
 public final class GrpcUtils {
 
@@ -61,7 +61,7 @@
             Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName);
             Method grpcBlockingMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel);
             if (grpcBlockingMethod == null) {
-                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD);
+                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod);
             }
             grpcBlockingStub = ObjectHelper.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel);
 
diff --git a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java
index a964c06..7b69c96 100644
--- a/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java
+++ b/components/camel-grpc/src/main/java/org/apache/camel/component/grpc/GrpcConsumer.java
@@ -71,7 +71,7 @@
     @Override
     protected void doStop() throws Exception {
         if (server != null) {
-            LOG.trace("Terminating gRPC server");
+            LOG.debug("Terminating gRPC server");
             server.shutdown().shutdownNow();
             server = null;
         }
@@ -93,10 +93,10 @@
         }
         
         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {
-            LOG.info("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());
+            LOG.debug("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());
             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));
         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {
-            LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort());
+            LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort());
             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());
         } else {
             throw new IllegalArgumentException("No server start properties (host, port) specified");
