diff --git a/api/src/main/java/org/openmrs/api/context/Daemon.java b/api/src/main/java/org/openmrs/api/context/Daemon.java
index 6a0fac7..0e73116 100644
--- a/api/src/main/java/org/openmrs/api/context/Daemon.java
+++ b/api/src/main/java/org/openmrs/api/context/Daemon.java
@@ -112,7 +112,7 @@
 	 * @should not be called from other methods other than TimerSchedulerTask
 	 * @should not throw error if called from a TimerSchedulerTask class
 	 */
-	public static void executeScheduledTask(final Task task) throws Throwable {
+	public static void executeScheduledTask(final Task task) throws Exception {
 		
 		// quick check to make sure we're only being called by ourselves
 		//Class<?> callerClass = Reflection.getCallerClass(0);
@@ -323,14 +323,14 @@
 		/**
 		 * The exception thrown (if any) by the method called in {@link #run()}
 		 */
-		protected Throwable exceptionThrown = null;
+		protected Exception exceptionThrown = null;
 		
 		/**
 		 * Gets the exception thrown (if any) by the method called in {@link #run()}
 		 *
 		 * @return the thrown exception (if any).
 		 */
-		public Throwable getExceptionThrown() {
+		public Exception getExceptionThrown() {
 			return exceptionThrown;
 		}
 	}
diff --git a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java
index 843deb6..3bb1f19 100644
--- a/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java
+++ b/api/src/main/java/org/openmrs/scheduler/timer/TimerSchedulerTask.java
@@ -48,7 +48,7 @@
 		try {
 			Daemon.executeScheduledTask(task);
 		}
-		catch (Throwable t) {
+		catch (Exception t) {
 			// Fix #862: IllegalStateException: Timer already cancelled.
 			// Suppress error in order to keep the scheduler's Timer from completely failing.
 			log.error(
diff --git a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java
index f574bb6..4ef2e41 100644
--- a/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java
+++ b/api/src/main/java/org/openmrs/util/OpenmrsClassLoader.java
@@ -363,7 +363,7 @@
 				field.setAccessible(true);
 				field.set(cacheManager, null);
 			}
-			catch (Throwable ex) {
+			catch (Exception ex) {
 				log.error(ex.getMessage(), ex);
 			}
 		}
@@ -470,7 +470,7 @@
 					log.info("onShutdown Stopping thread: " + thread.getName());
 					thread.stop();
 				}
-				catch (Throwable ex) {
+				catch (Exception ex) {
 					log.error(ex.getMessage(), ex);
 				}
 			}
diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java
index dd63212..4a15bd5 100644
--- a/web/src/main/java/org/openmrs/web/Listener.java
+++ b/web/src/main/java/org/openmrs/web/Listener.java
@@ -243,7 +243,7 @@
 			// start the scheduled tasks
 			SchedulerUtil.startup(getRuntimeProperties());
 		}
-		catch (Throwable t) {
+		catch (Exception t) {
 			Context.shutdown();
 			WebModuleUtil.shutdownModules(servletContext);
 			throw new ServletException(t);
@@ -558,7 +558,7 @@
 				}
 			}
 		}
-		catch (Throwable e) {
+		catch (Exception e) {
 			System.err.println("Listener.contextDestroyed: Failed to cleanup drivers in webapp");
 			e.printStackTrace();
 		}
@@ -592,7 +592,7 @@
 	 * @throws ModuleMustStartException if the context cannot restart due to a
 	 *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}
 	 */
-	public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {
+	public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {
 		Log log = LogFactory.getLog(Listener.class);
 		
 		List<Module> startedModules = new ArrayList<Module>();
@@ -632,7 +632,7 @@
 							try {
 								ModuleFactory.stopModule(mod, true, true);
 							}
-							catch (Throwable t3) {
+							catch (Exception t3) {
 								// just keep going if we get an error shutting down.  was probably caused by the module 
 								// that actually got us to this point!
 								log.trace("Unable to shutdown module:" + mod, t3);
@@ -646,7 +646,7 @@
 					throw new MandatoryModuleException(ex.getModuleId(), "Got an error while starting a mandatory module: "
 					        + e.getMessage() + ". Check the server logs for more information");
 				}
-				catch (Throwable t2) {
+				catch (Exception t2) {
 					// a mandatory or core module is causing spring to fail to start up.  We don't want those
 					// stopped so we must report this error to the higher authorities
 					log.warn("caught another error: ", t2);
diff --git a/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java b/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java
index a4df15d..0a4c878 100644
--- a/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java
+++ b/web/src/main/java/org/openmrs/web/OpenmrsJspServlet.java
@@ -51,7 +51,7 @@
 		try {
 			this.destroy();
 		}
-		catch (Throwable ex) {
+		catch (Exception ex) {
 			log.error(ex);
 		}
 	}
@@ -64,7 +64,7 @@
 			field.setAccessible(true);
 			init((ServletConfig) field.get(this));
 		}
-		catch (Throwable ex) {
+		catch (Exception ex) {
 			log.error(ex);
 		}
 	}
diff --git a/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java b/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java
index 9dd7a93..87bbced 100644
--- a/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java
+++ b/web/src/main/java/org/openmrs/web/filter/update/UpdateFilter.java
@@ -380,7 +380,7 @@
 					}
 				}
 			}
-			catch (Throwable t2) {
+			catch (Exception t2) {
 				log.error("Error while trying to authenticate as super user (voided version)", e);
 			}
 		}
diff --git a/api/src/main/java/org/openmrs/api/context/Daemon.java b/api/src/main/java/org/openmrs/api/context/Daemon.java
index 6a0fac7..0e73116 100644
--- a/api/src/main/java/org/openmrs/api/context/Daemon.java
+++ b/api/src/main/java/org/openmrs/api/context/Daemon.java
@@ -112,7 +112,7 @@
 	 * @should not be called from other methods other than TimerSchedulerTask
 	 * @should not throw error if called from a TimerSchedulerTask class
 	 */
-	public static void executeScheduledTask(final Task task) throws Throwable {
+	public static void executeScheduledTask(final Task task) throws Exception {
 		
 		// quick check to make sure we're only being called by ourselves
 		//Class<?> callerClass = Reflection.getCallerClass(0);
@@ -323,14 +323,14 @@
 		/**
 		 * The exception thrown (if any) by the method called in {@link #run()}
 		 */
-		protected Throwable exceptionThrown = null;
+		protected Exception exceptionThrown = null;
 		
 		/**
 		 * Gets the exception thrown (if any) by the method called in {@link #run()}
 		 *
 		 * @return the thrown exception (if any).
 		 */
-		public Throwable getExceptionThrown() {
+		public Exception getExceptionThrown() {
 			return exceptionThrown;
 		}
 	}
