diff --git a/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java b/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java
index 5e8b3b4..375f6c9 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java
@@ -32,8 +32,8 @@
 
     public void testBeanRecipientListParallelTimeout() throws Exception {
         MockEndpoint mock = getMockEndpoint("mock:result");
-        // A will timeout so we only get B and C
-        mock.expectedBodiesReceived("BC");
+        // A will timeout so we only get B and/or C
+        mock.message(0).body().not(body().contains("A"));
 
         template.sendBody("direct:start", "Hello");
 
@@ -53,7 +53,7 @@
             public void configure() {
                 from("direct:start").beanRef("myBean", "route").to("mock:result");
 
-                from("direct:a").delay(3000).setBody(constant("A"));
+                from("direct:a").delay(2000).setBody(constant("A"));
 
                 from("direct:b").setBody(constant("B"));
 
@@ -64,7 +64,7 @@
 
     public static class MyBean {
 
-        @org.apache.camel.RecipientList(strategyRef = "myStrategy", parallelProcessing = true, timeout = 2000)
+        @org.apache.camel.RecipientList(strategyRef = "myStrategy", parallelProcessing = true, timeout = 1000)
         public String[] route(String body) {
             return new String[] {"direct:a", "direct:b", "direct:c"};
         }
@@ -73,7 +73,7 @@
     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
 
         public void timeout(Exchange oldExchange, int index, int total, long timeout) {
-            assertEquals(2000, timeout);
+            assertEquals(1000, timeout);
             assertEquals(3, total);
             assertEquals(0, index);
             assertNotNull(oldExchange);
diff --git a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeout2Test.java b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeout2Test.java
index bb852f9..1023d29 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeout2Test.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeout2Test.java
@@ -29,8 +29,8 @@
 
     public void testMulticastParallelTimeout() throws Exception {
         MockEndpoint mock = getMockEndpoint("mock:result");
-        // B will timeout so we only get A and C
-        mock.expectedBodiesReceived("AC");
+        // B will timeout so we only get A and/or C
+        mock.message(0).body().not(body().contains("B"));
 
         getMockEndpoint("mock:A").expectedMessageCount(1);
         getMockEndpoint("mock:B").expectedMessageCount(0);
@@ -63,7 +63,7 @@
                                 return oldExchange;
                             }
                         })
-                        .parallelProcessing().timeout(2000).to("direct:a", "direct:b", "direct:c")
+                        .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")
                     // use end to indicate end of multicast route
                     .end()
                     .to("mock:result");
diff --git a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutAwareTest.java b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutAwareTest.java
index c9710f9..6f70d3b 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutAwareTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutAwareTest.java
@@ -29,8 +29,8 @@
 
     public void testMulticastParallelTimeoutAware() throws Exception {
         MockEndpoint mock = getMockEndpoint("mock:result");
-        // A will timeout so we only get B and C
-        mock.expectedBodiesReceived("BC");
+        // A will timeout so we only get B and/or C
+        mock.message(0).body().not(body().contains("A"));
 
         template.sendBody("direct:start", "Hello");
 
@@ -44,12 +44,12 @@
             public void configure() throws Exception {
                 from("direct:start")
                         .multicast(new MyAggregationStrategy())
-                        .parallelProcessing().timeout(2000).to("direct:a", "direct:b", "direct:c")
+                            .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")
                         // use end to indicate end of multicast route
                         .end()
                         .to("mock:result");
 
-                from("direct:a").delay(3000).setBody(constant("A"));
+                from("direct:a").delay(2000).setBody(constant("A"));
 
                 from("direct:b").setBody(constant("B"));
 
@@ -61,7 +61,7 @@
     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
 
         public void timeout(Exchange oldExchange, int index, int total, long timeout) {
-            assertEquals(2000, timeout);
+            assertEquals(1000, timeout);
             assertEquals(3, total);
             assertEquals(0, index);
             assertNotNull(oldExchange);
diff --git a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutTest.java b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutTest.java
index 5ca3817..af1f443 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutTest.java
@@ -29,8 +29,8 @@
 
     public void testMulticastParallelTimeout() throws Exception {
         MockEndpoint mock = getMockEndpoint("mock:result");
-        // A will timeout so we only get B and C
-        mock.expectedBodiesReceived("BC");
+        // A will timeout so we only get B and/or C
+        mock.message(0).body().not(body().contains("A"));
 
         getMockEndpoint("mock:A").expectedMessageCount(0);
         getMockEndpoint("mock:B").expectedMessageCount(1);
@@ -63,7 +63,7 @@
                                 return oldExchange;
                             }
                         })
-                        .parallelProcessing().timeout(2000).to("direct:a", "direct:b", "direct:c")
+                        .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")
                     // use end to indicate end of multicast route
                     .end()
                     .to("mock:result");
diff --git a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTwoTimeoutTest.java b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTwoTimeoutTest.java
index bb858a2..4d4fe0a 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTwoTimeoutTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTwoTimeoutTest.java
@@ -54,7 +54,7 @@
                                 return oldExchange;
                             }
                         })
-                        .parallelProcessing().timeout(2000).to("direct:a", "direct:b", "direct:c")
+                        .parallelProcessing().timeout(1000).to("direct:a", "direct:b", "direct:c")
                     // use end to indicate end of multicast route
                     .end()
                     .to("mock:result");
diff --git a/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTimeoutTest.java b/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTimeoutTest.java
index 6797f1f..18e611e 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTimeoutTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTimeoutTest.java
@@ -29,8 +29,8 @@
 
     public void testRecipientListParallelTimeout() throws Exception {
         MockEndpoint mock = getMockEndpoint("mock:result");
-        // A will timeout so we only get B and C
-        mock.expectedBodiesReceived("BC");
+        // A will timeout so we only get B and/or C
+        mock.message(0).body().not(body().contains("A"));
 
         template.sendBodyAndHeader("direct:start", "Hello", "slip", "direct:a,direct:b,direct:c");
 
@@ -55,10 +55,10 @@
                                 return oldExchange;
                             }
                         })
-                        .parallelProcessing().timeout(2000)
+                        .parallelProcessing().timeout(1000)
                     .to("mock:result");
 
-                from("direct:a").delay(3000).setBody(constant("A"));
+                from("direct:a").delay(5000).setBody(constant("A"));
 
                 from("direct:b").setBody(constant("B"));
 
diff --git a/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java b/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java
index 5e8b3b4..375f6c9 100644
--- a/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java
+++ b/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java
@@ -32,8 +32,8 @@
 
     public void testBeanRecipientListParallelTimeout() throws Exception {
         MockEndpoint mock = getMockEndpoint("mock:result");
-        // A will timeout so we only get B and C
-        mock.expectedBodiesReceived("BC");
+        // A will timeout so we only get B and/or C
+        mock.message(0).body().not(body().contains("A"));
 
         template.sendBody("direct:start", "Hello");
 
@@ -53,7 +53,7 @@
             public void configure() {
                 from("direct:start").beanRef("myBean", "route").to("mock:result");
 
-                from("direct:a").delay(3000).setBody(constant("A"));
+                from("direct:a").delay(2000).setBody(constant("A"));
 
                 from("direct:b").setBody(constant("B"));
 
@@ -64,7 +64,7 @@
 
     public static class MyBean {
 
-        @org.apache.camel.RecipientList(strategyRef = "myStrategy", parallelProcessing = true, timeout = 2000)
+        @org.apache.camel.RecipientList(strategyRef = "myStrategy", parallelProcessing = true, timeout = 1000)
         public String[] route(String body) {
             return new String[] {"direct:a", "direct:b", "direct:c"};
         }
@@ -73,7 +73,7 @@
     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {
 
         public void timeout(Exchange oldExchange, int index, int total, long timeout) {
-            assertEquals(2000, timeout);
+            assertEquals(1000, timeout);
             assertEquals(3, total);
             assertEquals(0, index);
             assertNotNull(oldExchange);
