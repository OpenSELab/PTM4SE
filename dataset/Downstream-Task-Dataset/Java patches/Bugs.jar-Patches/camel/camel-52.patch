diff --git a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
index e538801..b2930f6 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
@@ -200,19 +200,11 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
         final AtomicExchange result = new AtomicExchange();
         final Iterable<ProcessorExchangePair> pairs;
 
-        // multicast uses fine grained error handling on the output processors
-        // so use try .. catch to cater for this
-        boolean exhaust = false;
         try {
             boolean sync = true;
 
             pairs = createProcessorExchangePairs(exchange);
 
-            // after we have created the processors we consider the exchange as exhausted if an unhandled
-            // exception was thrown, (used in the catch block)
-            // if the processors is working in Streaming model, the exchange could not be processed at this point.
-            exhaust = !isStreaming();
-
             if (isParallelProcessing()) {
                 // ensure an executor is set when running in parallel
                 ObjectHelper.notNull(executorService, "executorService", this);
@@ -228,15 +220,16 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
             }
         } catch (Throwable e) {
             exchange.setException(e);
+            // unexpected exception was thrown, maybe from iterator etc. so do not regard as exhausted
             // and do the done work
-            doDone(exchange, null, callback, true, exhaust);
+            doDone(exchange, null, callback, true, false);
             return true;
         }
 
         // multicasting was processed successfully
         // and do the done work
         Exchange subExchange = result.get() != null ? result.get() : null;
-        doDone(exchange, subExchange, callback, true, exhaust);
+        doDone(exchange, subExchange, callback, true, true);
         return true;
     }
 
@@ -308,7 +301,8 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
                             // throw caused exception
                             if (subExchange.getException() != null) {
                                 // wrap in exception to explain where it failed
-                                throw new CamelExchangeException("Parallel processing failed for number " + number, subExchange, subExchange.getException());
+                                CamelExchangeException cause = new CamelExchangeException("Parallel processing failed for number " + number, subExchange, subExchange.getException());
+                                subExchange.setException(cause);
                             }
                         }
 
@@ -527,14 +521,14 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
             if (stopOnException && !continueProcessing) {
                 if (subExchange.getException() != null) {
                     // wrap in exception to explain where it failed
-                    throw new CamelExchangeException("Sequential processing failed for number " + total.get(), subExchange, subExchange.getException());
-                } else {
-                    // we want to stop on exception, and the exception was handled by the error handler
-                    // this is similar to what the pipeline does, so we should do the same to not surprise end users
-                    // so we should set the failed exchange as the result and be done
-                    result.set(subExchange);
-                    return true;
+                    CamelExchangeException cause = new CamelExchangeException("Sequential processing failed for number " + total.get(), subExchange, subExchange.getException());
+                    subExchange.setException(cause);
                 }
+                // we want to stop on exception, and the exception was handled by the error handler
+                // this is similar to what the pipeline does, so we should do the same to not surprise end users
+                // so we should set the failed exchange as the result and be done
+                result.set(subExchange);
+                return true;
             }
 
             LOG.trace("Sequential processing complete for number {} exchange: {}", total, subExchange);
diff --git a/camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java
index 9c4b00d..6cac402 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/TryProcessor.java
@@ -361,6 +361,8 @@ public class TryProcessor extends ServiceSupport implements AsyncProcessor, Navi
             // give the rest of the pipeline another chance
             exchange.setProperty(Exchange.EXCEPTION_CAUGHT, caught);
             exchange.setException(null);
+            // and we should not be regarded as exhausted as we are in a try .. catch block
+            exchange.removeProperty(Exchange.REDELIVERY_EXHAUSTED);
 
             // is the exception handled by the catch clause
             final Boolean handled = catchClause.handles(exchange);
