diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
index 206bb98..1c28345 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
@@ -54,7 +54,7 @@ public class FileOperations implements GenericFileOperations<File> {
         this.endpoint = (FileEndpoint) endpoint;
     }
 
-    public boolean deleteFile(String name) throws GenericFileOperationFailedException {        
+    public boolean deleteFile(String name) throws GenericFileOperationFailedException {
         File file = new File(name);
         return FileUtil.deleteFile(file);
     }
@@ -71,7 +71,7 @@ public class FileOperations implements GenericFileOperations<File> {
     }
 
     public boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException {
-        ObjectHelper.notNull(endpoint, "endpoint");       
+        ObjectHelper.notNull(endpoint, "endpoint");
 
         // always create endpoint defined directory
         if (endpoint.isAutoCreate() && !endpoint.getFile().exists()) {
@@ -106,12 +106,17 @@ public class FileOperations implements GenericFileOperations<File> {
             }
         }
 
-        if (path.isDirectory() && path.exists()) {
-            // the directory already exists
-            return true;
-        } else {
-            LOG.trace("Building directory: {}", path);
-            return path.mkdirs();
+        // We need to make sure that this is thread-safe and only one thread tries to create the path directory at the same time.
+        synchronized (this) {
+            if (path.isDirectory() && path.exists()) {
+                // the directory already exists
+                return true;
+            } else {
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace("Building directory: " + path);
+                }
+                return path.mkdirs();
+            }
         }
     }
 
@@ -152,7 +157,9 @@ public class FileOperations implements GenericFileOperations<File> {
         if (file.exists()) {
             if (endpoint.getFileExist() == GenericFileExist.Ignore) {
                 // ignore but indicate that the file was written
-                LOG.trace("An existing file already exists: {}. Ignore and do not override it.", file);
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace("An existing file already exists: " + file + ". Ignore and do not override it.");
+                }
                 return true;
             } else if (endpoint.getFileExist() == GenericFileExist.Fail) {
                 throw new GenericFileOperationFailedException("File already exist: " + file + ". Cannot write new file.");
@@ -168,7 +175,7 @@ public class FileOperations implements GenericFileOperations<File> {
             // is the body file based
             File source = null;
             // get the File Object from in message
-            source = exchange.getIn().getBody(File.class);            
+            source = exchange.getIn().getBody(File.class);
 
             if (source != null) {
                 // okay we know the body is a file type
@@ -222,13 +229,17 @@ public class FileOperations implements GenericFileOperations<File> {
             }
             if (last != null) {
                 boolean result = file.setLastModified(last);
-                LOG.trace("Keeping last modified timestamp: {} on file: {} with result: {}", new Object[]{last, file, result});
+                if (LOG.isTraceEnabled()) {
+                    LOG.trace("Keeping last modified timestamp: " + last + " on file: " + file + " with result: " + result);
+                }
             }
         }
     }
 
     private boolean writeFileByLocalWorkPath(File source, File file) {
-        LOG.trace("Using local work file being renamed from: {} to: {}", source, file);
+        if (LOG.isTraceEnabled()) {
+            LOG.trace("Using local work file being renamed from: " + source + " to: " + file);
+        }
 
         return FileUtil.renameFile(source, file);
     }
@@ -239,7 +250,9 @@ public class FileOperations implements GenericFileOperations<File> {
         try {
             out = prepareOutputFileChannel(target, out);
 
-            LOG.trace("Using FileChannel to transfer from: {} to: {}", in, out);
+            if (LOG.isTraceEnabled()) {
+                LOG.trace("Using FileChannel to transfer from: " + in + " to: " + out);
+            }
 
             long size = in.size();
             long position = 0;
@@ -257,7 +270,9 @@ public class FileOperations implements GenericFileOperations<File> {
         try {
             out = prepareOutputFileChannel(target, out);
 
-            LOG.trace("Using InputStream to transfer from: {} to: {}", in, out);
+            if (LOG.isTraceEnabled()) {
+                LOG.trace("Using InputStream to transfer from: " + in + " to: " + out);
+            }
             int size = endpoint.getBufferSize();
             byte[] buffer = new byte[size];
             ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);
@@ -277,7 +292,7 @@ public class FileOperations implements GenericFileOperations<File> {
 
     /**
      * Creates and prepares the output file channel. Will position itself in correct position if the file is writable
-     *  eg. it should append or override any existing content.
+     * eg. it should append or override any existing content.
      */
     private FileChannel prepareOutputFileChannel(File target, FileChannel out) throws IOException {
         if (endpoint.getFileExist() == GenericFileExist.Append) {
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java
index 9235dcc..8f5ff7b 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileDeleteProcessStrategy.java
@@ -29,19 +29,22 @@ public class GenericFileDeleteProcessStrategy<T> extends GenericFileProcessStrat
 
     @Override
     public boolean begin(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {
-        // must invoke super
-        boolean result = super.begin(operations, endpoint, exchange, file);
-        if (!result) {
-            return false;
-        }
+
+        // We need to invoke super, but to the file that we are going to use for processing, so we do super after renaming.
+        GenericFile<T> to = file;
 
         if (beginRenamer != null) {
             GenericFile<T> newName = beginRenamer.renameFile(exchange, file);
-            GenericFile<T> to = renameFile(operations, file, newName);
+            to = renameFile(operations, file, newName);
             if (to != null) {
                 to.bindToExchange(exchange);
             }
         }
+        // must invoke super
+        boolean result = super.begin(operations, endpoint, exchange, to);
+        if (!result) {
+            return false;
+        }
 
         return true;
     }
@@ -79,7 +82,7 @@ public class GenericFileDeleteProcessStrategy<T> extends GenericFileProcessStrat
             throw new GenericFileOperationFailedException("Cannot delete file: " + file);
         }
     }
-    
+
     @Override
     public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {
         // must invoke super
@@ -98,7 +101,7 @@ public class GenericFileDeleteProcessStrategy<T> extends GenericFileProcessStrat
             renameFile(operations, file, newName);
         }
     }
-    
+
     public GenericFileRenamer<T> getFailureRenamer() {
         return failureRenamer;
     }
@@ -114,4 +117,4 @@ public class GenericFileDeleteProcessStrategy<T> extends GenericFileProcessStrat
     public void setBeginRenamer(GenericFileRenamer<T> beginRenamer) {
         this.beginRenamer = beginRenamer;
     }
-}
\ No newline at end of file
+}
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java
index 1e32688..943e71f 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/strategy/GenericFileRenameProcessStrategy.java
@@ -31,19 +31,22 @@ public class GenericFileRenameProcessStrategy<T> extends GenericFileProcessStrat
 
     @Override
     public boolean begin(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {
-        // must invoke super
-        boolean result = super.begin(operations, endpoint, exchange, file);
-        if (!result) {
-            return false;
-        }
+
+        // We need to invoke super, but to the file that we are going to use for processing, so we do super after renaming.
+        GenericFile<T> to = file;
 
         if (beginRenamer != null) {
             GenericFile<T> newName = beginRenamer.renameFile(exchange, file);
-            GenericFile<T> to = renameFile(operations, file, newName);
+            to = renameFile(operations, file, newName);
             if (to != null) {
                 to.bindToExchange(exchange);
             }
         }
+        // must invoke super
+        boolean result = super.begin(operations, endpoint, exchange, to);
+        if (!result) {
+            return false;
+        }
 
         return true;
     }
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java
index 6d72d19..734a654 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java
@@ -34,8 +34,6 @@ import org.slf4j.LoggerFactory;
  */
 public class MarkerFileExclusiveReadLockStrategy implements GenericFileExclusiveReadLockStrategy<File> {
     private static final transient Logger LOG = LoggerFactory.getLogger(MarkerFileExclusiveReadLockStrategy.class);
-    private File lock;
-    private String lockFileName;
 
     public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) {
         String dir = endpoint.getConfiguration().getDirectory();
@@ -50,28 +48,25 @@ public class MarkerFileExclusiveReadLockStrategy implements GenericFileExclusive
 
     public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations,
                                             GenericFile<File> file, Exchange exchange) throws Exception {
-        lockFileName = file.getAbsoluteFilePath() + FileComponent.DEFAULT_LOCK_FILE_POSTFIX;
+        String lockFileName = getLockFileName(file);
         LOG.trace("Locking the file: {} using the lock file name: {}", file, lockFileName);
 
         // create a plain file as marker filer for locking (do not use FileLock)
-        lock = new File(lockFileName);
+        File lock = new File(lockFileName);
         boolean acquired = lock.createNewFile();
-        if (!acquired) {
-            lock = null;
-
-        }
 
         return acquired;
     }
 
     public void releaseExclusiveReadLock(GenericFileOperations<File> operations,
                                          GenericFile<File> file, Exchange exchange) throws Exception {
-        if (lock != null) {
-            LOG.trace("Unlocking file: {}", lockFileName);
+        String lockFileName = getLockFileName(file);
+        File lock = new File(lockFileName);
 
-            boolean deleted = FileUtil.deleteFile(lock);
-            LOG.trace("Lock file: {} was deleted: {}", lockFileName, deleted);
-        }
+        LOG.trace("Unlocking file: {}", lockFileName);
+
+        boolean deleted = FileUtil.deleteFile(lock);
+        LOG.trace("Lock file: {} was deleted: {}", lockFileName, deleted);
     }
 
     public void setTimeout(long timeout) {
@@ -101,4 +96,8 @@ public class MarkerFileExclusiveReadLockStrategy implements GenericFileExclusive
         }
     }
 
+    private static String getLockFileName(GenericFile<File> file) {
+        return file.getAbsoluteFilePath() + FileComponent.DEFAULT_LOCK_FILE_POSTFIX;
+    }
+
 }
