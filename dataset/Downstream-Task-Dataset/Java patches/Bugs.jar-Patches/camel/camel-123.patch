diff --git a/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java b/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java
index 04dbc4d..817a2f9 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java
@@ -22,6 +22,7 @@ import javax.xml.bind.annotation.XmlTransient;
 
 import org.apache.camel.CamelContext;
 import org.apache.camel.CamelContextAware;
+import org.apache.camel.Component;
 import org.apache.camel.Consume;
 import org.apache.camel.Consumer;
 import org.apache.camel.ConsumerTemplate;
@@ -37,7 +38,6 @@ import org.apache.camel.Service;
 import org.apache.camel.component.bean.BeanInfo;
 import org.apache.camel.component.bean.BeanProcessor;
 import org.apache.camel.component.bean.ProxyHelper;
-import org.apache.camel.component.properties.PropertiesComponent;
 import org.apache.camel.processor.CamelInternalProcessor;
 import org.apache.camel.processor.UnitOfWorkProducer;
 import org.apache.camel.util.CamelContextHelper;
@@ -227,17 +227,13 @@ public class CamelPostProcessorHelper implements CamelContextAware {
     public Object getInjectionPropertyValue(Class<?> type, String propertyName, String propertyDefaultValue,
                                             String injectionPointName, Object bean, String beanName) {
         try {
+            // enforce a properties component to be created if none existed
+            CamelContextHelper.lookupPropertiesComponent(getCamelContext(), true);
+
             String key;
             String prefix = getCamelContext().getPropertyPrefixToken();
             String suffix = getCamelContext().getPropertySuffixToken();
-
-            if (prefix == null && suffix == null) {
-                // if no custom prefix/suffix then use defaults
-                prefix = PropertiesComponent.DEFAULT_PREFIX_TOKEN;
-                suffix = PropertiesComponent.DEFAULT_SUFFIX_TOKEN;
-            }
-
-            if (!propertyName.startsWith(prefix)) {
+            if (!propertyName.contains(prefix)) {
                 // must enclose the property name with prefix/suffix to have it resolved
                 key = prefix + propertyName + suffix;
             } else {
diff --git a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java
index 256fc8c..7eb7fe6 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java
@@ -37,7 +37,6 @@ import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
-
 import javax.naming.Context;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.Unmarshaller;
@@ -1458,23 +1457,8 @@ public class DefaultCamelContext extends ServiceSupport implements ModelCamelCon
         if (text != null && !text.startsWith("properties:")) {
             // No component, assume default tokens.
             if (pc == null && text.contains(PropertiesComponent.DEFAULT_PREFIX_TOKEN)) {
-
-                // try to lookup component, as we may be initializing CamelContext itself
-                Component existing = lookupPropertiesComponent();
-                if (existing != null) {
-                    if (existing instanceof PropertiesComponent) {
-                        pc = (PropertiesComponent) existing;
-                    } else {
-                        // properties component must be expected type
-                        throw new IllegalArgumentException("Found properties component of type: " + existing.getClass() + " instead of expected: " + PropertiesComponent.class);
-                    }
-                }
-
-                if (pc == null) {
-                    // create a default properties component to be used as there may be default values we can use
-                    log.info("No existing PropertiesComponent has been configured, creating a new default PropertiesComponent with name: properties");
-                    pc = getComponent("properties", PropertiesComponent.class);
-                }
+                // lookup existing properties component, or force create a new default component
+                pc = (PropertiesComponent) CamelContextHelper.lookupPropertiesComponent(this, true);
             }
 
             if (pc != null && text.contains(pc.getPrefixToken())) {
@@ -2111,7 +2095,7 @@ public class DefaultCamelContext extends ServiceSupport implements ModelCamelCon
 
         // eager lookup any configured properties component to avoid subsequent lookup attempts which may impact performance
         // due we use properties component for property placeholder resolution at runtime
-        Component existing = lookupPropertiesComponent();
+        Component existing = CamelContextHelper.lookupPropertiesComponent(this, false);
         if (existing != null) {
             // store reference to the existing properties component
             if (existing instanceof PropertiesComponent) {
@@ -3075,16 +3059,12 @@ public class DefaultCamelContext extends ServiceSupport implements ModelCamelCon
         }
     }
 
+    /**
+     * @deprecated use {@link org.apache.camel.util.CamelContextHelper#lookupPropertiesComponent(org.apache.camel.CamelContext, boolean)}
+     */
+    @Deprecated
     protected Component lookupPropertiesComponent() {
-        // no existing properties component so lookup and add as component if possible
-        PropertiesComponent answer = (PropertiesComponent) hasComponent("properties");
-        if (answer == null) {
-            answer = getRegistry().lookupByNameAndType("properties", PropertiesComponent.class);
-            if (answer != null) {
-                addComponent("properties", answer);
-            }
-        }
-        return answer;
+        return CamelContextHelper.lookupPropertiesComponent(this, false);
     }
 
     public ShutdownStrategy getShutdownStrategy() {
diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java
index 87689a3..5ba236b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java
@@ -31,6 +31,7 @@ import javax.xml.namespace.QName;
 import org.apache.camel.Exchange;
 import org.apache.camel.spi.ExecutorServiceManager;
 import org.apache.camel.spi.RouteContext;
+import org.apache.camel.util.CamelContextHelper;
 import org.apache.camel.util.IntrospectionSupport;
 import org.apache.camel.util.ObjectHelper;
 import org.slf4j.Logger;
@@ -524,6 +525,9 @@ public final class ProcessorDefinitionHelper {
                     String local = key.getLocalPart();
                     Object value = processorDefinition.getOtherAttributes().get(key);
                     if (value != null && value instanceof String) {
+                        // enforce a properties component to be created if none existed
+                        CamelContextHelper.lookupPropertiesComponent(routeContext.getCamelContext(), true);
+
                         // value must be enclosed with placeholder tokens
                         String s = (String) value;
                         String prefixToken = routeContext.getCamelContext().getPropertyPrefixToken();
diff --git a/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java b/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java
index ab829f6..097ed29 100644
--- a/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java
@@ -35,6 +35,7 @@ import org.apache.camel.Endpoint;
 import org.apache.camel.Exchange;
 import org.apache.camel.NoSuchBeanException;
 import org.apache.camel.NoSuchEndpointException;
+import org.apache.camel.component.properties.PropertiesComponent;
 import org.apache.camel.spi.ClassResolver;
 import org.apache.camel.spi.RouteStartupOrder;
 import org.slf4j.Logger;
@@ -477,4 +478,30 @@ public final class CamelContextHelper {
         return 0;
     }
 
+    /**
+     * Lookup the {@link org.apache.camel.component.properties.PropertiesComponent} from the {@link org.apache.camel.CamelContext}.
+     * <p/>
+     * @param camelContext the camel context
+     * @param autoCreate whether to automatic create a new default {@link org.apache.camel.component.properties.PropertiesComponent} if no custom component
+     *                   has been configured.
+     * @return the properties component, or <tt>null</tt> if none has been defined, and auto create is <tt>false</tt>.
+     */
+    public static Component lookupPropertiesComponent(CamelContext camelContext, boolean autoCreate) {
+        // no existing properties component so lookup and add as component if possible
+        PropertiesComponent answer = (PropertiesComponent) camelContext.hasComponent("properties");
+        if (answer == null) {
+            answer = camelContext.getRegistry().lookupByNameAndType("properties", PropertiesComponent.class);
+            if (answer != null) {
+                camelContext.addComponent("properties", answer);
+            }
+        }
+        if (answer == null && autoCreate) {
+            // create a default properties component to be used as there may be default values we can use
+            LOG.info("No existing PropertiesComponent has been configured, creating a new default PropertiesComponent with name: properties");
+            answer = camelContext.getComponent("properties", PropertiesComponent.class);
+        }
+        return answer;
+    }
+
+
 }
