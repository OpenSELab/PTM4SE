diff --git a/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java b/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java
index 214ea39..6e6b59d 100644
--- a/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java
+++ b/camel-core/src/main/java/org/apache/camel/builder/xml/DefaultTransformErrorHandler.java
@@ -19,12 +19,13 @@ package org.apache.camel.builder.xml;
 import javax.xml.transform.ErrorListener;
 import javax.xml.transform.TransformerException;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.xml.sax.ErrorHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * {@link ErrorHandler} and {@link ErrorListener} which will log warnings,
  * and throws error and fatal as exception, which ensures those can be caught by Camel and dealt-with.
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
index 8e8b320..6d2c809 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
@@ -137,24 +137,21 @@ public class FileConsumer extends GenericFileConsumer<File> {
         answer.setAbsolute(FileUtil.isAbsolute(file));
         answer.setAbsoluteFilePath(file.getAbsolutePath());
         answer.setLastModified(file.lastModified());
-        if (answer.isAbsolute()) {
-            // use absolute path as relative
-            answer.setRelativeFilePath(file.getAbsolutePath());
+
+        // compute the file path as relative to the starting directory
+        File path;
+        String endpointNormalized = FileUtil.normalizePath(endpointPath);
+        if (file.getPath().startsWith(endpointNormalized)) {
+            // skip duplicate endpoint path
+            path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));
         } else {
-            File path;
-            String endpointNormalized = FileUtil.normalizePath(endpointPath);
-            if (file.getPath().startsWith(endpointNormalized)) {
-                // skip duplicate endpoint path
-                path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));
-            } else {
-                path = new File(file.getPath());
-            }
+            path = new File(file.getPath());
+        }
 
-            if (path.getParent() != null) {
-                answer.setRelativeFilePath(path.getParent() + File.separator + file.getName());
-            } else {
-                answer.setRelativeFilePath(path.getName());
-            }
+        if (path.getParent() != null) {
+            answer.setRelativeFilePath(path.getParent() + File.separator + file.getName());
+        } else {
+            answer.setRelativeFilePath(path.getName());
         }
 
         // the file name should be the relative path
