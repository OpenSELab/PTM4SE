diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java b/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java
index 1b34622..d3c7214 100644
--- a/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java
+++ b/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java
@@ -557,6 +557,12 @@ public class BeanInfo {
         final List<MethodInfo> localOperationsWithCustomAnnotation = new ArrayList<MethodInfo>(operationsWithCustomAnnotation);
         final List<MethodInfo> localOperationsWithHandlerAnnotation = new ArrayList<MethodInfo>(operationsWithHandlerAnnotation);
 
+        // remove all abstract methods
+        removeAllAbstractMethods(localOperationsWithBody);
+        removeAllAbstractMethods(localOperationsWithNoBody);
+        removeAllAbstractMethods(localOperationsWithCustomAnnotation);
+        removeAllAbstractMethods(localOperationsWithHandlerAnnotation);
+
         if (name != null) {
             // filter all lists to only include methods with this name
             removeNonMatchingMethods(localOperationsWithHandlerAnnotation, name);
@@ -831,11 +837,6 @@ public class BeanInfo {
             return false;
         }
 
-        // must not be abstract
-        if (Modifier.isAbstract(method.getModifiers())) {
-            return false;
-        }
-
         // return type must not be an Exchange and it should not be a bridge method
         if ((method.getReturnType() != null && Exchange.class.isAssignableFrom(method.getReturnType())) || method.isBridge()) {
             return false;
@@ -982,6 +983,17 @@ public class BeanInfo {
         }
     }
 
+    private void removeAllAbstractMethods(List<MethodInfo> methods) {
+        Iterator<MethodInfo> it = methods.iterator();
+        while (it.hasNext()) {
+            MethodInfo info = it.next();
+            if (Modifier.isAbstract(info.getMethod().getModifiers())) {
+                // we cannot invoke an abstract method
+                it.remove();
+            }
+        }
+    }
+
     private boolean matchMethod(Method method, String methodName) {
         if (methodName == null) {
             return true;
