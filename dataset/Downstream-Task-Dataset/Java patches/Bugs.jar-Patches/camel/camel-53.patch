diff --git a/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java
index 16be6ab..cadb98a 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java
@@ -27,7 +27,6 @@ import org.apache.camel.PollingConsumer;
 import org.apache.camel.support.ServiceSupport;
 import org.apache.camel.util.CamelContextHelper;
 import org.apache.camel.util.LRUCache;
-import org.apache.camel.util.LRUSoftCache;
 import org.apache.camel.util.ServiceHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -60,14 +59,17 @@ public class ConsumerCache extends ServiceSupport {
     /**
      * Creates the {@link LRUCache} to be used.
      * <p/>
-     * This implementation returns a {@link org.apache.camel.util.LRUSoftCache} instance.
+     * This implementation returns a {@link LRUCache} instance.
 
      * @param cacheSize the cache size
      * @return the cache
      */
     protected static LRUCache<String, PollingConsumer> createLRUCache(int cacheSize) {
-        // We use a soft reference cache to allow the JVM to re-claim memory if it runs low on memory.
-        return new LRUSoftCache<String, PollingConsumer>(cacheSize);
+        // Use a regular cache as we want to ensure that the lifecycle of the consumers
+        // being cache is properly handled, such as they are stopped when being evicted
+        // or when this cache is stopped. This is needed as some consumers requires to
+        // be stopped so they can shutdown internal resources that otherwise may cause leaks
+        return new LRUCache<String, PollingConsumer>(cacheSize);
     }
 
     public synchronized PollingConsumer getConsumer(Endpoint endpoint) {
diff --git a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java
index 89fadb0..8c5f976 100644
--- a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java
+++ b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java
@@ -37,7 +37,6 @@ import org.apache.camel.util.AsyncProcessorConverterHelper;
 import org.apache.camel.util.CamelContextHelper;
 import org.apache.camel.util.EventHelper;
 import org.apache.camel.util.LRUCache;
-import org.apache.camel.util.LRUSoftCache;
 import org.apache.camel.util.ServiceHelper;
 import org.apache.camel.util.StopWatch;
 import org.slf4j.Logger;
@@ -78,14 +77,17 @@ public class ProducerCache extends ServiceSupport {
     /**
      * Creates the {@link LRUCache} to be used.
      * <p/>
-     * This implementation returns a {@link LRUSoftCache} instance.
+     * This implementation returns a {@link LRUCache} instance.
 
      * @param cacheSize the cache size
      * @return the cache
      */
     protected static LRUCache<String, Producer> createLRUCache(int cacheSize) {
-        // We use a soft reference cache to allow the JVM to re-claim memory if it runs low on memory.
-        return new LRUSoftCache<String, Producer>(cacheSize);
+        // Use a regular cache as we want to ensure that the lifecycle of the producers
+        // being cache is properly handled, such as they are stopped when being evicted
+        // or when this cache is stopped. This is needed as some producers requires to
+        // be stopped so they can shutdown internal resources that otherwise may cause leaks
+        return new LRUCache<String, Producer>(cacheSize);
     }
 
     public CamelContext getCamelContext() {
