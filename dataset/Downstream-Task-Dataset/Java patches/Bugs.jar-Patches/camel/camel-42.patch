diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java b/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java
index 4fd0162..8a63748 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java
@@ -54,7 +54,7 @@ public class FileBinding implements GenericFileBinding<File> {
     public void loadContent(Exchange exchange, GenericFile<?> file) throws IOException {
         if (content == null) {
             try {
-                content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, file.getFile());
+                content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, exchange, file.getFile());
             } catch (NoTypeConversionAvailableException e) {
                 throw new IOException("Cannot load file content: " + file.getAbsoluteFilePath(), e);
             }
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
index f22056e..fbc60bc 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
@@ -21,7 +21,10 @@ import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.RandomAccessFile;
+import java.io.Reader;
+import java.io.Writer;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.util.Date;
@@ -29,6 +32,8 @@ import java.util.List;
 
 import org.apache.camel.Exchange;
 import org.apache.camel.InvalidPayloadException;
+import org.apache.camel.WrappedFile;
+import org.apache.camel.converter.IOConverter;
 import org.apache.camel.util.FileUtil;
 import org.apache.camel.util.IOHelper;
 import org.apache.camel.util.ObjectHelper;
@@ -173,10 +178,24 @@ public class FileOperations implements GenericFileOperations<File> {
         // 3. write stream to file
         try {
 
-            // is the body file based
+            // determine charset, exchange property overrides endpoint configuration
+            String charset = IOHelper.getCharsetName(exchange, false);
+            if (charset == null) {
+                charset = endpoint.getCharset();
+            }
+
+            // we can optimize and use file based if no charset must be used, and the input body is a file
             File source = null;
-            // get the File Object from in message
-            source = exchange.getIn().getBody(File.class);
+            if (charset == null) {
+                // if no charset, then we can try using file directly (optimized)
+                Object body = exchange.getIn().getBody();
+                if (body instanceof WrappedFile) {
+                    body = ((WrappedFile) body).getFile();
+                }
+                if (body instanceof File) {
+                    source = (File) body;
+                }
+            }
 
             if (source != null) {
                 // okay we know the body is a file type
@@ -205,9 +224,22 @@ public class FileOperations implements GenericFileOperations<File> {
                 }
             }
 
-            // fallback and use stream based
-            InputStream in = exchange.getIn().getMandatoryBody(InputStream.class);
-            writeFileByStream(in, file);
+            if (charset != null) {
+                // charset configured so we must use a reader so we can write with encoding
+                Reader in = exchange.getIn().getBody(Reader.class);
+                if (in == null) {
+                    // okay no direct reader conversion, so use an input stream (which a lot can be converted as)
+                    InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);
+                    in = new InputStreamReader(is);
+                }
+                // buffer the reader
+                in = IOHelper.buffered(in);
+                writeFileByReaderWithCharset(in, file, charset);
+            } else {
+                // fallback and use stream based
+                InputStream in = exchange.getIn().getMandatoryBody(InputStream.class);
+                writeFileByStream(in, file);
+            }
             // try to keep last modified timestamp if configured to do so
             keepLastModified(exchange, file);
             return true;
@@ -239,7 +271,6 @@ public class FileOperations implements GenericFileOperations<File> {
 
     private boolean writeFileByLocalWorkPath(File source, File file) throws IOException {
         LOG.trace("Using local work file being renamed from: {} to: {}", source, file);
-
         return FileUtil.renameFile(source, file, endpoint.isCopyAndDeleteOnRenameFail());
     }
 
@@ -286,6 +317,19 @@ public class FileOperations implements GenericFileOperations<File> {
         }
     }
 
+    private void writeFileByReaderWithCharset(Reader in, File target, String charset) throws IOException {
+        boolean append = endpoint.getFileExist() == GenericFileExist.Append;
+        Writer out = IOConverter.toWriter(target, append, charset);
+        try {
+            LOG.trace("Using Reader to transfer from: {} to: {} with charset: {}", new Object[]{in, out, charset});
+            int size = endpoint.getBufferSize();
+            IOHelper.copy(in, out, size);
+        } finally {
+            IOHelper.close(in, target.getName(), LOG);
+            IOHelper.close(out, target.getName(), LOG);
+        }
+    }
+
     /**
      * Creates and prepares the output file channel. Will position itself in correct position if the file is writable
      * eg. it should append or override any existing content.
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java
index 76bb929..49bc19d 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java
@@ -17,7 +17,6 @@
 package org.apache.camel.component.file;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Serializable;
@@ -25,9 +24,9 @@ import java.io.Serializable;
 import org.apache.camel.Converter;
 import org.apache.camel.Exchange;
 import org.apache.camel.FallbackConverter;
+import org.apache.camel.NoTypeConversionAvailableException;
 import org.apache.camel.TypeConverter;
 import org.apache.camel.spi.TypeConverterRegistry;
-import org.apache.camel.util.IOHelper;
 
 /**
  * A set of converter methods for working with generic file types
@@ -64,11 +63,15 @@ public final class GenericFileConverter {
     }
 
     @Converter
-    public static InputStream genericFileToInputStream(GenericFile<?> file, Exchange exchange) throws IOException {
+    public static InputStream genericFileToInputStream(GenericFile<?> file, Exchange exchange) throws IOException, NoTypeConversionAvailableException {
         if (exchange != null) {
-            // use a file input stream if its a java.io.File
             if (file.getFile() instanceof java.io.File) {
-                return IOHelper.buffered(new FileInputStream((File) file.getFile()));
+                // prefer to use a file input stream if its a java.io.File (must use type converter to take care of encoding)
+                File f = (File) file.getFile();
+                InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, exchange, f);
+                if (is != null) {
+                    return is;
+                }
             }
             // otherwise ensure the body is loaded as we want the input stream of the body
             file.getBinding().loadContent(exchange, file);
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java
index b00cdf0..feab07b 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java
@@ -59,8 +59,6 @@ public class GenericFileProducer<T> extends DefaultProducer {
     }
 
     public void process(Exchange exchange) throws Exception {
-        endpoint.configureExchange(exchange);
-
         String target = createFileName(exchange);
 
         // use lock for same file name to avoid concurrent writes to the same file
diff --git a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
index 0307aef..fcc6fc8 100644
--- a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
+++ b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java
@@ -101,12 +101,16 @@ public final class IOConverter {
      */
     @Deprecated
     public static BufferedWriter toWriter(File file) throws IOException {
-        return toWriter(file, null);
+        return toWriter(file, false, IOHelper.getCharsetName(null, true));
     }
     
     @Converter
     public static BufferedWriter toWriter(File file, Exchange exchange) throws IOException {
-        return IOHelper.buffered(new EncodingFileWriter(file, IOHelper.getCharsetName(exchange)));
+        return toWriter(file, false, IOHelper.getCharsetName(exchange));
+    }
+
+    public static BufferedWriter toWriter(File file, boolean append, String charset) throws IOException {
+        return IOHelper.buffered(new EncodingFileWriter(file, append, charset));
     }
 
     /**
@@ -434,6 +438,16 @@ public final class IOConverter {
             super(new FileOutputStream(file), charset);
         }
 
+        /**
+         * @param file file to write
+         * @param append whether to append to the file
+         * @param charset character set to use
+         */
+        public EncodingFileWriter(File file, boolean append, String charset)
+            throws FileNotFoundException, UnsupportedEncodingException {
+            super(new FileOutputStream(file, append), charset);
+        }
+
     }
     
     /**
diff --git a/camel-core/src/main/java/org/apache/camel/util/IOHelper.java b/camel-core/src/main/java/org/apache/camel/util/IOHelper.java
index 79aa06a..903ce19 100644
--- a/camel-core/src/main/java/org/apache/camel/util/IOHelper.java
+++ b/camel-core/src/main/java/org/apache/camel/util/IOHelper.java
@@ -191,6 +191,20 @@ public final class IOHelper {
         close(input, null, LOG);
     }
 
+    public static int copy(final Reader input, final Writer output, int bufferSize) throws IOException {
+        final char[] buffer = new char[bufferSize];
+        int n = input.read(buffer);
+        int total = 0;
+        while (-1 != n) {
+            output.write(buffer, 0, n);
+            total += n;
+            n = input.read(buffer);
+        }
+        output.flush();
+        return total;
+    }
+
+
     /**
      * Forces any updates to this channel's file to be written to the storage device that contains it.
      *
