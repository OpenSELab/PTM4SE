diff --git a/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java
index 8fe24c5..e7a094f 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java
@@ -481,8 +481,12 @@ public class AggregateProcessor extends ServiceSupport implements AsyncProcessor
         }
         aggregated.setProperty(Exchange.AGGREGATED_CORRELATION_KEY, key);
 
-        // remove from repository as its completed, we do this first as to trigger any OptimisticLockingException's
-        aggregationRepository.remove(aggregated.getContext(), key, original);
+        // only remove if we have previous added (as we could potentially complete with only 1 exchange)
+        // (if we have previous added then we have that as the original exchange)
+        if (original != null) {
+            // remove from repository as its completed, we do this first as to trigger any OptimisticLockingException's
+            aggregationRepository.remove(aggregated.getContext(), key, original);
+        }
 
         if (!fromTimeout && timeoutMap != null) {
             // cleanup timeout map if it was a incoming exchange which triggered the timeout (and not the timeout checker)
diff --git a/camel-core/src/main/java/org/apache/camel/spi/AggregationRepository.java b/camel-core/src/main/java/org/apache/camel/spi/AggregationRepository.java
index 669a956..ba1de6a 100644
--- a/camel-core/src/main/java/org/apache/camel/spi/AggregationRepository.java
+++ b/camel-core/src/main/java/org/apache/camel/spi/AggregationRepository.java
@@ -32,6 +32,9 @@ public interface AggregationRepository {
      * Add the given {@link Exchange} under the correlation key.
      * <p/>
      * Will replace any existing exchange.
+     * <p/>
+     * <b>Important:</b> This method is <b>not</b> invoked if only one exchange was completed, and therefore
+     * the exchange does not need to be added to a repository, as its completed immediately.
      *
      * @param camelContext   the current CamelContext
      * @param key            the correlation key
@@ -42,6 +45,8 @@ public interface AggregationRepository {
 
     /**
      * Gets the given exchange with the correlation key
+     * <p/>
+     * This method is always invoked for any incoming exchange in the aggregator.
      *
      * @param camelContext   the current CamelContext
      * @param key            the correlation key
@@ -52,6 +57,9 @@ public interface AggregationRepository {
     /**
      * Removes the exchange with the given correlation key, which should happen
      * when an {@link Exchange} is completed
+     * <p/>
+     * <b>Important:</b> This method is <b>not</b> invoked if only one exchange was completed, and therefore
+     * the exchange does not need to be added to a repository, as its completed immediately.
      *
      * @param camelContext   the current CamelContext
      * @param key            the correlation key
@@ -61,6 +69,8 @@ public interface AggregationRepository {
 
     /**
      * Confirms the completion of the {@link Exchange}.
+     * <p/>
+     * This method is always invoked.
      *
      * @param camelContext  the current CamelContext
      * @param exchangeId    exchange id to confirm
