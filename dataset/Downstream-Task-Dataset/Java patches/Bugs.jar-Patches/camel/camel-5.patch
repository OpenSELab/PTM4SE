diff --git a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
index fcb8bfc..bdee56f 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java
@@ -174,10 +174,16 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
 
         // multicast uses fine grained error handling on the output processors
         // so use try .. catch to cater for this
+        boolean exhaust = false;
         try {
             boolean sync = true;
 
             pairs = createProcessorExchangePairs(exchange);
+
+            // after we have created the processors we consider the exchange as exhausted if an unhandled
+            // exception was thrown, (used in the catch block)
+            exhaust = true;
+
             if (isParallelProcessing()) {
                 // ensure an executor is set when running in parallel
                 ObjectHelper.notNull(executorService, "executorService", this);
@@ -194,14 +200,14 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
         } catch (Throwable e) {
             exchange.setException(e);
             // and do the done work
-            doDone(exchange, null, callback, true);
+            doDone(exchange, null, callback, true, exhaust);
             return true;
         }
 
         // multicasting was processed successfully
         // and do the done work
         Exchange subExchange = result.get() != null ? result.get() : null;
-        doDone(exchange, subExchange, callback, true);
+        doDone(exchange, subExchange, callback, true, exhaust);
         return true;
     }
 
@@ -455,7 +461,7 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
                             result.set(subExchange);
                         }
                         // and do the done work
-                        doDone(original, subExchange, callback, false);
+                        doDone(original, subExchange, callback, false, true);
                         return;
                     }
 
@@ -465,7 +471,7 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
                         // wrap in exception to explain where it failed
                         subExchange.setException(new CamelExchangeException("Sequential processing failed for number " + total, subExchange, e));
                         // and do the done work
-                        doDone(original, subExchange, callback, false);
+                        doDone(original, subExchange, callback, false, true);
                         return;
                     }
 
@@ -501,7 +507,7 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
                                 result.set(subExchange);
                             }
                             // and do the done work
-                            doDone(original, subExchange, callback, false);
+                            doDone(original, subExchange, callback, false, true);
                             return;
                         }
 
@@ -511,7 +517,7 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
                             // wrap in exception to explain where it failed
                             subExchange.setException(new CamelExchangeException("Sequential processing failed for number " + total, subExchange, e));
                             // and do the done work
-                            doDone(original, subExchange, callback, false);
+                            doDone(original, subExchange, callback, false, true);
                             return;
                         }
 
@@ -520,7 +526,7 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
 
                     // do the done work
                     subExchange = result.get() != null ? result.get() : null;
-                    doDone(original, subExchange, callback, false);
+                    doDone(original, subExchange, callback, false, true);
                 }
             });
         } finally {
@@ -589,15 +595,16 @@ public class MulticastProcessor extends ServiceSupport implements AsyncProcessor
      * @param subExchange the current sub exchange, can be <tt>null</tt> for the synchronous part
      * @param callback    the callback
      * @param doneSync    the <tt>doneSync</tt> parameter to call on callback
+     * @param exhaust     whether or not error handling is exhausted
      */
-    protected void doDone(Exchange original, Exchange subExchange, AsyncCallback callback, boolean doneSync) {
+    protected void doDone(Exchange original, Exchange subExchange, AsyncCallback callback, boolean doneSync, boolean exhaust) {
         // cleanup any per exchange aggregation strategy
         removeAggregationStrategyFromExchange(original);
         if (original.getException() != null) {
             // multicast uses error handling on its output processors and they have tried to redeliver
             // so we shall signal back to the other error handlers that we are exhausted and they should not
             // also try to redeliver as we will then do that twice
-            original.setProperty(Exchange.REDELIVERY_EXHAUSTED, Boolean.TRUE);
+            original.setProperty(Exchange.REDELIVERY_EXHAUSTED, exhaust);
         }
         if (subExchange != null) {
             // and copy the current result to original so it will contain this exception
