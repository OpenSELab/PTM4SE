diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java
index c8452fd..02130d2 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java
@@ -484,22 +484,32 @@ public abstract class GenericFileConsumer<T> extends ScheduledBatchPollingConsum
             return false;
         }
 
-        // if its a file then check we have the file in the idempotent registry already
-        if (!isDirectory && endpoint.isIdempotent()) {
-            // use absolute file path as default key, but evaluate if an expression key was configured
-            String key = file.getAbsoluteFilePath();
-            if (endpoint.getIdempotentKey() != null) {
-                Exchange dummy = endpoint.createExchange(file);
-                key = endpoint.getIdempotentKey().evaluate(dummy, String.class);
+        boolean answer = true;
+        String key = null;
+        try {
+            // if its a file then check we have the file in the idempotent registry already
+            if (!isDirectory && endpoint.isIdempotent()) {
+                // use absolute file path as default key, but evaluate if an expression key was configured
+                key = file.getAbsoluteFilePath();
+                if (endpoint.getIdempotentKey() != null) {
+                    Exchange dummy = endpoint.createExchange(file);
+                    key = endpoint.getIdempotentKey().evaluate(dummy, String.class);
+                }
+                if (key != null && endpoint.getIdempotentRepository().contains(key)) {
+                    log.trace("This consumer is idempotent and the file has been consumed before. Will skip this file: {}", file);
+                    answer = false;
+                }
             }
-            if (key != null && endpoint.getIdempotentRepository().contains(key)) {
-                log.trace("This consumer is idempotent and the file has been consumed before. Will skip this file: {}", file);
-                return false;
+        } finally {
+            // ensure to run this in finally block in case of runtime exceptions being thrown
+            if (!answer) {
+                // remove file from the in progress list as its no longer in progress
+                endpoint.getInProgressRepository().remove(key);
             }
         }
 
         // file matched
-        return true;
+        return answer;
     }
 
     /**
@@ -607,6 +617,7 @@ public abstract class GenericFileConsumer<T> extends ScheduledBatchPollingConsum
      */
     protected boolean isInProgress(GenericFile<T> file) {
         String key = file.getAbsoluteFilePath();
+        // must use add, to have operation as atomic
         return !endpoint.getInProgressRepository().add(key);
     }
 
