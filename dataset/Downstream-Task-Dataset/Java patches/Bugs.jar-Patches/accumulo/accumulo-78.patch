diff --git a/core/src/main/java/org/apache/accumulo/core/data/Mutation.java b/core/src/main/java/org/apache/accumulo/core/data/Mutation.java
index 0861cc4..81ad531 100644
--- a/core/src/main/java/org/apache/accumulo/core/data/Mutation.java
+++ b/core/src/main/java/org/apache/accumulo/core/data/Mutation.java
@@ -191,6 +191,20 @@ public class Mutation implements Writable {
     }
   }
 
+  /* This is so hashCode & equals can be called without changing this object.
+   *
+   * It will return a copy of the current data buffer if serialized has not been
+   * called previously. Otherwise, this.data will be returned since the buffer is
+   * null and will not change.
+   */
+  private byte[] serializedSnapshot() {
+    if (buffer != null) {
+      return buffer.toArray();
+    } else {
+      return this.data;
+    }
+  }
+
   /**
    * @since 1.5.0
    */
@@ -691,13 +705,13 @@ public class Mutation implements Writable {
 
   @Override
   public int hashCode() {
-    return toThrift().hashCode();
+    return toThrift(false).hashCode();
   }
 
   public boolean equals(Mutation m) {
-    serialize();
-    m.serialize();
-    if (Arrays.equals(row, m.row) && entries == m.entries && Arrays.equals(data, m.data)) {
+    byte[] myData = serializedSnapshot();
+    byte[] otherData = m.serializedSnapshot();
+    if (Arrays.equals(row, m.row) && entries == m.entries && Arrays.equals(myData, otherData)) {
       if (values == null && m.values == null)
         return true;
 
@@ -716,7 +730,17 @@ public class Mutation implements Writable {
   }
 
   public TMutation toThrift() {
-    serialize();
+    return toThrift(true);
+  }
+
+  private TMutation toThrift(boolean serialize) {
+    byte[] data;
+    if (serialize) {
+      this.serialize();
+      data = this.data;
+    } else {
+      data = serializedSnapshot();
+    }
     return new TMutation(java.nio.ByteBuffer.wrap(row), java.nio.ByteBuffer.wrap(data), ByteBufferUtil.toByteBuffers(values), entries);
   }
 
