diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapred/AbstractInputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapred/AbstractInputFormat.java
index c89c5d7..eaf99cb 100644
--- a/core/src/main/java/org/apache/accumulo/core/client/mapred/AbstractInputFormat.java
+++ b/core/src/main/java/org/apache/accumulo/core/client/mapred/AbstractInputFormat.java
@@ -371,6 +371,8 @@ public abstract class AbstractInputFormat<K,V> implements InputFormat<K,V> {
         log.debug("Authorizations are: " + authorizations);
         if (tableConfig.isOfflineScan()) {
           scanner = new OfflineScanner(instance, new Credentials(principal, token), split.getTableId(), authorizations);
+        } else if (instance instanceof MockInstance) {
+          scanner = instance.getConnector(principal, token).createScanner(split.getTableName(), authorizations);
         } else {
           scanner = new ScannerImpl(instance, new Credentials(principal, token), split.getTableId(), authorizations);
         }
@@ -382,7 +384,7 @@ public abstract class AbstractInputFormat<K,V> implements InputFormat<K,V> {
           log.info("Using local iterators");
           scanner = new ClientSideIteratorScanner(scanner);
         }
-        setupIterators(job, scanner, split.getTableId());
+        setupIterators(job, scanner, split.getTableName());
       } catch (Exception e) {
         throw new IOException(e);
       }
@@ -460,7 +462,11 @@ public abstract class AbstractInputFormat<K,V> implements InputFormat<K,V> {
       TabletLocator tl;
       try {
         // resolve table name to id once, and use id from this point forward
-        tableId = Tables.getTableId(getInstance(job), tableName);
+        Instance instance = getInstance(job);
+        if (instance instanceof MockInstance)
+          tableId = "";
+        else
+          tableId = Tables.getTableId(instance, tableName);
         if (tableConfig.isOfflineScan()) {
           binnedRanges = binOfflineTable(job, tableId, ranges);
           while (binnedRanges == null) {
@@ -469,7 +475,6 @@ public abstract class AbstractInputFormat<K,V> implements InputFormat<K,V> {
             binnedRanges = binOfflineTable(job, tableId, ranges);
           }
         } else {
-          Instance instance = getInstance(job);
           tl = getTabletLocator(job, tableId);
           // its possible that the cache could contain complete, but old information about a tables tablets... so clear it
           tl.invalidateCache();
diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
index 74f8f8b..d426caf 100644
--- a/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
+++ b/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AbstractInputFormat.java
@@ -386,6 +386,8 @@ public abstract class AbstractInputFormat<K,V> extends InputFormat<K,V> {
         log.debug("Authorizations are: " + authorizations);
         if (tableConfig.isOfflineScan()) {
           scanner = new OfflineScanner(instance, new Credentials(principal, token), split.getTableId(), authorizations);
+        } else if (instance instanceof MockInstance) {
+          scanner = instance.getConnector(principal, token).createScanner(split.getTableName(), authorizations);
         } else {
           scanner = new ScannerImpl(instance, new Credentials(principal, token), split.getTableId(), authorizations);
         }
@@ -397,7 +399,7 @@ public abstract class AbstractInputFormat<K,V> extends InputFormat<K,V> {
           log.info("Using local iterators");
           scanner = new ClientSideIteratorScanner(scanner);
         }
-        setupIterators(attempt, scanner, split.getTableId());
+        setupIterators(attempt, scanner, split.getTableName());
       } catch (Exception e) {
         throw new IOException(e);
       }
@@ -488,7 +490,11 @@ public abstract class AbstractInputFormat<K,V> extends InputFormat<K,V> {
       TabletLocator tl;
       try {
         // resolve table name to id once, and use id from this point forward
-        tableId = Tables.getTableId(getInstance(context), tableName);
+        Instance instance = getInstance(context);
+        if (instance instanceof MockInstance)
+          tableId = "";
+        else
+          tableId = Tables.getTableId(instance, tableName);
         if (tableConfig.isOfflineScan()) {
           binnedRanges = binOfflineTable(context, tableId, ranges);
           while (binnedRanges == null) {
@@ -498,7 +504,6 @@ public abstract class AbstractInputFormat<K,V> extends InputFormat<K,V> {
 
           }
         } else {
-          Instance instance = getInstance(context);
           tl = getTabletLocator(context, tableId);
           // its possible that the cache could contain complete, but old information about a tables tablets... so clear it
           tl.invalidateCache();
