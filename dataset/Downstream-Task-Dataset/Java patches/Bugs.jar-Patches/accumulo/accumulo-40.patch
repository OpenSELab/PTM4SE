diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsHelper.java b/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsHelper.java
index b533beb..dfb75ba 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsHelper.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsHelper.java
@@ -48,6 +48,8 @@ public abstract class TableOperationsHelper implements TableOperations {
   @Override
   public void removeIterator(String tableName, String name, EnumSet<IteratorScope> scopes) throws AccumuloSecurityException, AccumuloException,
       TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(null, tableName, null);
     Map<String,String> copy = new HashMap<String,String>();
     for (Entry<String,String> property : this.getProperties(tableName)) {
       copy.put(property.getKey(), property.getValue());
@@ -64,6 +66,8 @@ public abstract class TableOperationsHelper implements TableOperations {
   @Override
   public IteratorSetting getIteratorSetting(String tableName, String name, IteratorScope scope) throws AccumuloSecurityException, AccumuloException,
       TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(null, tableName, null);
     int priority = -1;
     String classname = null;
     Map<String,String> settings = new HashMap<String,String>();
@@ -90,6 +94,8 @@ public abstract class TableOperationsHelper implements TableOperations {
   
   @Override
   public Set<String> listIterators(String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(null, tableName, null);
     Set<String> result = new HashSet<String>();
     Set<String> lifecycles = new HashSet<String>();
     for (IteratorScope scope : IteratorScope.values())
@@ -107,6 +113,8 @@ public abstract class TableOperationsHelper implements TableOperations {
   
   @Override
   public void checkIteratorConflicts(String tableName, IteratorSetting setting) throws AccumuloException, TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(null, tableName, null);
     for (IteratorScope scope : setting.getScopes()) {
       String scopeStr = String.format("%s%s", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase());
       String nameStr = String.format("%s.%s", scopeStr, setting.getName());
diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
index 4353ab1..f2f32df 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
@@ -82,6 +82,8 @@ public class MockTableOperations extends TableOperationsHelper {
     if (!tableName.matches(Constants.VALID_TABLE_NAME_REGEX)) {
       throw new IllegalArgumentException();
     }
+    if (exists(tableName))
+      throw new TableExistsException(tableName, tableName, "");
     acu.createTable(username, tableName, versioningIter, timeType);
   }
   
@@ -91,30 +93,42 @@ public class MockTableOperations extends TableOperationsHelper {
   @Override
   public void addAggregators(String tableName, List<? extends PerColumnIteratorConfig> aggregators) throws AccumuloSecurityException, TableNotFoundException,
       AccumuloException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(tableName, tableName, "");
     acu.addAggregators(tableName, aggregators);
   }
   
   @Override
-  public void addSplits(String tableName, SortedSet<Text> partitionKeys) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {}
+  public void addSplits(String tableName, SortedSet<Text> partitionKeys) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
+    throw new NotImplementedException();
+  }
   
   @Override
-  public Collection<Text> getSplits(String tableName) {
+  public Collection<Text> getSplits(String tableName) throws TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(tableName, tableName, "");
     return Collections.emptyList();
   }
   
   @Override
-  public Collection<Text> getSplits(String tableName, int maxSplits) {
-    return Collections.emptyList();
+  public Collection<Text> getSplits(String tableName, int maxSplits) throws TableNotFoundException {
+    return getSplits(tableName);
   }
   
   @Override
   public void delete(String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(tableName, tableName, "");
     acu.tables.remove(tableName);
   }
   
   @Override
   public void rename(String oldTableName, String newTableName) throws AccumuloSecurityException, TableNotFoundException, AccumuloException,
       TableExistsException {
+    if (!exists(oldTableName))
+      throw new TableNotFoundException(oldTableName, oldTableName, "");
+    if (exists(newTableName))
+      throw new TableExistsException(newTableName, newTableName, "");
     MockTable t = acu.tables.remove(oldTableName);
     acu.tables.put(newTableName, t);
   }
@@ -134,15 +148,19 @@ public class MockTableOperations extends TableOperationsHelper {
   
   @Override
   public Iterable<Entry<String,String>> getProperties(String tableName) throws TableNotFoundException {
+    if (!exists(tableName))
+      throw new TableNotFoundException(tableName, tableName, "");
     return acu.tables.get(tableName).settings.entrySet();
   }
   
   @Override
-  public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {}
+  public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
+    throw new NotImplementedException();
+  }
   
   @Override
   public Map<String,Set<Text>> getLocalityGroups(String tableName) throws AccumuloException, TableNotFoundException {
-    return null;
+    throw new NotImplementedException();
   }
   
   @Override
@@ -164,13 +182,17 @@ public class MockTableOperations extends TableOperationsHelper {
   }
   
   @Override
-  public void offline(String tableName) throws AccumuloSecurityException, AccumuloException {}
+  public void offline(String tableName) throws AccumuloSecurityException, AccumuloException {
+    throw new NotImplementedException();
+  }
   
   @Override
   public void online(String tableName) throws AccumuloSecurityException, AccumuloException {}
   
   @Override
-  public void clearLocatorCache(String tableName) throws TableNotFoundException {}
+  public void clearLocatorCache(String tableName) throws TableNotFoundException {
+    throw new NotImplementedException();
+  }
   
   @Override
   public Map<String,String> tableIdMap() {
