diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java
index da6e380..f9796b4 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java
@@ -25,7 +25,8 @@ import org.apache.commons.math.util.FastMath;
 /**
  * Returns the product of the available values.
  * <p>
- * If there are no values in the dataset, or any of the values are
+ * If there are no values in the dataset, then 1 is returned.
+ *  If any of the values are
  * <code>NaN</code>, then <code>NaN</code> is returned.</p>
  * <p>
  * <strong>Note that this implementation is not synchronized.</strong> If
@@ -53,7 +54,7 @@ public class Product extends AbstractStorelessUnivariateStatistic implements Ser
      */
     public Product() {
         n = 0;
-        value = Double.NaN;
+        value = 1;
     }
 
     /**
@@ -71,11 +72,7 @@ public class Product extends AbstractStorelessUnivariateStatistic implements Ser
      */
     @Override
     public void increment(final double d) {
-        if (n == 0) {
-            value = d;
-        } else {
-            value *= d;
-        }
+        value *= d;
         n++;
     }
 
@@ -99,7 +96,7 @@ public class Product extends AbstractStorelessUnivariateStatistic implements Ser
      */
     @Override
     public void clear() {
-        value = Double.NaN;
+        value = 1;
         n = 0;
     }
 
@@ -113,14 +110,14 @@ public class Product extends AbstractStorelessUnivariateStatistic implements Ser
      * @param values the input array
      * @param begin index of the first array element to include
      * @param length the number of elements to include
-     * @return the product of the values or Double.NaN if length = 0
+     * @return the product of the values or 1 if length = 0
      * @throws IllegalArgumentException if the array is null or the array index
      *  parameters are not valid
      */
     @Override
     public double evaluate(final double[] values, final int begin, final int length) {
         double product = Double.NaN;
-        if (test(values, begin, length)) {
+        if (test(values, begin, length, true)) {
             product = 1.0;
             for (int i = begin; i < begin + length; i++) {
                 product *= values[i];
@@ -153,14 +150,14 @@ public class Product extends AbstractStorelessUnivariateStatistic implements Ser
      * @param weights the weights array
      * @param begin index of the first array element to include
      * @param length the number of elements to include
-     * @return the product of the values or Double.NaN if length = 0
+     * @return the product of the values or 1 if length = 0
      * @throws IllegalArgumentException if the parameters are not valid
      * @since 2.1
      */
     public double evaluate(final double[] values, final double[] weights,
                            final int begin, final int length) {
         double product = Double.NaN;
-        if (test(values, weights, begin, length)) {
+        if (test(values, weights, begin, length, true)) {
             product = 1.0;
             for (int i = begin; i < begin + length; i++) {
                 product *= FastMath.pow(values[i], weights[i]);
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java
index 2b0fd9b..3543575 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java
@@ -24,7 +24,8 @@ import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStati
 /**
   * Returns the sum of the available values.
  * <p>
- * If there are no values in the dataset, or any of the values are
+ * If there are no values in the dataset, then 0 is returned. 
+ * If any of the values are
  * <code>NaN</code>, then <code>NaN</code> is returned.</p>
  * <p>
  * <strong>Note that this implementation is not synchronized.</strong> If
@@ -52,7 +53,7 @@ public class Sum extends AbstractStorelessUnivariateStatistic implements Seriali
      */
     public Sum() {
         n = 0;
-        value = Double.NaN;
+        value = 0;
     }
 
     /**
@@ -70,11 +71,7 @@ public class Sum extends AbstractStorelessUnivariateStatistic implements Seriali
      */
     @Override
     public void increment(final double d) {
-        if (n == 0) {
-            value = d;
-        } else {
-            value += d;
-        }
+        value += d;
         n++;
     }
 
@@ -98,13 +95,13 @@ public class Sum extends AbstractStorelessUnivariateStatistic implements Seriali
      */
     @Override
     public void clear() {
-        value = Double.NaN;
+        value = 0;
         n = 0;
     }
 
     /**
      * The sum of the entries in the specified portion of
-     * the input array, or <code>Double.NaN</code> if the designated subarray
+     * the input array, or 0 if the designated subarray
      * is empty.
      * <p>
      * Throws <code>IllegalArgumentException</code> if the array is null.</p>
@@ -112,14 +109,14 @@ public class Sum extends AbstractStorelessUnivariateStatistic implements Seriali
      * @param values the input array
      * @param begin index of the first array element to include
      * @param length the number of elements to include
-     * @return the sum of the values or Double.NaN if length = 0
+     * @return the sum of the values or 0 if length = 0
      * @throws IllegalArgumentException if the array is null or the array index
      *  parameters are not valid
      */
     @Override
     public double evaluate(final double[] values, final int begin, final int length) {
         double sum = Double.NaN;
-        if (test(values, begin, length)) {
+        if (test(values, begin, length, true)) {
             sum = 0.0;
             for (int i = begin; i < begin + length; i++) {
                 sum += values[i];
@@ -130,7 +127,7 @@ public class Sum extends AbstractStorelessUnivariateStatistic implements Seriali
 
     /**
      * The weighted sum of the entries in the specified portion of
-     * the input array, or <code>Double.NaN</code> if the designated subarray
+     * the input array, or 0 if the designated subarray
      * is empty.
      * <p>
      * Throws <code>IllegalArgumentException</code> if any of the following are true:
@@ -151,14 +148,14 @@ public class Sum extends AbstractStorelessUnivariateStatistic implements Seriali
      * @param weights the weights array
      * @param begin index of the first array element to include
      * @param length the number of elements to include
-     * @return the sum of the values or Double.NaN if length = 0
+     * @return the sum of the values or 0 if length = 0
      * @throws IllegalArgumentException if the parameters are not valid
      * @since 2.1
      */
     public double evaluate(final double[] values, final double[] weights,
                            final int begin, final int length) {
         double sum = Double.NaN;
-        if (test(values, weights, begin, length)) {
+        if (test(values, weights, begin, length, true)) {
             sum = 0.0;
             for (int i = begin; i < begin + length; i++) {
                 sum += values[i] * weights[i];
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java
index b4280cc..24960e3 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java
@@ -24,7 +24,7 @@ import org.apache.commons.math.util.FastMath;
 /**
  * Returns the sum of the natural logs for this collection of values.
  * <p>
- * Uses {@link java.lang.Math#log(double)} to compute the logs.  Therefore,
+ * Uses {@link org.apache.commons.Math.util.FastMath#log(double)} to compute the logs.  Therefore,
  * <ul>
  * <li>If any of values are < 0, the result is <code>NaN.</code></li>
  * <li>If all values are non-negative and less than
@@ -87,11 +87,7 @@ public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements S
      */
     @Override
     public double getResult() {
-        if (n > 0) {
-            return value;
-        } else {
-            return Double.NaN;
-        }
+        return value;
     }
 
     /**
@@ -122,7 +118,7 @@ public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements S
      * @param values the input array
      * @param begin index of the first array element to include
      * @param length the number of elements to include
-     * @return the sum of the natural logs of the values or Double.NaN if
+     * @return the sum of the natural logs of the values or 0 if
      * length = 0
      * @throws IllegalArgumentException if the array is null or the array index
      *  parameters are not valid
@@ -130,7 +126,7 @@ public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements S
     @Override
     public double evaluate(final double[] values, final int begin, final int length) {
         double sumLog = Double.NaN;
-        if (test(values, begin, length)) {
+        if (test(values, begin, length, true)) {
             sumLog = 0.0;
             for (int i = begin; i < begin + length; i++) {
                 sumLog += FastMath.log(values[i]);
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java
index a1429f9..36a2168 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java
@@ -23,7 +23,8 @@ import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStati
 /**
  * Returns the sum of the squares of the available values.
  * <p>
- * If there are no values in the dataset, or any of the values are
+ * If there are no values in the dataset, then 0 is returned.
+ * If any of the values are
  * <code>NaN</code>, then <code>NaN</code> is returned.</p>
  * <p>
  * <strong>Note that this implementation is not synchronized.</strong> If
@@ -51,7 +52,7 @@ public class SumOfSquares extends AbstractStorelessUnivariateStatistic implement
      */
     public SumOfSquares() {
         n = 0;
-        value = Double.NaN;
+        value = 0;
     }
 
     /**
@@ -69,11 +70,7 @@ public class SumOfSquares extends AbstractStorelessUnivariateStatistic implement
      */
     @Override
     public void increment(final double d) {
-        if (n == 0) {
-            value = d * d;
-        } else {
-            value += d * d;
-        }
+        value += d * d;
         n++;
     }
 
@@ -97,7 +94,7 @@ public class SumOfSquares extends AbstractStorelessUnivariateStatistic implement
      */
     @Override
     public void clear() {
-        value = Double.NaN;
+        value = 0;
         n = 0;
     }
 
@@ -111,14 +108,14 @@ public class SumOfSquares extends AbstractStorelessUnivariateStatistic implement
      * @param values the input array
      * @param begin index of the first array element to include
      * @param length the number of elements to include
-     * @return the sum of the squares of the values or Double.NaN if length = 0
+     * @return the sum of the squares of the values or 0 if length = 0
      * @throws IllegalArgumentException if the array is null or the array index
      *  parameters are not valid
      */
     @Override
     public double evaluate(final double[] values,final int begin, final int length) {
         double sumSq = Double.NaN;
-        if (test(values, begin, length)) {
+        if (test(values, begin, length, true)) {
             sumSq = 0.0;
             for (int i = begin; i < begin + length; i++) {
                 sumSq += values[i] * values[i];
