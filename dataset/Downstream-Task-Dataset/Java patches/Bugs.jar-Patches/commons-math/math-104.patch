diff --git a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java
index cfec8ca..c5c14a9 100644
--- a/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java
+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java
@@ -116,6 +116,7 @@ public enum LocalizedFormats implements Localizable {
     INDEX_OUT_OF_RANGE("index {0} out of allowed range [{1}, {2}]"),
     INDEX("index ({0})"), /* keep */
     NOT_FINITE_NUMBER("{0} is not a finite number"), /* keep */
+    INFINITE_BOUND("interval bounds must be finite"),
     ARRAY_ELEMENT("value {0} at index {1}"), /* keep */
     INFINITE_ARRAY_ELEMENT("Array contains an infinite element, {0} at index {1}"),
     INFINITE_VALUE_CONVERSION("cannot convert infinite value"),
@@ -240,6 +241,7 @@ public enum LocalizedFormats implements Localizable {
     NO_REGRESSORS("Regression model must include at least one regressor"),
     NO_RESULT_AVAILABLE("no result available"),
     NO_SUCH_MATRIX_ENTRY("no entry at indices ({0}, {1}) in a {2}x{3} matrix"),
+    NAN_NOT_ALLOWED("NaN is not allowed"),
     NULL_NOT_ALLOWED("null is not allowed"), /* keep */
     ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED("A null or zero length array not allowed"),
     COVARIANCE_MATRIX("covariance matrix"), /* keep */
diff --git a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java
index 0fda688..16d655b 100644
--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java
+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java
@@ -36,6 +36,7 @@ import org.apache.commons.math.distribution.PascalDistribution;
 import org.apache.commons.math.distribution.TDistribution;
 import org.apache.commons.math.distribution.WeibullDistribution;
 import org.apache.commons.math.distribution.ZipfDistribution;
+import org.apache.commons.math.exception.MathIllegalArgumentException;
 import org.apache.commons.math.exception.MathInternalError;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.NumberIsTooLargeException;
@@ -250,7 +251,8 @@ public class RandomDataImpl implements RandomData, Serializable {
                                                 lower, upper, false);
         }
         double r = getRan().nextDouble();
-        return (int) ((r * upper) + ((1.0 - r) * lower) + r);
+        double scaled = r * upper + (1.0 - r) * lower + r;
+        return (int)FastMath.floor(scaled);
     }
 
     /**
@@ -270,7 +272,8 @@ public class RandomDataImpl implements RandomData, Serializable {
                                                 lower, upper, false);
         }
         double r = getRan().nextDouble();
-        return (long) ((r * upper) + ((1.0 - r) * lower) + r);
+        double scaled = r * upper + (1.0 - r) * lower + r;
+        return (long)FastMath.floor(scaled);
     }
 
     /**
@@ -361,7 +364,9 @@ public class RandomDataImpl implements RandomData, Serializable {
                                                 lower, upper, false);
         }
         SecureRandom sec = getSecRan();
-        return lower + (int) (sec.nextDouble() * (upper - lower + 1));
+        double r = sec.nextDouble();
+        double scaled = r * upper + (1.0 - r) * lower + r;
+        return (int)FastMath.floor(scaled);
     }
 
     /**
@@ -382,7 +387,9 @@ public class RandomDataImpl implements RandomData, Serializable {
                                                 lower, upper, false);
         }
         SecureRandom sec = getSecRan();
-        return lower + (long) (sec.nextDouble() * (upper - lower + 1));
+        double r = sec.nextDouble();
+        double scaled = r * upper + (1.0 - r) * lower + r;
+        return (long)FastMath.floor(scaled);
     }
 
     /**
@@ -579,19 +586,26 @@ public class RandomDataImpl implements RandomData, Serializable {
      * provide a symmetric output interval (both endpoints excluded).
      * </p>
      *
-     * @param lower
-     *            the lower bound.
-     * @param upper
-     *            the upper bound.
-     * @return a uniformly distributed random value from the interval (lower,
-     *         upper)
-     * @throws NumberIsTooLargeException if {@code lower >= upper}.
+     * @param lower the lower bound.
+     * @param upper the upper bound.
+     * @return a uniformly distributed random value from the interval (lower, upper)
+     * @throws MathIllegalArgumentException if {@code lower >= upper}
+     * or either bound is infinite or NaN
      */
     public double nextUniform(double lower, double upper) {
         if (lower >= upper) {
-            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
-                                                lower, upper, false);
+            throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
+                                                lower, upper);
+        }
+
+        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {
+            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);
         }
+
+        if (Double.isNaN(lower) || Double.isNaN(upper)) {
+            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);
+        }
+
         final RandomGenerator generator = getRan();
 
         // ensure nextDouble() isn't 0.0
@@ -600,7 +614,7 @@ public class RandomDataImpl implements RandomData, Serializable {
             u = generator.nextDouble();
         }
 
-        return lower + u * (upper - lower);
+        return u * upper + (1.0 - u) * lower;
     }
 
     /**
