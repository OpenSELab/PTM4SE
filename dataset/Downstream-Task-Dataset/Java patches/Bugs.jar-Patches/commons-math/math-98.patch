diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java
index 42796c7..baf236a 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java
@@ -48,7 +48,7 @@ class ClassicalRungeKuttaStepInterpolator
     extends RungeKuttaStepInterpolator {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
     /** Simple constructor.
      * This constructor builds an instance that is not usable yet, the
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
index af32c4c..1dac8ab 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
@@ -72,7 +72,7 @@ class DormandPrince54StepInterpolator
     private static final double D6 =      69997945.0 /     29380423.0;
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
     /** First vector for interpolation. */
     private double[] v1;
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
index 91442bb..64dd7d7 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
@@ -39,7 +39,7 @@ class DormandPrince853StepInterpolator
   extends RungeKuttaStepInterpolator {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
     /** Propagation weights, element 1. */
     private static final double B_01 =         104257.0 / 1920240.0;
@@ -368,18 +368,34 @@ class DormandPrince853StepInterpolator
     final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));
     final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));
 
-    for (int i = 0; i < interpolatedState.length; ++i) {
-      interpolatedState[i] = currentState[i] -
-                             oneMinusThetaH * (v[0][i] -
-                                               theta * (v[1][i] +
-                                                        theta * (v[2][i] +
-                                                                 eta * (v[3][i] +
-                                                                        theta * (v[4][i] +
-                                                                                 eta * (v[5][i] +
-                                                                                        theta * (v[6][i])))))));
-      interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
-                                    dot3 * v[3][i] + dot4 * v[4][i] +
-                                    dot5 * v[5][i] + dot6 * v[6][i];
+    if ((previousState != null) && (theta <= 0.5)) {
+        for (int i = 0; i < interpolatedState.length; ++i) {
+            interpolatedState[i] = previousState[i] +
+                    theta * h * (v[0][i] +
+                            eta * (v[1][i] +
+                                    theta * (v[2][i] +
+                                            eta * (v[3][i] +
+                                                    theta * (v[4][i] +
+                                                            eta * (v[5][i] +
+                                                                    theta * (v[6][i])))))));
+            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
+                    dot3 * v[3][i] + dot4 * v[4][i] +
+                    dot5 * v[5][i] + dot6 * v[6][i];
+        }
+    } else {
+        for (int i = 0; i < interpolatedState.length; ++i) {
+            interpolatedState[i] = currentState[i] -
+                    oneMinusThetaH * (v[0][i] -
+                            theta * (v[1][i] +
+                                    theta * (v[2][i] +
+                                            eta * (v[3][i] +
+                                                    theta * (v[4][i] +
+                                                            eta * (v[5][i] +
+                                                                    theta * (v[6][i])))))));
+            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
+                    dot3 * v[3][i] + dot4 * v[4][i] +
+                    dot5 * v[5][i] + dot6 * v[6][i];
+        }
     }
 
   }
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 87fd716..34d2c00 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -202,7 +202,7 @@ public abstract class EmbeddedRungeKuttaIntegrator
     final double[] y = y0.clone();
     final int stages = c.length + 1;
     final double[][] yDotK = new double[stages][y.length];
-    final double[] yTmp    = new double[y.length];
+    final double[] yTmp    = y0.clone();
     final double[] yDotTmp = new double[y.length];
 
     // set up an interpolator sharing the integrator arrays
@@ -294,6 +294,7 @@ public abstract class EmbeddedRungeKuttaIntegrator
       System.arraycopy(yTmp, 0, y, 0, y0.length);
       System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
       stepStart = acceptStep(interpolator, y, yDotTmp, t);
+      System.arraycopy(y, 0, yTmp, 0, y.length);
 
       if (!isLastStep) {
 
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
index 99a604f..d2807a4 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
@@ -42,7 +42,7 @@ class EulerStepInterpolator
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier. */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
index e956b20..5377755 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
@@ -54,7 +54,7 @@ class GillStepInterpolator
     private static final double TWO_PLUS_SQRT_2 = 2 + FastMath.sqrt(2.0);
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
index ba112d4..b928b53 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
@@ -33,7 +33,7 @@ class HighamHall54StepInterpolator
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
index 1c76483..25f77c5 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
@@ -44,7 +44,7 @@ class MidpointStepInterpolator
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
index fb82d0c..c51620c 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
@@ -107,7 +107,7 @@ public abstract class RungeKuttaIntegrator extends AbstractIntegrator {
     for (int i = 0; i < stages; ++i) {
       yDotK [i] = new double[y0.length];
     }
-    final double[] yTmp    = new double[y0.length];
+    final double[] yTmp    = y0.clone();
     final double[] yDotTmp = new double[y0.length];
 
     // set up an interpolator sharing the integrator arrays
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java
index 987dfb1..55146c3 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java
@@ -38,6 +38,9 @@ import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
 abstract class RungeKuttaStepInterpolator
   extends AbstractStepInterpolator {
 
+    /** Previous state. */
+    protected double[] previousState;
+
     /** Slopes at the intermediate points */
     protected double[][] yDotK;
 
@@ -55,9 +58,9 @@ abstract class RungeKuttaStepInterpolator
    * uninitialized model and latter initializing the copy.
    */
   protected RungeKuttaStepInterpolator() {
-    super();
-    yDotK      = null;
-    integrator = null;
+    previousState = null;
+    yDotK         = null;
+    integrator    = null;
   }
 
   /** Copy constructor.
@@ -82,16 +85,16 @@ abstract class RungeKuttaStepInterpolator
     super(interpolator);
 
     if (interpolator.currentState != null) {
-      final int dimension = currentState.length;
+
+      previousState = interpolator.previousState.clone();
 
       yDotK = new double[interpolator.yDotK.length][];
       for (int k = 0; k < interpolator.yDotK.length; ++k) {
-        yDotK[k] = new double[dimension];
-        System.arraycopy(interpolator.yDotK[k], 0,
-                         yDotK[k], 0, dimension);
+        yDotK[k] = interpolator.yDotK[k].clone();
       }
 
     } else {
+      previousState = null;
       yDotK = null;
     }
 
@@ -129,12 +132,20 @@ abstract class RungeKuttaStepInterpolator
                            final EquationsMapper primaryMapper,
                            final EquationsMapper[] secondaryMappers) {
     reinitialize(y, forward, primaryMapper, secondaryMappers);
+    this.previousState = null;
     this.yDotK = yDotArray;
     this.integrator = rkIntegrator;
   }
 
   /** {@inheritDoc} */
   @Override
+  public void shift() {
+    previousState = currentState.clone();
+    super.shift();
+  }
+
+  /** {@inheritDoc} */
+  @Override
   public void writeExternal(final ObjectOutput out)
     throws IOException {
 
@@ -143,6 +154,10 @@ abstract class RungeKuttaStepInterpolator
 
     // save the local attributes
     final int n = (currentState == null) ? -1 : currentState.length;
+    for (int i = 0; i < n; ++i) {
+      out.writeDouble(previousState[i]);
+    }
+
     final int kMax = (yDotK == null) ? -1 : yDotK.length;
     out.writeInt(kMax);
     for (int k = 0; k < kMax; ++k) {
@@ -165,6 +180,15 @@ abstract class RungeKuttaStepInterpolator
 
     // read the local attributes
     final int n = (currentState == null) ? -1 : currentState.length;
+    if (n < 0) {
+      previousState = null;
+    } else {
+      previousState = new double[n];
+      for (int i = 0; i < n; ++i) {
+        previousState[i] = in.readDouble();
+      }
+    }
+
     final int kMax = in.readInt();
     yDotK = (kMax < 0) ? null : new double[kMax][];
     for (int k = 0; k < kMax; ++k) {
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
index 731ec44..fdc9d75 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
@@ -49,7 +49,7 @@ class ThreeEighthesStepInterpolator
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
