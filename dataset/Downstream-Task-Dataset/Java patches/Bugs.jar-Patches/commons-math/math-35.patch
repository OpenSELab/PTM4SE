diff --git a/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java
index d4b4259..743fe9b 100644
--- a/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java
@@ -19,6 +19,7 @@ package org.apache.commons.math4.optim.linear;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.TooManyIterationsException;
 import org.apache.commons.math4.optim.OptimizationData;
 import org.apache.commons.math4.optim.PointValuePair;
@@ -146,6 +147,8 @@ public class SimplexSolver extends LinearOptimizer {
      *
      * @return {@inheritDoc}
      * @throws TooManyIterationsException if the maximal number of iterations is exceeded.
+     * @throws DimensionMismatchException if the dimension of the constraints does not match the
+     *   dimension of the objective function
      */
     @Override
     public PointValuePair optimize(OptimizationData... optData)
diff --git a/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java
index e869a74..f0a842f 100644
--- a/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java
@@ -28,6 +28,7 @@ import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
 
+import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.linear.Array2DRowRealMatrix;
 import org.apache.commons.math4.linear.MatrixUtils;
 import org.apache.commons.math4.linear.RealVector;
@@ -112,6 +113,8 @@ class SimplexTableau implements Serializable {
      * or {@link GoalType#MINIMIZE}.
      * @param restrictToNonNegative Whether to restrict the variables to non-negative values.
      * @param epsilon Amount of error to accept when checking for optimality.
+     * @throws DimensionMismatchException if the dimension of the constraints does not match the
+     *   dimension of the objective function
      */
     SimplexTableau(final LinearObjectiveFunction f,
                    final Collection<LinearConstraint> constraints,
@@ -129,13 +132,16 @@ class SimplexTableau implements Serializable {
      * @param restrictToNonNegative whether to restrict the variables to non-negative values
      * @param epsilon amount of error to accept when checking for optimality
      * @param maxUlps amount of error to accept in floating point comparisons
+     * @throws DimensionMismatchException if the dimension of the constraints does not match the
+     *   dimension of the objective function
      */
     SimplexTableau(final LinearObjectiveFunction f,
                    final Collection<LinearConstraint> constraints,
                    final GoalType goalType,
                    final boolean restrictToNonNegative,
                    final double epsilon,
-                   final int maxUlps) {
+                   final int maxUlps) throws DimensionMismatchException {
+        checkDimensions(f, constraints);
         this.f                      = f;
         this.constraints            = normalizeConstraints(constraints);
         this.restrictToNonNegative  = restrictToNonNegative;
@@ -154,6 +160,23 @@ class SimplexTableau implements Serializable {
     }
 
     /**
+     * Checks that the dimensions of the objective function and the constraints match.
+     * @param f the objective function
+     * @param constraints the set of constraints
+     * @throws DimensionMismatchException if the constraint dimensions do not match with the
+     *   dimension of the objective function
+     */
+    private void checkDimensions(final LinearObjectiveFunction f,
+                                 final Collection<LinearConstraint> constraints) {
+        final int dimension = f.getCoefficients().getDimension();
+        for (final LinearConstraint constraint : constraints) {
+            final int constraintDimension = constraint.getCoefficients().getDimension();
+            if (constraintDimension != dimension) {
+                throw new DimensionMismatchException(constraintDimension, dimension);
+            }
+        }
+    }
+    /**
      * Initialize the labels for the columns.
      */
     protected void initializeColumnLabels() {
