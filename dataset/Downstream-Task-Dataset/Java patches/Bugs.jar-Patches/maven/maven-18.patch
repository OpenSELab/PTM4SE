diff --git a/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java b/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java
index b44d8d9..0b6eaaf 100644
--- a/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java
+++ b/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java
@@ -21,12 +21,15 @@ package org.apache.maven.settings.validation;
 
 import java.util.List;
 
+import org.apache.maven.settings.Mirror;
 import org.apache.maven.settings.Profile;
 import org.apache.maven.settings.Repository;
+import org.apache.maven.settings.Server;
 import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.building.SettingsProblem;
 import org.apache.maven.settings.building.SettingsProblemCollector;
 import org.codehaus.plexus.component.annotations.Component;
+import org.codehaus.plexus.util.StringUtils;
 
 /**
  * @author Milos Kleint
@@ -36,16 +39,69 @@ public class DefaultSettingsValidator
     implements SettingsValidator
 {
 
+    private static final String ID_REGEX = "[A-Za-z0-9_\\-.]+";
+
     public void validate( Settings settings, SettingsProblemCollector problems )
     {
+        if ( settings.isUsePluginRegistry() )
+        {
+            addWarn( problems, "'usePluginRegistry' is deprecated and has no effect." );
+        }
+
+        List<String> pluginGroups = settings.getPluginGroups();
+
+        if ( pluginGroups != null )
+        {
+            for ( int i = 0; i < pluginGroups.size(); i++ )
+            {
+                String pluginGroup = pluginGroups.get( i ).trim();
+
+                if ( StringUtils.isBlank( pluginGroup ) )
+                {
+                    addError( problems, "'pluginGroups.pluginGroup[" + i + "]' must not be empty." );
+                }
+                else if ( !pluginGroup.matches( ID_REGEX ) )
+                {
+                    addError( problems, "'pluginGroups.pluginGroup[" + i
+                        + "]' must denote a valid group id and match the pattern " + ID_REGEX );
+                }
+            }
+        }
+
+        List<Server> servers = settings.getServers();
+
+        if ( servers != null )
+        {
+            for ( int i = 0; i < servers.size(); i++ )
+            {
+                Server server = servers.get( i );
+
+                validateStringNotEmpty( problems, "servers.server[" + i + "].id", server.getId(), null );
+            }
+        }
+
+        List<Mirror> mirrors = settings.getMirrors();
+
+        if ( mirrors != null )
+        {
+            for ( Mirror mirror : mirrors )
+            {
+                validateStringNotEmpty( problems, "mirrors.mirror.id", mirror.getId(), mirror.getUrl() );
+
+                validateStringNotEmpty( problems, "mirrors.mirror.url", mirror.getUrl(), mirror.getId() );
+
+                validateStringNotEmpty( problems, "mirrors.mirror.mirrorOf", mirror.getMirrorOf(), mirror.getId() );
+            }
+        }
+
         List<Profile> profiles = settings.getProfiles();
 
         if ( profiles != null )
         {
-            for ( Profile prof : profiles )
+            for ( Profile profile : profiles )
             {
-                validateRepositories( problems, prof.getRepositories(), "repositories.repository" );
-                validateRepositories( problems, prof.getPluginRepositories(), "pluginRepositories.pluginRepository" );
+                validateRepositories( problems, profile.getRepositories(), "repositories.repository" );
+                validateRepositories( problems, profile.getPluginRepositories(), "pluginRepositories.pluginRepository" );
             }
         }
     }
@@ -54,9 +110,15 @@ public class DefaultSettingsValidator
     {
         for ( Repository repository : repositories )
         {
-            validateStringNotEmpty( problems, prefix + ".id", repository.getId() );
+            validateStringNotEmpty( problems, prefix + ".id", repository.getId(), repository.getUrl() );
+
+            validateStringNotEmpty( problems, prefix + ".url", repository.getUrl(), repository.getId() );
 
-            validateStringNotEmpty( problems, prefix + ".url", repository.getUrl() );
+            if ( "legacy".equals( repository.getLayout() ) )
+            {
+                addWarn( problems, "'" + prefix + ".layout' for " + repository.getId()
+                    + " uses the deprecated value 'legacy'." );
+            }
         }
     }
 
@@ -64,11 +126,6 @@ public class DefaultSettingsValidator
     // Field validation
     // ----------------------------------------------------------------------
 
-    private boolean validateStringNotEmpty( SettingsProblemCollector problems, String fieldName, String string )
-    {
-        return validateStringNotEmpty( problems, fieldName, string, null );
-    }
-
     /**
      * Asserts:
      * <p/>
@@ -137,4 +194,9 @@ public class DefaultSettingsValidator
         problems.add( SettingsProblem.Severity.ERROR, msg, -1, -1, null );
     }
 
+    private void addWarn( SettingsProblemCollector problems, String msg )
+    {
+        problems.add( SettingsProblem.Severity.WARNING, msg, -1, -1, null );
+    }
+
 }
