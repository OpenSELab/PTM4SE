diff --git a/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java b/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
index 07302e5..350349d 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterException.java
@@ -19,8 +19,10 @@
  * under the License.
  */
 
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.maven.plugin.descriptor.MojoDescriptor;
 import org.apache.maven.plugin.descriptor.Parameter;
@@ -75,12 +77,53 @@ private static void decomposeParameterIntoUserInstructions( MojoDescriptor mojo,
                                                                 StringBuilder messageBuffer )
     {
         String expression = param.getExpression();
-
+        
         if ( param.isEditable() )
         {
-            messageBuffer.append( "Inside the definition for plugin \'" + mojo.getPluginDescriptor().getArtifactId()
-                + "\', specify the following:\n\n<configuration>\n  ...\n  <" + param.getName() + ">VALUE</"
-                + param.getName() + ">\n</configuration>" );
+            boolean isArray = param.getType().endsWith( "[]" );
+            boolean isCollection = false;
+            boolean isMap = false;
+            if ( !isArray )
+            {
+                try
+                {
+                    //assuming Type is available in current ClassLoader
+                    isCollection = Collection.class.isAssignableFrom( Class.forName( param.getType() ) );
+                    isMap = Map.class.isAssignableFrom( Class.forName( param.getType() ) );
+                }
+                catch ( ClassNotFoundException e )
+                {
+                    // assume it is not assignable from Collection or Map
+                }
+            }
+            
+            messageBuffer.append( "Inside the definition for plugin \'");
+            messageBuffer.append( mojo.getPluginDescriptor().getArtifactId() );
+            messageBuffer.append( "\', specify the following:\n\n<configuration>\n  ...\n" );
+            messageBuffer.append( "  <" ).append( param.getName() ).append( '>' );
+            if( isArray || isCollection )
+            {
+                messageBuffer.append(  '\n' );
+                messageBuffer.append( "    <item>" );
+            }
+            else if ( isMap )
+            {
+                messageBuffer.append(  '\n' );
+                messageBuffer.append( "    <KEY>" );
+            }
+            messageBuffer.append( "VALUE" );
+            if( isArray || isCollection )
+            {
+                messageBuffer.append( "</item>\n" );
+                messageBuffer.append( "  " );
+            }    
+            else if ( isMap )
+            {
+                messageBuffer.append( "</KEY>\n" );
+                messageBuffer.append( "  " );
+            }    
+            messageBuffer.append( "</" ).append( param.getName() ).append( ">\n" );
+            messageBuffer.append( "</configuration>" );
 
             String alias = param.getAlias();
             if ( StringUtils.isNotEmpty( alias ) && !alias.equals( param.getName() ) )
