diff --git a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java
index 5d37629..e5b2e1f 100644
--- a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java
+++ b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java
@@ -29,6 +29,7 @@ import org.apache.logging.log4j.message.SimpleMessage;
 import org.apache.logging.log4j.spi.ExtendedLogger;
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
+import org.slf4j.impl.StaticMarkerBinder;
 import org.slf4j.spi.LocationAwareLogger;
 
 /**
@@ -375,7 +376,14 @@ public class Log4jLogger implements LocationAwareLogger, Serializable {
     }
 
     private static org.apache.logging.log4j.Marker getMarker(final Marker marker) {
-        return marker != null ? ((org.apache.logging.slf4j.Log4jMarker) marker).getLog4jMarker() : null;
+        if (marker == null) {
+            return null;
+        } else if (marker instanceof Log4jMarker) {
+            return ((Log4jMarker) marker).getLog4jMarker();
+        } else {
+            final Log4jMarkerFactory factory = (Log4jMarkerFactory) StaticMarkerBinder.SINGLETON.getMarkerFactory();
+            return ((Log4jMarker) factory.getMarker(marker)).getLog4jMarker();
+        }
     }
 
     @Override
diff --git a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java
index 4efd4d1..4183f2c 100644
--- a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java
+++ b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java
@@ -16,6 +16,7 @@
  */
 package org.apache.logging.slf4j;
 
+import java.util.Iterator;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
@@ -24,14 +25,14 @@ import org.slf4j.IMarkerFactory;
 import org.slf4j.Marker;
 
 /**
- *
+ * Log4j/SLF4J bridge to create SLF4J Markers based on name or based on existing SLF4J Markers.
  */
 public class Log4jMarkerFactory implements IMarkerFactory {
 
     private final ConcurrentMap<String, Marker> markerMap = new ConcurrentHashMap<String, Marker>();
 
     /**
-     * Return a Log4j Marker that is compatible with SLF4J.
+     * Returns a Log4j Marker that is compatible with SLF4J.
      * @param name The name of the Marker.
      * @return A Marker.
      */
@@ -45,12 +46,49 @@ public class Log4jMarkerFactory implements IMarkerFactory {
             return marker;
         }
         final org.apache.logging.log4j.Marker log4jMarker = MarkerManager.getMarker(name);
-        marker = new Log4jMarker(log4jMarker);
+        return addMarkerIfAbsent(name, log4jMarker);
+    }
+
+    private Marker addMarkerIfAbsent(final String name, final org.apache.logging.log4j.Marker log4jMarker) {
+        final Marker marker = new Log4jMarker(log4jMarker);
         final Marker existing = markerMap.putIfAbsent(name, marker);
         return existing == null ? marker : existing;
     }
 
     /**
+     * Returns a Log4j Marker converted from an existing custom SLF4J Marker.
+     * @param marker The SLF4J Marker to convert.
+     * @return A converted Log4j/SLF4J Marker.
+     * @since 2.1
+     */
+    public Marker getMarker(final Marker marker) {
+        if (marker == null) {
+            throw new IllegalArgumentException("Marker must not be null");
+        }
+        Marker m = markerMap.get(marker.getName());
+        if (m != null) {
+            return m;
+        }
+        return addMarkerIfAbsent(marker.getName(), convertMarker(marker));
+    }
+
+    private static org.apache.logging.log4j.Marker convertMarker(final Marker original) {
+        if (original == null) {
+            throw new IllegalArgumentException("Marker must not be null");
+        }
+        final org.apache.logging.log4j.Marker marker = MarkerManager.getMarker(original.getName());
+        if (original.hasReferences()) {
+            final Iterator it = original.iterator();
+            while (it.hasNext()) {
+                final Marker next = (Marker) it.next();
+                // kind of hope nobody uses cycles in their Markers. I mean, why would you do that?
+                marker.addParents(convertMarker(next));
+            }
+        }
+        return marker;
+    }
+
+    /**
      * Returns true if the Marker exists.
      * @param name The Marker name.
      * @return true if the Marker exists, false otherwise.
