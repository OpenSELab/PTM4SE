diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
index c928d62..255c73b 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java
@@ -16,6 +16,9 @@
  */
 package org.apache.logging.log4j.core.layout;
 
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
@@ -46,8 +49,8 @@ public abstract class AbstractStringLayout extends AbstractLayout<String> {
     /**
      * The charset for the formatted message.
      */
-    // TODO: Charset is not serializable. Implement read/writeObject() ?
-    private final Charset charset;
+    // LOG4J2-1099: charset cannot be final due to serialization needs, so we serialize as charset name instead
+    private transient Charset charset;
     private final String charsetName;
     private final boolean useCustomEncoding;
 
@@ -97,6 +100,17 @@ public abstract class AbstractStringLayout extends AbstractLayout<String> {
         return null;
     }
 
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeUTF(charset.name());
+    }
+
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        final String charsetName = in.readUTF();
+        charset = Charset.forName(charsetName);
+    }
+
     /**
      * Returns a {@code StringBuilder} that this Layout implementation can use to write the formatted log event to.
      * 
