diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
index b99608c..c832973 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java
@@ -230,10 +230,16 @@ public class AsyncLogger extends Logger {
             info = new Info(new RingBufferLogEventTranslator(), Thread.currentThread().getName(), false);
             threadlocalInfo.set(info);
         }
+        
+        Disruptor<RingBufferLogEvent> temp = disruptor;
+        if (temp == null) { // LOG4J2-639
+            LOGGER.fatal("Ignoring log event after log4j was shut down");
+            return;
+        }
 
         // LOG4J2-471: prevent deadlock when RingBuffer is full and object
         // being logged calls Logger.log() from its toString() method
-        if (info.isAppenderThread && disruptor.getRingBuffer().remainingCapacity() == 0) {
+        if (info.isAppenderThread && temp.getRingBuffer().remainingCapacity() == 0) {
             // bypass RingBuffer and invoke Appender directly
             config.loggerConfig.log(getName(), fqcn, marker, level, message, thrown);
             return;
@@ -266,7 +272,15 @@ public class AsyncLogger extends Logger {
                 // CachedClock: 10% faster than system clock, smaller gaps
                 clock.currentTimeMillis());
 
-        disruptor.publishEvent(info.translator);
+        // LOG4J2-639: catch NPE if disruptor field was set to null after our check above
+        try {
+            // Note: do NOT use the temp variable above!
+            // That could result in adding a log event to the disruptor after it was shut down,
+            // which could cause the publishEvent method to hang and never return.
+            disruptor.publishEvent(info.translator);
+        } catch (NullPointerException npe) {
+            LOGGER.fatal("Ignoring log event after log4j was shut down.");
+        }
     }
 
     private static StackTraceElement location(final String fqcnOfLogger) {
diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java
index 9d2f4f0..2e8814c 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java
@@ -316,16 +316,29 @@ class AsyncLoggerConfigHelper {
      *          calling thread needs to process the event itself
      */
     public boolean callAppendersFromAnotherThread(final LogEvent event) {
+        Disruptor<Log4jEventWrapper> temp = disruptor;
+        if (temp == null) { // LOG4J2-639
+            LOGGER.fatal("Ignoring log event after log4j was shut down");
+            return true;
+        }
 
         // LOG4J2-471: prevent deadlock when RingBuffer is full and object
         // being logged calls Logger.log() from its toString() method
         if (isAppenderThread.get() == Boolean.TRUE //
-                && disruptor.getRingBuffer().remainingCapacity() == 0) {
+                && temp.getRingBuffer().remainingCapacity() == 0) {
 
             // bypass RingBuffer and invoke Appender directly
             return false;
         }
-        disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);
+        // LOG4J2-639: catch NPE if disruptor field was set to null after our check above
+        try {
+            // Note: do NOT use the temp variable above!
+            // That could result in adding a log event to the disruptor after it was shut down,
+            // which could cause the publishEvent method to hang and never return.
+            disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);
+        } catch (NullPointerException npe) {
+            LOGGER.fatal("Ignoring log event after log4j was shut down.");
+        }
         return true;
     }
 
