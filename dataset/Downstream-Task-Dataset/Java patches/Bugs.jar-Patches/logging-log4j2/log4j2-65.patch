diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
index 8178fe2..e470757 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java
@@ -27,6 +27,7 @@ import java.util.concurrent.atomic.AtomicLong;
 import org.apache.logging.log4j.core.Appender;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.async.RingBufferLogEvent;
 import org.apache.logging.log4j.core.config.AppenderControl;
 import org.apache.logging.log4j.core.config.AppenderRef;
 import org.apache.logging.log4j.core.config.Configuration;
@@ -127,12 +128,15 @@ public final class AsyncAppender extends AbstractAppender {
      * @param logEvent The LogEvent.
      */
     @Override
-    public void append(final LogEvent logEvent) {
+    public void append(LogEvent logEvent) {
         if (!isStarted()) {
             throw new IllegalStateException("AsyncAppender " + getName() + " is not active");
         }
         if (!(logEvent instanceof Log4jLogEvent)) {
-            return; // only know how to Serialize Log4jLogEvents
+            if (!(logEvent instanceof RingBufferLogEvent)) {
+                return; // only know how to Serialize Log4jLogEvents and RingBufferLogEvents
+            }
+            logEvent = ((RingBufferLogEvent) logEvent).createMemento();
         }
         Log4jLogEvent coreEvent = (Log4jLogEvent) logEvent;
         boolean appendSuccessful = false;
