diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
index 8490196..c935512 100644
--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java
@@ -37,6 +37,8 @@ import org.apache.logging.log4j.core.config.plugins.PluginManager;
 import org.apache.logging.log4j.core.config.plugins.PluginType;
 import org.apache.logging.log4j.core.helpers.FileUtils;
 import org.apache.logging.log4j.core.helpers.Loader;
+import org.apache.logging.log4j.core.lookup.Interpolator;
+import org.apache.logging.log4j.core.lookup.StrSubstitutor;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.PropertiesUtil;
 
@@ -104,6 +106,8 @@ public abstract class ConfigurationFactory {
 
     private static ConfigurationFactory configFactory = new Factory();
 
+    protected final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator());
+
     /**
      * Returns the ConfigurationFactory.
      * @return the ConfigurationFactory.
@@ -362,10 +366,19 @@ public abstract class ConfigurationFactory {
         public Configuration getConfiguration(final String name, final URI configLocation) {
 
             if (configLocation == null) {
-                final String config = PropertiesUtil.getProperties().getStringProperty(CONFIGURATION_FILE_PROPERTY);
+                final String config = this.substitutor.replace(
+                    PropertiesUtil.getProperties().getStringProperty(CONFIGURATION_FILE_PROPERTY));
                 if (config != null) {
-                    final ClassLoader loader = this.getClass().getClassLoader();
-                    final ConfigurationSource source = getInputFromString(config, loader);
+                    ConfigurationSource source = null;
+                    try {
+                        source = getInputFromURI(new URI(config));
+                    } catch (Exception ex) {
+                        // Ignore the error and try as a String.
+                    }
+                    if (source == null) {
+                        final ClassLoader loader = this.getClass().getClassLoader();
+                        source = getInputFromString(config, loader);
+                    }
                     if (source != null) {
                         for (final ConfigurationFactory factory : factories) {
                             final String[] types = factory.getSupportedTypes();
