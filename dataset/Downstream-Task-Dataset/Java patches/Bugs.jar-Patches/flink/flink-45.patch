diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java
index f825fc6..8549e26 100644
--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java
+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer.java
@@ -58,7 +58,7 @@ import java.util.Objects;
  * @param <T> The type to be serialized.
  */
 public class KryoSerializer<T> extends TypeSerializer<T> {
-	
+
 	private static final long serialVersionUID = 3L;
 
 	// ------------------------------------------------------------------------
@@ -82,7 +82,7 @@ public class KryoSerializer<T> extends TypeSerializer<T> {
 	
 	private transient Input input;
 	private transient Output output;
-	
+
 	// ------------------------------------------------------------------------
 
 	public KryoSerializer(Class<T> type, ExecutionConfig executionConfig){
@@ -182,11 +182,22 @@ public class KryoSerializer<T> extends TypeSerializer<T> {
 			previousOut = target;
 		}
 
+		// Sanity check: Make sure that the output is cleared/has been flushed by the last call
+		// otherwise data might be written multiple times in case of a previous EOFException
+		if (output.position() != 0) {
+			throw new IllegalStateException("The Kryo Output still contains data from a previous " +
+				"serialize call. It has to be flushed or cleared at the end of the serialize call.");
+		}
+
 		try {
 			kryo.writeClassAndObject(output, record);
 			output.flush();
 		}
 		catch (KryoException ke) {
+			// make sure that the Kryo output buffer is cleared in case that we can recover from
+			// the exception (e.g. EOFException which denotes buffer full)
+			output.clear();
+
 			Throwable cause = ke.getCause();
 			if (cause instanceof EOFException) {
 				throw (EOFException) cause;
@@ -212,7 +223,7 @@ public class KryoSerializer<T> extends TypeSerializer<T> {
 		} catch (KryoException ke) {
 			Throwable cause = ke.getCause();
 
-			if(cause instanceof EOFException) {
+			if (cause instanceof EOFException) {
 				throw (EOFException) cause;
 			} else {
 				throw ke;
