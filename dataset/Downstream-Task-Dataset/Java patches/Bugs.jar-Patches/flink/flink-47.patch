diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java
index d8839a0..9c76d95 100644
--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java
+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java
@@ -28,6 +28,8 @@ import org.apache.flink.api.common.typeutils.TypeComparator;
 import org.apache.flink.api.java.functions.KeySelector;
 import org.apache.flink.api.java.operators.Keys;
 import org.apache.flink.api.java.tuple.Tuple;
+import org.apache.flink.api.java.typeutils.ResultTypeQueryable;
+import org.apache.flink.api.java.typeutils.TupleTypeInfo;
 
 /**
  * Utility class that contains helper methods to manipulating {@link KeySelector} for streaming.
@@ -47,12 +49,14 @@ public final class KeySelectorUtil {
 		
 		// use ascending order here, the code paths for that are usually a slight bit faster
 		boolean[] orders = new boolean[numKeyFields];
+		TypeInformation[] typeInfos = new TypeInformation[numKeyFields];
 		for (int i = 0; i < numKeyFields; i++) {
 			orders[i] = true;
+			typeInfos[i] = compositeType.getTypeAt(logicalKeyPositions[i]);
 		}
-		
+
 		TypeComparator<X> comparator = compositeType.createComparator(logicalKeyPositions, orders, 0, executionConfig);
-		return new ComparableKeySelector<X>(comparator, numKeyFields);
+		return new ComparableKeySelector<>(comparator, numKeyFields, new TupleTypeInfo<>(typeInfos));
 	}
 
 	
@@ -70,7 +74,7 @@ public final class KeySelectorUtil {
 
 		TypeComparator<X> comparator = ((CompositeType<X>) typeInfo).createComparator(
 				logicalKeyPositions, new boolean[1], 0, executionConfig);
-		return new OneKeySelector<X, K>(comparator);
+		return new OneKeySelector<>(comparator);
 	}
 
 	/**
@@ -111,21 +115,23 @@ public final class KeySelectorUtil {
 	 *
 	 * @param <IN> The type from which the key is extracted.
 	 */
-	public static final class ComparableKeySelector<IN> implements KeySelector<IN, Tuple> {
+	public static final class ComparableKeySelector<IN> implements KeySelector<IN, Tuple>, ResultTypeQueryable<Tuple> {
 
 		private static final long serialVersionUID = 1L;
 
 		private final TypeComparator<IN> comparator;
 		private final int keyLength;
+		private final TupleTypeInfo tupleTypeInfo;
 
 		/** Reusable array to hold the key objects. Since this is initially empty (all positions
 		 * are null), it does not have any serialization problems */
 		@SuppressWarnings("NonSerializableFieldInSerializableClass")
 		private final Object[] keyArray;
 
-		public ComparableKeySelector(TypeComparator<IN> comparator, int keyLength) {
+		public ComparableKeySelector(TypeComparator<IN> comparator, int keyLength, TupleTypeInfo tupleTypeInfo) {
 			this.comparator = comparator;
 			this.keyLength = keyLength;
+			this.tupleTypeInfo = tupleTypeInfo;
 			keyArray = new Object[keyLength];
 		}
 
@@ -139,6 +145,10 @@ public final class KeySelectorUtil {
 			return key;
 		}
 
+		@Override
+		public TypeInformation<Tuple> getProducedType() {
+			return tupleTypeInfo;
+		}
 	}
 
 	// ------------------------------------------------------------------------
