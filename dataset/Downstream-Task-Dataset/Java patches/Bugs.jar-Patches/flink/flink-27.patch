diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java
index c953a94..38f1231 100644
--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java
+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java
@@ -150,7 +150,11 @@ public class OutputHandler<OUT> {
 			// operator which will be returned and set it up using the wrapper
 			OneInputStreamOperator chainableOperator =
 					chainedTaskConfig.getStreamOperator(vertex.getUserCodeClassLoader());
-			chainableOperator.setup(wrapper, vertex.context);
+			
+			StreamingRuntimeContext chainedContext = vertex.createRuntimeContext(chainedTaskConfig);
+			vertex.contexts.add(chainedContext);
+			
+			chainableOperator.setup(wrapper, chainedContext);
 
 			chainedOperators.add(chainableOperator);
 			return new OperatorCollector<X>(chainableOperator);
diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java
index d678922..1a3d44f 100644
--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java
+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java
@@ -62,7 +62,7 @@ public abstract class StreamTask<OUT, O extends StreamOperator<OUT>> extends Abs
 
 	protected volatile boolean isRunning = false;
 
-	protected StreamingRuntimeContext context;
+	protected List<StreamingRuntimeContext> contexts;
 
 	protected ClassLoader userClassLoader;
 	
@@ -73,21 +73,26 @@ public abstract class StreamTask<OUT, O extends StreamOperator<OUT>> extends Abs
 	public StreamTask() {
 		streamOperator = null;
 		superstepListener = new SuperstepEventListener();
+		contexts = new ArrayList<StreamingRuntimeContext>();
 	}
 
 	@Override
 	public void registerInputOutput() {
 		this.userClassLoader = getUserCodeClassLoader();
 		this.configuration = new StreamConfig(getTaskConfiguration());
-		this.context = createRuntimeContext(getEnvironment().getTaskName());
 		this.stateHandleProvider = getStateHandleProvider();
 
 		outputHandler = new OutputHandler<OUT>(this);
 
 		streamOperator = configuration.getStreamOperator(userClassLoader);
+		
 		if (streamOperator != null) {
+			//Create context of the head operator
+			StreamingRuntimeContext headContext = createRuntimeContext(configuration);
+			this.contexts.add(headContext);
+
 			// IterationHead and IterationTail don't have an Operator...
-			streamOperator.setup(outputHandler.getOutput(), this.context);
+			streamOperator.setup(outputHandler.getOutput(), headContext);
 		}
 
 		hasChainedOperators = !outputHandler.getChainedOperators().isEmpty();
@@ -97,10 +102,10 @@ public abstract class StreamTask<OUT, O extends StreamOperator<OUT>> extends Abs
 		return getEnvironment().getTaskName();
 	}
 
-	public StreamingRuntimeContext createRuntimeContext(String taskName) {
+	public StreamingRuntimeContext createRuntimeContext(StreamConfig conf) {
 		Environment env = getEnvironment();
-		return new StreamingRuntimeContext(taskName, env, getUserCodeClassLoader(),
-				getExecutionConfig());
+		return new StreamingRuntimeContext(conf.getStreamOperator(userClassLoader).getClass()
+				.getSimpleName(), env, getUserCodeClassLoader(), getExecutionConfig());
 	}
 	
 	private StateHandleProvider<Serializable> getStateHandleProvider() {
