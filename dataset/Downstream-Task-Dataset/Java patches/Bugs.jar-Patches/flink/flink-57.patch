diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/stats/SimpleCheckpointStatsTracker.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/stats/SimpleCheckpointStatsTracker.java
index 5881f4f..fba3f22 100644
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/stats/SimpleCheckpointStatsTracker.java
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/stats/SimpleCheckpointStatsTracker.java
@@ -299,31 +299,32 @@ public class SimpleCheckpointStatsTracker implements CheckpointStatsTracker {
 				long[][] subTaskStats = this.subTaskStats.get(operatorId);
 
 				if (subTaskStats == null) {
-					throw new IllegalArgumentException("Unknown operator ID.");
+					return Option.empty();
 				}
+				else {
+					long maxDuration = Long.MIN_VALUE;
+					long stateSize = 0;
 
-				long maxDuration = Long.MIN_VALUE;
-				long stateSize = 0;
+					for (long[] subTaskStat : subTaskStats) {
+						if (subTaskStat[0] > maxDuration) {
+							maxDuration = subTaskStat[0];
+						}
 
-				for (long[] subTaskStat : subTaskStats) {
-					if (subTaskStat[0] > maxDuration) {
-						maxDuration = subTaskStat[0];
+						stateSize += subTaskStat[1];
 					}
 
-					stateSize += subTaskStat[1];
-				}
-
-				stats = new OperatorCheckpointStats(
-						latestCompletedCheckpoint.getCheckpointID(),
-						latestCompletedCheckpoint.getTimestamp(),
-						maxDuration,
-						stateSize,
-						subTaskStats);
+					stats = new OperatorCheckpointStats(
+							latestCompletedCheckpoint.getCheckpointID(),
+							latestCompletedCheckpoint.getTimestamp(),
+							maxDuration,
+							stateSize,
+							subTaskStats);
 
-				// Remember this and don't recompute if requested again
-				operatorStatsCache.put(operatorId, stats);
+					// Remember this and don't recompute if requested again
+					operatorStatsCache.put(operatorId, stats);
 
-				return Option.apply(stats);
+					return Option.apply(stats);
+				}
 			}
 			else {
 				return Option.empty();
