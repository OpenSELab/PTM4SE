diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java
index 10be55d..f70ef2b 100644
--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java
+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java
@@ -84,7 +84,7 @@ public class TabbedPanel<T extends ITab> extends Panel
 	/** the current tab */
 	private int currentTab = -1;
 
-	private transient Boolean[] tabsVisibilityCache;
+	private transient VisibilityCache visibilityCache;
 
 	/**
 	 * Constructor
@@ -204,9 +204,18 @@ public class TabbedPanel<T extends ITab> extends Panel
 			private static final long serialVersionUID = 1L;
 
 			@Override
+			protected void onConfigure()
+			{
+				super.onConfigure();
+
+				setVisible(getVisiblityCache().isVisible(tabIndex));
+			}
+
+			@Override
 			protected void onComponentTag(final ComponentTag tag)
 			{
 				super.onComponentTag(tag);
+
 				String cssClass = tag.getAttribute("class");
 				if (cssClass == null)
 				{
@@ -218,18 +227,12 @@ public class TabbedPanel<T extends ITab> extends Panel
 				{
 					cssClass += ' ' + getSelectedTabCssClass();
 				}
-				if (getIndex() == getTabs().size() - 1)
+				if (getVisiblityCache().getLastVisible() == getIndex())
 				{
 					cssClass += ' ' + getLastTabCssClass();
 				}
 				tag.put("class", cssClass.trim());
 			}
-
-			@Override
-			public boolean isVisible()
-			{
-				return getTabs().get(tabIndex).isVisible();
-			}
 		};
 	}
 
@@ -238,13 +241,13 @@ public class TabbedPanel<T extends ITab> extends Panel
 	{
 		int index = getSelectedTab();
 
-		if ((index == -1) || (isTabVisible(index) == false))
+		if ((index == -1) || (getVisiblityCache().isVisible(index) == false))
 		{
 			// find first visible tab
 			index = -1;
 			for (int i = 0; i < tabs.size(); i++)
 			{
-				if (isTabVisible(i))
+				if (getVisiblityCache().isVisible(i))
 				{
 					index = i;
 					break;
@@ -253,9 +256,7 @@ public class TabbedPanel<T extends ITab> extends Panel
 
 			if (index != -1)
 			{
-				/*
-				 * found a visible tab, so select it
-				 */
+				// found a visible tab, so select it
 				setSelectedTab(index);
 			}
 		}
@@ -401,7 +402,7 @@ public class TabbedPanel<T extends ITab> extends Panel
 
 		final Component component;
 
-		if (currentTab == -1 || (tabs.size() == 0) || !isTabVisible(currentTab))
+		if (currentTab == -1 || (tabs.size() == 0) || !getVisiblityCache().isVisible(currentTab))
 		{
 			// no tabs or the current tab is not visible
 			component = newPanel();
@@ -443,45 +444,84 @@ public class TabbedPanel<T extends ITab> extends Panel
 		return (Integer)getDefaultModelObject();
 	}
 
-	/**
-	 * 
-	 * @param tabIndex
-	 * @return visible
-	 */
-	private boolean isTabVisible(final int tabIndex)
+	@Override
+	protected void onDetach()
+	{
+		visibilityCache = null;
+
+		super.onDetach();
+	}
+
+	private VisibilityCache getVisiblityCache()
 	{
-		if (tabsVisibilityCache == null)
+		if (visibilityCache == null)
 		{
-			tabsVisibilityCache = new Boolean[tabs.size()];
+			visibilityCache = new VisibilityCache();
 		}
 
-		if (tabsVisibilityCache.length < tabIndex + 1)
+		return visibilityCache;
+	}
+
+	/**
+	 * A cache for visibilities of {@link ITab}s.
+	 */
+	private class VisibilityCache
+	{
+
+		/**
+		 * Visibility for each tab.
+		 */
+		private Boolean[] visibilities;
+
+		/**
+		 * Last visible tab.
+		 */
+		private int lastVisible = -1;
+
+		public VisibilityCache()
 		{
-			Boolean[] resized = new Boolean[tabIndex + 1];
-			System.arraycopy(tabsVisibilityCache, 0, resized, 0, tabsVisibilityCache.length);
-			tabsVisibilityCache = resized;
+			visibilities = new Boolean[tabs.size()];
 		}
 
-		if (tabsVisibilityCache.length > 0)
+		public int getLastVisible()
 		{
-			Boolean visible = tabsVisibilityCache[tabIndex];
-			if (visible == null)
+			if (lastVisible == -1)
 			{
-				visible = tabs.get(tabIndex).isVisible();
-				tabsVisibilityCache[tabIndex] = visible;
+				for (int t = 0; t < tabs.size(); t++)
+				{
+					if (isVisible(t))
+					{
+						lastVisible = t;
+					}
+				}
 			}
-			return visible;
+
+			return lastVisible;
 		}
-		else
+
+		public boolean isVisible(int index)
 		{
-			return false;
-		}
-	}
+			if (visibilities.length < index + 1)
+			{
+				Boolean[] resized = new Boolean[index + 1];
+				System.arraycopy(visibilities, 0, resized, 0, visibilities.length);
+				visibilities = resized;
+			}
 
-	@Override
-	protected void onDetach()
-	{
-		tabsVisibilityCache = null;
-		super.onDetach();
+			if (visibilities.length > 0)
+			{
+				Boolean visible = visibilities[index];
+				if (visible == null)
+				{
+					visible = tabs.get(index).isVisible();
+					visibilities[index] = visible;
+				}
+				return visible;
+			}
+			else
+			{
+				return false;
+			}
+		}
 	}
-}
+}
\ No newline at end of file
