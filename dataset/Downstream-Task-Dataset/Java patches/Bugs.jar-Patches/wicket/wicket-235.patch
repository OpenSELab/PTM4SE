diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java
index 84592d7..1e24206 100644
--- a/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java
+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/handler/ListenerInterfaceRequestHandler.java
@@ -172,65 +172,62 @@ public class ListenerInterfaceRequestHandler
 			component = null;
 		}
 
-		if ((component == null && freshPage) ||
-			(component != null && getComponent().getPage() == page))
+		if ((component == null && !freshPage) || (component != null && component.getPage() != page))
 		{
-			if (page instanceof Page)
-			{
-				// initialize the page to be able to check whether it is stateless
-				((Page)page).internalInitialize();
-			}
-			final boolean isStateless = page.isPageStateless();
+			throw new WicketRuntimeException("Component '" + getComponentPath()
+				+ "' has been removed from page.");
+		}
 
-			RedirectPolicy policy = isStateless ? RedirectPolicy.NEVER_REDIRECT
-				: RedirectPolicy.AUTO_REDIRECT;
-			final IPageProvider pageProvider = new PageProvider(page);
+		if (page instanceof Page)
+		{
+			// initialize the page to be able to check whether it is stateless
+			((Page)page).internalInitialize();
+		}
+		final boolean isStateless = page.isPageStateless();
+
+		RedirectPolicy policy = isStateless
+			? RedirectPolicy.NEVER_REDIRECT
+			: RedirectPolicy.AUTO_REDIRECT;
+		final IPageProvider pageProvider = new PageProvider(page);
 
-			if (freshPage && (isStateless == false || component == null))
+		if (freshPage && (isStateless == false || component == null))
+		{
+			// A listener interface is invoked on an expired page.
+
+			// If the page is stateful then we cannot assume that the listener interface is
+			// invoked on its initial state (right after page initialization) and that its
+			// component and/or behavior will be available. That's why the listener interface
+			// should be ignored and the best we can do is to re-paint the newly constructed
+			// page.
+
+			if (LOG.isDebugEnabled())
 			{
-				// A listener interface is invoked on an expired page.
-
-				// If the page is stateful then we cannot assume that the listener interface is
-				// invoked on its initial state (right after page initialization) and that its
-				// component and/or behavior will be available. That's why the listener interface
-				// should be ignored and the best we can do is to re-paint the newly constructed
-				// page.
-
-				if (LOG.isDebugEnabled())
-				{
-					LOG.debug(
-						"A ListenerInterface '{}' assigned to '{}' is executed on an expired stateful page. "
-							+ "Scheduling re-create of the page and ignoring the listener interface...",
-						listenerInterface, getComponentPath());
-				}
-
-				if (isAjax)
-				{
-					policy = RedirectPolicy.ALWAYS_REDIRECT;
-				}
-
-				requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(
-					pageProvider, policy));
-				return;
+				LOG.debug(
+					"A ListenerInterface '{}' assigned to '{}' is executed on an expired stateful page. "
+						+ "Scheduling re-create of the page and ignoring the listener interface...",
+					listenerInterface, getComponentPath());
 			}
 
-			if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
+			if (isAjax)
 			{
-				// schedule page render after current request handler is done. this can be
-				// overridden during invocation of listener
-				// method (i.e. by calling RequestCycle#setResponsePage)
-				requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(
-					pageProvider, policy));
+				policy = RedirectPolicy.ALWAYS_REDIRECT;
 			}
 
-			invokeListener();
-
+			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(
+				pageProvider, policy));
+			return;
 		}
-		else
+
+		if (isAjax == false && listenerInterface.isRenderPageAfterInvocation())
 		{
-			throw new WicketRuntimeException("Component " + getComponent() +
-				" has been removed from page.");
+			// schedule page render after current request handler is done. this can be
+			// overridden during invocation of listener
+			// method (i.e. by calling RequestCycle#setResponsePage)
+			requestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(
+				pageProvider, policy));
 		}
+
+		invokeListener();
 	}
 
 	private void invokeListener()
