diff --git a/wicket-core/src/main/java/org/apache/wicket/Component.java b/wicket-core/src/main/java/org/apache/wicket/Component.java
index 956df88..94bef50 100644
--- a/wicket-core/src/main/java/org/apache/wicket/Component.java
+++ b/wicket-core/src/main/java/org/apache/wicket/Component.java
@@ -36,6 +36,7 @@ import org.apache.wicket.feedback.FeedbackMessage;
 import org.apache.wicket.feedback.IFeedback;
 import org.apache.wicket.markup.ComponentTag;
 import org.apache.wicket.markup.IMarkupFragment;
+import org.apache.wicket.markup.MarkupCache;
 import org.apache.wicket.markup.MarkupElement;
 import org.apache.wicket.markup.MarkupException;
 import org.apache.wicket.markup.MarkupNotFoundException;
@@ -1170,6 +1171,8 @@ public abstract class Component
 
 		requestFlags = 0;
 
+		internalDetach();
+
 		// notify any detach listener
 		IDetachListener detachListener = getApplication().getFrameworkSettings()
 			.getDetachListener();
@@ -1180,6 +1183,15 @@ public abstract class Component
 	}
 
 	/**
+	 * Removes the cached markup at the end of the request. For the next request it will be get
+	 * either from the parent's markup or from {@link MarkupCache}.
+	 */
+	private void internalDetach()
+	{
+		markup = null;
+	}
+
+	/**
 	 * Detaches all models
 	 */
 	public void detachModels()
@@ -3065,7 +3077,7 @@ public abstract class Component
 			{
 				setFlag(FLAG_PLACEHOLDER, false);
 				// I think it's better to not setOutputMarkupId to false...
-				// user can do it if we want
+				// user can do it if she want
 			}
 		}
 		return this;
diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/InlineEnclosure.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/InlineEnclosure.java
index 614ccb6..9caac6d 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/InlineEnclosure.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/InlineEnclosure.java
@@ -17,6 +17,8 @@
 package org.apache.wicket.markup.html.internal;
 
 import org.apache.wicket.markup.ComponentTag;
+import org.apache.wicket.markup.IMarkupFragment;
+import org.apache.wicket.markup.Markup;
 import org.apache.wicket.markup.parser.filter.InlineEnclosureHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,6 +44,8 @@ public class InlineEnclosure extends Enclosure
 
 	private static final Logger log = LoggerFactory.getLogger(InlineEnclosure.class);
 
+	private String enclosureMarkupAsString;
+
 	/**
 	 * Construct.
 	 * 
@@ -53,8 +57,9 @@ public class InlineEnclosure extends Enclosure
 	{
 		super(id, childId);
 
+		enclosureMarkupAsString = null;
+
 		// ensure that the Enclosure is ready for ajax updates
-		setOutputMarkupId(true);
 		setOutputMarkupPlaceholderTag(true);
 		setMarkupId(getId());
 	}
@@ -79,4 +84,32 @@ public class InlineEnclosure extends Enclosure
 		setVisible(visible);
 		return visible;
 	}
+
+	/**
+	 * {@link InlineEnclosure}s keep their own cache of their markup because Component#markup is
+	 * detached and later during Ajax request it is hard to re-lookup {@link InlineEnclosure}'s
+	 * markup from its parent.
+	 * 
+	 * @see org.apache.wicket.Component#getMarkup()
+	 */
+	@Override
+	public IMarkupFragment getMarkup()
+	{
+		IMarkupFragment enclosureMarkup = null;
+		if (enclosureMarkupAsString == null)
+		{
+			IMarkupFragment markup = super.getMarkup();
+			if (markup != null && markup != Markup.NO_MARKUP)
+			{
+				enclosureMarkup = markup;
+				enclosureMarkupAsString = markup.toString(true);
+			}
+		}
+		else
+		{
+			enclosureMarkup = Markup.of(enclosureMarkupAsString);
+		}
+
+		return enclosureMarkup;
+	}
 }
