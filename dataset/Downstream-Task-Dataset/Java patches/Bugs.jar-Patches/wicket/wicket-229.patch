diff --git a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java
index 032a818..e8e6376 100644
--- a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java
+++ b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java
@@ -1,6 +1,10 @@
 package org.apache.wicket.bean.validation;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 
 import javax.validation.ConstraintViolation;
@@ -62,8 +66,8 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>
 	private final IModel<Class<?>[]> groups_;
 
 	/**
-	 * A flag that indicates whether {@linkplain #setComponentRequiredFlag()}
-	 * has been called for this behavior.
+	 * A flag that indicates whether {@linkplain #setComponentRequiredFlag()} has been called for
+	 * this behavior.
 	 */
 	private boolean requiredFlagSet;
 
@@ -132,8 +136,10 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>
 				" can only be added to FormComponents");
 		}
 
-		// TODO add a validation key that appends the type so we can have different messages for
-		// @Size on String vs Collection - done but need to add a key for each superclass/interface
+		// TODO add a validation key that appends the type so we can have
+		// different messages for
+		// @Size on String vs Collection - done but need to add a key for each
+		// superclass/interface
 
 		this.component = (FormComponent<T>)component;
 	}
@@ -144,10 +150,15 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>
 		super.onConfigure(component);
 		if (requiredFlagSet == false)
 		{
-			// "Required" flag is calculated upon component's model property, so we must ensure,
-			// that model object is accessible (i.e. component is already added in a page).
+			// "Required" flag is calculated upon component's model property, so
+			// we must ensure,
+			// that model object is accessible (i.e. component is already added
+			// in a page).
 			requiredFlagSet = true;
-			setComponentRequiredFlag();
+			if (isRequired())
+			{
+				this.component.setRequired(true);
+			}
 		}
 	}
 
@@ -161,27 +172,57 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>
 		}
 	}
 
-	/**
-	 * Marks the form component required if necessary
-	 */
-	private void setComponentRequiredFlag()
+	private List<NotNull> findNotNullConstraints()
 	{
 		BeanValidationContext config = BeanValidationConfiguration.get();
 		Validator validator = config.getValidator();
 		Property property = getProperty();
 
-		// if the property has a NotNull constraint mark the form component required
+		List<NotNull> constraints = new ArrayList<NotNull>();
 
 		Iterator<ConstraintDescriptor<?>> it = new ConstraintIterator(validator, property);
+
 		while (it.hasNext())
 		{
 			ConstraintDescriptor<?> desc = it.next();
 			if (desc.getAnnotation().annotationType().equals(NotNull.class))
 			{
-				component.setRequired(true);
-				break;
+				constraints.add((NotNull)desc.getAnnotation());
+			}
+		}
+
+		return constraints;
+	}
+
+	boolean isRequired()
+	{
+		List<NotNull> constraints = findNotNullConstraints();
+
+		if (constraints.isEmpty())
+		{
+			return false;
+		}
+
+		HashSet<Class<?>> validatorGroups = new HashSet<Class<?>>();
+		validatorGroups.addAll(Arrays.asList(getGroups()));
+
+		for (NotNull constraint : constraints)
+		{
+			if (constraint.groups().length == 0 && validatorGroups.isEmpty())
+			{
+				return true;
+			}
+
+			for (Class<?> constraintGroup : constraint.groups())
+			{
+				if (validatorGroups.contains(constraintGroup))
+				{
+					return true;
+				}
 			}
 		}
+
+		return false;
 	}
 
 	@Override
@@ -194,7 +235,8 @@ public class PropertyValidator<T> extends Behavior implements IValidator<T>
 		Validator validator = config.getValidator();
 		Property property = getProperty();
 
-		// find any tag modifiers that apply to the constraints of the property being validated
+		// find any tag modifiers that apply to the constraints of the property
+		// being validated
 		// and allow them to modify the component tag
 
 		Iterator<ConstraintDescriptor<?>> it = new ConstraintIterator(validator, property,
diff --git a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java
index 00aa506..f8927e2 100644
--- a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java
+++ b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java
@@ -20,7 +20,7 @@ public class SessionLocaleInterpolator implements MessageInterpolator
 	 * Constructor
 	 * 
 	 * @param delegate
-	 *      the MessageInterpolator to delegate to
+	 *            the MessageInterpolator to delegate to
 	 */
 	public SessionLocaleInterpolator(MessageInterpolator delegate)
 	{
@@ -28,7 +28,8 @@ public class SessionLocaleInterpolator implements MessageInterpolator
 		this.delegate = delegate;
 	}
 
-	public String interpolate(final String messageTemplate, final MessageInterpolator.Context context)
+	public String interpolate(final String messageTemplate,
+		final MessageInterpolator.Context context)
 	{
 		final Locale locale = getLocale();
 		if (locale != null)
@@ -41,7 +42,8 @@ public class SessionLocaleInterpolator implements MessageInterpolator
 		}
 	}
 
-	public String interpolate(final String message, final MessageInterpolator.Context context, final Locale locale)
+	public String interpolate(final String message, final MessageInterpolator.Context context,
+		final Locale locale)
 	{
 		return delegate.interpolate(message, context, locale);
 	}
diff --git a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java
index 4124974..1795dc4 100644
--- a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java
+++ b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java
@@ -6,8 +6,8 @@ import org.apache.wicket.markup.ComponentTag;
 import org.apache.wicket.markup.html.form.FormComponent;
 
 /**
- * A tag modifier that adds the {@code maxlength} attribute to the {@code input} tag with the max value
- * from the {@link Size} constraint annotation.
+ * A tag modifier that adds the {@code maxlength} attribute to the {@code input} tag with the max
+ * value from the {@link Size} constraint annotation.
  * 
  * @author igor
  * 
