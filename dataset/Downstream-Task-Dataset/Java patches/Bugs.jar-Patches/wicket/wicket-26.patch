diff --git a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
index 11d40a2..b90c80e 100644
--- a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
+++ b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java
@@ -180,22 +180,36 @@ public class Enclosure extends WebMarkupContainer
 		}
 	}
 
+	/**
+	 * 
+	 * @param container
+	 * @param markupStream
+	 * @param enclosureOpenTag
+	 */
 	private void applyEnclosureVisibilityToChildren(final MarkupContainer container,
-		final MarkupStream markupStream, ComponentTag enclosureOpenTag)
+		final MarkupStream markupStream, final ComponentTag enclosureOpenTag)
 	{
 		DirectChildTagIterator it = new DirectChildTagIterator(markupStream, enclosureOpenTag);
 		while (it.hasNext())
 		{
 			final ComponentTag tag = it.next();
-			final Component child = container.get(tag.getId());
-			// record original visiblity allowed value, will restore later
-			changes.put(child, child.isVisibilityAllowed());
-			child.setVisibilityAllowed(isVisible());
+			if (tag.isAutoComponentTag() == false)
+			{
+				final Component child = container.get(tag.getId());
+
+				// record original visiblity allowed value, will restore later
+				changes.put(child, child.isVisibilityAllowed());
+				child.setVisibilityAllowed(isVisible());
+			}
 		}
 		it.rewind();
 	}
 
-	private void checkChildComponent(Component controller)
+	/**
+	 * 
+	 * @param controller
+	 */
+	private void checkChildComponent(final Component controller)
 	{
 		if (controller == null)
 		{
@@ -209,6 +223,12 @@ public class Enclosure extends WebMarkupContainer
 		}
 	}
 
+	/**
+	 * 
+	 * @param container
+	 * @param markupStream
+	 * @param enclosureOpenTag
+	 */
 	private void ensureAllChildrenPresent(final MarkupContainer container,
 		final MarkupStream markupStream, ComponentTag enclosureOpenTag)
 	{
@@ -217,43 +237,50 @@ public class Enclosure extends WebMarkupContainer
 		{
 			final ComponentTag tag = it.next();
 
-			Component child = container.get(tag.getId());
-			if (child == null)
+			if (tag.isAutoComponentTag() == false)
 			{
-				// component does not yet exist in the container, attempt to resolve it using
-				// resolvers
-				final int tagIndex = it.getCurrentIndex();
-
-				// because the resolvers can auto-add and therefore immediately render the component
-				// we have to buffer the output since we do not yet know the visibility of the
-				// enclosure
-				CharSequence buffer = new ResponseBufferZone(getRequestCycle(), markupStream)
+				Component child = container.get(tag.getId());
+				if (child == null)
 				{
-					@Override
-					protected void executeInsideBufferedZone()
+					// component does not yet exist in the container, attempt to resolve it using
+					// resolvers
+					final int tagIndex = it.getCurrentIndex();
+
+					// because the resolvers can auto-add and therefore immediately render the
+					// component
+					// we have to buffer the output since we do not yet know the visibility of the
+					// enclosure
+					CharSequence buffer = new ResponseBufferZone(getRequestCycle(), markupStream)
+					{
+						@Override
+						protected void executeInsideBufferedZone()
+						{
+							markupStream.setCurrentIndex(tagIndex);
+							ComponentResolvers.resolve(container, markupStream, tag);
+						}
+					}.execute();
+
+					child = container.get(tag.getId());
+					checkChildComponent(child);
+
+					if (buffer.length() > 0)
 					{
-						markupStream.setCurrentIndex(tagIndex);
-						ComponentResolvers.resolve(container, markupStream, tag);
+						// we have already rendered this child component, insert a stub component
+						// that
+						// will dump the markup during the normal render process if the enclosure is
+						// visible
+						final Component stub = new AutoMarkupLabel(child.getId(), buffer);
+						container.replace(stub); // ok here because we are replacing auto with auto
 					}
-				}.execute();
-
-				child = container.get(tag.getId());
-				checkChildComponent(child);
-
-				if (buffer.length() > 0)
-				{
-					// we have already rendered this child component, insert a stub component that
-					// will dump the markup during the normal render process if the enclosure is
-					// visible
-					final Component stub = new AutoMarkupLabel(child.getId(), buffer);
-					container.replace(stub); // ok here because we are replacing auto with auto
 				}
 			}
 		}
 		it.rewind();
 	}
 
-
+	/**
+	 * @see org.apache.wicket.Component#onDetach()
+	 */
 	@Override
 	protected void onDetach()
 	{
@@ -261,6 +288,9 @@ public class Enclosure extends WebMarkupContainer
 		super.onDetach();
 	}
 
+	/**
+	 * 
+	 */
 	private void restoreOriginalChildVisibility()
 	{
 		if (changes != null)
