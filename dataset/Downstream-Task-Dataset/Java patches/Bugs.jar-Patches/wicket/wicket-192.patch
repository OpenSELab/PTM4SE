diff --git a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java
index b1418bf..1fd71d6 100644
--- a/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java
+++ b/wicket-core/src/main/java/org/apache/wicket/core/request/mapper/BookmarkableMapper.java
@@ -16,6 +16,8 @@
  */
 package org.apache.wicket.core.request.mapper;
 
+import java.util.List;
+
 import org.apache.wicket.Application;
 import org.apache.wicket.core.request.handler.PageProvider;
 import org.apache.wicket.core.request.handler.RenderPageRequestHandler;
@@ -93,14 +95,26 @@ public class BookmarkableMapper extends AbstractBookmarkableMapper
 	@Override
 	protected UrlInfo parseRequest(Request request)
 	{
-		Url url = request.getUrl();
-		if (matches(url))
+		if (matches(request))
 		{
+			Url url = request.getUrl();
+
 			// try to extract page and component information from URL
 			PageComponentInfo info = getPageComponentInfo(url);
 
+			List<String> segments = url.getSegments();
+
 			// load the page class
-			String className = url.getSegments().get(2);
+			String className;
+			if (segments.size() >= 3)
+			{
+				className = segments.get(2);
+			}
+			else
+			{
+				className = segments.get(1);
+			}
+
 			Class<? extends IRequestablePage> pageClass = getPageClass(className);
 
 			if (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))
@@ -111,13 +125,13 @@ public class BookmarkableMapper extends AbstractBookmarkableMapper
 
 					if (application.getSecuritySettings().getEnforceMounts())
 					{
-						// we make an excepion if the homepage itself was mounted, see WICKET-1898
+						// we make an exception if the homepage itself was mounted, see WICKET-1898
 						if (!pageClass.equals(application.getHomePage()))
 						{
 							// WICKET-5094 only enforce mount if page is mounted
 							Url reverseUrl = application.getRootRequestMapper().mapHandler(
 								new RenderPageRequestHandler(new PageProvider(pageClass)));
-							if (!matches(reverseUrl))
+							if (!matches(request.cloneWithUrl(reverseUrl)))
 							{
 								return null;
 							}
@@ -151,17 +165,37 @@ public class BookmarkableMapper extends AbstractBookmarkableMapper
 	public int getCompatibilityScore(Request request)
 	{
 		int score = 0;
-		Url url = request.getUrl();
-		if (matches(url))
+		if (matches(request))
 		{
 			score = Integer.MAX_VALUE;
 		}
 		return score;
 	}
 
-	private boolean matches(final Url url)
+	private boolean matches(final Request request)
 	{
-		return (url.getSegments().size() >= 3 && urlStartsWith(url, getContext().getNamespace(),
-			getContext().getBookmarkableIdentifier()));
+		boolean matches = false;
+		Url url = request.getUrl();
+		Url baseUrl = request.getClientUrl();
+		String namespace = getContext().getNamespace();
+		String bookmarkableIdentifier = getContext().getBookmarkableIdentifier();
+		String pageIdentifier = getContext().getPageIdentifier();
+
+		if (url.getSegments().size() >= 3 && urlStartsWith(url, namespace, bookmarkableIdentifier))
+		{
+			matches = true;
+		}
+		// baseUrl = 'wicket/bookmarkable/com.example.SomePage[?...]', requestUrl = 'bookmarkable/com.example.SomePage'
+		else if (baseUrl.getSegments().size() == 3 && urlStartsWith(baseUrl, namespace, bookmarkableIdentifier) && url.getSegments().size() >= 2 && urlStartsWith(url, bookmarkableIdentifier))
+		{
+			matches = true;
+		}
+		// baseUrl = 'wicket/page[?...]', requestUrl = 'bookmarkable/com.example.SomePage'
+		else if (baseUrl.getSegments().size() == 2 && urlStartsWith(baseUrl, namespace, pageIdentifier) && url.getSegments().size() >= 2 && urlStartsWith(url, bookmarkableIdentifier))
+		{
+			matches = true;
+		}
+
+		return matches;
 	}
 }
