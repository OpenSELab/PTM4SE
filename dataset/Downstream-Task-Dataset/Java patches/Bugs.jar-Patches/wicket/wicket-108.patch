diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractTransformerBehavior.java b/wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractTransformerBehavior.java
index be0490b..f752e10 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractTransformerBehavior.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/transformer/AbstractTransformerBehavior.java
@@ -20,12 +20,13 @@ import org.apache.wicket.Component;
 import org.apache.wicket.WicketRuntimeException;
 import org.apache.wicket.behavior.Behavior;
 import org.apache.wicket.protocol.http.BufferedWebResponse;
+import org.apache.wicket.request.Response;
 import org.apache.wicket.request.cycle.RequestCycle;
 import org.apache.wicket.request.http.WebResponse;
 
 /**
- * A IBehavior which can be added to any component. It allows to post-process (transform) the markup
- * generated by the component.
+ * A {@link Behavior} which can be added to any component. It allows to post-process (transform) the
+ * markup generated by the component.
  * 
  * @see org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer
  * 
@@ -35,20 +36,17 @@ public abstract class AbstractTransformerBehavior extends Behavior implements IT
 {
 	private static final long serialVersionUID = 1L;
 
-	private WebResponse webResponse;
-
 	/**
-	 * Construct.
+	 * The request cycle's response before the transformation.
 	 */
-	public AbstractTransformerBehavior()
-	{
-	}
+	private Response originalResponse;
 
 	/**
 	 * Create a new response object which is used to store the markup generated by the child
 	 * objects.
 	 * 
 	 * @param originalResponse
+	 *            the original web response or {@code null} if it isn't a {@link WebResponse}
 	 * 
 	 * @return Response object. Must not be null
 	 */
@@ -65,17 +63,14 @@ public abstract class AbstractTransformerBehavior extends Behavior implements IT
 		final RequestCycle requestCycle = RequestCycle.get();
 
 		// Temporarily replace the web response with a String response
-		webResponse = (WebResponse)requestCycle.getResponse();
+		originalResponse = requestCycle.getResponse();
 
-		// Create a new response object
-		final BufferedWebResponse response = newResponse(webResponse);
-		if (response == null)
-		{
-			throw new IllegalStateException("newResponse() must not return null");
-		}
+		WebResponse origResponse = (WebResponse)((originalResponse instanceof WebResponse)
+			? originalResponse : null);
+		BufferedWebResponse tempResponse = newResponse(origResponse);
 
-		// and make it the current one
-		requestCycle.setResponse(response);
+		// temporarily set StringResponse to collect the transformed output
+		requestCycle.setResponse(tempResponse);
 	}
 
 	@Override
@@ -85,28 +80,28 @@ public abstract class AbstractTransformerBehavior extends Behavior implements IT
 
 		try
 		{
-			BufferedWebResponse response = (BufferedWebResponse)requestCycle.getResponse();
+			BufferedWebResponse tempResponse = (BufferedWebResponse)requestCycle.getResponse();
 
 			// Transform the data
-			CharSequence output = transform(component, response.getText());
-			response.setText(output);
-			response.writeTo(webResponse);
+			CharSequence output = transform(component, tempResponse.getText());
+			originalResponse.write(output);
 		}
 		catch (Exception ex)
 		{
-			throw new WicketRuntimeException("Error while transforming the output: " + this, ex);
+			throw new WicketRuntimeException("Error while transforming the output of component: " +
+				component, ex);
 		}
 		finally
 		{
 			// Restore the original response object
-			requestCycle.setResponse(webResponse);
+			requestCycle.setResponse(originalResponse);
 		}
 	}
 
 	@Override
 	public void detach(Component component)
 	{
-		webResponse = null;
+		originalResponse = null;
 		super.detach(component);
 	}
 
