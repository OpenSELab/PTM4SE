diff --git a/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java
index 88f1371..866340f 100644
--- a/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java
+++ b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBar.java
@@ -33,11 +33,10 @@ import org.apache.wicket.markup.html.list.ListView;
 import org.apache.wicket.model.AbstractReadOnlyModel;
 
 /**
- * The debug bar is for use during development. It allows contributors to add
- * useful functions or data, making them readily accessible to the developer.<br />
+ * The debug bar is for use during development. It allows contributors to add useful functions or
+ * data, making them readily accessible to the developer.<br />
  * <br />
- * To use it, simply add it to your base page so that all of your pages
- * automatically have it.<br />
+ * To use it, simply add it to your base page so that all of your pages automatically have it.<br />
  * 
  * <br />
  * <code>
@@ -49,108 +48,135 @@ import org.apache.wicket.model.AbstractReadOnlyModel;
  * </code>
  * 
  * <br />
- * You can also add your own information to the bar by creating a
- * {@link IDebugBarContributor} and registering it with the debug bar.
+ * You can also add your own information to the bar by creating a {@link IDebugBarContributor} and
+ * registering it with the debug bar.
  * 
  * @author Jeremy Thomerson <jthomerson@apache.org>
  * @see IDebugBarContributor
  */
-public class DebugBar extends DevUtilsPanel {
-
-	private static final MetaDataKey<List<IDebugBarContributor>> CONTRIBS_META_KEY = new MetaDataKey<List<IDebugBarContributor>>() {
-		private static final long serialVersionUID = 1L;
-	};
-
-	static {
-		registerStandardContributors();
-	}
-
-	private static final long serialVersionUID = 1L;
-
-	public DebugBar(String id) {
-		super(id);
-		setMarkupId("wicketDebugBar");
-		setOutputMarkupId(true);
-		add(new AttributeModifier("class", true,
-				new AbstractReadOnlyModel<String>() {
-					private static final long serialVersionUID = 1L;
-
-					@Override
-					public String getObject() {
-						return "wicketDebugBar"
-								+ (DebugBar.this.hasErrorMessage() ? "Error"
-										: "");
-					}
-
-				}));
-		add(CSSPackageResource.getHeaderContribution(DebugBar.class,
-				"wicket-debugbar.css"));
-		add(JavascriptPackageResource.getHeaderContribution(DebugBar.class,
-				"wicket-debugbar.js"));
-		add(new Image("logo", new ResourceReference(DebugBar.class,
-				"wicket.png")));
-		add(new Image("removeImg", new ResourceReference(DebugBar.class,
-				"remove.png")));
-		List<IDebugBarContributor> contributors = getContributors();
-		if (contributors.isEmpty()) {
-			// we do this so that if you have multiple applications running in
-			// the same container,
-			// each ends up registering its' own contributors (wicket-examples
-			// for example)
-			registerStandardContributors();
-			contributors = getContributors();
-		}
-		add(new ListView<IDebugBarContributor>("contributors", contributors) {
-			private static final long serialVersionUID = 1L;
-
-			@Override
-			protected void populateItem(ListItem<IDebugBarContributor> item) {
-				IDebugBarContributor contrib = item.getModelObject();
-				Component comp = contrib.createComponent("contrib", DebugBar.this);
-				if (comp == null) {
-					// some contributors only add information to the debug bar
-					//	and don't actually create a contributed component
-					item.setVisibilityAllowed(false);
-				} else {
-					item.add(comp);
-				}
-			}
-		});
-	}
-
-	@Override
-	public boolean isVisible() {
-		return getApplication().getDebugSettings()
-				.isDevelopmentUtilitiesEnabled();
-	}
-
-	/**
-	 * Register your own custom contributor that will be part of the debug bar.
-	 * You must have the context of an application for this thread at the time
-	 * of calling this method.
-	 * 
-	 * @param contrib
-	 *            custom contributor - can not be null
-	 */
-	public static void registerContributor(IDebugBarContributor contrib) {
-		if (contrib == null) {
-			throw new IllegalArgumentException("contrib can not be null");
-		}
-
-		List<IDebugBarContributor> contributors = getContributors();
-		contributors.add(contrib);
-		Application.get().setMetaData(CONTRIBS_META_KEY, contributors);
-	}
-
-	private static List<IDebugBarContributor> getContributors() {
-		List<IDebugBarContributor> list = Application.get().getMetaData(
-				CONTRIBS_META_KEY);
-		return list == null ? new ArrayList<IDebugBarContributor>() : list;
-	}
-
-	private static void registerStandardContributors() {
-		registerContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB);
-		registerContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB);
-		registerContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB);
-	}
+public class DebugBar extends DevUtilsPanel
+{
+
+    private static final MetaDataKey<List<IDebugBarContributor>> CONTRIBS_META_KEY = new MetaDataKey<List<IDebugBarContributor>>()
+    {
+        private static final long serialVersionUID = 1L;
+    };
+
+    private static final long serialVersionUID = 1L;
+
+    public DebugBar(String id)
+    {
+        super(id);
+        setMarkupId("wicketDebugBar");
+        setOutputMarkupId(true);
+        add(new AttributeModifier("class", true, new AbstractReadOnlyModel<String>()
+        {
+            private static final long serialVersionUID = 1L;
+
+            @Override
+            public String getObject()
+            {
+                return "wicketDebugBar" + (DebugBar.this.hasErrorMessage() ? "Error" : "");
+            }
+
+        }));
+        add(CSSPackageResource.getHeaderContribution(DebugBar.class, "wicket-debugbar.css"));
+        add(JavascriptPackageResource.getHeaderContribution(DebugBar.class, "wicket-debugbar.js"));
+        add(new Image("logo", new ResourceReference(DebugBar.class, "wicket.png")));
+        add(new Image("removeImg", new ResourceReference(DebugBar.class, "remove.png")));
+        List<IDebugBarContributor> contributors = getContributors();
+        
+        // no longer necessary, registered from DebugBarInitializer
+        // if (contributors.isEmpty())
+        // {
+        // we do this so that if you have multiple applications running in
+        // the same container,
+        // each ends up registering its' own contributors (wicket-examples
+        // for example)
+        // registerStandardContributors(Application.get());
+        // contributors = getContributors();
+        // }
+        add(new ListView<IDebugBarContributor>("contributors", contributors)
+        {
+            private static final long serialVersionUID = 1L;
+
+            @Override
+            protected void populateItem(ListItem<IDebugBarContributor> item)
+            {
+                IDebugBarContributor contrib = item.getModelObject();
+                Component comp = contrib.createComponent("contrib", DebugBar.this);
+                if (comp == null)
+                {
+                    // some contributors only add information to the debug bar
+                    // and don't actually create a contributed component
+                    item.setVisibilityAllowed(false);
+                }
+                else
+                {
+                    item.add(comp);
+                }
+            }
+        });
+    }
+
+    @Override
+    public boolean isVisible()
+    {
+        return getApplication().getDebugSettings().isDevelopmentUtilitiesEnabled();
+    }
+
+    /**
+     * Register your own custom contributor that will be part of the debug bar. You must have the
+     * context of an application for this thread at the time of calling this method.
+     * 
+     * @param application
+     * @param contrib
+     *            custom contributor - can not be null
+     */
+    public static void registerContributor(IDebugBarContributor contrib)
+    {
+        registerContributor(contrib, Application.get());
+    }
+
+    /**
+     * Register your own custom contributor that will be part of the debug bar. You must have the
+     * context of an application for this thread at the time of calling this method.
+     * 
+     * @param application
+     * @param contrib
+     *            custom contributor - can not be null
+     */
+    public static void registerContributor(IDebugBarContributor contrib, Application application)
+    {
+        if (contrib == null)
+        {
+            throw new IllegalArgumentException("contrib can not be null");
+        }
+
+        List<IDebugBarContributor> contributors = getContributors(application);
+        contributors.add(contrib);
+        application.setMetaData(CONTRIBS_META_KEY, contributors);
+    }
+
+    private static List<IDebugBarContributor> getContributors()
+    {
+        return getContributors(Application.get());
+    }
+
+    private static List<IDebugBarContributor> getContributors(Application application)
+    {
+        List<IDebugBarContributor> list = application.getMetaData(CONTRIBS_META_KEY);
+        return list == null ? new ArrayList<IDebugBarContributor>() : list;
+    }
+
+
+    /**
+     * Called from {@link DebugBarInitializer}
+     */
+    static void registerStandardContributors(Application application)
+    {
+        registerContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB, application);
+        registerContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB, application);
+        registerContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB, application);
+    }
 }
diff --git a/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBarInitializer.java b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBarInitializer.java
new file mode 100644
index 0000000..d32ea7c
--- /dev/null
+++ b/wicket-devutils/src/main/java/org/apache/wicket/devutils/debugbar/DebugBarInitializer.java
@@ -0,0 +1,30 @@
+package org.apache.wicket.devutils.debugbar;
+
+import org.apache.wicket.Application;
+import org.apache.wicket.IInitializer;
+
+/**
+ * Debug bar module initializer
+ * 
+ * @author igor.vaynberg
+ * 
+ */
+public class DebugBarInitializer implements IInitializer
+{
+
+    /** {@inheritDoc} */
+    public void init(Application application)
+    {
+        // register standard debug contributors
+        DebugBar.registerContributor(VersionDebugContributor.DEBUG_BAR_CONTRIB, application);
+        DebugBar.registerContributor(InspectorDebugPanel.DEBUG_BAR_CONTRIB, application);
+        DebugBar.registerContributor(SessionSizeDebugPanel.DEBUG_BAR_CONTRIB, application);
+    }
+
+    @Override
+    public String toString()
+    {
+        return "DevUtils DebugBar Initializer";
+    }
+
+}
