diff --git a/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java b/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java
index 39c3cc6..5ecf56e 100644
--- a/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java
+++ b/wicket-core/src/main/java/org/apache/wicket/ajax/AbstractAjaxTimerBehavior.java
@@ -18,9 +18,7 @@ package org.apache.wicket.ajax;
 
 import org.apache.wicket.Component;
 import org.apache.wicket.Page;
-import org.apache.wicket.core.util.string.JavaScriptUtils;
 import org.apache.wicket.markup.head.IHeaderResponse;
-import org.apache.wicket.markup.head.JavaScriptHeaderItem;
 import org.apache.wicket.markup.head.OnLoadHeaderItem;
 import org.apache.wicket.util.time.Duration;
 
@@ -36,7 +34,6 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav
 {
 	private static final long serialVersionUID = 1L;
 
-	private static final String WICKET_TIMERS_ID = AbstractAjaxTimerBehavior.class.getSimpleName() + "-timers";
 	/** The update interval */
 	private Duration updateInterval;
 
@@ -88,10 +85,6 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav
 	{
 		super.renderHead(component, response);
 
-		response.render(JavaScriptHeaderItem.forScript(
-			"if (typeof(Wicket.TimerHandles) === 'undefined') {Wicket.TimerHandles = {}}",
-			WICKET_TIMERS_ID));
-
 		if (component.getRequestCycle().find(AjaxRequestTarget.class) == null)
 		{
 			// complete page is rendered, so timeout has to be rendered again
@@ -112,22 +105,12 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav
 	protected final String getJsTimeoutCall(final Duration updateInterval)
 	{
 		CharSequence js = getCallbackScript();
-		js = JavaScriptUtils.escapeQuotes(js);
 
-		String timeoutHandle = getTimeoutHandle();
-		// this might look strange, but it is necessary for IE not to leak :(
-		return timeoutHandle+" = setTimeout('" + js + "', " +
-			updateInterval.getMilliseconds() + ')';
+		return String.format("Wicket.Timer.set('%s', function(){%s}, %d);",
+				getComponent().getMarkupId(), js, updateInterval.getMilliseconds());
 	}
 
 	/**
-	 * @return the name of the handle that is used to stop any scheduled timer
-	 */
-	private String getTimeoutHandle() {
-		return "Wicket.TimerHandles['"+getComponent().getMarkupId() + "']";
-	}
-	
-	/**
 	 * 
 	 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(AjaxRequestTarget)
 	 */
@@ -218,9 +201,7 @@ public abstract class AbstractAjaxTimerBehavior extends AbstractDefaultAjaxBehav
 		{
 			hasTimeout = false;
 
-			String timeoutHandle = getTimeoutHandle();
-			headerResponse.render(OnLoadHeaderItem.forScript("clearTimeout(" + timeoutHandle
-				+ "); delete " + timeoutHandle + ";"));
+			headerResponse.render(OnLoadHeaderItem.forScript("Wicket.Timer.clear('" + getComponent().getMarkupId() + "');"));
 		}
 	}
 
