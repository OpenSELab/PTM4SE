diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java
index f3146d1..d7af5f7 100644
--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java
+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java
@@ -33,6 +33,8 @@ import org.apache.wicket.markup.repeater.RepeatingView;
 import org.apache.wicket.markup.repeater.data.IDataProvider;
 import org.apache.wicket.model.IModel;
 import org.apache.wicket.util.string.Strings;
+import org.apache.wicket.util.visit.IVisit;
+import org.apache.wicket.util.visit.IVisitor;
 
 
 /**
@@ -109,9 +111,9 @@ public class DataTable<T> extends Panel implements IPageableItems
 
 	private final List<IColumn<T>> columns;
 
-	private final RepeatingView topToolbars;
+	private final ToolbarsContainer topToolbars;
 
-	private final RepeatingView bottomToolbars;
+	private final ToolbarsContainer bottomToolbars;
 
 	/**
 	 * Constructor
@@ -320,14 +322,14 @@ public class DataTable<T> extends Panel implements IPageableItems
 		return datagrid.getItemCount();
 	}
 
-	private void addToolbar(final AbstractToolbar toolbar, final RepeatingView container)
+	private void addToolbar(final AbstractToolbar toolbar, final ToolbarsContainer container)
 	{
 		if (toolbar == null)
 		{
 			throw new IllegalArgumentException("argument [toolbar] cannot be null");
 		}
 
-		container.add(toolbar);
+		container.getRepeatingView().add(toolbar);
 	}
 
 	/**
@@ -392,14 +394,18 @@ public class DataTable<T> extends Panel implements IPageableItems
 	}
 
 	/**
-	 * This class acts as a repeater that will contain the toolbar.
+	 * This class acts as a repeater that will contain the toolbar. It makes sure that the table row
+	 * group (e.g. thead) tags are only visible when they contain rows in accordance with the HTML
+	 * specification.
 	 * 
 	 * @author igor.vaynberg
 	 */
-	private static class ToolbarsContainer extends RepeatingView
+	private static class ToolbarsContainer extends WebMarkupContainer
 	{
 		private static final long serialVersionUID = 1L;
 
+		private final RepeatingView toolbars;
+
 		/**
 		 * Constructor
 		 * 
@@ -408,6 +414,41 @@ public class DataTable<T> extends Panel implements IPageableItems
 		private ToolbarsContainer(final String id)
 		{
 			super(id);
+			toolbars = new RepeatingView("toolbars");
+			add(toolbars);
+		}
+
+		public RepeatingView getRepeatingView()
+		{
+			return toolbars;
+		}
+
+		@Override
+		public boolean isVisible()
+		{
+			if (!super.isVisible())
+			{
+				return false;
+			}
+
+			toolbars.configure();
+
+			Boolean visible = toolbars.visitChildren(new IVisitor<Component, Boolean>()
+			{
+				public void component(Component object, IVisit<Boolean> visit)
+				{
+					object.configure();
+					if (object.isVisible())
+					{
+						visit.stop(Boolean.TRUE);
+					}
+					else
+					{
+						visit.dontGoDeeper();
+					}
+				}
+			});
+			return visible == Boolean.TRUE;
 		}
 	}
 }
