diff --git a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java
index bd62e47..77dd7e1 100644
--- a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java
+++ b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java
@@ -40,6 +40,7 @@ import org.apache.wicket.model.IComponentInheritedModel;
 import org.apache.wicket.model.IModel;
 import org.apache.wicket.model.IWrapModel;
 import org.apache.wicket.settings.IDebugSettings;
+import org.apache.wicket.util.lang.Args;
 import org.apache.wicket.util.lang.Generics;
 import org.apache.wicket.util.string.ComponentStrings;
 import org.apache.wicket.util.string.Strings;
@@ -129,10 +130,7 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp
 	{
 		for (Component child : childs)
 		{
-			if (child == null)
-			{
-				throw new IllegalArgumentException("argument child may not be null");
-			}
+			Args.notNull(child, "child");
 
 			MarkupContainer parent = getParent();
 			while (parent != null)
@@ -141,14 +139,17 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp
 				{
 					String msg = "You can not add a component's parent as child to the component (loop): Component: " +
 						this.toString(false) + "; parent == child: " + parent.toString(false);
+
 					if (child instanceof Border.BorderBodyContainer)
 					{
 						msg += ". Please consider using Border.addToBorder(new " +
 							this.getClass().getSimpleName() + "(\"" + this.getId() +
 							"\", ...) instead of add(...)";
 					}
+
 					throw new WicketRuntimeException(msg);
 				}
+
 				parent = parent.getParent();
 			}
 
@@ -899,10 +900,7 @@ public abstract class MarkupContainer extends Component implements Iterable<Comp
 	private final void addedComponent(final Component child)
 	{
 		// Check for degenerate case
-		if (child == this)
-		{
-			throw new IllegalArgumentException("Component can't be added to itself");
-		}
+		Args.notNull(child, "child");
 
 		MarkupContainer parent = child.getParent();
 		if (parent != null)
diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/Markup.java b/wicket-core/src/main/java/org/apache/wicket/markup/Markup.java
index 6bc5bd8..2d27638 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/Markup.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/Markup.java
@@ -25,7 +25,6 @@ import java.util.List;
 import org.apache.wicket.util.lang.Args;
 import org.apache.wicket.util.resource.ResourceStreamNotFoundException;
 import org.apache.wicket.util.string.AppendingStringBuffer;
-import org.apache.wicket.util.string.Strings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -187,10 +186,7 @@ public class Markup implements IMarkupFragment
 
 	public final IMarkupFragment find(final String id)
 	{
-		if (Strings.isEmpty(id))
-		{
-			throw new IllegalArgumentException("Parameter 'id' must not be null or empty");
-		}
+		Args.notEmpty(id, "id");
 
 		MarkupStream stream = new MarkupStream(this);
 		stream.setCurrentIndex(0);
diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java
index e183553..9a4a1d3 100644
--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java
+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java
@@ -23,6 +23,7 @@ import org.apache.wicket.markup.IMarkupFragment;
 import org.apache.wicket.markup.MarkupStream;
 import org.apache.wicket.markup.html.internal.HtmlHeaderContainer;
 import org.apache.wicket.markup.html.list.AbstractItem;
+import org.apache.wicket.markup.resolver.IComponentResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -95,6 +96,24 @@ public final class DefaultMarkupSourcingStrategy implements IMarkupSourcingStrat
 			return markup;
 		}
 
+		// If the child has not been directly added to the container, but via a
+		// TransparentWebMarkupContainer, than we are in trouble. In general Wicket iterates over
+		// the markup elements and searches for associated components, not the other way around.
+		// Because of TransparentWebMarkupContainer (or more generally resolvers), there is no
+		// "synchronous" search possible.
+		for (Component ch : container)
+		{
+			if ((ch != child) && (ch instanceof MarkupContainer) &&
+				(ch instanceof IComponentResolver))
+			{
+				markup = ((MarkupContainer)ch).getMarkup(child);
+				if (markup != null)
+				{
+					return markup;
+				}
+			}
+		}
+
 		// This is to make migration for Items from 1.4 to 1.5 more easy
 		if (Character.isDigit(child.getId().charAt(0)))
 		{
