diff --git a/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java b/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java
index e665aaf..e7e32d1 100644
--- a/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java
+++ b/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebResponse.java
@@ -173,29 +173,39 @@ public class ServletWebResponse extends WebResponse
 	{
 		Args.notNull(url, "url");
 
+		UrlRenderer urlRenderer = RequestCycle.get().getUrlRenderer();
+
+		Url originalUrl = Url.parse(url);
+
 		/*
 		  WICKET-4645 - always pass absolute url to the web container for encoding
 		  because when REDIRECT_TO_BUFFER is in use Wicket may render PageB when
 		  PageA is actually the requested one and the web container cannot resolve
 		  the base url properly
 		 */
-		UrlRenderer urlRenderer = RequestCycle.get().getUrlRenderer();
-		Url relativeUrl = Url.parse(url);
-		String fullUrl = urlRenderer.renderFullUrl(relativeUrl);
+		String fullUrl = urlRenderer.renderFullUrl(originalUrl);
 		String encodedFullUrl = httpServletResponse.encodeURL(fullUrl);
-		final String encodedRelativeUrl;
-		if (fullUrl.equals(encodedFullUrl))
+
+		final String encodedUrl;
+		if (originalUrl.isFull())
 		{
-			// no encoding happened so just reuse the relative url
-			encodedRelativeUrl = url.toString();
+			encodedUrl = encodedFullUrl;
 		}
 		else
 		{
-			// get the relative url with the jsessionid encoded in it
-			Url _encoded = Url.parse(encodedFullUrl);
-			encodedRelativeUrl = urlRenderer.renderRelativeUrl(_encoded);
+			if (fullUrl.equals(encodedFullUrl))
+			{
+				// no encoding happened so just reuse the original url
+				encodedUrl = url.toString();
+			}
+			else
+			{
+				// get the relative url with the jsessionid encoded in it
+				Url _encoded = Url.parse(encodedFullUrl);
+				encodedUrl = urlRenderer.renderRelativeUrl(_encoded);
+			}
 		}
-		return encodedRelativeUrl;
+		return encodedUrl;
 	}
 
 	@Override
@@ -203,29 +213,38 @@ public class ServletWebResponse extends WebResponse
 	{
 		Args.notNull(url, "url");
 
+		UrlRenderer urlRenderer = RequestCycle.get().getUrlRenderer();
+
+		Url originalUrl = Url.parse(url);
+
 		/*
-		  WICKET-4854 - always pass absolute url to the web container for encoding
-		  because when REDIRECT_TO_BUFFER is in use Wicket may render PageB when
-		  PageA is actually the requested one and the web container cannot resolve
-		  the base url properly
+		 * WICKET-4645 - always pass absolute url to the web container for encoding because when
+		 * REDIRECT_TO_BUFFER is in use Wicket may render PageB when PageA is actually the requested
+		 * one and the web container cannot resolve the base url properly
 		 */
-		UrlRenderer urlRenderer = new UrlRenderer(webRequest);
-		Url relativeUrl = Url.parse(url);
-		String fullUrl = urlRenderer.renderFullUrl(relativeUrl);
+		String fullUrl = urlRenderer.renderFullUrl(originalUrl);
 		String encodedFullUrl = httpServletResponse.encodeRedirectURL(fullUrl);
-		final String encodedRelativeUrl;
-		if (fullUrl.equals(encodedFullUrl))
+
+		final String encodedUrl;
+		if (originalUrl.isFull())
 		{
-			// no encoding happened so just reuse the relative url
-			encodedRelativeUrl = url.toString();
+			encodedUrl = encodedFullUrl;
 		}
 		else
 		{
-			// get the relative url with the jsessionid encoded in it
-			Url _encoded = Url.parse(encodedFullUrl);
-			encodedRelativeUrl = urlRenderer.renderRelativeUrl(_encoded);
+			if (fullUrl.equals(encodedFullUrl))
+			{
+				// no encoding happened so just reuse the original url
+				encodedUrl = url.toString();
+			}
+			else
+			{
+				// get the relative url with the jsessionid encoded in it
+				Url _encoded = Url.parse(encodedFullUrl);
+				encodedUrl = urlRenderer.renderRelativeUrl(_encoded);
+			}
 		}
-		return encodedRelativeUrl;
+		return encodedUrl;
 	}
 
 	@Override
