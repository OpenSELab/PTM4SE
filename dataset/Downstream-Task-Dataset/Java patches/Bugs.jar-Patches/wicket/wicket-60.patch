diff --git a/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java b/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java
index 08f5b26..dba4976 100644
--- a/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java
+++ b/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java
@@ -22,6 +22,7 @@ import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import org.apache.wicket.WicketRuntimeException;
 import org.apache.wicket.request.resource.ResourceReference.Key;
 import org.apache.wicket.util.file.File;
 import org.apache.wicket.util.lang.Args;
@@ -49,7 +50,7 @@ public class CachingResourceStreamLocator implements IResourceStreamLocator
 	 */
 	private static interface IResourceStreamReference
 	{
-		String getReference();
+		IResourceStream getReference();
 	}
 
 	/**
@@ -61,7 +62,7 @@ public class CachingResourceStreamLocator implements IResourceStreamLocator
 	{
 		private final static NullResourceStreamReference INSTANCE = new NullResourceStreamReference();
 
-		public String getReference()
+		public IResourceStream getReference()
 		{
 			return null;
 		}
@@ -79,9 +80,9 @@ public class CachingResourceStreamLocator implements IResourceStreamLocator
 			this.fileName = fileName;
 		}
 
-		public String getReference()
+		public FileResourceStream getReference()
 		{
-			return fileName;
+			return new FileResourceStream(new File(fileName));
 		}
 	}
 
@@ -97,9 +98,18 @@ public class CachingResourceStreamLocator implements IResourceStreamLocator
 			this.url = url;
 		}
 
-		public String getReference()
+		public UrlResourceStream getReference()
 		{
-			return url;
+			try
+			{
+				return new UrlResourceStream(new URL(url));
+			}
+			catch (MalformedURLException e)
+			{
+				// should not ever happen. The cached url is created by previously existing URL
+				// instance
+				throw new WicketRuntimeException(e);
+			}
 		}
 	}
 
@@ -133,16 +143,21 @@ public class CachingResourceStreamLocator implements IResourceStreamLocator
 	public IResourceStream locate(Class<?> clazz, String path)
 	{
 		Key key = new Key(clazz.getName(), path, null, null, null);
-		IResourceStream resourceStream = getCopyFromCache(key);
+		IResourceStreamReference resourceStreamReference = cache.get(key);
 
-		if (resourceStream == null)
+		final IResourceStream result;
+		if (resourceStreamReference == null)
 		{
-			resourceStream = delegate.locate(clazz, path);
+			result = delegate.locate(clazz, path);
 
-			updateCache(key, resourceStream);
+			updateCache(key, result);
+		}
+		else
+		{
+			result = resourceStreamReference.getReference();
 		}
 
-		return resourceStream;
+		return result;
 	}
 
 	private void updateCache(Key key, IResourceStream stream)
@@ -165,60 +180,25 @@ public class CachingResourceStreamLocator implements IResourceStreamLocator
 		}
 	}
 
-	/**
-	 * Make a copy before returning an item from the cache as resource streams are not thread-safe.
-	 * 
-	 * @param key
-	 *            the cache key
-	 * @return the cached File or Url resource stream
-	 */
-	private IResourceStream getCopyFromCache(Key key)
-	{
-		final IResourceStreamReference orig = cache.get(key);
-		if (NullResourceStreamReference.INSTANCE == orig)
-		{
-			return null;
-		}
-
-		if (orig instanceof UrlResourceStreamReference)
-		{
-			UrlResourceStreamReference resourceStreamReference = (UrlResourceStreamReference)orig;
-			String url = resourceStreamReference.getReference();
-			try
-			{
-				return new UrlResourceStream(new URL(url));
-			}
-			catch (MalformedURLException e)
-			{
-				return null;
-			}
-		}
-
-		if (orig instanceof FileResourceStreamReference)
-		{
-			FileResourceStreamReference resourceStreamReference = (FileResourceStreamReference)orig;
-			String absolutePath = resourceStreamReference.getReference();
-			return new FileResourceStream(new File(absolutePath));
-		}
-
-		return null;
-	}
-
 	public IResourceStream locate(Class<?> scope, String path, String style, String variation,
 		Locale locale, String extension, boolean strict)
 	{
 		Key key = new Key(scope.getName(), path, locale, style, variation);
-		IResourceStream resourceStream = getCopyFromCache(key);
+		IResourceStreamReference resourceStreamReference = cache.get(key);
 
-		if (resourceStream == null)
+		final IResourceStream result;
+		if (resourceStreamReference == null)
 		{
-			resourceStream = delegate.locate(scope, path, style, variation, locale, extension,
-				strict);
+			result = delegate.locate(scope, path, style, variation, locale, extension, strict);
 
-			updateCache(key, resourceStream);
+			updateCache(key, result);
+		}
+		else
+		{
+			result = resourceStreamReference.getReference();
 		}
 
-		return resourceStream;
+		return result;
 	}
 
 	public ResourceNameIterator newResourceNameIterator(String path, Locale locale, String style,
