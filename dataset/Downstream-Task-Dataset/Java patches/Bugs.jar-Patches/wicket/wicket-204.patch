diff --git a/wicket-request/src/main/java/org/apache/wicket/request/http/handler/RedirectRequestHandler.java b/wicket-request/src/main/java/org/apache/wicket/request/http/handler/RedirectRequestHandler.java
index e21856f..13c99fa 100644
--- a/wicket-request/src/main/java/org/apache/wicket/request/http/handler/RedirectRequestHandler.java
+++ b/wicket-request/src/main/java/org/apache/wicket/request/http/handler/RedirectRequestHandler.java
@@ -59,9 +59,10 @@ public class RedirectRequestHandler implements IRequestHandler
 	public RedirectRequestHandler(final String redirectUrl, final int status)
 	{
 		if ((status != HttpServletResponse.SC_MOVED_PERMANENTLY) &&
-			(status != HttpServletResponse.SC_MOVED_TEMPORARILY))
+			(status != HttpServletResponse.SC_MOVED_TEMPORARILY) &&
+			(status != HttpServletResponse.SC_SEE_OTHER))
 		{
-			throw new IllegalStateException("Status must be either 301 or 302, but was: " + status);
+			throw new IllegalStateException("Status must be either 301, 302 or 303, but was: " + status);
 		}
 		this.redirectUrl = redirectUrl;
 		this.status = status;
@@ -93,17 +94,19 @@ public class RedirectRequestHandler implements IRequestHandler
 	{
 		final String location;
 
-		if (redirectUrl.startsWith("/"))
+		final String url = getRedirectUrl();
+
+		if (url.charAt(0) == '/')
 		{
 			// context-absolute url
-			location = requestCycle.getUrlRenderer().renderContextRelativeUrl(redirectUrl);
+			location = requestCycle.getUrlRenderer().renderContextRelativeUrl(url);
 		}
 		else
 		{
 			// if relative url, servlet container will translate to absolute as
 			// per the servlet spec
 			// if absolute url still do the same
-			location = redirectUrl;
+			location = url;
 		}
 
 		WebResponse response = (WebResponse)requestCycle.getResponse();
@@ -114,7 +117,7 @@ public class RedirectRequestHandler implements IRequestHandler
 		}
 		else
 		{
-			response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);
+			response.setStatus(status);
 			response.setHeader("Location", location);
 		}
 	}
