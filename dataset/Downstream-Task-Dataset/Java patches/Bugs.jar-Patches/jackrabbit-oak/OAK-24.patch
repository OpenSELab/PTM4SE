diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java
index a1aa87d..1b02d0a 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java
@@ -18,8 +18,22 @@
  */
 package org.apache.jackrabbit.oak.core;
 
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Preconditions.checkState;
+import static com.google.common.collect.Iterables.filter;
+import static com.google.common.collect.Iterables.indexOf;
+import static org.apache.jackrabbit.oak.api.Tree.Status.EXISTING;
+import static org.apache.jackrabbit.oak.api.Tree.Status.MODIFIED;
+import static org.apache.jackrabbit.oak.api.Tree.Status.NEW;
+import static org.apache.jackrabbit.oak.api.Type.STRING;
+import static org.apache.jackrabbit.oak.commons.PathUtils.elements;
+import static org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute;
+import static org.apache.jackrabbit.oak.spi.state.NodeStateUtils.isHidden;
+
 import java.util.Collections;
 import java.util.Set;
+
 import javax.annotation.CheckForNull;
 import javax.annotation.Nonnull;
 
@@ -36,19 +50,6 @@ import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
 import org.apache.jackrabbit.oak.spi.state.NodeState;
 import org.apache.jackrabbit.oak.spi.state.PropertyBuilder;
 
-import static com.google.common.base.Preconditions.checkArgument;
-import static com.google.common.base.Preconditions.checkNotNull;
-import static com.google.common.base.Preconditions.checkState;
-import static com.google.common.collect.Iterables.filter;
-import static com.google.common.collect.Iterables.indexOf;
-import static org.apache.jackrabbit.oak.api.Tree.Status.EXISTING;
-import static org.apache.jackrabbit.oak.api.Tree.Status.MODIFIED;
-import static org.apache.jackrabbit.oak.api.Tree.Status.NEW;
-import static org.apache.jackrabbit.oak.api.Type.STRING;
-import static org.apache.jackrabbit.oak.commons.PathUtils.elements;
-import static org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute;
-import static org.apache.jackrabbit.oak.spi.state.NodeStateUtils.isHidden;
-
 public class MutableTree extends AbstractTree {
 
     /**
@@ -86,7 +87,7 @@ public class MutableTree extends AbstractTree {
 
     @Override
     protected boolean isNew() {
-        return !getBase().exists();
+        return nodeBuilder.isNew();
     }
 
     @Override
@@ -335,15 +336,6 @@ public class MutableTree extends AbstractTree {
     }
 
     //---------------------------------------------------------< internal >---
-
-    private NodeState getBase() {
-        if (parent == null) {
-            return root.getBaseState();
-        } else {
-            return parent.getBase().getChildNode(name);
-        }
-    }
-
     /**
      * Set the parent and name of this tree.
      * @param parent  parent of this tree
@@ -480,7 +472,7 @@ public class MutableTree extends AbstractTree {
      * Internal method for checking whether this node exists and is visible
      * (i.e. not hidden).
      *
-     * @return {@true} if the node is visible, {@code false} if not
+     * @return {@code true} if the node is visible, {@code false} if not
      */
     private boolean isVisible() {
         return !isHidden(name) && nodeBuilder.exists();
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java
index aa9d7d8..5058a8b 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java
@@ -34,7 +34,7 @@ public class KernelNodeBuilder extends MemoryNodeBuilder implements FastCopyMove
 
     private NodeState base = null;
 
-    protected NodeState rootBase = null;
+    private NodeState rootBase = null;
 
     KernelNodeBuilder(MemoryNodeBuilder parent, String name, KernelRootBuilder root) {
         super(parent, name);
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java
index dfe7596..87b2a0d 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java
@@ -117,7 +117,8 @@ class KernelRootBuilder extends MemoryNodeBuilder implements FastCopyMove {
         purge();
         branch.rebase();
         NodeState head = branch.getHead();
-        reset(head);
+        reset(branch.getBase());
+        super.reset(head);
         return head;
     }
 
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java
index 00136aa..a83ca87 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java
@@ -260,7 +260,7 @@ public class MemoryNodeBuilder implements NodeBuilder {
 
     @Override
     public boolean isNew() {
-        return exists() && !base.exists();
+        return exists() && !getBaseState().exists();
     }
 
     @Override
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java
index 4b10bd0..3837974 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java
@@ -18,11 +18,13 @@ package org.apache.jackrabbit.oak.plugins.mongomk;
 
 import org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder;
 import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
+import org.apache.jackrabbit.oak.spi.state.NodeState;
 
 /**
  * A node builder implementation for MongoMK.
  */
 class MongoNodeBuilder extends MemoryNodeBuilder {
+    private NodeState base;
 
     protected MongoNodeBuilder(MongoNodeState base) {
         super(base);
@@ -33,6 +35,14 @@ class MongoNodeBuilder extends MemoryNodeBuilder {
     }
 
     @Override
+    public NodeState getBaseState() {
+        if (base == null) {
+            base = getParent().getBaseState().getChildNode(getName());
+        }
+        return base;
+    }
+
+    @Override
     protected MongoNodeBuilder createChildBuilder(String name) {
         return new MongoNodeBuilder(this, name);
     }
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java
index 7a1d815..aa6460e 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java
@@ -98,7 +98,8 @@ class MongoRootBuilder extends MongoNodeBuilder {
         purge();
         branch.rebase();
         NodeState head = branch.getHead();
-        reset(head);
+        reset(branch.getBase());
+        super.reset(head);
         return head;
     }
 
