diff --git a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java
index 71f12f9..07e0ae3 100644
--- a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java
+++ b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/NodeImpl.java
@@ -1424,6 +1424,14 @@ public class NodeImpl<T extends NodeDelegate> extends ItemImpl<T> implements Nod
             throws RepositoryException {
         final String oakName = getOakName(checkNotNull(jcrName));
         return perform(new ItemWriteOperation<Property>("internalRemoveProperty") {
+            @Override
+            public void checkPreconditions() throws RepositoryException {
+                super.checkPreconditions();
+                if (!isCheckedOut()) {
+                    throw new VersionException(
+                            "Cannot remove property. Node is checked in.");
+                }
+            }
             @Nonnull
             @Override
             public Property perform() throws RepositoryException {
diff --git a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java
index 52ca344..7a54197 100644
--- a/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java
+++ b/oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/PropertyImpl.java
@@ -37,6 +37,7 @@ import javax.jcr.Value;
 import javax.jcr.ValueFactory;
 import javax.jcr.ValueFormatException;
 import javax.jcr.nodetype.PropertyDefinition;
+import javax.jcr.version.VersionException;
 
 import org.apache.jackrabbit.oak.api.Tree.Status;
 import org.apache.jackrabbit.oak.api.Type;
@@ -110,6 +111,15 @@ public class PropertyImpl extends ItemImpl<PropertyDelegate> implements Property
     public void remove() throws RepositoryException {
         sessionDelegate.performVoid(new ItemWriteOperation("remove") {
             @Override
+            public void checkPreconditions() throws RepositoryException {
+                super.checkPreconditions();
+                if (!getParent().isCheckedOut()) {
+                    throw new VersionException(
+                            "Cannot set property. Node is checked in.");
+                }
+            }
+
+            @Override
             public void performVoid() {
                 dlg.remove();
             }
@@ -451,6 +461,15 @@ public class PropertyImpl extends ItemImpl<PropertyDelegate> implements Property
             throws RepositoryException {
         sessionDelegate.performVoid(new ItemWriteOperation("internalSetValue") {
             @Override
+            public void checkPreconditions() throws RepositoryException {
+                super.checkPreconditions();
+                if (!getParent().isCheckedOut()) {
+                    throw new VersionException(
+                            "Cannot set property. Node is checked in.");
+                }
+            }
+
+            @Override
             public void performVoid() throws RepositoryException {
                 Type<?> type = dlg.getPropertyState().getType();
                 if (type.isArray()) {
@@ -478,6 +497,15 @@ public class PropertyImpl extends ItemImpl<PropertyDelegate> implements Property
 
         sessionDelegate.performVoid(new ItemWriteOperation("internalSetValue") {
             @Override
+            public void checkPreconditions() throws RepositoryException {
+                super.checkPreconditions();
+                if (!getParent().isCheckedOut()) {
+                    throw new VersionException(
+                            "Cannot set property. Node is checked in.");
+                }
+            }
+
+            @Override
             public void performVoid() throws RepositoryException {
                 Type<?> type = dlg.getPropertyState().getType();
                 if (!type.isArray()) {
