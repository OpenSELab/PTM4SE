diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java
index 2e32b74..5d7b137 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java
@@ -20,6 +20,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
@@ -53,7 +54,7 @@ public class Commit {
     private final Revision revision;
     private HashMap<String, UpdateOp> operations = new LinkedHashMap<String, UpdateOp>();
     private JsopWriter diff = new JsopStream();
-    private List<Revision> collisions = new ArrayList<Revision>();
+    private Set<Revision> collisions = new LinkedHashSet<Revision>();
 
     /**
      * List of all node paths which have been modified in this commit. In addition to the nodes
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java
index 770cc9c..8b4eb79 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java
@@ -1210,7 +1210,7 @@ public final class DocumentNodeStore
     @Override
     public NodeState merge(@Nonnull NodeBuilder builder,
                            @Nonnull CommitHook commitHook,
-                           @Nullable CommitInfo info)
+                           @Nonnull CommitInfo info)
             throws CommitFailedException {
         return asDocumentRootBuilder(builder).merge(commitHook, info);
     }
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java
index 35a2306..e685b36 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java
@@ -581,29 +581,45 @@ public final class NodeDocument extends Document implements CachedNodeDocument{
      * @return the revision, or null if deleted
      */
     @CheckForNull
-    public Revision getNewestRevision(RevisionContext context,
-                                      Revision changeRev,
-                                      CollisionHandler handler) {
-        // no need to look at all commits. the primary document
-        // always contains at least one commit, including all
-        // branch commits which are not yet merged
+    public Revision getNewestRevision(final RevisionContext context,
+                                      final Revision changeRev,
+                                      final CollisionHandler handler) {
+        final Map<Revision, String> validRevisions = Maps.newHashMap();
+        Predicate<Revision> predicate = new Predicate<Revision>() {
+            @Override
+            public boolean apply(Revision input) {
+                if (input.equals(changeRev)) {
+                    return false;
+                }
+                if (isValidRevision(context, input, null, changeRev, validRevisions)) {
+                    return true;
+                }
+                handler.concurrentModification(input);
+                return false;
+            }
+        };
+
+        Revision newestRev = null;
+        // check local commits first
         SortedMap<Revision, String> revisions = getLocalRevisions();
         SortedMap<Revision, String> commitRoots = getLocalCommitRoot();
-        Revision newestRev = null;
-        for (Revision r : Iterables.mergeSorted(
+        Iterator<Revision> it = filter(Iterables.mergeSorted(
                 Arrays.asList(revisions.keySet(), commitRoots.keySet()),
-                revisions.comparator())) {
-            if (!r.equals(changeRev)) {
-                if (isValidRevision(context, r, null, changeRev, new HashMap<Revision, String>())) {
-                    newestRev = r;
-                    // found newest revision, no need to check more revisions
-                    // revisions are sorted newest first
-                    break;
-                } else {
-                    handler.concurrentModification(r);
-                }
+                revisions.comparator()), predicate).iterator();
+        if (it.hasNext()) {
+            newestRev = it.next();
+        } else {
+            // check full history (only needed in rare cases)
+            it = filter(Iterables.mergeSorted(
+                    Arrays.asList(
+                            getValueMap(REVISIONS).keySet(),
+                            getValueMap(COMMIT_ROOT).keySet()),
+                    revisions.comparator()), predicate).iterator();
+            if (it.hasNext()) {
+                newestRev = it.next();
             }
         }
+
         if (newestRev == null) {
             return null;
         }
