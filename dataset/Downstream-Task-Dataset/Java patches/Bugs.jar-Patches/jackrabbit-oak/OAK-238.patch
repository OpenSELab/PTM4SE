diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java
index 48bc82c..386d010 100755
--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java
+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositorySidegrade.java
@@ -18,23 +18,29 @@ package org.apache.jackrabbit.oak.upgrade;
 
 import java.util.ArrayList;
 import java.util.Calendar;
+import java.util.Comparator;
 import java.util.List;
 import java.util.Set;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import javax.jcr.RepositoryException;
 
+import com.google.common.base.Function;
 import org.apache.jackrabbit.oak.Oak;
 import org.apache.jackrabbit.oak.api.CommitFailedException;
+import org.apache.jackrabbit.oak.commons.PathUtils;
 import org.apache.jackrabbit.oak.plugins.nodetype.write.InitialContent;
 import org.apache.jackrabbit.oak.spi.commit.CommitHook;
 import org.apache.jackrabbit.oak.spi.commit.CommitInfo;
 import org.apache.jackrabbit.oak.spi.commit.EditorHook;
 import org.apache.jackrabbit.oak.spi.lifecycle.RepositoryInitializer;
+import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;
 import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
 import org.apache.jackrabbit.oak.spi.state.NodeState;
 import org.apache.jackrabbit.oak.spi.state.NodeStore;
 import org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.LoggingCompositeHook;
+import org.apache.jackrabbit.oak.upgrade.cli.node.TarNodeStore;
 import org.apache.jackrabbit.oak.upgrade.nodestate.NameFilteringNodeState;
 import org.apache.jackrabbit.oak.upgrade.nodestate.report.LoggingReporter;
 import org.apache.jackrabbit.oak.upgrade.nodestate.report.ReportingNodeState;
@@ -47,7 +53,10 @@ import org.slf4j.LoggerFactory;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.ImmutableSet.copyOf;
 import static com.google.common.collect.ImmutableSet.of;
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Lists.transform;
 import static com.google.common.collect.Sets.union;
+import static java.util.Collections.sort;
 import static org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.DEFAULT_EXCLUDE_PATHS;
 import static org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.DEFAULT_INCLUDE_PATHS;
 import static org.apache.jackrabbit.oak.upgrade.RepositoryUpgrade.DEFAULT_MERGE_PATHS;
@@ -256,14 +265,19 @@ public class RepositorySidegrade {
     }
 
     private void removeCheckpointReferences(NodeBuilder builder) throws CommitFailedException {
-        // removing references to the checkpoints, 
+        // removing references to the checkpoints,
         // which don't exist in the new repository
         builder.setChildNode(":async");
     }
 
     private void copyState(NodeState sourceRoot, NodeBuilder targetRoot) throws CommitFailedException {
         copyWorkspace(sourceRoot, targetRoot);
-        removeCheckpointReferences(targetRoot);
+
+        if (!copyCheckpoints(targetRoot)) {
+            LOG.info("Copying checkpoints is not supported for this combination of node stores");
+            removeCheckpointReferences(targetRoot);
+        }
+
         if (!versionCopyConfiguration.skipOrphanedVersionsCopy()) {
             copyVersionStorage(sourceRoot, targetRoot, versionCopyConfiguration);
         }
@@ -296,4 +310,77 @@ public class RepositorySidegrade {
             copyProperties(sourceRoot, targetRoot);
         }
     }
-}
\ No newline at end of file
+
+    private boolean copyCheckpoints(NodeBuilder targetRoot) {
+        if (!(source instanceof TarNodeStore && target instanceof TarNodeStore)) {
+            return false;
+        }
+
+        TarNodeStore sourceTarNS = (TarNodeStore) source;
+        TarNodeStore targetTarNS = (TarNodeStore) target;
+
+        NodeState srcSuperRoot = sourceTarNS.getSuperRoot();
+        NodeBuilder builder = targetTarNS.getSuperRoot().builder();
+
+        String previousRoot = null;
+        for (String checkpoint : getCheckpointPaths(srcSuperRoot)) {
+            // copy the checkpoint without the root
+            NodeStateCopier.builder()
+                    .include(checkpoint)
+                    .exclude(checkpoint + "/root")
+                    .copy(srcSuperRoot, builder);
+
+            // reference the previousRoot or targetRoot as a new checkpoint root
+            NodeState baseRoot;
+            if (previousRoot == null) {
+                baseRoot = targetRoot.getNodeState();
+            } else {
+                baseRoot = getBuilder(builder, previousRoot).getNodeState();
+            }
+            NodeBuilder targetParent = getBuilder(builder, checkpoint);
+            targetParent.setChildNode("root", baseRoot);
+            previousRoot = checkpoint + "/root";
+
+            // apply diff changes
+            NodeStateCopier.builder()
+                    .include(checkpoint + "/root")
+                    .copy(srcSuperRoot, builder);
+        }
+
+        targetTarNS.setSuperRoot(builder);
+        return true;
+   }
+
+    /**
+     * Return all checkpoint paths, sorted by their "created" property, descending.
+     *
+     * @param superRoot
+     * @return
+     */
+    private static List<String> getCheckpointPaths(NodeState superRoot) {
+        List<ChildNodeEntry> checkpoints = newArrayList(superRoot.getChildNode("checkpoints").getChildNodeEntries().iterator());
+        sort(checkpoints, new Comparator<ChildNodeEntry>() {
+            @Override
+            public int compare(ChildNodeEntry o1, ChildNodeEntry o2) {
+                long c1 = o1.getNodeState().getLong("created");
+                long c2 = o1.getNodeState().getLong("created");
+                return -Long.compare(c1, c2);
+            }
+        });
+        return transform(checkpoints, new Function<ChildNodeEntry, String>() {
+            @Nullable
+            @Override
+            public String apply(@Nullable ChildNodeEntry input) {
+                return "/checkpoints/" + input.getName();
+            }
+        });
+    }
+
+    private static NodeBuilder getBuilder(NodeBuilder root, String path) {
+        NodeBuilder builder = root;
+        for (String element : PathUtils.elements(path)) {
+            builder = builder.child(element);
+        }
+        return builder;
+    }
+}
diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java
index 43a26b5..94aeb49 100644
--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java
+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentFactory.java
@@ -20,14 +20,20 @@ import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 
+import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeBuilder;
+import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeState;
 import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeStore;
 import org.apache.jackrabbit.oak.plugins.segment.file.FileStore;
 import org.apache.jackrabbit.oak.plugins.segment.file.FileStore.Builder;
 import org.apache.jackrabbit.oak.spi.blob.BlobStore;
+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
+import org.apache.jackrabbit.oak.spi.state.NodeState;
 import org.apache.jackrabbit.oak.spi.state.NodeStore;
 
 import com.google.common.io.Closer;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 public class SegmentFactory implements NodeStoreFactory {
 
     private final File dir;
@@ -49,9 +55,27 @@ public class SegmentFactory implements NodeStoreFactory {
             builder.withBlobStore(blobStore);
         }
         builder.withMaxFileSize(256).withMemoryMapping(mmap);
-        FileStore fs = builder.build();
+        final FileStore fs = builder.build();
         closer.register(asCloseable(fs));
-        return SegmentNodeStore.builder(fs).build();
+        return new TarNodeStore(SegmentNodeStore.builder(fs).build(), new TarNodeStore.SuperRootProvider() {
+            @Override
+            public void setSuperRoot(NodeBuilder builder) {
+                checkArgument(builder instanceof SegmentNodeBuilder);
+                SegmentNodeBuilder segmentBuilder = (SegmentNodeBuilder) builder;
+                SegmentNodeState lastRoot = (SegmentNodeState) getSuperRoot();
+
+                if (!lastRoot.getRecordId().equals(((SegmentNodeState) segmentBuilder.getBaseState()).getRecordId())) {
+                    throw new IllegalArgumentException("The new head is out of date");
+                }
+
+                fs.setHead(lastRoot, ((SegmentNodeBuilder) builder).getNodeState());
+            }
+
+            @Override
+            public NodeState getSuperRoot() {
+                return fs.getHead();
+            }
+        });
     }
 
     public File getRepositoryDir() {
diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java
index caa53dd..7714b51 100644
--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java
+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/SegmentTarFactory.java
@@ -16,6 +16,7 @@
  */
 package org.apache.jackrabbit.oak.upgrade.cli.node;
 
+import static com.google.common.base.Preconditions.checkArgument;
 import static org.apache.jackrabbit.oak.segment.file.FileStoreBuilder.fileStoreBuilder;
 
 import java.io.Closeable;
@@ -23,10 +24,14 @@ import java.io.File;
 import java.io.IOException;
 
 import com.google.common.io.Closer;
+import org.apache.jackrabbit.oak.segment.SegmentNodeBuilder;
+import org.apache.jackrabbit.oak.segment.SegmentNodeState;
 import org.apache.jackrabbit.oak.segment.SegmentNodeStoreBuilders;
 import org.apache.jackrabbit.oak.segment.file.FileStore;
 import org.apache.jackrabbit.oak.segment.file.FileStoreBuilder;
 import org.apache.jackrabbit.oak.spi.blob.BlobStore;
+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
+import org.apache.jackrabbit.oak.spi.state.NodeState;
 import org.apache.jackrabbit.oak.spi.state.NodeStore;
 
 public class SegmentTarFactory implements NodeStoreFactory {
@@ -45,14 +50,33 @@ public class SegmentTarFactory implements NodeStoreFactory {
 
     @Override
     public NodeStore create(BlobStore blobStore, Closer closer) throws IOException {
-        FileStoreBuilder builder = fileStoreBuilder(new File(dir, "segmentstore"));
+        final FileStoreBuilder builder = fileStoreBuilder(new File(dir, "segmentstore"));
         if (blobStore != null) {
             builder.withBlobStore(blobStore);
         }
         builder.withMaxFileSize(256).withMemoryMapping(mmap);
-        FileStore fs = builder.build();
+        final FileStore fs = builder.build();
         closer.register(asCloseable(fs));
-        return SegmentNodeStoreBuilders.builder(fs).build();
+
+        return new TarNodeStore(SegmentNodeStoreBuilders.builder(fs).build(), new TarNodeStore.SuperRootProvider() {
+            @Override
+            public void setSuperRoot(NodeBuilder builder) {
+                checkArgument(builder instanceof SegmentNodeBuilder);
+                SegmentNodeBuilder segmentBuilder = (SegmentNodeBuilder) builder;
+                SegmentNodeState lastRoot = (SegmentNodeState) getSuperRoot();
+
+                if (!lastRoot.getRecordId().equals(((SegmentNodeState) segmentBuilder.getBaseState()).getRecordId())) {
+                    throw new IllegalArgumentException("The new head is out of date");
+                }
+
+                fs.getRevisions().setHead(lastRoot.getRecordId(), segmentBuilder.getNodeState().getRecordId());
+            }
+
+            @Override
+            public NodeState getSuperRoot() {
+                return fs.getReader().readHeadState();
+            }
+        });
     }
 
     public File getRepositoryDir() {
diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/TarNodeStore.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/TarNodeStore.java
new file mode 100644
index 0000000..e83cfcc
--- /dev/null
+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/cli/node/TarNodeStore.java
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.oak.upgrade.cli.node;
+
+import org.apache.jackrabbit.oak.api.Blob;
+import org.apache.jackrabbit.oak.api.CommitFailedException;
+import org.apache.jackrabbit.oak.spi.commit.CommitHook;
+import org.apache.jackrabbit.oak.spi.commit.CommitInfo;
+import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
+import org.apache.jackrabbit.oak.spi.state.NodeState;
+import org.apache.jackrabbit.oak.spi.state.NodeStore;
+
+import javax.annotation.Nonnull;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Map;
+
+public class TarNodeStore implements NodeStore {
+
+    private final NodeStore ns;
+
+    private final SuperRootProvider superRootProvider;
+
+    public TarNodeStore(NodeStore ns, SuperRootProvider superRootProvider) {
+        this.ns = ns;
+        this.superRootProvider = superRootProvider;
+    }
+
+    public void setSuperRoot(NodeBuilder builder) {
+        superRootProvider.setSuperRoot(builder);
+    }
+
+    public NodeState getSuperRoot() {
+        return superRootProvider.getSuperRoot();
+    }
+
+    @Nonnull
+    @Override
+    public NodeState getRoot() {
+        return ns.getRoot();
+    }
+
+    @Nonnull
+    @Override
+    public NodeState merge(@Nonnull NodeBuilder builder, @Nonnull CommitHook commitHook, @Nonnull CommitInfo info) throws CommitFailedException {
+        return ns.merge(builder, commitHook, info);
+    }
+
+    @Nonnull
+    @Override
+    public NodeState rebase(@Nonnull NodeBuilder builder) {
+        return ns.rebase(builder);
+    }
+
+    @Override
+    public NodeState reset(@Nonnull NodeBuilder builder) {
+        return ns.reset(builder);
+    }
+
+    @Nonnull
+    @Override
+    public Blob createBlob(InputStream inputStream) throws IOException {
+        return ns.createBlob(inputStream);
+    }
+
+    @Override
+    public Blob getBlob(@Nonnull String reference) {
+        return ns.getBlob(reference);
+    }
+
+    @Nonnull
+    @Override
+    public String checkpoint(long lifetime, @Nonnull Map<String, String> properties) {
+        return checkpoint(lifetime, properties);
+    }
+
+    @Nonnull
+    @Override
+    public String checkpoint(long lifetime) {
+        return checkpoint(lifetime);
+    }
+
+    @Nonnull
+    @Override
+    public Map<String, String> checkpointInfo(@Nonnull String checkpoint) {
+        return checkpointInfo(checkpoint);
+    }
+
+    @Override
+    public NodeState retrieve(@Nonnull String checkpoint) {
+        return retrieve(checkpoint);
+    }
+
+    @Override
+    public boolean release(@Nonnull String checkpoint) {
+        return release(checkpoint);
+    }
+
+    interface SuperRootProvider {
+
+        void setSuperRoot(NodeBuilder builder);
+
+        NodeState getSuperRoot();
+
+    }
+}
