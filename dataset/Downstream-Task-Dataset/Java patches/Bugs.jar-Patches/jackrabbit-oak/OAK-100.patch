diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java
index 782a543..b34fb56 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java
@@ -17,6 +17,8 @@
 package org.apache.jackrabbit.oak.query.xpath;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 import org.apache.jackrabbit.oak.query.SQL2Parser;
 import org.apache.jackrabbit.util.ISO9075;
@@ -46,6 +48,15 @@ abstract class Expression {
     }
     
     /**
+     * Get the optimized expression.
+     * 
+     * @return the optimized expression
+     */
+    Expression optimize() {
+        return this;
+    }
+
+    /**
      * Whether this is a condition.
      * 
      * @return true if it is 
@@ -55,6 +66,43 @@ abstract class Expression {
     }
     
     /**
+     * Whether this is a or contains a full-text condition.
+     * 
+     * @return true if it is
+     */
+    boolean containsFullTextCondition() {
+        return false;
+    }
+    
+    /**
+     * Get the left-hand-side expression for equality conditions. 
+     * For example, for x=1, it is x. If it is not equality, return null.
+     * 
+     * @return the left-hand-side expression, or null
+     */        
+    String getCommonLeftPart() {
+        return null;
+    }
+    
+    /**
+     * Get the left hand side of an expression.
+     * 
+     * @return the left hand side
+     */
+    Expression getLeft() {
+        return null;
+    }
+    
+    /**
+     * Get the list of the right hand side of an expression.
+     * 
+     * @return the list
+     */
+    List<Expression> getRight() {
+        return null;
+    }
+
+    /**
      * Pull an OR condition up to the right hand side of an AND condition.
      * 
      * @return the (possibly rotated) expression
@@ -156,19 +204,24 @@ abstract class Expression {
         int getPrecedence() {
             return precedence;
         }
-        
-        /**
-         * Get the left-hand-side expression for equality conditions. 
-         * For example, for x=1, it is x. If it is not equality, return null.
-         * 
-         * @return the left-hand-side expression, or null
-         */        
-        public String getCommonLeftPart() {
+             
+        @Override
+        String getCommonLeftPart() {
             if (!"=".equals(operator)) {
                 return null;
             }
             return left.toString();
         }
+        
+        @Override
+        Expression getLeft() {
+            return left;
+        }
+        
+        @Override
+        List<Expression> getRight() {
+            return Collections.singletonList(right);
+        }
     
         @Override
         public String toString() {
@@ -222,6 +275,11 @@ abstract class Expression {
         boolean isCondition() {
             return true;
         }
+        
+        @Override
+        Expression optimize() {
+            return this;
+        }
     
     }
     
@@ -243,16 +301,87 @@ abstract class Expression {
          */
         @Override
         public String getCommonLeftPart() {
-            if (left instanceof Condition && right instanceof Condition) {
-                String l = ((Condition) left).getCommonLeftPart();
-                String r = ((Condition) right).getCommonLeftPart();
-                if (l != null && r != null && l.equals(r)) {
-                    return l;
-                }
+            String l = left.getCommonLeftPart();
+            String r = right.getCommonLeftPart();
+            if (l != null && r != null && l.equals(r)) {
+                return l;
             }
             return null;
         }
         
+        @Override
+        Expression optimize() {
+            Expression l = left.optimize();
+            Expression r = right.optimize();
+            if (l != left || r != right) {
+                return new OrCondition(l, r).optimize();
+            }
+            String commonLeft = getCommonLeftPart();
+            if (commonLeft == null) {
+                return this;
+            }
+            // "@x = 1 or @x = 2" is converted to "@x in (1, 2)"
+            ArrayList<Expression> list = new ArrayList<Expression>();
+            list.addAll(left.getRight());
+            list.addAll(right.getRight());
+            Expression le = left.getLeft();
+            InCondition in = new InCondition(le, list);
+            return in.optimize();
+        }
+        
+        @Override
+        boolean containsFullTextCondition() {
+            return left.containsFullTextCondition() || right.containsFullTextCondition();
+        }
+        
+    }
+    
+    /**
+     * An "or" condition.
+     */
+    static class InCondition extends Expression {
+
+        final Expression left;
+        final List<Expression> list;
+        
+        InCondition(Expression left, List<Expression> list) {
+            this.left = left;
+            this.list = list;
+        }
+        
+        @Override
+        String getCommonLeftPart() {
+            return left.toString();
+        }
+        
+        @Override
+        Expression getLeft() {
+            return left;
+        }
+        
+        @Override
+        List<Expression> getRight() {
+            return list;
+        }
+    
+        @Override
+        public String toString() {
+            StringBuilder buff = new StringBuilder();
+            buff.append(left).append(" in(");
+            for (int i = 0; i < list.size(); i++) {
+                if (i > 0) {
+                    buff.append(", ");
+                }
+                buff.append(list.get(i));
+            }
+            return buff.append(')').toString();
+        }
+    
+        @Override
+        boolean isCondition() {
+            return true;
+        }        
+        
     }
     
     /**
@@ -263,6 +392,16 @@ abstract class Expression {
         AndCondition(Expression left, Expression right) {
             super(left, "and", right, Expression.PRECEDENCE_AND);
         }
+
+        @Override
+        Expression optimize() {
+            Expression l = left.optimize();
+            Expression r = right.optimize();
+            if (l != left || r != right) {
+                return new AndCondition(l, r);
+            }
+            return this;
+        }
         
         @Override
         AndCondition pullOrRight() {
@@ -285,6 +424,11 @@ abstract class Expression {
             return this;
         }
         
+        @Override
+        boolean containsFullTextCondition() {
+            return left.containsFullTextCondition() || right.containsFullTextCondition();
+        }
+        
     }
     
     /**
@@ -320,6 +464,11 @@ abstract class Expression {
         }
         
         @Override
+        boolean containsFullTextCondition() {
+            return true;
+        }
+        
+        @Override
         boolean isName() {
             return left.isName();
         }
@@ -352,6 +501,11 @@ abstract class Expression {
         boolean isCondition() {
             return true;
         }
+
+        @Override
+        boolean containsFullTextCondition() {
+            return true;
+        }
         
         @Override
         boolean isName() {
@@ -520,5 +674,5 @@ abstract class Expression {
         }
     
     }
-    
+
 }
\ No newline at end of file
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java
index 0504429..6113c0c 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java
@@ -20,7 +20,6 @@ import java.util.ArrayList;
 
 import org.apache.jackrabbit.oak.query.QueryImpl;
 import org.apache.jackrabbit.oak.query.xpath.Expression.AndCondition;
-import org.apache.jackrabbit.oak.query.xpath.Expression.Contains;
 import org.apache.jackrabbit.oak.query.xpath.Expression.OrCondition;
 import org.apache.jackrabbit.oak.query.xpath.Expression.Property;
 
@@ -29,8 +28,6 @@ import org.apache.jackrabbit.oak.query.xpath.Expression.Property;
  */
 public class Statement {
 
-    private String xpathQuery;
-    
     private boolean explain;
     private boolean measure;
     
@@ -49,15 +46,18 @@ public class Statement {
     
     private Expression where;
 
-    private ArrayList<Order> orderList = new ArrayList<Order>();
+    ArrayList<Order> orderList = new ArrayList<Order>();
+    
+    String xpathQuery;
     
     public Statement optimize() {
-        if (explain || measure || orderList.size() > 0) {
+        if (explain || measure) {
             return this;
         }
         if (where == null) {
             return this;
         }
+        where = where.optimize();
         ArrayList<Expression> unionList = new ArrayList<Expression>();
         addToUnionList(where, unionList);
         if (unionList.size() == 1) {
@@ -71,37 +71,29 @@ public class Statement {
             s.selectors = selectors;
             s.columnList = columnList;
             s.where = e;
-            if (i == unionList.size() - 1) {
-                s.xpathQuery = xpathQuery;
-            }
             if (union == null) {
                 union = s;
             } else {
                 union = new UnionStatement(union.optimize(), s.optimize());
             }
         }
+        union.orderList = orderList;
+        union.xpathQuery = xpathQuery;
         return union;
     }
     
     private static void addToUnionList(Expression condition,  ArrayList<Expression> unionList) {
-        if (condition instanceof OrCondition) {
+        if (condition.containsFullTextCondition()) {
+            // do not use union
+        } else if (condition instanceof OrCondition) {
             OrCondition or = (OrCondition) condition;
-            if (or.getCommonLeftPart() != null) {
-                // @x = 1 or @x = 2 
-                // is automatically converted to 
-                // @x in (1, 2)
-                // within the query engine
-            } else if (or.left instanceof Contains && or.right instanceof Contains) {
-                // do not optimize "contains"
-            } else {
-                // conditions of type                
-                // @x = 1 or @y = 2
-                // or similar are converted to
-                // (@x = 1) union (@y = 2)
-                addToUnionList(or.left, unionList);
-                addToUnionList(or.right, unionList);
-                return;
-            }
+            // conditions of type                
+            // @x = 1 or @y = 2
+            // or similar are converted to
+            // (@x = 1) union (@y = 2)
+            addToUnionList(or.left, unionList);
+            addToUnionList(or.right, unionList);
+            return;
         } else if (condition instanceof AndCondition) {
             // conditions of type
             // @a = 1 and (@x = 1 or @y = 2)
@@ -111,19 +103,10 @@ public class Statement {
             and = and.pullOrRight();
             if (and.right instanceof OrCondition) {
                 OrCondition or = (OrCondition) and.right;
-                if (or.getCommonLeftPart() != null) {
-                    // @x = 1 or @x = 2 
-                    // is automatically converted to 
-                    // @x in (1, 2)
-                    // within the query engine                
-                } else if (or.left instanceof Contains && or.right instanceof Contains) {
-                    // do not optimize "contains"
-                } else {
-                    // same as above, but with the added "and"
-                    addToUnionList(new AndCondition(and.left, or.left), unionList);
-                    addToUnionList(new AndCondition(and.left, or.right), unionList);
-                    return;
-                }
+                // same as above, but with the added "and"
+                addToUnionList(new AndCondition(and.left, or.left), unionList);
+                addToUnionList(new AndCondition(and.left, or.right), unionList);
+                return;
             }
         }
         unionList.add(condition);
@@ -255,7 +238,25 @@ public class Statement {
         
         @Override
         public String toString() {
-            return s1 + " union " + s2;
+            StringBuilder buff = new StringBuilder();
+            buff.append(s1).append(" union ").append(s2);
+            // order by ...
+            if (orderList != null && !orderList.isEmpty()) {
+                buff.append(" order by ");
+                for (int i = 0; i < orderList.size(); i++) {
+                    if (i > 0) {
+                        buff.append(", ");
+                    }
+                    buff.append(orderList.get(i));
+                }
+            }
+            // leave original xpath string as a comment
+            if (xpathQuery != null) {
+                buff.append(" /* xpath: ");
+                buff.append(xpathQuery);
+                buff.append(" */");
+            }
+            return buff.toString();
         }
         
     }
