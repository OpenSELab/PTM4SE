diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntryProviderImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntryProviderImpl.java
index cce6a71..d77fe97 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntryProviderImpl.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntryProviderImpl.java
@@ -24,14 +24,19 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
+
 import javax.annotation.Nonnull;
 
 import com.google.common.base.Strings;
 import com.google.common.collect.Iterators;
+import com.google.common.math.LongMath;
+
 import org.apache.jackrabbit.commons.iterator.AbstractLazyIterator;
 import org.apache.jackrabbit.oak.api.Tree;
 import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;
 import org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 class PermissionEntryProviderImpl implements PermissionEntryProvider {
 
@@ -39,18 +44,31 @@ class PermissionEntryProviderImpl implements PermissionEntryProvider {
 
     private static final long DEFAULT_SIZE = 250;
 
+    private static final Logger log = LoggerFactory.getLogger(PermissionEntryProviderImpl.class);
+
+    /**
+     * The set of principal names for which this {@code PermissionEntryProvider}
+     * has been created.
+     */
     private final Set<String> principalNames;
 
+    /**
+     * The set of principal names for which the store contains any permission
+     * entries. This set is equals or just a subset of the {@code principalNames}
+     * defined above. The methods collecting the entries will shortcut in case
+     * this set is empty and thus no permission entries exist for the specified
+     * set of principal.
+     */
     private final Set<String> existingNames = new HashSet<String>();
 
-    private Map<String, Collection<PermissionEntry>> pathEntryMap;
-
     private final PermissionStore store;
 
     private final PermissionEntryCache cache;
 
     private final long maxSize;
 
+    private Map<String, Collection<PermissionEntry>> pathEntryMap;
+
     PermissionEntryProviderImpl(@Nonnull PermissionStore store, @Nonnull PermissionEntryCache cache,
                                 @Nonnull Set<String> principalNames, @Nonnull ConfigurationParameters options) {
         this.store = store;
@@ -63,17 +81,42 @@ class PermissionEntryProviderImpl implements PermissionEntryProvider {
     private void init() {
         long cnt = 0;
         existingNames.clear();
-        for (String name: principalNames) {
+        for (String name : principalNames) {
             long n = cache.getNumEntries(store, name, maxSize);
-            cnt+= n;
+            /*
+            if cache.getNumEntries (n) returns a number bigger than 0, we
+            remember this principal name int the 'existingNames' set
+            */
             if (n > 0) {
                 existingNames.add(name);
             }
+            /*
+            Calculate the total number of permission entries (cnt) defined for the
+            given set of principals in order to be able to determine if the cache
+            should be loaded upfront.
+            Note however that cache.getNumEntries (n) may return Long.MAX_VALUE
+            if the underlying implementation does not know the exact value, and
+            the child node count is higher than maxSize (see OAK-2465).
+            */                        
+            if (cnt < Long.MAX_VALUE) {
+                if (Long.MAX_VALUE == n) {
+                    cnt = Long.MAX_VALUE;
+                } else {
+                    try {
+                        cnt = LongMath.checkedAdd(cnt, n);
+                    } catch (ArithmeticException ae) {
+                        log.warn("Long overflow while calculate the total number of permission entries");
+                        cnt = Long.MAX_VALUE;
+                    }
+                }
+            }
         }
-        if (cnt < maxSize) {
-            // cache all entries of all principals
+
+        if (cnt > 0 && cnt < maxSize) {
+            // the total number of entries is smaller that maxSize, so we can
+            // cache all entries for all principals having any entries right away
             pathEntryMap = new HashMap<String, Collection<PermissionEntry>>();
-            for (String name: principalNames) {
+            for (String name : existingNames) {
                 cache.load(store, pathEntryMap, name);
             }
         } else {
@@ -124,7 +167,7 @@ class PermissionEntryProviderImpl implements PermissionEntryProvider {
     @Nonnull
     private Collection<PermissionEntry> loadEntries(@Nonnull String path) {
         Collection<PermissionEntry> ret = new TreeSet<PermissionEntry>();
-        for (String name: existingNames) {
+        for (String name : existingNames) {
             cache.load(store, ret, name, path);
         }
         return ret;
