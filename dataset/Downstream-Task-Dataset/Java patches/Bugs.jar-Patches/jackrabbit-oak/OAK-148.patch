diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java
index 043f344..2de0d39 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java
@@ -459,40 +459,50 @@ public final class DocumentNodeStore
     }
 
     public void dispose() {
-        runBackgroundOperations();
-        if (!isDisposed.getAndSet(true)) {
-            synchronized (isDisposed) {
-                isDisposed.notifyAll();
-            }
+        if (isDisposed.getAndSet(true)) {
+            // only dispose once
+            return;
+        }
+        // notify background threads waiting on isDisposed
+        synchronized (isDisposed) {
+            isDisposed.notifyAll();
+        }
+        try {
+            backgroundThread.join();
+        } catch (InterruptedException e) {
+            // ignore
+        }
+
+        // do a final round of background operations after
+        // the background thread stopped
+        internalRunBackgroundOperations();
+
+        if (leaseUpdateThread != null) {
             try {
-                backgroundThread.join();
+                leaseUpdateThread.join();
             } catch (InterruptedException e) {
                 // ignore
             }
-            if (leaseUpdateThread != null) {
-                try {
-                    leaseUpdateThread.join();
-                } catch (InterruptedException e) {
-                    // ignore
-                }
-            }
-            if (clusterNodeInfo != null) {
-                clusterNodeInfo.dispose();
-            }
-            store.dispose();
-            LOG.info("Disposed DocumentNodeStore with clusterNodeId: {}", clusterId);
-
-            if (blobStore instanceof Closeable) {
-                try {
-                    ((Closeable) blobStore).close();
-                } catch (IOException ex) {
-                    LOG.debug("Error closing blob store " + blobStore, ex);
-                }
+        }
+
+        // now mark this cluster node as inactive by
+        // disposing the clusterNodeInfo
+        if (clusterNodeInfo != null) {
+            clusterNodeInfo.dispose();
+        }
+        store.dispose();
+
+        if (blobStore instanceof Closeable) {
+            try {
+                ((Closeable) blobStore).close();
+            } catch (IOException ex) {
+                LOG.debug("Error closing blob store " + blobStore, ex);
             }
         }
         if (persistentCache != null) {
             persistentCache.close();
         }
+        LOG.info("Disposed DocumentNodeStore with clusterNodeId: {}", clusterId);
     }
 
     Revision setHeadRevision(@Nonnull Revision newHead) {
@@ -544,6 +554,7 @@ public final class DocumentNodeStore
             base = headRevision;
         }
         backgroundOperationLock.readLock().lock();
+        checkOpen();
         boolean success = false;
         Commit c;
         try {
@@ -573,6 +584,7 @@ public final class DocumentNodeStore
             base = headRevision;
         }
         backgroundOperationLock.readLock().lock();
+        checkOpen();
         boolean success = false;
         MergeCommit c;
         try {
@@ -1502,48 +1514,49 @@ public final class DocumentNodeStore
 
     //----------------------< background operations >---------------------------
 
-    public synchronized void runBackgroundOperations() {
+    public void runBackgroundOperations() {
         if (isDisposed.get()) {
             return;
         }
-        if (simpleRevisionCounter != null) {
-            // only when using timestamp
-            return;
-        }
         try {
-            long start = clock.getTime();
-            long time = start;
-            // clean orphaned branches and collisions
-            cleanOrphanedBranches();
-            cleanCollisions();
-            long cleanTime = clock.getTime() - time;
-            time = clock.getTime();
-            // split documents (does not create new revisions)
-            backgroundSplit();
-            long splitTime = clock.getTime() - time;
-            time = clock.getTime();
-            // write back pending updates to _lastRev
-            backgroundWrite();
-            long writeTime = clock.getTime() - time;
-            time = clock.getTime();
-            // pull in changes from other cluster nodes
-            BackgroundReadStats readStats = backgroundRead(true);
-            long readTime = clock.getTime() - time;
-            String msg = "Background operations stats (clean:{}, split:{}, write:{}, read:{} {})";
-            if (clock.getTime() - start > TimeUnit.SECONDS.toMillis(10)) {
-                // log as info if it took more than 10 seconds
-                LOG.info(msg, cleanTime, splitTime, writeTime, readTime, readStats);
-            } else {
-                LOG.debug(msg, cleanTime, splitTime, writeTime, readTime, readStats);
-            }
+            internalRunBackgroundOperations();
         } catch (RuntimeException e) {
             if (isDisposed.get()) {
+                LOG.warn("Background operation failed: " + e.toString(), e);
                 return;
             }
             throw e;
         }
     }
 
+    private synchronized void internalRunBackgroundOperations() {
+        long start = clock.getTime();
+        long time = start;
+        // clean orphaned branches and collisions
+        cleanOrphanedBranches();
+        cleanCollisions();
+        long cleanTime = clock.getTime() - time;
+        time = clock.getTime();
+        // split documents (does not create new revisions)
+        backgroundSplit();
+        long splitTime = clock.getTime() - time;
+        time = clock.getTime();
+        // write back pending updates to _lastRev
+        backgroundWrite();
+        long writeTime = clock.getTime() - time;
+        time = clock.getTime();
+        // pull in changes from other cluster nodes
+        BackgroundReadStats readStats = backgroundRead(true);
+        long readTime = clock.getTime() - time;
+        String msg = "Background operations stats (clean:{}, split:{}, write:{}, read:{} {})";
+        if (clock.getTime() - start > TimeUnit.SECONDS.toMillis(10)) {
+            // log as info if it took more than 10 seconds
+            LOG.info(msg, cleanTime, splitTime, writeTime, readTime, readStats);
+        } else {
+            LOG.debug(msg, cleanTime, splitTime, writeTime, readTime, readStats);
+        }
+    }
+
     /**
      * Renews the cluster lease if necessary.
      *
@@ -1771,6 +1784,19 @@ public final class DocumentNodeStore
 
     //-----------------------------< internal >---------------------------------
 
+    /**
+     * Checks if this store is still open and throws an
+     * {@link IllegalStateException} if it is already disposed (or a dispose
+     * is in progress).
+     *
+     * @throws IllegalStateException if this store is disposed.
+     */
+    private void checkOpen() throws IllegalStateException {
+        if (isDisposed.get()) {
+            throw new IllegalStateException("This DocumentNodeStore is disposed");
+        }
+    }
+
     private boolean dispatch(@Nonnull String jsonDiff,
                              @Nonnull DocumentNodeState node,
                              @Nonnull DocumentNodeState base,
