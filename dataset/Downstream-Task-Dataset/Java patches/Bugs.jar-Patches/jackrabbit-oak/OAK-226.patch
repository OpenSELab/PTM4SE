diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/SegmentBufferWriterPool.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/SegmentBufferWriterPool.java
index c035323..610b3ca 100644
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/SegmentBufferWriterPool.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/SegmentBufferWriterPool.java
@@ -34,6 +34,8 @@ import java.util.Set;
 import javax.annotation.Nonnull;
 
 import com.google.common.base.Supplier;
+import com.google.common.util.concurrent.Monitor;
+import com.google.common.util.concurrent.Monitor.Guard;
 
 /**
  * This {@link WriteOperationHandler} uses a pool of {@link SegmentBufferWriter}s,
@@ -43,8 +45,27 @@ import com.google.common.base.Supplier;
  * {@link SegmentWriter}.
  */
 public class SegmentBufferWriterPool implements WriteOperationHandler {
+
+    /**
+     * Monitor protecting the state of this pool. Neither of {@link #writers},
+     * {@link #borrowed} and {@link #disposed} must be modified without owning
+     * this monitor.
+     */
+    private final Monitor poolMonitor = new Monitor(true);
+
+    /**
+     * Pool of current writers that are not in use
+     */
     private final Map<Object, SegmentBufferWriter> writers = newHashMap();
+
+    /**
+     * Writers that are currently in use
+     */
     private final Set<SegmentBufferWriter> borrowed = newHashSet();
+
+    /**
+     * Retired writers that have not yet been flushed
+     */
     private final Set<SegmentBufferWriter> disposed = newHashSet();
 
     @Nonnull
@@ -95,38 +116,111 @@ public class SegmentBufferWriterPool implements WriteOperationHandler {
     @Override
     public void flush() throws IOException {
         List<SegmentBufferWriter> toFlush = newArrayList();
-        synchronized (this) {
+        List<SegmentBufferWriter> toReturn = newArrayList();
+
+        poolMonitor.enter();
+        try {
+            // Collect all writers that are not currently in use and clear
+            // the list so they won't get re-used anymore.
             toFlush.addAll(writers.values());
-            toFlush.addAll(disposed);
             writers.clear();
-            disposed.clear();
+
+            // Collect all borrowed writers, which we need to wait for.
+            // Clear the list so they will get disposed once returned.
+            toReturn.addAll(borrowed);
             borrowed.clear();
+        } finally {
+            poolMonitor.leave();
+        }
+
+        // Wait for the return of the borrowed writers. This is the
+        // case once all of them appear in the disposed set.
+        if (safeEnterWhen(poolMonitor, allReturned(toReturn))) {
+            try {
+                // Collect all disposed writers and clear the list to mark them
+                // as flushed.
+                toFlush.addAll(toReturn);
+                disposed.removeAll(toReturn);
+            } finally {
+                poolMonitor.leave();
+            }
         }
-        // Call flush from outside a synchronized context to avoid
+
+        // Call flush from outside the pool monitor to avoid potential
         // deadlocks of that method calling SegmentStore.writeSegment
         for (SegmentBufferWriter writer : toFlush) {
             writer.flush();
         }
     }
 
-    private synchronized SegmentBufferWriter borrowWriter(Object key) {
-        SegmentBufferWriter writer = writers.remove(key);
-        if (writer == null) {
-            writer = new SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());
-        } else if (writer.getGeneration() != gcGeneration.get()) {
-            disposed.add(writer);
-            writer = new SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());
+    /**
+     * Create a {@code Guard} that is satisfied if and only if {@link #disposed}
+     * contains all items in {@code toReturn}
+     */
+    @Nonnull
+    private Guard allReturned(final List<SegmentBufferWriter> toReturn) {
+        return new Guard(poolMonitor) {
+
+            @Override
+            public boolean isSatisfied() {
+                return disposed.containsAll(toReturn);
+            }
+
+        };
+    }
+
+    /**
+     * Same as {@code monitor.enterWhen(guard)} but copes with that pesky {@code
+     * InterruptedException} by catching it and setting this thread's
+     * interrupted flag.
+     */
+    private static boolean safeEnterWhen(Monitor monitor, Guard guard) {
+        try {
+            monitor.enterWhen(guard);
+            return true;
+        } catch (InterruptedException ignore) {
+            Thread.currentThread().interrupt();
+            return false;
         }
-        borrowed.add(writer);
-        return writer;
     }
 
-    private synchronized void returnWriter(Object key, SegmentBufferWriter writer) {
-        if (borrowed.remove(writer)) {
-            checkState(writers.put(key, writer) == null);
-        } else {
-            // Defer flush this writer as it was borrowed while flush() was called.
-            disposed.add(writer);
+    /**
+     * Return a writer from the pool by its {@code key}. This method may return
+     * a fresh writer at any time. Callers need to return a writer before
+     * borrowing it again. Failing to do so leads to undefined behaviour.
+     */
+    private SegmentBufferWriter borrowWriter(Object key) {
+        poolMonitor.enter();
+        try {
+            SegmentBufferWriter writer = writers.remove(key);
+            if (writer == null) {
+                writer = new SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());
+            } else if (writer.getGeneration() != gcGeneration.get()) {
+                disposed.add(writer);
+                writer = new SegmentBufferWriter(store, tracker, reader, version, getWriterId(wid), gcGeneration.get());
+            }
+            borrowed.add(writer);
+            return writer;
+        } finally {
+            poolMonitor.leave();
+        }
+    }
+
+    /**
+     * Return a writer to the pool using the {@code key} that was used to borrow
+     * it.
+     */
+    private void returnWriter(Object key, SegmentBufferWriter writer) {
+        poolMonitor.enter();
+        try {
+            if (borrowed.remove(writer)) {
+                checkState(writers.put(key, writer) == null);
+            } else {
+                // Defer flush this writer as it was borrowed while flush() was called.
+                disposed.add(writer);
+            }
+        } finally {
+            poolMonitor.leave();
         }
     }
 
diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/WriteOperationHandler.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/WriteOperationHandler.java
index 1a585c0..b122a0a 100644
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/WriteOperationHandler.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/WriteOperationHandler.java
@@ -58,9 +58,6 @@ interface WriteOperationHandler {
 
     /**
      * Flush any pending changes on any {@link SegmentBufferWriter} managed by this instance.
-     * This method <em>does not block</em> to wait for concurrent write operations. However, if
-     * a write operation is currently in progress a call to this method ensures the respective
-     * changes are properly flushed at the end of that call.
      * @throws IOException
      */
     void flush() throws IOException;
