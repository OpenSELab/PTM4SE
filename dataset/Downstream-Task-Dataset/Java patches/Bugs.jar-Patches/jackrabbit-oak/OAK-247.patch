diff --git a/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java b/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java
index 6b2a935..be48a28 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java
@@ -299,6 +299,7 @@ public class Indexer {
     /**
      * Update the index with the given changes.
      *
+     * @param rootPath the root path
      * @param t the changes
      * @param lastRevision
      */
@@ -309,6 +310,7 @@ public class Indexer {
                 break;
             }
             String path = PathUtils.concat(rootPath, t.readString());
+            String target;
             switch (r) {
             case '+': {
                 t.read(':');
@@ -327,8 +329,16 @@ public class Indexer {
                 }
                 break;
             }
+            case '*':
+                // TODO support and test copy operation ("*"),
+                // specially in combination with other operations
+                // possibly split up the commit in this case
+                t.read(':');
+                target = t.readString();
+                moveOrCopyNode(path, false, target, lastRevision);
+                break;
             case '-':
-                moveNode(path, null, lastRevision);
+                moveOrCopyNode(path, true, null, lastRevision);
                 break;
             case '^': {
                 removeProperty(path, lastRevision);
@@ -342,9 +352,12 @@ public class Indexer {
                 break;
             }
             case '>':
+                // TODO does move work correctly
+                // in combination with other operations?
+                // possibly split up the commit in this case
                 t.read(':');
                 String name = PathUtils.getName(path);
-                String target, position;
+                String position;
                 if (t.matches('{')) {
                     position = t.readString();
                     t.read(':');
@@ -364,7 +377,7 @@ public class Indexer {
                 } else {
                     throw ExceptionFactory.get("position: " + position);
                 }
-                moveNode(path, target, lastRevision);
+                moveOrCopyNode(path, true, target, lastRevision);
                 break;
             default:
                 throw new AssertionError("token: " + (char) t.getTokenType());
@@ -430,7 +443,7 @@ public class Indexer {
         }
     }
 
-    private void moveNode(String sourcePath, String targetPath, String lastRevision) {
+    private void moveOrCopyNode(String sourcePath, boolean remove, String targetPath, String lastRevision) {
         if (isInIndex(sourcePath)) {
             // don't index the index
             return;
@@ -444,7 +457,9 @@ public class Indexer {
         NodeMap map = new NodeMap();
         t.read('{');
         NodeImpl n = NodeImpl.parse(map, t, 0, sourcePath);
-        addOrRemoveRecursive(n, true, false);
+        if (remove) {
+            addOrRemoveRecursive(n, true, false);
+        }
         if (targetPath != null) {
             t = new JsopTokenizer(node);
             map = new NodeMap();
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java
index 87c2a96..185731e 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java
@@ -278,18 +278,20 @@ public class SimpleKernelImpl extends MicroKernelWrapperBase implements MicroKer
                 break;
             }
             case '*': {
-                // TODO is it really required?
                 // TODO possibly support target position notation
-                // TODO support copy in wrappers, index,...
                 t.read(':');
                 String target = t.readString();
-                diff.tag('*').key(path).value(target);
                 if (!PathUtils.isAbsolute(target)) {
                     target = PathUtils.concat(rootPath, target);
                 }
-                NodeImpl node = data.getNode(from);
+                diff.tag('*').key(path).value(target);
                 String to = PathUtils.relativize("/", target);
-                data = data.cloneAndAddChildNode(to, false, null, node, rev);
+                NodeImpl node = data.getNode(from);
+                JsopStream json = new JsopStream();
+                node.append(json, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, false);
+                json.read('{');
+                NodeImpl n2 = NodeImpl.parse(nodeMap, json, rev);
+                data = data.cloneAndAddChildNode(to, false, null, n2, rev);
                 break;
             }
             default:
@@ -555,6 +557,7 @@ public class SimpleKernelImpl extends MicroKernelWrapperBase implements MicroKer
         }
     }
 
+    @Override
     public String toString() {
         return "simple:" + name;
     }
