diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java
index 5c37162..5f79f71 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java
@@ -42,7 +42,7 @@ abstract class Expression {
         } else if (add == null) {
             return old;
         }
-        return new Expression.Condition(old, "and", add, Expression.PRECEDENCE_AND);
+        return new Expression.AndCondition(old, add);
     }
     
     /**
@@ -55,6 +55,15 @@ abstract class Expression {
     }
     
     /**
+     * Pull an OR condition up to the right hand side of an AND condition.
+     * 
+     * @return the (possibly rotated) expression
+     */
+    Expression pullOrRight() {
+        return this;
+    }
+    
+    /**
      * Get the operator / operation precedence. The JCR specification uses:
      * 1=OR, 2=AND, 3=condition, 4=operand  
      * 
@@ -255,6 +264,27 @@ abstract class Expression {
             super(left, "and", right, Expression.PRECEDENCE_AND);
         }
         
+        @Override
+        AndCondition pullOrRight() {
+            if (right instanceof OrCondition) {
+                return this;
+            } else if (left instanceof OrCondition) {
+                return new AndCondition(right, left);
+            }
+            if (right instanceof AndCondition) {
+                // pull up x:
+                // a and (b and (x)) -> (a and b) and (x)
+                AndCondition r2 = (AndCondition) right;
+                r2 = r2.pullOrRight();
+                AndCondition l2 = new AndCondition(left, r2.left);
+                l2 = l2.pullOrRight();
+                return new AndCondition(l2, r2.right);
+            } else if (left instanceof AndCondition) {
+                return new AndCondition(right, left).pullOrRight();
+            }
+            return this;
+        }
+        
     }
     
     /**
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java
index 03a2438..0504429 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java
@@ -58,8 +58,34 @@ public class Statement {
         if (where == null) {
             return this;
         }
-        if (where instanceof OrCondition) {
-            OrCondition or = (OrCondition) where;
+        ArrayList<Expression> unionList = new ArrayList<Expression>();
+        addToUnionList(where, unionList);
+        if (unionList.size() == 1) {
+            return this;
+        }
+        Statement union = null;
+        for (int i = 0; i < unionList.size(); i++) {
+            Expression e = unionList.get(i);
+            Statement s = new Statement();
+            s.columnSelector = columnSelector;
+            s.selectors = selectors;
+            s.columnList = columnList;
+            s.where = e;
+            if (i == unionList.size() - 1) {
+                s.xpathQuery = xpathQuery;
+            }
+            if (union == null) {
+                union = s;
+            } else {
+                union = new UnionStatement(union.optimize(), s.optimize());
+            }
+        }
+        return union;
+    }
+    
+    private static void addToUnionList(Expression condition,  ArrayList<Expression> unionList) {
+        if (condition instanceof OrCondition) {
+            OrCondition or = (OrCondition) condition;
             if (or.getCommonLeftPart() != null) {
                 // @x = 1 or @x = 2 
                 // is automatically converted to 
@@ -72,29 +98,17 @@ public class Statement {
                 // @x = 1 or @y = 2
                 // or similar are converted to
                 // (@x = 1) union (@y = 2)
-                Statement s1 = new Statement();
-                s1.columnSelector = columnSelector;
-                s1.selectors = selectors;
-                s1.columnList = columnList;
-                s1.where = or.left;
-                Statement s2 = new Statement();
-                s2.columnSelector = columnSelector;
-                s2.selectors = selectors;
-                s2.columnList = columnList;
-                s2.where = or.right;
-                s2.xpathQuery = xpathQuery;
-                return new UnionStatement(s1.optimize(), s2.optimize());
+                addToUnionList(or.left, unionList);
+                addToUnionList(or.right, unionList);
+                return;
             }
-        } else if (where instanceof AndCondition) {
+        } else if (condition instanceof AndCondition) {
             // conditions of type
             // @a = 1 and (@x = 1 or @y = 2)
             // are automatically converted to
             // (@a = 1 and @x = 1) union (@a = 1 and @y = 2)
-            AndCondition and = (AndCondition) where;
-            if (and.left instanceof OrCondition && !(and.right instanceof OrCondition)) {
-                // swap left and right
-                and = new AndCondition(and.right, and.left);
-            }
+            AndCondition and = (AndCondition) condition;
+            and = and.pullOrRight();
             if (and.right instanceof OrCondition) {
                 OrCondition or = (OrCondition) and.right;
                 if (or.getCommonLeftPart() != null) {
@@ -106,23 +120,13 @@ public class Statement {
                     // do not optimize "contains"
                 } else {
                     // same as above, but with the added "and"
-                    // TODO avoid code duplication if possible
-                    Statement s1 = new Statement();
-                    s1.columnSelector = columnSelector;
-                    s1.selectors = selectors;
-                    s1.columnList = columnList;
-                    s1.where = new AndCondition(and.left, or.left);
-                    Statement s2 = new Statement();
-                    s2.columnSelector = columnSelector;
-                    s2.selectors = selectors;
-                    s2.columnList = columnList;
-                    s2.where = new AndCondition(and.left, or.right);
-                    s2.xpathQuery = xpathQuery;
-                    return new UnionStatement(s1.optimize(), s2.optimize());
+                    addToUnionList(new AndCondition(and.left, or.left), unionList);
+                    addToUnionList(new AndCondition(and.left, or.right), unionList);
+                    return;
                 }
             }
         }
-        return this;
+        unionList.add(condition);
     }
     
     @Override
