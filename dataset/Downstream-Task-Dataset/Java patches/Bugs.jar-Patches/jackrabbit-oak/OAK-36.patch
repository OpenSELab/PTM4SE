diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndex.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndex.java
index 8ffa57b..f4f8dfb 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndex.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndex.java
@@ -48,7 +48,7 @@ class NodeTypeIndex implements QueryIndex, JcrConstants {
             return Double.POSITIVE_INFINITY;
         }
         NodeTypeIndexLookup lookup = new NodeTypeIndexLookup(root);
-        if (lookup.isIndexed(filter.getPath())) {
+        if (lookup.isIndexed(filter.getPath(), filter)) {
             return lookup.getCost(filter);
         } else {
             return Double.POSITIVE_INFINITY;
@@ -58,7 +58,7 @@ class NodeTypeIndex implements QueryIndex, JcrConstants {
     @Override
     public Cursor query(Filter filter, NodeState root) {
         NodeTypeIndexLookup lookup = new NodeTypeIndexLookup(root);
-        if (!hasNodeTypeRestriction(filter) || !lookup.isIndexed(filter.getPath())) {
+        if (!hasNodeTypeRestriction(filter) || !lookup.isIndexed(filter.getPath(), filter)) {
             throw new IllegalStateException(
                     "NodeType index is used even when no index is available for filter " + filter);
         }
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndexLookup.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndexLookup.java
index 9a9316b..e4a61bb 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndexLookup.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/nodetype/NodeTypeIndexLookup.java
@@ -45,10 +45,10 @@ class NodeTypeIndexLookup implements JcrConstants {
      * @return <code>true</code> if a node type index exists; <code>false</code>
      *         otherwise.
      */
-    public boolean isIndexed(String path) {
+    public boolean isIndexed(String path, Filter f) {
         PropertyIndexLookup lookup = new PropertyIndexLookup(root);
-        if (lookup.isIndexed(JCR_PRIMARYTYPE, path, null)
-                && lookup.isIndexed(JCR_MIXINTYPES, path, null)) {
+        if (lookup.isIndexed(JCR_PRIMARYTYPE, path, f)
+                && lookup.isIndexed(JCR_MIXINTYPES, path, f)) {
             return true;
         }
 
@@ -62,13 +62,13 @@ class NodeTypeIndexLookup implements JcrConstants {
 
         NodeState child = root.getChildNode(path.substring(0, slash));
         return new NodeTypeIndexLookup(child).isIndexed(
-                path.substring(slash));
+                path.substring(slash), f);
     }
 
     public double getCost(Filter filter) {
         PropertyIndexLookup lookup = new PropertyIndexLookup(root);
-        return lookup.getCost(null, JCR_PRIMARYTYPE, newName(filter.getPrimaryTypes()))
-                + lookup.getCost(null, JCR_MIXINTYPES, newName(filter.getMixinTypes()));
+        return lookup.getCost(filter, JCR_PRIMARYTYPE, newName(filter.getPrimaryTypes()))
+                + lookup.getCost(filter, JCR_MIXINTYPES, newName(filter.getMixinTypes()));
     }
 
     /**
