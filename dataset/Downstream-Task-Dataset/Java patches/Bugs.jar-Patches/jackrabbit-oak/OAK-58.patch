diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/blob/datastore/DataStoreBlobStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/blob/datastore/DataStoreBlobStore.java
index b055278..3ad49ad 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/blob/datastore/DataStoreBlobStore.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/blob/datastore/DataStoreBlobStore.java
@@ -32,6 +32,7 @@ import javax.annotation.Nullable;
 import javax.jcr.RepositoryException;
 
 import com.google.common.base.Function;
+import com.google.common.base.Predicate;
 import com.google.common.collect.Iterators;
 import com.google.common.io.ByteStreams;
 import com.google.common.io.Closeables;
@@ -47,6 +48,8 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.collect.Iterators.filter;
+import static com.google.common.collect.Iterators.transform;
 
 /**
  * BlobStore wrapper for DataStore. Wraps Jackrabbit 2 DataStore and expose them as BlobStores
@@ -258,12 +261,23 @@ public class DataStoreBlobStore implements DataStore, BlobStore, GarbageCollecta
     }
 
     @Override
-    public Iterator<String> getAllChunkIds(long maxLastModifiedTime) throws Exception {
-        //TODO Ignores the maxLastModifiedTime currently.
-        return Iterators.transform(delegate.getAllIdentifiers(), new Function<DataIdentifier, String>() {
-            @Nullable
+    public Iterator<String> getAllChunkIds(final long maxLastModifiedTime) throws Exception {
+        return transform(filter(delegate.getAllIdentifiers(), new Predicate<DataIdentifier>() {
             @Override
-            public String apply(@Nullable DataIdentifier input) {
+            public boolean apply(DataIdentifier input) {
+                try {
+                    DataRecord dr = delegate.getRecord(input);
+                    if(dr != null && dr.getLastModified() < maxLastModifiedTime){
+                        return true;
+                    }
+                } catch (DataStoreException e) {
+                    log.warn("Error occurred while fetching DataRecord for identifier {}",input, e);
+                }
+                return false;
+            }
+        }),new Function<DataIdentifier, String>() {
+            @Override
+            public String apply(DataIdentifier input) {
                 return input.toString();
             }
         });
