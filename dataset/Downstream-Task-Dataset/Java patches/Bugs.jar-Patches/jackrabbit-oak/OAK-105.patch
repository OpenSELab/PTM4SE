diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java
index 11427c3..44e31c0 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/ast/SelectorImpl.java
@@ -58,6 +58,8 @@ import org.apache.jackrabbit.oak.spi.query.QueryIndex;
 import org.apache.jackrabbit.oak.spi.query.QueryIndex.AdvancedQueryIndex;
 import org.apache.jackrabbit.oak.spi.query.QueryIndex.IndexPlan;
 import org.apache.jackrabbit.oak.spi.state.NodeState;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -66,6 +68,7 @@ import com.google.common.collect.Iterables;
  * A selector within a query.
  */
 public class SelectorImpl extends SourceImpl {
+    private static final Logger LOG = LoggerFactory.getLogger(SelectorImpl.class);
     
     // TODO possibly support using multiple indexes (using index intersection / index merge)
     private SelectorExecutionPlan plan;
@@ -547,6 +550,10 @@ public class SelectorImpl extends SourceImpl {
         boolean asterisk = oakPropertyName.indexOf('*') >= 0;
         if (asterisk) {
             Tree t = currentTree();
+            if (t != null) {
+                LOG.trace("currentOakProperty() - '*' case. looking for '{}' in '{}'",
+                    oakPropertyName, t.getPath());
+            }
             ArrayList<PropertyValue> list = new ArrayList<PropertyValue>();
             readOakProperties(list, t, oakPropertyName, propertyType);
             if (list.size() == 0) {
@@ -630,10 +637,13 @@ public class SelectorImpl extends SourceImpl {
     
     private void readOakProperties(ArrayList<PropertyValue> target, Tree t, String oakPropertyName, Integer propertyType) {
         boolean skipCurrentNode = false;
-        while (true) {
+
+        while (!skipCurrentNode) {
             if (t == null || !t.exists()) {
                 return;
             }
+            LOG.trace("readOakProperties() - reading '{}' for '{}'", t.getPath(),
+                oakPropertyName);
             int slash = oakPropertyName.indexOf('/');
             if (slash < 0) {
                 break;
@@ -659,6 +669,7 @@ public class SelectorImpl extends SourceImpl {
         if (!"*".equals(oakPropertyName)) {
             PropertyValue value = currentOakProperty(t, oakPropertyName, propertyType);
             if (value != null) {
+                LOG.trace("readOakProperties() - adding: '{}' from '{}'", value, t.getPath());
                 target.add(value);
             }
             return;
