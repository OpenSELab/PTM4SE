diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java
index d1c0f0c..2f38496 100644
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java
@@ -26,6 +26,7 @@ import static com.google.common.collect.Lists.newArrayListWithCapacity;
 import static com.google.common.collect.Maps.newConcurrentMap;
 import static java.lang.Boolean.getBoolean;
 import static org.apache.jackrabbit.oak.commons.IOUtils.closeQuietly;
+import static org.apache.jackrabbit.oak.segment.SegmentId.isDataSegmentId;
 import static org.apache.jackrabbit.oak.segment.SegmentVersion.isValid;
 import static org.apache.jackrabbit.oak.segment.SegmentWriter.BLOCK_SIZE;
 
@@ -38,6 +39,7 @@ import java.nio.channels.Channels;
 import java.nio.channels.WritableByteChannel;
 import java.util.Arrays;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentMap;
 
 import javax.annotation.CheckForNull;
@@ -314,12 +316,27 @@ public class Segment {
         return data.getShort(ROOT_COUNT_OFFSET) & 0xffff;
     }
 
-    public static int getGcGen(ByteBuffer data) {
-        return data.getInt(GC_GEN_OFFSET);
+    /**
+     * Determine the gc generation a segment from its data. Note that bulk segments don't have
+     * generations (i.e. stay at 0).
+     *
+     * @param data         the date of the segment
+     * @param segmentId    the id of the segment
+     * @return  the gc generation of this segment or 0 if this is bulk segment.
+     */
+    public static int getGcGen(ByteBuffer data, UUID segmentId) {
+        return isDataSegmentId(segmentId.getLeastSignificantBits())
+            ? data.getInt(GC_GEN_OFFSET)
+            : 0;
     }
 
+    /**
+     * Determine the gc generation of this segment. Note that bulk segments don't have
+     * generations (i.e. stay at 0).
+     * @return  the gc generation of this segment or 0 if this is bulk segment.
+     */
     public int getGcGen() {
-        return getGcGen(data);
+        return getGcGen(data, id.asUUID());
     }
 
     public RecordType getRootType(int index) {
diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java
index 84d61a7..e8954f4 100644
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java
@@ -1368,7 +1368,7 @@ public class FileStore implements SegmentStore {
     public void writeSegment(SegmentId id, byte[] data, int offset, int length) throws IOException {
         fileStoreLock.writeLock().lock();
         try {
-            int generation = Segment.getGcGen(wrap(data, offset, length));
+            int generation = Segment.getGcGen(wrap(data, offset, length), id.asUUID());
             long size = writer.writeEntry(
                     id.getMostSignificantBits(),
                     id.getLeastSignificantBits(),
diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java
index 8fcdcc2..5c7ee7d 100644
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java
@@ -218,7 +218,7 @@ class TarReader implements Closeable {
         for (Map.Entry<UUID, byte[]> entry : entries.entrySet()) {
             UUID uuid = entry.getKey();
             byte[] data = entry.getValue();
-            int generation = getGcGen(wrap(data));
+            int generation = getGcGen(wrap(data), uuid);
             writer.writeEntry(
                     uuid.getMostSignificantBits(),
                     uuid.getLeastSignificantBits(),
