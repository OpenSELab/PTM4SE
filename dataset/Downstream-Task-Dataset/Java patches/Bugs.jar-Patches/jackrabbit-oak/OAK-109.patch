diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/Oak.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/Oak.java
index 04020c1..9399ae9 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/Oak.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/Oak.java
@@ -49,6 +49,7 @@ import com.google.common.base.Function;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.io.Closer;
+
 import org.apache.jackrabbit.oak.api.ContentRepository;
 import org.apache.jackrabbit.oak.api.ContentSession;
 import org.apache.jackrabbit.oak.api.Root;
@@ -60,6 +61,7 @@ import org.apache.jackrabbit.oak.management.RepositoryManager;
 import org.apache.jackrabbit.oak.plugins.commit.ConflictHook;
 import org.apache.jackrabbit.oak.plugins.index.AsyncIndexUpdate;
 import org.apache.jackrabbit.oak.plugins.index.CompositeIndexEditorProvider;
+import org.apache.jackrabbit.oak.plugins.index.IndexConstants;
 import org.apache.jackrabbit.oak.plugins.index.IndexEditorProvider;
 import org.apache.jackrabbit.oak.plugins.index.IndexUpdateProvider;
 import org.apache.jackrabbit.oak.plugins.index.property.jmx.PropertyIndexAsyncReindex;
@@ -528,11 +530,11 @@ public class Oak {
                     task.getIndexStats(), IndexStatsMBean.TYPE, name));
 
             PropertyIndexAsyncReindex asyncPI = new PropertyIndexAsyncReindex(
-                    new AsyncIndexUpdate("async-reindex", store, indexEditors,
-                            true), getExecutor()
-            );
-            regs.add(registerMBean(whiteboard, PropertyIndexAsyncReindexMBean.class,
-                    asyncPI, PropertyIndexAsyncReindexMBean.TYPE, name));
+                    new AsyncIndexUpdate(IndexConstants.ASYNC_REINDEX_VALUE,
+                            store, indexEditors, true), getExecutor());
+            regs.add(registerMBean(whiteboard,
+                    PropertyIndexAsyncReindexMBean.class, asyncPI,
+                    PropertyIndexAsyncReindexMBean.TYPE, name));
         }
 
         regs.add(registerMBean(whiteboard, QueryEngineSettingsMBean.class,
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java
index c8879d0..ea8dd80 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/AsyncIndexUpdate.java
@@ -357,29 +357,30 @@ public class AsyncIndexUpdate implements Runnable {
                 } else {
                     postAsyncRunStatsStatus(indexStats);
                 }
-            } else if (switchOnSync) {
-                log.debug("No changes detected after diff; will try to"
-                        + " switch to synchronous updates on {}",
-                        reindexedDefinitions);
-
-                // no changes after diff, switch to sync on the async defs
-                for (String path : reindexedDefinitions) {
-                    NodeBuilder c = builder;
-                    for (String p : elements(path)) {
-                        c = c.getChildNode(p);
-                    }
-                    if (c.exists() && !c.getBoolean(REINDEX_PROPERTY_NAME)) {
-                        c.removeProperty(ASYNC_PROPERTY_NAME);
+            } else {
+                if (switchOnSync) {
+                    log.debug(
+                            "No changes detected after diff; will try to switch to synchronous updates on {}",
+                            reindexedDefinitions);
+
+                    // no changes after diff, switch to sync on the async defs
+                    for (String path : reindexedDefinitions) {
+                        NodeBuilder c = builder;
+                        for (String p : elements(path)) {
+                            c = c.getChildNode(p);
+                        }
+                        if (c.exists() && !c.getBoolean(REINDEX_PROPERTY_NAME)) {
+                            c.removeProperty(ASYNC_PROPERTY_NAME);
+                        }
                     }
+                    reindexedDefinitions.clear();
                 }
-                reindexedDefinitions.clear();
+                postAsyncRunStatsStatus(indexStats);
             }
             mergeWithConcurrencyCheck(builder, beforeCheckpoint, callback.lease);
         } finally {
             callback.close();
         }
-
-        postAsyncRunStatsStatus(indexStats);
     }
 
     private void mergeWithConcurrencyCheck(
