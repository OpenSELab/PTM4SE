diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java
index fc7cd5a..d24876f 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java
@@ -523,7 +523,8 @@ public class Commit {
             String conflictMessage = null;
             Revision conflictRevision = newestRev;
             if (newestRev == null) {
-                if ((op.isDelete() || !op.isNew()) && isConflicting(before, op)) {
+                if ((op.isDelete() || !op.isNew())
+                        && !allowConcurrentAddRemove(before, op)) {
                     conflictMessage = "The node " +
                             op.getId() + " does not exist or is already deleted";
                     if (before != null && !before.getLocalDeleted().isEmpty()) {
@@ -531,7 +532,7 @@ public class Commit {
                     }
                 }
             } else {
-                if (op.isNew() && isConflicting(before, op)) {
+                if (op.isNew() && !allowConcurrentAddRemove(before, op)) {
                     conflictMessage = "The node " +
                             op.getId() + " was already added in revision\n" +
                             formatConflictRevision(newestRev);
@@ -616,6 +617,25 @@ public class Commit {
     }
 
     /**
+     * Checks whether a concurrent add/remove operation is allowed with the
+     * given before document and update operation. This method will first check
+     * if the concurrent add/remove feature is enable and return {@code false}
+     * immediately if it is disabled. Only when enabled will this method check
+     * if there is a conflict based on the given document and update operation.
+     * See also {@link #isConflicting(NodeDocument, UpdateOp)}.
+     *
+     * @param before the contents of the document before the update.
+     * @param op the update to perform.
+     * @return {@code true} is a concurrent add/remove update is allowed;
+     *      {@code false} otherwise.
+     */
+    private boolean allowConcurrentAddRemove(@Nullable NodeDocument before,
+                                             @Nonnull UpdateOp op) {
+        return nodeStore.getEnableConcurrentAddRemove()
+                && !isConflicting(before, op);
+    }
+
+    /**
      * @return the branch if this is a branch commit, otherwise {@code null}.
      */
     @CheckForNull
