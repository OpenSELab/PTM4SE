diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/Property2IndexLookup.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/Property2IndexLookup.java
index bbf71e3..7a31ae6 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/Property2IndexLookup.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/Property2IndexLookup.java
@@ -18,6 +18,7 @@ package org.apache.jackrabbit.oak.plugins.index.p2;
 
 import static org.apache.jackrabbit.oak.plugins.index.IndexConstants.INDEX_DEFINITIONS_NAME;
 
+import java.util.Iterator;
 import java.util.Set;
 
 import javax.annotation.Nullable;
@@ -25,6 +26,7 @@ import javax.annotation.Nullable;
 import org.apache.jackrabbit.oak.api.PropertyState;
 import org.apache.jackrabbit.oak.api.PropertyValue;
 import org.apache.jackrabbit.oak.api.Type;
+import org.apache.jackrabbit.oak.commons.PathUtils;
 import org.apache.jackrabbit.oak.plugins.index.IndexConstants;
 import org.apache.jackrabbit.oak.plugins.index.p2.strategy.ContentMirrorStoreStrategy;
 import org.apache.jackrabbit.oak.plugins.index.p2.strategy.IndexStoreStrategy;
@@ -72,24 +74,24 @@ public class Property2IndexLookup {
      * @return true if the property is indexed
      */
     public boolean isIndexed(String name, String path) {
-        if (getIndexDefinitionNode(name) != null) {
-            return true;
-        }
-
-        // TODO use PathUtils
-        if (path.startsWith("/")) {
-            path = path.substring(1);
-        }
-        int slash = path.indexOf('/');
-        if (slash == -1) {
-            return false;
+        return isIndexed(root, name, path);
+    }
+    
+    private static boolean isIndexed(NodeState root, String name, String path) {
+        NodeState node = root;
+        Iterator<String> it = PathUtils.elements(path).iterator();
+        while (true) {
+            if (getIndexDefinitionNode(node, name) != null) {
+                return true;
+            }
+            if (!it.hasNext()) {
+                break;
+            }
+            node = node.getChildNode(it.next());
         }
-
-        NodeState child = root.getChildNode(path.substring(0, slash));
-        return new Property2IndexLookup(child).isIndexed(
-                name, path.substring(slash));
+        return false;
     }
-
+    
     /**
      * Searches for a given <code>String<code> value within this index.
      * 
@@ -112,69 +114,33 @@ public class Property2IndexLookup {
      * @return the set of matched paths
      */
     public Set<String> find(String name, PropertyValue value) {
+        NodeState state = getIndexDefinitionNode(root, name);
+        if (state == null || state.getChildNode(":index") == null) {
+            throw new IllegalArgumentException("No index for " + name);
+        }
         Set<String> paths = Sets.newHashSet();
-
-        NodeState state = getIndexDefinitionNode(name);
-        if (state != null && state.getChildNode(":index") != null) {
-            state = state.getChildNode(":index");
-            if (value == null) {
-                paths.addAll(store.find(state, null));
-            } else {
-                paths.addAll(store.find(state, Property2Index.encode(value)));
-            }
+        state = state.getChildNode(":index");
+        if (value == null) {
+            paths.addAll(store.find(state, null));
         } else {
-            // No index available, so first check this node for a match
-            PropertyState property = root.getProperty(name);
-            if (property != null) {
-                if (value == null || value.isArray()) {
-                    // let query engine handle property existence and
-                    // multi-valued look ups;
-                    // simply return all nodes that have this property
-                    paths.add("");
-                } else {
-                    // does it match any of the values of this property?
-                    for (int i = 0; i < property.count(); i++) {
-                        if (property.getValue(value.getType(), i).equals(value.getValue(value.getType()))) {
-                            paths.add("");
-                            // no need to check for more matches in this property
-                            break;
-                        }
-                    }
-                }
-            }
-
-            // ... and then recursively look up from the rest of the tree
-            for (ChildNodeEntry entry : root.getChildNodeEntries()) {
-                String base = entry.getName();
-                Property2IndexLookup lookup =
-                        new Property2IndexLookup(entry.getNodeState());
-                for (String path : lookup.find(name, value)) {
-                    if (path.isEmpty()) {
-                        paths.add(base);
-                    } else {
-                        paths.add(base + "/" + path);
-                    }
-                }
-            }
+            paths.addAll(store.find(state, Property2Index.encode(value)));
         }
-
         return paths;
     }
 
     public double getCost(String name, PropertyValue value) {
-        double cost = 0.0;
         // TODO the cost method is currently reading all the data - 
         // is not supposed to do that, it is only supposed to estimate
-        NodeState state = getIndexDefinitionNode(name);
-        if (state != null && state.getChildNode(":index") != null) {
-            state = state.getChildNode(":index");
-            if (value == null) {
-                cost += store.count(state, null);
-            } else {
-                cost += store.count(state, Property2Index.encode(value));
-            }
+        NodeState state = getIndexDefinitionNode(root, name);
+        if (state == null || state.getChildNode(":index") == null) {
+            return Double.POSITIVE_INFINITY;
+        }
+        state = state.getChildNode(":index");
+        double cost;
+        if (value == null) {
+            cost = store.count(state, null);
         } else {
-            cost = Double.POSITIVE_INFINITY;
+            cost = store.count(state, Property2Index.encode(value));
         }
         return cost;
     }
@@ -187,8 +153,8 @@ public class Property2IndexLookup {
      *         index definition node was found
      */
     @Nullable
-    private NodeState getIndexDefinitionNode(String name) {
-        NodeState state = root.getChildNode(INDEX_DEFINITIONS_NAME);
+    private static NodeState getIndexDefinitionNode(NodeState node, String name) {
+        NodeState state = node.getChildNode(INDEX_DEFINITIONS_NAME);
         if (state != null) {
             for (ChildNodeEntry entry : state.getChildNodeEntries()) {
                 PropertyState type = entry.getNodeState().getProperty(IndexConstants.TYPE_PROPERTY_NAME);
