diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java
index ea255df..2e60d8d 100644
--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java
+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndexEditor.java
@@ -461,6 +461,14 @@ public class LuceneIndexEditor implements IndexEditor, Aggregate.AggregateRoot {
                                           PropertyState property,
                                           String pname,
                                           PropertyDefinition pd) throws CommitFailedException {
+        // Ignore and warn if property multi-valued as not supported
+        if (property.getType().isArray()) {
+            log.warn(
+                "Ignoring ordered property {} of type {} for path {} as multivalued ordered property not supported",
+                pname, Type.fromTag(property.getType().tag(), true), getPath());
+            return false;
+        }
+
         int tag = property.getType().tag();
         int idxDefinedTag = pd.getType();
         // Try converting type to the defined type in the index definition
@@ -475,37 +483,35 @@ public class LuceneIndexEditor implements IndexEditor, Aggregate.AggregateRoot {
 
         String name = FieldNames.createDocValFieldName(pname);
         boolean fieldAdded = false;
-        for (int i = 0; i < property.count(); i++) {
-            Field f = null;
-            try {
-                if (tag == Type.LONG.tag()) {
-                    //TODO Distinguish fields which need to be used for search and for sort
-                    //If a field is only used for Sort then it can be stored with less precision
-                    f = new NumericDocValuesField(name, property.getValue(Type.LONG, i));
-                } else if (tag == Type.DATE.tag()) {
-                    String date = property.getValue(Type.DATE, i);
-                    f = new NumericDocValuesField(name, FieldFactory.dateToLong(date));
-                } else if (tag == Type.DOUBLE.tag()) {
-                    f = new DoubleDocValuesField(name, property.getValue(Type.DOUBLE, i));
-                } else if (tag == Type.BOOLEAN.tag()) {
-                    f = new SortedDocValuesField(name,
-                        new BytesRef(property.getValue(Type.BOOLEAN, i).toString()));
-                } else if (tag == Type.STRING.tag()) {
-                    f = new SortedDocValuesField(name,
-                        new BytesRef(property.getValue(Type.STRING, i)));
-                }
+        Field f = null;
+        try {
+            if (tag == Type.LONG.tag()) {
+                //TODO Distinguish fields which need to be used for search and for sort
+                //If a field is only used for Sort then it can be stored with less precision
+                f = new NumericDocValuesField(name, property.getValue(Type.LONG));
+            } else if (tag == Type.DATE.tag()) {
+                String date = property.getValue(Type.DATE);
+                f = new NumericDocValuesField(name, FieldFactory.dateToLong(date));
+            } else if (tag == Type.DOUBLE.tag()) {
+                f = new DoubleDocValuesField(name, property.getValue(Type.DOUBLE));
+            } else if (tag == Type.BOOLEAN.tag()) {
+                f = new SortedDocValuesField(name,
+                    new BytesRef(property.getValue(Type.BOOLEAN).toString()));
+            } else if (tag == Type.STRING.tag()) {
+                f = new SortedDocValuesField(name,
+                    new BytesRef(property.getValue(Type.STRING)));
+            }
 
-                if (f != null) {
-                    fields.add(f);
-                    fieldAdded = true;
-                }
-            } catch (Exception e) {
-                log.warn(
-                    "Ignoring ordered property. Could not convert property {} of type {} to type " +
-                        "{} for path {}",
-                    pname, Type.fromTag(property.getType().tag(), false),
-                    Type.fromTag(tag, false), getPath(), e);
+            if (f != null) {
+                fields.add(f);
+                fieldAdded = true;
             }
+        } catch (Exception e) {
+            log.warn(
+                "Ignoring ordered property. Could not convert property {} of type {} to type " +
+                    "{} for path {}",
+                pname, Type.fromTag(property.getType().tag(), false),
+                Type.fromTag(tag, false), getPath(), e);
         }
         return fieldAdded;
     }
