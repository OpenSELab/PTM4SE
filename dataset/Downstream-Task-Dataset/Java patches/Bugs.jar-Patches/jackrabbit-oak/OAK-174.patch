diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/RecordIdMap.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/RecordIdMap.java
index 0b6660c..fe62ffd 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/RecordIdMap.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/RecordIdMap.java
@@ -29,8 +29,11 @@ import javax.annotation.Nonnull;
  * A memory optimised map of {@code short} key to {@link RecordId} values.
  */
 public class RecordIdMap {
-    private short[] keys;
-    private RecordId[] values;
+    private static final short[] NO_KEYS = new short[0];
+    private static final RecordId[] NO_VALUES = new RecordId[0];
+
+    private short[] keys = NO_KEYS;
+    private RecordId[] values = NO_VALUES;
 
     /**
      * Associates {@code key} with {@code value} if not already present
@@ -39,7 +42,7 @@ public class RecordIdMap {
      * @return  {@code true} if added, {@code false} if already present
      */
     public boolean put(short key, @Nonnull RecordId value) {
-        if (keys == null) {
+        if (keys.length == 0) {
             keys = new short[1];
             values = new RecordId[1];
             keys[0] = key;
@@ -90,7 +93,7 @@ public class RecordIdMap {
      * @return  {@code true} iff {@code key} is present.
      */
     public boolean containsKey(short key) {
-        return keys != null && binarySearch(keys, key) >= 0;
+        return binarySearch(keys, key) >= 0;
     }
 
     /**
@@ -105,6 +108,7 @@ public class RecordIdMap {
      * the natural ordering of shorts.
      * @param index
      * @return the key at {@code index}
+     * @throws ArrayIndexOutOfBoundsException if not {@code 0 <= index < size()}
      */
     public short getKey(int index) {
         return keys[index];
@@ -115,6 +119,7 @@ public class RecordIdMap {
      * the natural ordering of shorts.
      * @param index
      * @return the value at {@code index}
+     * @throws ArrayIndexOutOfBoundsException if not {@code 0 <= index < size()}
      */
     @Nonnull
     public RecordId getRecordId(int index) {
