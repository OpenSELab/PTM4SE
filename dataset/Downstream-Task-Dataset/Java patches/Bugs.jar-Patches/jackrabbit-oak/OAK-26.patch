diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeStore.java
index ac9ee2f..8581ecb 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeStore.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeStore.java
@@ -28,6 +28,7 @@ import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -50,6 +51,7 @@ import javax.annotation.Nullable;
 import com.google.common.base.Function;
 import com.google.common.cache.Cache;
 import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import org.apache.jackrabbit.mk.api.MicroKernelException;
 import org.apache.jackrabbit.mk.blobs.BlobStore;
@@ -786,28 +788,57 @@ public final class MongoNodeStore
         if (b == null) {
             throw new MicroKernelException("Empty branch cannot be reset");
         }
+        if (!b.getCommits().last().equals(branchHead)) {
+            throw new MicroKernelException(branchHead + " is not the head " +
+                    "of a branch");
+        }
         if (!b.containsCommit(ancestor)) {
             throw new MicroKernelException(ancestor + " is not " +
                     "an ancestor revision of " + branchHead);
         }
-        Revision rev;
+        if (branchHead.equals(ancestor)) {
+            // trivial
+            return branchHead;
+        }
         boolean success = false;
         Commit commit = newCommit(branchHead);
         try {
-            // apply reverse diff
-            getRoot(ancestor).compareAgainstBaseState(getRoot(branchHead),
-                    new CommitDiff(commit, getBlobSerializer()));
-            UpdateOp rootOp = commit.getUpdateOperationForNode("/");
-            // clear collisions
             Iterator<Revision> it = b.getCommits().tailSet(ancestor).iterator();
             // first revision is the ancestor (tailSet is inclusive)
-            // do not clear collision for this revision
-            it.next();
+            // do not undo changes for this revision
+            Revision base = it.next();
+            Map<String, UpdateOp> operations = new HashMap<String, UpdateOp>();
             while (it.hasNext()) {
-                NodeDocument.removeCollision(rootOp, it.next());
+                Revision reset = it.next();
+                getRoot(reset).compareAgainstBaseState(getRoot(base),
+                        new ResetDiff(reset.asTrunkRevision(), operations));
+                UpdateOp rootOp = operations.get("/");
+                if (rootOp == null) {
+                    rootOp = new UpdateOp(Utils.getIdFromPath("/"), false);
+                    NodeDocument.setModified(rootOp, commit.getRevision());
+                    operations.put("/", rootOp);
+                }
+                NodeDocument.removeCollision(rootOp, reset.asTrunkRevision());
+                NodeDocument.removeRevision(rootOp, reset.asTrunkRevision());
+            }
+            // update root document first
+            if (store.findAndUpdate(Collection.NODES, operations.get("/")) != null) {
+                // clean up in-memory branch data
+                // first revision is the ancestor (tailSet is inclusive)
+                List<Revision> revs = Lists.newArrayList(b.getCommits().tailSet(ancestor));
+                for (Revision r : revs.subList(1, revs.size())) {
+                    b.removeCommit(r);
+                }
+                // successfully updating the root document can be considered
+                // as success because the changes are not marked as committed
+                // anymore
+                success = true;
+            }
+            operations.remove("/");
+            // update remaining documents
+            for (UpdateOp op : operations.values()) {
+                store.findAndUpdate(Collection.NODES, op);
             }
-            rev = apply(commit);
-            success = true;
         } finally {
             if (!success) {
                 canceled(commit);
@@ -815,7 +846,7 @@ public final class MongoNodeStore
                 done(commit, true, null);
             }
         }
-        return rev;
+        return ancestor;
     }
 
     @Nonnull
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java
index de0d062..aba6a98 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java
@@ -843,6 +843,11 @@ public class NodeDocument extends Document {
         checkNotNull(op).unsetMapEntry(REVISIONS, checkNotNull(revision));
     }
 
+    public static void removeRevision(@Nonnull UpdateOp op,
+                                      @Nonnull Revision revision) {
+        checkNotNull(op).removeMapEntry(REVISIONS, checkNotNull(revision));
+    }
+
     public static void removeCollision(@Nonnull UpdateOp op,
                                        @Nonnull Revision revision) {
         checkNotNull(op).removeMapEntry(COLLISIONS, checkNotNull(revision));
@@ -872,6 +877,11 @@ public class NodeDocument extends Document {
                 String.valueOf(commitRootDepth));
     }
 
+    public static void removeCommitRoot(@Nonnull UpdateOp op,
+                                        @Nonnull Revision revision) {
+        checkNotNull(op).removeMapEntry(COMMIT_ROOT, revision);
+    }
+
     public static void setDeleted(@Nonnull UpdateOp op,
                                   @Nonnull Revision revision,
                                   boolean deleted) {
@@ -879,6 +889,11 @@ public class NodeDocument extends Document {
                 String.valueOf(deleted));
     }
 
+    public static void removeDeleted(@Nonnull UpdateOp op,
+                                     @Nonnull Revision revision) {
+        checkNotNull(op).removeMapEntry(DELETED, revision);
+    }
+
     //----------------------------< internal >----------------------------------
 
     /**
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/ResetDiff.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/ResetDiff.java
new file mode 100644
index 0000000..9559887
--- /dev/null
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/ResetDiff.java
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jackrabbit.oak.plugins.mongomk;
+
+import java.util.Map;
+
+import javax.annotation.Nonnull;
+
+import org.apache.jackrabbit.oak.api.PropertyState;
+import org.apache.jackrabbit.oak.commons.PathUtils;
+import org.apache.jackrabbit.oak.plugins.mongomk.util.Utils;
+import org.apache.jackrabbit.oak.spi.state.NodeState;
+import org.apache.jackrabbit.oak.spi.state.NodeStateDiff;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.EMPTY_NODE;
+import static org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState.MISSING_NODE;
+
+/**
+ * Implementation of a node state diff, which translates a diff into reset
+ * operations on a branch.
+ */
+class ResetDiff implements NodeStateDiff {
+
+    private final Revision revision;
+    private final String path;
+    private final Map<String, UpdateOp> operations;
+    private UpdateOp update;
+
+    ResetDiff(@Nonnull Revision revision,
+              @Nonnull Map<String, UpdateOp> operations) {
+        this(revision, "/", operations);
+    }
+
+    private ResetDiff(@Nonnull Revision revision,
+                      @Nonnull String path,
+                      @Nonnull Map<String, UpdateOp> operations) {
+        this.revision = checkNotNull(revision);
+        this.path = checkNotNull(path);
+        this.operations = checkNotNull(operations);
+    }
+
+    @Override
+    public boolean propertyAdded(PropertyState after) {
+        getUpdateOp().removeMapEntry(after.getName(), revision);
+        return true;
+    }
+
+    @Override
+    public boolean propertyChanged(PropertyState before, PropertyState after) {
+        getUpdateOp().removeMapEntry(after.getName(), revision);
+        return true;
+    }
+
+    @Override
+    public boolean propertyDeleted(PropertyState before) {
+        getUpdateOp().removeMapEntry(before.getName(), revision);
+        return true;
+    }
+
+    @Override
+    public boolean childNodeAdded(String name, NodeState after) {
+        String p = PathUtils.concat(path, name);
+        ResetDiff diff = new ResetDiff(revision, p, operations);
+        UpdateOp op = diff.getUpdateOp();
+        NodeDocument.removeDeleted(op, revision);
+        return after.compareAgainstBaseState(EMPTY_NODE, diff);
+    }
+
+    @Override
+    public boolean childNodeChanged(String name,
+                                    NodeState before,
+                                    NodeState after) {
+        String p = PathUtils.concat(path, name);
+        return after.compareAgainstBaseState(before,
+                new ResetDiff(revision, p, operations));
+    }
+
+    @Override
+    public boolean childNodeDeleted(String name, NodeState before) {
+        String p = PathUtils.concat(path, name);
+        ResetDiff diff = new ResetDiff(revision, p, operations);
+        NodeDocument.removeDeleted(diff.getUpdateOp(), revision);
+        return MISSING_NODE.compareAgainstBaseState(before, diff);
+    }
+
+    Map<String, UpdateOp> getOperations() {
+        return operations;
+    }
+
+    private UpdateOp getUpdateOp() {
+        if (update == null) {
+            update = operations.get(path);
+            if (update == null) {
+                String id = Utils.getIdFromPath(path);
+                update = new UpdateOp(id, false);
+                operations.put(path, update);
+            }
+            NodeDocument.removeRevision(update, revision);
+            NodeDocument.removeCommitRoot(update, revision);
+        }
+        return update;
+    }
+}
