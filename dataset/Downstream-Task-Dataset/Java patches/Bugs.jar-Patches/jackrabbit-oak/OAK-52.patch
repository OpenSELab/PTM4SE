diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/commit/ChildOrderConflictHandler.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/commit/ChildOrderConflictHandler.java
index bf31922..c4ea380 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/commit/ChildOrderConflictHandler.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/commit/ChildOrderConflictHandler.java
@@ -45,7 +45,8 @@ public class ChildOrderConflictHandler extends ConflictHandlerWrapper {
         if (isChildOrderProperty(ours)) {
             // two sessions concurrently called orderBefore() on a Tree
             // that was previously unordered.
-            return Resolution.THEIRS;
+            merge(parent, ours, theirs);
+            return Resolution.MERGED;
         } else {
             return handler.addExistingProperty(parent, ours, theirs);
         }
@@ -75,11 +76,11 @@ public class ChildOrderConflictHandler extends ConflictHandlerWrapper {
     }
 
     private static void merge(NodeBuilder parent, PropertyState ours, PropertyState theirs) {
-        Set<String> theirOrder = Sets.newHashSet(theirs.getValue(Type.STRINGS));
-        PropertyBuilder<String> merged = PropertyBuilder.array(Type.STRING).assignFrom(theirs);
+        Set<String> theirOrder = Sets.newHashSet(theirs.getValue(Type.NAMES));
+        PropertyBuilder<String> merged = PropertyBuilder.array(Type.NAME).assignFrom(theirs);
 
         // Append child node names from ours that are not in theirs
-        for (String ourChild : ours.getValue(Type.STRINGS)) {
+        for (String ourChild : ours.getValue(Type.NAMES)) {
             if (!theirOrder.contains(ourChild)) {
                 merged.addValue(ourChild);
             }
