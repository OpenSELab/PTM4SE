diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java
index 7b1bec6..259474d 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java
@@ -18,9 +18,12 @@ package org.apache.jackrabbit.oak.plugins.document;
 
 import java.util.AbstractMap;
 import java.util.AbstractSet;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.SortedMap;
@@ -32,6 +35,7 @@ import org.apache.jackrabbit.oak.plugins.document.util.MergeSortedIterators;
 
 import com.google.common.base.Objects;
 import com.google.common.collect.Iterators;
+import com.google.common.collect.Lists;
 
 /**
  * A value map contains the versioned values of a property. The key into this
@@ -61,9 +65,32 @@ class ValueMap {
                 if (map.isEmpty()) {
                     docs = doc.getPreviousDocs(property, null).iterator();
                 } else {
-                    docs = Iterators.concat(
-                            Iterators.singletonIterator(doc),
-                            doc.getPreviousDocs(property, null).iterator());
+                    // merge sort local map into maps of previous documents
+                    List<Iterator<NodeDocument>> iterators = 
+                            new ArrayList<Iterator<NodeDocument>>(2);
+                    iterators.add(Iterators.singletonIterator(doc));
+                    iterators.add(doc.getPreviousDocs(property, null).iterator());                            
+                    docs = Iterators.mergeSorted(iterators, new Comparator<NodeDocument>() {
+                                @Override
+                                public int compare(NodeDocument o1,
+                                                   NodeDocument o2) {
+                                    Revision r1 = getFirstRevision(o1);
+                                    Revision r2 = getFirstRevision(o2);
+                                    return c.compare(r1, r2);
+                                }
+                            
+                                private Revision getFirstRevision(NodeDocument d) {
+                                    Map<Revision, String> values;
+                                    if (Objects.equal(d.getId(), doc.getId())) {
+                                        // return local map for main document
+                                        values = d.getLocalMap(property);
+                                    } else {
+                                        values = d.getValueMap(property);
+                                    }
+                                    return values.keySet().iterator().next();
+                                }
+                        
+                            });
                 }
 
                 return new MergeSortedIterators<Map.Entry<Revision, String>>(
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java
index 48bed08..3cb3dc5 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java
@@ -100,7 +100,9 @@ public abstract class MergeSortedIterators<T> implements Iterator<T> {
             PeekingIterator<T> pIt = Iterators.peekingIterator(it);
             if (!iterators.isEmpty()
                     &&  comparator.compare(pIt.peek(), lastPeek) < 0) {
-                throw new IllegalStateException(description() + " First element of next iterator must be greater than previous iterator");
+                throw new IllegalStateException(description() + 
+                        " First element of next iterator (" + pIt.peek() + ")" +
+                        " must be after previous iterator (" + lastPeek + ")");
             }
             lastPeek = pIt.peek();
             iterators.add(pIt);
