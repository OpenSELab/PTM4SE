diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java
index e9f7dd2..fa5728b 100644
--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java
+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/Aggregate.java
@@ -30,7 +30,6 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import org.apache.jackrabbit.oak.api.CommitFailedException;
 import org.apache.jackrabbit.oak.api.PropertyState;
 import org.apache.jackrabbit.oak.commons.PathUtils;
 import org.apache.jackrabbit.oak.plugins.index.lucene.util.ConfigUtil;
@@ -79,7 +78,7 @@ class Aggregate {
     }
 
     public void collectAggregates(NodeState root, ResultCollector collector) {
-        if (nodeTypeName.equals(ConfigUtil.getPrimaryTypeName(root))) {
+        if (matchingType(nodeTypeName, root)) {
             List<Matcher> matchers = createMatchers();
             collectAggregates(root, matchers, collector);
         }
@@ -111,6 +110,19 @@ class Aggregate {
         return nodeTypeName;
     }
 
+    private static boolean matchingType(String nodeTypeName, NodeState nodeState) {
+        if (nodeTypeName.equals(ConfigUtil.getPrimaryTypeName(nodeState))) {
+            return true;
+        }
+
+        for (String mixin : ConfigUtil.getMixinNames(nodeState)) {
+            if (nodeTypeName.equals(mixin)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     private static void collectAggregates(NodeState nodeState, List<Matcher> matchers,
                                           ResultCollector collector) {
         for (ChildNodeEntry cne : nodeState.getChildNodeEntries()) {
@@ -231,7 +243,7 @@ class Aggregate {
             //last segment -> add to collector if node type matches
             if (depth == maxDepth() - 1
                     && primaryType != null
-                    && !primaryType.equals(ConfigUtil.getPrimaryTypeName(nodeState))) {
+                    && !matchingType(primaryType, nodeState)) {
                 return false;
             }
             return super.match(name, nodeState, depth);
@@ -256,7 +268,19 @@ class Aggregate {
 
         @Override
         public Aggregate getAggregate(NodeState matchedNodeState) {
-            return aggMapper.getAggregate(ConfigUtil.getPrimaryTypeName(matchedNodeState));
+            //Check agg defn for primaryType first
+            Aggregate agg = aggMapper.getAggregate(ConfigUtil.getPrimaryTypeName(matchedNodeState));
+
+            //If not found then look for defn for mixins
+            if (agg == null) {
+                for (String mixin : ConfigUtil.getMixinNames(matchedNodeState)) {
+                    agg = aggMapper.getAggregate(mixin);
+                    if (agg != null) {
+                        break;
+                    }
+                }
+            }
+            return agg;
         }
 
         @Override
diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java
index 476f7e1..73287a0 100644
--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java
+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/ConfigUtil.java
@@ -19,6 +19,8 @@
 
 package org.apache.jackrabbit.oak.plugins.index.lucene.util;
 
+import java.util.Collections;
+
 import com.google.common.primitives.Ints;
 import org.apache.jackrabbit.JcrConstants;
 import org.apache.jackrabbit.oak.api.Blob;
@@ -60,6 +62,11 @@ public class ConfigUtil {
         return (ps == null) ? JcrConstants.NT_BASE : ps.getValue(Type.NAME);
     }
 
+    public static Iterable<String> getMixinNames(NodeState nodeState) {
+        PropertyState ps = nodeState.getProperty(JcrConstants.JCR_MIXINTYPES);
+        return (ps == null) ? Collections.<String>emptyList() : ps.getValue(Type.NAMES);
+    }
+
     /**
      * Assumes that given state is of type nt:file and then reads
      * the jcr:content/@jcr:data property to get the binary content
diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java
index 0761902..b1049b9 100644
--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java
+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/package-info.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-@Version("1.1.0")
+@Version("1.2.0")
 @Export(optional = "provide:=true")
 package org.apache.jackrabbit.oak.plugins.index.lucene.util;
 
