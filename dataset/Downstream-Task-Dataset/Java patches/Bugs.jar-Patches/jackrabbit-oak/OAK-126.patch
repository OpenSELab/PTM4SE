diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java
index 2f23838..8000126 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java
@@ -798,7 +798,7 @@ public final class NodeDocument extends Document implements CachedNodeDocument{
                     min, readRevision, validRevisions, lastRevs);
 
             // check if there may be more recent values in a previous document
-            if (value != null && !getPreviousRanges().isEmpty()) {
+            if (!getPreviousRanges().isEmpty()) {
                 Revision newest = getLocalMap(key).firstKey();
                 if (isRevisionNewer(nodeStore, newest, value.revision)) {
                     // not reading the most recent value, we may need to
@@ -894,13 +894,13 @@ public final class NodeDocument extends Document implements CachedNodeDocument{
         // check local deleted map first
         Value value = getLatestValue(context, getLocalDeleted(),
                 null, maxRev, validRevisions, lastRevs);
-        if (value == null && !getPreviousRanges().isEmpty()) {
+        if (value.value == null && !getPreviousRanges().isEmpty()) {
             // need to check complete map
             value = getLatestValue(context, getDeleted(),
                     null, maxRev, validRevisions, lastRevs);
         }
 
-        return value != null && "false".equals(value.value) ? value.revision : null;
+        return "false".equals(value.value) ? value.revision : null;
     }
 
     /**
@@ -1435,10 +1435,12 @@ public final class NodeDocument extends Document implements CachedNodeDocument{
 
     /**
      * Get the latest property value that is larger or equal the min revision,
-     * and smaller or equal the readRevision revision. A {@code null} return
-     * value indicates that the property was not set or removed within the given
-     * range. A non-null value means the the property was either set or removed
-     * depending on {@link Value#value}.
+     * and smaller or equal the readRevision revision. The returned value will
+     * provide the revision when the value was set between the {@code min} and
+     * {@code readRevision}. The returned value will have a {@code null} value
+     * contained if there is no valid change within the given range. In this
+     * case the associated revision is {@code min} or {@code readRevision} if
+     * no {@code min} is provided.
      *
      * @param valueMap the sorted revision-value map
      * @param min the minimum revision (null meaning unlimited)
@@ -1446,9 +1448,9 @@ public final class NodeDocument extends Document implements CachedNodeDocument{
      * @param validRevisions map of revision to commit value considered valid
      *                       against the given readRevision.
      * @param lastRevs to keep track of the most recent modification.
-     * @return the value, or null if not found
+     * @return the latest value from the {@code readRevision} point of view.
      */
-    @CheckForNull
+    @Nonnull
     private Value getLatestValue(@Nonnull RevisionContext context,
                                  @Nonnull Map<Revision, String> valueMap,
                                  @Nullable Revision min,
@@ -1486,7 +1488,9 @@ public final class NodeDocument extends Document implements CachedNodeDocument{
                 return new Value(commitRev, entry.getValue());
             }
         }
-        return null;
+
+        Revision r = min != null ? min : readRevision;
+        return new Value(r, null);
     }
 
     @Override
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java
index 94d21d3..7b1bec6 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java
@@ -120,27 +120,34 @@ class ValueMap {
 
             @Override
             public String get(Object key) {
+                Revision r = (Revision) key;
                 // first check values map of this document
-                String value = map.get(key);
-                if (value != null) {
-                    return value;
+                if (map.containsKey(r)) {
+                    return map.get(r);
                 }
-                Revision r = (Revision) key;
                 for (NodeDocument prev : doc.getPreviousDocs(property, r)) {
-                    value = prev.getValueMap(property).get(key);
+                    String value = prev.getValueMap(property).get(r);
                     if (value != null) {
                         return value;
                     }
                 }
-                // not found
+                // not found or null
                 return null;
             }
 
             @Override
             public boolean containsKey(Object key) {
-                // can use get()
-                // the values map does not have null values
-                return get(key) != null;
+                // check local map first
+                if (map.containsKey(key)) {
+                    return true;
+                }
+                Revision r = (Revision) key;
+                for (NodeDocument prev : doc.getPreviousDocs(property, r)) {
+                    if (prev.getValueMap(property).containsKey(key)) {
+                        return true;
+                    }
+                }
+                return false;
             }
         };
     }
