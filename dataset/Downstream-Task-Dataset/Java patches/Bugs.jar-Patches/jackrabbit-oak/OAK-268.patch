diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java
index d5712ba..411c5fc 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java
@@ -190,13 +190,18 @@ public class MemoryNodeBuilder implements NodeBuilder {
 
     /**
      * Determine whether this child exists at its direct parent.
-     * @return  {@code true} iff this child exists at its direct parent.
+     * @return {@code true} iff this child exists at its direct parent.
      */
     private boolean exists() {
-        // No need to check the base state if write state is null. The fact that we have this
-        // builder instance proofs that this child existed at some point as it must have been
-        // retrieved from the base state.
-        return isRoot() || parent.writeState == null || parent.writeState.hasChildNode(name);
+        if (isRoot()) {
+            return true;
+        }
+        else if (parent.writeState == null) {
+            return parent.baseState != null && parent.baseState.hasChildNode(name);
+        }
+        else {
+            return parent.writeState.hasChildNode(name);
+        }
     }
 
     /**
@@ -206,18 +211,19 @@ public class MemoryNodeBuilder implements NodeBuilder {
     private boolean updateReadState() {
         if (revision != root.revision) {
             assert(!isRoot()); // root never gets here since revision == root.revision
-            if (!exists()) {
-                return false;
-            }
-            parent.updateReadState();
 
-            // The builder could have been reset, need to re-get base state
-            baseState = parent.getBaseState(name);
+            if (parent.updateReadState() && exists()) {
+                // The builder could have been reset, need to re-get base state
+                baseState = parent.getBaseState(name);
 
-            // ... same for the write state
-            writeState = parent.getWriteState(name);
+                // ... same for the write state
+                writeState = parent.getWriteState(name);
+
+                revision = root.revision;
+                return true;
+            }
 
-            revision = root.revision;
+            return false;
         }
         return writeState != null || baseState != null;
     }
@@ -238,8 +244,8 @@ public class MemoryNodeBuilder implements NodeBuilder {
     private MutableNodeState write(long newRevision, boolean reconnect) {
         // make sure that all revision numbers up to the root gets updated
         if (!isRoot()) {
-            checkState(reconnect || exists(), "This node has been removed");
             parent.write(newRevision, reconnect);
+            checkState(reconnect || exists(), "This node has been removed");
         }
 
         if (writeState == null || revision != root.revision) {
