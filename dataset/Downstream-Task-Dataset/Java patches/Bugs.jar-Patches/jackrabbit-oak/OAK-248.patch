diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java
index 2dc5bee..2854048 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java
@@ -261,6 +261,7 @@ public class JcrPathParser {
 
     public static boolean validate(String jcrPath) {
         Listener listener = new Listener() {
+            int depth;
             boolean hasRoot;
             @Override
             public boolean root() {
@@ -280,7 +281,8 @@ public class JcrPathParser {
 
             @Override
             public boolean parent() {
-                return true;
+                depth--;
+                return !hasRoot || depth >= 0;
             }
 
             @Override
@@ -289,6 +291,7 @@ public class JcrPathParser {
 
             @Override
             public boolean name(String name, int index) {
+                depth++;
                 return true;
             }
 
diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java
index 65639f1..c19578f 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java
@@ -21,6 +21,7 @@ import java.util.List;
 
 import javax.annotation.Nonnull;
 
+import org.apache.jackrabbit.oak.commons.PathUtils;
 import org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -77,7 +78,7 @@ public class NamePathMapperImpl implements NamePathMapper {
 
     @Override
     @Nonnull
-    public String getJcrPath(String oakPath) {
+    public String getJcrPath(final String oakPath) {
         final List<String> elements = new ArrayList<String>();
 
         if ("/".equals(oakPath)) {
@@ -103,11 +104,18 @@ public class NamePathMapperImpl implements NamePathMapper {
 
             @Override
             public boolean parent() {
-                if (elements.isEmpty() || "..".equals(elements.get(elements.size() - 1))) {
+                int prevIdx = elements.size() - 1;
+                String prevElem = prevIdx >= 0 ? elements.get(prevIdx) : null;
+
+                if (prevElem == null || PathUtils.denotesParent(prevElem)) {
                     elements.add("..");
                     return true;
                 }
-                elements.remove(elements.size() - 1);
+                if (prevElem.isEmpty()) {
+                    throw new IllegalArgumentException("Absolute path escapes root: " + oakPath);
+                }
+
+                elements.remove(prevElem);
                 return true;
             }
 
@@ -150,7 +158,7 @@ public class NamePathMapperImpl implements NamePathMapper {
         return jcrPath.toString();
     }
 
-    private String getOakPath(String jcrPath, final boolean keepIndex) {
+    private String getOakPath(final String jcrPath, final boolean keepIndex) {
         if ("/".equals(jcrPath)) {
             // avoid the need to special case the root path later on
             return "/";
@@ -237,11 +245,19 @@ public class NamePathMapperImpl implements NamePathMapper {
 
             @Override
             public boolean parent() {
-                if (elements.isEmpty() || "..".equals(elements.get(elements.size() - 1))) {
+                int prevIdx = elements.size() - 1;
+                String prevElem = prevIdx >= 0 ? elements.get(prevIdx) : null;
+
+                if (prevElem == null || PathUtils.denotesParent(prevElem)) {
                     elements.add("..");
                     return true;
                 }
-                elements.remove(elements.size() - 1);
+                if (prevElem.isEmpty()) {
+                    parseErrors.append("Absolute path escapes root: ").append(jcrPath);
+                    return false;
+                }
+
+                elements.remove(prevElem);
                 return true;
             }
 
