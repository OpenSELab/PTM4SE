diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java
index a2be123..d757585 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java
@@ -178,17 +178,45 @@ public class SegmentNodeStore implements NodeStore, Observable {
     @Override @Nonnull
     public synchronized String checkpoint(long lifetime) {
         checkArgument(lifetime > 0);
-        // TODO: Guard the checkpoint from garbage collection
-        return head.getRecordId().toString();
+        String name = UUID.randomUUID().toString();
+
+        // try 5 times
+        for (int i = 0; i < 5; i++) {
+            if (commitSemaphore.tryAcquire()) {
+                try {
+                    refreshHead();
+
+                    SegmentNodeState ns = head;
+                    RecordId ri = head.getRecordId();
+
+                    SegmentRootBuilder builder = ns.builder();
+                    NodeBuilder cp = builder.child(name);
+                    cp.setProperty("timestamp", System.currentTimeMillis()
+                            + lifetime);
+                    cp.setChildNode(ROOT, ns.getChildNode(ROOT));
+
+                    if (journal.setHead(ri, builder.getNodeState()
+                            .getRecordId())) {
+                        refreshHead();
+                        return name;
+                    }
+
+                } finally {
+                    commitSemaphore.release();
+                }
+            }
+        }
+
+        return name;
     }
 
     @Override @CheckForNull
     public synchronized NodeState retrieve(@Nonnull String checkpoint) {
-        // TODO: Verify validity of the checkpoint
-        RecordId id = RecordId.fromString(checkNotNull(checkpoint));
-        SegmentNodeState root =
-                new SegmentNodeState(store.getWriter().getDummySegment(), id);
-        return root.getChildNode(ROOT);
+        NodeState cp = head.getChildNode(checkpoint).getChildNode(ROOT);
+        if (cp.exists()) {
+            return cp;
+        }
+        return null;
     }
 
     private class Commit {
