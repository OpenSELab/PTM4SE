diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java
index 9b6835f..dfe473d 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/NodeDocument.java
@@ -118,6 +118,11 @@ public class NodeDocument extends Document {
 
     final DocumentStore store;
 
+    /**
+     * Parsed and sorted set of previous revisions.
+     */
+    private SortedMap<Revision, Range> previous;
+
     private final long time = System.currentTimeMillis();
 
     NodeDocument(@Nonnull DocumentStore store) {
@@ -151,19 +156,23 @@ public class NodeDocument extends Document {
 
     /**
      * Returns <code>true</code> if the given <code>revision</code> is marked
-     * committed in <strong>this</strong> document including previous documents.
+     * committed.
      *
      * @param revision the revision.
      * @return <code>true</code> if committed; <code>false</code> otherwise.
      */
     public boolean isCommitted(@Nonnull Revision revision) {
+        NodeDocument commitRootDoc = getCommitRoot(checkNotNull(revision));
+        if (commitRootDoc == null) {
+            return false;
+        }
         String rev = checkNotNull(revision).toString();
-        String value = getLocalRevisions().get(rev);
+        String value = commitRootDoc.getLocalRevisions().get(rev);
         if (value != null) {
             return Utils.isCommitted(value);
         }
         // check previous docs
-        for (NodeDocument prev : getPreviousDocs(revision, REVISIONS)) {
+        for (NodeDocument prev : commitRootDoc.getPreviousDocs(revision, REVISIONS)) {
             if (prev.containsRevision(revision)) {
                 return prev.isCommitted(revision);
             }
@@ -659,20 +668,26 @@ public class NodeDocument extends Document {
                     main.removeMapEntry(property, r);
                     old.setMapEntry(property, r, entry.getValue());
                 }
-                splitOps.add(old);
-                splitOps.add(main);
             }
+            splitOps.add(old);
+            splitOps.add(main);
         }
         return splitOps;
     }
 
-    @Override
+    /**
+     * Returns previous revision ranges for this document. The revision keys are
+     * sorted descending, newest first!
+     *
+     * @return the previous ranges for this document.
+     */
     @Nonnull
-    protected Map<?, ?> transformAndSeal(@Nonnull Map<Object, Object> map,
-                                         @Nullable String key,
-                                         int level) {
-        if (level == 1) {
-            if (PREVIOUS.equals(key)) {
+    SortedMap<Revision, Range> getPreviousRanges() {
+        if (previous == null) {
+            Map<String, String> map = getLocalMap(PREVIOUS);
+            if (map.isEmpty()) {
+                previous = EMPTY_RANGE_MAP;
+            } else {
                 SortedMap<Revision, Range> transformed = new TreeMap<Revision, Range>(
                         new Comparator<Revision>() {
                             @Override
@@ -687,30 +702,14 @@ public class NodeDocument extends Document {
                                 return c;
                             }
                         });
-                for (Map.Entry<Object, Object> entry : map.entrySet()) {
-                    Revision high = Revision.fromString(entry.getKey().toString());
-                    Revision low = Revision.fromString(entry.getValue().toString());
+                for (Map.Entry<String, String> entry : map.entrySet()) {
+                    Revision high = Revision.fromString(entry.getKey());
+                    Revision low = Revision.fromString(entry.getValue());
                     transformed.put(high, new Range(high, low));
                 }
-                return Collections.unmodifiableSortedMap(transformed);
+                previous = Collections.unmodifiableSortedMap(transformed);
             }
         }
-        return super.transformAndSeal(map, key, level);
-    }
-
-    /**
-     * Returns previous revision ranges for this document. The revision keys are
-     * sorted descending, newest first!
-     *
-     * @return the previous ranges for this document.
-     */
-    @Nonnull
-    SortedMap<Revision, Range> getPreviousRanges() {
-        @SuppressWarnings("unchecked")
-        SortedMap<Revision, Range> previous = (SortedMap<Revision, Range>) get(PREVIOUS);
-        if (previous == null) {
-            previous = EMPTY_RANGE_MAP;
-        }
         return previous;
     }
 
