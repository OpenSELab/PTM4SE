diff --git a/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java b/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java
deleted file mode 100644
index fe20eb02..00000000
--- a/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.apache.commons.codec.binary;
-
-/**
- * <p>
- * Operations on {@link CharSequence} that are {@code null} safe.
- * </p>
- * <p>
- * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release).
- * </p>
- * 
- * @see CharSequence
- * @since 1.10
- */
-public class CharSequenceUtils {
-
-    /**
-     * Green implementation of regionMatches.
-     * 
-     * @param cs
-     *            the {@code CharSequence} to be processed
-     * @param ignoreCase
-     *            whether or not to be case insensitive
-     * @param thisStart
-     *            the index to start on the {@code cs} CharSequence
-     * @param substring
-     *            the {@code CharSequence} to be looked for
-     * @param start
-     *            the index to start on the {@code substring} CharSequence
-     * @param length
-     *            character length of the region
-     * @return whether the region matched
-     */
-    static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,
-            final CharSequence substring, final int start, final int length) {
-        if (cs instanceof String && substring instanceof String) {
-            return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);
-        }
-        int index1 = thisStart;
-        int index2 = start;
-        int tmpLen = length;
-
-        while (tmpLen-- > 0) {
-            char c1 = cs.charAt(index1++);
-            char c2 = substring.charAt(index2++);
-
-            if (c1 == c2) {
-                continue;
-            }
-
-            if (!ignoreCase) {
-                return false;
-            }
-
-            // The same check as in String.regionMatches():
-            if (Character.toUpperCase(c1) != Character.toUpperCase(c2)
-                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-}
diff --git a/src/main/java/org/apache/commons/codec/binary/StringUtils.java b/src/main/java/org/apache/commons/codec/binary/StringUtils.java
index 8f1f57fa..b3c399f5 100644
--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java
+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java
@@ -67,18 +67,6 @@ public class StringUtils {
      * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
      * @since 1.10
      */
-    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
-        if (cs1 == cs2) {
-            return true;
-        }
-        if (cs1 == null || cs2 == null) {
-            return false;
-        }
-        if (cs1 instanceof String && cs2 instanceof String) {
-            return cs1.equals(cs2);
-        }
-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
-    }
 
     /**
      * Calls {@link String#getBytes(Charset)}
diff --git a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java
index 6ccd3f27..125503ac 100644
--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java
+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java
@@ -19,7 +19,6 @@ package org.apache.commons.codec.language;
 
 import org.apache.commons.codec.EncoderException;
 import org.apache.commons.codec.StringEncoder;
-import org.apache.commons.codec.binary.StringUtils;
 
 /**
  * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence
@@ -242,7 +241,7 @@ public class DoubleMetaphone implements StringEncoder {
      *          {@code false} otherwise.
      */
     public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {
-        return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));
+        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));
     }
 
     /**
