diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
index 1a99abc5e..39514f63f 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
@@ -280,7 +280,6 @@ public class CreatorCollector
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
-            boolean verify;
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
@@ -288,27 +287,17 @@ public class CreatorCollector
                     return;
                 }
                 // both explicit: verify
-                verify = true;
-            } else {
                 // otherwise only verify if neither explicitly annotated.
-                verify = !explicit;
             }
 
             // one more thing: ok to override in sub-class
-            if (verify && (oldOne.getClass() == newOne.getClass())) {
+            if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-                Class<?> oldType = oldOne.getRawParameterType(0);
-                Class<?> newType = newOne.getRawParameterType(0);
 
-                if (oldType == newType) {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                }
                 // otherwise, which one to choose?
-                if (newType.isAssignableFrom(oldType)) {
                     // new type more generic, use old
-                    return;
-                }
                 // new type more specific, use it
             }
         }
