diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
index d5eb01709..264ed2051 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
@@ -94,13 +94,14 @@ public class JsonNodeDeserializer
         @Override
         public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
         {
-            if (p.isExpectedStartObjectToken() || p.hasToken(JsonToken.FIELD_NAME)) {
+            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+                p.nextToken();
                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
             // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
             //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.hasToken(JsonToken.END_OBJECT)) {
-                return ctxt.getNodeFactory().objectNode();
+            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+                return deserializeObject(p, ctxt, ctxt.getNodeFactory());
             }
             throw ctxt.mappingException(ObjectNode.class);
          }
