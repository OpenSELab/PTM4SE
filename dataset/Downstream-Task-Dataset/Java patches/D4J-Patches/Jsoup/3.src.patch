diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java
index fef6f1c..12c68ca 100644
--- a/src/main/java/org/jsoup/nodes/Element.java
+++ b/src/main/java/org/jsoup/nodes/Element.java
@@ -267,7 +267,7 @@ public class Element extends Node {
     public Element append(String html) {
         Validate.notNull(html);
         
-        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();
+        Element fragment = Parser.parseBodyFragment(html, baseUri).body();
         for (Node node : fragment.childNodes()) {
             node.parentNode = null;
             appendChild(node);
@@ -284,7 +284,7 @@ public class Element extends Node {
     public Element prepend(String html) {
         Validate.notNull(html);
         
-        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();
+        Element fragment = Parser.parseBodyFragment(html, baseUri).body();
         List<Node> nodes = fragment.childNodes();
         for (int i = nodes.size() - 1; i >= 0; i--) {
             Node node = nodes.get(i);
@@ -311,7 +311,7 @@ public class Element extends Node {
     public Element wrap(String html) {
         Validate.notEmpty(html);
 
-        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();
+        Element wrapBody = Parser.parseBodyFragment(html, baseUri).body();
         Elements wrapChildren = wrapBody.children();
         Element wrap = wrapChildren.first();
         if (wrap == null) // nothing to wrap with; noop
diff --git a/src/main/java/org/jsoup/parser/Parser.java b/src/main/java/org/jsoup/parser/Parser.java
index 62b0fd3..0cedf8a 100644
--- a/src/main/java/org/jsoup/parser/Parser.java
+++ b/src/main/java/org/jsoup/parser/Parser.java
@@ -23,7 +23,6 @@ public class Parser {
     private final TokenQueue tq;
     private final Document doc;
     private String baseUri;
-    private boolean relaxed = false;
 
     private Parser(String html, String baseUri, boolean isBodyFragment) {
         Validate.notNull(html);
@@ -71,11 +70,6 @@ public class Parser {
      @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
      @return Document, with empty head, and HTML parsed into body
      */
-    public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
-        Parser parser = new Parser(bodyHtml, baseUri, true);
-        parser.relaxed = true;
-        return parser.parse();
-    }
 
     private Document parse() {
         while (!tq.isEmpty()) {
@@ -227,7 +221,7 @@ public class Parser {
         Tag childTag = child.tag();
         boolean validAncestor = stackHasValidParent(childTag);
 
-        if (!validAncestor && !relaxed) {
+        if (!validAncestor) {
             // create implicit parent around this child
             Tag parentTag = childTag.getImplicitParent();
             Element implicit = new Element(parentTag, baseUri);
@@ -256,14 +250,12 @@ public class Parser {
         if (stack.size() == 1 && childTag.equals(htmlTag))
             return true; // root is valid for html node
 
-        if (childTag.requiresSpecificParent())
-            return stack.getLast().tag().isValidParent(childTag);
 
         // otherwise, look up the stack for valid ancestors
         for (int i = stack.size() -1; i >= 0; i--) {
             Element el = stack.get(i);
             Tag parent2 = el.tag();
-            if (parent2.isValidAncestor(childTag)) {
+            if (parent2.isValidParent(childTag)) {
                 return true;
             }
         }
diff --git a/src/main/java/org/jsoup/parser/Tag.java b/src/main/java/org/jsoup/parser/Tag.java
index 24333e7..0fb33bd 100644
--- a/src/main/java/org/jsoup/parser/Tag.java
+++ b/src/main/java/org/jsoup/parser/Tag.java
@@ -25,7 +25,6 @@ public class Tag {
     private boolean empty = false; // can hold nothing; e.g. img
     private boolean preserveWhitespace = false; // for pre, textarea, script etc
     private List<Tag> ancestors; // elements must be a descendant of one of these ancestors
-    private Tag parent; // if not null, elements must be a direct child of parent
 
     private Tag(String tagName) {
         this.tagName = tagName.toLowerCase();
@@ -97,8 +96,6 @@ public class Tag {
             return false;
 
         // don't allow children to contain their parent (directly)
-        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child))
-            return false;
         
         return true;
     }
@@ -155,15 +152,9 @@ public class Tag {
         return (!ancestors.isEmpty()) ? ancestors.get(0) : null;
     }
 
-    boolean requiresSpecificParent() {
-        return this.parent != null;
-    }
 
     boolean isValidParent(Tag child) {
-        return this.equals(child.parent);
-    }
 
-    boolean isValidAncestor(Tag child) {
         if (child.ancestors.isEmpty())
             return true; // HTML tag
 
@@ -230,8 +221,8 @@ public class Tag {
         createBlock("TITLE").setAncestor("HEAD", "BODY").setContainDataOnly();
         createInline("BASE").setAncestor("HEAD", "BODY").setEmpty();
 
-        createBlock("FRAME").setParent("FRAMESET").setEmpty();
-        createBlock("NOFRAMES").setParent("FRAMESET").setContainDataOnly();
+        createBlock("FRAME").setAncestor("FRAMESET").setEmpty();
+        createBlock("NOFRAMES").setAncestor("FRAMESET").setContainDataOnly();
 
 
 
@@ -294,34 +285,34 @@ public class Tag {
         createInline("TEXTAREA").setAncestor("FORM").setContainDataOnly();
         createInline("LABEL").setAncestor("FORM").setOptionalClosing(); // not self
         createInline("BUTTON").setAncestor("FORM"); // bunch of excludes not defined
-        createInline("OPTGROUP").setParent("SELECT"); //  only contain option
-        createInline("OPTION").setParent("SELECT").setContainDataOnly();
+        createInline("OPTGROUP").setAncestor("SELECT");
+        createInline("OPTION").setAncestor("SELECT").setContainDataOnly();
         createBlock("FIELDSET").setAncestor("FORM");
         createInline("LEGEND").setAncestor("FIELDSET");
 
         // other
         createInline("AREA").setEmpty(); // not an inline per-se
-        createInline("PARAM").setParent("OBJECT").setEmpty();
+        createInline("PARAM").setAncestor("OBJECT").setEmpty();
         createBlock("INS"); // only within body
         createBlock("DEL"); // only within body
 
         createBlock("DL");
-        createInline("DT").setParent("DL").setOptionalClosing(); // only within DL.
-        createInline("DD").setParent("DL").setOptionalClosing(); // only within DL.
+        createInline("DT").setAncestor("DL").setOptionalClosing();
+        createInline("DD").setAncestor("DL").setOptionalClosing();
 
         createBlock("LI").setAncestor("UL", "OL").setOptionalClosing(); // only within OL or UL.
 
         // tables
         createBlock("TABLE"); // specific list of only includes (tr, td, thead etc) not implemented
-        createBlock("CAPTION").setParent("TABLE");
-        createBlock("THEAD").setParent("TABLE").setOptionalClosing(); // just TR
-        createBlock("TFOOT").setParent("TABLE").setOptionalClosing(); // just TR
-        createBlock("TBODY").setParent("TABLE").setOptionalClosing(); // optional / implicit open too. just TR
-        createBlock("COLGROUP").setParent("TABLE").setOptionalClosing(); // just COL
-        createBlock("COL").setParent("COLGROUP").setEmpty();
-        createBlock("TR").setParent("TABLE").setOptionalClosing(); // just TH, TD
-        createBlock("TH").setParent("TR").setOptionalClosing();
-        createBlock("TD").setParent("TR").setOptionalClosing();
+        createBlock("CAPTION").setAncestor("TABLE");
+        createBlock("THEAD").setAncestor("TABLE").setOptionalClosing();
+        createBlock("TFOOT").setAncestor("TABLE").setOptionalClosing();
+        createBlock("TBODY").setAncestor("TABLE").setOptionalClosing();
+        createBlock("COLGROUP").setAncestor("TABLE").setOptionalClosing();
+        createBlock("COL").setAncestor("COLGROUP").setEmpty();
+        createBlock("TR").setAncestor("TABLE").setOptionalClosing();
+        createBlock("TH").setAncestor("TR").setOptionalClosing();
+        createBlock("TD").setAncestor("TR").setOptionalClosing();
     }
 
     private static Tag createBlock(String tagName) {
@@ -385,9 +376,4 @@ public class Tag {
         return this;
     }
 
-    private Tag setParent(String tagName) {
-        parent = Tag.valueOf(tagName);
-        setAncestor(tagName);
-        return this;
-    }
 }
