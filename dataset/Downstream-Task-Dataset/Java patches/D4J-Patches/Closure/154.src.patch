diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 41b94e0c..a752e76a 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -182,6 +182,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           "original: {2}\n" +
           "override: {3}");
 
+  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =
+      DiagnosticType.warning(
+          "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",
+          "mismatch of the {0} property type and the type " +
+          "of the property it overrides from interface {1}\n" +
+          "original: {2}\n" +
+          "override: {3}");
   static final DiagnosticType UNKNOWN_OVERRIDE =
       DiagnosticType.warning(
           "JSC_UNKNOWN_OVERRIDE",
@@ -232,6 +239,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       HIDDEN_SUPERCLASS_PROPERTY,
       HIDDEN_INTERFACE_PROPERTY,
       HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
+      HIDDEN_INTERFACE_PROPERTY_MISMATCH,
       UNKNOWN_OVERRIDE,
       INTERFACE_METHOD_OVERRIDE,
       UNKNOWN_EXPR_TYPE,
@@ -1038,6 +1046,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
               HIDDEN_INTERFACE_PROPERTY, propertyName,
               interfaceType.getTopMostDefiningType(propertyName).toString()));
         }
+        if (interfaceHasProperty) {
+          JSType interfacePropType =
+              interfaceType.getPrototype().getPropertyType(propertyName);
+          if (!propertyType.canAssignTo(interfacePropType)) {
+            compiler.report(t.makeError(n,
+                HIDDEN_INTERFACE_PROPERTY_MISMATCH, propertyName,
+                interfaceType.getTopMostDefiningType(propertyName).toString(),
+                interfacePropType.toString(), propertyType.toString()));
+          }
+        }
       }
     }
 
diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index 24bf792f..1d585226 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -107,13 +107,6 @@ class TypeValidator {
           "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED",
           "property {0} on interface {1} is not implemented by type {2}");
 
-  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =
-      DiagnosticType.warning(
-        "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH",
-        "mismatch of the {0} property type and the type " +
-        "of the property it overrides from interface {1}\n" +
-        "original: {2}\n" +
-        "override: {3}");
 
   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
       INVALID_CAST,
@@ -121,8 +114,7 @@ class TypeValidator {
       MISSING_EXTENDS_TAG_WARNING,
       DUP_VAR_DECLARATION,
       HIDDEN_PROPERTY_MISMATCH,
-      INTERFACE_METHOD_NOT_IMPLEMENTED,
-      HIDDEN_INTERFACE_PROPERTY_MISMATCH);
+      INTERFACE_METHOD_NOT_IMPLEMENTED);
 
   TypeValidator(AbstractCompiler compiler) {
     this.compiler = compiler;
@@ -593,24 +585,7 @@ class TypeValidator {
             prop, implementedInterface.toString(), instance.toString()));
       }
       registerMismatch(instance, implementedInterface);
-    } else {
-      JSType found = instance.getPropertyType(prop);
-      JSType required
-        = implementedInterface.getImplicitPrototype().getPropertyType(prop);
-      found = found.restrictByNotNullOrUndefined();
-      required = required.restrictByNotNullOrUndefined();
-      if (!found.canAssignTo(required)) {
         // Implemented, but not correctly typed
-        if (shouldReport) {
-          FunctionType constructor
-            = implementedInterface.toObjectType().getConstructor();
-          compiler.report(t.makeError(n,
-              HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,
-              constructor.getTopMostDefiningType(prop).toString(),
-              required.toString(), found.toString()));
-        }
-        registerMismatch(found, required);
-      }
     }
   }
 
