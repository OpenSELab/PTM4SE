diff --git a/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java
index 7bfbae52..720b60b7 100644
--- a/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java
@@ -205,6 +205,7 @@ class ClosureReverseAbstractInterpreter
       Node param = condition.getLastChild();
       if (callee.getType() == GETPROP && param.isQualifiedName()) {
         JSType paramType =  getTypeIfRefinable(param, blindScope);
+        if (paramType != null) {
         Node left = callee.getFirstChild();
         Node right = callee.getLastChild();
         if (left.getType() == NAME && "goog".equals(left.getString()) &&
@@ -214,6 +215,7 @@ class ClosureReverseAbstractInterpreter
           if (restricter != null) {
             return restrictParameter(param, paramType, blindScope, restricter,
                 outcome);
+            }
           }
         }
       }
diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 749eb6d3..1b3755d2 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -629,29 +629,21 @@ class TypeInference
       return scope;
     } else {
       StaticSlot<JSType> var = scope.getSlot(varName);
-      if (var != null) {
+      if (var != null &&
+          !(var.isTypeInferred() && unflowableVarNames.contains(varName))) {
         // There are two situations where we don't want to use type information
         // from the scope, even if we have it.
 
         // 1) The var is escaped in a weird way, e.g.,
         // function f() { var x = 3; function g() { x = null } (x); }
-        boolean isInferred = var.isTypeInferred();
-        boolean unflowable =
-            isInferred && unflowableVarNames.contains(varName);
 
         // 2) We're reading type information from another scope for an
         // inferred variable.
         // var t = null; function f() { (t); }
-        boolean nonLocalInferredSlot =
-            isInferred &&
-            syntacticScope.getParent() != null &&
-            var == syntacticScope.getParent().getSlot(varName);
 
-        if (!unflowable && !nonLocalInferredSlot) {
           type = var.getType();
           if (type == null) {
             type = getNativeType(UNKNOWN_TYPE);
-          }
         }
       }
     }
