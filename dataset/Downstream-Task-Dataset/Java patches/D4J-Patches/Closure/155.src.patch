diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 7d99778c8..18c9fbe2c 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -196,8 +196,6 @@ class InlineVariables implements CompilerPass {
     private void doInlinesForScope(NodeTraversal t,
         Map<Var, ReferenceCollection> referenceMap) {
 
-      boolean maybeModifiedArguments =
-          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
       for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
         Var v = it.next();
 
@@ -219,44 +217,17 @@ class InlineVariables implements CompilerPass {
           // inlining heuristics. See InlineConstantsTest.
           continue;
         } else {
-          inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
+          inlineNonConstants(v, referenceInfo);
         }
       }
     }
 
-    private boolean maybeEscapedOrModifiedArguments(
-        Scope scope, Map<Var, ReferenceCollection> referenceMap) {
-      if (scope.isLocal()) {
-        Var arguments = scope.getArgumentsVar();
-        ReferenceCollection refs = referenceMap.get(arguments);
-        if (refs != null && !refs.references.isEmpty()) {
-          for (Reference ref : refs.references) {
-            Node refNode = ref.getNameNode();
-            Node refParent = ref.getParent();
             // Any reference that is not a read of the arguments property
             // consider a escape of the arguments object.
-            if (!(NodeUtil.isGet(refParent)
-                && refNode == ref.getParent().getFirstChild()
-                && !isLValue(refParent))) {
-              return true;
-            }
-          }
-        }
-      }
-      return false;
-    }
 
-    private boolean isLValue(Node n) {
-      Node parent = n.getParent();
-      return (parent.getType() == Token.INC
-          || parent.getType() == Token.DEC
-          || (NodeUtil.isAssignmentOp(parent)
-          && parent.getFirstChild() == n));
-    }
 
     private void inlineNonConstants(
-        Var v, ReferenceCollection referenceInfo,
-        boolean maybeModifiedArguments) {
+        Var v, ReferenceCollection referenceInfo) {
       int refCount = referenceInfo.references.size();
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
@@ -301,7 +272,7 @@ class InlineVariables implements CompilerPass {
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
-      if (!maybeModifiedArguments &&
+      if (
           !staleVars.contains(v) && referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
         List<Reference> refs = referenceInfo.references;
diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
index 4c00d60e6..e3edbb4d6 100644
--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -120,12 +120,7 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {
    */
   public void visit(NodeTraversal t, Node n, Node parent) {
     if (n.getType() == Token.NAME) {
-      Var v;
-      if (n.getString().equals("arguments")) {
-        v = t.getScope().getArgumentsVar();
-      } else {
-        v = t.getScope().getVar(n.getString());
-      }
+      Var v = t.getScope().getVar(n.getString());
       if (v != null && varFilter.apply(v)) {
         addReference(t, v,
             new Reference(n, parent, t, blockStack.peek()));
diff --git a/src/com/google/javascript/jscomp/Scope.java b/src/com/google/javascript/jscomp/Scope.java
index 19ac9d2bc..806ca2742 100644
--- a/src/com/google/javascript/jscomp/Scope.java
+++ b/src/com/google/javascript/jscomp/Scope.java
@@ -60,7 +60,6 @@ public class Scope implements StaticScope<JSType> {
   /** Whether this is a bottom scope for the purposes of type inference. */
   private final boolean isBottom;
 
-  private Var arguments;
 
   /** Stores info about a variable */
   public static class Var implements StaticSlot<JSType> {
@@ -288,35 +287,10 @@ public class Scope implements StaticScope<JSType> {
    * scope.
    */
   // TODO(johnlenz): Include this the list of Vars for the scope.
-  public static class Arguments extends Var {
-    Arguments(Scope scope) {
-      super(
-        false, // no inferred
-        "arguments", // always arguments
-        null,  // no declaration node
         // TODO(johnlenz): provide the type of "Arguments".
-        null,  // no type info
-        scope,
-        -1,    // no variable index
-        null,  // input,
-        false, // not a define
-        null   // no jsdoc
-        );
-    }
 
-    @Override public boolean equals(Object other) {
-      if (!(other instanceof Arguments)) {
-        return false;
-      }
 
-      Arguments otherVar = (Arguments) other;
-      return otherVar.scope.getRootNode() == scope.getRootNode();
-    }
 
-    @Override public int hashCode() {
-      return System.identityHashCode(this);
-    }
-  }
 
   /**
    * Creates a Scope given the parent Scope and the root node of the scope.
@@ -482,12 +456,6 @@ public class Scope implements StaticScope<JSType> {
   /**
    * Get a unique VAR object to represents "arguments" within this scope
    */
-  public Var getArgumentsVar() {
-    if (arguments == null) {
-      arguments = new Arguments(this);
-    }
-    return arguments;
-  }
 
   /**
    * Returns true if a variable is declared.
