,commit_id,commit_time,diff,files,summary
0,fe55f92cdc575d00204a134b2d556c1053e1ed4e,2020-08-23 21:52:28-04:00,key : pre-commit| $ { { matrix.python } } | $ { { hashFiles ( '.pre-commit-config.yaml ' ) } } key : pre-commit| $ { { env.PY } } | $ { { hashFiles ( '.pre-commit-config.yaml ' ) } } name : set full Python version in PY env var run : echo `` : :set-env name=PY : : $ ( python -VV | sha256sum | cut -d ' ' -f1 ) '' # See https : //pre-commit.com/ # github-actions-example,['.github/workflows/tests.yaml'],Fix pre-commit cache key in GitHub Actions . ( # 3740 )
1,632f85b65354ad573bb33c54a0a9dd3ffcef371f,2020-08-01 07:48:57-07:00,"that do not necessarily have to be a subclass of the def decorator ( f ) : rule , is only executed before each request that is handled by a function of try : return self.warn_on_modifications and self._got_registered_once # : : attr : ` before_request_funcs ` functions . The key of the dictionary is `` instead . '' self.teardown_request_funcs = { } try : value is ignored . regardless of whether there was an exception or not . These functions such constructs in tests . : type key : None|str def _register_error_handler ( self , key , code_or_exception , f ) : return 'Hello World ' : func : ` url_for ` function is prefixed with the name of the blueprint . endpoint = options.pop ( `` endpoint '' , None ) self.template_context_processors , app.template_context_processors # : A dictionary with lists of functions that will be called at the self.static_folder = static_folder if self.debug and self._got_first_request : stack of active contexts . This becomes relevant if you are using def merge_dict_lists ( self_dict , app_dict ) : functions in the application . These functions will be called before the # : requests . Each returns a dictionary that the template context is `` To fix this make sure to import all your view modules , `` ctx = app.test_request_context ( ) self.url_default_functions = { } # : : attr : ` before_request_funcs ` functions . The key of the dictionary is def example ( ) : # : A dictionary with list of functions that are called without argument _sentinel = object ( ) # : this function is active for , `` None `` for all requests . This can for attributes just like `` Flask `` , rather than opaque lambda functions . .. versionadded : : 0.7 `` code . Use a subclass of HTTPException with that code '' : param rule : the URL rule as string else : # : A dictionary with lists of functions that are called after # : where the key is the status code of the http exception . The template_folder=None , self.url_value_preprocessors.setdefault ( None , [ ] ) .append ( f ) @ app.route ( '/ ' ) For more information refer to : ref : ` url-route-registrations ` . self.after_request_funcs.setdefault ( None , [ ] ) .append ( f ) `` `` '' Like : meth : ` Flask.route ` but for a blueprint . The endpoint for the _sentinel = object ( ) # : the blueprint this function is active for , or `` None `` for all return f ctx.pop ( ) stack of active contexts . This becomes relevant if you are using self.url_value_preprocessors.setdefault ( None , [ ] ) .append ( f ) `` Tried to register a handler for an exception instance '' Otherwise works as the : meth : ` ~flask.Flask.errorhandler ` decorator # : here , use the : meth : ` after_request ` decorator . def example ( ) : self.view_functions = { } # : name of the blueprint this function is active for , `` None `` for all lambda s : s.app.before_request_funcs.setdefault ( self.name , [ ] ) .append ( f ) handlers [ exc_class ] = f # : the name of the blueprint . Each key points to another dictionary # : view function . For each function registered this one should also The `` Scaffold `` class provides a common API for the `` Flask `` and # : each request . The key of the dictionary is the name of the blueprint self.template_context_processors [ None ] .append ( f ) : issue : ` 3215 ` self.before_request_funcs.setdefault ( None , [ ] ) .append ( f ) class Scaffold ( _PackageBoundObject ) : # : is the class for the instance check and the second the error handler f '' ' { code_or_exception } ' is not a recognized HTTP error '' One can now additionally also register custom exception types # : the request , and their return values are ignored . If an exception statements and log occurring errors . endpoint # : To register a view function , use the : meth : ` route ` decorator . # : preprocessors . The key `` None `` here is used for application wide # : To register an error handler , use the : meth : ` errorhandler ` by the `` PRESERVE_CONTEXT_ON_EXCEPTION `` configuration variable . `` `` '' Register a function to be run after each request . `` `` '' Merges self_dict into app_dict . Replaces None keys with self.name . # : each request , even if an exception has occurred . The key of the # : decorator . : meth : ` before_request ` functions . self._register_error_handler ( None , code_or_exception , f ) # : beginning of each request . The key of the dictionary is the name of @ setupmethod class Flask ( Scaffold ) : ctx.push ( ) # : A dictionary of all view functions registered . The keys will For example , this can be used to open a database connection , or to load : param code_or_exception : the code as integer for the handler , or except KeyError : from .templating import _default_template_ctx_processor `` and decorators or other functionality was called too late.\n '' `` A setup function was called after the `` return `` example '' `` and decorators or other functionality was called too late.\n '' `` registered for exception classes or HTTP error codes . '' # : the request , and their return values are ignored . If an exception # : `` None `` for all requests . These functions are not allowed to modify be passed an error object . `` `` '' Register a URL value preprocessor function for all view `` `` '' A decorator to register a function as an endpoint . self.before_request_funcs = { } actual request was performed . def setupmethod ( f ) : is a list of methods this rule should be limited from .helpers import _endpoint_from_view_func The return values of teardown functions are ignored . can modify the url values provided . ctx.push ( ) from .helpers import _PackageBoundObject ) , `` Custom exceptions must be subclasses of Exception . '' Generally teardown functions must take every necessary step to avoid ) , `` Custom exceptions must be subclasses of Exception . '' # : view function . For each function registered this one should also raise KeyError ( exc_class = default_exceptions [ exc_class_or_code ] it 's an application independent endpoint . # : To register a view function , use the : meth : ` route ` decorator . `` `` '' Non-decorator version of the : meth : ` errorhandler ` error attach `` `` '' A decorator that is used to register a view function for a self.add_url_rule ( rule , endpoint , f , * * options ) function . This always is the function name . exc_class = exc_class_or_code # : The name of the package or module that this app belongs to . Do not def after_request ( self , f ) : is only executed after each request that is handled by a function of usage . : param rule : the URL rule as string `` `` '' Like : meth : ` Flask.before_request ` but for a blueprint . This function json_decoder = None return `` example '' @ app.errorhandler ( DatabaseError ) def wrapper_func ( self , * args , * * kwargs ) : # : A dictionary with lists of functions that are called before the # : name of the blueprint this function is active for , `` None `` for all that do not necessarily have to be a subclass of the return f ( self , * args , * * kwargs ) : param endpoint : the endpoint for the registered URL rule . Flask def after_request ( self , f ) : # : .. versionadded : : 0.7 regardless of whether there was an exception or not . These functions if issubclass ( exc_class , HTTPException ) : import_name , # : automatically again that were removed that way . self._register_error_handler ( None , code_or_exception , f ) if self._is_setup_finished ( ) : def add_url_rule ( self.teardown_request_funcs.setdefault ( None , [ ] ) .append ( f ) decorator that is more straightforward to use for non decorator key = self.name if key is None else f '' { self.name } . { key } '' except KeyError : def setupmethod ( f ) : # : A dictionary of all registered error handlers . The key is `` None `` def route ( self , rule , * * options ) : is a list of methods this rule should be limited # : Set to `` None `` to use the app 's : class : ` ~flask.app.Flask.json_encoder ` . # : decorator . static_folder=static_folder , def register_error_handler ( self , code_or_exception , f ) : return self.debug and self._got_first_request ) common language code value and place it in `` g `` rather than pass it to app.view_functions.update ( self.view_functions ) the logged in user from the session . : param endpoint : the name of the endpoint def errorhandler ( self , code_or_exception ) : up from the application . # : A dictionary with lists of functions that should be called after self.template_context_processors = { None : [ _default_template_ctx_processor ] } `` `` '' Registers a template context processor function . '' '' '' self.record_once ( register_endpoint ) # : A dictionary with lists of functions that are called before the from .templating import _default_template_ctx_processor # : A dictionary with lists of functions that should be called after return view_func.__name__ root_path = None if issubclass ( exc_class , HTTPException ) : special case is the 500 internal server error which is always looked When a teardown function was called because of an exception it will functions are called just before the request context moves from the # : requests . To register a function , use the : meth : ` before_request ` exc_class , Exception # : be function names which are also used to generate URLs and def _is_setup_finished ( self ) : self.url_default_functions.setdefault ( None , [ ] ) .append ( f ) # : this function is active for , `` None `` for all requests . This can for self._register_error_handler ( None , code_or_exception , f ) # a singleton sentinel value for parameter defaults # : : meth : ` context_processor ` decorator . : param endpoint : the endpoint for the registered URL rule . Flask else : a blueprint unless it is caused inside a view function . Another # : callbacks , otherwise the key is the name of the blueprint . function , akin to the : meth : ` ~flask.Flask.register_error_handler ` The function is passed the endpoint name and values dict . The return # : of URL values before they are used as the keyword arguments of the raise AssertionError ( `` first request was handled . This usually indicates a bug `` Example : : When a teardown function was called because of an exception it will def page_not_found ( error ) : You can also register handlers for arbitrary exceptions : : provide_automatic_options=None , In debug mode Flask will not tear down a request on an exception .. versionadded : : 0.7 # : preprocessors . The key `` None `` here is used for application wide request in case an unhandled exception occurred . `` Tried to register a handler for an exception instance '' # : the name of the blueprint this function is active for , or `` None `` return 'This page does not exist ' , 404 functions in the application . These functions will be called before the view_func=None , are executed when the request context is popped , even if not an function of that blueprint . Teardown request functions are executed def url_defaults ( self , f ) : return exc_class , exc_class.code self.static_folder = static_folder # : requests . To register a function , use the : meth : ` before_request ` `` `` '' Internal helper that returns the default endpoint for a given def index ( ) : exc_class = default_exceptions [ exc_class_or_code ] self.url_value_preprocessors = { } `` database models and everything related at a central place `` if isinstance ( exc_class_or_code , int ) : # : A dictionary with lists of functions that can be used as URL value @ staticmethod # : Set to `` None `` to use the app 's : class : ` ~flask.app.Flask.json_decoder ` . `` instead . '' return exc_class , exc_class.code `` To fix this make sure to import all your view modules , `` # : updated with . To register a function here , use the # : of URL values before they are used as the keyword arguments of the def endpoint ( self , endpoint ) : `` `` '' Registers a template context processor function . '' '' '' # : occurred while processing the request , it gets passed to each f '' ' { code_or_exception } ' is not a recognized HTTP error '' ) # : the blueprint this function is active for , or `` None `` for all # : : meth : ` url_value_preprocessor ` . `` `` '' Registers a function to run before each request . just listens for `` GET `` ( and implicitly `` HEAD `` ) . Use : meth : ` register_error_handler ` instead of modifying : type f : callable def teardown_request ( self , f ) : `` database models and everything related at a central place `` # : special key `` None `` points to a list of tuples where the first item # : special key `` None `` points to a list of tuples where the first item # : each request , even if an exception has occurred . The key of the # : where the key is the status code of the http exception . The common language code value and place it in `` g `` rather than pass it to def errorhandler ( self , code_or_exception ) : self.after_request_funcs = { } `` `` '' A common base for class Flask and class Blueprint . immediately . Instead it will keep it alive so that the interactive exc_class = exc_class_or_code super ( ) .__init__ ( import_name = None status code . # : : meth : ` url_value_preprocessor ` . def route ( self , rule , * * options ) : endpoint = options.pop ( `` endpoint '' , f.__name__ ) exc_class , code = self._get_exc_class_and_code ( code_or_exception ) def decorator ( f ) : if isinstance ( code_or_exception , HTTPException ) : # old broken behavior # : here , use the : meth : ` after_request ` decorator . self , import_name , template_folder=template_folder , root_path=root_path from werkzeug.exceptions import HTTPException `` `` '' Registers an error handler that becomes active for this blueprint return update_wrapper ( wrapper_func , f ) # : the values are the function objects themselves . # : is the class for the instance check and the second the error handler `` before the application starts serving requests . '' A decorator that is used to register a function given an # : Each of these functions has the chance to modify the dictionary # : for error handlers active on the application , otherwise the key is def _endpoint_from_view_func ( view_func ) : def endpoint ( self , endpoint ) : self.teardown_request_funcs = { } return decorator when the request context is popped , even when no actual request was immediately . Instead it will keep it alive so that the interactive error code . Example : : def special_exception_handler ( error ) : `` `` '' Register a function to be run at the end of each request , The function is passed the endpoint name and values dict . The return with the endpoint and values and should update the values passed Example : : : attr : ` error_handler_spec ` directly , for application wide error The function can modify the values captured from the matched url before # : A dictionary with lists of functions that will be called at the root_path=root_path , will have to surround the execution of these code by try/except # : updated with . To register a function here , use the `` `` '' Callback function for URL defaults for this blueprint . It 's called # : : meth : ` teardown_request ` decorator . When `` ctx.pop ( ) `` is executed in the above example , the teardown itself assumes the name of the view function as # : function . `` `` '' Get the exception class being handled . For HTTP status codes `` `` '' Register a function to be run at the end of each request , `` `` '' Like : meth : ` Flask.endpoint ` but for a blueprint . This does not self.after_request_funcs = { } self.record_once ( self.before_request_funcs.setdefault ( None , [ ] ) .append ( f ) handlers . : type f : callable def page_not_found ( error ) : # : provide a : meth : ` url_defaults ` function that adds the parameters Values of dict must be lists . def register_endpoint ( state ) : # : `` None `` for all requests . These functions are not allowed to modify the view , and further request handling is stopped . .. admonition : : Debug Note # : function . raise ValueError ( self.record_once ( `` `` '' Alternative error attach function to the : meth : ` errorhandler ` function is only executed for requests handled by a blueprint . # : that blueprint . self.template_context_processors [ None ] .append ( f ) decorator that is more straightforward to use for non decorator app_dict [ key ] = value return f `` `` '' `` A setup function was called after the `` function . This always is the function name . from functools import update_wrapper def merge_dict_nested ( self_dict , app_dict ) : You can also register handlers for arbitrary exceptions : : just listens for `` GET `` ( and implicitly `` HEAD `` ) . f '' { code_or_exception ! r } . Handlers can only be '' an arbitrary exception def context_processor ( self , f ) : return 'Hello World ' self.after_request_funcs.setdefault ( None , [ ] ) .append ( f ) def __init__ ( def register_error_handler ( self , code_or_exception , f ) : # : Skeleton local JSON decoder class to use . first request was already handled . merge_dict_lists ( self.url_value_preprocessors , app.url_value_preprocessors ) usage . class Blueprint ( _PackageBoundObject ) : # : for all requests . To register a function , use def teardown_request ( self , f ) : code as an integer . return f ( self , * args , * * kwargs ) that they will fail . If they do execute code that might fail they # : Location of the template files to be added to the template lookup . When `` ctx.pop ( ) `` is executed in the above example , the teardown # : for all requests . To register a function , use raise AssertionError ( def special_exception_handler ( error ) : assert issubclass ( A decorator that is used to register a function given an be passed an error object . every view . every view . def before_request ( self , f ) : # : callbacks , otherwise the key is the name of the blueprint . : meth : ` before_request ` functions . assert view_func is not None , `` expected view func if endpoint is not provided . '' an arbitrary exception f '' { code_or_exception ! r } . Handlers can only be '' debugger can still access it . This behavior can be controlled `` `` '' Register a URL value preprocessor function for all view self.name , [ ] `` `` '' Like : meth : ` Flask.after_request ` but for a blueprint . This function .. versionadded : : 0.11 if isinstance ( exc_class_or_code , int ) : # : example be used to close database connections . To register a function for key , value in self_dict.items ( ) : def _register_error_handler ( self , key , code_or_exception , f ) : # : each request . The key of the dictionary is the name of the blueprint performed . added and handled by the standard request handling . # : requests . Each returns a dictionary that the template context is exc_class , Exception : param exc_class_or_code : Any exception class , or an HTTP status As of Flask 0.7 this function might not be executed at the end of the `` `` '' Register a function to be run after each request . `` `` '' Wraps a method so that it performs a check in debug mode if the static_url_path=static_url_path , self.teardown_request_funcs.setdefault ( None , [ ] ) .append ( f ) application . It 's called with the endpoint and values and should `` code . Use a subclass of HTTPException with that code '' self , import_name , template_folder , root_path=root_path In debug mode Flask will not tear down a request on an exception : param code_or_exception : the code as integer for the handler , or # : teardown_request function . To register a function here , use the : param exc_class_or_code : Any exception class , or an HTTP status explicitly by the user of this method . If the endpoint is prefixed The return values of teardown functions are ignored . def url_value_preprocessor ( self , f ) : or `` HTTPException `` subclasses , return both the exception and # : example be used to close database connections . To register a function but is intended for decorator usage : : for key , values in self_dict.items ( ) : only . Please be aware that routing does not happen local to a from .scaffold import _sentinel merge_dict_lists ( self.teardown_request_funcs , app.teardown_request_funcs ) but is intended for decorator usage : : status code . # : occurred while processing the request , it gets passed to each # : resources contained in the package . : param options : the options to be forwarded to the underlying def url_value_preprocessor ( self , f ) : def _get_exc_class_and_code ( exc_class_or_code ) : same ( see : meth : ` process_response ` ) . `` `` '' def url_defaults ( self , f ) : raise NotImplementedError they are passed to the view . For example , this can be used to pop a # : automatically again that were removed that way . `` `` '' handlers = self.error_handler_spec.setdefault ( key , { } ) .setdefault ( code , { } ) # : .. versionadded : : 0.7 return f `` Blueprint `` classes . `` Blueprint `` information is stored in @ app.endpoint ( 'example.endpoint ' ) assert view_func is not None , `` expected view func if endpoint is not provided . '' `` `` '' `` `` '' Alternative error attach function to the : meth : ` errorhandler ` functions are called just before the request context moves from the The function can modify the values captured from the matched url before self.error_handler_spec = { } `` registered for exception classes or HTTP error codes . '' are executed when the request context is popped , even if not an blueprint . It 's called before the view functions are called and self.url_default_functions = { } # a singleton sentinel value for parameter defaults This is intended to improve consistency and maintainability . # : Each of these functions has the chance to modify the dictionary : param options : the options to be forwarded to the underlying `` `` '' Register a function to handle errors by code or exception class . `` `` '' Registers a function to run before each request . to Werkzeug is handling of method options . methods debugger can still access it . This behavior can be controlled the view , and further request handling is stopped . will have to surround the execution of these code by try/except : type code_or_exception : int|T < =Exception self.before_request_funcs = { } # : To register an error handler , use the : meth : ` errorhandler ` itself assumes the name of the view function as json_encoder = None lambda s : s.app._register_error_handler ( self.name , code_or_exception , f ) `` in the application where a module was not imported `` : type code_or_exception : int|T < =Exception # : be function names which are also used to generate URLs and lambda s : s.app.template_context_processors.setdefault ( `` `` '' Register a function to handle errors by code or exception class . first request was already handled . # : A dictionary with lists of functions that are called after self.view_functions = { } from .scaffold import Scaffold update the values passed in place . Generally teardown functions must take every necessary step to avoid return view_func.__name__ ) # : A dictionary with list of functions that are called without argument `` in the application where a module was not imported `` by the `` PRESERVE_CONTEXT_ON_EXCEPTION `` configuration variable . self.view_functions [ endpoint ] = f the logged in user from the session . def _endpoint_from_view_func ( view_func ) : self.url_value_preprocessors = { } _PackageBoundObject.__init__ ( they are passed to the view . For example , this can be used to pop a handlers . merge_dict_lists ( error code . Example : : merge_dict_lists ( self.url_default_functions , app.url_default_functions ) merge_dict_nested ( self.error_handler_spec , app.error_handler_spec ) to Werkzeug is handling of method options . methods raise ValueError ( self.static_url_path = static_url_path self.static_url_path = static_url_path .. admonition : : Debug Note ) # : the values are the function objects themselves . static_folder= '' static '' , return 'Database connection failed ' , 500 `` `` '' A decorator that is used to register a view function for a from functools import update_wrapper `` `` '' Callback function for URL defaults for all view functions of the assert issubclass ( return 'Database connection failed ' , 500 update the values passed in place . self.url_default_functions.setdefault ( None , [ ] ) .append ( f ) # : A dictionary of all registered error handlers . The key is `` None `` `` `` '' A decorator to register a function as an endpoint . app_dict.setdefault ( key , [ ] ) .extend ( values ) # : to populate the template context . The key of the dictionary is the # : : meth : ` context_processor ` decorator . value is ignored . blueprint so an error handler for 404 usually is not handled by : class : ` ~werkzeug.routing.Rule ` object . A change def _get_exc_class_and_code ( exc_class_or_code ) : merge_dict_lists ( self.after_request_funcs , app.after_request_funcs ) template_folder = None # : beginning of each request . The key of the dictionary is the name of endpoint=None , @ app.errorhandler ( 404 ) self._register_error_handler ( None , code_or_exception , f ) One can now additionally also register custom exception types : class : ` ~werkzeug.exceptions.HTTPException ` class . class Blueprint ( Scaffold ) : endpoint handlers [ exc_class ] = f # : provide a : meth : ` url_defaults ` function that adds the parameters that they will fail . If they do execute code that might fail they lambda s : s.app.url_value_preprocessors.setdefault ( self.name , [ ] ) .append ( f ) return decorator self.error_handler_spec = { } ctx = app.test_request_context ( ) The function will be called without any arguments . If it returns a : attr : ` response_class ` and return a new response object or the template_folder=template_folder , : class : ` ~werkzeug.exceptions.HTTPException ` class . to ( `` GET `` , `` POST `` etc. ) . By default a rule `` `` '' Registers a function as URL value preprocessor for this if isinstance ( code_or_exception , HTTPException ) : # old broken behavior # : for error handlers active on the application , otherwise the key is from .scaffold import _endpoint_from_view_func actual request was performed . : type key : None|str Your function must take one parameter , an instance of def index ( ) : # : to populate the template context . The key of the dictionary is the same ( see : meth : ` process_response ` ) . `` `` '' for error handlers limited to this blueprint . with a ` . ` it will be registered to the current blueprint , otherwise import_name=import_name , non-None value , the value is handled as if it was the return value from return exc_class , None ) .append ( f ) # : the name of the blueprint . Each key points to another dictionary statements and log occurring errors . prefix the endpoint with the blueprint name , this has to be done Starting with Flask 0.6 , `` OPTIONS `` is implicitly self.view_functions [ endpoint ] = f class Flask ( _PackageBoundObject ) : : attr : ` error_handler_spec ` directly , for application wide error `` before the application starts serving requests . '' return f # : change this once it is set by the constructor . of the : class : ` ~flask.Flask ` object . : attr : ` response_class ` and return a new response object or the application-wide function of the : class : ` ~flask.Flask ` object but `` `` '' Like : meth : ` Flask.context_processor ` but for a blueprint . This handlers = self.error_handler_spec.setdefault ( key , { } ) .setdefault ( code , { } ) ... def wrapper_func ( self , * args , * * kwargs ) : The function will be called without any arguments . If it returns a def context_processor ( self , f ) : Use : meth : ` register_error_handler ` instead of modifying added and handled by the standard request handling . # : Absolute path to the package on the filesystem . Used to look up self.add_url_rule ( rule , endpoint , f , * * options ) from werkzeug.exceptions import default_exceptions such constructs in tests . root_path=None , lambda s : s.app.url_default_functions.setdefault ( self.name , [ ] ) .append ( f ) `` `` '' Callback function for URL defaults for all view functions of the return update_wrapper ( wrapper_func , f ) # : dictionary is the name of the blueprint this function is active for , state.app.view_functions [ endpoint ] = f lambda s : s.app._register_error_handler ( self.name , code_or_exception , f ) return 'This page does not exist ' , 404 application . It 's called with the endpoint and values and should Starting with Flask 0.6 , `` OPTIONS `` is implicitly or `` HTTPException `` subclasses , return both the exception and exc_class , code = self._get_exc_class_and_code ( code_or_exception ) self.template_context_processors = { None : [ _default_template_ctx_processor ] } endpoint = options.pop ( `` endpoint '' , None ) `` `` '' Like : meth : ` Flask.teardown_request ` but for a blueprint . This static_url_path=None , `` first request was handled . This usually indicates a bug `` # Merge app and self dictionaries . # : : meth : ` teardown_request ` decorator . lambda s : s.app.teardown_request_funcs.setdefault ( self.name , [ ] ) .append ( f ) * * options , def before_request ( self , f ) : lambda s : s.app.after_request_funcs.setdefault ( self.name , [ ] ) .append ( f ) : class : ` ~werkzeug.routing.Rule ` object . A change Values of dict must be dict . Your function must take one parameter , an instance of code as an integer . As of Flask 0.7 this function might not be executed at the end of the return exc_class , None self , ) : from .scaffold import setupmethod ctx.pop ( ) merge_dict_lists ( self.before_request_funcs , app.before_request_funcs ) request in case an unhandled exception occurred . For example , this can be used to open a database connection , or to load # : `` None `` if templates should not be added . ... # : A dictionary of all view functions registered . The keys will non-None value , the value is handled as if it was the return value from given URL rule . This does the same thing as : meth : ` add_url_rule ` : param endpoint : the name of the endpoint # : `` `` '' Wraps a method so that it performs a check in debug mode if the to ( `` GET `` , `` POST `` etc. ) . By default a rule # : the name of the blueprint this function is active for , or `` None `` in place . For more information refer to : ref : ` url-route-registrations ` . `` `` '' Internal helper that returns the default endpoint for a given given URL rule . This does the same thing as : meth : ` add_url_rule ` function is only executed when tearing down requests handled by a from werkzeug.exceptions import default_exceptions `` `` '' Get the exception class being handled . For HTTP status codes # : teardown_request function . To register a function here , use the from .helpers import _PackageBoundObject # : A dictionary with lists of functions that can be used as URL value raise KeyError ( # : dictionary is the name of the blueprint this function is active for ,","['CHANGES.rst', 'src/flask/app.py', 'src/flask/blueprints.py', 'src/flask/helpers.py', 'src/flask/scaffold.py']",Merge pull request # 3709 from MLH-Fellowship/3215-flask-blueprint
2,6638432457320fd2db9c74b9135afef370ed96f0,2020-07-30 18:48:45-07:00,"monkeypatch.syspath_prepend ( os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' ) ) pass # Add commands provided by the app , showing an error and assert `` Traceback '' in result.output when looking up commands . : issue : ` 2741 ` # When any other errors occurred during loading , show the for key in sys.modules.keys ( ) - original_modules : # continuing if the app could n't be loaded . yield # available even if the app fails to load . # Remove any imports cached during the test . Otherwise `` import app '' # want the help page to break if the app does not exist . cli = FlaskGroup ( create_app=create_app ) monkeypatch.syspath_prepend ( # will work in the next test even though it 's no longer on the path . assert `` Usage : '' in result.stdout # Look up built-in and plugin commands , which should be rv = info.load_app ( ) .cli.get_command ( ctx , name ) rv = super ( ) .get_command ( ctx , name ) # Start with the built-in and plugin commands . def test_help_echo_loading_error ( ) : rv = set ( click.Group.list_commands ( self , ctx ) ) # The commands available is the list of both the application ( if click.secho ( f '' Error : { e.format_message ( ) } \n '' , err=True , fg= '' red '' ) info = ctx.ensure_object ( ScriptInfo ) return Flask ( `` flaskgroup '' ) # and not attach the default commands . info = ctx.ensure_object ( ScriptInfo ) # users . assert result.exit_code == 2 except NoAppException as e : # We load built-in commands first as these should always be the # available ) plus the builtin commands . def test_print_exceptions ( runner ) : def test_help_echo_exception ( ) : if rv is not None : runner = CliRunner ( mix_stderr=False ) assert `` Usage : '' in result.stderr return info.load_app ( ) .cli.get_command ( ctx , name ) except NoAppException : from flask.cli import cli os.path.abspath ( os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' ) ) # If someone attempts to use the command we try to create result = runner.invoke ( cli , [ `` -- help '' ] ) `` `` '' Print the stacktrace if the CLI . '' '' '' def test_locate_app_suppress_raise ( ) : def test_no_command_echo_loading_error ( ) : return rv assert `` FLASK_APP '' in result.stderr # override this it needs to make a custom instance of this group rv = AppGroup.get_command ( self , ctx , name ) # Look up commands provided by the app , showing an error and def test_locate_app_suppress_raise ( test_apps ) : # same no matter what the app does . If the app does want to # without the traceback . # application completely fails . assert `` Exception : oh no '' in result.output original_modules = set ( sys.modules.keys ( ) ) rv = set ( super ( ) .list_commands ( ctx ) ) The CLI shows better error messages when the app failed to load @ click.group ( cls=FlaskGroup , create_app=create_app ) # # the app again and this will give us the error . # full traceback . assert `` Exception : oh no '' in result.stderr click.secho ( f '' { traceback.format_exc ( ) } \n '' , err=True , fg= '' red '' ) traceback.print_exc ( ) def cli ( * * params ) : sys.modules.pop ( key ) # When an app could n't be loaded , show the error message ) pass result = runner.invoke ( cli , [ `` missing '' ] ) # Here we intentionally swallow all exceptions as we do n't # However , we will not do so silently because that would confuse assert result.exit_code == 0 # This also means that the script stays functional in case the","['CHANGES.rst', 'src/flask/cli.py', 'tests/conftest.py', 'tests/test_cli.py']",Merge pull request # 3711 from pallets/cli-loading-error
3,fc0aa7ac978b56e83dccde94214b1900a2ee1c3f,2020-07-29 08:32:40+00:00,"pytest==5.4.3 # via -r requirements/tests.in toml==0.10.1 # via pytest iniconfig==1.0.0 # via pytest py==1.9.0 # via pytest , tox py==1.8.1 # via pytest , tox pytest==6.0.0 # via -r requirements/tests.in toml==0.10.1 # via pre-commit , pytest , tox py==1.9.0 # via pytest py==1.8.1 # via pytest toml==0.10.1 # via pre-commit , tox wcwidth==0.1.9 # via pytest","['requirements/dev.txt', 'requirements/tests.txt']",Merge pull request # 3705 from pallets/dependabot/pip/pytest-6.0.0
4,37551e6798aabefd549340a7d3840b7648b413c7,2020-07-28 19:44:23-07:00,`` `` '' Test jsonify with basic types . '' '' '' `` `` '' Test if ` find_best_app ` behaves as expected with different combinations of input . '' '' '' # noqa : B950 `` `` '' Test FlaskGroup . '' '' '' `` `` '' Test jsonify with dicts and kwargs unpacking . '' '' '' `` `` '' Test FlaskGroup debug flag behavior . '' '' '' `` `` '' Test of ScriptInfo . '' '' '' `` `` '' Test of with_appcontext . '' '' '',"['tests/test_cli.py', 'tests/test_helpers.py']",Merge pull request # 3699 from MartinThoma/style
5,36e6fc8ab8418d7d8ead6ed0196b2bcbbc9e91ba,2020-07-28 14:17:36-07:00,"similar fashion . See the ` Python SDK docs execute different handling strategies for these errors based on URL these will catch more than you might expect . this is similar to doing `` except Exception : `` in Python , it will return jsonify ( `` code '' : e.code , `` name '' : e.name , `` description '' : e.description ) , e.code user = get_user ( username=username ) * 404 Not Found * This does the following things : `` FLASK_ENV `` can only be set as an environment variable . When running def user_profile ( ) : debugger , debug mode , and development mode . More information about the sure to provide the appropriate HTTP status code when returning a response from Sending error mails , even if just for critical ones , can become from flask import abort , render_template , request DEBUG_WITH_APTANA : True ( Want to just log errors and stack traces ? See : doc : ` errorhandling ` ) `` description '' : e.description , : exc : ` ~werkzeug.exceptions.InternalServerError ` . frequency thresholds . be used to step through code during a request before an error is raised , if user is None : available as an Open Source project ` on GitHub : class : screenshot werkzeug . However , as the default HTTP exceptions return simple exception `` `` `` `` `` `` `` `` return render_template ( `` 500_generic.html '' , e=e ) , 500 Non-standard HTTP codes can not be registered by code because they are not known Default Error Handling Sometimes when building a Flask application , you might want to raise a this is similar to doing `` except Exception : `` in Python , it will with a `` description `` parameter . The error handler will variable to `` development `` before calling `` flask run `` . in production . Even if your code is 100 % correct , you will still see ( which makes it nearly impossible to use on production servers ) , it still @ app.errorhandler ( Exception ) addition to explicit 500 errors . In debug mode , a handler for `` 500 Internal Server Error '' will not be used . abort ( 404 ) these will catch more than you might expect . use the 410 code instead and display a message that what they were return render_template ( '404.html ' ) , 404 access . This is because the blueprint does not `` own '' a certain URL space , so If no handler is registered , : class : ` ~werkzeug.exceptions.HTTPException ` subclasses show a debug mode . Instead , the interactive debugger will be shown . : class : screenshot development and production . You might want to show custom error pages to the user when an error occurs . * 400 Bad Request * documentation ` _ . specific exceptions . Since `` HTTPException `` instances are valid WSGI It is passed the instance of the error being handled , which is most # or , without the decorator variables for debugging , and sends you mails based on new errors or response.content_type = `` application/json '' To enable the debugger , run the development server with the : func : ` ~flask.abort ` function that aborts a request with a HTTP error from app.run ( use_debugger=use_debugger , debug=app.debug , `` name '' : e.name , from flask import json { % block body % } you could have something like : : common that even novices to the internet know that 404 means : damn , Unhandled Exceptions registered ) , a `` 500 Internal Server Error '' from flask import abort , render_template , request # or using jsonify returned . 400-499 indicate errors with the client 's request data , or And then add this to your Flask app : : : align : center When an error occurs in Flask , an appropriate ` HTTP status code def user_profile ( ) : # To allow aptana to receive errors , set use_debugger=False make sure there is actually something useful on a 404 page , at least a disabled , it will catch unhandled exceptions before the external In : doc : ` /blueprints ` , most error handlers will work as expected . debugger can . If the reloader is not disabled , it could cause an and other debuggers . pages . You might want to show custom error pages to the user when an error occurs . : doc : ` /debugging ` for information about using the built-in debugger Sometimes when building a Flask application , you might want to raise a The default : exc : ` ~werkzeug.exceptions.HTTPException ` returns a black and white `` `` '' Return JSON instead of HTML for HTTP errors . '' '' '' } ) pages , Flask also offers the opportunity to customise these HTTP exceptions via def page_not_found ( e ) : A view can now raise that exception with an error message . Additionally FLASK : : alt : The interactive debugger in action . .. admonition : : Attention a handler or a 200 OK HTTP code will be sent instead . To use Sentry you need to install the `` sentry-sdk `` client with extra handling strategies for these errors based on URL prefixes , they may be defined Registering Custom Exceptions specific exceptions . Since `` HTTPException `` instances are valid WSGI * ` Flask-specific documentation < https : //docs.sentry.io/platforms/python/flask/ > ` _ . handler it should run if given an invalid URL . If you would like to If you have some kind of access control on your website , you will have by emailing them to admins . # replace the body with JSON with a `` description `` parameter . The errorhandler will Register handlers by decorating a function with You can create your own custom exceptions by subclassing When building APIs in Flask , some developers realise that the built-in return app debuggers also have a remote mode so breakpoints on the server can be Handling Error Handlers < p > < a href= '' { { url_for ( 'index ' ) } } '' > Go home < /a > `` `` `` `` return response during a request . This debugger should only be used during development . variables for debugging , and sends you mails based on new errors or < https : //github.com/getsentry/sentry > ` _ and is also available as a ` hosted version If an exception is raised in the code while Flask is handling a request and The status code of the response will not be set to the handler 's code . Make .. _custom-error-handlers : of the box ( see : ref : ` debug-mode ` ) . If you would like to use another Python The original error is available as `` e.original_exception `` . ` Getting started with Sentry < https : //docs.sentry.io/quickstart/ ? platform=python > ` __ even if the application behaves correctly : Error handlers still respect the exception class hierarchy . If you Debugging @ app.route ( `` /profile '' ) exceptions . These error handlers are only invoked from an appropriate Screenshot of the debugger in action : $ pip install sentry-sdk [ flask ] .. _working-with-debuggers : return response app.register_error_handler ( 400 , handle_bad_request ) of a parent class . $ flask run -- no-debugger -- no-reload from werkzeug.exceptions import HTTPException `` debug `` must be True ( i.e. , exceptions must be caught ) in order for the other `` `` '' Return JSON instead of HTML for HTTP errors . '' '' '' .. _error-logging-tools : were changed Werkzeug . However , the default HTTP exceptions return simple exception receive error notifications . < https : //docs.sentry.io/platforms/python/ > ` __ for more information . Custom Error Pages sentry_sdk.init ( 'YOUR_DSN_HERE ' , integrations= [ FlaskIntegration ( ) ] ) { % endblock % } and 405 errors during routing . Be sure to craft your handler carefully : alt : screenshot of debugger in action Generic Error Pages The debugger allows executing arbitrary Python code from the of your site . This can be done by registering error handlers . * 410 Gone * : class : ` ~werkzeug.exceptions.HTTPException ` with the appropriate code and # replace the body with JSON # if a username is n't supplied in the request , return a 400 bad request actually see such an error . < p > { { e.description } } < /p > When building APIs in Flask , some developers realise that the builtin username and we ca n't find it , we raise a `` 404 Not Found '' . < https : //sentry.io/ > ` _ for dealing with application errors . It 's The status code of the response will not be set to the handler 's code . Make : exc : ` werkzeug.exceptions.HTTPException ` . As shown above , integer HTTP codes : alt : screenshot of debugger in action # werkzeug exceptions have a code attribute { % extends `` layout.html '' % } view functions ; they are not invoked by , e.g. , an invalid URL access . unallowed request method a `` 405 Method Not Allowed '' It is possible to register error handlers for very generic base classes and 405 errors during routing . Be sure to craft your handler carefully Sending error mails , even if just for critical ones , can become # during an request register and raise that exception class . And then add this to your Flask app : } ) `` `` `` `` `` `` `` `` `` options in order to use your favorite debugger : Even though the interactive debugger does not work in forking environments `` `` `` `` `` ` # a successful request would be like /profile ? username=jack @ app.errorhandler ( 500 ) # a username needs to be supplied in the query args app.register_error_handler ( InsufficientStorage , handle_507 ) register handlers for both `` HTTPException `` and `` Exception `` , the For production applications , configure your application with logging and : doc : ` /logging ` and : doc : ` /errorhandling ` to log errors and display link back to the index . : exc : ` ~werkzeug.exceptions.BadRequest ` and their HTTP codes are interchangeable debugger can be found in the ` Werkzeug documentation def handle_bad_request ( e ) : the function later . A handler can be registered for a status code , unhandled error . See : doc : ` /debugging ` for information about how to debug errors in An error handler is a normal view function that returns a response , but instead Usually happens on programming errors or if the server is overloaded . When the server will not process the request due to something that app.register_error_handler ( 404 , page_not_found ) : align : center { % block title % } { { e.name } } { % endblock % } * * Do not run the development server , or enable the built-in debugger , in Non-standard HTTP codes can not be registered by code because they are not known Returning API Errors as JSON `` `` `` `` `` `` `` ` from werkzeug.exceptions import InternalServerError in production . Even if your code is 100 % correct , you will still see responses , you could also pass them through directly . # as a decorator with an int as the exception code use_reloader=use_debugger , host= ' 0.0.0.0 ' ) emailing them to admins . : exc : ` werkzeug.exceptions.HTTPException ` subclasses like not be relied on for security . external debugger if `` request.remote_addr `` matches your IP . Some IDE app = Flask ( __name__ ) app.register_error_handler ( 500 , handle_internal_server_error ) security risk . Do not run the development server or debugger in a resources that previously existed and got deleted answer with 410 When running from the command line : are interchangable when registering handlers . ( `` BadRequest.code == 400 `` ) powerful debugging experience than the built-in debugger . They can also mostly equivalent . Debug mode can be controled separately from application itself . deal with that sort of problem ? By default if your application runs in Custom error handlers prefixes , they may be defined at the application level using the if __name__ == `` __main__ '' : Flask in debug mode , which changes how it handles some errors , and code running on another machine . username but we ca n't find it , we raise a `` 404 Not Found '' . to send a 403 code for disallowed resources . So make sure the user so you do n't lose information about the HTTP error . See also : get from your Sentry installation . but it can be useful to disable the built-in debugger and reloader , code = 507 If you 're using Aptana/Eclipse for debugging you 'll need to set both full-featured Python debugger . sure to provide the appropriate HTTP status code when returning a response from described in : doc : ` /logging ` . registered ) an `` 500 Internal Server Error '' Sentry also supports catching errors from a worker queue < p > What you were looking for is just not there . development mode . The built-in Werkzeug development server provides a debugger which shows # a username needs to be supplied in the query args manually from the shell in the deployment environment . Be sure to run under .. warning : : An example template might be this : { % endblock % } use_debugger = app.debug and not ( app.config.get ( 'DEBUG_WITH_APTANA ' ) ) .. _error-logging-tools : all errors , even unhandled ones , are presented to the user . However , fails to pass a username we raise a `` 400 Bad Request '' and if the user passes a : func : ` ~flask.abort ` function that aborts a request with a HTTP error from introduce a new custom exception for an API that can take a proper human readable message , * * be sure to do this temporarily in a controlled environment . * * Do not run in something is wrong with the request . Fortunately , Flask comes with a handy because it the `` HTTPException `` handler is more specific . code = 507 `` `` `` `` `` `` `` `` `` `` `` `` `` In blueprints errorhandlers will simply work as expected ; however , there is a caveat app = create_app ( config= '' config.yaml '' ) We can also create custom exception classes . For instance , we can production with ` debug=True ` . 1. it activates the debugger `` flask `` dependencies . DEBUG : True To enable all development features , set the `` FLASK_ENV `` environment fail . Here are some situations where perfectly fine code can lead to server response = e.get_response ( ) # start with the correct headers and status code from the error codes . In most cases it will be safer to register handlers for more by its class hierarchy ; the most specific handler is chosen . If no handler is from sentry_sdk.integrations.flask import FlaskIntegration from Python code , passing `` debug=True `` enables debug mode , which is description = 'Not enough storage space . ' < https : //sentry.io/signup/ > ` _ which you can try for free . Sentry debugger , note that debuggers interfere with each other . You have to set some provide you with a helpful debugger if things go wrong . * 500 Internal Server Error * custom exceptions . More information on using the debugger can be found in the ` Werkzeug `` use_debugger `` and `` use_reloader `` to False . raised , similar to how a view is a function that returns a response when a return render_template ( `` 500_generic.html '' , e=e ) , 500 return 'bad request ! ' , 400 # if a user ca n't be found by their username , return 404 not found from flask import render_template `` `` `` `` `` `` `` `` `` `` `` `` `` `` or a custom exception class that inherits from Exception or its subclasses . See : doc : ` /logging ` for information about how to log exceptions , such as error page with a basic description , but nothing fancy . Considering : class : screenshot status code . For example 500 ( an `` Internal Server Error '' ) which maps to from flask import json < https : //developer.mozilla.org/en-US/docs/Web/HTTP/Status > ` __ will be abort ( 400 ) It is registered with the : meth : ` ~flask.Flask.errorhandler ` * 403 Forbidden * # similarly with a werkzeug exception `` `` `` `` `` `` `` `` `` `` `` `` `` `` Exception `` handler will not handle `` HTTPException `` subclasses overwhelming if enough users are hitting the error and log files are for you with a basic description , but nothing fancy . { % extends `` layout.html '' % } the `` FLASK_ENV `` environment variable and set it to `` development `` External debuggers , such as those provided by IDEs , can offer a more production environment . are automatically reported to Sentry and from there you can werkzeug as desired . ( RQ , Celery , etc . ) in a similar fashion . See the ` Python SDK docs For example , an error handler for `` HTTPException `` might be useful for turning More information on error handling with blueprint can be found in The Built-In Debugger class InsufficientStorage ( werkzeug.exceptions.HTTPException ) : the database but just mark them as deleted , do the user a favour and : doc : ` /server ` and : doc : ` /cli ` have more information about running the and therefore it * * must never be used on production machines * * . Debugging Application Errors from werkzeug.exceptions import HTTPException of being registered for a route , it is registered for an exception or HTTP return 'Not enough storage space ! ' , 507 capture * all * otherwise unhandled errors , including all HTTP status custom error handlers as well as to add exception handlers for builtin and from flask import Flask , render_template a handler . return e The `` YOUR_DSN_HERE `` value needs to be replaced with the DSN value you .. versionadded : : 0.3 is not lost when they try to access a forbidden resource . behavior . When using : doc : ` /patterns/appfactories ` : The good old `` chap , you made a mistake typing that URL '' message . So : exc : ` ~werkzeug.exceptions.HTTPException ` subclasses or HTTP status which is most likely a : exc : ` ~werkzeug.exceptions.HTTPException ` . * `` use_debugger `` - whether to use the internal Flask debugger ( On Windows you need to use `` set `` instead of `` export `` . ) the application instance has no way of knowing which blueprint error Error '' will be returned instead . See : meth : ` flask.Flask.handle_exception ` for def handle_507 ( e ) : $ export FLASK_ENV=development When an exception is caught by Flask while handling a request , it is first .. code-block : : python Common Error Codes fail . Here are some situations where perfectly fine code can lead to server When in Doubt , Run Manually sentry_sdk.init ( 'YOUR_DSN_HERE ' , integrations= [ FlaskIntegration ( ) ] ) response.data = json.dumps ( { : doc : ` /server ` and : doc : ` /cli ` for information about running in unexpected reload if code changes during debugging . the same user account as the configured deployment to troubleshoot permission # or , without the decorator notifications as described in : doc : ` /logging ` . This section provides Error Handlers ============================ return render_template ( `` profile.html '' , user=user ) Generic Exception Handlers Working with Debuggers When running from Python : < https : //werkzeug.palletsprojects.com/debug/ > ` __ . exceptions from time to time . Why ? Because everything else involved will Consider the code below , we might have a user profile route , but if the user # make sure to provide the appropriate HTTP status code If you have access to the server , you could add some code to start an all errors , even unhandled ones , are presented to the user . However , import sentry_sdk if username is None : Use an error logging tool , such as Sentry , as described in def create_app ( config_filename ) : return 'Internal Server Error ! ' , e.code Further Examples decorator or the : meth : ` ~flask.Flask.register_error_handler ` to register Then in your application 's entry-point ( main.py ) , # now you 're handling non-HTTP exceptions only # if a user ca n't be found by their username , return 404 not found application * will * fail sooner or later . aggregates duplicate errors , captures the full stack trace and local issues . You can use Flask 's builtin development server with ` debug=True ` on work with the following caveats . If the built-in debugger is not This can be done by registering error handlers . That is not very nice and Flask can do better . If you enable debug : doc : ` /blueprints ` . overwhelming if enough users are hitting the error and log files are syntax , missing query parameters , etc . $ export FLASK_ENV=development import sentry_sdk because it the `` HTTPException `` handler is more specific . deal with that sort of problem ? By default if your application runs in interacted with locally . Only enable a debugger temporarily . .. code-block : : python pointers when debugging deployment configuration and digging deeper with a < h1 > { { e.code } } { { e.name } } < /h1 > Error Logging Tools capture * all * otherwise unhandled errors , including all HTTP status user = get_user ( username=username ) def handle_exception ( e ) : Error handlers still respect the exception class hierarchy . If you When Flask catches an exception while handling a request , it is first looked up by code . debugging * ` Getting started with Sentry < https : //docs.sentry.io/quickstart/ ? platform=python > ` _ of the blueprint 's view functions ; they are not invoked by , e.g. , an invalid URL # now you 're handling non-HTTP exceptions only < h1 > Page Not Found < /h1 > server . By enabling debug mode , the server will automatically reload if ( : exc : ` ~werkzeug.exceptions.NotFound ` ) error will occur if a request is sent to an unregistered route . # returning 500 with the text sets the error handler 's code Internal Server Error will be returned instead . See .. _debug-mode : an interactive traceback in the browser when an unhandled error occurs looked up by code . If no handler is registered for the code , it is looked up Handlers can be registered for any exception class that inherits from Exception . registered , : class : ` ~werkzeug.exceptions.HTTPException ` subclasses show a description = 'Not enough storage space . ' `` code '' : e.code , You can also control debug mode separately from the environment by enables the debugger and reloader . The following error codes are some that are often displayed to the user , # pass through HTTP errors @ app.errorhandler ( HTTPException ) support the server will reload itself on code changes , and it will also An error handler for `` Exception `` might seem useful for changing how username = request.arg.get ( `` username '' ) : meth : ` flask.Flask.handle_exception ` for information about this typically never looked at . This is why we recommend using ` Sentry information about this behavior . Handlers can be registered for any exception class , not just Having problems getting your application configured for production ? If you And that 's just a small sample of issues you could be facing . So how do we Have another debugger in mind ? See : ref : ` working-with-debuggers ` . # start with the correct headers and status code from the error the default HTML errors pages into JSON . However , this instead of 404 . If you are not deleting documents permanently from `` request `` proxy object . available as an Open Source project ` on GitHub return render_template ( '404.html ' ) , 404 likely an integer that represents a : exc : ` ~werkzeug.exceptions.HTTPException ` from sentry_sdk.integrations.flask import FlaskIntegration # otherwise 200 will be returned as default introduce a new custom exception that can take a proper human readable message , Disabling these is n't required , an external debugger will continue to : meth : ` ~flask.Flask.errorhandler ` . Or use In most cases it will be safer to register handlers for more Custom error pages raise InsufficientStorage ( ) ( : exc : ` ~werkzeug.exceptions.NotFound ` ) error will occur . If a route receives an or if no error is raised . Some even have a remote mode so you can debug Generic Exception Handlers To use Sentry you need to install the ` sentry-sdk ` client with extra ` flask ` dependencies : : request URL is matched . It is passed the instance of the error being handled , at the application level using the `` request `` proxy object : from your Sentry installation . exporting `` FLASK_DEBUG=1 `` . highly advisable to customise these exceptions to improve the user experience app.register_error_handler ( InternalServerError , handle_internal_server_error ) Returning API errors as JSON After installation , failures leading to an Internal Server Error return e .. code-block : : html+jinja two options to have any value . you would have to restart it manually after each change to your code . Registering when registering handlers . ( `` BadRequest.code == 400 `` ) Blueprint Error Handlers @ app.errorhandler ( InternalServerError ) have shell access to your host , verify that you can run your application : exc : ` ~werkzeug.exceptions.HTTPException ` to signal to the user that if isinstance ( e , HTTPException ) : aggregates duplicate errors , captures the full stack trace and local `` `` `` `` `` `` `` `` `` `` ` The `` flask run `` command can do more than just start the development The ` YOUR_DSN_HERE ` value needs to be replaced with the DSN value you get return render_template ( `` exception.html '' , e=e ) , e.code .. image : : _static/debugger.png def handle_internal_server_error ( e ) : When using an external debugger , the app should still be in debug mode , An error handler for `` HTTPException `` might be useful for turning `` FLASK_ENV `` environment variable set to `` development `` . This puts Depending on the error code it is less or more likely for the user to Python code from the browser . It 's protected by a pin , but that should .. _handling-errors : typically never looked at . This is why we recommend using ` Sentry And that 's just a small sample of issues you could be facing . So how do we Did you know that there the `` 404 Not Found '' has a brother named `` 410 The : command : ` flask ` script is nice to start a local development server , but so you do n't lose information about the HTTP error . register and raise that exception class : response.content_type = `` application/json '' Debugging Application Errors $ flask run browser . It is protected by a pin , but still represents a major `` Exception `` handler will not handle `` HTTPException `` subclasses 2. it activates the automatic reloader < https : //sentry.io/signup/ > ` _ which you can try for free . Sentry such as `` HTTPException `` or even `` Exception `` . However , be aware that return 'Internal Server Error ! ' , 500 raise InsufficientStorage ( ) `` code '' : e.code , codes . Handlers can be registered for a specific class , or for all subclasses such as `` HTTPException `` or even `` Exception `` . However , be aware that < p > < a href= '' { { url_for ( 'index ' ) } } '' > go somewhere nice < /a > A view can now raise that exception with an error message . Additionally * `` use_reloader `` - whether to reload and fork the process if modules abort ( 400 ) # a successful request would be like /profile ? username=jack the default HTML errors pages into JSON , for example . However , this class InsufficientStorage ( werkzeug.exceptions.HTTPException ) : unhandled error . The original error is available as `` e.original_exception `` . # or , as a decorator with the werkzeug exception for internal server error $ pip install sentry-sdk [ flask ] codes . receive error notifications . handler will trigger for things you do n't cause directly , such as 404 To dig deeper , possibly to trace code execution , Flask provides a debugger out fails to pass a username we can raise a `` 400 Bad Request '' . If the user passes a < https : //github.com/getsentry/sentry > ` _ and is also available as a ` hosted version .. _Werkzeug documentation : https : //werkzeug.palletsprojects.com/debug/ # using-the-debugger `` `` `` `` `` `` `` `` `` `` `` * `` debug `` - whether to enable debug mode and catch exceptions 3. it enables the debug mode on the Flask application . Error Logging Tools < https : //docs.sentry.io/platforms/python/ > ` _ for more information . .. sourcecode : : html+jinja .. image : : _static/debugger.png There are more parameters that are explained in : doc : ` /server ` . the server perceives to be a client error . Such as malformed request Follow-up reads : Applications fail , servers fail . Sooner or later you will see an exception app.run ( debug=True , use_debugger=False , use_reloader=False ) Handling Errors In Production app.run ( debug=True ) External Debuggers : exc : ` ~werkzeug.exceptions.HTTPException ` to signal to the user that { % block body % } A handler for `` 500 Internal Server Error '' will not be used when running in We can also create custom exception classes ; for instance , for an API we can .. code-block : : text When there is no error handler registered for an exception , a 500 `` `` `` `` `` `` `` `` `` `` .. _common-error-codes : werkzeug as desired . It will also provide a plain black and white error page handler will trigger for things you do n't cause directly , such as 404 register handlers for both `` HTTPException `` and `` Exception `` , the by Werkzeug . Instead , define a subclass of ` Flask-specific documentation < https : //docs.sentry.io/platforms/python/flask/ > ` __ abort ( 404 ) See : doc : ` /logging ` for information on how to log exceptions , such as by response = e.get_response ( ) Applications fail , servers fail . Sooner or later you will see an exception the application instance has no way of knowing which blueprint error handler it Here is another example implementation for a `` 404 Page Not Found '' exception : invoked from an appropriate `` raise `` statement or a call to `` abort `` in another before running the server : : Consider the code below , we might have a user profile route , and if the user error occurs during a request . return render_template ( `` profile.html '' , user=user ) After installation , failures leading to an Internal Server Error < https : //sentry.io/ > ` _ for dealing with application errors . It 's looking for was deleted for all eternity . if user is None : should run if given an invalid URL . If you would like to execute different If we pass in the exception into a template as below : frequency thresholds . # pass through HTTP errors by Werkzeug . Instead , define a subclass of An error handler for `` 500 Internal Server Error '' will be passed uncaught exceptions in `` description '' : e.description , : class : ` ~werkzeug.exceptions.HTTPException ` with the appropriate code and It is possible to register error handlers for very generic base classes Gone '' ? Few people actually implement that , but the idea is that Unhandled Exceptions To enable all development features ( including debug mode ) you can export An error handler is a function that returns a response when a type of error is # note that we set the 404 status explicitly This is because the blueprint does not `` own '' a certain URL space , so which can interfere . app.register_error_handler ( InsufficientStorage , handle_507 ) However , there is a caveat concerning handlers for 404 and 405 When using the : doc : ` /patterns/appfactories ` : the thing I was looking for is not there . It 's a very good idea to if username is None : status code that would be raised while trying to handle a request . responses , you could also pass them through directly . if isinstance ( e , HTTPException ) : : meth : ` ~flask.Flask.register_error_handler ` to register the function later . A terribly good idea is to have a nice page there , because your # if a username is n't supplied in the request , return a 400 bad request : ref : ` error-logging-tools ` , or enable logging and notifications as are automatically reported to Sentry and from there you can A possible useful pattern for configuration is to set the following in your If no handler is registered for the code , Flask looks up the error by its class hierarchy ; the most specific handler is chosen . exceptions from time to time . Why ? Because everything else involved will Similarly , `` 404 Not Found '' An error handler for `` Exception `` might seem useful for changing how * Sentry also supports catching errors from your worker queue ( RQ , Celery ) in a { % block title % } Page Not Found { % endblock % } `` FLASK_ENV `` with the `` FLASK_DEBUG `` environment variable as well . nice error pages . `` name '' : e.name , Similarly , if a request is sent to an unregistered route a `` 404 Not Found '' code changes , and will show an interactive debugger in the browser if an a production environment . * * The debugger allows executing arbitrary username = request.arg.get ( `` username '' ) your production host , which is helpful in catching configuration issues , but If a route receives an unallowed request method , a `` 405 Method Not Allowed '' : align : center something is wrong with the request . Fortunately , Flask comes with a handy response.data = json.dumps ( { Instead , the interactive debugger will be shown . allows the execution of arbitrary code . This makes it a major security risk there is no error handler registered for that exception , a `` 500 Internal Server Remember to set the error code when returning the response . def handle_exception ( e ) : about the data requested . 500-599 indicate errors with the server or like 404 or 500 , or for an built-in exception class , like KeyError , `` raise `` statement or a call to `` abort `` in another of the blueprint 's concerning handlers for 404 and 405 exceptions . These errorhandlers are only config.yaml ( change the block as appropriate for your application , of course ) : : these errors * will * be thrown during the lifetime of your application , it is $ flask run","['docs/blueprints.rst', 'docs/debugging.rst', 'docs/errorhandling.rst', 'docs/index.rst', 'docs/quickstart.rst']",Merge pull request # 3669 from ebonnecab/error-docs
6,21c3df31de4bc2f838c945bd37d185210d9bab1a,2020-07-24 09:23:20-07:00,"< h1 > { { e.code } } { { e.name } } < /h1 > return 'Internal Server Error ! ' , e.code similar fashion . See the ` Python SDK docs from flask import Flask , render_template def handle_bad_request ( e ) : use that as the JSON error message , and set the status code to 404 . An example template might be this : * 404 Not Found * When using : doc : ` /blueprints ` : The good old `` chap , you made a mistake typing that URL '' message . So sure to provide the appropriate HTTP status code when returning a response from Sending error mails , even if just for critical ones , can become return 'Not enough storage space ! ' , 507 Handlers registered on the blueprint take precedence over those registered `` `` `` `` behavior . return render_template ( '500.html ' ) , 500 from flask import abort , render_template , request def __init__ ( self , message , status_code=None , payload=None ) : frequency thresholds . user = get_user ( user_id=user_id ) available as an Open Source project ` on GitHub from flask import abort , jsonify this will be invoked . As of Flask 1.1.0 , this error handler will always An error handler is registered with the : meth : ` ~flask.Flask.errorhandler ` self.status_code = status_code # direct 500 error , such as abort ( 500 ) ============================ `` `` `` `` `` ` .. _common-error-codes : else : access . This is because the blueprint does not `` own '' a certain URL space , so Follow-up reads : : exc : ` ConnectionRefusedError ` , the more specific : exc : ` ConnectionRefusedError ` It can be implemented by rendering the template on `` 500 Internal Server Error '' : If there is an error handler registered for `` InternalServerError `` , be passed an instance of `` InternalServerError `` , not the original from werkzeug.exceptions import InternalServerError highly advisable to customise these exceptions to improve the user experience at the application level using the `` request `` proxy object : parameter . use the 410 code instead and display a message that what they were Application Errors super ( ) .__init__ ( ) return render_template ( `` 500.html '' ) , 500 Custom error pages page for you and log the exception to the : attr : ` ~flask.Flask.logger ` . rv = dict ( self.payload or ( ) ) some extra payload can be provided as a dictionary through the ` payload ` and white error page for you with a basic description , but nothing fancy . addition to explicit 500 errors . return jsonify ( e.to_dict ( ) ) debug mode . Instead , the interactive debugger will be shown . subclasses of : class : ` ~werkzeug.exceptions.HTTPException ` and are provided by in an internal server error . The reason for this is that there is no variables for debugging , and sends you mails based on new errors or def handle_500 ( e ) : < h1 > Internal Server Error < /h1 > this will be invoked . As of Flask 1.1.0 , this error handler will always Logging for it that produces the errors in the format the user is expecting . =========================== pages , Flask also offers the opportunity to customise these HTTP exceptions via : doc : ` /errorhandling ` ) . Handling { % block body % } common that even novices to the internet know that 404 means : damn , Unhandled Exceptions for the error . of the blueprint 's view functions ; they are not invoked by , e.g. , an invalid URL blog.register_error_handler ( 500 , internal_server_error ) And then add this to your Flask app : : * Sentry also supports catching errors from your worker queue ( RQ , Celery ) in a custom exceptions . Returning API errors as JSON def user_profile ( ) : The better solution than using `` abort `` to signal errors for invalid API # returning 500 with the text sets the error handler 's code In blueprints errorhandlers will simply work as expected ; however , there is a caveat make sure there is actually something useful on a 404 page , at least a # wrapped unhandled error is not lost when they try to access a forbidden resource . Sometimes when building a Flask application , you might want to raise a def page_not_found ( e ) : usage is to implement your own exception type and install an error handler abort ( 404 , description= '' Resource not found '' ) A view can now raise that exception with an error message . Additionally .. _handling-errors : < p > < a href= '' { { url_for ( 'index ' ) } } '' > Go home < /a > Registering Custom Exceptions It is registered with the : meth : ` ~flask.Flask.errorhandler ` * ` Flask-specific documentation < https : //docs.sentry.io/platforms/python/flask/ > ` _ . class InvalidAPIUsage ( Exception ) : If you have some kind of access control on your website , you will have concerning handlers for 404 and 405 exceptions . These errorhandlers are only are interchangable when registering handlers . ( `` BadRequest.code == 400 `` ) rv [ 'message ' ] = self.message raise InvalidAPIUsage ( `` No such user ! `` , status_code=404 ) return app invoked from an appropriate `` raise `` statement or a call to `` abort `` in another human readable message , a status code for the error and some optional # if a request has the wrong method to our API make sure there is actually something useful on a 404 page , at least a the application instance has no way of knowing which blueprint error handler it from flask import abort , jsonify return response See : doc : ` /errorhandling ` . syntax , missing query parameters , etc . variables for debugging , and sends you mails based on new errors or < https : //github.com/getsentry/sentry > ` _ and is also available as a ` hosted version An error handler is a function that returns a response when a type of error is The status code of the response will not be set to the handler 's code . Make If there is an error handler registered for `` InternalServerError `` , ================== of your site . This can be done by registering error handlers . codes . Handlers can be registered for a specific class , or for all subclasses def get_one_cheese ( ) : from flask import Blueprint even if the application behaves correctly : if request.path.startswith ( '/api/ ' ) : Default Error Handling common that even novices to the internet know that 404 means : damn , def internal_server_error ( e ) : $ pip install sentry-sdk [ flask ] return jsonify ( error=str ( e ) ) , 404 Depending on the error code it is less or more likely for the user to handler is called with the exception instance to generate the response . Internal Server Error will be returned instead . See application * will * fail sooner or later ( see also : return jsonify ( resource ) Registering an Error Handler ( : exc : ` ~werkzeug.exceptions.NotFound ` ) error will occur . If a route receives an : exc : ` werkzeug.exceptions.HTTPException ` subclasses like raise InvalidUsage ( 'This view is gone ' , status_code=410 ) some extra payload can be provided as a dictionary through the ` payload ` It 's very common to implement RESTful APIs on top of Flask . One of the # as a decorator with an int as the exception code unallowed request method a `` 405 Method Not Allowed '' receive error notifications . parameter . : exc : ` ~werkzeug.exceptions.BadRequest ` and their HTTP codes are interchangeable sentry_sdk.init ( 'YOUR_DSN_HERE ' , integrations= [ FlaskIntegration ( ) ] ) { % endblock % } def to_dict ( self ) : Until Werkzeug 1.0.0 , this attribute will only exist during unhandled * 410 Gone * # if a username is n't supplied in the request , return a 400 bad request request URL is matched . It is passed the instance of the error being handled , Handlers can be registered for any exception class , not just # an API app route for getting user information self.payload = payload app.register_error_handler ( 400 , handle_bad_request ) request with an HTTP error code early . It will also provide a plain black < https : //sentry.io/ > ` _ for dealing with application errors . It 's apierrors The status code of the response will not be set to the handler 's code . Make `` `` `` `` `` `` `` `` `` `` with errors including custom exceptions and 3rd party tools . { % extends `` layout.html '' % } handler registered for this error class . That however is easy to add : : * 403 Forbidden * app.register_error_handler ( 500 , internal_server_error ) when registering handlers . ( `` BadRequest.code == 400 `` ) # as a decorator Sending error mails , even if just for critical ones , can become Handling Application Errors return 'bad request ! ' , 400 # or using jsonify Consider the code below , we might have a user profile route , but if the user with errors . link back to the index . fails to pass a username we raise a `` 400 Bad Request '' and if the user passes a information about this behavior . Usually happens on programming errors or if the server is overloaded . : exc : ` ~werkzeug.exceptions.HTTPException ` subclasses or HTTP status class InvalidUsage ( Exception ) : generic message about their code , while other exceptions are converted to a use the 410 code instead and display a message that what they were from flask import jsonify , request < https : //sentry.io/ > ` _ for dealing with application errors . It 's resource = get_resource ( ) if not user : If an exception is raised in the code while Flask is handling a request and these errors * will * be thrown during the lifetime of your application , it is emailing them to admins . determined . : exc : ` ConnectionRefusedError ` , app = Flask ( __name__ ) original = getattr ( e , `` original_exception '' , None ) Flask comes with a handy : func : ` ~flask.abort ` function that aborts a Common Error Codes custom error handlers as well as to add exception handlers for builtin and resources that previously existed and got deleted answer with 410 from your Sentry installation . It is passed the instance of the error being handled , which is most Error '' will be returned instead . See : meth : ` flask.Flask.handle_exception ` for generic `` 500 Internal Server Error '' . to send a 403 code for disallowed resources . So make sure the user if original is None : # or with register_error_handler return app When using Flask for web APIs , you can use the same techniques as above def handle_invalid_usage ( error ) : return jsonify ( message= '' Method Not Allowed '' ) , 405 to send a 403 code for disallowed resources . So make sure the user decorator or the : meth : ` ~flask.Flask.register_error_handler ` method . A handler registered ) an `` 500 Internal Server Error '' response.status_code = error.status_code Did you know that there the `` 404 Not Found '' has a brother named `` 410 Similarly , if a request is sent to an unregistered route a `` 404 Not Found '' exception to the : attr : ` ~flask.Flask.logger ` . sure to provide the appropriate HTTP status code when returning a response from Using the same techniques as above and : func : ` ~flask.json.jsonify ` we can return JSON More information on error handling with blueprint can be found in The basic idea is to introduce a new exception that can take a proper return jsonify ( error=str ( e ) ) , 404 # a username needs to be supplied in the query args More information on error handling see : doc : ` /patterns/errorpages ` . .. _custom-error-handlers : if resource is None : # at the application level debug mode . Instead , the interactive debugger will be shown . { % endblock % } .. _error-logging-tools : ( : exc : ` ~werkzeug.exceptions.InternalServerError ` ) will be returned by default . self.payload = payload default in Flask . : func : ` ~flask.abort ` function that aborts a request with a HTTP error from You can create your own custom exceptions by subclassing # we return a json saying so because the 404 occurs at the routing level before the blueprint can be from flask import jsonify , render_template something is wrong with the request . Fortunately , Flask comes with a handy if status_code is not None : def create_app ( ) : globally on the application , assuming a blueprint is handling the request that Implementing API Exceptions @ app.errorhandler ( werkzeug.exceptions.BadRequest ) return render_template ( `` 500_unhandled.html '' , e=original ) , 500 register and raise that exception class . : : from sentry_sdk.integrations.flask import FlaskIntegration by its class hierarchy ; the most specific handler is chosen . If no handler is instead of 404 . If you are not deleting documents permanently from < https : //sentry.io/signup/ > ` _ which you can try for free . Sentry return render_template ( `` 500.html '' ) , 500 exception pages . We can create a custom 500.html template like this : * 500 Internal Server Error * raises the exception . However , the blueprint can not handle 404 routing errors : meth : ` flask.Flask.handle_exception ` for information about this # if a user ca n't be found by their username , return 404 not found likely an integer that represents a : exc : ` ~werkzeug.exceptions.HTTPException ` from flask import render_template For example , if an instance of : exc : ` ConnectionRefusedError ` is raised , a handler . Gone '' ? Few people actually implement that , but the idea is that def handle_500 ( e ) : return render_template ( `` exception.html '' , e=e ) , e.code * 403 Forbidden * resources that previously existed and got deleted answer with 410 def invalid_api_usage ( e ) : from flask import render_template overwhelming if enough users are hitting the error and log files are be passed an instance of `` InternalServerError `` , not the original { % extends `` layout.html '' % } # we return a custom blog 404 page are automatically reported to Sentry and from there you can return render_template ( `` 404.html '' ) , 404 < h1 > Page Not Found < /h1 > if original is None : register and raise that exception class : If we pass in the exception into a template as below : the database but just mark them as deleted , do the user a favour and # or , as a decorator with the werkzeug exception for internal server error status code . For example 500 ( an `` Internal Server Error '' ) which maps to If you have some kind of access control on your website , you will have from werkzeug.exceptions import HTTPException there is no error handler registered for that exception , a `` 500 Internal Server from flask import Flask , render_template # werkzeug exceptions have a code attribute # during an request is not lost when they try to access a forbidden resource . use that as the JSON error message , and set the status code to 404 . The good old `` chap , you made a mistake typing that URL '' message . So original = getattr ( e , `` original_exception '' , None ) handler for `` 500 Internal Server Error '' will be passed uncaught exceptions in { % block title % } { { e.name } } { % endblock % } blog = Blueprint ( 'blog ' , __name__ ) A view can now raise that exception with an error message . Additionally When an exception is caught by Flask while handling a request , it is first .. code-block : : python Common Error Codes return render_template ( `` 405.html '' ) , 405 sentry_sdk.init ( 'YOUR_DSN_HERE ' , integrations= [ FlaskIntegration ( ) ] ) < p > < a href= '' { { url_for ( 'index ' ) } } '' > go somewhere nice < /a > def handle_internal_server_error ( e ) : a handler or a 200 OK HTTP code will be sent instead . def resource_not_found ( e ) : Remember to set the error code when returning the response . : : Error Handlers return render_template ( `` profile.html '' , user=user ) status_code = 400 @ app.errorhandler ( InvalidUsage ) And then add this to your Flask app : : * 400 Bad Request * { % block title % } Internal Server Error { % endblock % } def create_app ( config_filename ) : import sentry_sdk if username is None : Generic Error Pages werkzeug as desired . introduce a new custom exception that can take a proper human readable message , registered , : class : ` ~werkzeug.exceptions.HTTPException ` subclasses show a You might want to show custom error pages to the user when an error occurs . aggregates duplicate errors , captures the full stack trace and local See : doc : ` /logging ` for information on how to log exceptions , such as by return rv exceptions are not expressive enough for APIs and that the content type of generic 500 Internal Server Error . overwhelming if enough users are hitting the error and log files are looking for was deleted for all eternity . a status code for the error and some optional payload to give more context import sentry_sdk The default : exc : ` ~werkzeug.exceptions.HTTPException ` returns a black and white app = Flask ( __name__ ) return render_template ( '404.html ' ) , 404 # not the blueprint level raised , similar to how a view is a function that returns a response when a .. code-block : : python Error Logging Tools user = get_user ( username=username ) or a custom exception class that inherits from Exception or its subclasses . * ` Getting started with Sentry < https : //docs.sentry.io/quickstart/ ? platform=python > ` _ the database but just mark them as deleted , do the user a favour and def method_not_allowed ( e ) : def get_foo ( ) : # note that we set the 404 status explicitly if not user_id : * 500 Internal Server Error * looked up by code . If no handler is registered for the code , it is looked up def get_one_cheese ( ) : The above examples would n't actually be an improvement on the default registered , : class : ` ~werkzeug.exceptions.HTTPException ` subclasses show a * ` Flask-specific documentation < https : //docs.sentry.io/platforms/python/flask/ > ` _ . errors , use `` getattr `` to get access it for compatibility . def handle_507 ( e ) : # wrapped unhandled error The following error codes are some that are often displayed to the user , production mode , Flask will display a very simple page for you and log the return jsonify ( resource ) and a handler is registered for : exc : ` ConnectionError ` and `` `` `` `` `` `` `` `` `` `` `` `` `` `` typically never looked at . This is why we recommend using ` Sentry # similarly with a werkzeug exception the server perceives to be a client error . Such as malformed request instead of 404 . If you are not deleting documents permanently from available as an Open Source project ` on GitHub def page_not_found ( e ) : with a `` description `` parameter . The errorhandler will from sentry_sdk.integrations.flask import FlaskIntegration : meth : ` ~flask.Flask.register_error_handler ` to register the function later . To use Sentry you need to install the ` sentry-sdk ` client with extra ` flask ` dependencies : : : exc : ` werkzeug.exceptions.HTTPException ` . As shown above , integer HTTP codes # a correct request might be /api/user ? user_id=420 `` `` `` `` `` `` `` `` `` `` ` the thing I was looking for is not there . It 's a very good idea to To use Sentry you need to install the ` sentry-sdk ` client with extra ` flask ` dependencies : : emailing them to admins . from your Sentry installation . Here is how a view can use that functionality : : username but we ca n't find it , we raise a `` 404 Not Found '' . exception instance to generate the response . app.register_error_handler ( 500 , handle_internal_server_error ) Returning API errors as JSON After installation , failures leading to an Internal Server Error We can also create custom exception classes ; for instance , for an API we can Usually happens on programming errors or if the server is overloaded . unhandled error . The original error is available as `` e.original_exception `` . This is a simple example : looked up by code . If no handler is registered for the code , it is looked up Handling Errors @ app.route ( '/foo ' ) Handlers registered on the blueprint take precedence over those registered @ app.errorhandler ( InternalServerError ) because the 404 occurs at the routing level before the blueprint can be link back to the index . : exc : ` ~werkzeug.exceptions.HTTPException ` to signal to the user that # make sure to provide the appropriate HTTP status code When building APIs in Flask , some developers realise that the builtin aggregates duplicate errors , captures the full stack trace and local The ` YOUR_DSN_HERE ` value needs to be replaced with the DSN value you get abort ( 404 , description= '' Resource not found '' ) def __init__ ( self , message , status_code=None , payload=None ) : # direct 500 error , such as abort ( 500 ) errorpages werkzeug . However , as the default HTTP exceptions return simple exception typically never looked at . This is why we recommend using ` Sentry Did you know that there the `` 404 Not Found '' has a brother named `` 410 rv = dict ( self.payload or ( ) ) ( : exc : ` ~werkzeug.exceptions.MethodNotAllowed ` ) will be raised . These are all responses to API errors . : func : ` ~flask.abort ` is called to return JSON responses to API errors . : func : ` ~flask.abort ` is called : exc : ` ~werkzeug.exceptions.InternalServerError ` . even if the application behaves correctly : status_code = 400 from flask import jsonify def to_dict ( self ) : Custom error handlers can be registered for a status code , like 404 , or for an exception class . < https : //sentry.io/signup/ > ` _ which you can try for free . Sentry of your code breaks while handling a request ( and you have no error handlers When building a Flask application you * will * run into exceptions . If some part and a handler is registered for : exc : ` ConnectionError ` and < p > < a href= '' { { url_for ( 'index ' ) } } '' > Go somewhere nice instead < /a > abort ( 400 ) # a successful request would be like /profile ? username=jack def resource_not_found ( e ) : return jsonify ( `` code '' : e.code , `` name '' : e.name , `` description '' : e.description ) , e.code `` `` `` `` `` `` `` `` `` `` `` unhandled error . The original error is available as `` e.original_exception `` . Register handlers by decorating a function with $ pip install sentry-sdk [ flask ] : meth : ` ~flask.Flask.errorhandler ` . Or use receive error notifications . =========================== The ` YOUR_DSN_HERE ` value needs to be replaced with the DSN value you get { % block title % } Page Not Found { % endblock % } When there is no error handler registered for an exception , a 500 < https : //github.com/getsentry/sentry > ` _ and is also available as a ` hosted version `` `` `` `` `` `` `` ` This is a simple example : : A handler for `` 500 Internal Server Error '' will not be used when running in Custom Error Pages application * will * fail sooner or later . def user_api ( user_id ) : if resource is None : Error Logging Tools < https : //docs.sentry.io/platforms/python/ > ` _ for more information . Usage in Views .. sourcecode : : html+jinja payload to give more context for the error . * ` Getting started with Sentry < https : //docs.sentry.io/quickstart/ ? platform=python > ` _ response = jsonify ( error.to_dict ( ) ) @ app.errorhandler ( 404 ) exceptions are not expressive enough for APIs and that the content type of return render_template ( `` 500_unhandled.html '' , e=original ) , 500 return rv Follow-up reads : For example , if an instance of : exc : ` ConnectionRefusedError ` is raised , should run if given an invalid URL . If you would like to execute different This can be done by registering error handlers . like 404 or 500 , or for an built-in exception class , like KeyError , rv [ 'message ' ] = self.message { % block body % } return render_template ( '404.html ' ) , 404 error page with a basic description , but nothing fancy . Considering The following error codes are some that are often displayed to the user , A handler for `` 500 Internal Server Error '' will not be used when running in Handlers can be registered for any exception class that inherits from Exception . handling strategies for these errors based on URL prefixes , they may be defined < p > What you were looking for is just not there . raise InvalidAPIUsage ( `` No user id provided ! '' ) app.register_error_handler ( 404 , page_not_found ) abort ( 404 ) See : doc : ` /logging ` for information on how to log exceptions , such as by When using the : doc : ` /patterns/appfactories ` : # if a request is in our blog URL space # note that we set the 500 status explicitly production mode , and an exception is raised Flask will display a very simple by its class hierarchy ; the most specific handler is chosen . If no handler is return 'Internal Server Error ! ' , 500 raises the exception . However , the blueprint can not handle 404 routing errors After installation , failures leading to an Internal Server Error determined . looking for was deleted for all eternity . @ app.route ( `` /cheese '' ) if user is None : # otherwise we return our generic site-wide 404 page frequency thresholds . which is most likely a : exc : ` ~werkzeug.exceptions.HTTPException ` . An error generic message about their code , while other exceptions are converted to a app.register_error_handler ( InternalServerError , handle_internal_server_error ) resource = get_resource ( ) user_id = request.arg.get ( `` user_id '' ) self.message = message : doc : ` /blueprints ` . Gone '' ? Few people actually implement that , but the idea is that Unhandled Exceptions Until Werkzeug 1.0.0 , this attribute will only exist during unhandled .. sourcecode : : html+jinja At that point views can raise that error , but it would immediately result globally on the application , assuming a blueprint is handling the request that * 410 Gone * : mimetype : ` text/html ` they are emitting is not very useful for API consumers . return render_template ( '500.html ' ) , 500 # otherwise 200 will be returned as default self.message = message Logging if request.path.startswith ( '/blog/ ' ) : of a parent class . the thing I was looking for is not there . It 's a very good idea to : mimetype : ` text/html ` they are emitting is not very useful for API consumers . A terribly good idea is to have a nice page there , because your are automatically reported to Sentry and from there you can < https : //docs.sentry.io/platforms/python/ > ` _ for more information . `` `` `` `` `` `` `` `` `` When an exception is caught by Flask while handling a request , it is first actually see such an error . Error handlers self.status_code = status_code with a `` description `` parameter . The : meth : ` ~flask.errorhandler ` will * Sentry also supports catching errors from your worker queue ( RQ , Celery ) in a When the server will not process the request due to something that the more specific : exc : ` ConnectionRefusedError ` handler is called with the Registering if status_code is not None : # otherwise we return a generic site-wide 405 page < p > { { e.description } } < /p > Exception.__init__ ( self ) Here is an example implementation for a `` 404 Page Not Found '' exception : : decorator or the : meth : ` ~flask.Flask.register_error_handler ` to register errors , use `` getattr `` to get access it for compatibility . Simple Exception Class first things that developers run into is the realization that the builtin username = request.arg.get ( `` username '' ) < p > Oops ... we seem to have made a mistake , sorry ! < /p > similar fashion . See the ` Python SDK docs When using the : doc : ` appfactories ` : : Flask gives you to the ability to raise any HTTP exception registered by return jsonify ( user.to_dict ( ) ) def handle_exception ( e ) : return render_template ( `` blog/404.html '' ) , 404 the function later . A handler can be registered for a status code , A terribly good idea is to have a nice page there , because your * 404 Not Found *","['docs/blueprints.rst', 'docs/errorhandling.rst', 'docs/patterns/apierrors.rst', 'docs/patterns/errorpages.rst', 'docs/patterns/index.rst']",Merge pull request # 3594 from jackwardell/consolidating-error-pages-docs
7,2fa8eb3cfebd7d797f8d27bfd05ea5f63985665f,2020-07-23 16:57:19-07:00,": pr : ` 3560 ` rv.headers.update ( headers ) When loading a `` .env `` or `` .flaskenv `` file , the current working desired . : issue : ` 3628 ` flask.Response ( flask.Response ( `` Hello world '' , 404 , { `` X-Foo '' : `` Baz '' } ) , rv.headers.extend ( headers ) When loading a `` .env `` or `` .flaskenv `` file on top level directory , `` Hello world '' , 404 , { `` Content-Type '' : `` text/html '' , `` X-Foo '' : `` Baz '' } Flask will not change current work directory to the location of dotenv For example , this allows setting the `` Content-Type `` for ) , files , in order to prevent potential confusion . : pr : ` 3560 ` assert rv.headers.getlist ( `` X-Foo '' ) == [ `` Baz '' , `` Bar '' ] { `` X-Foo '' : `` Bar '' , `` X-Bar '' : `` Foo '' } , { `` Content-Type '' : `` text/plain '' , `` X-Foo '' : `` Bar '' , `` X-Bar '' : `` Foo '' } , assert rv.headers.getlist ( `` X-Foo '' ) == [ `` Bar '' ] headers replace rather than extend existing headers on the response . directory is no longer changed to the location of the file . assert rv.content_type == `` text/plain '' `` jsonify ( ) `` . Use `` response.headers.extend ( ) `` if extending is When returning a `` ( response , headers ) `` tuple from a view , the","['CHANGES.rst', 'src/flask/app.py', 'tests/test_basic.py']",Merge pull request # 3684 from MLH-Fellowship/3628-duplicate-headers
8,6f2fdc5ac4ad869a21c4c0281d7fa1eb8aa5a689,2020-07-23 16:52:52-07:00,"lowest : Jinja2==2.10 lowest : Werkzeug==0.15.5 { name : Version Range , python : ' 3.8 ' , os : ubuntu-latest , tox : 'devel , lowest ' } lowest : Click==5.1 { name : Version Range , python : ' 3.8 ' , os : ubuntu-latest , tox : 'devel ' } py38-devel py38- { devel , lowest } lowest : itsdangerous==0.24","['.github/workflows/tests.yaml', 'tox.ini']",Merge pull request # 3694 from pallets/disable-lowest
9,f32f19162c936d94fb88f28f17f43dd9f195792b,2020-07-21 12:16:19+08:00,* Official chat : https : //discord.gg/pallets .. _Discord server : https : //discord.gg/pallets https : //discord.gg/pallets .. _Discord server : https : //discord.gg/t6rrQZH https : //discord.gg/t6rrQZH * Official chat : https : //discord.gg/t6rrQZH,"['CONTRIBUTING.rst', 'README.rst', 'docs/extensiondev.rst']",Merge pull request # 3691 from greyli/update-discord-links
10,a40c381ffdc4c28a19a0910c4da8ec54e3ae63cf,2020-07-18 13:14:09-04:00,"files , in order to prevent potential confusion . : pr : ` 3560 ` and will be where the Python path should import local packages from . os.chdir ( new_dir ) monkeypatch.chdir ( test_path ) found , with the assumption that it is in the top level project directory Flask will not change current work directory to the location of dotenv When loading a `` .env `` or `` .flaskenv `` file on top level directory , monkeypatch.chdir ( os.path.join ( test_path , `` cliapp '' , `` inner1 '' ) ) if new_dir and os.getcwd ( ) ! = new_dir : Changes the current working directory to the location of the first file","['CHANGES.rst', 'src/flask/cli.py', 'tests/test_cli.py']",Merge pull request # 3560 from greyli/fix-env-chdir
11,a12a34100ac0ab85c29f87117ac0b75100b52d3c,2020-07-08 06:56:11-07:00,allows controlling with file extensions are allowed to be uploaded . ` Flask-Uploads ` _ that implements a full fledged upload mechanism with white and : param category_filter : filter of categories to limit return values . Only categories in the list will be returned . ` Flask-Uploads ` _ that implements a full fledged upload mechanism that blacklisting of extensions and more . : param category_filter : whitelist of categories to limit return values,"['docs/patterns/fileuploads.rst', 'src/flask/helpers.py']",Merge pull request # 3680 from pallets/feature/doc-fixes
12,cf5b1d028342a2f7c929a23d53367addf106064e,2020-07-06 13:45:03-04:00,"Not yet released . def test_static_folder_with_pathlib_path ( app ) : value = os.fspath ( value ) .rstrip ( r '' \/ '' ) app = flask.Flask ( __name__ , static_folder=Path ( `` static '' ) ) Version 1.1.x Officially support passing a : class : ` pathlib.Path ` for rv = app.test_client ( ) .open ( `` /static/index.html '' , method= '' GET '' ) rv.close ( ) assert rv.status_code == 200 value = value.rstrip ( `` /\\ '' ) from pathlib import Path `` static_folder `` which stopped working in 1.1.2. : pr : ` 3579 `","['CHANGES.rst', 'src/flask/helpers.py', 'tests/test_basic.py']",Merge pull request # 3579 from jab/pathlib-for-static_folder
13,3fe5eecc2b57406bc9f14dbcc4fb1a76ba4ebab1,2020-07-05 08:28:28+08:00,"trailing slash ( `` /about/ `` ) produces a 404 `` Not Found '' error . This helps trailing slash produces a 404 `` Not Found '' error . This helps keep URLs a trailing slash , Flask redirects you to the canonical URL with the trailing slash . the same page twice . with the trailing slash ( `` /projects/ `` ) . indexing the same page twice . keep URLs unique for these resources , which helps search engines avoid a trailing slash ( `` /projects `` ) , Flask redirects you to the canonical URL unique for these resources , which helps search engines avoid indexing",['docs/quickstart.rst'],Merge pull request # 3674 from DeepOde/master
14,47e165d6d560fa502e41f152a69b657cf95f975a,2020-07-02 14:38:18-07:00,The request object is an instance of a : class : ` ~werkzeug.wrappers.Request ` The request object is an instance of a : class : ` ~flask.Request ` . just shows a quick overview of the most important ones . subclass and provides all of the attributes Werkzeug defines . This,['docs/api.rst'],Merge pull request # 3673 from stat1c-void/pr-api.rst-request-link-20200702
15,3349c4914d8556ced05ba85a89868f2ffb78fd46,2020-06-24 12:56:41-04:00,DEBUG = False DATABASE_URI = 'sqlite : /// : memory : ' DEBUG = False DEBUG = True DATABASE_URI = 'sqlite : /// : memory : ' DATABASE_URI = `` sqlite : ////tmp/foo.db '',['docs/config.rst'],Merge pull request # 3662 from lgiordani/remove-debug-from-examples
16,9075da126c9a983917b9779dbc826841813eee3c,2020-06-18 07:23:49-07:00,"from flask import stream_with_context , request , Response return app.response_class ( stream_template ( 'the_template.html ' , rows=rows ) ) from flask import Response return Response ( stream_template ( 'the_template.html ' , rows=rows ) ) return Response ( stream_with_context ( generate ( ) ) ) return app.response_class ( generate ( ) , mimetype='text/csv ' ) from flask import stream_with_context , request return Response ( generate ( ) , mimetype='text/csv ' ) return app.response_class ( stream_with_context ( generate ( ) ) )",['docs/patterns/streaming.rst'],Merge pull request # 3659 from iomintz/patch-1
17,88c9c68e17774b24c4a67f2abadf411c6a689c1e,2020-06-07 16:47:12-07:00,"Most modern terminals will warn about and remove hidden characters when applying extra filtering , such as replacing all `` \b `` characters . Copy/Paste to Terminal ` pasted into a terminal < https : //security.stackexchange.com/q/39118 > ` __ . about copying code in general . pasting , so this is n't strictly necessary . It 's also possible to craft into a terminal , and it becomes `` import os `` . .. code-block : : python `` import yosemite `` in HTML , but the backspaces are applied when pasted such as from comments posted by users on a technical blog , consider If you expect users to copy and paste untrusted code from your site , dangerous commands in other ways that are n't possible to filter . Depending on your site 's use case , it may be good to show a warning For example , `` import y\bose\bm\bi\bt\be\b `` renders as body = body.replace ( `` \b '' , `` '' ) Hidden characters such as the backspace character ( `` \b `` , `` ^H `` ) can cause text to render differently in HTML than how it is interpreted if",['docs/security.rst'],Merge pull request # 3633 from kx-chen/add-copy-paste-security
18,c59e019f5c5ed032c5360599bbd56e3fd9421adc,2020-06-05 21:48:37-07:00,Add the main repository as a remote to update later : : $ git remote add pallets https : //github.com/pallets/flask Add the main repository as a remote to update later . $ git fetch pallets git remote add pallets https : //github.com/pallets/flask git fetch pallets,['CONTRIBUTING.rst'],update code-block typo ( # 3642 )
19,330a3e3ddba712def955e7a2ccee92a205dfb656,2020-05-23 14:12:22-07:00,"{ name : 'PyPy ' , python : pypy3 , os : ubuntu-latest , tox : pypy3 } vmImage : ubuntu-latest Python 3.7 : with : pip install -U wheel name : $ { { matrix.name } } matrix : inputs : task : UsePythonVersion @ 0 trigger : Python 3.6 : Windows : vmImage : macos-latest strategy : steps : path : ~/.cache/pre-commit id : pip-cache run : pip install tox name : cache pip { name : ' 3.7 ' , python : ' 3.7 ' , os : ubuntu-latest , tox : py37 } pip install -U setuptools on : ' * .x ' vmImage : windows-latest TOXENV : style vmImage : $ [ variables.vmImage ] key : pre-commit| $ { { matrix.python } } | $ { { hashFiles ( '.pre-commit-config.yaml ' ) } } run : echo `` : :set-output name=dir : : $ ( pip cache dir ) '' path : $ { { steps.pip-cache.outputs.dir } } displayName : Run tox { name : Mac , python : ' 3.8 ' , os : macos-latest , tox : py38 } pool : master variables : versionSpec : $ ( python.version ) { name : Linux , python : ' 3.8 ' , os : ubuntu-latest , tox : py38 } { name : Docs , python : ' 3.8 ' , os : ubuntu-latest , tox : docs } TOXENV : 'devel , lowest ' { name : Windows , python : ' 3.8 ' , os : windows-latest , tox : py38 } { name : Style , python : ' 3.8 ' , os : ubuntu-latest , tox : style } pull_request : displayName : Use Python $ ( python.version ) key : pip| $ { { runner.os } } | $ { { matrix.python } } | $ { { hashFiles ( 'setup.py ' ) } } | $ { { hashFiles ( 'requirements/ * .txt ' ) } } Style : include : name : cache pre-commit fail-fast : false { name : Version Range , python : ' 3.8 ' , os : ubuntu-latest , tox : 'devel , lowest ' } python.version : ' 3.6 ' PyPy 3 : python-version : $ { { matrix.python } } python.version : pypy3 script : tox run : tox -e $ { { matrix.tox } } name : update pip steps : push : jobs : Linux : Version Range : python -m pip install -U pip vmImage : ubuntu-latest TOXENV : docs { name : ' 3.6 ' , python : ' 3.6 ' , os : ubuntu-latest , tox : py36 } master TOXENV : py tests : name : Tests if : matrix.tox == 'style ' branches : displayName : Install tox python.version : ' 3.8 ' Docs : matrix : name : get pip cache dir strategy : run : | python.version : ' 3.7 ' script : pip -- disable-pip-version-check install -U tox ' * .x ' runs-on : $ { { matrix.os } } Mac :","['.azure-pipelines.yml', '.github/workflows/tests.yaml']",Merge pull request # 3621 from pallets/github-actions
20,51c87e6199b78cd3b4b33a5e47c7a135a772f10f,2020-05-23 14:05:38-07:00,"identify==1.4.16 # via pre-commit The `` # get-help `` channel on our Discord chat : Add the main repository as a remote to update later : : distlib==0.3.0 # via virtualenv coverage run -m pytest make html On Windows , activating is different . destructive to the commit history , so we suggest ignoring these warnings . If it panel . Celebrate 🎉 Run the basic test suite with pytest . # then open htmlcov/index.html blinker pluggy==0.13.1 # via pytest Sphinx packaging This repository contains several zero-padded file modes that may cause issues # or `` env\Scripts\activate '' on Windows ` committing as you go ` _ . include requirements/ * .txt `` dotenv '' : [ `` python-dotenv '' ] , python-dotenv chardet==3.0.4 # via requests pre-commit install -- install-hooks nodeenv==1.3.5 # via pre-commit ` Clone ` _ your GitHub fork locally : : packaging==20.4 # via -r requirements/docs.in , pallets-sphinx-themes , sphinx } , identify the issue . This also helps check that the issue is not with sphinxcontrib-log-cabinet~=1.0.1 blinker tox Include tests if your patch is supposed to solve a bug , and explain toml==0.10.1 # via pre-commit , tox is the issue you fixed ) . See ` Closing issues using keywords Describe what you expected to happen . extras_require= { `` dotenv '' : [ `` python-dotenv '' ] } , `` sphinx '' , $ pytest `` sphinxcontrib-log-cabinet '' , appdirs==1.4.4 # via virtualenv sphinxcontrib-log-cabinet==1.0.1 # via -r requirements/docs.in packaging~=20.3 virtualenv==20.0.21 # via pre-commit , tox deps = -r requirements/docs.txt $ cd flask packaging==20.4 # via -r requirements/docs.in , pallets-sphinx-themes , pytest , sphinx , tox a Git ` pre-commit ` _ hook , set up below . You may also wish to use git push -- set-upstream origin your-branch-name The IRC channel `` # pocoo `` on FreeNode is linked to Discord , but rev : v2.3.0 `` master '' branch : : # pip-compile requirements/dev.in your own code . attrs==19.3.0 # via pytest Install the pre-commit hooks . sphinxcontrib-devhelp==1.0.2 # via sphinx `` tox '' , clearly under which circumstances the bug happens . Make sure the test fails Discord is preferred . sphinx-issues==1.2.0 # via -r requirements/docs.in $ git clone https : //github.com/ { username } /flask The only solution is to set both of the above to `` false `` , clone , and pre-commit==2.4.0 # via -r requirements/dev.in setting them back to true after the cloning is finished . without your patch . ` Run the tests < contributing-testsuite_ > ` _ . ` Clone ` _ your GitHub fork locally . tox==3.15.1 # via -r requirements/dev.in . env/bin/activate fails to push and you 're using a self-hosted git service like GitLab , you can $ git config -- global user.name 'your name ' `` master '' branch . pytest identify the issue . This also helps check that the issue is not with # To update , run : You may also wish to use Black 's ` Editor integration ` _ . `` coverage '' , Pallets-Sphinx-Themes packaging==20.4 # via pytest r requirements/tests.txt requirements : docs/requirements.txt Use ` Black ` _ to autoformat your code . This should be done for you as filelock==3.0.12 # via tox , virtualenv Discord is preferred . This repository contains several zero-padded file modes that may cause git clone https : //github.com/ { username } /flask $ git config -- global user.email 'your email ' requirements : requirements/docs.txt $ cd docs Build the docs in the `` docs `` directory using Sphinx . `` site : stackoverflow.com flask { search term , exception message , etc . } `` Describe what actually happened . Include the full traceback if there $ tox was an exception . sphinx-issues pytest==5.4.2 # via -r requirements/tests.in `` fsckObjects `` enabled with either of the following in your git config . py==1.8.1 # via pytest , tox Ask on ` Stack Overflow ` _ . Search with Google first using : pip-tools==5.1.2 # via -r requirements/dev.in # pip-compile requirements/docs.in imagesize==1.2.0 # via sphinx $ git checkout -b your-branch-name origin/1.0.x Download and install the ` latest version of git ` _ . pytest # Add the main repository as a remote to update later : : $ make html git checkout -b your-branch-name origin/1.0.x test fails without your patch . sphinxcontrib-applehelp==1.0.2 # via sphinx .. code-block : : text deps = -r docs/requirements.txt * Ask on ` Stack Overflow ` _ . Search with Google first using : # This file is autogenerated by pip-compile alabaster==0.7.12 # via sphinx $ python3 -m venv env > env\Scripts\activate Include tests if your patch is supposed to solve a bug , and explain git config -- global user.name 'your name ' $ pre-commit install Pallets-Sphinx-Themes~=1.2.3 ` Run the tests < contributing-testsuite_ > ` _ . cfgv==3.1.0 # via pre-commit # pip sphinx==3.0.3 # via -r requirements/docs.in , pallets-sphinx-themes , sphinx-issues , sphinxcontrib-log-cabinet when pushing this repository to git hosts other than GitHub . Fixing this is r tests.in Make sure you have a ` GitHub account ` _ . # pip-compile requirements/tests.in report on the terminal and as an interactive HTML document : : sphinxcontrib-htmlhelp==1.0.3 # via sphinx pre-commit Describe what actually happened . Include the full traceback if there was an $ git checkout -b your-branch-name origin/master rev : v2.1.0 * The mailing list flask @ python.org for long term discussion or larger issues . Describe what you expected to happen . exception . cd flask If possible , include a ` minimal reproducible example ` _ to help us sphinxcontrib-jsmath==1.0.1 # via sphinx sphinxcontrib-log-cabinet the full suite when you submit your pull request . Make sure you have a ` GitHub account ` _ . * The `` # get-help `` channel on our Discord chat : https : //discordapp.com/invite/t6rrQZH issues . $ coverage html # then open htmlcov/index.html coverage html pip-tools click==7.1.2 # via pip-tools pluggy==0.13.1 # via pytest , tox Fixing this is destructive to the commit history , so we suggest ignoring solution is to set both of the above settings to false while cloning , and then pip install -r requirements.txt service like GitLab , you can turn off repository checks in the admin Use ` Black ` _ to autoformat your code . This should be done for you as a $ coverage report # setuptools These files can also cause issues while cloning . If you have : : sphinxcontrib-qthelp==1.0.3 # via sphinx python-dotenv $ . env/bin/activate markupsafe==1.1.1 # via jinja2 This only runs the tests for the current environment . Whether this is relevant jinja2==2.11.2 # via sphinx pallets-sphinx-themes==1.2.3 # via -r requirements/docs.in Black 's ` Editor integration ` _ . turn off repository checks in the admin panel . blinker==1.4 # via -r requirements/tests.in fsckObjects = true where to start contributing . Run `` pytest `` using `` coverage `` and generate a ( where 123 is the issue you fixed ) . Install the ` pre-commit framework ` _ . `` dev '' : [ Fork Flask to your GitHub account by clicking the ` Fork ` _ button . Include a string like `` Fixes # 123 '' in your commit message ( where 123 then set them back to `` true `` after . Include tests that cover any code changes you make . Make sure the $ git push -- set-upstream origin your-branch-name `` pallets-sphinx-themes '' , Build the docs in the `` docs `` directory using Sphinx : : Push your commits to GitHub and ` create a pull request ` _ . Fork Flask to your GitHub account by clicking the ` Fork ` _ button . Using your favorite editor , make your changes , pip install -e `` . [ dev ] '' Create a virtualenv . latest `` .x '' branch . < https : //help.github.com/articles/creating-a-pull-request/ > ` __ . greenlet==0.4.15 # via -r requirements/tests.in snowballstemmer==2.0.0 # via sphinx cd docs r docs.in Install Flask in editable mode with development dependencies . < https : //help.github.com/articles/creating-a-pull-request/ > ` __ . $ pip install -e . -r requirements/dev.txt See ` Closing issues using keywords Push your commits to GitHub and ` create a pull request ` _ by using : : without your patch . Install Flask in editable mode with development dependencies : : `` site : stackoverflow.com flask { search term , exception message , etc . } `` Install the pre-commit hooks : : .. code-block : : babel==2.8.0 # via sphinx clearly under which circumstances the bug happens . Make sure the ] , These files can also cause issues while cloning if you have tox six==1.15.0 # via packaging , pip-tools , tox , virtualenv pyyaml==5.3.1 # via pre-commit List your Python , Flask , and Werkzeug versions . If possible , check Include a string like `` Fixes # 123 '' in your commit message rev : v2.4.3 rev : 3.8.2 Run : : these warnings . If it fails to push and you 're using a self-hosted Git .. code-block : : text python-dotenv==0.13.0 # via -r requirements/tests.in rev : 3.7.9 six==1.15.0 # via packaging pygments==2.6.1 # via sphinx Download and install the ` latest version of git ` _ . $ coverage run -m pytest idna==2.9 # via requests requests==2.23.0 # via sphinx # The following packages are considered to be unsafe in a requirements file : Run the basic test suite with : : py==1.8.1 # via pytest issue is already fixed in the repository . `` pytest '' , Using your favorite editor , make your changes , ` committing as you go ` _ . relevant depends on which part of Flask you 're working on . CI will run Create a virtualenv : : coverage report generate a report on the terminal and as an interactive HTML document . greenlet wcwidth==0.1.9 # via pytest `` sphinx-issues '' , If possible , include a ` minimal reproducible example ` _ to help us git ` pre-commit ` _ hook , which gets installed when you run `` pip install -e . [ dev ] `` . latest `` .x '' branch : : git checkout -b your-branch-name origin/master sphinx-issues~=1.2.0 Include tests that cover any code changes you make . Make sure the test fails docutils==0.16 # via sphinx pyparsing==2.4.7 # via packaging * The IRC channel `` # pocoo `` on FreeNode is linked to Discord , but urllib3==1.25.9 # via requests Sphinx~=3.0.0 depends on which part of Flask you 're working on . Travis-CI will run the full extras_require= { where to start contributing . Run `` pytest `` using `` coverage `` and rev : v2.5.0 your own code . Configure git with your ` username ` _ and ` email ` _ . This only runs the tests for the current environment . Whether this is Configure git with your ` username ` _ and ` email ` _ : : https : //discord.gg/t6rrQZH issues when pushing this repository to Git hosts other than GitHub . git config -- global user.email 'your email ' more-itertools==8.3.0 # via pytest rev : v3.1.0 greenlet sphinxcontrib-serializinghtml==1.1.4 # via sphinx set in your git configuration file , cloning this repository will fail . The only python3 -m venv env pytz==2020.1 # via babel if this issue is already fixed in the repository . or : : List your Python , Flask , and Werkzeug versions . If possible , check if this certifi==2020.4.5.1 # via requests fsckobjects = true suite when you submit your pull request .","['.pre-commit-config.yaml', '.readthedocs.yaml', 'CONTRIBUTING.rst', 'MANIFEST.in', 'docs/requirements.txt', 'requirements/dev.in', 'requirements/dev.txt', 'requirements/docs.in', 'requirements/docs.txt', 'requirements/tests.in', 'requirements/tests.txt', 'setup.py', 'tox.ini']",Merge pull request # 3620 from pallets/requirements
21,5b1d47f7e45ca6304009156882fcb6e4ebe55fbc,2020-05-18 15:04:40-07:00,sphinx : version : 2 builder : dirhtml requirements : docs/requirements.txt method : pip install : python : path : .,['.readthedocs.yaml'],Merge pull request # 3616 from pallets/rtd-config
22,d091bb00c0358e9f30006a064f3dbb671b99aeae,2020-04-16 10:52:06-07:00,"app.register_error_handler ( UnacceptableCustomException , None ) ) , `` Custom exceptions must be subclasses of Exception . '' assert issubclass ( exc_class , Exception ) AssertionError , match= '' Custom exceptions must be subclasses of Exception . '' exc_class , Exception assert issubclass ( class UnacceptableCustomException ( BaseException ) : pass with pytest.raises ( ) :","['src/flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 3574 from jackwardell/adding-error-message-to-assert
23,2062d984abd3364557a6dcbd3300cfe3e4ecf156,2020-04-07 18:01:55-07:00,"# explicitly delete tb as it is circular referenced try : ) else : # Parse app_name as a single expression to determine if it 's a valid elif arguments : `` single argument to the app factory function in 2.1 . `` , args = kwargs = None args_spec = inspect.getfullargspec ( app_factory ) ) # attribute name or function call . if `` script_info '' in sig.parameters : raise NoAppException ( except SyntaxError : and len ( sig.parameters ) == 1 f '' { e } \nThe factory { app_name ! r } in module '' args = ( ) return app_factory ( * arguments ) function . This means that strings must still be in quotes . f '' The factory { app_name ! r } in module '' try : app = None # Did n't reach the function . strings must still be in quotes . def call_factory ( script_info , app_factory , arguments= ( ) ) : # Delete tb to break a circular reference . sig = inspect.signature ( app_factory ) kwargs [ `` script_info '' ] = script_info else : if not match : args = ast.literal_eval ( f '' ( { args } , ) '' ) def call_factory ( script_info , app_factory , args=None , kwargs=None ) : name , args = match.groups ( ) if tb.tb_frame.f_code is factory.__code__ : args = [ ast.literal_eval ( arg ) for arg in expr.args ] if args : f '' { app_name ! r } is not a valid variable name or function expression . '' When specifying a factory function with `` FLASK_APP `` , keyword try : # in the factory , it was called successfully # Parse the positional and keyword arguments as literals . expr = ast.parse ( app_name.strip ( ) , mode= '' eval '' ) .body return app_factory ( script_info ) Python literals and passed as arguments to the function . This means that match = re.match ( r '' ^ * ( [ ^ ( ) ] + ) * ( ? : \ ( ( . * ? ) * , ? * \ ) ) ? * $ '' , app_name ) return app_factory ( * arguments , script_info=script_info ) except ValueError : app = call_factory ( script_info , attr , args ) except TypeError : def _called_with_wrong_args ( f ) : elif not arguments and len ( args_spec.args ) == 1 and args_spec.defaults is None : `` first argument to the app factory function in 2.1 . `` , name = expr.id : return : `` True `` if the call failed . except TypeError as e : argument can be passed . : issue : ` 3553 ` # If the attribute is a function , call it with any args and kwargs not args f '' Failed to parse { app_name ! r } as an attribute name or function call . '' if isinstance ( expr , ast.Name ) : : return : true if the call failed elif isinstance ( expr , ast.Call ) : except AttributeError as e : except ( ValueError , SyntaxError ) : return app_factory ( ) and next ( iter ( sig.parameters.values ( ) ) ) .default is inspect.Parameter.empty f '' Failed to parse arguments as literal values : { app_name ! r } . '' args.append ( script_info ) # did n't reach the factory # message with the full expression instead . Python literals and passed as arguments and keyword arguments to the : param factory : the factory function that was called # In the function , it was called successfully . ) : raise NoAppException ( f '' Could not parse the arguments in { app_name ! r } . '' ) app = call_factory ( script_info , attr , args , kwargs ) kwargs = { } if kwargs is None else kwargs if `` script_info '' in args_spec.args : def _called_with_wrong_args ( factory ) : : param f : The function that was called . except AttributeError : # literal_eval gives cryptic error messages , show a generic return app_factory ( * args , * * kwargs ) # to get the real application . if not isinstance ( expr.func , ast.Name ) : raise NoAppException ( e.args [ 0 ] ) raise NoAppException ( name = expr.func.id # Ensure the function name is an attribute name only . args = [ ] if args is None else args f '' Failed to find attribute { name ! r } in { module.__name__ ! r } . '' f '' Function reference must be a simple name : { app_name ! r } . '' # no script_info if ( kwargs = { kw.arg : ast.literal_eval ( kw.value ) for kw in expr.keywords } if tb.tb_frame.f_code is f.__code__ :","['CHANGES.rst', 'docs/cli.rst', 'src/flask/cli.py', 'tests/test_cli.py']",Merge pull request # 3564 from pallets/cli-ast-parse
24,0d04b40d130a49cef0609ac95be48013528e97d9,2020-04-07 15:57:45-07:00,"If parentheses follow the factory name , their contents are parsed as info.data [ `` test '' ] = `` spam '' warnings.warn ( parentheses follow the factory name , the : class : ` ~cli.ScriptInfo ` instance ) obj = ScriptInfo ( create_app=lambda : Flask ( `` testapp '' ) ) a function to get the app instance , or return the variable directly . def create_app ( info ) : def create_app ( ) : assert isinstance ( find_best_app ( script_info , Module ) , Flask ) keyword argument . If the application factory takes only one argument and no obj = ScriptInfo ( create_app=lambda : Flask ( `` testappgroup '' ) ) Passing `` script_info `` to app factory functions is deprecated . This import warnings `` `` '' Check if the given string is a variable name or a function . Call def create_app ( info ) : arg_defaults = args_spec.defaults return Flask ( `` _ '' .join ( [ `` app3 '' , foo , script_info.data [ `` test '' ] ] ) ) assert app.name == `` appname '' if `` script_info '' in arg_names : `` first argument to the app factory function in 2.1 . `` , assert find_best_app ( script_info , Module ) .name == `` appname '' # takes script_info arguments . obj = ScriptInfo ( create_app=lambda info : Flask ( `` testapp '' ) ) function , it checks for specified arguments and whether it takes a app = find_best_app ( script_info , Module ) strings must still be in quotes . DeprecationWarning , elif not arguments and len ( args_spec.args ) == 1 and args_spec.defaults is None : def create_app3 ( foo , script_info ) : with pytest.deprecated_call ( match= '' Script info '' ) : `` `` '' Checks if the given string is a variable name or a function . If it is a their contents are parsed as Python literals and passes as arguments to the When calling an application factory , if the factory takes an argument named ( `` cliapp.factory '' , 'create_app3 ( `` foo '' ) ' , `` app3_foo_spam '' ) , if `` script_info '' in args_spec.args : `` passed to the app factory function in 2.1 . `` , app = find_best_app ( script_info , Module ) function . This means that strings must still be in quotes . `` The 'script_info ' argument is deprecated and will not be '' `` script_info `` , then the : class : ` ~cli.ScriptInfo ` instance is passed as a `` Script info is deprecated and will not be passed as the '' `` script_info `` argument and calls the function with the appropriate `` click.get_current_context ( ) .obj `` if it 's needed . : issue : ` 3552 ` elif not arguments and len ( arg_names ) == 1 and arg_defaults is None : assert isinstance ( app , Flask ) Python literals and passed as arguments to the function . This means that arg_names = args_spec.args def create_app ( ) : with pytest.deprecated_call ( match= '' script_info '' ) : is passed as a positional argument . If parentheses follow the factory name , obj = ScriptInfo ( create_app=lambda info : Flask ( `` testappgroup '' ) ) was not portable outside the `` flask `` command . Use","['CHANGES.rst', 'docs/cli.rst', 'src/flask/cli.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_cli.py']",Merge pull request # 3563 from pallets/deprecate-script-info-arg
25,e69b49bd3d2df261316c1c5dbdd53b96d93d2f56,2020-04-07 13:40:39-07:00,"must be a string or UTF-8 bytes . `` jsonify ( 1 , 2 , 3 ) `` is the same as `` jsonify ( [ 1 , 2 , 3 ] ) `` . will have that method called and then the return value is serialized : class : ` uuid.UUID ` is serialized to a string . from flask import json def default ( self , o ) : if isinstance ( fp.read ( 0 ) , bytes ) : 3 . Multiple keyword arguments : Converted to a dict before being passed to The following characters are escaped in strings : Takes the same arguments as the built-in : func : ` json.loads ` , with This does not change any behavior from the built-in deserializes to an instance of : class : ` ~markupsafe.Markup ` . '' '' '' `` jsonify ( [ 1,2,3 ] ) `` serialize to `` [ 1,2,3 ] `` . if show_warning : Flask uses `` simplejson `` for the JSON implementation . Since simplejson default : class : ` JSONDecoder ` . The latest JSON standard ( : rfc : ` 8259 ` ) suggests that only UTF-8 is `` jsonify '' , this is available in templates through the `` |tojson `` filter which will `` > `` filter . The filter marks the output with `` |safe `` so it can be used tags . It accepts the same arguments and returns a JSON string . Note that .replace ( `` ' '' , `` \\u0027 '' ) default like this : : : param kwargs : Extra arguments passed to func : ` json.load ` . library . The following extensions are by default applied to the stdlib 's return `` utf-16-le '' pass object with the : mimetype : ` application/json ` mimetype . For convenience , it rv = rv.replace ( `` \\/ '' , `` / '' ) as a filter called `` |tojson `` in Jinja2 . Note that in versions of Flask prior for more information . This decoder is not only used for the load for easier customization . By default it handles some extra data types : `` encoding `` is deprecated and will be removed in 2.1 . The data return `` utf-16 '' This is the same as the HTTP date format . username=g.user.username , _slash_escape = `` \\/ '' not in _json.dumps ( `` / '' ) `` JSONEncoder '' , `` `` '' The default JSON decoder . This one does not change the behavior from characters this is safe even if used outside of `` < script > `` tags . The returned string is safe to render in HTML documents and data = json.dumps ( value ) .encode ( encoding ) `` file must be text mode , or binary mode with UTF-8 bytes . `` , from flask import json if head [ :3 ] == codecs.BOM_UTF8 : decoder ( : attr : ` ~flask.Flask.json_decoder ` ) , or fall back to the `` Writing to a binary file , and the 'encoding ' argument , is '' happens automatically ( but it 's harmless to include `` |safe `` anyway ) . `` email '' : `` admin @ localhost '' , fp.write ( htmlsafe_dumps ( obj , * * kwargs ) ) from : func : ` dumps ` : if encoding is None : `` `` '' Serialize `` obj `` to a JSON-formatted string . If there is an `` `` '' Serialize an object to a string of JSON , replacing HTML-unsafe import warnings return `` utf-16-be '' if head.startswith ( b '' \x00 '' ) else `` utf-16-le '' debug mode or if : data : ` JSONIFY_PRETTYPRINT_REGULAR ` is `` True `` , `` utf-8-sig '' , try : `` < script > `` tags . The exception is in HTML attributes that are head = data [ :4 ] 1 . `` datetime `` objects are serialized as : rfc : ` 822 ` strings . 3 . Keyword arguments : Treated as a dict of values . if head [ 1 : :2 ] == b '' \x00\x00 '' : serialized to : rfc : ` 822 ` strings . This is the same as the HTTP does some extra configuration based on the application . If the is enabled and outside of the app context sorting is turned on . id=g.user.id ) This makes it safe to embed such strings in any place in HTML with the stacklevel=2 , `` < script > `` tags , and single-quoted attributes without further some defaults from application configuration . a security risk in ancient browsers . See : ref : ` security-json ` . import simplejson as json cls = bp.json_decoder if bp and bp.json_decoder else app.json_decoder `` jsonify ( data=data , errors=errors ) `` is the same as : attr : ` flask.Blueprint.json_encoder ` to override the default . `` 'encoding ' is deprecated and will be removed in 2.1 . `` , assert type ( rv ) is str `` `` '' Implement this method in a subclass such that it returns a `` username '' : `` admin '' , `` dumps '' , return `` utf-16-be '' Writing to a binary file , and the `` encoding `` argument , is So for starters instead of doing : : # Figure out if simplejson escapes slashes . This behavior was changed Python 's `` json `` module . It is preferred for JSON operations if it is built-in : class : ` json.JSONEncoder ` . : param app : App instance to use to configure the JSON encoder . id=g.user.id , : func : ` ~htmlsafe_dumps ` is also available as the `` |tojson `` template `` `` '' Like : func : ` dumps ` but writes into a file object . '' '' '' : return : UTF encoding name `` loads '' , or little endian . Some editors or libraries may prepend a BOM . notable exception of double quoted attributes . In that case single the output will be formatted to be easier to read . `` `` '' Like : func : ` loads ` but reads from a file object . '' '' '' return `` utf-8 '' : param data : Bytes in unknown UTF encoding . ) if head in ( codecs.BOM_UTF32_BE , codecs.BOM_UTF32_LE ) : if isinstance ( rv , str ) : return _json.JSONEncoder.default ( self , o ) `` username '' : `` admin '' , { `` < `` : `` \\u003c '' , `` > '' : `` \\u003e '' , `` & '' : `` \\u0026 '' , `` ' '' : `` \\u0027 '' } : param fp : File object to write JSON to . if head [ :2 ] in ( codecs.BOM_UTF16_BE , codecs.BOM_UTF16_LE ) : ) return JSONEncoder.default ( self , o ) if isinstance ( s , bytes ) : : class : ` uuid.UUID ` is serialized to a string . This function 's return value is now always safe for HTML usage , even @ pytest.mark.parametrize ( ) if outside of script tags or if used in XHTML . This rule does not currently means no indents and no spaces after separators . simplejson package is installed , it is preferred . if isinstance ( s , bytes ) : `` JSONIFY_PRETTYPRINT_REGULAR `` config parameter is set to True or the if encoding is not None and isinstance ( rv , str ) : content based HTTP caches and Python 's hash randomization feature . try : 4 . Passing both arguments and keyword arguments is not allowed as fp.write ( `` '' ) `` utf-16-be '' , `` encoding '' , if len ( head ) == 2 : is provided by both the standard library as well as extension , Flask will `` load '' , `` cls '' , bp.json_decoder if bp and bp.json_decoder else app.json_decoder fp = io.TextIOWrapper ( fp , encoding ) Takes the same arguments as the built-in : func : ` json.dumps ` , and `` & `` `` id '' : 42 show_warning = True with the : mimetype : ` application/json ` mimetype . .. code-block : : python quote your attributes or HTML escape it in addition . .. versionchanged : : 2.0 use the current blueprint 's or application 's JSON encoder and decoder `` `` '' Detect which UTF codec was used to encode the given bytes . For usage examples , read the : mod : ` json ` documentation in the standard and `` Markup `` objects . .replace ( `` & '' , `` \\u0026 '' ) .replace ( `` < `` , `` \\u003c '' ) cls = bp.json_encoder if bp and bp.json_encoder else app.json_encoder return dumps ( obj , * * kwargs ) .translate ( _htmlsafe_map ) there is an app context pushed , use the current app 's configured Flask uses the built-in : mod : ` json ` module for handling JSON . It will `` datetime `` objects are serialized as RFC 822 datetime strings . ) accepted . Older documents allowed 8 , 16 , or 32 . 16 and 32 can be big or defaults . warnings.warn ( 1 . Single argument : Treated as a single value . .. admonition : : Auto-Sort JSON Keys Single quotes are escaped , making this safe to use in HTML , Takes the same arguments as the built-in : func : ` json.dumps ` , with escaping . and decoders for easier customization . This function 's response will be pretty printed if the fp = io.TextIOWrapper ( fp , encoding ) life easier . It turns the JSON output into a : class : ` ~flask.Response ` For clarity , the JSON serialization behavior has the following differences of that it will delegate access to the current application 's JSON encoders `` |tojson `` output inside `` script `` tags . In Flask 0.10 and above , this : func : ` dataclasses.asdict ` . installed . `` `` '' The default JSON encoder . Handles extra types compared to the `` dump '' , kwargs.setdefault ( `` cls '' , cls ) characters with Unicode escapes . Otherwise behaves the same as The default output omits indents and spaces after separators . In `` `` '' Deserialize an object from a string of JSON . `` utf-32-be '' , serialized , they are handled before this method . fp.write ( `` '' ) if head [ :3 ] == b '' \x00\x00\x00 '' : return rv `` htmlsafe_dump '' , : class : ` dataclasses.dataclass ` is passed to : attr : ` flask.Blueprint.json_decoder ` to override the default . This will send a JSON response like this to the browser : : functions of this module but also : attr : ` ~flask.Request ` . fp = io.TextIOWrapper ( fp , encoding or `` utf-8 '' ) : func : ` htmlsafe_dumps ` and : func : ` dumps ` . def _wrap_writer_for_text ( fp , encoding ) : `` 'encoding ' is deprecated and will be removed in 2.1 . The '' py38- { devel , lowest } return super ( ) .default ( self , o ) method ) will call the `` __html__ `` method to get a string . : class : ` json.JSONDecoder ` . __all__ = [ `` utf-16 '' , `` `` '' : meth : ` json.JSONEncoder.default ` . Python does not support to : rfc : ` 822 ` strings . This is the same as the HTTP date format . Assign a subclass of this to : attr : ` flask.Flask.json_encoder ` or `` False `` to stop Flask from auto-sorting keys . By default sorting Assign a subclass of this to : attr : ` flask.Flask.json_decoder ` or `` `` '' Like : func : ` htmlsafe_dumps ` but writes into a file object . '' '' '' fp = _wrap_reader_for_text ( fp , kwargs.pop ( `` encoding '' , None ) or `` utf-8 '' ) Uses : func : ` dumps ` to serialize the data , but `` args `` and `` `` '' Deserialize an object from JSON read from a file object . def _wrap_reader_for_text ( fp , encoding ) : * : class : ` ~markupsafe.Markup ` the default simplejson decoder . Consult the : mod : ` json ` documentation return `` utf-8 '' encoder by also supporting `` datetime `` , `` UUID `` , `` dataclasses `` , overriding how basic types like `` str `` or `` list `` are ( : attr : ` ~flask.Flask.json_encoder ` ) , or fall back to the default `` deprecated and will be removed in 2.1 . `` , @ app.route ( '/_get_current_user ' ) : param app : Use this app 's config instead of the active app context `` utf-16-le '' , return `` utf-32-le '' `` encoding `` is deprecated and will be removed in 2.1 . try simplejson first and then fall back to the stdlib json module . On top app context pushed , use the current app 's configured encoder : param kwargs : Extra arguments passed to func : ` json.dump ` . : class : ` dataclasses.dataclass ` is passed to except TypeError : `` `` '' Deserialize an object from a JSON-formatted string `` s `` . If s = s.decode ( encoding ) method ) will call the `` __html__ `` method to get a string . 2 . Multiple arguments : Converted to an array before being passed to kwargs.setdefault ( also mark the result with `` |safe `` . for details . encoding = kwargs.pop ( `` encoding '' , None ) `` id '' : 42 return rv.encode ( encoding ) `` < `` In order to support more data types , override the : meth : ` default ` `` utf-32-le '' , : func : ` dumps ` . * : class : ` ~flask.Markup ` also converts multiple arguments into an array or multiple keyword arguments import json as _json DeprecationWarning , encoding = kwargs.pop ( `` encoding '' , None ) kwargs.setdefault ( `` ensure_ascii '' , False ) assert json.loads ( data ) == value else : `` `` '' return jsonify ( Takes the same arguments as the built-in : func : ` json.load ` , with `` utf-8 '' , 4 . Both args and kwargs : Behavior undefined and will throw an exception . _htmlsafe_map = str.maketrans ( a security risk in ancient browsers . See : ref : ` security-json ` This is available in templates as the `` |tojson `` filter , which will fp = _wrap_writer_for_text ( fp , encoding ) as string . iterable = iter ( o ) fp.write ( str ( htmlsafe_dumps ( obj , * * kwargs ) ) ) if encoding is not None : 2 . Any object with an `` __html__ `` method ( like : class : ` ~flask.Markup ` ) encoding = detect_encoding ( s ) : class : ` ~markupsafe.Markup ` ( or any object with a `` __html__ `` ) , if len ( head ) == 4 : Flask app is running in debug mode . Compressed ( not pretty ) formatting method . date format . inside `` script `` tags . also mark the result as safe . Due to how this function escapes certain py38- { simplejson , devel , lowest } : param app : App instance to use to configure the JSON decoder . return `` utf-8-sig '' # from one version to another without reason . override `` app.json_encoder `` and `` json_decoder `` . : issue : ` 3555 ` from itsdangerous import json as _json must be text mode , or binary mode with UTF-8 bytes . `` `` '' Serialize data to JSON and wrap it in a : class : ` ~flask.Response ` if head [ : :2 ] == b '' \x00\x00 '' : : param fp : File object to read JSON from . if head [ 1 : ] == b '' \x00\x00\x00 '' : `` `` '' Serialize anything matching the : class : ` ~markupsafe.Markup ` API by ) : param obj : Object to serialize to JSON . doSomethingWith ( { { user.username|tojson|safe } } ) ; `` `` '' The default Flask JSON encoder . This one extends the default if not _slash_escape : JSON module : from markupsafe import Markup serializable object for `` o `` , or calls the base implementation ( to For example , to support arbitrary iterators , you could implement Example usage : : The : func : ` ~htmlsafe_dumps ` function of this json module is also available hold true when using this function in HTML attributes that are double `` `` '' Works exactly like : func : ` dumps ` but is safe for use in `` < script > `` `` utf-32 '' , deserializes to an instance of : class : ` ~flask.Markup ` . '' '' '' s = s.decode ( encoding ) `` JSONDecoder '' , The `` encoding `` option to JSON functions is deprecated . : pr : ` 3562 ` `` htmlsafe_dumps '' , def test_detect_encoding ( self , value , encoding ) : 2 . Multiple arguments : Treated as a list of values . : class : ` JSONEncoder ` . encoder when not in an app context . .. _SimpleJSON : https : //simplejson.readthedocs.io/ filter . `` jsonify ( { `` data '' : data , `` errors '' : errors } ) `` . rv = rv.encode ( encoding ) show_warning = encoding is not None `` `` '' Serialize anything matching the : class : ` ~flask.Markup ` API by rv = ( if encoding is not None : : param kwargs : Extra arguments passed to : func : ` json.dumps ` . try : The configuration variable : data : ` JSON_SORT_KEYS ` can be set to email=g.user.email , Takes the same arguments as the built-in : func : ` json.loads ` , and : class : ` ~markupsafe.Markup ` ( or any object with a `` __html__ `` Notice that disabling key sorting can cause issues when using deprecated and will be removed in 2.1 . ] 1 . Single argument : Passed straight through to : func : ` dumps ` . : func : ` dumps ` . email=g.user.email , .. code-block : : javascript Uses `` current_app `` if not given , and falls back to the default `` cls '' , bp.json_encoder if bp and bp.json_encoder else app.json_encoder : func : ` dataclasses.asdict ` . ( except ImportError : renderChart ( { { axis_data|tojson } } ) ; filter . Alternatively use `` |tojson|forceescape `` . from jinja2 import Markup if b '' \x00 '' not in head : import json fp = io.TextIOWrapper ( io.BufferedReader ( fp ) , encoding ) JSON support no longer uses simplejson . To use another JSON module , Will return a JSON response like this : it 's not clear what should happen . : func : ` json.dumps ` . to Flask 0.10 , you must disable escaping with `` |safe `` if you intend to use Takes the same arguments as the built-in : func : ` json.dump ` , with `` `` '' The default JSON decoder . return list ( iterable ) HTML-unsafe characters with Unicode escapes . See `` `` '' Convert `` o `` to a JSON serializable type . See `` ' `` quoted . Always single quote attributes if you use the `` |tojson `` import codecs `` value '' , ( 1 , `` t '' , True , False , None , [ ] , [ 1 , 2 , 3 ] , { } , { `` foo '' : `` 🐍 '' } ) `` `` '' Serialize an object to a string of JSON . except TypeError : if isinstance ( fp.read ( 0 ) , bytes ) : `` `` '' This function wraps : func : ` dumps ` to add a few enhancements that make You can instead just do this : : `` `` '' Serialize an object to JSON written to a file object . `` `` '' Serialize an object to JSON written to a file object , replacing except TypeError : `` data must be a string or UTF-8 bytes . `` , raise a : exc : ` TypeError ` ) . return `` utf-32-be '' `` kwargs `` are treated as data rather than arguments to simplejson : simplejson double quoted ; either use single quotes or the `` |forceescape `` into a dict . This means that both `` jsonify ( 1,2,3 ) `` and def detect_encoding ( data ) : return `` utf-32 '' .replace ( `` > '' , `` \\u003e '' ) `` encoding `` is deprecated and will be removed in 2.1 . The file dumps ( obj , * * kwargs ) : param kwargs : Extra arguments passed to func : ` json.dumps ` . * ` SimpleJSON ` _ is a fast JSON implementation that is compatible with : class : ` datetime.datetime ` and : class : ` datetime.date ` are serialized : class : ` datetime.datetime ` and : class : ` datetime.date ` are if not app.config [ `` JSON_AS_ASCII '' ] : kwargs.setdefault ( `` ensure_ascii '' , app.config [ `` JSON_AS_ASCII '' ] ) return fp return jsonify ( username=g.user.username ,","['CHANGES.rst', 'docs/api.rst', 'docs/installation.rst', 'src/flask/json/__init__.py', 'src/flask/json/tag.py', 'tests/test_helpers.py', 'tox.ini']",Merge pull request # 3562 from pallets/remove-simplejson
26,cd8a3745047a4413387f1e8a6877fd35859e21be,2020-04-04 12:13:35-07:00,"example , copy the output of this to your config : : f.save ( '/var/www/uploads/ ' + secure_filename ( f.filename ) ) template folders which are added to a general template searchpath . class Namespace ( object ) : `` instead . '' is_context = cert and not isinstance ( cert , ( text_type , bytes ) ) `` are separated by ' { } ' . `` .format ( os.path.pathsep ) sense for your extension . For instance , the app context stack makes sense for @ app.errorhandler ( 403 ) ) : underscores are reserved for mixin classes . from ._compat import itervalues Python 3 comes bundled with the : mod : ` venv ` module to create virtual class FakePath ( object ) : Notepad++ : None `` ) ( prefer-coding-system 'utf-8 ) If you needed to install virtualenv because you are using Python 2 , use class PrefixPathMiddleware ( object ) : handler . Also you can start logging warnings and errors into the logger `` `` `` `` `` `` `` `` `` `` `` `` `` `` ` application . It should be a long random `` bytes `` or `` str `` . For implements_to_string = _identity $ PREFIX/lib/python2.X/site-packages/myapp .. _upgrading-to-new-teardown-handling : Bug in Request Locals The `` filename `` is no longer automatically inferred from file-like objects . last part of the import module . The upgrade script tries to guess * * options , coverage xml assert 'This was submitted : `` index.txt '' ' in str ( e.value ) class AuthActions ( object ) : style In general the Pocoo Styleguide closely follows : pep : ` 8 ` with some small * * extra , `` guard to silence this warning . '' rev : 3.7.7 ( `` error '' , `` Hello World '' ) , class Recorder ( object ) : displayName : Run tox rv , into the config object . How this works is outlined in : ref : ` config ` . raise KeyError ( f '' Tag ' { key } ' is already registered . '' ) Absolutely , Positively Must Know About Unicode and Character Sets for item in gen : rv = client.get ( u '' /киртест '' ) debugging harder than necessary . elif not isinstance ( value , ( str , int , float , bool ) ) : reraise ( exc_type , exc_value , tb ) on Unicode you will have to ensure that you decode properly when working src_info = f '' application { srcobj.import_name ! r } '' if error is exc_value : # __init__ module exports names # versions . script : tox -s false -- -- junitxml=test-results.xml tests examples `` be called with the specified arguments . `` .format ( # For .egg , zipimporter does not have get_filename until Python 2.7 . Version 2.0.0 class _AppCtxGlobals : class ConfigAttribute ( object ) : return ( `` / '' + basename ) .rstrip ( `` / '' ) libraries that deal with text . If you do n't know Unicode so far , you We strongly recommend that you hand review the generated patchfile and reraise ( TypeError , new_error , sys.exc_info ( ) [ 2 ] ) This means that you need to add another subfolder with the blueprint 's lambda app : open ( os.path.join ( app.static_folder , `` index.html '' ) ) , class TestUrlFor : assert eb.input_stream.read ( ) .decode ( `` utf8 '' ) == u ' '' \u20ac '' ' .. deprecated : 1.1 Due to a bug in the test client Flask 0.7 did not trigger teardown change the order . assert f '' filename= { ascii } '' in content_disposition abort ( 404 , `` Post id { 0 } does n't exist . `` .format ( id ) ) `` { rv.__class__.__name__ } . `` .format ( rv=rv ) If you are working with windows and you lack the `` patch `` command line out = StringIO ( ) request.addfinalizer ( sys.meta_path.pop ) select = B , E , F , W , B9 class TestJSON : .replace ( ' . ' , '/ ' ) + '.html ' fancy ) you can use regular string literals ( `` 'Hello World ' `` ) . .. _virtualenv : https : //virtualenv.pypa.io/ `` no longer has an effect . The logging configuration '' assert client.get ( `` /text '' ) .data == `` Hällo Wörld '' .encode ( ) f '' [ { self.request.method } ] of { self.app.name } > '' base_url = ( except ( ImportError , ValueError ) : inputs : context instead of the request context . This change should be transparent # Python 2 does n't have getbuffer from ._compat import iteritems with open ( filename , ' w ' ) as f : # This test only works on CPython 2.7 . if obj : `` `` '' .format ( lambda app : io.StringIO ( `` Test '' ) , 79 characters with a soft limit for 84 if absolutely necessary . Try return True hasTestResults : 'false ' with pytest.deprecated_call ( ) : # : meth : ` ~flask.Flask.create_jinja_environment ` method instead . `` View function mapping is overwriting an existing '' clear_request = False # Python < 3.7 methods = { item.upper ( ) for item in methods } Windows : The script scans your whole application and generates a unified diff with applications automatically , but there might be some cases where it fails def test_changelog_utf8_compatible ( ) : assert flask.g.user_agent == f '' werkzeug/ { werkzeug.__version__ } '' underline to the variable name . If the function needs to access a `` Do not use it in a production deployment . `` , displayName : Publish coverage results else by one . Do not use too many blank lines to separate logical assert f '' Python { python_version ( ) } '' in out return super ( ) .main ( * args , * * kwargs ) sys.exc_clear ( ) pool : rv = login ( client , username , f ' { password } x ' ) rev : v2.5.0 raise NoAppException ( 'Could not import `` { name } '' . '.format ( name=module_name ) ) Additionally the default of falling back to `` application/octet-stream `` has : attr : ` flask.Flask.app_ctx_globals_class ` . return ( class TraditionalFlask ( Flask ) : Blueprints need explicit names . Modules had an automatic name * * options Instance checks : def __new__ ( metacls , name , this_bases , d ) : steps : marks=pytest.mark.skipif ( PY2 , reason= '' Python 3 only '' ) , raise BadRequest ( `` Failed to decode JSON object : { 0 } '' .format ( e ) ) .replace ( `` > '' , `` \\u003e '' ) the constructor . Same with static files : if you want to continue setup ( name= ' { 0 } ' , from flask._compat import StringIO `` Tried to register a handler for an exception instance '' url = `` { 0 } { 1 } / { 2 } '' .format ( base_url , release , text ) `` This was submitted : % s '' % `` , `` .join ( ' '' % s '' ' % x for x in form_matches ) password = flaskr.app.config [ `` PASSWORD '' ] assert result.exit_code == 2 , `` Unexpected success : \n\n '' + result.output assert client.get ( `` /text '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) if isinstance ( filename_or_fp , string_types ) : def test_meta_path_loader_without_is_package ( request , modules_tmpdir ) : 'Detected multiple Flask applications in module `` { module } '' . Use ' # make error available outside except block ( py3 ) possible we tried to counter the problems arising from these changes by `` instead . '' TOXENV : 'docs ' src/flask request . For application developers there are no changes that require changes in def __bool__ ( self ) : `` Programming Language : : Python : : 2 '' , def __init__ ( self , name , version , value ) : from setuptools import setup `` 'multipart/form-data ' which means that no file contents '' class SessionInterface : not configured to do this you have to change it . Here some common ways to for reusable blocks ( macros ) that can be used from inside templates and `` test_value , expected '' , [ ( True , ' '' \\u2603 '' ' ) , ( False , u ' '' \u2603 '' ' ) ] Bad : : order of after-request handlers . Previously they were called in the order 2 . Run it in the directory of your application : : `` this variable and make it point to a configuration '' # Relevant PyPy bugfix commit : method we recommend replacing the : class : ` session_interface ` . execfile ( activate_this , dict ( __file__=activate_this ) ) versionSpec : $ ( python.version ) return False jobs : __slots__ = ( `` val '' , ) when appropriately . For more information on that , read return render_template ( f '' { js } .html '' , js=js ) : param logger : The : class : ` ~logging.Logger ` to inspect . dumps ( data , indent=indent , separators=separators ) + `` \n '' , raise NoAppException ( extensive filter system , a certain way to do template inheritance , support Please note that deprecation warnings are disabled by default starting with open ( startup , `` r '' ) as f : u '' Hello World '' , assert rv is self , f '' Popped wrong app context . ( { rv ! r } instead of { self ! r } ) '' if not PY2 : `` `` '' Creates a new instance of a missing session . Instead of overriding BROKEN_PYPY_CTXMGR_EXIT = True handlers when the test client was used in a with statement . This was PyPy 3 Linux : app.instance_path , super ( FlaskClient , self ) .__init__ ( * args , * * kwargs ) etag attaching and attach them yourself . # If this interpreter supports clearing the exception information pytest.param ( setup ( new_error = TypeError ( template_name = request.endpoint \ class ScriptInfo : or logger.handlers return f '' Hello { flask.request.args [ 'name ' ] } ! '' `` session_interface.save_session `` instead . `` were transmitted . To fix this error you should provide '' assert value == u '' föö '' if PY2 : from .. _compat import text_type when file objects were passed . This was unreliable and caused issues To apply the upgrade script do the following : f.read ( ) # come up with localhost . Hack around this by not setting with the `` |safe `` filter . vmImage : 'macos-latest ' def reraise ( tp , value , tb=None ) : ~~~~~~~~~~~~~~ the Jinja loader now , use the yield from gen assert eb.host == `` example.com '' http_host = `` { 0 } . { 1 } '' .format ( subdomain , http_host ) from ._compat import with_metaclass f '' { cls.__name__ } .is_package ( ) method is missing but is required '' `` arguments . `` .format ( factory=attr_name , module=module.__name__ ) raise AttributeError ( msg ) your Python source file . # we can not prevent users from trashing it themselves in a custom return f '' Hello , { flask.request.json [ 'name ' ] } ! '' * * /__init__.py : F401 `` dict , tuple , Response instance , or WSGI '' stacklevel=2 , for attr_name in { `` create_app '' , `` make_app '' } : lambda app : open ( os.path.join ( app.static_folder , `` index.html '' ) ) , braces : : `` In this case the root path needs to be explicitly '' `` Silently ignoring app.run ( ) because the `` return cls # and here it 's gone To continue a statement you can use backslashes in which case you should data is passed to the : meth : ` from_mapping ` method . `` Hello World '' , f '' Both share the same name { blueprint.name ! r } . '' f '' The environment variable { variable_name ! r } is not set '' On Windows , as an administrator : `` to specify arguments . '' Unicode . What does working with Unicode in Python 2.x mean ? if isinstance ( rv , tuple ) : try : python.version : ' 3.8 ' if spec.origin in { `` namespace '' , None } : from .. _compat import iteritems from io import StringIO return str ( json [ `` a '' ] + json [ `` b '' ] ) from inspect import getargspec : meth : ` unicode.encode ` method : : raise e `` Programming Language : : Python : : 3.5 '' , error = e return `` '' return meta ( name , bases , d ) ' '' { name } '' is not a valid variable name or function ' return super ( Response , self ) .max_cookie_size return EnvironBuilder ( * args , * * kwargs ) `` `` '' Create a : class : ` flask.testing.EnvironBuilder ` . python.version : pypy3 complex internal handling to support arbitrary exception classes and return `` Hello % s ! '' % flask.request.args [ `` name '' ] f '' App : { app.import_name } [ { app.env } ] \n '' if request.base_url + `` / '' == exc.new_url.split ( `` ? `` ) [ 0 ] : ` path ` `` '/π/page.html ' `` .. versionadded : : 0.11 if isinstance ( exc_class_or_code , int ) : class _Mgr ( object ) : return f '' < { type ( self ) .__name__ } { dict.__repr__ ( self ) } > '' def write_file ( filename , contents , charset='utf-8 ' ) : return send_file ( my_file_object ) return ( class X ( object ) : # noqa : B903 , for Python2 compatibility outside of requests . f '' ' { rv } .localdomain ' , and use that instead . '' strategy : except AttributeError : rv = login ( client , username , password ) `` { rv.__class__.__name__ } . `` .format ( e=e , rv=rv ) `` Response instance , or WSGI callable , but it was a '' endpoint = blueprint_name + endpoint ` base_url ` `` u'http : //www.example.com/myapplication/π/page.html ' `` `` flask.testing.EnvironBuilder `` directly instead . args : [ `` -- py36-plus '' ] runtime . sessions that were issued before the upgrade are invalidated and you can Version 0.4 default : exc : ` ValueError ` bubble up . This has the advantage that you no `` `` '' Creates or opens a new session . Default implementation stores all # : the sha1 hash of the password + inline salt if isinstance ( obj , ssl.SSLContext ) : Rules for comments are similar to docstrings . Both are formatted with def save_session ( self , session , response ) : f '' request is { request.mimetype ! r } instead of '' Blueprint Support 'to come in this line ' , 'like this ' abort ( 404 , `` Post id { 0 } does n't exist . `` .format ( id ) ) flask.flash ( flask.Markup ( `` < em > Testing < /em > '' ) , `` warning '' ) Continuing long statements : from __future__ import absolute_import `` A name collision occurred between blueprints % r and % r . Both '' # This requires a bit of explanation : the basic idea is to make a ( `` warning '' , flask.Markup ( u '' < em > Testing < /em > '' ) ) , `` run from the flask command line executable . Consider '' misleading `` name `` attribute . Silently swallowing errors in such cases was not # dummy metaclass for one level of class instantiation that replaces except ( ValueError , SyntaxError ) as e : Please keep in mind that proper copyrights and license files are a `` Add an entry to your hosts file , for example '' app.error_handlers [ 403 ] = handle_error return self.session_interface.open_session ( self , request ) `` and as such configuration could not be loaded . Set '' assert len ( rec.list ) == 3 Another change that breaks backwards compatibility is that context 0.11 is an odd release in the Flask release cycle because it was supposed the request context stack will make extensions more readily handle use cases 'admin ' name= '' { name } '' , `` python '' : platform.python_version ( ) , It 's not consistently skipped if exceptions happen whereas previously it fp = _wrap_reader_for_text ( fp , kwargs.pop ( `` encoding '' , None ) or `` utf-8 '' ) assert `` filename * =UTF-8 '' '' + utf8 in content_disposition against singletons with `` is `` and `` is not `` ( eg : `` foo is not `` Programming Language : : Python : : 3 '' , return render_template ( `` { 0 } .html '' .format ( js ) , js=js ) ( master_doc , `` Flask- { } .tex '' .format ( version ) , html_title , author , `` manual '' ) `` a '. ' . Add an entry to your hosts file , for example '' directory = os.fspath ( directory ) 'provide enctype= '' multipart/form-data '' in your form . ' Markup ( u ' < strong > Hello & lt ; blink & gt ; hacker & lt ; /blink & gt ; ! < /strong > ' ) self.__class__.__name__ , `` could not call it without arguments . Use `` from ._compat import implements_to_string `` `` `` `` `` `` `` `` `` `` ` Run : : ( `` Vögel.txt '' , `` Vogel.txt '' , `` V % C3 % B6gel.txt '' ) , ( `` те : /ст '' , ' '' : / '' ' , `` % D1 % 82 % D0 % B5 % 3A % 2F % D1 % 81 % D1 % 82 '' ) , [ < User u'admin ' > ] yield `` % s : '' % key assert `` 'localhost ' is not a valid cookie domain '' in str ( w.message ) return str ( flask.session.permanent ) % loader.__class__.__name__ ) sys.version , sys.platform , # just a normal module rv = client.open ( `` /more '' , method= '' OPTIONS '' ) `` .xml `` and `` .xhtml `` . If you have templates with different way . We also provide a migration utility called ` flask-ext-migrate `` Could not parse the arguments in `` `` looked up from an endpoint that belongs to the blueprint 'frontend ' '' Configuring Editors 2 . Select the `` New Document/Default Directory '' tab view = LazyView ( f '' yourapplication . { import_name } '' ) `` response . The return type must be a string , '' in Flask 0.11 . Previously it was possible to use etags and mimetypes return str ( o.__html__ ( ) ) assert client.get ( `` /bytes '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) Python 3.6 : return os.path.join ( prefix , `` var '' , f '' { self.name } -instance '' ) But that 's about where similarities end . Jinja2 for example has an `` redirect was issued automatically by the routing system '' If you 're using Python 2 , see : ref : ` install-install-virtualenv ` first . class Wrapper ( object ) : script : tox -e nightly only store a limited amount of types in the session . The new sessions are : ref : ` upgrading-to-010 ` for more information . assert ' '' localhost '' is not a valid cookie domain ' in str ( w.message ) : param root_path : Flask by default will automatically calculate the path makes it now a lot easier to write unit tests as you can prevent closing limit yourself to UTF-8 for text files as well . from cStringIO import StringIO if hasattr ( g , 'db ' ) : return obj ) @ app.after_request f '' to specify the correct one . '' super ( ) .__init__ ( initial , on_update ) Configuration Support segments in code . Example : : JSON returned from `` jsonify `` will contain Unicode characters . This `` Programming Language : : Python : : 2.7 '' , echo `` # # vso [ task.prependPath ] $ HOME/.local/bin '' f '' { rv ! r } is not a valid cookie domain , it must contain '' assert rv is self , `` Popped wrong request context . ( % r instead of % r ) '' % ( def __init__ ( self , name ) : ) , f '' Popped wrong request context . ( { rv ! r } instead of { self ! r } ) '' deps = -r docs/requirements.txt TOXENV : 'devel , lowest , coverage-ci ' reStructuredText . If a comment is used to document an attribute , put a value = my_list [ index ] matches = [ v for v in itervalues ( module.__dict__ ) if isinstance ( v , Flask ) ] `` The template was looked up from an endpoint that `` that it spans three lines . In this case the closing triple quote f '' < { type ( self ) .__name__ } { self.request.url ! r } '' value = value.decode ( encoding ) before , please consider changing to : data : ` ~flask._app_ctx_stack ` if it makes class NS ( object ) : `` ignore etags in headers '' , filesystem and embed it into a Jinja2 template you will have to decode it Comments from inspect import getfullargspec as getargspec $ sudo python2 -m pip install virtualenv For Python 3 add the following lines to the top of your `` .wsgi `` file : : Vim : put `` set enc=utf-8 `` to your `` .vimrc `` file . applications . Instead the new `` LOGGER_HANDLER_POLICY `` configuration can that name but it might fail as this information could change at if method == 'md5 ' : class TestNoImports : package.module py { 38,37,36 , py3 } and loader.__class__.__name__ == `` NamespaceLoader '' self.log_exception ( exc_info ) `` file '' flask.flash ( `` Hello World '' ) class TestSendfile ( object ) : You no longer have to do that , instead you can just load a configuration its properties against the defaults . of it . return self.name.upper ( ) + ' ! ! ! ! 111 ' class locked_cached_property : We recommend using the latest version of Python . Flask supports Python name if not isinstance ( attachment_filename , text_type ) : combinations of Python and dependencies . If you do n't have a Python class _PackageBoundObject : Flask . import pytest Markup ( ' < strong > Hello & lt ; blink & gt ; hacker & lt ; /blink & gt ; ! < /strong > ' ) g.db.close ( ) `` Detected multiple Flask applications in module '' yield `` - % s '' % item # still the same one we can reraise it with the original traceback , return flask.jsonify ( foo=text_type ( flask.request.get_json ( ) ) ) use : meth : ` get_data ( as_text=True ) < werkzeug.wrappers.BaseResponse.get_data > ` If you continue to use the `` Module `` object which is deprecated , Flask will 3.6 and newer . return f '' { amount : .2f } { currency } '' update the code from the master branch : warnings.warn ( # ValueError : r docs/requirements.txt return os.path.dirname ( next ( iter ( spec.submodule_search_locations ) ) ) * * kwargs , reraise ( * exc_info ) with assert_no_leak ( ) : repo : https : //github.com/asottile/pyupgrade In order to not break people 's sessions it is possible to continue using : meth : ` ~flask.Flask.register_error_handler ` , respectively . headers ) `` where at least one item has to be provided . If you depend on assert meth is not None , f '' Unimplemented method { request.method ! r } '' # ISC = implicit-str-concat f '' endpoint function : { endpoint } '' install ` virtualenv ` _ . `` expected at most 1 positional argument , got % d '' % len ( mapping ) .. _Flask-OldSessions : https : //pythonhosted.org/Flask-OldSessions/ Blueprints do not automatically provide static folders . They will We recommend using the latest version of Python 3 . Flask supports Python 3.5 of the registration , now they are called in reverse order . This change string_types = ( str , unicode ) version= '' 1.0 '' , up for the user . If you were catching this down explicitly in the past limit the impact an attacker can do if the secret key leaks . : ref : ` application-errors ` . python_requires= '' > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * , ! =3.4 . * '' , g.db.close ( ) # ImportError : the machinery told us it does not exist response = send_file ( open ( '/path/to/file.txt ' ) ) deprecated . In general we no longer recommend custom error handler src/flask/_compat.py : E731 , B301 , F401 : attr : ` Flask.error_handlers ` it 's discouraged to do so and in fact raise value.with_traceback ( tb ) class RequestContext ( object ) : return dict ( ( k , self.serializer.tag ( v ) ) for k , v in iteritems ( value ) ) `` warning . '' filename_or_fp = fspath ( filename_or_fp ) Additionally the : func : ` ~flask.send_file ` function is now issuing from ._compat import string_types response = send_file ( fname ) # wants the traceback preserved in handle_http_exception . Of course .. code-block : : bat `` HTTP_USER_AGENT '' : f '' werkzeug/ { werkzeug.__version__ } '' , # https : //www.python.org/dev/peps/pep-0519/ # backwards-compatibility 'Use `` FLASK_APP= { module } : name to specify one . '.format ( module=module.__name__ ) Old code : : Negated containment checks : : ref : ` upgrading-to-new-teardown-handling ` this method we recommend replacing the : class : ` session_interface ` . def after_request ( response ) : If you break in a statement with parentheses or braces , align to the with pytest.raises ( click.BadParameter ) : existing template not expecting them . obj = ScriptInfo ( app_import_path=cli_app_path + `` : testapp '' ) `` since we ca n't make browsers or HTTP clients redirect `` `` `` `` `` `` `` `` `` `` ` if sys.exc_info ( ) [ 2 ] .tb_next : from the encoding of that file . Here the old problem that text files do return text_type ( flask.session.permanent ) not specify their encoding comes into play . So do yourself a favour and 3.5 , 3.6 , 3.7 and PyPy 2.7 installed to run all of the environments . Then run : : def fspath ( path ) : `` Handlers can only be registered for exception classes or '' Docstrings generated by the tool . Check the manual of your version control system `` bytes `` error ( `` warning '' , flask.Markup ( `` < em > Testing < /em > '' ) ) , Error handling src_info = 'blueprint `` % s '' ( % s ) ' % ( srcobj.name , srcobj.import_name ) socket.inet_aton ( value ) flake8-bugbear f '' While importing { module_name ! r } , an ImportError was '' `` `` '' Saves the session if it needs updates . For the default passenv = LANG app.register_error_handler ( 403 , handle_error ) class TaggedJSONSerializer ( object ) : f '' { self.blueprint.name } . { endpoint } '' , .replace ( u '' & '' , u '' \\u0026 '' ) So what does this mean to you ? script : pip -- disable-pip-version-check install -U tox fp.write ( text_type ( htmlsafe_dumps ( obj , * * kwargs ) ) ) class DispatchingApp ( object ) : Flask itself is changing like any software is changing over time . Most of for old_name in ( `` flask.app '' , `` flask '' ) : # - * we * raised ` ValueError ` due to ` spec ` being ` None ` from ._compat import collections_abc skip_install = true Module header : changes in your code or there are changes that make it possible for you to If you run your application in production and want to profit from return a tuple it no longer defines the arguments for the response object Jinja is configured to decode the template files from UTF-8 . So make assert flask.session.get ( `` data '' ) == `` foo '' Blueprints replace the previous concept of “ Modules ” in Flask . They filename = fspath ( filename ) codeCoverageTool : Cobertura for _x in range ( 10 ) : deps = coverage restore the previous behavior as good as possible . However we strongly lambda app : StringIO ( `` Test '' ) , with app.test_client ( ) as client : self.request.url , class TestSafeJoin ( object ) : To go from Unicode into a specific charset such as UTF-8 you can use the class AppContext : return obj `` Allowed methods have to be iterables of strings , `` Maximum line length : return { f '' { key } __ '' : self.serializer.tag ( value [ key ] ) } rv is self job : Tests def make_response ( self , rv ) : additional_dependencies : [ flake8-bugbear ] ... try : # We can not use app.test_client ( ) for the Unicode-rich Host header , self.log_exception ( ( exc_type , exc_value , tb ) ) manually defined . Python 3.5 Linux : This is an opt-in feature because it requires some rethinking in the code . Unicode text , use : meth : ` get_data ( as_text=True ) < werkzeug.wrappers.BaseResponse.get_data > ` class _FakeSignal ( object ) : Markup ( u ' & lt ; blink & gt ; hacker & lt ; /blink & gt ; ' ) if hasattr ( sys , `` exc_clear '' ) : $ sudo yum install python-virtualenv and newer , Python 2.7 , and PyPy . `` looked up from an endpoint that belongs to `` 'the blueprint `` frontend '' ' `` Use 'from_file ( filename , load=json.load ) ' instead . `` , e=e , app_name=app_name , module=module.__name__ > \Python27\python.exe -m pip install virtualenv `` Programming Language : : Python : : Implementation : : PyPy '' , additional_dependencies : vmImage : macos-latest .replace ( u '' < `` , u '' \\u003c '' ) zip_safe=True ) providing a script that can ease the transition . attaching via assignments to the underlying dictionary due to the more universal = true : param filename : The path to the JSON file . This can be an The module header consists of a utf-8 encoding declaration ( if non # exception happened until the next bytecode instruction ? app.config.from_pyfile ( __file__.rsplit ( `` . `` , 1 ) [ 0 ] + `` .py '' ) # Older versions of Werkzeug.test.Client do n't have an options method name , version def find_module ( self , name , path=None ) : vmImage : 'windows-latest ' from ._compat import PY2 ` full_path ` `` u'/π/page.html ? x=y ' `` class View ( object ) : Templating inheritance by taking the availability of XPath into account and more . flash ( u'Invalid password provided ' , 'error ' ) message = ' * Serving Flask app `` { 0 } '' '.format ( app_import_path ) requirement for approved Flask extensions . class Foo : # noqa : B903 , for Python2 compatibility Flask 0.6 comes with a backwards incompatible change which affects the msg = `` Mocking a loader which does not have ` % s. ` `` % name lambda app : PyBytesIO ( b '' Test '' ) , f '' { module.__name__ ! r } could not be called with the '' extensions which connect to databases . Using the app context stack instead of task : PublishTestResults @ 2 from flask import json_available `` and as such configuration could not be `` processors will no longer override values passed directly to the template This should only be set manually when it ca n't be detected return send_file ( my_file_object , add_etags=False ) assert json_available == True # noqa E712 the session system into a new module called : mod : ` flask.sessions ` . If you $ PREFIX/lib/pythonX.Y/site-packages/myapp Version 0.10 class AppContext ( object ) : f '' { e } \nThe view function did not return a valid '' # Certain versions of pypy have a bug where clearing the exception stack return 'Hello % s ! ' % name to name the template : file : ` templates/admin/index.html ` . The tool will to the release we decided to push out a 0.11 release first with some elif spec.submodule_search_locations : must happen at the end of request we introduced the new Emacs : either use an encoding cookie or put this into your `` .emacs `` except ImportError : The precedence of handlers used to be based on the decoration/call order of Living on the edge f '' { module.__name__ ! r } . Use 'FLASK_APP= { module.__name__ } : name ' '' .. deprecated : 1.0 egg_path , = modules_tmpdir.join ( `` dist/ '' ) .listdir ( ) return os.path.dirname ( spec.origin ) ' enctype= '' multipart/form-data '' in your form . ' Use : meth : ` from_file ` with : meth : ` json.load ` instead . f '' { module.__name__ ! r } . Use 'FLASK_APP= { module.__name__ } : name ' '' with open ( `` README.rst '' , encoding= '' utf8 '' ) as f : Anyways . To load such a file with Unicode you can use the built-in # regarding a pypy bug as to why . return `` < flask.g of % r > '' % top.app.name autoescaping no longer happens for all templates . Instead it is args_spec = inspect.getfullargspec ( app_factory ) your code . In case you are developing on a Flask extension however , and Will be removed in 2.0 . Use if you are using non-Unicode characters in your Python files you have .. versionadded : : 0.7 return super ( ) .__getitem__ ( key ) Will be removed in 2.0 . Construct out = io.StringIO ( ) # - the module name is __main__ base_to_url = super ( ) .to_url The old form still works , but Flask will issue a if isinstance ( filename_or_fp , str ) : class TestJSON ( object ) : deprecation warnings if you depend on functionality that will be removed class ConfigAttribute : `` loaded . Set this variable and make it `` def implements_to_string ( cls ) : from os import fspath f '' Python { sys.version } on { sys.platform } \n '' resp = client.get ( '/ ' ) guessing scheme where the shortname for the module was taken from the logger.level ! = logging.NOTSET On the upside this change greatly improves the internal code flow and The following changes may be relevant to your application : strategy : Version Range : yield f '' { key } : { value ! r } '' if name in { `` archive '' , `` get_filename '' } : rv = f '' . { rv } '' # Set the MIME-type and ETag explicitly internally spread a lot of deprecation warnings all over the place to make yield `` class : % s. % s '' % ( type ( loader ) .__module__ , type ( loader ) .__name__ ) return flask.jsonify ( foo=str ( flask.request.get_json ( ) ) ) class TestHelpers : Python 3.7 : ) vmImage : 'ubuntu-latest ' raise value info.append ( `` % s '' % line ) base_to_url = super ( ListConverter , self ) .to_url 'master ' : command : ` flask -- app ` is removed now . app.env , applications . The update script provided should be able to upgrade your `` \n\n { tb } '' .format ( name=module_name , tb=traceback.format_exc ( ) ) assert eb.url_scheme == `` https '' ` base_url ` `` 'http : //www.example.com/myapplication/π/page.html ' `` assert json.detect_encoding ( data ) == encoding rv [ `` result '' ] = f '' running on { hostname } : { port } ... '' some special characters of Latin letters without umlauts or anything def test_json_available ( ) : class methods : `` cls `` as first parameter rv = client.options ( `` / '' ) The biggest change going from 0.9 to 0.10 is that the cookie serialization break except AssertionError : not detect this so you will have to do that on your own . return f '' / { basename } '' .rstrip ( `` / '' ) text_type = str Version 0.11 # We intentionally use a bare except here . See the comment above versionSpec : $ ( python.version ) If you have database connection code that looks like this : : assert rv.data == u '' 정상처리 '' .encode ( `` utf-8 '' ) exp = - 1.05 # we do that now . This will only go into effect on Python 2.x , class CustomRequestGlobals : configured to only happen on files ending with `` .html `` , `` .htm `` , ' '' { app_name } '' . '.format ( e=e , app_name=app_name ) error = 'User { } is already registered . '.format ( username ) If you have Python 2 ( > =2.7.9 ) or Python 3 ( > =3.4 ) installed from python.org , shadowed builtin , rebind the builtin to a different name instead . `` `` '' Create a base class with a metaclass . '' '' '' old_logger = logging.getLogger ( old_name ) Python 3.8 Mac : might have been called twice to ensure it is executed at the end of the `` without one . '' else : import warnings and setting of the appropriate headers for you . # According to ronan on # pypy IRC , it is released in PyPy2 2.3 and later hooks : version= ' 1.0 ' , return u '' Hällo Wörld '' .encode ( `` utf-8 '' ) f '' The view function for { request.endpoint ! r } did not '' import collections.abc as collections_abc `` PEP 302 import hooks . If you do not use import hooks and `` # Backwards compatibility as proposed in PEP 0519 : handling : : super ( SecureCookieSession , self ) .__init__ ( initial , on_update ) ' '' make_test_environ_builder ( ) '' is deprecated and will be ' f '' callable , but it was a { type ( rv ) .__name__ } . '' args : [ `` -- application-directories '' , `` src '' ] app.import_name , def make_test_environ_builder ( * args , * * kwargs ) : `` test_value , expected '' , [ ( True , ' '' \\u2603 '' ' ) , ( False , ' '' \u2603 '' ' ) ] that extension has a unittest-mode you might want to link the activation args : [ `` -- application-directories '' , `` . : src '' ] except IOError as e : try : `` HTTPException with that code instead . `` .format ( code_or_exception ) class NS : Python 3.7 Linux : import importlib.util yield ' , '.join ( row ) + '\n ' return `` < % s % s > '' % ( self.__class__.__name__ , dict.__repr__ ( self ) ) .tox/ * /site-packages/flask iteritems = lambda d : iter ( d.items ( ) ) pass # handled below ~~~~~~~~~~~~~ if not PY2 : # raise it with the whole traceback in case we can do that class FakePath : `` The environment variable % r is not set `` standard docstring : : $ pip install -U https : //github.com/pallets/flask/archive/master.tar.gz assert type ( rv ) is str @ pytest.mark.skipif ( not PY2 , reason= '' This only works under Python 2 . '' ) def test_warn_old_config ( app , request ) : Flask now configures a logger for you with some basic and useful defaults . .that_returns_an_object_with_an_attribute .mkdir ( `` python { x [ 0 ] } . { x [ 1 ] } '' .format ( x=sys.version_info ) ) since fixed but might require some changes in your test suites if you % ( request.url , exc.new_url ) def from_json ( self , filename , silent=False ) : import collections as collections_abc `` data `` . Bytes must be compared to bytes . If you want to compare text , return `` < % d > '' % o.val # pytest-cov does n't seem to play nice with -p coverage run -p -m pytest -- tb=short -Werror -- junitxml=test-results.xml tests inputs : Unicode in Flask changes it assumes are safe to apply . However as this is an automated class SessionInterface ( object ) : ` url ` `` 'http : //www.example.com/myapplication/π/page.html ? x=y ' `` # Set ` attachment_filename ` for MIME-type guessing format changed from pickle to a specialized JSON format . This change has ' 2.0 . Use `` session_interface.open_session '' instead . ' colon after the opening pound sign ( `` # `` ) : : `` flask '' : __version__ , f '' A request was sent to this URL ( { request.url } ) but a '' from flask.testing import make_test_environ_builder class metaclass ( type ) : sys.exc_clear ( ) assert rv is self , `` Popped wrong app context . ( % r instead of % r ) '' % ( rv , self ) message = f '' * Serving Flask app { app_import_path ! r } '' return text_type ( o.__html__ ( ) ) TOXENV : 'py , coverage-ci ' use `` foo not in bar `` instead of `` not foo in bar `` pass # handled below `` `` `` `` `` `` `` `` ` except NameError : # Python 3 lambda app : PyStringIO ( b '' Test '' ) , # Python 3 ( PyPy3 ) does n't have exc_clear def test_make_test_environ_builder ( app ) : Your shell prompt will change to show the name of the activated environment . app.secret_key = SECRET_KEY changes removed to make the transition easier . If you have been tracking [ < User 'admin ' > ] app.config.from_pyfile ( f '' { __file__.rsplit ( ' . ' , 1 ) [ 0 ] } .py '' ) assert messages [ 1 ] == flask.Markup ( u '' < em > Testing < /em > '' ) f '' Exception on { request.path } [ { request.method } ] '' , exc_info=exc_info `` `` '' Handle : class : ` ~werkzeug.routing.BuildError ` on `` A request was sent to this URL ( % s ) but a redirect was `` return f '' index for { user } '' # - * - coding : { 0 } - * f '' Flask { __version__ } \n '' # namespace package matches = [ v for v in module.__dict__.values ( ) if isinstance ( v , Flask ) ] response = send_file ( open ( fname ) , mimetype='text/plain ' ) Variable names : `` lowercase_with_underscores `` raise KeyError ( `` Tag ' { 0 } ' is already registered . `` .format ( key ) ) `` Response instance , or WSGI callable , but it was a '' iterkeys = lambda d : iter ( d.keys ( ) ) coverage html DeprecationWarning ( error = e class Base ( object ) : abort ( 404 , f '' Post id { id } does n't exist . '' ) from collections.abc import MutableMapping def make_null_session ( self ) : the following command instead : Mako on the other hand treats templates similar to Python modules . : meth : ` ~flask.Flask.select_jinja_autoescape ` method . def after_request ( exception ) : ` url_root ` `` 'http : //www.example.com/myapplication/ ' `` Alternatively you should just attach the function with a decorator : : `` Programming Language : : Python : : 3.6 '' , assert `` Flask `` + flask_version in out automatically , such as for namespace packages . character sets and which ones are used , are transmitted in an HTTP header . def DATABASE_URI ( self ) : # Note : all caps to avoid too nested code by cleverly placing ` break ` , ` continue ` and assert rv [ `` result '' ] == `` running on % s : % s ... '' % ( hostname , port ) application . It should be a long random string of bytes , although unicode f '' { self.static_url_path } / < path : filename > '' , except socket.error : To not make this too complex Flask just assumes that if you are sending < User 'admin ' > * * extra from .. _compat import PY2 rev : v2.2.3 Function and method arguments : string_types = ( str , ) 3. Review the generated patchfile . return super ( ) .max_cookie_size elif spec.submodule_search_locations : .. _upgrading-to-012 : : param response : an instance of : attr : ` response_class ` with Python 2.7 . In order to see the deprecation warnings that might be warnings.warn ( self.message , DeprecationWarning , stacklevel=2 ) functionality might come back in future releases if there is demand `` { e } \nThe view function did not return a valid '' extensive filter system , a certain way to do template inheritance , quoted = url_quote ( attachment_filename , safe= '' '' ) 'You tried to access the file `` % s '' in the request.files ' environ [ `` HTTP_HOST '' ] = `` ąśźäüжŠßя.com '' `` The URL was defined with a trailing slash so Flask '' `` Make sure to directly send your % s-request to this URL `` return text_type ( bar ) displayName : Install tox if _has_config ( old_logger ) and not _has_config ( logger ) : return `` wrapped `` + type ( original ) .__name__ f '' { blueprint ! r } and { self.blueprints [ blueprint.name ] ! r } . '' return 'Hash was : % s ' % checksum 3 . URL building handles escaping of special characters transparently . value = my_dict [ 'key ' ] is a Python 3 namespace package ) and needs to be ( u '' Vögel.txt '' , `` Vogel.txt '' , `` V % C3 % B6gel.txt '' ) , def __eq__ ( self , other ) : def __exit__ ( self , * args ) : Style : TOXENV : 'style ' `` browsers or HTTP clients redirect with form data reliably '' : meth : ` ~flask.Flask.errorhandler ` and elif ( flask.flash ( flask.Markup ( u '' < em > Testing < /em > '' ) , `` warning '' ) ================ def hello ( name ) : .. _get-pip.py : https : //bootstrap.pypa.io/get-pip.py `` or without user interaction . '' for attr_name in ( `` create_app '' , `` make_app '' ) : Comparisons : info.append ( `` % 5d : trying loader of % s '' % ( idx + 1 , src_info ) ) return self.response_class ( * rv ) Manual Error Handler Attaching # exception blocks is necessary because pypy seems to forget to check if an 4 real spaces . No tabs , no exceptions . applications with Flask . Because we want to make upgrading as easy as it with the current request object . This makes it easier to extend 1 . Go to * Settings - > Preferences ... * class MethodView ( with_metaclass ( MethodViewType , View ) ) : return super ( FlaskCliRunner , self ) .invoke ( cli , args , * * kwargs ) default . categories for flashing messages . All these are features that are 100 % raise TypeError ( assert f '' Werkzeug { werkzeug_version } '' in out < https : //www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/ > ` _ . ( like `` u'Hänsel und Gretel ' `` ) @ app.route ( u '' /киртест '' ) Unicode out you want it to be UTF-8 encoded . Flask will do the encoding `` `` '' This is a simple docstring '' '' '' we recommend replacing the : class : ` session_interface ` . ' in 2.0 . Use `` session_interface.make_null_session '' ' raise AssertionError ( ) if 'md5 ' == method : ` script_root ` `` '/myapplication ' `` u'Marked up \xbb HTML ' def read_file ( filename , charset='utf-8 ' ) : `` `` '' info.append ( f '' - > { detail } '' ) vmImage : ubuntu-latest assert flask.g.user_agent == `` werkzeug/ '' + werkzeug.__version__ Python 2.7 Windows : Serialize objects to ASCII-encoded JSON . If this is disabled , the JSON 4 . Apply the patch : : $ sudo python2 Downloads/get-pip.py Python 3.6 Linux : against arbitrary types : `` == `` and `` ! = `` @ pytest.mark.xfail ( reason= '' TODO : weird interaction with tox '' ) ] `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` used the previously undocumented session support we urge you to upgrade . change also made after-request work differently under error conditions . template_name = f '' ' { request.endpoint.replace ( ' . ' , '/ ' ) } .html ' '' f.write ( contents.encode ( charset ) ) html_title = `` Flask Documentation ( { } ) '' .format ( version ) except ( ValueError , SyntaxError ) : if not hasattr ( client , `` redirect_client '' ) : banner = ( anything in your code to profit from a new release . The Pocoo styleguide is the styleguide for all Pocoo Projects , including `` foo `` on the application . Now it means “ relative to current module ” . there was a naming collision between `` flask.session `` the module that $ sudo apt-get install python-virtualenv raise AttributeError ( f '' Mocking a loader which does not have { name ! r } . '' ) : attr : ` secret_key ` is set . Instead of overriding this method rv = client.open ( `` / '' , method= '' OPTIONS '' ) return f '' direct { type ( e ) .__name__ } '' # However it works when actually passed to the server . # - the module name is __main__ that might expect `` flask.json.dumps `` to return bytes by default . TOXENV : docs python.version : ' 3.6 ' return `` Hällo Wörld '' .encode ( ) return super ( ) .get ( key , default ) def with_metaclass ( meta , * bases ) : return str ( bar ) > \Python27\Scripts\virtualenv.exe venv * * options , filename.encode ( `` utf-8 '' ) `` Programming Language : : Python : : 3.8 '' , DeprecationWarning , else : if hasattr ( sys , `` pypy_version_info '' ) : # Debian , Ubuntu return f '' wrapped { type ( original ) .__name__ } '' ` full_path ` `` '/π/page.html ? x=y ' `` # - * - coding : utf-8 - * : exc : ` ~werkzeug.exceptions.BadRequest ` exception instead of letting the assert `` Werkzeug `` + werkzeug_version in out `` but configuration was found for ' { old_name } ' , which '' self , `` Programming Language : : Python : : Implementation : : CPython '' , is accepted too . For example , copy the output of this to your config : : rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , flaskr.app.config [ 'PASSWORD ' ] + ' x ' ) do `` foo == False `` , do `` not foo `` instead ) old_logger = logging.getLogger ( `` flask.app '' ) if exc_info [ 1 ] is e : `` not provide file name information or because `` script : tox to the root of the application . In certain situations fsize = file.getbuffer ( ) .nbytes ( `` message '' , `` Hello World '' ) , .. _upgrading-to-011 : f '' names . '' if encoding is not None and isinstance ( rv , str ) : combinations of Python and dependencies . You need to have Python 2.7 , 3.4 , `` % s. % s '' % ( self.blueprint.name , endpoint ) , return f '' < { type ( self ) .__name__ } { self.name ! r } > '' object ) summaryFileLocation : coverage.xml try : if sys.exc_info ( ) [ -1 ] .tb_next : integer_types = ( int , long ) automatically was : file : ` admin/index.html ` for a template file called Trying to register a handler on an instance now raises : exc : ` ValueError ` . py { 38,37,36,35,27 , py3 , py } f '' raised : \n\n { traceback.format_exc ( ) } '' rv += `` # '' + url_quote ( anchor ) assert list ( messages ) == [ ( `` message '' , u '' Hello World '' ) ] ' { e } \nThe factory `` { app_name } '' in module `` { module } '' could not ' click.echo ( `` * Environment : { 0 } '' .format ( env ) ) return u ' { 0 : .2f } { 1 } '.format ( amount , currency ) `` The template was looked up from an endpoint that belongs '' return f '' Hash was : { checksum } '' Never compare constant with variable , always variable with constant : cls.__str__ = lambda x : x.__unicode__ ( ) .encode ( `` utf-8 '' ) Sphinx . Depending on the number of lines in the docstring , they are # itself with the actual metaclass . task : UsePythonVersion @ 0 `` `` '' Decide if a logger has direct configuration applied by checking Version 1.2.0 encoding However every once in a while there are changes that do require some assert messages [ 0 ] == `` Hello World '' rv = flask.json.dumps ( `` \N { SNOWMAN } '' ) exec ( `` def reraise ( tp , value , tb=None ) : \n raise tp , value , tb '' ) f '' '' '' rev : v1.5.0 f '' { request.method } -request to this URL since we ca n't make '' value = ( item_value/item_count ) * offset/exp `` No root path can be found for the provided module '' if you need anything else than ASCII in a string you have to mark flake8-implicit-str-concat info = [ 'Locating template `` % s '' : ' % template ] class LimitedLoader : class ScriptInfo ( object ) : displayName : Use Python $ ( python.version ) of that mode to the new `` TESTING `` flag . # Ubuntu 14.04 has PyPy 2.2.1 , which does exhibit this bug . environments . If you 're using a modern version of Python , you can continue on styleguide will be returned as a Unicode string , or encoded as `` UTF-8 `` by with `` x `` like in `` display_name = property ( lambda x : x.real_name it in the same panel but this is not a requirement . # raise the passed in exception . the changes are the nice kind , the kind where you do n't have to change return super ( ) .setdefault ( key , default ) lambdas for properties might have the first parameter replaced 'Failed to find Flask application or factory in module `` { module } '' . ' Flask also started storing the : data : ` flask.g ` object on the application ( egg_path , ) = modules_tmpdir.join ( `` dist/ '' ) .listdir ( ) with pytest.warns ( UserWarning ) : If you want to work with the latest Flask code before it 's released , install or `` X-Sendfile `` support , etag generation or MIME-type guessing : : message If you are talking with a filesystem or something that is not really based and therefore was replaced with the intended behavior of registering Serialize objects to ASCII-encoded JSON . If this is disabled , the This means that the following code will no longer automatically have script : pip -- disable-pip-version-check install -U tox 'trying loader of blueprint `` frontend '' ' `` ( blueprintapp.apps.frontend ) '' Blank lines : iterkeys = lambda d : d.iterkeys ( ) flask.flash ( `` Hello World '' , `` error '' ) assert result.output == f '' { not set_debug_flag } \n '' cls.__unicode__ = cls.__str__ `` return a valid response . The function either returned '' from __future__ import print_function integer_types = ( int , ) __version__ = `` 2.0.0.dev '' return `` < % s % r > '' % ( self.__class__.__name__ , self.name ) Flask : `` executable . Consider putting app.run ( ) behind an `` implements sessions and : data : ` flask.session ` which is the global session `` filename * '' : f '' UTF-8 '' { quoted } '' , Top level functions and classes are separated by two lines , everything `` registered for exception classes or HTTP error codes . '' the input element . Note that WTForms returns standard Python strings , `` module came from an import hook that does `` return u '' '' yield f '' - { item } '' super ( ) .__init__ ( * * kwargs ) Pocoo Styleguide error = `` User { 0 } is already registered . `` .format ( username ) assert eb.input_stream.read ( ) .decode ( `` utf8 '' ) == ' '' \u20ac '' ' coverage run -p -m pytest -- tb=short -Werror { posargs : tests examples } f '' ' { module.__name__ } : { app_name } ' . '' return f '' Get { id : d } '' `` Exception on % s [ % s ] '' % ( request.path , request.method ) , exc_info=exc_info return response rev : 3.7.9 if isinstance ( rv , ( str , bytes , bytearray ) ) : the input element . Note that WTForms returns standard Python unicode activate_this = '/path/to/env/bin/activate_this.py ' .replace ( u '' > '' , u '' \\u003e '' ) matrix : class TestGreenletContextCopying ( object ) : `` trying loader of blueprint 'frontend ' ( blueprintapp.apps.frontend ) '' self.static_url_path + `` / < path : filename > '' , return type.__new__ ( metaclass , `` temporary_class '' , ( ) , { } ) JavaScript in templates , and should typically remain enabled . reraise ( exc_type , exc_value , tb ) : param root_path : The path to the root of the application files . for _x in range ( 10 ) : ` path ` `` u'/π/page.html ' `` # not an SSLContext f '' / { app_root.lstrip ( '/ ' ) } '' Flask . This styleguide is a requirement for Patches to Flask and a `` `` '' Update the values in the config from a JSON file . The loaded raise e improvement such as the ability to attach a blueprint multiple times , .limit ( 10 ) : meth : ` ~flask.Flask.teardown_request ` decorator . Unfortunately that else filename url = f '' /datetest { i } '' ) pass next to a blueprint named `` admin `` the implicit template path # otherwise , we just raise the error again backwards compatible but you might want to take advantage of them . class RequestContext : Naming Conventions is on its own line . yield `` % s : % r '' % ( key , value ) limit the impact an attacker can do if the secret key leaks . See assert ( # because of namespace packages . return str ( flask.session [ `` foo '' ] ) environ [ `` HTTP_HOST '' ] = u '' \x8a '' itervalues = lambda d : d.itervalues ( ) rev : 19.10b0 # just a normal module # https : //bitbucket.org/pypy/pypy/commits/77ecf91c635a287e88e60d8ddb0f4e9df4003301 Flask 0.3 introduces configuration support and logging as well as # For .egg , zipimporter does not have get_filename until Python 2.7 . to upgrade . What changed ? error = f '' User { username } is already registered . '' # if we want to repropagate the exception , we can attempt to you . It will do this in a very eager way so you might end up with .. _install-create-env : `` dict , tuple , Response instance , or WSGI '' if isinstance ( obj , string_types ) : .replace ( `` < `` , `` \\u003c '' ) rv = client.open ( `` /more '' , method= '' OPTIONS '' ) ) , Version 0.6 import importlib.util this_is_a_very_long ( function_call , 'with many parameters ' , to be the 1.0 release . However because there was such a long lead time up The behavior of returning tuples from a function was simplified . If you variables : recommendation for Flask extensions . f '' { import_name ! r } . This can happen because the module '' put the `` # - * - coding : utf-8 - * - `` into the first or second line of Blueprints have an inverse behavior for : meth : ` url_for ` . Previously class DispatchingApp : container : python : rc-stretch is usually transmitted on top of HTTP supports a large variety of testRunTitle : $ ( Agent.JobName ) `` data `` . Bytes must be compared to bytes . If you want to compare upgrading view = LazyView ( 'yourapplication . ' + import_name ) PY2 = sys.version_info [ 0 ] == 2 url = `` { 0 } master/ { 1 } '' .format ( base_url , text ) `` expression . `` .format ( name=app_name ) This part of the documentation just tries to cover the very basics so .replace ( `` ' '' , `` \\u0027 '' ) python.version : ' 3.8 ' But that 's about where similarities end . Jinja2 for example has an Python 2.7 Linux : longer executed when an exception is raised . See return super ( ) .invoke ( cli , args , * * kwargs ) class TestSendfile : taking the availability of XPath into account and more . Mako on the * /site-packages def __enter__ ( self ) : are unbound . If you caught these exceptions with : exc : ` AttributeError ` methods = set ( item.upper ( ) for item in methods ) ` script_root ` `` u'/myapplication ' `` text . Not only these libraries , also the majority of web related Python id : pyupgrade f '' are separated by { os.path.pathsep ! r } . '' has security implications when rendering the JSON into JavaScript in 1 . Download the script : ` flask-07-upgrade.py was made so that Flask behaves more like people expected it to work and Version 0.3 # the name , and show a warning . ) Version 0.7 `` ' { 0 } ' is not a recognized HTTP error code . Use a subclass of '' class View : already transmits Unicode and if they do not , SQLAlchemy or your other ORM import warnings if f '' { request.base_url } / '' == exc.new_url.split ( `` ? `` ) [ 0 ] : `` A name collision occurred between blueprints '' ` return ` statements . etc . # ensure not to trash sys.exc_info ( ) at that point in case someone Method and function names : `` lowercase_with_underscores `` return os.path.dirname ( spec.origin ) abort ( 404 , f '' Post id { id } does n't exist . '' ) assert f '' Flask { flask_version } '' in out `` os.environ '' , { `` FOO_SETTINGS '' : f '' { __file__.rsplit ( ' . ' , 1 ) [ 0 ] } .py '' } # Re-raise if called with an active exception , otherwise raise the string on its own line : : class AuthActions : windows including cygwin , msysgit or ming32 . Also source control systems $ pip install -- upgrade Flask Into this : : assert value == `` föö '' been done in order to avoid the damage an attacker can do if the secret `` to specify one . '' strings , so we have to tell Jinja2 that this data is already HTML-escaped args_spec = getargspec ( app_factory ) assert `` This was submitted : 'index.txt ' '' in str ( e.value ) steps : ignore_outcome = true script : | marks=pytest.mark.skipif ( not PY2 , reason= '' Python 2 only '' ) , return os.path.dirname ( next ( iter ( spec.submodule_search_locations ) ) ) class TestHelpers ( object ) : latex_documents = [ ( master_doc , f '' Flask- { version } .tex '' , html_title , author , `` manual '' ) ] removed from the stack so a test can query the database after request f '' to the blueprint { blueprint ! r } . '' src_info = f '' blueprint { srcobj.name ! r } ( { srcobj.import_name } ) '' Flash messages can now have categories attached . This makes it possible if not isinstance ( name , str ) : `` 2 : trying loader of blueprint 'admin ' ( blueprintapp.apps.admin ) '' master # : the name of the user as unicode string `` .foo `` told : meth : ` url_for ` that it should look for the endpoint f '' { app_name ! r } is not a valid variable name or function expression . '' import sys from ._compat import reraise ' '' { rv } '' is not a valid cookie domain , it must contain a `` . '' . ' blueprint specific error handlers and a lot more . f '' expected at most 1 positional argument , got { len ( mapping ) } '' class TestStreaming : `` `` `` `` ` return super ( SecureCookieSession , self ) .__getitem__ ( key ) displayName : Run tox f '' Python { platform.python_version ( ) } \n '' `` WARNING : This is a development server . Do not use it in '' sys.exc_clear ( ) class Loader ( object ) : rv = client.options ( `` /more '' ) backwards incompatible changes that make it easier to implement larger self.name = name [ bdist_wheel ] try : # Python 2 : license : LICENSE_NAME , see LICENSE_FILE for more details . blueprints . See : meth : ` Flask.errorhandler ` for more information . # - * we * raised ` ValueError ` due to ` spec ` being ` None ` if BROKEN_PYPY_CTXMGR_EXIT and exc_type is not None : yield f '' class : { type ( loader ) .__module__ } . { type ( loader ) .__name__ } '' src/flask/__init__.py : F401 return `` Hello , { } ! `` .format ( flask.request.json [ `` name '' ] ) % ( key , request.mimetype ) extensions for tuples and strings with HTML markup . `` with the trailing slash if it was accessed `` if isinstance ( rv , ( text_type , bytes , bytearray ) ) : # Chrome does n't allow names without a '. ' . This should only src_info = 'application `` % s '' ' % srcobj.import_name class _FakeSignal : 'belongs to the blueprint `` % s '' . ' % blueprint rv = login ( client , f '' { username } x '' , password ) decorators continue to work as expected , but for things that absolutely Most editors save as UTF-8 by default nowadays but in case your editor is `` `` '' rev : 19.3b0 is_context = ssl and isinstance ( cert , ssl.SSLContext ) module path ) . exc_type , exc_value , tb = sys.exc_info ( ) Python 3.8 Linux : detail = `` found ( % r ) '' % ( triple [ 1 ] or `` < string > '' ) f '' { code_or_exception ! r } . Handlers can only be '' return self def bar ( ) : rendering function . If for example `` request `` is as variable passed [ testenv : coverage-ci ] depend on undocumented internal details you probably have to adapt the with pytest.raises ( click.BadParameter ) : `` `` '' Handle : class : ` ~werkzeug.routing.BuildError ` on : meth : ` url_for ` . rv = client.open ( `` / '' , method= '' OPTIONS '' ) environ [ `` HTTP_HOST '' ] = u '' ąśźäüжŠßя.com '' self.request.method , set your editor to store as UTF-8 : f '' Detected factory { attr_name ! r } in module { module.__name__ ! r } , '' : meth : ` str.decode ` method : : # the examples need to be installed to test successfully $ python flask-07-upgrade.py > patchfile.diff # make error available outside except block raise ValueError ( `` not found '' ) The reason for this is that some file-like objects have an invalid or even Any of the following is functionally equivalent : : serving static files you need to tell the constructor explicitly the if isinstance ( status , ( text_type , bytes , bytearray ) ) : is_context = ssl and isinstance ( cert , ssl.SSLContext ) This section of the documentation enumerates all the changes in Flask from Use the : command : ` pip ` command to upgrade your existing Flask installation by The same is true if you are talking to databases with the help of f '' to { exc.new_url ! r } . '' banner = `` Python % s on % s\nApp : % s [ % s ] \nInstance : % s '' % ( the same line as the opening quote and the triple quote that closes class MockCtx ( object ) : $ sudo pacman -S python-virtualenv session data in a signed cookie . This requires that the from ._compat import BROKEN_PYPY_CTXMGR_EXIT url = f '' { base_url } master/ { text } '' ) text_type = unicode as : exc : ` ValueError ` you will need to change this . `` headers '' % filename , `` you encounter this error please file a bug against Flask . '' assert `` Python `` + python_version ( ) in out `` Make sure to directly send your '' except TypeError : packages= [ `` site_egg '' ] , `` should be moved to ' { name } ' . `` .format ( name=app.name , old_name=old_name ) `` value '' , ( 1 , `` t '' , True , False , None , [ ] , [ 1 , 2 , 3 ] , { } , { `` foo '' : `` 🐍 '' } ) job : FlaskOnNightly rv = client.get ( u '' / ? foo=정상처리 '' .encode ( `` euc-kr '' ) ) displayName : Publish test results `` statement . `` .format ( request.endpoint ) that requires bytes to be transmitted . if hasattr ( client , `` options '' ) : ( `` tést.txt '' , `` test.txt '' , `` t % C3 % A9st.txt '' ) , for any application out there ) . `` code . Use a subclass of HTTPException with that code '' `` but could not call it without arguments . Use '' assert rv.data == `` 정상처리 '' .encode ( ) return self.from_file ( filename , load , silent=silent ) See : ref : ` error-handlers ` for specifics . should probably read ` The Absolute Minimum Every Software Developer instance checks in general . Check for features . `` flask_foo `` . `` HTTP_USER_AGENT '' : `` werkzeug/ '' + werkzeug.__version__ , class Foo ( object ) : # noqa : B903 , for Python2 compatibility assert app.logger.getEffectiveLevel ( ) == logging.WARNING `` it 's a namespace package . In this case `` names = `` , `` .join ( repr ( x ) for x in form_matches ) If you maintain an extension that was using : data : ` ~flask._request_ctx_stack ` utility you can get it as part of various Unix runtime environments for detail = f '' found ( { triple [ 1 ] or ' < string > ' ! r } ) '' e.strerror = `` Unable to load configuration file ( % s ) '' % e.strerror with Unicode interface . So for example if you want to load a file on the warnings.warn ( self._warn ( ) `` Flask will automatically redirect to the URL `` rv += f '' # { url_quote ( anchor ) } '' templates around . Previously if you had a folder named : file : ` templates ` @ implements_to_string if PY2 and os.name == `` nt '' : `` `` '' $ python2 -m virtualenv venv never compare something with `` True `` or `` False `` ( for example never class TestGreenletContextCopying : f '' { os.path.getmtime ( filename ) } - { os.path.getsize ( filename ) } - { check } '' return os.path.dirname ( os.path.dirname ( spec.origin ) ) absolute path or relative to the config root path . ssl_context = object ( ) ' putting app.run ( ) behind an if __name__ == `` __main__ '' ' coverage combine rv = login ( client , flaskr.app.config [ 'USERNAME ' ] + ' x ' , flaskr.app.config [ 'PASSWORD ' ] ) If invalid JSON data was submitted Flask will now raise a import unimportable # noqa : F401 assert eb.path == `` / '' filename.encode ( `` utf-8 '' ) if isinstance ( filename , str ) else filename except BuildError as e : if hasattr ( sys , `` exc_clear '' ) : the master branch which was 1.0 you might see some unexpected changes . Version 0.9 `` provided . '' run_command.make_context ( `` run '' , [ `` -- cert '' , `` flask '' ] ) assert list ( messages ) == [ ( `` message '' , `` Hello World '' ) ] # This support requires a new Werkzeug version def _has_config ( logger ) : flask.Markup ( `` < em > Testing < /em > '' ) , info.append ( f '' { line } '' ) `` View function mapping is overwriting an `` pytest -- tb=short -- basetemp= { envtmpdir } { posargs : tests examples } from .json import load class TestStreaming ( object ) : Upgrading to Newer Releases class TaggedJSONSerializer : Rendering templates was simplified . Now the blueprints can provide f '' Werkzeug { werkzeug.__version__ } '' , return super ( SecureCookieSession , self ) .get ( key , default ) app.debug = DEBUG from ._compat import fspath automatic error logging , you might be interested in attaching a proper log # Arch `` function either returned None or ended without a return '' yield item with io.open ( `` src/flask/__init__.py '' , `` rt '' , encoding= '' utf8 '' ) as f : The proper upgrade is to change this : : * * kwargs self.value = value with pytest.raises ( AttributeError ) : vmImage : $ [ variables.vmImage ] like svn , hg or git have builtin support for applying unified diffs as : param request : an instance of : attr : ` request_class ` . fsize = len ( file.getvalue ( ) ) info.append ( f '' { idx + 1:5 } : trying loader of { src_info } '' ) [ testenv : nightly ] .. _install-install-virtualenv : eb = EnvironBuilder ( app , json=u '' \u20ac '' ) Markup ( ' & lt ; blink & gt ; hacker & lt ; /blink & gt ; ' ) # Re-raise if called with an active exception , otherwise specific exception classes are executed instead of more general ones . Flask introduced a new session interface system . We also noticed that assert ' 1 : trying loader of application `` blueprintapp '' ' in text from setuptools import setup < User u'admin ' > for k , v in iteritems ( self ) : rendering , configurable syntax and more . On the other hand an engine of : func : ` ~flask.templating.render_template ` . eb = EnvironBuilder ( app , json= '' \u20ac '' ) return u '' Hällo Wörld '' from js_example import views depend on the order of execution of post-request functions , be sure to from ._compat import integer_types if sys.version_info > = ( 2 , 7 , 9 ) : ssl_context = ssl.SSLContext ( ssl.PROTOCOL_SSLv23 ) raise ValueError ( `` not found '' ) super ( ) .__init__ ( path , base_url , * args , * * kwargs ) the template name . Flask 0.5 is the first release that comes as a Python package instead of a return { key + `` __ '' : self.serializer.tag ( value [ key ] ) } like Genshi is based on XML stream evaluation , template inheritance by # otherwise we raise it from here . providing the `` -- upgrade `` parameter : : In case you did track the master branch you will notice that & 0xFFFFFFFF , except : # noqa : B001 if encoding is not None and isinstance ( rv , text_type ) : `` 'app.logger ' is named ' { name } ' for this application , '' fname = '/path/to/file.txt ' clear_request = False assert `` filename= % s '' % ascii in content_disposition f '' { dumps ( data , indent=indent , separators=separators ) } \n '' , args = ast.literal_eval ( f '' ( { args } , ) '' ) improve your own code quality by taking advantage of new features in http_host = f '' { subdomain } . { http_host } '' items = [ : param session : the session to be saved ( a displayName : Install tox 3 . URL building handles escaping of special characters and Unicode data loader.__class__.__module__ == `` _frozen_importlib '' Mac : app = modules_tmpdir.join ( `` unimportable.py '' ) assert flask.session.get ( `` data '' ) == `` foo '' directly to the template , the default context processor will not override # Test on the nightly version of Python . with open ( `` src/flask/__init__.py '' , encoding= '' utf8 '' ) as f : templates , and should typically remain enabled . exp = -1.05 other hand treats templates similar to Python modules . Within the activated environment , use the following command to install sure to tell your editor to save the file as UTF-8 there as well . return path.__fspath__ ( ) if hasattr ( path , `` __fspath__ '' ) else path handlers only using exception classes and HTTP error codes . eb = make_test_environ_builder ( app , `` https : //example.com/ '' ) raise # because werkzeug enforces latin1 on Python 2 . a satisfying solution . `` a production deployment . `` , assert eb.script_root == `` '' Some py2/py3 compatibility support based on a stripped down raise a : exc : ` RuntimeError ` instead of an : exc : ` AttributeError ` when they # courtesy Python nightly test , do n't fail the build in CI args = ast.literal_eval ( `` ( { args } , ) '' .format ( args=args ) ) Class names : `` CamelCase `` , with acronyms kept uppercase ( `` HTTPWriter `` Version 0.8 `` Programming Language : : Python : : 3.7 '' , `` `` '' This is a longer docstring with so much information in there class MockCtx : BROKEN_PYPY_CTXMGR_EXIT = False ' 2 : trying loader of blueprint `` admin '' ' `` ( blueprintapp.apps.admin ) '' # CentOS , Fedora if value.__traceback__ is not tb : f '' \ '' FLASK_APP= ' { module.__name__ } : { attr_name } ( args ) '\ '' '' ( Style : ' 2.0 . Use `` session_interface.save_session '' instead . ' spaces : : with _Mgr ( ) : assert json_available Extension imports Due to a bug in earlier implementations the request local proxies now super ( EnvironBuilder , self ) .__init__ ( path , base_url , * args , * * kwargs ) file.save ( f '' /var/www/uploads/ { secure_filename ( f.filename ) } '' ) The `` create_jinja_loader `` function is gone . If you want to customize 'issued automatically by the routing system to `` % s '' . ' if spec.origin in { `` namespace '' , None } : u '' Ñandú／pingüino.txt '' , return `` Get % d '' % id endpoint = f '' { blueprint_name } { endpoint } '' sys.meta_path.append ( Loader ( ) ) `` session_interface.make_null_session `` instead . value = my_dict [ 'key ' ] Now you can return above and : ref : ` install-create-env ` . `` str `` Logging Integration rev : v2.1.0 return super ( PathAwareSessionInterface , self ) .get_cookie_name ( app ) ( Note that : meth : ` register_error_handler ` is new in Flask 0.7 ) : class : ` ~werkzeug.contrib.securecookie.SecureCookie ` `` with form data reliably or without user interaction . '' % request.method class Namespace : e.strerror = f '' Unable to load configuration file ( { e.strerror } ) '' # ( the function was actually called from the except part ) `` trailing slash if it was accessed without one . '' __nonzero__ = __bool__ `` `` `` `` `` `` `` '' .format ( app.write ( `` import flask\napp = flask.Flask ( __name__ ) '' ) packages= [ 'site_egg ' ] , extensions you should override the if not isinstance ( attachment_filename , str ) : class _PackageBoundObject ( object ) : info = [ f '' Locating template { template ! r } : '' ] value = ( item_value / item_count ) * offset / exp coverage report : param silent : Ignore the file if it does n't exist . f '' callable , but it was a { type ( rv ) .__name__ } . '' path=app_root.lstrip ( `` / '' ) , json_available = _DeprecatedBool ( `` flask.json_available '' , `` 2.0.0 '' , True ) except OSError : While it is still possible to attach error handlers to You are now encouraged to use this instead : : ( `` message '' , u '' Hello World '' ) , class BlueprintSetupState ( object ) : We streamlined the behavior of the callbacks for request handling . For DeprecationWarning ( os.path.getsize ( filename ) , spec = importlib.util.find_spec ( root_mod_name ) # hack around this by not setting the name , and show a warning # ImportError : the machinery told us it does not exist return other == self.value rv [ `` result '' ] = `` running on % s : % s ... '' % ( hostname , port ) and not `` HttpWriter `` ) return text_type ( json [ `` a '' ] + json [ `` b '' ] ) Version 0.12 `` existing endpoint function : % s '' % endpoint key is leaked . When you upgrade you will notice two major changes : all for this feature . Removing support for this makes the Flask internal # the passed in exception . .order_by ( MyModel.name.desc ( ) ) \ flask.flash ( u '' Hello World '' ) of course ) that give you basic and painless Unicode support : # Just pass the filepath directly browsers . See : ref : ` json-security ` for details . super ( ) .__init__ ( name , bases , d ) 3 . Select `` UTF-8 without BOM '' as encoding # - * - coding : { encoding } - * Yoda statements are a no-go : ] request.addfinalizer ( lambda : old_logger.setLevel ( logging.NOTSET ) ) class BlueprintSetupState : hand an engine like Genshi is based on XML stream evaluation , template def handle_error ( e ) : if isinstance ( methods , string_types ) : Changes to send_file return { k : self.serializer.tag ( v ) for k , v in value.items ( ) } src e.description = `` KeyError : ' { } ' '' .format ( * e.args ) `` % s- % s- % s '' # ETag still needs to be manually set run_command.make_context ( `` run '' , [ `` -- cert '' , `` flask '' ] ) : copyright : ( c ) YEAR by AUTHOR . class locked_cached_property ( object ) : # Some other loaders might exhibit the same behavior . # ValueError : username = flaskr.app.config [ `` USERNAME '' ] recommend upgrading to the new blueprints as they provide a lot of useful or logger.filters Flask has a few assumptions about your application ( which you can change # a package ( with __init__.py ) return self.session_interface.save_session ( self , session , response ) engine = create_engine ( 'sqlite : ////tmp/test.db ' , convert_unicode=True ) good . # Native string not marked as Unicode on Python 2 exc_info = sys.exc_info ( ) # At this point we want to reraise the exception . If the error is super_convert = super ( ) .convert environ [ `` HTTP_HOST '' ] = `` \x8a '' # Chrome does n't allow names without a ' . ' python_requires= '' > =3.6 '' , python.version : ' 3.7 ' % ( TEST_VALUE = `` föö '' New code : : & 0xFFFFFFFF if isinstance ( obj , str ) : if hasattr ( sys , `` exc_clear '' ) : assert messages [ 1 ] == flask.Markup ( `` < em > Testing < /em > '' ) `` No root path can be found for the provided `` f '' Access { filename } failed , maybe it does not exist , so '' On Linux , virtualenv is provided by your package manager : class Base : yield f '' { key } : '' Encoding and Decoding Yourself ' '' open_session '' is deprecated and will be removed in ' assert meth is not None , `` Unimplemented method % r '' % request.method class CustomRequestGlobals ( object ) : def __ne__ ( self , other ) : from ._compat import text_type assert json_available ! = False # noqa E712 `` directly instead . '' if not all ( isinstance ( x , str ) for x in value ) : elif not isinstance ( value , ( str , text_type , int , float , bool ) ) : class assert_no_leak : condition : eq ( variables [ 'hasTestResults ' ] , 'true ' ) PyPy 3 : ' `` { rv } .localdomain '' , and use that instead . '.format ( rv=rv ) If you are using Python 2 , the venv module is not available . Instead , 'Detected factory `` { factory } '' in module `` { module } '' , but ' from io import StringIO be used to disable the default log handlers and custom log handlers can be python.version : 'pypy3 ' from js_example import views # noqa : F401 # breaks the __exit__ function in a very peculiar way . The second level of # 1.1.0 changes name of logger , warn if config is detected for old The behavior of error handlers was changed . raise ValueError ( name ) =========================== def DATABASE_URI ( self ) : # Note : all caps f '' ' { code_or_exception } ' is not a recognized HTTP error '' class TestNoImports ( object ) : Automatic Conversion 'is `` % s '' instead of `` multipart/form-data '' which means that no ' All docstrings are formatted with reStructuredText as understood by 'The view function for `` { } '' did not return a valid response . The ' class TestUrlFor ( object ) : displayName : Use Python $ ( python.version ) with io.open ( `` CHANGES.rst '' , encoding= '' UTF-8 '' ) as f : rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , flaskr.app.config [ 'PASSWORD ' ] ) spec = importlib.util.find_spec ( root_mod_name ) if sys.version_info < ( 2 , 7 , 9 ) : from flask._compat import text_type task : PublishCodeCoverageResults @ 1 deps = this_is_a_very_long ( function_call , 'with many parameters ' ) \ return os.path.dirname ( os.path.dirname ( spec.origin ) ) Constants : `` UPPERCASE_WITH_UNDERSCORES `` by design much more restricted to only allow JSON with a few small if isinstance ( obj , ssl.SSLContext ) : class X : # noqa : B903 , for Python2 compatibility # __init__ modules export names super ( ) .__init__ ( * args , * * kwargs ) error = f '' User { username } is already registered . '' `` jsonify `` . This has security implications when rendering the JSON into The : func : ` ~flask.templating.render_template_string ` function has changed to __version__ = `` 1.2.0.dev '' release to release and how you can change your code to have a painless `` A valid Flask application was not obtained from '' raise super ( MethodViewType , cls ) .__init__ ( name , bases , d ) # trap_http_exception method so that 's their fault then . 'Marked up \xbb HTML ' return f.read ( ) .decode ( charset ) filename_or_fp = os.fspath ( filename_or_fp ) directory = fspath ( directory ) `` dictionary but it does not exist . The mimetype for the request `` recommend applying the patch with `` path -p1 < patchfile.diff `` and then # - * - coding : utf-8 - * .replace ( `` & '' , `` \\u0026 '' ) TOXENV : style ~~~~~~~~~~~~~~~~~~ assert result.output == `` % s\n '' % str ( not set_debug_flag ) Indentation : `` The URL was defined with a trailing slash so `` base_url = `` { scheme } : // { netloc } / { path } '' .format ( encoding and decoding happens whenever you are talking over a protocol vmImage : 'ubuntu-latest ' return 'mysql : //user @ { } /foo'.format ( self.DB_SERVER ) Flask 0.11 removed the `` debug_log_format `` attribute from Flask fp.write ( str ( htmlsafe_dumps ( obj , * * kwargs ) ) ) `` `` '' return super ( SecureCookieSession , self ) .setdefault ( key , default ) version installed , it will be skipped with a warning message at the end . url = `` /datetest { 0 } '' .format ( i ) Categories for Flash Messages click.echo ( f '' * Environment : { env } '' ) self.app.name , code easier to understand and fixes a couple of small issues that make path to the static folder ( which can be relative to the blueprint 's will need to install them yourself . Docs : Python 2 on Windows does n't provide `` inet_pton `` , so this only assert result.exit_code == 2 , f '' Unexpected success : \n\n { result.output } '' info.append ( `` - > % s '' % detail ) # because of python 3.3 namespace packages . self.message = `` ' { } ' is deprecated and will be removed in version { } . `` .format ( `` isinstance ( a , C ) `` instead of `` type ( A ) is C `` , but try to avoid Debugging cls = type ( loader ) imports . to render errors , warnings or regular messages differently for example . filename = os.fspath ( filename ) adler32 ( name into that folder if you want : file : ` blueprintname/template.html ` as provide better semantics for various features and work better with large def format_price ( amount , currency= '' € '' ) : Implemented generic : ref : ` views ` ( class-based views ) . only for exception * instances * . This was unintended and plain wrong , Linux : to the next section . `` `` `` `` `` `` `` `` `` `` for literal strings with only ASCII character points . ' '' save_session '' is deprecated and will be removed in ' .mkdir ( f '' python { sys.version_info.major } . { sys.version_info.minor } '' ) except ( ImportError , ValueError ) : > \Python27\python.exe Downloads\get-pip.py before , you should catch them with : exc : ` RuntimeError ` now . < https : //github.com/pallets/flask-ext-migrate > ` _ that is supposed to `` response . The return type must be a string , dict , tuple , '' Version 0.5 class TestGenericHandlers ( object ) : f '' You tried to access the file { key ! r } in the request.files '' `` dictionary but it does not exist . The mimetype for the '' class View : unicode os.path.getmtime ( filename ) , hasTestResults : 'true ' Now the inheritance hierarchy takes precedence and handlers for more itervalues = lambda d : iter ( d.values ( ) ) updating experience . the old behavior , you can add it easily by subclassing Flask : : ( u '' те : /ст '' , ' '' : / '' ' , `` % D1 % 82 % D0 % B5 % 3A % 2F % D1 % 81 % D1 % 82 '' ) , this can not be achieved ( for instance if the package General Layout ` url_root ` `` u'http : //www.example.com/myapplication/ ' `` import platform return f '' < flask.g of { top.app.name ! r } > '' return other ! = self.value obj = ScriptInfo ( app_import_path=f '' { cli_app_path } : testapp '' ) transparently . .. _upgrading-to-010 : .tox/ * /lib/python * /site-packages/flask 'While importing `` { name } '' , an ImportError was raised : ' also from Python code , uses Unicode for all operations , supports super ( FlaskCliRunner , self ) .__init__ ( * * kwargs ) except OSError as e : fact that the teardown callbacks are called when the response context is variables : if exc_value is e : class MethodView ( View , metaclass=MethodViewType ) : `` \ '' FLASK_APP= ' { module } : { factory } ( args ) '\ '' to specify `` ( `` error '' , u '' Hello World '' ) , python.version : ' 3.5 ' .replace ( u '' ' '' , u '' \\u0027 '' ) Protected members are prefixed with a single underscore . Double python.version : ' 2.7 ' flask.flash ( u '' Hello World '' , `` error '' ) coverage the encoding for text on your website is UTF-8 class TestGenericHandlers : ' '' { module } : { app_name } '' . '.format ( module=module.__name__ , app_name=app_name ) if sys.version_info > = ( 3 , 4 ) : import io value = ( item_value / item_count ) * offset / exp raise relied on this behavior . 'this is the first ' , 'set of items ' , 'with more items ' , 5 . If you were using per-module template folders you need to move some Your shell prompt will change to show the name of the activated when there is no request context yet but an application context . The old browsers . class JSONTag : python.version : ' 3.7 ' The script will inverse all calls to : meth : ` url_for ` automatically for support for reusable blocks ( macros ) that can be used from inside # g.db is still bound if there is such a thing 'for example : @ app.route ( ... , methods= [ `` POST '' ] ) ' # - the module name was invalid emitted you have to enabled them with the : mod : ` warnings ` module . class X : assert client.get ( `` /bytes '' ) .data == `` Hällo Wörld '' .encode ( ) environments . fp = _wrap_reader_for_text ( fp , kwargs.pop ( `` encoding '' , None ) or `` utf-8 '' ) HTTP is based on bytes . Not only the protocol , also the system used to python.version : ' 3.6 ' the old session system by using the ` Flask-OldSessions ` _ extension . # on 3.x it disappears automatically at the end of the exception else : # stack . or not logger.propagate If you previously had code like this : : that requires some sort of configuration . ( Which most likely is the case < https : //raw.githubusercontent.com/pallets/flask/0.12.3/scripts/flask-07-upgrade.py > ` _ checks IPv4 addresses in that environment . click.echo ( f '' * Debug mode : { 'on ' if debug else 'off ' } '' ) General whitespace rules : f '' Blueprints that are created on the fly need unique '' opening brace : : flask.Markup ( u '' < em > Testing < /em > '' ) , class _DeprecatedBool ( object ) : ) .with_traceback ( sys.exc_info ( ) [ 2 ] ) # - the module name was invalid environment . class LimitedLoader ( object ) : set up . iterative template rendering , configurable syntax and more . On the other return f '' Hello { name } ! '' Docstring conventions : fire ( ) ssl_context = ssl.SSLContext ( ssl.PROTOCOL_TLS_SERVER ) print f'Hello { name } ! ' # name and not new name `` str `` ( `` unicode `` in Python 2 ) ' '' make_null_session '' is deprecated and will be removed ' # Use a container since Azure Pipelines may not have the latest build . The Golden Rule makes it easier to customize the dispatching and error handling . This `` will automatically redirect to the URL with the '' : copyright : 2010 Pallets ' removed in 2.0 . Construct `` flask.testing.EnvironBuilder '' ' Python comes bundled with the : mod : ` venv ` module to create virtual # a package ( with __init__.py ) Within the activated environment , use the following command to install Flask : class JSONTag ( object ) : fsize = file.getbuffer ( ) .nbytes return super ( FlaskGroup , self ) .main ( * args , * * kwargs ) been restricted . If Flask ca n't guess one or the user did n't provide one , the `` one . `` .format ( module=module.__name__ ) `` Allowed methods must be a list of strings , for '' } , `` None or ended without a return statement . '' def _warn ( self ) : class Wrapper : `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` else : pip -- disable-pip-version-check install -- user -U tox VersionRange : def get_annoying_name ( self ) : else : if isinstance ( exc_class_or_code , integer_types ) : : license : BSD-3-Clause vmImage : windows-latest `` specified arguments . '' down of database connections for a while . You can take advantage of the longer have to handle that error to avoid an internal server error showing def foo ( ) : pool : file : : : meth : ` url_for ` . f '' '' '' for more information . return f '' < { o.val } > '' implementation , check : meth : ` open_session ` . Instead of overriding this `` provided . '' % import_name raise BadRequest ( f '' Failed to decode JSON object : { e } '' ) : file : ` templates ` next to their location however but it can be enabled from yield f '' { ' , '.join ( row ) } \n '' update your application to work with either filenames there or disable # rightmost part . This needs to go through a helper function u '' '' '' Expressions and Statements assert f '' filename * =UTF-8 '' { utf8 } '' in content_disposition with open ( filename , ' r ' ) as f : A brief description goes here . In Flask 0.7 we cleaned up the code base internally a lot and did some _identity = lambda x : x super_convert = super ( SeparatedPathType , self ) .convert Read all about that in the : ref : ` message-flashing-pattern ` pattern . tool it wo n't be able to find all use cases and it might miss some . We laid out differently . If it 's just one line , the closing triple On Windows : rv = flask.json.dumps ( u '' \N { SNOWMAN } '' ) etc . For more information see : ref : ` instance-folders ` . assert messages [ 0 ] == u '' Hello World '' TOXENV : 'devel , lowest ' def format_price ( amount , currency=u'€ ' ) : flash ( 'Invalid password provided ' , 'error ' ) `` 'from_json ' is deprecated and will be removed in 2.0 . '' with pytest.deprecated_call ( ) as rec : precompiled regular expressions : `` name_re `` if spec is None : rv = client.get ( `` /киртест '' ) netloc=url.netloc or http_host , TOXENV : py f '' { e } \nThe factory { app_name ! r } in module '' that you have a pleasant experience with Unicode related things . if spec is None : # namespace package from ._compat import json_available select = B , E , F , W , B9 , ISC `` the root path needs to be explicitly `` latex_documents = [ to tell Python which encoding your file uses . Again , I recommend : file : ` templates/index.html ` . This no longer is the case . Now you need Extension imports of the form `` flask.ext.foo `` are deprecated , you should use if error is sys.exc_info ( ) [ 1 ] : `` name information or because it 's a namespace package . '' `` flask.Flask.request_globals_class `` attribute was renamed to Upgrading to new Teardown Handling def goodbye ( name ) : iteritems = lambda d : d.iteritems ( ) return os.path.join ( prefix , `` var '' , self.name + `` -instance '' ) class assert_no_leak ( object ) : So the rule of thumb : if you are not dealing with binary data , work with [ testenv : coverage ] so we have to tell Jinja2 that this data is already HTML-escaped with things that modify the response the : meth : ` ~flask.Flask.after_request ` * * options Install virtualenv if not all ( isinstance ( x , ( str , text_type ) ) for x in value ) : message = `` Python % ( python ) s\nFlask % ( flask ) s\nWerkzeug % ( werkzeug ) s '' assert `` 1 : trying loader of application 'blueprintapp ' '' in text class PyBytesIO : also no longer automatically export templates from a folder called `` Failed to find Flask application or factory in module '' `` response . The return type must be a string , dict , tuple , '' testResultsFiles : test-results.xml elif cls.__module__ == `` _frozen_importlib '' and cls.__name__ == `` NamespaceLoader '' : engine = create_engine ( 'sqlite : ////tmp/test.db ' ) if isinstance ( status , ( str , bytes , bytearray ) ) : # rightmost part . This needs to go through a helper function object . With that introduction we moved the implementation details for class Recorder : html_title = f '' Flask Documentation ( { version } ) '' vmImage : $ [ variables.vmImage ] the `` |safe `` filter . return self.session_interface.make_null_session ( self ) return str ( value.__html__ ( ) ) class SessionMixin ( MutableMapping ) : UTF-8 for this purpose . To tell the interpreter your encoding you can if sys.version_info < ( 2 , 7 , 9 ) : raise NoAppException ( f '' Could not parse the arguments in { app_name ! r } . '' ) `` Ñandú／pingüino.txt '' , `` session_interface.open_session `` instead . @ app.teardown_request ASCII letters are used , but it is recommended all the time ) and a that might expect `` flask.json.dumps `` to return bytestrings by f '' This was submitted : { names } '' Flask no longer supports zipped applications in this release . This matrix : `` bytes `` ( `` str `` in Python 2 ) version of six so we do n't have to depend on a specific version or x.username ) `` autoescape template variables by default . This better matches the behavior builtins are allowed and * * must not * * be resolved by appending an $ patch -p1 < patchfile.diff def open_session ( self , request ) : you will already have pip and setuptools on your system . Otherwise , you `` came from an import hook that does not provide file '' old_logger.setLevel ( logging.DEBUG ) % ( blueprint , self.blueprints [ blueprint.name ] , blueprint.name ) quote is on the same line as the opening , otherwise the text is on return super ( ) .get_cookie_name ( app ) `` A valid Flask application was not obtained from `` return `` % s/ % d '' % ( bar , baz ) raise exc_info SQLAlchemy or a similar ORM system . Some databases have a protocol that return `` < % s ' % s ' [ % s ] of % s > '' % ( f = request.files [ 'the_file ' ] # this should only come up with localhost `` Silently ignoring app.run ( ) because the application is '' You need to use the environment variable to specify an application . There used to be a logic error allowing you to register handlers assert type ( rv ) == text_type how other systems handle request pre- and post-processing . If you only apply the chunks that look good . internally you will always use Unicode exclusively for text except return f '' { bar } / { baz : d } '' It is also recommended to use the Unix newline format , you can select `` response . The return type must be a string , '' adler32 ( templates and also from Python code , supports iterative template with io.open ( `` README.rst '' , `` rt '' , encoding= '' utf8 '' ) as f : class PrefixPathMiddleware : modules . u'admin ' e.description = f '' KeyError : { e.args [ 0 ] ! r } '' 'module `` % s '' . This can happen because the ' ) from flask._compat import PY2 for a few setups . If you get a deprecation warning , make sure to flask._compat `` Access % s failed , maybe it does not exist , so ignore etags in `` as long as you are using ASCII code points only ( basically numbers , Docs : some unnecessary leading dots in your code if you 're not using On classes with keywords , trailing underscores are appended . Clashes with return text_type ( value.__html__ ( ) ) rv = `` . '' + rv class _AppCtxGlobals ( object ) : class SessionMixin ( collections_abc.MutableMapping ) : ( 1 , u'admin ' , u'admin @ localhost ' ) this string as Unicode string by prefixing it with a lowercase ` u ` . return text_type ( flask.session [ `` foo '' ] ) ( e.g . : `` - `` , `` ~ `` etc . ) as well on the inner side of parentheses . return `` index for % s '' % user function fails if no filename information was provided . automatically rewrite your imports for this . for k , v in self.items ( ) : class PyStringIO ( object ) : for you but it means that you now can store things on the `` g `` object `` value '' , ( 1 , `` t '' , True , False , None , [ ] , [ 1 , 2 , 3 ] , { } , { `` foo '' : u '' 🐍 '' } ) .. deprecated : : 2.0 scheme=url.scheme or url_scheme , url = f '' { base_url } { release } / { text } '' value= ( item_value/item_count ) * offset/exp if name in ( `` archive '' , `` get_filename '' ) : class TestSafeJoin : Drop support for Python 2 and 3.5 . return `` direct `` + type ( e ) .__name__ instance methods : `` self `` as first parameter Flask , like Jinja2 and Werkzeug , is totally Unicode based when it comes to check = ( `` application is run from the flask command line `` 'if __name__ == `` __main__ '' guard to silence this ' class MyClass ( object ) : you 're creating , it 's now always a tuple in the form `` ( response , status , assert rv == ' '' \\u003c/script\\u003e '' ' The configuration support makes it easier to write any kind of application % { ' '' FLASK_APP= { module } : name '' to specify the correct ' try : .. note : : return Flask.make_response ( self , rv ) using the interactive commit feature to only apply the chunks that look print f'See you { name } . ' `` Tried to register a handler for an exception instance { 0 ! r } . '' fire ( ) assert rv == u ' '' \\u003c/script\\u003e '' ' `` `` `` `` `` `` `` warnings.warn ( Implemented generic class-based views . value = my_list [ index ] click.echo ( `` * Debug mode : { 0 } '' .format ( `` on '' if debug else `` off '' ) ) `` WARNING : This is a development server. `` f '' { url.scheme or url_scheme } : // { url.netloc or http_host } '' `` for PEP 302 import hooks . '' `` HTTP error codes . `` .format ( code_or_exception ) .. code-block : : sh filterwarnings = `` os.environ '' , { `` FOO_SETTINGS '' : __file__.rsplit ( `` . `` , 1 ) [ 0 ] + `` .py '' } TEST_VALUE = `` föö '' address documents on servers ( so called URIs or URLs ) . However HTML which response = send_file ( open ( fname ) , attachment_filename=fname ) with open ( startup ) as f : if sys.version_info > = ( 2 , 7 ) and not hasattr ( sys , `` pypy_translation_info '' ) : with assert_no_leak ( ) : ( setq default-buffer-file-coding-system 'utf-8 ) align the next line with the last dot or equal sign , or indent four assert rv [ `` result '' ] == f '' running on { hostname } : { port } ... '' If you are on Mac OS X or Windows , download ` get-pip.py ` _ , then : `` fly need unique names . '' context processors later to inject additional variables without breaking single module . There were a couple of internal refactoring so if you class View ( object ) : `` file contents were transmitted . To fix this error you should `` MyModel.query.filter ( MyModel.scalar > 120 ) \ differences and extensions . raise NoAppException ( f '' Could not import { module_name ! r } . '' ) class User ( object ) : return self.value Whitespace is placed between binary operators . If you are using git as version control system for your project we name = Column ( String ) 23 , 42 , 'and even more ' ) f '' Instance : { app.instance_path } '' No whitespace for unary operators that are not words assert exc_value is e ` url ` `` u'http : //www.example.com/myapplication/π/page.html ? x=y ' `` Python 3.8 Windows : file = request.files [ 'the_file ' ] if isinstance ( filename , text_type ) from ._compat import getargspec pw_hash = Column ( String ) it easy to find pieces of code that it was unable to upgrade . `` filename * '' : `` UTF-8 '' % s '' % url_quote ( attachment_filename , safe=b '' '' ) , should take care of that . `` % s.is_package ( ) method is missing but is required by Flask of `` lambda app : io.StringIO ( u '' Test '' ) , rv = client.get ( `` / ? foo=정상처리 '' .encode ( `` euc-kr '' ) ) `` flask.exthook.ExtDeprecationWarning `` for each extension you import the old Good : : if isinstance ( methods , str ) : `` point to a configuration file '' % variable_name except BuildError as e : ' share the same name `` % s '' . Blueprints that are created on the ' `` werkzeug '' : werkzeug.__version__ , zip_safe=True , commands = response.set_etag ( ... ) For lists or tuples with many items , break immediately after the return `` Hällo Wörld '' longer executed when an exception is raised .","['.azure-pipelines.yml', '.pre-commit-config.yaml', 'CHANGES.rst', 'CONTRIBUTING.rst', 'docs/api.rst', 'docs/conf.py', 'docs/config.rst', 'docs/deploying/mod_wsgi.rst', 'docs/design.rst', 'docs/index.rst', 'docs/installation.rst', 'docs/patterns/distribute.rst', 'docs/patterns/flashing.rst', 'docs/patterns/lazyloading.rst', 'docs/patterns/requestchecksum.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/streaming.rst', 'docs/patterns/viewdecorators.rst', 'docs/patterns/wtforms.rst', 'docs/quickstart.rst', 'docs/styleguide.rst', 'docs/templating.rst', 'docs/testing.rst', 'docs/tutorial/blog.rst', 'docs/tutorial/tests.rst', 'docs/tutorial/views.rst', 'docs/unicode.rst', 'docs/upgrading.rst', 'examples/javascript/js_example/__init__.py', 'examples/javascript/js_example/views.py', 'examples/javascript/setup.py', 'examples/tutorial/flaskr/auth.py', 'examples/tutorial/flaskr/blog.py', 'examples/tutorial/setup.py', 'examples/tutorial/tests/conftest.py', 'examples/tutorial/tests/test_db.py', 'setup.cfg', 'setup.py', 'src/flask/__init__.py', 'src/flask/__main__.py', 'src/flask/_compat.py', 'src/flask/app.py', 'src/flask/blueprints.py', 'src/flask/cli.py', 'src/flask/config.py', 'src/flask/ctx.py', 'src/flask/debughelpers.py', 'src/flask/globals.py', 'src/flask/helpers.py', 'src/flask/json/__init__.py', 'src/flask/json/tag.py', 'src/flask/logging.py', 'src/flask/sessions.py', 'src/flask/signals.py', 'src/flask/templating.py', 'src/flask/testing.py', 'src/flask/views.py', 'src/flask/wrappers.py', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_apps/cliapp/app.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_apps/cliapp/importerrorapp.py', 'tests/test_apps/cliapp/multiapp.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_config.py', 'tests/test_converters.py', 'tests/test_deprecations.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_json_tag.py', 'tests/test_logging.py', 'tests/test_meta.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py', 'tests/test_views.py', 'tox.ini']",Merge pull request # 3554 from pallets/drop-python2
27,f991a898100359684111be1ddef7bb60ab6f0f9a,2020-04-03 07:33:20-07:00,at ` static_url_path ` . Defaults to the `` 'static ' `` folder in the root path of the application . or an absolute path . Defaults to `` 'static ' `` . `` static_url_path `` . Relative to the application `` root_path `` : param static_folder : the folder with static files that should be served : param static_folder : The folder with static files that is served at,['src/flask/app.py'],Merge pull request # 3541 from jeenuv/clarify-static
28,3d61fc44280e5e77ced09e0eba9634ae5e5f4727,2020-04-02 12:55:49-07:00,"return f '' < p > Hello , { escape ( name ) } ! < /p > '' def hello ( name ) : return f '' Hello , { escape ( name ) } ! '' .. note : : HTML escaping return `` < p > Hello , World ! < /p > '' user-provided values rendered in the output must be escaped to protect later , will do this automatically . input rendered in the output must be escaped to protect from When returning HTML ( the default response type in Flask ) , any user When returning HTML ( the default response type in Flask ) , any do this automatically . : func : ` ~markupsafe.escape ` , shown above , can If a user managed to submit the name `` < script > alert ( `` bad '' ) < /script > `` , the view function . These variable rules are explained below . .. code-block : : python injection attacks . HTML templates in Jinja , introduced later , will script in the user 's browser . escaping causes it to be rendered as text , rather than running the `` < name > `` in the route captures a value from the URL and passes it to omitted in most examples for brevity , but you should always be aware of HTML Escaping from injection attacks . HTML templates rendered with Jinja , introduced be used manually . It 's omitted for brevity in the examples below . from markupsafe import escape from markupsafe import escape : func : ` ~markupsafe.escape ` , shown here , can be used manually . It is how you 're using untrusted data .",['docs/quickstart.rst'],Merge pull request # 3529 from pgkrit/master
29,bac908ef35338e78422c5edc0456a22d04debfc3,2020-03-11 07:31:20-07:00,"elif sn_port : ( self.url_map.default_subdomain or None ) sn_host = sn_port = None subdomain = ( else : host = host or sn_host or _host subdomain = None port = int ( port ) host = `` 127.0.0.1 '' port = int ( next ( ( p for p in ( port , sn_port ) if p is not None ) , _port ) ) if not self.subdomain_matching if not self.subdomain_matching : sn_host , sn_port = None , None port = int ( sn_port ) if sn_host : if port or port == 0 : # pick the first value that 's not None ( 0 is allowed ) ) host = sn_host _port = 5000 else : subdomain = self.url_map.default_subdomain or None _host = `` 127.0.0.1 '' port = 5000 if not host : else None",['src/flask/app.py'],Merge pull request # 3513 from kevinanew/master
30,a75315028cc7b8219f2ec28c7c7c7beb92c113c2,2020-02-12 07:09:32-08:00,"assert rv.data == b '' catch/all '' The static route will not catch all URLs if the `` Flask `` def test_static_folder_with_ending_slash ( ) : app = flask.Flask ( __name__ , static_folder= '' static/ '' ) return path def catch_all ( path ) : rv = app.test_client ( ) .get ( `` /catch/all '' ) value = value.rstrip ( `` /\\ '' ) if value is not None : `` static_folder `` argument ends with a slash . : issue : ` 3452 `","['CHANGES.rst', 'src/flask/helpers.py', 'tests/test_basic.py']",Merge pull request # 3456 from frostming/bugfix/3452
31,c12d9f8b490c56fcba7ad793249ab14441c544d6,2020-02-10 18:13:24-08:00,"thread . The reference to the proxied object is needed in some situations , If the specific object reference is important , for example for such as sending : ref : ` signals ` or passing data to a background sending : ref : ` signals ` or passing data to a background thread .",['docs/reqcontext.rst'],Merge pull request # 3480 from candleindark/patch-2
32,8973b58955df185c6502389a6e91b7b262a735d4,2020-02-10 18:12:50-08:00,"Here is a basic introduction to how the : class : ` ~jinja2.Markup ` class works : : from markupsafe import escape > > > from markupsafe import Markup from flask import Flask , escape , url_for from flask import Flask , url_for from flask import Flask , session , redirect , url_for , escape , request Here is a basic introduction to how the : class : ` ~markupsafe.Markup ` class works : : from flask import Flask , session , redirect , url_for , request > > > from flask import Markup",['docs/quickstart.rst'],Merge pull request # 3473 from greyli/fix-doc-import
33,b074a2eec95aefd252af9be120078cfa6854a2d9,2020-02-10 17:56:11-08:00,"is_context = ssl and isinstance ( cert , ssl.SSLContext ) # cryptography not installed import OpenSSL # noqa : F401 # pyOpenSSL installed is_context = isinstance ( cert , ssl.SSLContext ) param , monkeypatch.setitem ( sys.modules , `` OpenSSL '' , types.ModuleType ( `` OpenSSL '' ) ) monkeypatch.setitem ( sys.modules , `` cryptography '' , types.ModuleType ( `` cryptography '' ) ) When using ad-hoc certificates , check for the cryptography library monkeypatch.setitem ( sys.modules , `` OpenSSL '' , None ) # cryptography installed ctx , import cryptography # noqa : F401 monkeypatch.setitem ( sys.modules , `` cryptography '' , None ) `` Using ad-hoc certificates requires pyOpenSSL . `` , ctx , param instead of PyOpenSSL . : pr : ` 3492 ` # pyOpenSSL not installed `` Using ad-hoc certificates requires the cryptography library . `` ,","['CHANGES.rst', 'src/flask/cli.py', 'tests/test_cli.py']",Merge pull request # 3492 from pallets/cryptography
34,982663d0631e1cb3bf4e66d567dc83373a3046dd,2020-02-10 17:29:09-08:00,available in the community to integrate your project for production . The Flask future releases . available in the community to integrate your project for production . core team reviews extensions and ensures approved extensions do not break with,['docs/foreword.rst'],Merge pull request # 3462 from gpakosz/outdated-doc
35,986871bf4eb85ae62124e71ed579b6baa0ddaeae,2020-02-10 17:28:14-08:00,assert ( `` Make sure to directly send your POST-request to this URL '' ) in str ( assert `` Make sure to directly send your POST-request to this URL '' in str ( : param default : Value to set and return if the attribute is not : param : default : Value to set and return if the attribute is not,"['src/flask/ctx.py', 'tests/test_basic.py']",Merge pull request # 3453 from noviluni/remove_redundant_parentheses
36,28d09ae0fc518f2b3e9138f0fdfc2566459a52e3,2020-02-10 17:27:51-08:00,Please use the Pallets Discord or Stack Overflow for general questions about using Flask or issues not related to Flask . * * -- > Please use the # pocoo IRC channel on freenode or Stack Overflow for general questions about using Flask or issues not related to Flask . * * -- >,['.github/ISSUE_TEMPLATE.md'],Merge pull request # 3437 from RDIL/patch-1
37,a3e4395a42574386a15ef6ca1afa83ff9787608f,2020-02-10 13:15:24-08:00,`` statement . '' `` statement . `` .format ( request.endpoint ) 'The view function for `` { } '' did not return a valid response . The ' assert `` from_none '' in str ( e.value ) `` The view function did not return a valid response . The '',"['src/flask/app.py', 'tests/test_basic.py']",Merge pull request # 3498 from raymond-devries/3445-traceback-for-none
38,900fa2f795615683234cc7e7b050a1e131983689,2020-02-10 13:09:53-08:00,`` statement . '' `` statement . `` .format ( request.endpoint ) 'The view function for `` { } '' did not return a valid response . The ' assert `` from_none '' in str ( e.value ) `` The view function did not return a valid response . The '',"['src/flask/app.py', 'tests/test_basic.py']",Feature request # 3445 .
39,25a5d3031167566cef0fcf38b54afc6b7dcf6e86,2019-11-19 09:37:21-08:00,"< http : //jinja.pocoo.org/docs/templates/ > ` _ for more information . Documentation < http : //jinja.pocoo.org/docs/templates/ > ` _ for url= '' http : //flask.pocoo.org/docs/tutorial/ '' , .. _Jinja : https : //jinja.palletsprojects.com/templates/ .. _Jinja : http : //jinja.pocoo.org/docs/templates/ ` Jinja documentation < https : //jinja.palletsprojects.com/ > ` _ url= '' https : //flask.palletsprojects.com/patterns/jquery/ '' , url= '' http : //flask.pocoo.org/docs/patterns/jquery/ '' , .. _Flask docs : https : //flask.palletsprojects.com/patterns/jquery/ `` jinja '' : ( `` http : //jinja.pocoo.org/docs/ '' , None ) , .. _tutorial : https : //flask.palletsprojects.com/tutorial/ < https : //jinja.palletsprojects.com/templates/ > ` _ for more information . .. _Flask docs : http : //flask.pocoo.org/docs/patterns/jquery/ < https : //palletsprojects.com/p/jinja/ > ` _ template engine for you automatically . .. _tutorial : http : //flask.pocoo.org/docs/tutorial/ < http : //jinja.pocoo.org/ > ` _ template engine for you automatically . assert `` See http : //flask.pocoo.org/docs/blueprints/ # templates '' in text ` Jinja documentation < http : //jinja.pocoo.org/docs > ` _ .. _Jinja for loops : https : //jinja.palletsprojects.com/templates/ # for info.append ( `` See https : //flask.palletsprojects.com/blueprints/ # templates '' ) .. _Jinja for loops : http : //jinja.pocoo.org/docs/templates/ # for info.append ( `` See http : //flask.pocoo.org/docs/blueprints/ # templates '' ) `` jinja '' : ( `` https : //jinja.palletsprojects.com/ '' , None ) , assert `` See https : //flask.palletsprojects.com/blueprints/ # templates '' in text url= '' https : //flask.palletsprojects.com/tutorial/ '' , Documentation < https : //jinja.palletsprojects.com/templates/ > ` _ for","['docs/conf.py', 'docs/index.rst', 'docs/quickstart.rst', 'docs/templating.rst', 'docs/tutorial/blog.rst', 'docs/tutorial/templates.rst', 'examples/javascript/README.rst', 'examples/javascript/setup.py', 'examples/tutorial/README.rst', 'examples/tutorial/setup.py', 'src/flask/debughelpers.py', 'tests/test_templating.py']",Merge pull request # 3427 from greyli/update-old-links
40,d49cfb35d4bb45e94d8c7c1920e7be99e4e10dde,2019-11-19 09:08:07-08:00,"back to the traditional method . Make sure that the rv.direct_passthrough = False lambda app : io.StringIO ( u '' Test '' ) , MIME guessing and etag support for file-like objects was assert rv.data not callable ( getattr ( Range , `` to_content_range_header '' , None ) ) , : param filename_or_fp : The filename of the file to send , relative to objects . If you want to use automatic MIME and etag support , pass .. versionchanged : : 1.1 pytest.param ( The ` attachment_filename ` is preferred over ` filename ` for MIME-type def test_send_file_object ( self , app , opener ) : etc. ) . Text mode files and : class : ` ~io.StringIO ` will raise a assert `` x-sendfile '' not in rv.headers if a relative path is specified . .. versionchanged : : 1.0.3 : func : ` send_file ` raises a : exc : ` ValueError ` when passed an .. versionadded : : 0.5 .. versionchanged : : 0.7 .. _RFC 2231 : https : //tools.ietf.org/html/rfc2231 # section-4 : attr : ` ~Flask.root_path ` if a relative path is specified . Filenames are encoded with ASCII instead of Latin-1 for broader When passing a file-like object instead of a filename , only binary [ rv = flask.send_file ( f , mimetype= '' application/octet-stream '' ) The ` add_etags ` , ` cache_timeout ` and ` conditional ` parameters were Alternatively , a file-like object opened in binary mode . Make send before calling : func : ` send_file ` . def __getattr__ ( self , name ) : flask.send_file ( file , mimetype= '' text/plain '' ) Partial content supports : class : ` ~io.BytesIO ` . lambda app : open ( os.path.join ( app.static_folder , `` index.html '' ) , `` rb '' ) , 200 OK and an empty file . : issue : ` 3358 ` Filename may be a : class : ` ~os.PathLike ` object . return getattr ( self._io , name ) compatibility with WSGI servers . assert `` x-sendfile '' not in rv.headers def __init__ ( self , * args , * * kwargs ) : rv = flask.send_file ( file , mimetype= '' text/plain '' ) than sending an empty file . io.BytesIO ( b '' party like it 's '' ) , The filename is no longer automatically inferred from file f.name = `` test.txt '' assert rv.mimetype == `` application/octet-stream '' `` attachment_filename `` is preferred over `` filename `` for MIME flask.send_file ( StringIO ( `` LOL '' ) ) flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename= '' filename '' ) able to , otherwise attach an etag yourself . This functionality deprecated because it was unreliable . Pass a filename if you are rv = flask.send_file ( f , attachment_filename=f.name ) def test_send_file_text_fails ( self , app , opener ) : `` opener '' , with open ( os.path.join ( app.root_path , `` static/index.html '' ) , `` rb '' ) as f : with open ( os.path.join ( app.root_path , `` static/index.html '' ) ) as f : which case `` X-Sendfile `` might not work and fall you want to use automatic mimetype and etag support , pass a filepath via with open ( os.path.join ( app.root_path , `` static/index.html '' ) , mode= '' rb '' ) as f : will be removed in Flask 1.0 . flask.send_file ( io.BytesIO ( b '' LOL '' ) ) .. versionchanged : : 2.0 rv = flask.send_file ( f , mimetype= '' text/html '' ) This is relative to the : attr : ` ~Flask.root_path ` .. versionchanged : : 0.9 UTF-8 filenames , as specified in ` RFC 2231 ` _ , are supported . marks=pytest.mark.skipif ( PY2 , reason= '' Python 3 only '' ) , : param filename_or_fp : the filename of the file to send . with app.open_resource ( `` static/index.html '' ) as f : compatibility with WSGI servers . lambda app : io.BytesIO ( b '' Test '' ) , StringIO ( `` Test '' ) , def __getattr__ ( self , name ) : if fsize is not None : f = PyStringIO ( `` Test '' ) headers [ `` Content-Length '' ] = fsize assert `` x-sendfile '' not in rv.headers assert rv.mimetype == `` text/html '' file.close ( ) rv = flask.send_file ( f , mimetype= '' text/html '' ) parameters were added . The default behavior is to add etags . .. versionadded : : 0.5 file pointer is positioned at the start of data to class PyStringIO ( object ) : reason= '' not implemented within werkzeug '' , : class : ` ~io.TextIOBase ` will raise a : exc : ` ValueError ` rather .. versionchanged : : 1.0 app.use_x_sendfile = True Alternatively a file object might be provided in .. _RFC 2231 : https : //tools.ietf.org/html/rfc2231 # section-4 marks=pytest.mark.skipif ( not PY2 , reason= '' Python 2 only '' ) , ) , self._io = StringIO ( * args , * * kwargs ) .. versionchanged : : 1.0.3 raise ValueError ( `` Files must be opened in binary mode or use BytesIO . '' ) lambda app : PyStringIO ( b '' Test '' ) , .. versionadded : : 0.2 .. versionchanged : : 1.0 ` filename_or_fp ` or ` attachment_filename ` . : meth : ` Flask.get_send_file_max_age ` . class PyStringIO ( object ) : @ pytest.mark.skipif ( able to , otherwise attach an etag yourself . This functionality flask.send_file ( io.BytesIO ( b '' LOL '' ) , attachment_filename= '' filename '' ) ) io.BytesIO ( b '' Test '' ) , def __init__ ( self , * args , * * kwargs ) : rv.close ( ) .. versionadded : : 0.2 `` X-Sendfile `` will only be used with filenames . a filename via `` filename_or_fp `` or `` attachment_filename `` . with open ( os.path.join ( app.root_path , `` static/index.html '' ) ) as f : .. versionchanged : : 0.9 return getattr ( self._io , name ) `` cache_timeout `` defaults to assert rv.data == b '' Test '' app.use_x_sendfile = False assert rv.mimetype == `` text/plain '' Passing a file-like object that inherits from lambda app : StringIO ( `` Test '' ) , f = StringIO ( `` Test '' ) self._io = io.BytesIO ( * args , * * kwargs ) mimetype guessing and etag support for file objects was will be removed in Flask 1.0 rv = flask.send_file ( f , mimetype= '' text/plain '' ) assert rv.data == f.read ( ) `` filename `` may be a : class : ` ~os.PathLike ` object . StringIO ( `` party like it 's '' ) , The `` add_etags `` , `` cache_timeout `` and `` conditional `` mode is supported ( `` open ( filename , `` rb '' ) `` , : class : ` ~io.BytesIO ` , Passing a : class : ` ~io.BytesIO ` object supports range requests . rv.close ( ) ] , def test_send_file_object ( self , app , req_ctx ) : with pytest.raises ( ValueError ) : lambda app : open ( os.path.join ( app.static_folder , `` index.html '' ) ) , .. versionchanged : : 0.7 cache_timeout pulls its default from application config , when None . from flask._compat import PY2 .. versionchanged : : 1.1 .. versionadded : : 1.1 elif isinstance ( file , io.TextIOBase ) : headers [ `` Content-Length '' ] = fsize headers [ `` Content-Length '' ] = fsize UTF-8 filenames , as specified in ` RFC 2231 ` _ , are supported . ) added . The default behavior is now to attach etags . rv.direct_passthrough = False : mod : ` io ` object in text mode . Previously , it would respond with sure the file pointer is seeked to the start of the data . deprecated because it was unreliable . Pass a filename if you are Filenames are encoded with ASCII instead of Latin-1 for broader file = opener ( app ) The filename is no longer automatically inferred from file objects . If with open ( os.path.join ( app.root_path , `` static/index.html '' ) , `` rb '' ) as f : : exc : ` ValueError ` .","['CHANGES.rst', 'src/flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 3435 from pallets/send-file-text
41,2659f0a5e62c9a97ef37dc2ded3ca8fda3c53c9f,2019-11-18 19:09:30-08:00,"return ' < User % r > ' % ( self.name ) print f'Hello { name } ! ' run ( f'rm -r /tmp/ { filename } ' ) def cached ( timeout=5 * 60 , key='view/ % s ' ) : app.add_url_rule ( f ' { url } < { pk_type } : { pk } > ' , view_func=view_func , put ( 'dist/ % s ' % filename , '/tmp/ % s ' % filename ) run ( f'/var/www/yourapplication/env/bin/pip install /tmp/ { filename } ' ) cache_key = key.format ( request.path ) run ( '/var/www/yourapplication/env/bin/pip install /tmp/ % s ' % filename ) print 'See you % s . ' % name put ( f'dist/ { filename } ' , f'/tmp/ { filename } ' ) return render_template ( 'pages/ % s.html ' % page ) app.add_url_rule ( ' % s < % s : % s > ' % ( url , pk_type , pk ) , view_func=view_func , cache_key = key % request.path print f'Template { template.name } is rendered with { context } ' return render_template ( f'pages/ { page } .html ' ) print 'Hello % s ! ' % name def cached ( timeout=5 * 60 , key='view/ { } ' ) : return f ' < User { self.name ! r } > ' filename = f ' { dist } .tar.gz ' print 'Template % s is rendered with % s ' % ( template.name , context ) run ( 'rm -r /tmp/ % s ' % filename ) print f'See you { name } . ' filename = ' % s.tar.gz ' % dist","['docs/blueprints.rst', 'docs/patterns/fabric.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/viewdecorators.rst', 'docs/signals.rst', 'docs/styleguide.rst', 'docs/views.rst']",Merge pull request # 3406 from erfanio/f-string-docs
42,af5743f6bd2a62072657830d3585b98680e1c203,2019-11-18 19:05:01-08:00,"script : tox -- -- junitxml=test-results.xml tests examples `` Programming Language : : Python : : Implementation : : CPython '' , Python37Linux : TOXENV : 'docs-html ' vmImage : 'ubuntu-latest ' lowest : Werkzeug==0.15 TOXENV : 'style ' publish.test.results : 'false ' Python 3.6 Linux : Python 2.7 Windows : [ testenv : docs ] DocsHtml : Python37Windows : Python 3.5 Linux : vmImage : ubuntu-latest architecture : $ ( python.architecture ) condition : eq ( variables [ 'hasTestResults ' ] , 'true ' ) Docs : `` Programming Language : : Python : : 3.8 '' , pip install -q -e examples/javascript [ test ] Pypy3Linux : PyPy 3 Linux : Python 3.8 Mac : Python 2.7 Linux : [ testenv : style ] coverage run -p -m pytest -- tb=short -Werror -- junitxml=test-results.xml tests Python 3.8 Windows : py38- { simplejson , devel , lowest } pip install -q -e examples/tutorial [ test ] python.version : ' 3.8 ' docs TOXENV : stylecheck `` Programming Language : : Python : : Implementation : : PyPy '' , docs-html [ testenv : docs-html ] hasTestResults : 'false ' pip install -r requirements.txt py { 37,36,35,27 , py3 , py } py { 38,37,36,35,27 , py3 , py } python.version : ' 3.7 ' Python27Linux : python.architecture : 'x64 ' skip_missing_interpreters = true script : tox -s false -- -- junitxml=test-results.xml tests examples publish.test.results : 'true ' coverage run -p -m pytest -- tb=short -Werror -- junitxml=test-results.xml { posargs : tests examples } hasTestResults : 'true ' Python 3.8 Linux : Python37Mac : lowest : Werkzeug==0.15.5 vmImage : 'ubuntu-latest ' Python35Linux : condition : eq ( variables [ 'publish.test.results ' ] , 'true ' ) Python 3.7 Linux : Python36Linux : TOXENV : 'docs ' python.version : ' 3.7 ' [ testenv : stylecheck ] Python27Windows : python.version : ' 3.7 ' py37- { simplejson , devel , lowest }","['.azure-pipelines.yml', 'CONTRIBUTING.rst', 'setup.py', 'tox.ini']",Merge pull request # 3401 from Jamim/feature/python-3.8
43,bfa9aceb03fb728acf90436e1bb47d32c0ea5a1c,2019-11-18 18:22:38-08:00,"if use_eager_loading is None : options , and : doc : ` /cli ` for detailed instructions about configuring development server . In development mode , this server provides an method is recommended . The reason for this is that due to how the reload reloading application . fail immediately and show the traceback rather than waiting until the Starting with Flask 0.11 there are multiple built-in ways to run a if eager_loading is None : is intended for use only during local development . It is not ~~~~~~~~~~~~~~~~~~~~~ variable to point to your application , and `` FLASK_ENV=development `` to certain code twice , sometimes crashing without message or dying when a This feature is called `` lazy loading '' . def __init__ ( self , loader , use_eager_loading=None ) : * http : //localhost:5000/ * . .. code-block : : python This works well for the common case but it does not work well for `` debug=True `` can be passed to enable the debugger and reloader , but interactive debugger for the error , rather than crashing the server . .. _server : if there are errors when reloading . def __init__ ( self , loader , use_eager_loading=False ) : mechanism works there are some bizarre side-effects ( like executing recommended for development because it provides a superior reload When using the `` flask run `` command with the reloader , the server will .. currentmodule : : flask Example : : Do not use the development server when deploying to production . It interactive debugger and will reload when code is changed . The `` flask run `` command will only defer errors on reload . Errors fully enable development mode . pass the `` -- eager-loading `` option . To always keep the server running , If a syntax error is already present when calling `` flask run `` , it will supported and you needed to enable debug mode by exporting As an alternative to the `` flask run `` command , the development server .. code-block : : text disabled : : either upgrade to newer Flask versions or have a look at the : ref : ` server ` There are more parameters that are explained in : doc : ` /server ` . The `` flask run `` command line script is the recommended way to run the method takes arguments similar to the CLI options to control the server . use_eager_loading = os.environ.get ( `` WERKZEUG_RUN_MAIN '' ) ! = `` true '' eager_loading = not reload The alternative way to start the application is through the To override this behavior and always fail immediately , even on reload , The : command : ` flask ` command line script ( : ref : ` cli ` ) is strongly to see the alternative method for running a server . : meth : ` Flask.run ` method . This will immediately launch a local server site is accessed . This is intended to make errors more visible initially $ export FLASK_APP=my_application Prior to Flask 1.0 the : envvar : ` FLASK_ENV ` environment variable was the `` FLASK_ENV=development `` environment variable is still required to and using the CLI . development server . It requires setting the `` FLASK_APP `` environment Flask provides a `` run `` command to run the application with a if __name__ == '__main__ ' : designed to be particularly efficient , stable , or secure . Lazy or Eager Loading exactly the same way the : command : ` flask ` script does . $ flask run -- no-reload .. warning : : docs to see the alternative method for running a server . while still allowing the server to handle errors on reload . Prior to Flask 1.0 the `` FLASK_ENV `` environment variable was not continue to run even if you introduce syntax errors or other experience due to how it loads the application . The basic usage is like The main difference from the CLI command is that the server will crash if __name__ == `` __main__ '' : this : : to import and run the application with a production server later . app.run ( debug=True ) `` -- eager-loading/ -- lazy-loader '' , development which is why from Flask 0.11 onwards the : command : ` flask ` It is however still a perfectly valid method for invoking a non automatic present during the initial call will cause the server to exit with arguments to the `` run `` option . For instance the reloader can be See : doc : ` /deploying/index ` for deployment options . can also be started from Python with the : meth : ` Flask.run ` method . This `` -- eager-loading/ -- lazy-loading '' , not supported and you needed to enable debug mode by exporting $ export FLASK_APP=hello $ python hello.py even on the initial call , pass `` -- lazy-loading `` . There are more parameters that are explained in the : ref : ` server ` docs . Place the call in a main block , otherwise it will interfere when trying .. currentmodule : : flask The individual features of the server can be controlled by passing more syntax or import error happens ) . development server . The best one is the : command : ` flask ` command line utility app.run ( ) either upgrade to newer Flask versions or have a look at : doc : ` /server ` initialization errors into the code . Accessing the site will show the but you can also continue using the : meth : ` Flask.run ` method . the traceback immediately . : issue : ` 3431 ` http : //localhost:5000/ . Use `` flask run -- help `` to see the available","['CHANGES.rst', 'docs/quickstart.rst', 'docs/server.rst', 'src/flask/cli.py']",Merge pull request # 3434 from pallets/eager-load
44,42942ec2910420ff6107b9da839c93d9c422109c,2019-10-28 18:26:16-07:00,"def test_send_from_directory_bad_request ( self , app , req_ctx ) : with pytest.raises ( BadRequest ) : exception = NotFound else : exception = BadRequest if sys.version_info > = ( 3 , 8 ) : import sys def test_send_from_directory_null_character ( self , app , req_ctx ) : with pytest.raises ( exception ) :",['tests/test_helpers.py'],Merge pull request # 3410 from haneybarg/bad_request
45,8f422d2b5efe685bf67852b8f06672a32c1f07e6,2019-10-18 09:28:37-07:00,"app.config.from_json ( os.path.join ( current_dir , `` static '' , `` config.json '' ) ) ) import toml def test_config_missing_json ( ) : Add : meth : ` Config.from_file ` to load config using arbitrary file Or from a JSON file : import toml app.config.from_json ( `` missing.json '' ) with open ( filename ) as json_file : def test_config_from_file ( ) : .. code-block : : python from . import json def from_json ( self , filename , silent=False ) : app.config.from_file ( `` config.toml '' , load=toml.load ) : param filename : the filename of the JSON file . This can either be an def from_file ( self , filename , load , silent=False ) : loaders , such as `` toml.load `` or `` json.load `` . Configuring from Python Files return self.from_file ( filename , load , silent=silent ) your choice using : meth : ` ~flask.Config.from_file ` . For example to load : meth : ` Config.from_json ` is deprecated in favor of this . : pr : ` 3398 ` `` 'from_json ' is deprecated and will be removed in 2.0 . '' assert not app.config.from_json ( `` missing.json '' , silent=True ) Configuring from Data Files .. versionadded : : 0.11 def test_config_from_json ( ) : app.config.from_file ( os.path.join ( current_dir , `` static '' , `` config.json '' ) , json.load ) def test_config_missing_file ( ) : .. code-block : : python : param load : A callable that takes a file handle and returns a : type load : `` Callable [ [ Reader ] , Mapping ] `` where `` Reader `` : meth : ` from_mapping ` method . assert not app.config.from_file ( `` missing.json '' , load=json.load , silent=True ) from a TOML file : `` `` '' Update the values in the config from a file that is loaded warnings.warn ( : meth : ` from_mapping ` function . from .json import load import json import warnings `` `` '' Update the values in the config from a JSON file . The loaded implements a `` read `` method . absolute path or relative to the config root path . DeprecationWarning , data is passed to the : meth : ` from_mapping ` method . .. versionadded : : 1.2 stacklevel=2 , import json : param filename : The path to the JSON file . This can be an `` Use 'from_file ( filename , load=json.load ) ' instead . `` , Use : meth : ` from_file ` with : meth : ` json.load ` instead . obj = json.loads ( json_file.read ( ) ) `` `` '' `` `` '' Updates the values in the config from a JSON file . This function absolute filename or a filename relative to the app.config.from_file ( `` missing.json '' , load=json.load ) mapping of loaded data from the file . : param silent : Ignore the file if it does n't exist . obj = load ( f ) app.config.from_file ( `` config.json '' , load=json.load ) root path . def test_config_from_file ( ) : using the `` load `` parameter . The loaded data is passed to the It is also possible to load configuration from a file in a format of Configuring from Files behaves as if the JSON object was a dictionary and passed to the .. deprecated : : 1.2 .. versionadded : : 0.11 files . def test_config_from_pyfile ( ) : with open ( filename ) as f : def from_json ( self , filename , silent=False ) : app.config.from_file ( `` config.toml '' , load=toml.load ) : param silent : set to `` True `` if you want silent failure for missing : param filename : The path to the data file . This can be an","['CHANGES.rst', 'docs/config.rst', 'src/flask/config.py', 'tests/test_config.py']",Merge pull request # 3398 from pgjones/toml
46,200ce9bd39c70a7782ef8ace0338ad71dbdb175d,2019-10-12 19:20:31-07:00,"test_client.post ( `` /set_dynamic_cookie '' , data= { `` value '' : `` 616 '' } ) .data assert ( Version 2.0.0 session_interface = PathAwareSessionInterface ( ) assert test_client.post ( `` /set '' , data= { `` value '' : `` 42 '' } ) .data == b '' value set '' Uses `` app.session_cookie_name `` which is set to `` SESSION_COOKIE_NAME `` if flask.request.url.endswith ( `` dynamic_cookie '' ) : v = flask.session.get ( `` value '' , `` None '' ) `` `` '' Returns the name of the session cookie . def get_cookie_name ( self , app ) : app = CustomFlask ( __name__ ) return `` dynamic_cookie_name '' def set ( ) : else : flask.session [ `` value '' ] = flask.request.form [ `` value '' ] app.session_cookie_name , domain=domain , path=path class CustomFlask ( flask.Flask ) : Add : meth : ` sessions.SessionInterface.get_cookie_name ` to allow return super ( PathAwareSessionInterface , self ) .get_cookie_name ( app ) assert test_client.get ( `` /get '' ) .data == b '' 42 '' val = request.cookies.get ( app.session_cookie_name ) return v # first set the cookie in both /set urls but each with a different value def get_cookie_name ( self , app ) : def get ( ) : def get_dynamic_cookie ( ) : return `` value set '' == b '' value set '' assert test_client.get ( `` /get_dynamic_cookie '' ) .data == b '' 616 '' app.secret_key = `` secret_key '' Unreleased # This session interface will use a cookie with a different name if the # now check that the relevant values come back - meaning that different def set_dynamic_cookie ( ) : from flask.sessions import SecureCookieSessionInterface ) def test_session_dynamic_cookie_name ( ) : setting the session cookie name dynamically . : pr : ` 3369 ` response.delete_cookie ( name , domain=domain , path=path ) ) name , app.session_cookie_name , `` `` '' response.delete_cookie ( # cookies are being used for the urls that end with `` dynamic cookie '' class PathAwareSessionInterface ( SecureCookieSessionInterface ) : val = request.cookies.get ( self.get_cookie_name ( app ) ) # requested url ends with the string `` dynamic_cookie '' test_client = app.test_client ( ) return app.session_cookie_name name = self.get_cookie_name ( app )","['CHANGES.rst', 'src/flask/sessions.py', 'tests/test_reqctx.py']",Merge pull request # 3369 from doronhorwitz/get-cookie-name
47,4bceeccfffd09cd6d02489988444e25b07f32ae0,2019-10-12 19:03:34-07:00,"from flask import request `` FLASK_APP `` environment variable : : 3 . We then use the : meth : ` ~flask.Flask.route ` decorator to tell Flask 4 . The function returns the message we want to display in the user 's > > > from flask import Markup Flask knows where to look for templates , static files , and so on . For more .. code-block : : python return 'Post % d ' % post_id 1 . First we imported the : class : ` ~flask.Flask ` class . An instance of this from flask import session The : func : ` ~flask.escape ` mentioned here does escaping for you if you are To run the application you can either use the : command : ` flask ` command or return f'User { username } ' browser . The default content type is HTML , so HTML in the string $ python -m flask run particular function , and returns the message we want to display in the from flask import Flask , escape , url_for what URL should trigger our function . should trigger our function . this class will be our WSGI application . in this example ) , you should use `` __name__ `` because depending on if it 's Save it as : file : ` hello.py ` or something similar . Make sure to not call : class : ` ~markupsafe.Markup ` class or by using the `` |safe `` filter in the convenient shortcut for this that is appropriate for most cases . : class : ` ~jinja2.Markup ` class or by using the `` |safe `` filter in the Eager to get started ? This page gives a good introduction to Flask . A minimal Flask application looks something like this : : return 'Logged in as % s ' % escape ( session [ 'username ' ] ) the application 's module or package . If you are using a single module ( as .. code-block : : text ( `` '__main__ ' `` versus the actual import name ) . This is needed so that $ export FLASK_APP=hello.py return 'User % s ' % escape ( username ) name of the application 's module or package . `` __name__ `` is a from flask import jsonify A minimal Flask application looks something like this : do this automatically . : func : ` ~markupsafe.escape ` , shown above , can Alternatively you can use : command : ` python -m flask ` : : app = Flask ( __name__ ) assumes you already have Flask installed . If you do not , head over to the from flask import make_response not using the template engine ( as in this example ) . 4 . The function is given a name which is also used to generate URLs for that from flask import url_for return f'Logged in as { session [ `` username '' ] } ' `` FLASK_APP `` environment variable : * Running on http : //127.0.0.1:5000/ To run the application , use the : command : ` flask ` command or 2 . Next we create an instance of this class . The first argument is the name of 1 . First we imported the : class : ` ~flask.Flask ` class . An instance of .. note : : HTML escaping input rendered in the output must be escaped to protect from will be rendered by the browser . information have a look at the : class : ` ~flask.Flask ` documentation . Just save it as : file : ` hello.py ` or something similar . Make sure to not call 3 . We then use the : meth : ` ~flask.Flask.route ` decorator to tell Flask what URL return ' { } \ 's profile'.format ( escape ( username ) ) return f ' { username } \ 's profile ' Follow : doc : ` installation ` to set up a project and install Flask first . Eager to get started ? This page gives a good introduction to Flask . It return 'Hello , World ! ' return 'Subpath % s ' % escape ( subpath ) This is needed so that Flask knows where to look for resources such 2 . Next we create an instance of this class . The first argument is the : ref : ` installation ` section . started as application or imported as module the name will be different return f'Subpath { subpath } ' python 's `` -m `` switch with Flask . Before you can do that you need class will be our WSGI application . from flask import render_template as templates and static files . @ app.route ( '/ ' ) injection attacks . HTML templates in Jinja , introduced later , will return f '' < p > Hello , { escape ( name ) } ! < /p > '' from markupsafe import escape be used manually . It 's omitted for brevity in the examples below . return f'Post { post_id } ' > > > from markupsafe import Markup from flask import Flask , session , redirect , url_for , escape , request user 's browser . : command : ` python -m flask ` . Before you can do that you need When returning HTML ( the default response type in Flask ) , any user",['docs/quickstart.rst'],Merge pull request # 3391 from pallets/explain-escape
48,9bdc42d300c63f82cf3aad872d606434fcb8cb97,2019-10-08 09:11:18-07:00,contexts until the `` with `` block exits . contexts until the with block exits . Using the : meth : ` ~Flask.test_client ` as a `` with `` block to preserve the Use the : meth : ` ~Flask.test_client ` as a `` with `` block to preserve the,['docs/reqcontext.rst'],Merge pull request # 3381 from seeksort/request-context-typo
49,941bc9ff6019117c9aa341f809bef7e0e54d0ebf,2019-10-06 13:26:00-07:00,without your patch . ` Run the tests . < contributing-testsuite_ > ` _ . .. _contributing-testsuite : # running-the-tests .. _contributing-testsuite : without your patch . ` Run the tests < contributing-testsuite_ > ` _ .,['CONTRIBUTING.rst'],Fix link to header in CONTRIBUTING ( # 3382 )
50,e0079490176f080a9a4e52d4edc67e370992d943,2019-09-24 06:41:48-07:00,"import inspect `` blinker '' : ( `` https : //pythonhosted.org/blinker/ '' , None ) , } ] ProjectLink ( 'PyPI releases ' , 'https : //pypi.org/project/Flask/ ' ) , 'pointsize ' : '12pt ' , `` project_links '' : [ ProjectLink ( `` pallets_sphinx_themes '' , line for line in lines master_doc = 'index ' 'preamble ' : r'\usepackage { flaskstyle } ' , import functools `` sphinx.ext.autodoc '' , 'localtoc.html ' , latex_use_modindex = False import sphinx.util.inspect as inspect _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' , re.M ) packaging~=19.2 'index ' : [ rv = old_update_wrapper ( wrapper , wrapped , * a , * * kw ) old_update_wrapper = functools.update_wrapper `` sphinx_issues '' , url = `` { 0 } master/ { 1 } '' .format ( base_url , text ) release , version = get_version ( `` Flask '' ) author = 'Pallets Team ' ) : `` click '' : ( `` https : //click.palletsprojects.com/ '' , None ) , 'fontpkg ' : r'\usepackage { mathpazo } ' , Binary files a/docs/_static/flask-logo.png and /dev/null differ url = `` { 0 } { 1 } / { 2 } '' .format ( base_url , release , text ) SPHINXOPTS = html_title = `` Flask Documentation ( { } ) '' .format ( version ) ProjectLink ( `` Flask Website '' , `` https : //palletsprojects.com/p/flask/ '' ) , linkcheck_anchors = False base_url = 'https : //github.com/pallets/flask/tree/ ' words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) Binary files /dev/null and b/docs/_static/flask.png differ html_static_path = [ `` _static '' ] from pallets_sphinx_themes import get_version ProjectLink ( 'Donate to Pallets ' , 'https : //psfmember.org/civicrm/contribute/transact ? reset=1 & id=20 ' ) , html_logo = '_static/flask.png ' 'sphinx.ext.autodoc ' , ] base_url = `` https : //github.com/pallets/flask/tree/ '' return rv : target : https : //palletsprojects.com/p/flask/ 'relations.html ' , ProjectLink ( `` Issue Tracker '' , `` https : //github.com/pallets/flask/issues/ '' ) , .. image : : _static/flask-logo.png html_static_path = [ '_static ' ] latex_additional_files = [ 'flaskstyle.sty ' , 'logo.pdf ' ] 'carbon_ads_args ' : 'zoneid=1673 & serve=C6AILKT & placement=pocooorg ' , 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , '404 ' : '404.html ' , url = ' { 0 } master/ { 1 } '.format ( base_url , text ) copyright = `` 2010 Pallets '' : class : floatingflask if text.endswith ( `` > '' ) : 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , def cut_module_meta ( app , what , name , obj , options , lines ) : : alt : Flask : web development , one drop at a time ' * * ' : [ html_favicon = '_static/flask-favicon.ico ' if packaging.version.parse ( release ) .is_devrelease : Pallets-Sphinx-Themes~=1.2.2 'project.html ' , : alt : Flask : web development , one drop at a time # from the environment for the first two . latex_use_parts = True del unwrap_decorators html_theme = 'flask ' 'sphinxcontrib.log_cabinet ' , inspect.getargspec = getargspec 'Issue Tracker ' , 'https : //github.com/pallets/flask/issues/ ' ) , 'carbon_ads.html ' , ProjectLink ( `` Donate to Pallets '' , `` https : //palletsprojects.com/donate '' ) , 'canonical_url ' : 'http : //flask.pocoo.org/docs/ { } /'.format ( version ) , docstring = inspect.getdoc ( obj ) or `` if text.endswith ( ' > ' ) : Binary files a/docs/_static/flask-icon.png and /dev/null differ 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , return old_getargspec ( getattr ( x , '_original_function ' , x ) ) 'sphinx.ext.intersphinx ' , from pallets_sphinx_themes import ProjectLink from __future__ import print_function project = `` Flask '' master_doc = `` index '' SPHINXBUILD = sphinx-build ProjectLink ( 'Flask Website ' , 'https : //palletsprojects.com/p/flask/ ' ) , singlehtml_sidebars = { `` index '' : [ `` project.html '' , `` localtoc.html '' ] } # linkcheck `` jinja '' : ( `` http : //jinja.pocoo.org/docs/ '' , None ) , def skip_internal ( app , what , name , obj , skip , options ) : 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , `` sphinxcontrib.log_cabinet '' , if release.endswith ( 'dev ' ) : `` itsdangerous '' : ( `` https : //itsdangerous.palletsprojects.com/ '' , None ) , html_theme_options = { `` index_sidebar_logo '' : False } SPHINXOPTS ? = project = 'Flask ' 'papersize ' : 'a4paper ' , Binary files a/docs/_static/pycharm-runconfig.png and /dev/null differ old_getargspec = inspect.getargspec words , text = text [ : -1 ] .rsplit ( `` < `` , 1 ) SPHINXBUILD ? = sphinx-build author = `` Pallets '' ProjectLink ( `` Source Code '' , `` https : //github.com/pallets/flask/ '' ) , rv._original_function = wrapped html_theme = `` flask '' ProjectLink ( 'Source Code ' , 'https : //github.com/pallets/flask/ ' ) , app.add_role ( `` gh '' , github_link ) html_additional_pages = { `` `` '' Remove metadata from autodoc output . '' '' '' copyright = '2010 Pallets Team ' `` sphinx.ext.intersphinx '' , # You can set these variables from the command line . `` sqlalchemy '' : ( `` https : //docs.sqlalchemy.org/ '' , None ) , html_logo = `` _static/flask-icon.png '' def github_link ( name , rawtext , text , lineno , inliner , options=None , content=None ) : `` werkzeug '' : ( `` https : //werkzeug.palletsprojects.com/ '' , None ) , : orphan : ] , unwrap_decorators ( ) def unwrap_decorators ( ) : app.connect ( 'autodoc-skip-member ' , skip_internal ) app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) % SPHINXBUILD % -M % 1 % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % % O % Binary files a/docs/_static/no.png and b/docs/_static/no.png differ 'itsdangerous ' : ( 'https : //pythonhosted.org/itsdangerous ' , None ) , if skip or _internal_mark_re.search ( docstring ) is not None : name , rawtext , text , lineno , inliner , options=None , content=None sphinx-issues~=1.2.0 url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) # - * - coding : utf-8 - * release , version = get_version ( 'Flask ' ) .. image : : _static/logo-full.png 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) , if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) 'project_links ' : [ `` * * '' : [ `` localtoc.html '' , `` relations.html '' , `` searchbox.html '' ] , Binary files a/docs/_static/debugger.png and b/docs/_static/debugger.png differ app.add_role ( 'gh ' , github_link ) % SPHINXBUILD % -M % 1 % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % `` python '' : ( `` https : //docs.python.org/3/ '' , None ) , html_favicon = `` _static/flask-icon.png '' `` wtforms '' : ( `` https : //wtforms.readthedocs.io/en/stable/ '' , None ) , 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , SPHINXPROJ = Flask # You can set these variables from the command line , and also 'searchbox.html ' , def update_wrapper ( wrapper , wrapped , * a , * * kw ) : set SPHINXPROJ=Flask sphinxcontrib-log-cabinet~=1.0.1 def github_link ( def getargspec ( x ) : lines [ : ] = [ import packaging.version import re if what ! = 'module ' : ( master_doc , 'Flask.tex ' , 'Flask Documentation ' , 'Pallets Team ' , 'manual ' ) , from pallets_sphinx_themes import ProjectLink , get_version ProjectLink ( `` PyPI releases '' , `` https : //pypi.org/project/Flask/ '' ) , `` index '' : [ `` project.html '' , `` localtoc.html '' , `` searchbox.html '' ] , functools.update_wrapper = update_wrapper : align : center % SPHINXBUILD % -M help % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % 'versions.html ' , Binary files /dev/null and b/docs/_static/flask-favicon.ico differ Sphinx~=2.2.0 .. rst-class : : hide-header Binary files a/docs/_static/yes.png and b/docs/_static/yes.png differ Binary files /dev/null and b/docs/_static/touch-icon.png differ % SPHINXBUILD % -M help % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % % O % return True latex_elements = { Binary files /dev/null and b/docs/_static/logo-full.png differ : align : right @ $ ( SPHINXBUILD ) -M $ @ `` $ ( SOURCEDIR ) '' `` $ ( BUILDDIR ) '' $ ( SPHINXOPTS ) $ ( O ) ( master_doc , `` Flask- { } .tex '' .format ( version ) , html_title , author , `` manual '' ) return issues_github_path = `` pallets/flask ''","['docs/Makefile', 'docs/_static/debugger.png', 'docs/_static/flask-favicon.ico', 'docs/_static/flask-icon.png', 'docs/_static/flask-logo.png', 'docs/_static/flask.png', 'docs/_static/logo-full.png', 'docs/_static/no.png', 'docs/_static/pycharm-runconfig.png', 'docs/_static/touch-icon.png', 'docs/_static/yes.png', 'docs/conf.py', 'docs/index.rst', 'docs/make.bat', 'docs/requirements.txt']",Merge pull request # 3376 from pallets/migrate-docs
51,4a8e75b10a50ae13e9b61763e680f3c9fd518ed3,2019-09-23 12:24:08-07:00,Install the pre-commit hooks : Install the pre-commit hooks : : Install the ` pre-commit framework ` _ . .. _pre-commit framework : https : //pre-commit.com/ # install,['CONTRIBUTING.rst'],Merge pull request # 3344 from hharutyunyan/fix-the-contibution-docs
52,e17c3423bd306b04d27b6a2e53c80f1ac2179054,2019-09-23 12:10:30-07:00,"7 . For maximum compatibility , the extension should support the same means Python 3.5 and newer . versions of Python that Flask supports . 3.6+ is recommended as of 7 . The active versions of Python should be supported . As of 2020 this supported versions . 2020 . Use `` python_requires= '' > = 3.6 '' `` in `` setup.py `` to indicate",['docs/extensiondev.rst'],Merge pull request # 3375 from pallets/ext-py-version
53,06507ed4e455dd8b94242d4477dce05b1d95c6c5,2019-09-23 08:33:50-07:00,"to contact the developers on the mailing list or Discord server . The best way for It must provide exactly one package or module named all extensions maintained and developed today , as they help the Flask collection of utilities and Flask extensions . Explore the many available on PyPI . '/backend ' : backend app.wsgi_app = ProxyFix ( app.wsgi_app ) ` Discord server ` _ to get some ideas for nice looking APIs . Especially if you do are installed automatically . If tests are invoked with `` python setup.py build your own extensions if you do not find the tools you need . .. code-block : : python relational database and user authentication . They will open a database .. _extension-dev : follow these guidelines : from werkzeug.utils import import_string , cached_property ` Official Pallets Themes ` _ . 6 . Approved extensions must define all their dependencies in the Flask previously had the concept of approved extensions . These came with to contact the developers on the mailing list or IRC channel . The best way for 3 . APIs of approved extensions will be checked for the following 7 . The documentation must use the `` flask `` theme from the .. _IRC channel : http : //flask.pocoo.org/community/irc/ : doc : ` /extensions ` in the community , and look for patterns to build your access . If no maintainer is available , give access to the Flask core team . 9 . The `` zip_safe `` flag in the setup script must be set to `` False `` , .. _mailinglist : https : //mail.python.org/mailman/listinfo/flask the logged in user . At the end of the request , the database connection them in most web applications . For example quite a lot of applications 4 . From a clone of the repository , an extension with its dependencies test suite also has to be part of the distribution . : ref : ` signals ` . You can provide custom classes for things like the request and release . Look for ways in which your project can be refactored into a chances are they will open a database connection at the beginning of the ` IRC channel ` _ to get some ideas for nice looking APIs . Especially if you do These types of patterns may be a bit outside the scope of Flask itself , named `` flask_extensionname `` . Snippet Archives < http : //flask.pocoo.org/snippets/ > ` _ . applications . Use the `` ext.init_app ( ) `` pattern . from werkzeug.contrib.fixers import LighttpdCGIRootFix `` flask_extension_name `` . must be a link to automatically install the development version should find a new maintainer and transfer access to the repository , connection at the beginning of the request and get the information for characteristics : < http : //flask.pocoo.org/extensions/ > ` _ in the community , and look for patterns to website must be in the PyPI metadata or the readme . link to the documentation , website ( if there is one ) and there Flask extensions . Explore the many ` extensions even if the extension would be safe for zipping . Certain things are common enough that the chances are high you will find : file : ` setup.py ` file unless a dependency can not be met because it is not .. _Discord server : https : //discord.gg/t6rrQZH response objects . Dig deeper on the APIs you use , and look for the To add WSGI middleware to your Flask application , wrap the application 's an approved extension has to support multiple applications own extensions if you do not find the tools you need . ` Official Pallets Themes ` _ . A link to the documentation or project ( `` PackageName==dev `` ) . 3 . The extension 's API must have the following characteristics : the sdist distribution . find a new maintainer including full source hosting transition and PyPI it must be possible to use the factory pattern for creating request and response objects . Dig deeper on the APIs you use , and look 7 . The active versions of Python should be supported . As of 2020 this end of the request , the database connection is closed again . from werkzeug import SharedDataMiddleware 4 . The license must be BSD/MIT/WTFPL licensed . Certain features and interactions are common enough that you will find specified in a `` requirements.txt `` file . The tests must be part of request and get the information of the currently logged in user . At the 1 . An approved Flask extension must provide exactly one package or module means Python 3.5 and newer . process . Use `` current_app `` instead of `` self.app `` , store internal WSGI application . For example if you want to use one of the are tested as part of Flask itself to ensure extensions do not break on Hooking in WSGI Middlewares 8 . The setup.py description ( and thus the PyPI description ) has to 5 . The naming scheme for official extensions is * Flask-ExtensionName * or new releases . If you want your own extension to be approved you have to or `` pytest `` . If not using `` tox `` , the test dependencies should be from werkzeug.wsgi import DispatcherMiddleware some vetting of support and compatibility . While this list became too test `` , test dependencies can be specified in the : file : ` setup.py ` file . The Flask also has the concept of approved extensions . Approved extensions 10 . An extension currently has to support Python 3.4 and newer and 2.7 . can do it like this : : documentation , PyPI , and any other services . If no maintainer from werkzeug.middleware.dispatcher import DispatcherMiddleware create your own . Read : doc : ` /extensiondev ` to develop your own Flask 5 . It must ship a testing suite that can be invoked with `` tox -e py `` extension author would like to move beyond the project , the project should difficult to maintain over time , the guidelines are still relevant to If you want to add a WSGI middleware to your application you can wrap the extension author would like to move beyond the project , the project behind Nginx : applications . : ref : ` signals ` . You can provide custom classes for things like the 2 . It must ship a testing suite that can either be invoked with `` make test `` `` wsgi_app `` attribute . For example , to apply Werkzeug 's from werkzeug.middleware.proxy_fix import ProxyFix customizations which are available out of the box in a Flask release . Look for It must be possible to use the factory pattern for creating from werkzeug.middleware.shared_data import SharedDataMiddleware ecosystem remain consistent and compatible . for the customizations which are available out of the box in a Flask : class : ` ~werkzeug.middlware.proxy_fix.ProxyFix ` middleware for running .. _mailinglist : http : //flask.pocoo.org/mailinglist/ must be installable with `` pip install -e . `` . * ExtensionName-Flask * . It must support multiple applications running in the same Python app.wsgi_app = LighttpdCGIRootFix ( app.wsgi_app ) create your own . Read : ref : ` extension-dev ` to develop your own Flask and publicly available . : doc : ` extensiondev ` . running in the same Python process . configuration and state per application instance . them in most web applications . For example , many applications use a middlewares from the Werkzeug package to work around bugs in lighttpd , you but Flask makes it easy to implement them . Some common patterns are '/backend ' : backend There are more user contributed snippets and patterns in the ` Flask from werkzeug import import_string , cached_property Wrapping `` app.wsgi_app `` instead of `` app `` means that `` app `` still points at your Flask application , not at the middleware , so you can Hooking in WSGI Middleware test `` the extension has to ensure that all dependencies for the test or `` python setup.py test `` . For test suites invoked with `` make is available , give access to the Pallets core team . ways in which your project can be refactored into a collection of utilities and 2 . The extension must be BSD or MIT licensed . It must be open source 1 . The naming scheme is * Flask-ExtensionName * or * ExtensionName-Flask * . are using relational databases and user authentication . In that case , collected in the following pages . 6 . The documentation must use the `` flask `` theme from the continue to use and configure `` app `` directly . : doc : ` /extensiondev ` . is closed .","['docs/appcontext.rst', 'docs/becomingbig.rst', 'docs/extensiondev.rst', 'docs/extensions.rst', 'docs/patterns/appdispatch.rst', 'docs/patterns/fileuploads.rst', 'docs/patterns/index.rst', 'docs/patterns/lazyloading.rst', 'docs/quickstart.rst']",Merge pull request # 3374 from pallets/ext-docs
54,12666af6b5474998907310b2f940aebdc3b5a362,2019-09-02 09:05:05-07:00,"So that we can import the module `` flaskr `` correctly , we need to run `` pip install -e . `` in the folder `` tutorial `` . from flaskr import create_app from flaskr import flaskr",['docs/testing.rst'],Merge pull request # 3349 from nathanmp/master
55,ca0acbaa5349046c44f8377efd0372eca9650748,2019-08-01 13:07:52-07:00,: func : ` ~flask.url_for ` . The code below checks if the come in . They can automatically inject values into a call to come in . They can automatically inject values into a call for : func : ` ~flask.url_for ` automatically . The code below checks if the,['docs/patterns/urlprocessors.rst'],Merge pull request # 3317 from csirmazbendeguz/patch-1
56,c074422cfdbcae3cef305631988288e13bbce2d1,2019-08-01 12:56:30-07:00,import packaging if release.endswith ( `` dev '' ) : if packaging.version.parse ( release ) .is_devrelease :,['docs/conf.py'],Merge pull request # 3321 from greyli/fix-gh-link-generator
57,b7f6fae9b34341b9be7742b86f6caffe07fc6f25,2019-07-25 11:33:36-07:00,"try : methods = adapter.allowed_methods ( ) except MethodNotAllowed as e : if hasattr ( adapter , `` allowed_methods '' ) : adapter.match ( method= '' -- '' ) from werkzeug.exceptions import MethodNotAllowed methods = adapter.allowed_methods ( ) else : pass methods = [ ] # fallback for Werkzeug < 0.7 methods = e.valid_methods except HTTPException :",['src/flask/app.py'],Merge pull request # 3315 from linchiwei123/cleanup
58,d0df619263c3264d11fbb8a11698a2b73a08722c,2019-07-22 13:30:43-07:00,"with ` Framework : : Flask < pypi_ > ` _ . new releases . These approved extensions are listed on the ` Flask on ` PyPI < https : //pypi.org/search/ ? c=Framework+ % 3A % 3A+Flask > ` _ . extensions are listed in the ` Extension Registry ` _ , which can be updated This documentation only touches the bare minimum for extension development . ideas for nice looking APIs . Especially if you do something nobody before same problem . This documentation only touches the bare minimum for extension out existing extensions on the ` Flask Extension Registry ` _ . If you feel follow these guidelines : Extension Registry ` _ and marked appropriately . If you want your own .. _Flask Extension Registry : http : //flask.pocoo.org/extensions/ While the ` PyPI < pypi_ > ` _ contains many Flask extensions , you may also avoids having multiple developers working in isolation on pretty much the .. _Extension Registry : http : //flask.pocoo.org/extensions/ on the ` PyPI ` _ . If you feel lost there is still the ` mailinglist ` _ and the on pretty much the same problem . you did , it might be a very good idea to get some more input . This not only new releases . If you want your own extension to be approved you have to by extension developers . You can also search PyPI for packages tagged While the ` Extension Registry ` _ contains many Flask extensions , you may Flask extensions are usually named `` Flask-Foo '' or `` Foo-Flask '' . Many on ` PyPI ` _ . an extension , but also avoids having multiple developers working in isolation search PyPI for packages tagged with ` Framework : : Flask < pypi_ > ` _ . ` IRC channel ` _ to get some ideas for nice looking APIs . Especially if you do extension to be approved you have to follow these guidelines : input . This not only generates useful feedback on what people might want from Flask extensions are usually named `` Flask-Foo '' or `` Foo-Flask '' . You can .. _PyPI : https : //pypi.org/search/ ? c=Framework+ % 3A % 3A+Flask If you want to learn more , it 's a very good idea to check out existing extensions lost there is still the ` mailinglist ` _ and the ` IRC channel ` _ to get some development . If you want to learn more , it 's a very good idea to check something nobody before you did , it might be a very good idea to get some more generates useful feedback on what people might want from an extension , but","['docs/extensiondev.rst', 'docs/extensions.rst']",Merge pull request # 3305 from greyli/update-extension-doc
59,d694eb443a6243e248df974e9cd64defb591bf38,2019-07-10 12:42:58-07:00,"cli.main ( args=sys.argv [ 1 : ] , prog_name= '' python -m flask '' if as_module else None ) Version 1.1.2 external debugger on Windows . : issue : ` 3297 ` __version__ = `` 1.1.2.dev '' cli.main ( prog_name= '' python -m flask '' if as_module else None ) Unreleased Work around an issue when running the `` flask `` command with an __version__ = `` 1.1.1 '' # TODO omit sys.argv once https : //github.com/pallets/click/issues/536 is fixed","['CHANGES.rst', 'src/flask/__init__.py', 'src/flask/cli.py']",Merge pull request # 3299 from pallets/click-args
60,1a6696da70923b2433b588ddcde90fd31ec296a6,2019-07-08 10:37:16-07:00,"import pytest self._warn ( ) ) return self.value def __ne__ ( self , other ) : def __eq__ ( self , other ) : self.value = value and will be removed in version 2.0.0. : issue : ` 3288 ` def __bool__ ( self ) : assert json_available ! = False # noqa E712 json_available = _DeprecatedBool ( `` flask.json_available '' , `` 2.0.0 '' , True ) from flask import json_available __nonzero__ = __bool__ def test_json_available ( ) : with some extensions . It will raise a deprecation warning when used , assert json_available warnings.warn ( self.message , DeprecationWarning , stacklevel=2 ) class _DeprecatedBool ( object ) : __version__ = `` 1.1.0 '' __version__ = `` 1.1.1.dev '' return other ! = self.value return other == self.value Unreleased def __init__ ( self , name , version , value ) : import warnings name , version self.message = `` ' { } ' is deprecated and will be removed in version { } . `` .format ( assert len ( rec.list ) == 3 Version 1.1.1 The `` flask.json_available `` flag was added back for compatibility def _warn ( self ) : assert json_available == True # noqa E712 from ._compat import json_available with pytest.deprecated_call ( ) as rec :","['CHANGES.rst', 'src/flask/__init__.py', 'src/flask/_compat.py', 'tests/test_deprecations.py']",Merge pull request # 3292 from pallets/deprecate-json-available
61,008d3388b9387245bc0df4887dab3671fd729646,2019-07-07 15:43:25-04:00,"< ! -- Tell us what should happen . -- > < ! -- * * This issue tracker is a tool to address bugs in Flask itself . Tell us what should happen . If you 'd like to report a bug in Flask , fill out the template below . Provide questions about using Flask or issues not related to Flask . * * Tell us what happens instead . < ! -- Tell us what happens instead . -- > your code . -- > * * This issue tracker is a tool to address bugs in Flask itself . questions about using Flask or issues not related to Flask . * * -- > Paste a minimal example that causes the problem . # Paste a minimal example that causes the problem . your code . < ! -- If you 'd like to report a bug in Flask , fill out the template below . Provide",['.github/ISSUE_TEMPLATE.md'],Merge pull request # 3290 from aadibajpai/master
62,6d0e79b33afe47525958dc23c1ebb2eea70f25fe,2019-07-02 11:43:47-07:00,"request.addfinalizer ( lambda : old_logger.setLevel ( logging.NOTSET ) ) old_logger = logging.getLogger ( `` flask.app '' ) `` 'app.logger ' is named ' { name } ' for this application , '' if _has_config ( old_logger ) and not _has_config ( logger ) : break if app.debug and logger.level == logging.NOTSET : for old_name in ( `` flask.app '' , `` flask '' ) : : param logger : The : class : ` ~logging.Logger ` to inspect . return ( if app.debug and not logger.level : or logger.filters logger.level ! = logging.NOTSET or logger.handlers detected that needs to be moved . : issue : ` 2866 ` import warnings with pytest.warns ( UserWarning ) : its properties against the defaults . ) `` `` '' Decide if a logger has direct configuration applied by checking def _has_config ( logger ) : old_logger = logging.getLogger ( old_name ) def test_warn_old_config ( app , request ) : `` should be moved to ' { name } ' . `` .format ( name=app.name , old_name=old_name ) `` but configuration was found for ' { old_name } ' , which '' assert app.logger.getEffectiveLevel ( ) == logging.WARNING or not logger.propagate `` `` '' same process . A warning will be shown if old configuration is same process . This may require adjusting logging configuration . ) `` no longer has an effect . The logging configuration '' # 1.1.0 changes name of logger , warn if config is detected for old warnings.warn ( old_logger.setLevel ( logging.DEBUG ) : issue : ` 2866 ` . # name and not new name","['CHANGES.rst', 'src/flask/logging.py', 'tests/test_logging.py']",Merge pull request # 3284 from pallets/logger-warning
63,6665c91e6fad7df5997c8f3ae2136049062c1b7f,2019-07-01 17:42:51-07:00,"`` Flask ( import_name ) `` . This reverts 1.0 's behavior of always `` flask.app `` . The level is only set during configuration , it to : data : ` ~logging.DEBUG ` . not different ones depending on `` app.debug `` . No handlers are ) If there are no handlers configured , a default handler will be See : ref : ` logging ` for information on how to log exceptions , such as by : attr : ` Flask.logger ` takes the same name as `` `` '' Get the the Flask apps 's logger and configure it if needed . : ref : ` logging ` for information about configuration . logger can also be used to log your own messages . logging.getLogger ( `` blueprintapp '' ) , `` handlers '' , [ _TestHandler ( ) ] : attr : ` app.import_name < flask.Flask.name > ` . same process . This may require adjusting logging configuration . .. versionchanged : : 1.1.0 hard-coding `` `` flask.app '' `` . monkeypatch.setattr ( be set to : data : ` ~logging.DEBUG ` . it does n't check `` app.debug `` each time . Only one format is `` `` flask.app '' `` . The level is only set during configuration , handlers are removed , and a handler is only added if no logged under the `` 'flask ' `` logger namespace . See : doc : ` /logging ` for information on how to log exceptions , such as by logger = logging.getLogger ( `` flask.app '' ) Flask uses standard Python : mod : ` logging ` . All Flask-related messages are In debug mode , the logger 's : attr : ` ~logging.Logger.level ` will used , not different ones depending on `` app.debug `` . No .. versionchanged : : 1.0 logger = logging.getLogger ( app.name ) .. code-block : : python If there are no handlers configured , a default handler will be added . application are logged with : meth : ` app.logger < flask.Flask.logger > ` , : class : ` ~logging.Logger ` . .. versionchanged : : 1.0.0 In debug mode , the logger 's : attr : ` ~logging.Logger.level ` will be set `` `` '' A standard Python : class : ` ~logging.Logger ` for the app , with : issue : ` 2866 ` . monkeypatch.setattr ( logging.getLogger ( `` flask '' ) , `` handlers '' , [ _TestHandler ( ) ] ) which takes the same name as : attr : ` app.name < flask.Flask.name > ` . This The logger name will be the same as logging to `` `` flask.app '' `` , in order to support multiple apps in the `` 'flask.app ' `` , and can be used to log messages for your application . : : configured . `` `` '' The `` 'flask.app ' `` logger , a standard Python : doc : ` /logging ` for information about configuration . logger = logging.getLogger ( `` flask_test '' ) `` `` '' Get the `` 'flask.app ' `` logger and configure it if needed . handlers are already configured . : meth : ` Flask.logger < flask.Flask.logger > ` returns the logger named added . See : doc : ` /logging ` for more information . does n't check `` app.debug `` each time . Only one format is used , .. _logging : removed , and a handler is only added if no handlers are already the same name as : attr : ` name ` . assert app.logger.name == `` flask.app '' Flask uses standard Python : mod : ` logging ` . Messages about your Flask assert app.logger.name == `` flask_test '' : attr : ` Flask.name ` ( the value passed as See : ref : ` logging ` for more information . The logger takes the same name as : attr : ` name ` rather than","['CHANGES.rst', 'docs/config.rst', 'docs/errorhandling.rst', 'docs/logging.rst', 'src/flask/app.py', 'src/flask/logging.py', 'tests/test_logging.py', 'tests/test_templating.py']",Merge pull request # 3282 from pallets/logger-name
64,043443d2d3432d8c182f059cf2f30967eda73d1f,2019-07-01 10:47:33-07:00,"assert 'tuple must have the form ' in str ( e ) __import__ ( root_mod_name ) assert 'it was a bool ' in str ( e ) try : have to be added to the pythonpath in order to make it possible to def find_package ( import_name ) : filename = sys.modules [ import_name ] .__file__ assert 'no filename is available ' in str ( excinfo ) assert ' A setup function was called ' in str ( e ) folder structure exists ( lib , share etc . ) . return os.path.dirname ( os.path.dirname ( spec.origin ) ) `` `` '' import the module . The prefix is the path below which a UNIX like # just a normal module import the module . The prefix is the path below which a UNIX like assert 'no filename is available ' in str ( excinfo.value ) import importlib.util assert 'closed ' in str ( e.value ) assert 'http : //localhost/foo/ ' in str ( e.value ) if spec.origin in { `` namespace '' , None } : not installed ) as well as the folder that contains the package or else : assert 'returned None ' in str ( e ) # ValueError : assert 'Unable to infer MIME-type ' in str ( excinfo.value ) return os.path.dirname ( spec.origin ) `` `` '' Finds a package and returns the prefix ( or None if the package is root_mod_name = import_name.split ( ' . ' ) [ 0 ] __import__ ( import_name ) if sys.version_info > = ( 3 , 4 ) : assert 'closed ' in str ( e ) # a package ( with __init__.py ) if loader is None or root_mod_name == '__main__ ' : pass # handled below have to be added to the pythonpath in order to make it possible to assert ' A setup function was called ' in str ( e.value ) def find_package ( import_name ) : return os.path.dirname ( next ( iter ( spec.submodule_search_locations ) ) ) package_path = _find_package_path ( root_mod_name ) def _find_package_path ( root_mod_name ) : assert 'tuple must have the form ' in str ( e.value ) return os.getcwd ( ) # - * we * raised ` ValueError ` due to ` spec ` being ` None ` if _matching_loader_thinks_module_is_package ( assert 'closed ' in str ( e ) package_path = os.getcwd ( ) except ( ImportError , ValueError ) : Fixes for PEP451 import loaders and pytest 5.x . : issue : ` 3275 ` raise ValueError ( `` not found '' ) # we were unable to find the ` package_path ` using PEP 451 loaders assert 'http : //localhost/foo/ ' in str ( e ) spec = importlib.util.find_spec ( root_mod_name ) `` `` '' assert 'it was a bool ' in str ( e.value ) # ImportError : the machinery told us it does not exist assert 'closed ' in str ( e.value ) loader , root_mod_name ) : 'your POST-request to this URL ' ) in str ( e.value ) assert 'Unable to infer MIME-type ' in str ( excinfo ) `` `` '' Finds a package and returns the prefix ( or None if the package is assert 'returned None ' in str ( e.value ) `` `` '' Find the path where the module 's root exists in '' '' '' else : if loader is None or import_name == '__main__ ' : module as a tuple . The package path returned is the module that would not installed ) as well as the folder that contains the package or # namespace package if spec is None : # - the module name is __main__ return package_path # - the module name was invalid root_mod_name , _ , _ = import_name.partition ( ' . ' ) 'your POST-request to this URL ' ) in str ( e ) folder structure exists ( lib , share etc . ) . elif spec.submodule_search_locations : module as a tuple . The package path returned is the module that would if _matching_loader_thinks_module_is_package ( loader , root_mod_name ) : filename = sys.modules [ root_mod_name ] .__file__","['CHANGES.rst', 'docs/tutorial/tests.rst', 'examples/tutorial/tests/test_db.py', 'flask/helpers.py', 'tests/test_basic.py', 'tests/test_helpers.py']",Merge pull request # 3278 from asottile/importlib_spec
65,5a04590e9c1f2aba03c2bd70a8b5fe1a18eecb56,2019-07-01 09:38:43-07:00,"def test_changelog_utf8_compatible ( ) : f.read ( ) import io OMITTED BINARY DATA with io.open ( `` CHANGES.rst '' , encoding= '' UTF-8 '' ) as f :","['CHANGES.rst', 'tests/test_meta.py']",Merge pull request # 3281 from asottile/utf8_changes
66,2675076cb77fb5d37f54aa05473157ae27be7c42,2019-06-27 08:04:31-07:00,"'filename * ' : `` UTF-8 '' % s '' % url_quote ( attachment_filename , safe=b '' '' ) , # `` : / '' are not safe in filename * value 'filename * ' : `` UTF-8 '' % s '' % url_quote ( attachment_filename ) , `` send_file `` url quotes the `` : '' and `` / '' characters for more compatible UTF-8 filename support in some browsers . : issue : ` 3074 ` ( u '' те : /ст '' , ' '' : / '' ' , `` % D1 % 82 % D0 % B5 % 3A % 2F % D1 % 81 % D1 % 82 '' ) ,","['CHANGES.rst', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 3273 from pallets/utf8-filename
67,6ed68f015a50ab35b84a8ea71b0f846ca6a75281,2019-06-26 14:43:36-07:00,"Version 1.0.4 outside debug mode , so error handlers can still access it . This The key information for `` BadRequestKeyError `` is no longer cleared __version__ = ' 1.0.4.dev ' requires upgrading to Werkzeug 0.15.5. : issue : ` 3249 ` # TODO : clean up once Werkzeug > = 0.15.5 is required __version__ = ' 1.0.3 ' elif not hasattr ( BadRequestKeyError , `` show_exception '' ) : else : e.show_exception = True Unreleased # Werkzeug > = 0.15 does add it , remove it in production if e.args [ 0 ] not in description : if e.args [ 0 ] not in e.get_description ( ) : description = e.get_description ( )","['CHANGES.rst', 'flask/__init__.py', 'flask/app.py']",Merge pull request # 3272 from pallets/keyerror
68,31d3c7e71941c3a1800f5e31064c9862da473d86,2019-06-23 15:43:47-07:00,"maintainer='Pallets team ' , returning the correct names when blueprints or modules were in 1.0 . ( ` # 2986 ` _ ) longer executed when an exception is raised . See installed . : pr : ` 2416 ` \titleformat { \section } { \Large } % Copyright 2010 Pallets set SOURCEDIR= . : issue : ` 2118 ` \vspace * { 6cm } % variable as well as `` SERVER_NAME `` are now properly used by the test client ` Official Pallets Themes ` _ . Released on June 13th 2013 , codename Limoncello . for the static folder . : class : ` ~flask.Flask ` and : class : ` ~flask.Blueprint ` now provide a .. _pallets/meta # 24 : https : //github.com/pallets/meta/issues/24 are : environ `` werkzeug.request `` will be `` None `` after the response was The : meth : ` flask.Flask.run ` method now accepts `` None `` for `` host `` in less bytes being transmitted over the network . It 's disabled by used in the default ` get_send_file_max_age ` implementation . .. _ # 2193 : https : //github.com/pallets/flask/pull/2193 The automatic JSON request data unpacking now looks at the charset \definecolor { InnerLinkColor } { rgb } { 0,0,0 } Jinja2 template loading syntax now allows `` ./ '' in front of Flask will no longer invoke the wrong error handlers if a proxy \addcontentsline { toc } { part } { \thepart\hspace { 1em } # 1 } % .. _Click : https : //click.palletsprojects.com/ `` flask.json.dumps `` to return bytestrings by default . : attr : ` ~Flask.jinja_env ` was already accessed . ( ` # 2373 ` _ ) Fix crash when running under PyPy3 . : pr : ` 1814 ` `` sphinx '' , Released 2017-05-16 .. _Twisted : https : //twistedmatrix.com/trac/ htmlfaq `` Programming Language : : Python : : 2.7 '' , Artwork License Bugfix release , released on July 6th 2011 rules added to the url map . Fixed a bug with subdomains that was caused by the inability to def parse_changelog ( ) : method . Reduces JSON response size when set_init_version ( version ) : data : ` ~errno.ENOTDIR ` errors . ( ` # 2581 ` _ ) Added wrapper module around simplejson and added default serialization `` flask.run ( ) `` method as it works faster and more reliable due to a deploying/index new `` MAX_CONTENT_LENGTH `` configuration value . Added support for context binding that does not require the use of `` Intended Audience : : Developers '' , the response to make testing JSON response much easier . : pr : ` 2358 ` Removed deprecated internal `` flask.session `` module alias . Use `` request `` , `` session `` and `` g `` are now also added as proxies to .. _ # 2352 : https : //github.com/pallets/flask/pull/2352 decorating of pluggable ( class-based ) views . \markboth { } { } \par } % maintainer_email='contact @ palletsprojects.com ' , _date_strip_re = re.compile ( r ' ( ? < =\d ) ( st|nd|rd|th ) ' ) `` docs '' : [ allowed due to the different escaping behavior . Added : meth : ` flask.Config.from_mapping ` . optional and supposed to be used by extensions and applications . If .. _uwsgi : http : //projects.unbit.it/uwsgi/ content type . : pr : ` 2358 ` logging blueprints patterns/index flags=re.IGNORECASE install-dev : { \parindent \z @ % \center will not be available and blueprint 's context processors are not dispatching as well as error handlers . : meth : ` ~flask.Flask.add_url_rule ` can now also register a view test client has not the ability to preserve the request context =================== Flask itself and no longer of the test client . This cleaned up some templating Raise an : exc : ` AttributeError ` in : func : ` flask.helpers.find_package ` with a popd test-all : install-dev docs : clean-pyc install-dev Python version . : pr : ` 2825 ` Refactored Flask internally . It now consists of more than a single TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR templates . One has to be very careful with those though because Bugfix Release , released on July 15th 2010 different hash seeds between different workers . \refstepcounter { part } % % SPHINXBUILD % > NUL 2 > NUL with io.open ( 'README.rst ' , 'rt ' , encoding='utf8 ' ) as f : INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT < http : //werkzeug.pocoo.org/docs/middlewares/ > ` _ . Prevent ` flask run ` from showing a NoAppException when an ImportError occurs returned to the WSGI server but has the advantage that the garbage changed = [ ] Removed deprecated module functionality . notice , this list of conditions and the following disclaimer in the argument and sets it on : attr : ` ~Flask.url_map ` . : issue : ` 1559 ` Added : meth : ` flask.Config.from_mapping ` . Implemented generic : ref : ` views ` ( class-based views ) . Do n't modify the session on : func : ` flask.get_flashed_messages ` if Added missing future import that broke 2.5 compatibility . changelog \end { titlepage } % : meth : ` flask.Flask.add_template_filter ` and with a useful message explaining why it is raised when a PEP 302 Added support for copying of request contexts for better working the request object when shutting down the request . This means that added the ability to register application wide error handlers The context preservation on exceptions is now an integral component achieve the same functionality . .. _ # 2374 : https : //github.com/pallets/flask/pull/2374 to skip automatically loading dotenv files . ( ` # 2722 ` _ ) .. _ # 2691 : https : //github.com/pallets/flask/pull/2691 % SPHINXBUILD % -M help % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % various bugfixes Some rights reserved . Using ` Flask-SQLAlchemy < https : //flask-sqlalchemy.palletsprojects.com/ > ` _ , `` Issue tracker '' : `` https : //github.com/pallets/flask/issues '' , default , and an indented format in debug mode . : pr : ` 2193 ` improved to describe why the type is invalid . : pr : ` 2256 ` default . Added : func : ` flask.after_this_request ` . @ $ ( SPHINXBUILD ) -M $ @ `` $ ( SOURCEDIR ) '' `` $ ( BUILDDIR ) '' $ ( SPHINXOPTS ) $ ( O ) `` app.run `` . `` # 2109 `` , `` # 2152 `` build ( ) Added : meth : ` flask.Config.get_namespace ` . Refactored test client internally . The `` APPLICATION_ROOT `` can be configured with the new `` TEMPLATES_AUTO_RELOAD `` config key . Fixed a error reporting bug with : meth : ` flask.Config.from_envvar ` for `` app.run `` . : issue : ` 2109 ` , : pr : ` 2152 ` Flask will automatically detect the factory ( `` create_app `` or `` make_app `` ) ( temporarily ) dropped support for zipped applications . This was a a Internal Server Error ( pull request `` # 2006 `` ) . fixed a bug with subdomains that was caused by the inability to The request context is now available within the with statement { \py @ TitleColor\thesection } { 0.5em } { \py @ TitleColor } { \py @ NormalColor } Flask project , but does not indicate endorsement by the project . .. _ # 2730 : https : //github.com/pallets/flask/pull/2730 .. _ # 2586 : https : //github.com/pallets/flask/issues/2586 statement did not trigger the execution of the teardown handlers . Added : meth : ` ~flask.Flask.make_default_options_response ` which can Read more about ` Sphinx < http : //www.sphinx-doc.org > ` _ . Unbound locals now raise a proper : exc : ` RuntimeError ` instead Unregister a circular dependency between the WSGI environment and ignore . : pr : ` 2693 ` `` flask.json.jsonify `` now supports the `` datetime.date `` type . Changed how the teardown system is informed about exceptions . This is now Templates are no longer automatically reloaded outside of debug mode . This Exceptions during teardown handling will no longer leave bad `` flask.g `` is now stored on the app context instead of the request Flask Documentation .. _App Engine : https : //cloud.google.com/appengine/docs/ goto end echo.installed , then set the SPHINXBUILD environment variable to point : func : ` flask.send_file ` now emits etags and has the ability to break Added support for returning tuples in the form `` ( response , distinguish error from success cases . of a value error which usually would result in a 500 internal server Added support for explicit root paths when using Python 3.3 's namespace added support for : func : ` ~flask.send_file ` test : clean-pyc install-dev .. _click : http : //click.pocoo.org/ : maxdepth : 2 .. _Werkzeug : https : //palletsprojects.com/p/werkzeug/ as well as documentation . log request handling exceptions to that logger when not in debug .. _username : https : //help.github.com/articles/setting-your-username-in-git/ tools which build Flask instances programmatically . The Flask class stricter about header encodings than PEP 3333 . ( ` # 2766 ` _ ) prepare for Python 3.3 port . prefix . This makes it possible to bind a whole module to a error handler if desired . .. _ # 2651 : https : //github.com/pallets/flask/issues/2651 well as error handlers . Fixed Python 3 bug when a handler from 2 . Redistributions in binary form must reproduce the above copyright ` request ` , ` session ` and ` g ` are now also added as proxies to the template HTTP exceptions and Bad Request errors can now be trapped so that `` autoescape `` tag . extensions Error handlers that match specific classes are now checked first , `` Topic : : Software Development : : Libraries : : Application Frameworks '' , It is not possible to define user exception handlers . That way you if `` % 1 '' == `` '' goto help instructions for web development with Flask . headers ) `` from a view function . .. _Click : http : //click.pocoo.org/ show up normally in the traceback . the test client when absolute URLs were requested . archive ( usually a .egg ) prior to Python 2.7 . % use inconsolata font `` sphinx-issues '' , Version 0.10.2 module setups . echo.If you do n't have Sphinx installed , grab it from exit /b 1 from pallets_sphinx_themes import ProjectLink .. _Twisted : https : //twistedmatrix.com/ `` Programming Language : : Python : : 3.6 '' , mode . This makes it possible to receive mails on server errors Pallets-Sphinx-Themes~=1.1.4 not called . Additional Notes Added signalling support based on blinker . This feature is currently Non permanent sessions are not affected by this and will always it does since 0.10 . `` Programming Language : : Python : : 3 '' , exception is passed through . Using ` Flask-SQLAlchemy < http : //flask-sqlalchemy.pocoo.org/ > ` _ , The following old deprecated code was removed . ( ` # 2385 ` _ ) application . : pr : ` 2259 ` OPTIONS implementation . `` tojson `` used in templates is now safe by default due . This was `` click > =5.1 '' , extensiondev popd Fixed an assumption in sessions implementation which could break Fixed an issue with the undocumented `` flask.session `` module to not \pagestyle { plain } controls by file extension . The default max-age for `` send_file `` the : attr : ` ~flask.Flask.config ` is now available in the templates def make_git_commit ( message , * args ) : * Neither the name of the copyright holder nor the names of its flags=re.DOTALL | re.MULTILINE the request context is now available within the with statement making Fix a bug in ` safe_join ` on Windows . Fixed an issue causing exceptions raised before entering a request Fixed the Jinja2 environment 's list_templates method not returning the Implemented the virtual : mod : ` flask.ext ` package to import Added the ability to limit the incoming request data with the new < https : //sentry.io/signup/ > ` _ which you can try for free . Sentry was created . echo.The 'sphinx-build ' command was not found . Make sure you have Sphinx you want to use it , make sure to have ` blinker ` _ installed . This part of the documentation , which is mostly prose , begins with some \ifx\pdfoutput\undefined\else python_requires= '' > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * '' , added external URL support . config This part of the documentation just tries to cover the very basics so `` make_app `` from `` FLASK_APP `` . : pr : ` 2297 ` coverage html is stored in the session you can still modify it in an after some internal logic and lowers the odds of runaway request contexts Request context preservation in debug mode now keeps the exception `` AS IS '' AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT The default max-age for ` send_file ` and static files can be configured of the software without written consent . Fixed an issue where registering the same method twice for the same < https : //werkzeug.palletsprojects.com/middleware/ > ` _ . Added an `` endpoint `` method to the flask application object which if version in tags : `` Documentation '' : `` http : //flask.palletsprojects.com/ '' , request context but only provides access to the current application . This `` pytest '' , return Popen ( [ 'git ' , 'diff ' , ' -- quiet ' ] ) .wait ( ) == 0 make_git_commit ( 'Bump version number to % s ' , version ) data for token verification into the session . Provides different ways to look at the current ` IRI If you are looking for information on a specific function , class or Added : attr : ` flask.Flask.request_globals_class ` to allow a specific class to request are handled by the app 's error handlers . ( ` # 2254 ` _ ) \ifnum \c @ secnumdepth > \m @ ne from subprocess import PIPE , Popen \begin { flushright } % : class : ` ~logging.Logger ` , so head over to the official : mod : ` logging ` is raised in a request handler . Python version . ( ` # 2825 ` _ ) \renewcommand { \footrulewidth } { 0.4pt } extension . echo.to the full path of the 'sphinx-build ' executable . Alternatively you The : meth : ` flask.render_template ` method now accepts a either an iterable of \fancypagestyle { plain } { be used by subclasses to alter the default behavior for `` OPTIONS `` .. _click : https : //click.palletsprojects.com/ broke compatibility with the common case of people putting binary release : Blueprint view function names may not contain dots . : pr : ` 2450 ` exposed from . The cli command now responds to `` -- version `` . windows . : pr : ` 2709 ` also adds support for URL generation without an active request context . mimetype parameter . `` sphinx_issues '' , appcontext your own code . ~~~~~~~~~~~~ working as expected . : issue : ` 2735 ` `` tox '' , Added : meth : ` ~flask.Flask.make_default_options_response ` 1 . Redistributions of source code must retain the above copyright Flask in debug mode will now complain with an assertion error if a `` False `` it will only be modified if the session actually modifies . The : func : ` flask.url_for ` function now can also explicitly generate PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF `` Topic : : Internet : : WWW/HTTP : : WSGI : : Application '' , universal = true ( : meth : ` Flask.before_first_request ` ) Added an option to generate non-ascii encoded JSON which should all dependencies are installed . contributors may be used to endorse or promote products derived from `` pointsize '' : `` 12pt '' , Flask will now raise an error if you attempt to register a new function `` flask.Flask.app_ctx_globals_class `` which is a better name to what .. _ # 2736 : https : //github.com/pallets/flask/issues/2736 : meth : ` flask.Blueprint.add_app_template_filter ` . message categories in separate blocks , through a `` category_filter `` : func : ` flask.send_file ` now emits etags and has the ability to do 'tox ' , a custom error handler if desired . fixed another issue with loading templates from directories when .. _artwork-license : info ( 'Tagging `` % s '' ' , tag ) Fixed an etags bug when sending a file streams with a name . .. _ # 2354 : https : //github.com/pallets/flask/pull/2354 \addcontentsline { toc } { part } { # 1 } % meaning . forms , with or without modification , are permitted provided that the latex_use_parts = True modules are located but also an instance path which is the .. _MarkupSafe : https : //palletsprojects.com/p/markupsafe/ Removed deprecated module functionality . in the event that a `` BaseException `` such as `` KeyboardInterrupt `` added support for categories for flashed messages . .. _Werkzeug : http : //werkzeug.pocoo.org/ disabled if the user registered an overriding rule with the 'flask = flask.cli : main ' , registration . instances programmatically . The Flask class will fall back to using import fail ( 'Current version is not numeric ' ) .. _pytest : https : //docs.pytest.org/ Fix incorrect JSON encoding of aware , non-UTC datetimes . : pr : ` 2374 ` { \rm\Huge \ @ title \par } % .. _ # 2414 : https : //github.com/pallets/flask/pull/2414 make_git_tag ( version ) \begin { titlepage } % with proper behavior whether or not a config file is provided . Release does no longer include development leftover files ( .git Blueprints can provide blueprint specific error handlers . 'itsdangerous > =0.24 ' , Fixed another issue with loading templates from directories when method , this part of the documentation is for you . ========= Added `` SESSION_REFRESH_EACH_REQUEST `` config key that controls the : end release = egg_info -Db `` `` Programming Language : : Python : : 2 '' , Released on April 26th 2018 `` app.url_build_error_handlers `` reraises the `` BuildError `` . for line in lineiter : `` Flask-Script `` . 'sphinx ' , python setup.py audit Added the `` JSONIFY_MIMETYPE `` configuration variable ( pull request `` # 1728 `` ) . security Unregister a circular dependency between the WSGI environment and Fixed an issue where the test client if used with the `` with '' statement did not internal server error if not handled . This is a backwards log request handling exceptions to that logger when not in debug Do n't modify the session on : func : ` flask.get_flashed_messages ` if there custom template filters application wide , % This \def is required to deal with multi-line authors ; it function on an already used endpoint . with open ( filename ) as f : \titleformat { \paragraph } { \large } % contributing ( 'Code ' , 'https : //github.com/pallets/flask ' ) , .. _Flask-SQLAlchemy : https : //flask-sqlalchemy.palletsprojects.com/ Flask is licensed under a three clause BSD License . It basically means : Test client has not the ability to preserve the request context for see : ref : ` instance-folders ` . Added wrapper module around simplejson and added default provided that the following conditions are met : the error handling process . `` template_filter `` method family . license \fi .. _ # 2900 : https : //github.com/pallets/flask/issues/2900 Do n't leak exception info of already catched exceptions to context teardown single file . Flask now orders JSON keys by default to not trash HTTP caches due ) override the Flask class . ( master_doc , `` Flask- { } .tex '' .format ( version ) , html_title , author , `` manual '' ) achieve the same functionality . API Reference platforms='any ' , .. _ # 1621 : https : //github.com/pallets/flask/pull/1621 contexts lingering around . part of Flask ( Flask itself as well as the examples and the unittests ) Fix encoding behavior of `` app.config.from_pyfile `` for Python 3 . \fancyfoot [ RE ] { { \nouppercase { \leftmark } } } Applications now not only have a root path where the resources and modules through the error handling process . the implementation of the sessions can be changed without % pdfLaTeX does n't support Unicode . JSON responses are now terminated with a newline character , because After request functions are now called in reverse order of .. _ # 2256 : https : //github.com/pallets/flask/pull/2256 Fixed an issue where registering the same method twice for the same endpoint modules were used . Fixed broken ` test_appcontext_signals ( ) ` test case . Added a workaround for chrome 's cookies in localhost not working reqcontext info ( This license applies to all files in the Flask repository and source do conditional responses builtin . deploying/index the user created circular dependencies themselves . The endpoint for the : meth : ` flask.Module.add_url_rule ` method is now Added a `` PROPAGATE_EXCEPTIONS `` configuration variable that can be with greenlets . Repackage 0.12.3 to fix package layout issue . : issue : ` 2728 ` url='https : //www.palletsprojects.com/p/flask/ ' , contents = re.sub ( becomingbig base classes . : pr : ` 1936 ` generated links . ( ` # 2730 ` _ ) context . : ref : ` authors ` section . .. _ # 2416 : https : //github.com/pallets/flask/pull/2416 The following section contains the full license texts for Flask and the Added support for explicit root paths when using Python 3.3 's example . ( master_doc , `` Flask.tex '' , `` Flask Documentation '' , `` Pallets Team '' , `` manual '' ) : meth : ` ~flask.Flask.get_send_file_max_age ` hook for subclasses to Try to follow ` PEP8 ` _ . We have a pre-commit config and tests that will request handler . met : result if parsing fails when `` silent `` is true . ( ` # 2651 ` _ ) The Flask and Blueprint classes now have a non-decorator method for instructions for web development with Flask . Added `` message_flashed `` signal that simplifies flashing testing . usage outside of macros might cause caching . : pr : ` 2326 ` endpoint would trigger an exception incorrectly . if next ( lineiter ) .count ( '- ' ) ! = len ( match.group ( 0 ) ) : Use Last-Modified for static file sending instead of Date which contributors may be used to endorse or promote products derived from is stored in the session you can still modify it in an after request cases . : issue : ` 2526 ` method . Released 2010-07-27 , codename Whisky exit /b 1 the request object when shutting down the request . This means that added a : func : ` flask.make_response ` function that simplifies return datetime.strptime ( string , ' % B % d % Y ' ) Correctly invoke response handlers for both regular request dispatching as notice and this list of conditions . license= '' BSD-3-Clause '' , 'Programming Language : : Python : : 3.4 ' , .pyc files ) THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS was not reliable and caused issues on Google 's App Engine . Until `` flask.ext `` is now deprecated . : pr : ` 1484 ` The development server uses threads by default . : pr : ` 2529 ` templating while 1 : it possible to further push the request context or pop it . now hardcoded but the default log handling can be disabled through the ( 'Issue tracker ' , 'https : //github.com/pallets/flask/issues ' ) , security database connection errors , timeouts from remote resources etc . ) . namespace packages . continue `` make test `` runs the basic test suite with `` pytest `` parts = [ int ( i ) for i in version.split ( ' . ' ) ] Made Flask support custom JSON mimetypes for incoming data . html_logo = `` _static/flask-icon.png '' Marcus Unterwaditzer ( untitaker ) in 0.5 due to the improved module support . to skip automatically loading dotenv files . : issue : ` 2722 ` context which makes them available in imported templates . One has to be Updated extension dev guidelines . echo.http : //sphinx-doc.org/ info ( 'Setting __init__.py version to % s ' , version ) % generating document info in the PDF file . import wheel # noqa : F401 Sessions can be set to be permanent now on a per-session basis . https : //github.com/pallets/flask/pull/1262 -- this came up originally as a \nobreak % Apply following fix only on PDF output , i.e . pdfoutput macro is not 'Topic : : Internet : : WWW/HTTP : : Dynamic Content ' , Bugfix release , released on June 29th 2011 Added `` create_jinja_loader `` to override the loader creation Fix a bug in `` safe_join `` on Windows . pleasant experience with Unicode related things . some problems for package managers . you can reintroduce them again yourself trivially . Using them however is LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A SPHINXPROJ = Flask Changelog template loading . Added support for Google Appengine . } , push/pop an extra app context . ( ` # 2900 ` _ ) \pdfinfo { that can invoke Flask CLI commands for testing . ( ` # 2636 ` _ ) \ @ thanks Flask no longer internally depends on rules being added through the provided a filename , which for example allows changing cache ( ` # 1421 ` _ ) * The `` # get-help `` channel on our Discord chat : https : //discordapp.com/invite/t6rrQZH \renewcommand\part { % .. _ # 2373 : https : //github.com/pallets/flask/pull/2373 working as expected . ( ` # 2735 ` _ ) `` flask.g `` now can be used with the `` in `` operator to see what 's defined on them you can reintroduce them again yourself trivially . Using behavior for `` OPTIONS `` responses . `` flask.Flask.app_ctx_globals_class `` which is a better name to what it where used . ` Sharing your Localhost Server with Localtunnel < http : //flask.pocoo.org/snippets/89/ > ` _ If you are looking for information on a specific function , class or fail ( 'You need to install the wheel package . ' ) Removed custom JSON HTTP exception subclasses . If you were relying % SPHINXBUILD % > NUL 2 > NUL a template load path . Previously this caused issues with HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , was incorrectly introduced in 0.6 . Module support and internal request handling refactoring to better Fixed an issue with the undocumented ` flask.session ` module to not : meth : ` flask.Blueprint.add_app_template_filter ` . quickstart Added external URL support . support pluggable applications . conditional responses builtin . Changed default cookie serialization format from pickle to JSON to now be directly set , instead of per `` client.get `` . if errorlevel 9009 ( session cookie cross-subdomain wide . url= '' https : //palletsprojects.com/p/flask/ '' , .. _official packaging guide : https : //packaging.python.org/tutorials/packaging-projects/ /Author ( \ @ author ) errors , timeouts from remote resources etc . ) . customization of how JSON is handled by Flask or any Flask added a `` PROPAGATE_EXCEPTIONS `` configuration variable that can be class to be used on creation of the : data : ` ~flask.g ` instance of refactored internal request dispatching . `` send_file `` has been removed . : issue : ` 104 ` , : pr ` 1849 ` @ ECHO OFF Released 2016-06-07 `` # 2118 `` . collector is not needed on CPython to tear down the request unless `` make docs `` builds the HTML documentation to different hash seeds between different workers . .. _ # 2693 : https : //github.com/pallets/flask/pull/2693 `` ImportError `` occurs within the imported application module . in 0.5 due to the improved module support . .. _ # 2692 : https : //github.com/pallets/flask/issues/2692 'Programming Language : : Python : : 2.7 ' , the logger switches to `` DEBUG `` mode now if debug is enabled . cases . ( ` # 2526 ` _ ) except ValueError : teardown handlers . : pr : ` 1393 ` Deprecated `` request.json `` in favour of `` request.get_json ( ) `` . ( bugfix release , released on June 14th 2013 ) Error handlers that match specific classes are now checked first , from collections import OrderedDict SUCH DAMAGE . chrome . JSON responses are now terminated with a newline character , because it is a .. _ # 2436 : https : //github.com/pallets/flask/pull/2436 THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND 'Framework : : Flask ' , set BUILDDIR=_build The Flask and Blueprint classes now have a non-decorator method for adding the server OS ( pull request `` # 1763 `` ) . them however is strongly discouraged as the interface was flawed . Fixed an etags bug when sending a file streams with a name . Version 0.11.2 Released 2011-07-06 `` Werkzeug > =0.14 '' , drop files that are modified at runtime ( uploads etc. ) . Also this is Make `` flask.safe_join `` able to join multiple paths like : copyright : 2010 Pallets Added ` appcontext_pushed ` and ` appcontext_popped ` signals . Bugfix release , released on March 31st 2017 Fixed an issue with query parameters getting removed from requests .tox/pypy/site-packages/flask Fixed a bug that prevented `` FLASK_APP=foobar/__init__.py `` from working . See Refactored session support into a session interface so that Flask will now log by default even if debug is disabled . The log format is `` werkzeug '' : ( `` http : //werkzeug.pocoo.org/docs/ '' , None ) , called . find . -name ' * .pyo ' -exec rm -f { } try : Fixed a security problem that allowed clients to download arbitrary files from setuptools import find_packages .. _ # 2288 : https : //github.com/pallets/flask/pull/2288 General License Definitions : meth : ` flask.Flask.send_static_file ` ( used for the default static file .. _Dive Into HTML5 : http : //diveintohtml5.info/ already configured . ( ` # 2436 ` _ ) space included by default after separators . work properly on Python 2.5 . It should not be used but did cause : orphan : at the end of a request regardless of whether an exception occurred . 7 . The documentation must use the `` flask `` theme from the ` Official sphinx-issues~=1.2.0 https : //pytest.org Fixed `` send_from_directory `` not expanding to the application root \cleardoublepage % Flask project , but does not indicate endorsement by the project . Added ` flask.request.get_json ( ) ` as a replacement for the old .. _utilities for testing : https : //click.palletsprojects.com/testing/ \cleardoublepage Fixed broken `` test_appcontext_signals ( ) `` test case . Added the `` JSONIFY_PRETTYPRINT_REGULAR `` configuration variable . URL rules specific to a given HTTP method . .. _Official Pallets Themes : https : //pypi.org/project/pallets-sphinx-themes/ slightly different as the `` request `` , `` session `` and `` g `` objects `` flask.g `` now gained a `` get ( ) `` method for not erroring out on non Redistribution and use in source ( SVG ) and binary ( renders in PNG , etc . ) Flask Artwork License extensions from . Released 2012-07-01 `` flask.json.jsonify `` now supports the `` datetime.date `` type ( pull request : meth : ` Request.get_json ` does n't cache the result if parsing fails { \large specify the server name . The server name can now be set with the The : class : ` flask.Flask ` class will avoid importing the provided \ @ afterheading } Templates can now be rendered without request context . The behavior is ( ` # 2314 ` _ ) arguments , using default values when `` None `` . This allows for calling run Flask no longer internally depends on rules being added through the pluggable ( class-based ) views . logger is configurable now to better support unittests . fixes an issue with template loading from directories when modules Disable logger propagation by default for the app logger . Fixed an issue where the subdomain setting for modules was # ! /usr/bin/env python NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS Added a workaround for a limitation in Python 3.3 's namespace version = re.search ( r '' __version__ = \ ' ( . * ? ) \ ' '' , f.read ( ) ) .group ( 1 ) they show up normally in the traceback . version = re.search ( r'__version__ = \ ' ( . * ? ) \ '' , f.read ( ) ) .group ( 1 ) .. _ # 2259 : https : //github.com/pallets/flask/pull/2259 lineiter = iter ( f ) folder for themes , built documentation in zip and pdf file and some r'released on ( \w+\s+\d+\w+\s+\d+ ) ( ? : , codename ( . * ) ) ? ' , no longer arguments to the response object , they now have a defined kicks in . Removed custom JSON HTTP exception subclasses . If you were relying on them `` dotenv '' : [ `` python-dotenv '' ] , convention that UNIX text files end with a newline and some clients do n't latex_use_modindex = False the perfect place to put configuration files etc . For more information : meth : ` flask.Flask.add_template_filter ` and `` SERVER_NAME `` . : pr : ` 2282 ` Mimetype guessing and etag support based on file objects is now .. _Werkzeug documentation : http : //werkzeug.pocoo.org/docs/debug/ # using-the-debugger serialization of datetime objects . This allows much easier Added : meth : ` flask.Config.get_namespace ` . Redistribution and use in source and binary forms of the software as removed support for ` create_jinja_loader ` which is no longer used `` send_from_directory `` now raises BadRequest if the filename is invalid on etc. ) . Also this is conceptually only instance depending and outside `` OPTIONS `` method . ( ` # 1489 ` _ ) errors . be used on creation of the : data : ` ~flask.g ` instance of each request . 'Development Status : : 5 - Production/Stable ' , from pallets_sphinx_themes import get_version \titleformat { \subsubsection } { } % Added : meth : ` flask.Config.from_json ` . 'coverage ' , Released 2010-05-28 , codename Schnaps not through a context processor which makes it available even in imported : meth : ` ~flask.Flask.after_request ` handlers are now also invoked or app context to be passed to teardown handlers . Added : func : ` flask.stream_with_context ` and the ability to push contexts copyright = `` 2010 Pallets '' users debug when the wrong templates are loaded . designated place to drop files that are modified at runtime ( uploads Added `` TESTING `` switch that can activate unittesting helpers . * Redistributions of source code must retain the above copyright \rm\Large \partname~\thepart result in less bytes being transmitted over the network . It 's .. _ # 2385 : https : //github.com/pallets/flask/issues/2385 : ref : ` upgrading-to-new-teardown-handling ` MRO . ( ` # 2362 ` _ ) The : class : ` flask.Flask ` class will avoid importing the provided import name \fancyfoot [ LE , RO ] { { \thepage } } the `` SERVER_NAME `` config key . This key is now also used to set \fancyhead [ LE , RO ] { { \ @ title , \py @ release } } ) .. _Official Pallets Themes : https : //pypi.org/project/Pallets-Sphinx-Themes/ reqcontext `` AUTHORS '' hereby refers to all the authors listed in the local debug server through the click CLI system . This is recommended lowercase-version `` options `` . : issue : ` 1288 ` identify the issue . This also helps check that the issue is not with is slightly different as the `` request `` , `` session `` and `` g `` development server over HTTPS . : pr : ` 2606 ` .. _ # 2316 : https : //github.com/pallets/flask/pull/2316 % % \usepackage { textcomp } might occur during request processing ( for instance database connection echo.to the full path of the 'sphinx-build ' executable . Alternatively you 7 . The documentation must use the `` flask `` theme from the htmlfaq Allow IP address as exact session cookie domain . ( ` # 2282 ` _ ) echo.installed , then set the SPHINXBUILD environment variable to point Fix incorrect JSON encoding of aware , non-UTC datetimes . ( ` # 2374 ` _ ) .. include : : .. /artwork/LICENSE unnecessary white space included by default after separators . This part of the documentation , which is mostly prose , begins with some The `` : ref : ` artwork-license ` `` applies to the project 's Horn-Logo . .. _ # 2666 : https : //github.com/pallets/flask/issues/2666 ( pull request `` # 1515 `` ) . parts [ -1 ] += 1 ` Deploying Flask on Webfaction < http : //flask.pocoo.org/snippets/65/ > ` _ `` itsdangerous > =0.24 '' , Revert a behavior change that made the dev server crash instead of Released 2016-05-29 , codename Absinthe tutorial/index Released 2011-09-29 , codename Rakija The config object is now available to the template as a real global and \par echo . back to `` application/octet-stream `` . : pr : ` 1988 ` this software without specific prior written permission . ) ) , `` make test-all `` runs the full test suite with `` tox `` Updated extension dev guidelines . Non permanent sessions are not affected by this and will always Sphinx~=1.8.0 packages . $ ( MAKE ) -C docs html sys.exit ( 1 ) contributors . It was created by Armin Ronacher . The core maintainers Changed logic for picking defaults for cookie values from sessions views < http : //www.joelonsoftware.com/articles/Unicode.html > ` _ . This part of the NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF time . < https : //developers.google.com/speed/libraries/devguide > ` _ to load jQuery : notice , this list of conditions and the following disclaimer in the .. _ # 2731 : https : //github.com/pallets/flask/issues/2731 [ aliases ] notice and this list of conditions . View functions can now opt out of getting the automatic OPTIONS Fixed an issue where the default `` OPTIONS `` response was goto end Released 2010-12-31 Changed the behavior of tuple return values from functions . They are HTTP exceptions and Bad Request errors can now be trapped so that they module support and internal request handling refactoring types in the session cookie . : pr : ` 2352 ` Fixed the Jinja2 environment 's `` list_templates `` method not Now head over to ` http : //127.0.0.1:5000/ < http : //127.0.0.1:5000/ > ` _ , and you html_favicon = `` _static/flask-favicon.ico '' Released 2018-04-26 THIS SOFTWARE AND DOCUMENTATION , EVEN IF ADVISED OF THE POSSIBILITY OF A full list of contributors is available from git with : : is accessed at all during the request ( and not deleted ) . ( ` # 2288 ` _ ) Pass filenames instead or attach your own etags and provide a proper Popen ( [ 'git ' , 'commit ' , '-am ' , message ] ) .wait ( ) : meth : ` ~Flask.add_url_rule ` . ( ` # 2316 ` _ ) application explicitly adds 'OPTIONS ' as method to the URL rule . maintainer= '' Pallets '' , is now more reliable in case something handles an exception halfway `` SERVER_NAME `` config key . This key is now also used to set the Allow IP address as exact session cookie domain . : pr : ` 2282 ` Changed logic for picking defaults for cookie values from sessions Released on June 28th 2011 , codename Grappa Changed logic of before first request handlers to flip the flag Context processors will no longer override values passed directly to 1.0 the old behavior will continue to work but issue dependency within the imported application module . MRO . : pr : ` 2362 ` This logo or a modified version may be used by anyone to refer to the only accepted a single template name . On an iterable , the first URL rules specific to a given HTTP method . .. include : : contents.rst.inc invalid on the server OS . : pr : ` 1763 ` used by the test client as defaults . The development server uses threads by default . ( ` # 2529 ` _ ) Armin Ronacher ( mitsuhiko ) Mimetype guessing in `` send_file `` now fails loudly and does n't fall Note : we would appreciate that you make the image a link to .. toctree : : adding custom template filters application wide , made the filter not work properly in HTML attributes . Now it 's it would make the code uglier . from modules . license_file = LICENSE match = re.search ( '^Version\s+ ( . * ) ' , line.strip ( ) ) def main ( ) : Bugfix Release , released on July 6th 2010 view function . cov : coverage Integrated JSON support shell 'sphinxcontrib-log-cabinet ' , .. _ # 2412 : https : //github.com/pallets/flask/pull/2412 : meth : ` ~flask.Flask.create_jinja_environment ` method instead to .. _ # 1489 : https : //github.com/pallets/flask/pull/1489 `` url_prefix `` when it is registered with the app . ( ` # 2629 ` _ ) Sphinx~=2.1.2 method . This license applies to Flask 's logo . For a more optimized setup , see : doc : ` /deploying/uwsgi ` . Released 2018-04-29 The config object is now available to the template as a real global JSON is handled by Flask or any Flask extension . ( 'Documentation ' , 'http : //flask.pocoo.org/docs/ ' ) , The : func : ` flask.Request.on_json_loading_failed ` now returns a JSON Call ` ctx.auto_pop ` with the exception object instead of ` None ` , in the mimetype by hand . `` before_request `` handlers are now able to abort requests with 'pytest > =3 ' , encoder and decoder . ( ` # 1898 ` _ ) to better support pluggable applications . Implemented : func : ` flask.has_request_context ` server HEAD requests to a method view now automatically dispatch to the the beginning of the first request . ( : meth : ` Flask.before_first_request ` ) foreword exception is passed through . etc . For more information see : ref : ` instance-folders ` . .PHONY : all install-dev test coverage cov test-all tox docs audit release clean-pyc upload-docs ebook { \em\LARGE \py @ release\releaseinfo \par } .tox/ * /site-packages/flask 'pallets-sphinx-themes ' , \usepackage { inconsolata } work properly on Python 2.5 . It should not be used but did cause `` sphinxcontrib-log-cabinet '' , Added : attr : ` flask.Flask.config_class ` . distribution . This includes Flask 's source code , the examples , and `` Topic : : Software Development : : Libraries : : Python Modules '' , echo . The : func : ` flask.get_flashed_messages ` function now allows rendering `` flask.sessions `` instead to get the session module . This is not to Released 2013-06-14 from datetime import date , datetime before , old , after = match.groups ( ) import os \else errors that might occur during request processing ( for instance make using that filter with angular.js easier . through a new `` SEND_FILE_MAX_AGE_DEFAULT `` configuration variable , which is instead of the generic bad request message . ( ` # 2348 ` _ ) Fixed an issue with URL processors not properly working on .. _pytest : include Makefile CHANGES.rst CONTRIBUTING.rst LICENSE AUTHORS tox.ini Added support for returning tuples in the form `` ( response , headers ) `` Added missing future import that broke 2.5 compatibility . .. _console script : https : //packaging.python.org/tutorials/distributing-packages/ # console-scripts server flashed message categories in separate blocks , through a filename , which for example allows changing cache controls by file extension . where used . .. _configuring uWSGI and NGINX : uwsgi.html # starting-your-app-with-uwsgi datestr , codename = match.groups ( ) ] , deprecated for : func : ` flask.send_file ` because it was unreliable . allowed due to the different escaping behavior . `` fontpkg '' : r '' \usepackage { mathpazo } '' , .. _Click : https : //palletsprojects.com/p/click/ Added `` teardown_request `` decorator , for functions that should run Enforce blueprint handling in the order they were registered for main ( ) : ref : ` upgrading-to-010 ` for more information . Flask will autodetect UTF-8 , -16 , or -32. : pr : ` 2691 ` python scripts/make-release.py correct names when blueprints or modules were involved . Added the `` EXPLAIN_TEMPLATE_LOADING `` config flag which when .. include : : .. /AUTHORS coverage : clean-pyc install-dev working . : pr : ` 1872 ` Removed deprecated internal `` flask.session `` module alias . Use used to flip the setting of exception propagation which previously Made Flask support custom JSON mimetypes for incoming data . autoescaping is no longer active for all templates . Instead it advanced_foreword if the host server was a windows based operating system and the client from pallets_sphinx_themes import ProjectLink , get_version pip install -q -e . [ dev ] First public preview release . Refactored internal request dispatching . ( bugfix release , release date to be announced ) \fancyhf { } multiple times without producing unexpected behavior . `` preamble '' : r '' \usepackage { flaskstyle } '' , stricter about header encodings than PEP 3333. : issue : ` 2766 ` allows for calling run using configuration values , e.g . name='Flask ' , Added support to serializing top-level arrays to : func : ` flask.jsonify ` . This .. _uWSGI : https : //uwsgi-docs.readthedocs.io/en/latest/ Redistribution and use in source and binary forms , with or without def git_is_clean ( ) : conceptually only instance depending and outside version control so it 's Bugfix release , release date to be decided Implemented a silent flag for `` config.from_pyfile `` . classifiers= [ * * Python 2.6 and 3.3 are no longer supported . * * ( ` pallets/meta # 24 ` _ ) creating response object instances in views . Released on May 29th 2016 , codename Absinthe . \ChNameVar { \raggedleft\normalsize } set SOURCEDIR= . are no messages in the session . signals parsers . Added `` template_test `` methods in addition to the already existing an instance of : class : ` flask.Response ` . This allows for returning application contexts lingering around . Read more about ` Sphinx < https : //www.sphinx-doc.org/en/master/ > ` _ . 'Jinja2 > =2.10 ' , for example . internal logic and lowers the odds of runaway request contexts in unittests . template load path . Previously this caused issues with module \fancypagestyle { normal } { environ `` werkzeug.request `` will be `` None `` after the response was supports links . mode . This can be configured with the new `` TEMPLATES_AUTO_RELOAD `` that you have a pleasant experience with Unicode related things . classifiers= [ Refactored test client internally . The `` APPLICATION_ROOT `` configuration contributing Applications now not only have a root path where the resources and Released on June 18th 2010 , codename Rakia [ metadata ] in unittests . * The `` # get-help `` channel on our Discord chat : https : //discord.gg/t6rrQZH `` Development Status : : 5 - Production/Stable '' , def info ( message , * args ) : Released on May 28th 2010 , codename Schnaps error if not handled . This is a backwards incompatible change . inject_version , f.read ( ) , Released 2010-07-15 registration . specify the server name . The server name can now be set with * License : ` BSD < https : //github.com/pallets/flask/blob/master/LICENSE > ` _ if rv is None : version control so it 's the perfect place to put configuration files this list of conditions and the following disclaimer . Blueprints can provide blueprint specific error handlers . context to be passed to teardown handlers . and static files can be configured through a new .. _ # 2709 : https : //github.com/pallets/flask/pull/2709 The : meth : ` flask.Flask.run ` method now accepts `` None `` for ` host ` and ` port ` extensions rv = parse_changelog ( ) .. _Waitress : https : //docs.pylonsproject.org/projects/waitress/ `` LOGGER_HANDLER_POLICY `` configuration key . `` jsonify ( error= '' error msg '' ) , 400 `` from a view function . OPTIONS is now automatically implemented by Flask unless the release_date.date ( ) , date.today ( ) upgrading .. _committing as you go : https : //dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html # commit-your-changes \titleformat { \subsection } { \large } % if `` % 1 '' == `` '' goto help : license : BSD , see LICENSE for more details . Refactored the way URL adapters are created . This process is now The automatically provided `` OPTIONS `` method is now correctly disabled if Flask in debug mode is now detecting some common problems and tries to \def\\ { , } thereby allowing catching exceptions that are subclasses of HTTP .. include : : .. /LICENSE.rst Set the content-length header for x-sendfile . Add support for range requests in `` send_file `` . without an ` is_package ( ) ` method . incompatible change . \renewcommand { \headrulewidth } { 0.4pt } : class : ` ~cli.ScriptInfo ` object will be passed . : pr : ` 2319 ` LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING except ImportError : Source License the session cookie cross-subdomain wide . using configuration values , e.g . `` app.run ( app.config.get ( 'MYHOST ' ) , Empty session cookies are now deleted properly automatically . fully customizable with the : meth : ` ~flask.Flask.create_url_adapter ` .. _ # 1936 : https : //github.com/pallets/flask/pull/1936 added the ability to limit the incoming request data with the modules were used . Static file handling for modules now requires the name of the static allows one to register a callback to an arbitrary endpoint with a fail ( 'Version `` % s '' is already tagged ' , version ) `` flask.g `` now has `` pop ( ) `` and `` setdefault `` methods . 'Topic : : Software Development : : Libraries : : Application Frameworks ' , Furthermore you must not use the names of the authors to promote derivatives Added `` flask.request.get_json ( ) `` as a replacement for the old : issue : ` 2751 ` Added `` template_global `` methods in addition to the already existing Correctly invoke response handlers for both regular request Fixed an infinite redirect issue with blueprints . base classes . ( ` # 1936 ` _ ) exposing all valid methods in the `` Allow `` header . Authors .. _ # 2348 : https : //github.com/pallets/flask/pull/2348 html_logo = `` _static/flask.png '' Changed logic of before first request handlers to flip the flag after author='Armin Ronacher ' , : exc : ` AttributeError ` . correctly . # - * - coding : utf-8 - * set SPHINXPROJ=Flask `` coverage '' , Added finer control over the session cookie parameters . \MakeUppercase { \rm\Huge # 2 } % API Reference longer arguments to the response object , they now have a defined meaning . instead of the generic bad request message . : pr : ` 2348 ` around , the conditions are not modified and the disclaimer is present . shell View functions can now return a tuple with the first instance being template found is rendered . The : attr : ` ~flask.Flask.config ` is now available in the templates as ` Deploying Flask on OpenShift < https : //developers.openshift.com/en/python-flask.html > ` _ string = _date_strip_re.sub ( `` , string ) be confused with `` flask.session `` the session proxy . https : //palletsprojects.com/p/flask/ if you use it in a medium that to work better with Google Chrome . as ` config ` . return `` Hello , World ! '' Pass filenames instead or attach your own etags and provide a Released on May 16 2017 with open ( 'CHANGES.rst ' ) as f : The `` : ref : ` flask-license ` `` applies to all the source code shipped as view was attached after the first request was handled . This gives def inject_version ( match ) : .. _Flask-SQLAlchemy : http : //flask-sqlalchemy.pocoo.org/ \endgroup 'Intended Audience : : Developers ' , Binary files /dev/null and b/docs/logo.pdf differ \setcounter { footnote } { 0 } % method if no handler was implemented . blueprints . is accessed at all during the request ( and not deleted ) . : pr : ` 2288 ` \includegraphics { logo.pdf } through the `` LOGGER_HANDLER_POLICY `` configuration key . Added : func : ` flask.stream_with_context ` and the ability to push David Lord ( davidism ) a blueprint prefix and route . ( ` # 2748 ` _ ) \ifnum \c @ secnumdepth > \m @ ne def fail ( message , * args ) : `` dev '' : [ Added support for categories for flashed messages . Fixed an assumption in sessions implementation which could break message route . ( ` # 1559 ` _ ) Added the ability to register callbacks that are only triggered once server listens on 127.0.0.1 by default now to fix issues with chrome . added signalling support based on blinker . This feature is currently .. _entry point : https : //packaging.python.org/tutorials/distributing-packages/ # entry-points Documentation < http : //jinja.pocoo.org/docs/templates > ` _ for Added : meth : ` flask.Flask.app_context ` which works very similar to the Version 0.7.3 argument and sets it on : attr : ` ~Flask.url_map ` . ( ` # 1559 ` _ ) Bugfix release , released on December 31st 2010 that do not pop the request stack for testing . 'Programming Language : : Python : : 2 ' , was attached after the first request was handled . This gives earlier attribute on the session cookie . : pr : ` 2607 ` Autoescaping is no longer active for all templates . Instead it is the request dies with an exception and an error handling page kicks rules added to the url map . picking the default port to run on . Flask is developed and maintained by the Pallets team and community View functions can now opt out of getting the automatic for Python 3.3 port . optional and supposed to be used by extensions and applications . If pull request `` # 1872 `` . Added : attr : ` flask.Flask.request_globals_class ` to allow a specific if not changed : .. _ # 2526 : https : //github.com/pallets/flask/issues/2526 ` add_url_rule ` function and can now also accept regular werkzeug not be used to endorse or promote products derived from this software styleguide provide custom error messages from a central hub for certain errors that added `` TESTING `` switch that can activate unittesting helpers . \fi warn you about them . explicitly . 'Programming Language : : Python : : 3.5 ' , Added support for configurations . return set ( \ @ date \par ( ` # 2765 ` _ ) instruct Flask to explain how it locates templates . This should help The : func : ` flask.url_for ` function now can generate anchors to the added support for context binding that does not require the use of default to not cause confusion with existing libraries that might expect was linked to `` DEBUG `` alone and is now linked to either `` DEBUG `` expire if the browser window closes . in the default `` get_send_file_max_age `` implementation . change_info = next ( lineiter ) .strip ( ) appcontext `` pallets-sphinx-themes '' , : help .. _uWSGI HTTP Router : https : //uwsgi-docs.readthedocs.io/en/latest/HTTP.html # the-uwsgi-http-https-router and not through a context processor which makes it available even in Flask will no longer invoke the wrong error handlers if a proxy folder to be supplied explicitly . The previous autodetection was not from __future__ import print_function templates this behavior can be changed with the `` autoescape `` tag . patterns/index modules can now register for a subdomain instead of just an URL project_urls=OrderedDict ( ( * Redistributions in binary form must reproduce the above copyright .. _console script : https : //packaging.python.org/tutorials/packaging-projects/ # console-scripts `` flask.g `` now gained a `` get ( ) `` method for not erroring out on Set the content-length header for x-sendfile . if not git_is_clean ( ) : .. _ # 2933 : https : //github.com/pallets/flask/issues/2933 the with statement for playing in the console . Released 2011-06-28 , codename Grappa Released on July 6th 2010 , codename Calvados `` send_from_directory `` now raises BadRequest if the filename is behavior will continue to work but issue dependency warnings . .. _Waitress : https : //docs.pylonsproject.org/projects/waitress/en/stable/ .. _ # 1898 : https : //github.com/pallets/flask/pull/1898 introduces a security risk in ancient browsers . See errorhandling % changes \\ to ' , ' ( comma-space ) , making it pass muster for the render function . : pr : ` 2354 ` author_email='armin.ronacher @ active-4.com ' , `` flask.sessions `` instead to get the session module . This is not to import name is inside a zip archive ( usually a .egg ) prior to Python 2.7 . after request functions are now called in reverse order of .. _ # 2629 : https : //github.com/pallets/flask/pull/2629 : pr : ` 2414 ` changelog 'Environment : : Web Environment ' , : pr : ` 1326 ` for an extension author to create exceptions that will by default app.config.get ( 'MYPORT ' ) ) `` , with proper behavior whether or not a config ( ` # 2586 ` _ ) Revert a behavior change that made the dev server crash instead of returning Unbound locals now raise a proper : exc : ` RuntimeError ` instead of an Added : command : ` flask ` and the `` flask.cli `` module to start the local same name on the application object . `` Programming Language : : Python : : 3.5 '' , git shortlog -sne fixed a problem for Flask to run on jython . the application now configures a : class : ` logging.Handler ` and will ) Static file handling for modules now requires the name of the < https : //developers.google.com/speed/libraries/ > ` _ to load jQuery : tox api well as documentation , with or without modification , are permitted Changed default cookie serialization format from pickle to JSON to Added support for per-package template and static-file directories . allows one to register a callback to an arbitrary endpoint with .. _ # 1559 : https : //github.com/pallets/flask/issues/1559 Copyright ( c ) 2010 by Armin Ronacher . : help there are no messages in the session . possible to use that filter in single quoted attributes . This should cmd = [ sys.executable , 'setup.py ' , 'sdist ' , 'bdist_wheel ' ] .. _ # 2607 : https : //github.com/pallets/flask/pull/2607 set SPHINXBUILD=sphinx-build of an : exc : ` AttributeError ` . listening on the following application root : : ` Deploying on Azure ( IIS ) < https : //azure.microsoft.com/documentation/articles/web-sites-python-configure/ > ` _ a blueprint prefix and route . : pr : ` 2748 ` to : meth : ` test_client.open < werkzeug.test.Client.open > ` . : pr : ` 2412 ` Added the ability to register application wide error handlers from Blueprints now have a decorator to add custom template filters context processors will no longer override values passed directly compatibility with the common case of people putting binary data for % SPHINXBUILD % -M % 1 % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % minversion = 3.0 dev_version = bump_version ( version ) + '.dev ' in . `` tojson `` filter now does not escape script blocks in HTML5 parsers . upgrading refreshed each request and get their lifetime extended , if set to Changed how the teardown system is informed about exceptions . This proper mimetype by hand . loading . Only tuples are interpreted as response data . ( ` # 2736 ` _ ) Released on September 29th 2011 , codename Rakija Added `` appcontext_pushed `` and `` appcontext_popped `` signals . pytest some problems for package managers . If possible , include a ` minimal reproducible example ` _ to help us /Title ( \ @ title ) Pallets Themes ` _ . does since 0.10 . Fixed a security problem that allowed clients to download arbitrary 'Programming Language : : Python : : 3 ' , 'Topic : : Software Development : : Libraries : : Python Modules ' , us identify the issue . This also helps check that the issue is not with your `` OPTIONS `` method . : pr : ` 1489 ` Flask Changelog import hook is used without an `` is_package ( ) `` method . easily modify sessions from the test environment . \normalfont files if the host server was a windows based operating system and on ` PyPI < https : //pypi.org/search/ ? c=Framework+ % 3A % 3A+Flask > ` _ . echo.may add the Sphinx directory to PATH . added : func : ` ~flask.get_template_attribute ` helper function . REM Command file for Sphinx documentation `` # 1326 `` ) . a third party library working . Because very often these steps could be Exceptions during teardown handling will no longer leave bad application information around which means that teardown handlers are able to Released 2011-06-29 reliable due to a different design and also replaces : license : BSD-3-Clause .. _jQuery : http : //jquery.com/ Released 2017-03-31 Made ` @ before_first_request ` into a decorator as intended . documentation and artwork different licenses apply . Added : func : ` flask.after_this_request ` . .. _ # 2748 : https : //github.com/pallets/flask/pull/2748 .. _ # 2282 : https : //github.com/pallets/flask/pull/2282 Deprecated `` request.json `` in favour of `` request.get_json ( ) `` . Added : meth : ` flask.Flask.app_context ` which works very similar to Fixed a problem for Flask to run on jython . originally as a part of file is provided . Because the Python standard library caches loggers , the name of the file . Fixed an issue where `` |tojson `` was not quoting single quotes which each request . The : func : ` flask.get_flashed_messages ` function now allows rendering flashed limit the impact an attacker can do if the secret key leaks . See .. _ # 2326 : https : //github.com/pallets/flask/pull/2326 Added the `` EXPLAIN_TEMPLATE_LOADING `` config flag which when enabled will For a more optimized setup , see ` configuring uWSGI and NGINX ` _ . modules . earlier feedback when users forget to import view code ahead of : issue : ` 1421 ` Flask will automatically detect the factory ( `` create_app `` or `` make_app `` ) \let\footnoterule\relax Design notes , legal information and changelog are here for the interested . Implemented : meth : ` ~flask.testing.TestClient.session_transaction ` to if `` % SPHINXBUILD % '' == `` '' ( ignore . ( ` # 2693 ` _ ) `` make_app `` from `` FLASK_APP `` . ( ` # 2297 ` _ ) Use the `` SERVER_NAME `` config if it is present as default values for graft tests import sys installed . ( ` # 2416 ` _ ) .. _Jinja : https : //palletsprojects.com/p/jinja/ : class : ` ~flask.Flask ` and : class : ` ~flask.Blueprint ` now provide a when `` silent `` is true . : issue : ` 2651 ` instead of a value error which usually would result in a 500 We would appreciate that you make the image a link to match = re.search ( the response to make testing JSON response much easier . ( ` # 2358 ` _ ) license='BSD ' , Raise an : exc : ` AttributeError ` in : func : ` flask.helpers.find_package ` https : //github.com/postmanlabs/httpbin/issues/168 . : pr : ` 1262 ` Added : func : ` flask.safe_join ` Popen ( [ 'git ' , 'tag ' ] , stdout=PIPE ) .communicate ( ) [ 0 ] .splitlines ( ) .. toctree : : Allow custom Jinja environment subclasses . : pr : ` 1422 ` The automatic JSON request data unpacking now looks at the charset attribute on the session cookie . ( ` # 2607 ` _ ) in the test client when absolute URLs were requested . Binary files /dev/null and b/docs/_static/flask-favicon.ico differ `` Topic : : Internet : : WWW/HTTP : : Dynamic Content '' , used to flip the setting of exception propagation which previously `` Environment : : Web Environment '' , on registration . .. _ # 2735 : https : //github.com/pallets/flask/issues/2735 If possible , include a ` minimal , complete , and verifiable example ` _ to help objects will not be available and blueprint 's context processors are .. _email : https : //help.github.com/articles/setting-your-email-in-git/ author= '' Armin Ronacher '' , from a view function . 'Releasing % s ( codename % s , release date % s ) ' , .. _ # 2529 : https : //github.com/pallets/flask/pull/2529 Implemented the virtual : mod : ` flask.ext ` package to import extensions from . not exposing all valid methods in the `` Allow `` header . `` flask.request.json `` property . .. _uWSGI : http : //uwsgi-docs.readthedocs.io/en/latest/ ignored for the static folder . token verification into the session . version = match.group ( 1 ) .strip ( ) with io.open ( `` README.rst '' , `` rt '' , encoding= '' utf8 '' ) as f : browsers . See : ref : ` json-security ` for details . Ported test suite to py.test . : meth : ` ~flask.Flask.create_jinja_environment ` method instead to Added finer control over the session cookie parameters . passing additional keyword arguments to the constructor of Added a workaround for chrome 's cookies in localhost not working as configurable subdomain . ` before_request ` handlers are now able to abort requests with errors . Deprecated ` init_jinja_globals ` . Override the Changed the behavior of tuple return values from functions . They are no `` Framework : : Flask '' , .. _minimal reproducible example : https : //stackoverflow.com/help/minimal-reproducible-example file handler ) and : func : ` ~flask.helpers.send_file ` . This hook is Deprecated `` init_jinja_globals `` . Override the \vskip 8ex configurable subdomain . Added before_render_template signal . the request context but only provides access to the current change_info , print ( 'Error : ' , message % args , file=sys.stderr ) the user registered an overriding rule with the lowercase-version refactored the way URL adapters are created . This process is now project_urls= { removed some unused code from flask `` MAX_CONTENT_LENGTH `` configuration value . \interlinepenalty \ @ M active request context . Turn on autoescape for `` flask.templating.render_template_string `` by default rarely used feature and led to some confusing behavior . enabled will instruct Flask to explain how it locates templates . if `` % SPHINXBUILD % '' == `` '' ( of datetime objects . This allows much easier customization of how added support for per-package template and static-file directories . directly set , instead of per `` client.get `` . PNG files etc . ) of the image , with or without modification , are permitted fail ( 'Could not find % s in % s ' , pattern , filename ) Released on December 21st 2016 , codename Punsch . .. _ # 2676 : https : //github.com/pallets/flask/pull/2676 graft examples for a little longer . This can also be used to trigger custom \ChNumVar { \raggedleft \bfseries\Large } Released on April 29 2018 existing `` template_filter `` method family . setups . application . ( ` # 2259 ` _ ) process . `` flask.Flask.request_globals_class `` got renamed to part of https : //github.com/kennethreitz/httpbin/issues/168 Added : command : ` flask ` and the `` flask.cli `` module to start the are located but also an instance path which is the designated place to documentation . coverage run -m pytest Add `` pretty '' and `` compressed '' separators definitions in jsonify ( ) method . Released 2013-06-13 , codename Limoncello : ref : ` upgrading-to-010 ` for more information . def get_git_tags ( ) : the module . This was implemented to aid GAE which will remove the .. _ # 2765 : https : //github.com/pallets/flask/pull/2765 useful message explaining why it is raised when a PEP 302 import hook is used The full license text can be found below ( : ref : ` flask-license ` ) . For the .. _ # 2636 : https : //github.com/pallets/flask/pull/2636 packages=find_packages ( ) , .. _ # 2017 : https : //github.com/pallets/flask/pull/2017 return ' . '.join ( map ( str , parts ) ) of Flask itself and no longer of the test client . This cleaned up result in the HTTP error of their choosing , but may be caught with ensure the code follows our style guide . foreword Support passing a : class : ` ~werkzeug.test.EnvironBuilder ` or `` dict `` tox : test-all Added a : func : ` flask.make_response ` function that simplifies can provide custom error messages from a central hub for certain defined and it now is iterable and will yield all attributes stored . involved . def parse_date ( string ) : Flask will autodetect UTF-8 , -16 , or -32 . ( ` # 2691 ` _ ) be confused with `` flask.session `` the session proxy . format is now hardcoded but the default log handling can be disabled .. _utilities for testing : http : //click.pocoo.org/testing with open ( filename , ' w ' ) as f : Binary files /dev/null and b/docs/_static/touch-icon.png differ on an already used endpoint . .. _ # 2986 : https : //github.com/pallets/flask/pull/2986 * Test coverage : https : //codecov.io/gh/pallets/flask Implemented a silent flag for ` config.from_pyfile ` . .. _Dive Into HTML5 : https : //diveintohtml5.info/ Adrian Mönnich ( ThiefMaster ) `` flask.g `` is now stored on the app context instead of the request Mimetype guessing and etag support based on file objects is now if release_date.date ( ) ! = date.today ( ) : The builtin run method now takes the `` SERVER_NAME `` into account when The : meth : ` flask.render_template ` method now accepts a either an } def bump_version ( version ) : blueprints . : maxdepth : 2 \if @ noskipsec \leavevmode \fi you want to use it , make sure to have ` blinker ` _ installed . Added : attr : ` flask.views.View.decorators ` to support simpler decorating of ( ` # 2223 ` _ ) prune docs/_themes own code . * Redistributions of source code must retain the above copyright notice , .. _App Engine : https : //developers.google.com/appengine/ behavior of serving static files from Flask when using integrated JSON support as intended with domain names . Malformed JSON data will now trigger a bad request HTTP exception in the HTTP error of their choosing , but may be caught with a custom ( pull request `` # 1730 `` ) . set-cookie behavior . If set to `` True `` a permanent session will be logging templates by default . Flask will autodetect UTF-8 , -16 , or -32. : issue : ` 2692 ` The application now configures a : class : ` logging.Handler ` and will 'Programming Language : : Python ' , the endpoint for the : meth : ` flask.Module.add_url_rule ` method Released 2010-07-06 , codename Calvados Added an ` endpoint ` method to the flask application object which creating response object instances in views . : copyright : © 2010 by the Pallets team . following conditions are met : Blueprints now have a decorator to add custom template filters application : license : BSD , see LICENSE for more details . .. _ # 2606 : https : //github.com/pallets/flask/pull/2606 Chrome . ( ` # 2282 ` _ ) Chrome . : pr : ` 2282 ` Fixed an issue with URL processors not properly working on global-exclude * .py [ co ] wide , : meth : ` flask.Blueprint.app_template_filter ` . .. _ # 2728 : https : //github.com/pallets/flask/issues/2728 Malformed JSON data will now trigger a bad request HTTP exception instead added a helper function to expose files from any directory . % SPHINXBUILD % -M help % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % clean-pyc : \fancyfoot [ LO ] { { \nouppercase { \rightmark } } } < http : //tools.ietf.org/html/rfc3987 > ` _ . Imagine your application is .. _ # 2635 : https : //github.com/pallets/flask/pull/2635 requests that do not pop the request stack for testing . universal = 1 Released 2016-12-21 , codename Punsch set BUILDDIR=_build .. _create a pull request : https : //help.github.com/articles/creating-a-pull-request/ Added ` * * kwargs ` to : meth : ` flask.Test.test_client ` to support passing if it can ( the required first parameter ) , to benefit tools which build Flask callback . documentation and/or other materials provided with the distribution . clients do n't deal well when this newline is missing . This came up `` SERVER_NAME `` . ( ` # 2282 ` _ ) Server listens on 127.0.0.1 by default now to fix issues with Added a workaround for a limitation in Python 3.3 's namespace loader . documentation just tries to cover the very basics so that you have a .. _ # 2362 : https : //github.com/pallets/flask/pull/2362 The : func : ` flask.url_for ` function now can also explicitly generate sessions can be set to be permanent now on a per-session basis . author = `` Pallets Team '' background information about Flask , then focuses on step-by-step testing ( ` # 2635 ` _ ) optional to be consistent with the function of the same name on the change in 1.0 . ( ` # 2731 ` _ , ` # 2742 ` _ ) Fix crash when running under PyPy3 , see pull request `` # 1814 `` . : copyright : © 2010 by the Pallets team . exceptions ( in `` werkzeug.exceptions `` ) . This makes it possible for tags = get_git_tags ( ) Use Last-Modified for static file sending instead of Date which was Documentation < http : //jinja.pocoo.org/docs/templates/ > ` _ for types in the session cookie . ( ` # 2352 ` _ ) : attr : ` flask.Flask.test_client_class ` . refreshed each request and get their lifetime extended , if set to Added : attr : ` flask.Flask.config_class ` . implementation . Now head over to http : //127.0.0.1:5000/ , and you should see your hello 'Programming Language : : Python : : 3.6 ' , disabled by default to not cause confusion with existing libraries } } % mode . This makes it possible to receive mails on server errors for : license : BSD-3-Clause Mimetype guessing and ETag generation for file-like objects in `` send_file `` design .. _uwsgi : https : //uwsgi-docs.readthedocs.io/en/latest/ .. _ # 2766 : https : //github.com/pallets/flask/issues/2766 description= '' A simple framework for building complex web applications . `` , application wide , : meth : ` flask.Blueprint.app_template_filter ` . as defaults . Request context preservation in debug mode now keeps the exception Added a helper function to expose files from any directory . Add `` pretty '' and `` compressed '' separators definitions in jsonify ( ) by default . : pr : ` 1515 ` `` config `` . abstracted to support multiple projects the ` Flask Extension Registry ` _ should probably be permitted . response by default . Mimetype guessing in `` send_file `` now fails loudly and does n't fall back to message = message % args ( ` # 2751 ` _ ) 'docs ' : [ the template context which makes them available in imported name= '' Flask '' , design : attr : ` flask.Flask.test_client_class ` . { \center Added : func : ` ~flask.get_template_attribute ` helper function . print ( message % args , file=sys.stderr ) : pr : ` 2314 ` extensiondev audit : Better error reporting on missing secret keys . \renewcommand { \headrulewidth } { 0pt } return version , parse_date ( datestr ) , codename strongly discouraged as the interface was flawed . responses . documentation and/or other materials provided with the distribution . .. _ # 2825 : https : //github.com/pallets/flask/pull/2825 thereby allowing catching exceptions that are subclasses of HTTP after invoking . This will allow some uses that are potentially def build ( ) : development server over HTTPS . ( ` # 2606 ` _ ) Added ` message_flashed ` signal that simplifies flashing testing . % % \begingroup % SPHINXBUILD % -M % 1 % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % < https : //www.getsentry.com/ > ` _ for dealing with application errors . It 's : meth : ` ~flask.Flask.get_send_file_max_age ` hook for subclasses to override added support for configurations . the cli command now responds to ` -- version ` . \let\thanks\relax\let\maketitle\relax include CHANGES.rst push/pop an extra app context . : issue : ` 2900 ` Flask will autodetect UTF-8 , -16 , or -32 . ( ` # 2692 ` _ ) Added the `` JSONIFY_MIMETYPE `` configuration variable . : pr : ` 1728 ` .. _ # 2450 : https : //github.com/pallets/flask/pull/2450 def set_filename_version ( filename , version_number , pattern ) : configuration variable as well as `` SERVER_NAME `` are now properly the logger is configurable now to better support unittests . { \py @ TitleColor\thesubsubsection } { 0.5em } { \py @ TitleColor } { \py @ NormalColor } } formatted response by default . 'License : : OSI Approved : : BSD License ' , Fix encoding behavior of `` app.config.from_pyfile `` for Python 3 . Fix has been removed , as per issue `` # 104 `` . See pull request `` # 1849 `` . with io.open ( 'flask/__init__.py ' , 'rt ' , encoding='utf8 ' ) as f : http : //flask.pocoo.org/ if you use it on a web page . single template name . On an iterable , the first template found is rendered . if errorlevel 9009 ( application object . \vskip 3ex would trigger an exception incorrectly . pushd % ~dp0 `` Jinja2 > =2.10 '' , iterable of template names or a single template name . Previously , it that might expect `` flask.json.dumps `` to return bytestrings by } , modification , are permitted provided that the following conditions are FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE Add support for range requests in `` send_file `` . \renewcommand { \maketitle } { % warnings . * The names of the contributors to the Flask software ( see AUTHORS ) may .. _official packaging guide : https : //packaging.python.org/tutorials/distributing-packages/ `` Programming Language : : Python : : 3.4 '' , Fixed an issue with query parameters getting removed from requests in \DeclareUnicodeCharacter { 1F389 } { \nobreakspace } errorhandling `` url_prefix `` when it is registered with the app . : pr : ` 2629 ` Released 2012-07-01 , codename Campari a little longer . This can also be used to trigger custom requests [ metadata ] Bugfix release , released on July 1st 2012 `` make cov `` runs the basic test suite with `` coverage `` prefix . This makes it possible to bind a whole module to a The logger switches to `` DEBUG `` mode now if debug is enabled . instance of : class : ` flask.Response ` . This allows for returning template names or a single template name . Previously , it only accepted a 3 . Neither the name of the copyright holder nor the names of its : pr : ` 2730 ` all : test do whatever you want with it as long as the copyright in Flask sticks Flask now orders JSON keys by default to not trash HTTP caches due to Added an option to generate non-ascii encoded JSON which should result import name if it can ( the required first parameter ) , to benefit Removed some unused code from flask .. image : : _static/flask-logo.png the user created circular dependencies themselves . make targets : meth : ` ~Flask.handle_url_build_error ` . : pr : ` 2017 ` : ref : ` json-security ` for details . Implemented : meth : ` ~flask.testing.TestClient.session_transaction ` to Added support for copying of request contexts for better working with explicitly . \def\ @ part [ # 1 ] # 2 { % ( ` # 2326 ` _ ) Jinja2 template loading syntax now allows `` ./ '' in front of a Released on July 27th 2010 , codename Whisky is now optional to be consistent with the function of the reraises the ` BuildError ` . to work better with Google Chrome . `` SEND_FILE_MAX_AGE_DEFAULT `` configuration variable , which is used ( ` # 2414 ` _ ) r '' ^ ( \s * % s\s * =\s * ' ) ( .+ ? ) ( ' ) '' % pattern , route . : issue : ` 1559 ` when picking the default port to run on . CONTRIBUTORS `` AS IS '' AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , os.chdir ( os.path.join ( os.path.dirname ( __file__ ) , ' .. ' ) ) returning an Internal Server Error . : pr : ` 2006 ` and it now is iterable and will yield all attributes stored . .. _ItsDangerous : https : //palletsprojects.com/p/itsdangerous/ Call `` ctx.auto_pop `` with the exception object instead of `` None `` , feedback when users forget to import view code ahead of time . Fixed an issue where the subdomain setting for modules was ignored a third party library working . Many such extensions are already available COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , .. _flask-license : of a request regardless of whether an exception occurred . Also the behavior Static rules are now even in place if there is no static folder for Released 2010-06-18 , codename Rakia coverage report Templates are no longer automatically reloaded outside of debug graft tests < https : //www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/ > ` _ . tutorial/index `` License : : OSI Approved : : BSD License '' , OPTIONS is now automatically implemented by Flask unless the for the module . This was implemented to aid GAE which will \end { flushright } % \par latex_additional_files = [ `` flaskstyle.sty '' , `` logo.pdf '' ] `` flask.g `` now can be used with the `` in `` operator to see what 's Fixed Python 3 bug when a handler from ` app.url_build_error_handlers ` fail ( 'Could not parse changelog ' ) f.write ( contents ) : meth : ` ~Flask.add_url_rule ` . : pr : ` 2316 ` Added ` teardown_request ` decorator , for functions that should run at the end : meth : ` ~flask.Flask.after_request ` handlers are now also invoked if intended with domain names . packages= [ 'flask ' , 'flask.json ' ] , Templates can now be rendered without request context . The behavior Flask in debug mode is now detecting some common problems and tries `` application/octet-stream `` . See pull request `` # 1988 `` . will fall back to using import on systems with custom module hooks , echo.If you do n't have Sphinx installed , grab it from return before + version_number + after Fixed an infinite redirect issue with blueprints . ( ` # 2676 ` _ ) .. _email : https : //help.github.com/en/articles/setting-your-commit-email-address-in-git SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED ` Deploying on Azure ( IIS ) < https : //docs.microsoft.com/en-us/azure/app-service/containers/how-to-configure-python > ` _ improved to describe why the type is invalid . ( ` # 2256 ` _ ) Inside templates this behavior can be changed with the testing file . Added : func : ` flask.safe_join ` encoder and decoder . : pr : ` 1898 ` .. _jQuery : https : //jquery.com/ storage . : func : ` flask.jsonify ` . This introduces a security risk in ancient static folder to be supplied explicitly . The previous autodetection native Python 2 string ( bytes ) with UTF-8 coded bytes . ( ` # 2933 ` _ ) set SPHINXBUILD=sphinx-build User 's Guide root : : additional keyword arguments to the constructor of documentation < https : //docs.python.org/library/logging.html > ` _ for more ] static rules are now even in place if there is no static folder folder for themes , built documentation in zip and pdf file and `` app.test_client `` includes preset default environment , which can now be fail ( should see your hello world greeting . ) % Replace Unicode character 'PARTY POPPER ' ( U+1F389 ) with a non-breaking space . \ @ afterheading } copyright = `` 2010 Pallets Team '' Prevent `` flask run `` from showing a `` NoAppException `` when an because the Python standard library caches loggers , the name of In this case no automatic OPTIONS handling kicks in . : pr : ` 2635 ` `` flask.g `` now has `` pop ( ) `` and `` setdefault `` methods . making it possible to further push the request context or pop it . .. _Werkzeug documentation : https : //werkzeug.palletsprojects.com/debug/ # using-the-debugger Released 2010-07-06 .. _committing as you go : http : //dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html # commit-your-changes unicode Bugfix release , released on June 7th 2016 . Turn on autoescape for `` flask.templating.render_template_string `` if __name__ == '__main__ ' : .. _ # 2297 : https : //github.com/pallets/flask/pull/2297 Provides different ways to look at the current : rfc : ` 3987 ` . if match is None : make using that filter with angular.js easier . cause caching . release does no longer include development leftover files ( .git event that a ` BaseException ` such as ` KeyboardInterrupt ` is raised in a ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF `` False `` it will only be modified if the session actually modifies . .. _ # 2358 : https : //github.com/pallets/flask/pull/2358 \ @ afterindentfalse imported templates by default . Additional Notes : end Allow custom Jinja environment subclasses ( pull request `` # 1422 `` ) . Added `` SESSION_REFRESH_EACH_REQUEST `` config key that controls the windows . ( ` # 2709 ` _ ) `` os.path.join `` : pr : ` 1730 ` exceptions ( in `` werkzeug.exceptions `` ) . This makes it possible Released on July 1st 2012 , codename Campari . config Use the `` SERVER_NAME `` config if it is present as default values Added support for byte strings back to the session system . This .. _ # 2254 : https : //github.com/pallets/flask/pull/2254 loader . fully customizable with the : meth : ` ~flask.Flask.create_url_adapter ` ) message flashing on sessions implementations which use external fixed a error reporting bug with : meth : ` flask.Config.from_envvar ` % % \catcode ` '=\active .. _ # 1421 : https : //github.com/pallets/flask/issues/1421 added support for Google Appengine . .. include : : .. /LICENSE `` TESTING `` . Various bugfixes Logger now only returns the debug log setting if it was not set contexts multiple times without producing unexpected behavior . Removed support for `` create_jinja_loader `` which is no longer used path correctly . def make_git_tag ( tag ) : static folder if it 's part of a mapping in the .yml file . ( ` # 2666 ` _ ) `` app.run ( app.config.get ( 'MYHOST ' ) , app.config.get ( 'MYPORT ' ) ) `` , .. _ # 2319 : https : //github.com/pallets/flask/pull/2319 Bugfix release , released on May 28th 2010 request are handled by the app 's error handlers . : pr : ` 2254 ` : meth : ` Request.get_json ` does n't cache the ( ` # 1621 ` _ ) tests , as well as the documentation . description= ' A simple framework for building complex web applications . ' , in 1.0. : pr : ` 2986 ` < https : //getsentry.com/signup/ > ` _ which you can try for free . Sentry better error reporting on missing secret keys . cli Released on May 12th 2010 , codename Jägermeister \huge \bfseries # 1\par } % decorator . `` werkzeug '' : ( `` https : //werkzeug.palletsprojects.com/ '' , None ) , Added `` template_test `` methods in addition to the already existing Added support to serializing top-level arrays to .. _username : https : //help.github.com/en/articles/setting-your-username-in-git entry_points= { The : func : ` flask.url_for ` function now can generate anchors to the 'Operating System : : OS Independent ' , ( ` # 2354 ` _ ) used instead of : data : ` PREFERRED_URL_SCHEME ` . : pr : ` 2430 ` pushd % ~dp0 `` tojson `` used in templates is now safe by default due . This was Popen ( [ 'git ' , 'tag ' , tag ] ) .wait ( ) handlers ( pull request `` # 1393 `` ) . \py @ authoraddress \par zip_safe=False , graft examples Session is now stored after callbacks so that if the session payload at the beginning of the first request . api Pallets-Sphinx-Themes~=1.1.0 .. _ # 2581 : https : //github.com/pallets/flask/pull/2581 Added the `` APPLICATION_ROOT `` configuration variable . 'Release date is not today ( % s ! = % s ) ' , .. include : : .. /artwork/LICENSE.rst Refactored session support into a session interface so that the with io.open ( `` flask/__init__.py '' , `` rt '' , encoding= '' utf8 '' ) as f : context . Flask provides a `` Makefile `` with various shortcuts . They will ensure that generated links . Support passing a : class : ` ~werkzeug.test.EnvironBuilder ` or advanced_foreword version , release_date , codename = rv import re possible to use that filter in single quoted attributes . This should Added `` required_methods `` attribute to view functions to force-add `` app.test_client `` includes preset default environment , which can SOFTWARE , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE . Empty session cookies are now deleted properly automatically . set_filename_version ( 'flask/__init__.py ' , version , '__version__ ' ) Added `` template_global `` methods in addition to the already The builtin run method now takes the `` SERVER_NAME `` into account Design notes , legal information and changelog are here for the interested . set_init_version ( dev_version ) issues_github_path = `` pallets/flask '' change in 1.0. : issue : ` 2731 ` , : issue : ` 2742 ` USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON : pr : ` 2676 ` `` add_url_rule `` function and can now also accept regular werkzeug request callback . easily modify sessions from the test environment . find . -name ' * .pyc ' -exec rm -f { } 'click > =5.1 ' , Added the `` APPLICATION_ROOT `` configuration variable . .. _ # 2430 : https : //github.com/pallets/flask/pull/2430 remove the static folder if it 's part of a mapping in the .yml views which can be used by subclasses to alter the default .. _create a pull request : https : //help.github.com/en/articles/creating-a-pull-request .. _ # 2314 : https : //github.com/pallets/flask/pull/2314 ( ` # 2412 ` _ ) \begingroup Enforce blueprint handling in the order they were registered for template Also the behavior for `` after_request `` was changed . It 's now no .. _Clone : https : //help.github.com/articles/fork-a-repo/ # step-2-create-a-local-clone-of-your-fork : meth : ` ~flask.Flask.add_url_rule ` can now also register a trigger the execution of the teardown handlers . Copyright © 2010 by the Pallets team . This should help users debug when the wrong templates are loaded . non existing items . very careful with those though because usage outside of macros might entry_points= { `` console_scripts '' : [ `` flask = flask.cli : main '' ] } , docs for more information . Python 2.6 and 3.3 are no longer supported . mimetype parameter . uses backslashes to escape the directory the files where exposed from . : pr : ` 1621 ` \ChTitleVar { \raggedleft \rm\Huge } \secdef\ @ part\ @ spart } ( temporarily ) dropped support for zipped applications . This was a existing items . Python requirements changed : requiring Python 2.6 or 2.7 now to prepare Make `` flask.safe_join `` able to join multiple paths like `` os.path.join `` already configured . : pr : ` 2436 ` `` papersize '' : `` a4paper '' , \let\footnotesize\small Released 2010-04-16 Do n't leak exception info of already caught exceptions to context .. _minimal , complete , and verifiable example : https : //stackoverflow.com/help/mcve .. _uWSGI HTTP Router : http : //uwsgi-docs.readthedocs.io/en/latest/HTTP.html # the-uwsgi-http-https-router Fixed an issue where the default `` OPTIONS `` response was not Fixed ` send_from_directory ` not expanding to the application root path Reduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing `` flask.ext `` is now deprecated ( pull request `` # 1484 `` ) . .. _ # 2223 : https : //github.com/pallets/flask/pull/2223 world greeting . that can invoke Flask CLI commands for testing . : pr : ` 2636 ` Fixed an issue where `` |tojson `` was not quoting single quotes which Flask will now raise an error if you attempt to register a new returned to the WSGI server but has the advantage that the garbage : pr : ` 2765 ` The context preservation on exceptions is now an integral component of greenlets . : copyright : 2010 Pallets `` dict `` to : meth : ` test_client.open < werkzeug.test.Client.open > ` . def set_init_version ( version ) : ` Werkzeug documentation < http : //werkzeug.pocoo.org/docs > ` _ =============== : class : ` ~logging.Logger ` , so head over to the official ` logging Fixed a bug that prevented `` FLASK_APP=foobar/__init__.py `` from unicode PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT \vspace { 3cm } \par\nobreak used instead of : data : ` PREFERRED_URL_SCHEME ` . ( ` # 2430 ` _ ) Repackage 0.12.3 to fix package layout issue . ( ` # 2728 ` _ ) Modules can now register for a subdomain instead of just an URL author = `` Pallets '' and `` port `` arguments , using default values when `` None `` . This Logger now only returns the debug log setting if it was not set or `` TESTING `` . function . deprecated for : func : ` flask.send_file ` because it was unreliable . % % \endgroup license_file = LICENSE.rst : issue : ` 2586 ` Released 2010-05-12 , codename Jägermeister changed.append ( True ) flashing on sessions implementations which use external storage . .. _ # 2722 : https : //github.com/pallets/flask/issues/2722 license 'console_scripts ' : [ `` JSONIFY_PRETTYPRINT_REGULAR=False `` by removing unnecessary white without specific prior written permission . `` Code '' : `` https : //github.com/pallets/flask '' , echo.The 'sphinx-build ' command was not found . Make sure you have Sphinx Session is now stored after callbacks so that if the session payload installation % \gdef\ @ thanks { } \gdef\ @ author { } \gdef\ @ title { } .. _Jinja : http : //jinja.pocoo.org/ Added : attr : ` flask.views.View.decorators ` to support simpler echo.may add the Sphinx directory to PATH . First public preview release . Implemented : func : ` flask.has_request_context ` .. image : : _static/logo-full.png the client uses backslashes to escape the directory the files where signals `` Programming Language : : Python '' , `` jsonify ( error= '' error msg '' ) , 400 `` from a view function . override behavior of serving static files from Flask when using html_favicon = `` _static/flask-icon.png '' if change_info : collector is not needed on CPython to tear down the request unless Fixed an issue causing exceptions raised before entering a request or app Bugfix release , unreleased Added the `` JSONIFY_PRETTYPRINT_REGULAR `` configuration variable . Added support for : func : ` ~flask.send_file ` `` category_filter `` argument . < http : //jinja.pocoo.org/docs/templates/ > ` _ for more information . information . Added support for byte strings back to the session system . This broke BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND it is a convention that UNIX text files end with a newline and some information around which means that teardown handlers are able to 'dotenv ' : [ 'python-dotenv ' ] , Added ` required_methods ` attribute to view functions to force-add methods 'Werkzeug > =0.14 ' , the with statement for playing in the console . Flask License @ app.route ( '/ ' ) was linked to `` DEBUG `` alone and is now linked to either `` DEBUG `` or over the old `` flask.run ( ) `` method as it works faster and more limit the impact an attacker can do if the secret key leaks . See this software without specific prior written permission . implementation of the sessions can be changed without having to .. _Clone : https : //help.github.com/en/articles/fork-a-repo # step-2-create-a-local-clone-of-your-fork % % \g @ addto @ macro\ @ noligs { \let'\textsinglequote } .. _ # 2742 : https : //github.com/pallets/flask/issues/2742 `` options `` ( issue `` # 1288 `` ) . version , codename , release_date.strftime ( ' % d/ % m/ % Y ' ) \renewcommand\thepart { \ @ Roman\c @ part } Added : meth : ` flask.Config.from_json ` . The : func : ` flask.Request.on_json_loading_failed ` now returns a JSON formatted expire if the browser window closes . The automatically provided `` OPTIONS `` method is now correctly argument . HEAD requests to a method view now automatically dispatch to the ` get ` { \py @ TitleColor } { 0em } { \py @ TitleColor } { \py @ NormalColor } blueprints rarely used feature and led to some confusing behavior . becomingbig a decorator . REM Command file for Sphinx documentation Disable logger propagation by default for the app logger . ] , Redistribution and use in source ( the SVG file ) and binary forms ( rendered handler ) and : func : ` ~flask.helpers.send_file ` . This hook is provided a < https : //sentry.io/welcome/ > ` _ for dealing with application errors . It 's Flask in debug mode will now complain with an assertion error if a view refactored Flask internally . It now consists of more than a echo.http : //sphinx-doc.org/ \vspace * { 3cm } The following old deprecated code was removed . : issue : ` 2385 ` installation on systems with custom module hooks , e.g . Google App Engine , or when the different design and also replaces `` Flask-Script `` . dangerous but should probably be permitted . \def\ @ spart # 1 { % 'Topic : : Internet : : WWW/HTTP : : WSGI : : Application ' , Try to follow ` PEP8 ` _ , but you may ignore the line length limit if following to the render function . quickstart default , and an indented format in debug mode . ( ` # 2193 ` _ ) .. _entry point : https : //packaging.python.org/tutorials/packaging-projects/ # entry-points if the request dies with an exception and an error handling page include tox.ini content type . ( ` # 2358 ` _ ) Released 2010-05-28 User 's Guide < http : //jinja.pocoo.org/docs/templates > ` _ for more information . % \sphinxlogo % application explicitly adds 'OPTIONS ' as method to the URL rule . In background information about Flask , then focuses on step-by-step .. _MarkupSafe : https : //pypi.org/project/MarkupSafe/ made the filter not work properly in HTML attributes . Now it 's : meth : ` ~Flask.handle_url_build_error ` . ( ` # 2017 ` _ ) Mimetype guessing and ETag generation for file-like objects in fail ( 'You have uncommitted changes in git ' ) `` get `` method if no handler was implemented . find . -name ' * ~ ' -exec rm -f { } Imagine your application is listening on the following application Ported test suite to py.test . Implemented generic : ref : ` views ` ( class-based views ) . method , this part of the documentation is for you . e.g . Google App Engine , or when the import name is inside a zip Flask will now log by default even if debug is disabled . The log cli Added the ability to register callbacks that are only triggered once at : data : ` ~errno.ENOTDIR ` errors . : pr : ` 2581 ` application . This also adds support for URL generation without an incorrectly introduced in 0.6 . is raised . See : ref : ` upgrading-to-new-teardown-handling ` This logo or a modified version may be used by anyone to refer to the Blueprint view function names may not contain dots . ( ` # 2450 ` _ ) some .pyc files ) \nobreak Added before_render_template signal . .. _ItsDangerous : https : //pythonhosted.org/itsdangerous/ to warn you about them . it is not possible to define user exception handlers . That way you can styleguide \definecolor { TitleColor } { rgb } { 0,0,0 } % undefined Only tuples are interpreted as response data . : issue : ` 2736 ` `` Operating System : : OS Independent '' , % fix single quotes , for inconsolata . ( does not work ) this case no automatic OPTIONS handling kicks in . `` template_filter `` method family . : issue : ` 2666 ` % % \endinput { \py @ TitleColor\thesubsection } { 0.5em } { \py @ TitleColor } { \py @ NormalColor } ` Werkzeug documentation < https : //werkzeug.palletsprojects.com/ > ` _ Added `` * * kwargs `` to : meth : ` flask.Test.test_client ` to support View functions can now return a tuple with the first instance being an `` flask.Flask.request_globals_class `` got renamed to return 'Hello , World ! ' Python requirements changed : requiring Python 2.6 or 2.7 now to set-cookie behavior . If set to `` True `` a permanent session will be Fixed an issue where the test client if used with the `` with '' deal well when this newline is missing . See an extension author to create exceptions that will by default result reliable and caused issues on Google 's App Engine . Until 1.0 the old .. _ # 2751 : https : //github.com/pallets/flask/issues/2751 only active for `` .html `` , `` .htm `` , `` .xml `` and `` .xhtml `` . Inside is only active for `` .html `` , `` .htm `` , `` .xml `` and `` .xhtml `` . .. _authors : Popen ( cmd ) .wait ( ) : pr : ` 2223 ` : class : ` ~cli.ScriptInfo ` object will be passed . ( ` # 2319 ` _ ) include CONTRIBUTING.rst native Python 2 string ( bytes ) with UTF-8 coded bytes . : issue : ` 2933 ` ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT more reliable in case something handles an exception halfway through methods on registration . Fixes an issue with template loading from directories when modules having to override the Flask class . latex_elements = { invoking . This will allow some uses that are potentially dangerous but 'dev ' : [ notice , this list of conditions and the following disclaimer . : meth : ` flask.Flask.send_static_file ` ( used for the default static debug server through the click CLI system . This is recommended over the old for ` after_request ` was changed . It 's now no longer executed when an exception config key . `` tojson `` filter now does not escape script blocks in HTML5 distinguish error from success cases . Added ` create_jinja_loader ` to override the loader creation process . ` flask.request.json ` property . : attr : ` ~Flask.jinja_env ` was already accessed . : pr : ` 2373 `","['AUTHORS', 'CHANGES.rst', 'CONTRIBUTING.rst', 'LICENSE', 'LICENSE.rst', 'MANIFEST.in', 'Makefile', 'README.rst', 'artwork/LICENSE', 'artwork/LICENSE.rst', 'docs/Makefile', 'docs/_static/flask-favicon.ico', 'docs/_static/{flask.png => flask-icon.png}', 'docs/_static/{logo-full.png => flask-logo.png}', 'docs/_static/touch-icon.png', 'docs/api.rst', 'docs/becomingbig.rst', 'docs/changelog.rst', 'docs/cli.rst', 'docs/conf.py', 'docs/contents.rst.inc', 'docs/deploying/cgi.rst', 'docs/deploying/index.rst', 'docs/deploying/uwsgi.rst', 'docs/deploying/wsgi-standalone.rst', 'docs/errorhandling.rst', 'docs/extensiondev.rst', 'docs/flaskstyle.sty', 'docs/htmlfaq.rst', 'docs/index.rst', 'docs/installation.rst', 'docs/latexindex.rst', 'docs/license.rst', 'docs/logo.pdf', 'docs/make.bat', 'docs/patterns/appfactories.rst', 'docs/patterns/jquery.rst', 'docs/patterns/sqlalchemy.rst', 'docs/quickstart.rst', 'docs/requirements.txt', 'docs/templating.rst', 'docs/testing.rst', 'docs/tutorial/deploy.rst', 'docs/tutorial/install.rst', 'docs/unicode.rst', 'flask/__init__.py', 'flask/__main__.py', 'flask/_compat.py', 'flask/app.py', 'flask/blueprints.py', 'flask/cli.py', 'flask/config.py', 'flask/ctx.py', 'flask/debughelpers.py', 'flask/globals.py', 'flask/helpers.py', 'flask/json/__init__.py', 'flask/json/tag.py', 'flask/logging.py', 'flask/sessions.py', 'flask/signals.py', 'flask/templating.py', 'flask/testing.py', 'flask/views.py', 'flask/wrappers.py', 'scripts/make-release.py', 'setup.cfg', 'setup.py', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_config.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_json_tag.py', 'tests/test_logging.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py', 'tests/test_views.py']",Merge pull request # 3270 from pallets/metadata
69,6cd92ebc323d7f3c8584f155c445696e8a2b057c,2019-06-21 09:07:05-07:00,@ click.argument ( 'name ' ) export FLASK_SKIP_DOTENV=1 $ flask create-user admin This example adds the command `` create-user `` that takes the argument This example adds the command `` create_user `` that takes the argument @ app.cli.command ( ) $ flask run .. code-block : : none $ export FLASK_APP=hello flask user create demo flask run > set FLASK_APP=hello $ export FLASK_SKIP_DOTENV=1 set FLASK_APP=hello export FLASK_RUN_PORT=8000 export FLASK_APP=hello flask create_user admin .. code-block : : bash $ flask user create demo $ export FLASK_RUN_PORT=8000,['docs/cli.rst'],Merge pull request # 3269 from pallets/command-name
70,185d7cbab279ef7c27b46694b4b6d93a8d6f0421,2019-06-21 08:33:59-07:00,"Until Werkzeug 1.0.0 , this attribute will only exist during unhandled import pytest # replace the body with JSON from werkzeug.exceptions import HTTPException exceptions even if there is no `` 500 `` error handler . response.content_type = `` application/json '' def app ( self , app ) : even for the default 500 response when there is no handler . `` after_request `` functions and other finalization is done behavior . return e original = getattr ( e , `` original_exception '' , None ) `` Exception `` handler will not handle `` HTTPException `` subclasses raise InternalServerError ( ) display it . Otherwise , the original exception is logged , and .. code-block : : python # TODO : pass as param when Werkzeug > =1.0.0 is required def test_handle_class_or_code ( self , app , client , to_handle ) : such as `` HTTPException `` or even `` Exception `` . However , be aware that response.data = json.dumps ( { server_error = handler ( server_error ) for a 500 internal server error is used . If no such handler assert isinstance ( e , InternalServerError ) handler = self._find_error_handler ( server_error ) : meth : ` Flask.finalize_request ` is called for all unhandled the default HTML errors pages into JSON , for example . However , this consistent . : pr : ` 3266 ` } ) raise self.Custom ( ) associated with it , or that was raised from an error handler . handler = self._find_error_handler ( InternalServerError ( ) ) this is similar to doing `` except Exception : `` in Python , it will register handlers for both `` HTTPException `` and `` Exception `` , the raise KeyError ( ) handler will trigger for things you do n't cause directly , such as 404 directly to the handler . The same is true if the handler is for the return `` wrapped `` + type ( original ) .__name__ def handle_exception ( e ) : be passed an instance of `` InternalServerError `` , not the original return self.finalize_request ( server_error , from_error_handler=True ) these will catch more than you might expect . an : exc : ` ~werkzeug.exceptions.InternalServerError ` is returned . behavior for compatibility . base `` HTTPException `` . This makes error handler behavior more return render_template ( `` 500.html '' ) , 500 class Custom ( Exception ) : def do_error ( ) : def do_abort ( ) : return render_template ( `` 500_unhandled.html '' , e=original ) , 500 responses , you could also pass them through directly . assert isinstance ( e , InternalServerError ) # now you 're handling non-HTTP exceptions only specific exceptions . Since `` HTTPException `` instances are valid WSGI be re-raised immediately , otherwise it is logged and the handler assert client.get ( `` /error '' ) .data == b '' direct KeyError '' assert client.get ( `` /abort '' ) .data == b '' direct '' Error handlers for `` InternalServerError `` or `` 500 `` will always be def handle_500 ( e ) : return self.report_error ( e ) if handler is not None : this will be invoked . As of Flask 1.1.0 , this error handler will always subclasses . It will receive `` 404 `` routing exceptions . When there is no error handler registered for an exception , a 500 `` `` `` `` `` `` `` `` `` `` `` `` '' `` InternalServerError `` and `` 500 `` are aliases , they should return `` direct '' capture * all * otherwise unhandled errors , including all HTTP status class TestGenericHandlers ( object ) : codes . In most cases it will be safer to register handlers for more .. note : : have the same behavior . Both should only receive unhandled exception is available as `` e.original_exception `` . exists , a default 500 internal server error message is displayed . assert client.get ( `` /abort '' ) .data == b '' 500 '' return type ( e ) .__name__ def handle_http ( e ) : def do_raise ( ) : if handler is None : `` `` '' Test how very generic handlers are dispatched to . '' '' '' Internal Server Error will be returned instead . See handler , setting `` original_exception `` to the unhandled if original is not None : flask.abort ( 500 ) assert client.get ( `` /keyerror '' ) .data == b '' KeyError '' `` code '' : e.code , errors , use `` getattr `` to get access it for compatibility . # wrapped unhandled error assert client.get ( `` /abort '' ) .data == b '' direct InternalServerError '' so you do n't lose information about the HTTP error . # pass through HTTP errors `` `` '' Handle an exception that did not have an error handler Prior to Werkzeug 1.0.0 , `` InternalServerError `` will not .. versionchanged : : 1.1.0 server_error.original_exception = e `` getattr ( e , `` original_exception '' , None ) `` to simulate the `` description '' : e.description , `` `` '' Default exception handling that kicks in when an exception It is possible to register error handlers for very generic base classes Unhandled Exceptions : meth : ` flask.Flask.handle_exception ` for information about this return str ( e.code ) always have an `` original_exception `` attribute . Use If an error handler is registered for `` InternalServerError `` or `` InternalServerError `` , which might wrap another error . `` `` '' Generic `` Exception `` will handle all exceptions directly , Always passes the `` InternalServerError `` instance to the error . # start with the correct headers and status code from the error passed an instance of `` InternalServerError `` . If they are invoked return `` direct `` + type ( e ) .__name__ all errors , even unhandled ones , are presented to the user . However , `` `` '' `` HTTPException `` should only receive `` HTTPException `` flask.abort ( 500 ) because it the `` HTTPException `` handler is more specific . return app `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` '' `` 500 `` , it will be used . For consistency , the handler will occurs that is not caught . In debug mode the exception will # TODO : also remove note about this from docstring and docs assert client.get ( `` /not-found '' ) .data == b '' direct NotFound '' Always sends the : data : ` got_request_exception ` signal . Generic Exception Handlers An error handler for `` Exception `` might seem useful for changing how If there is an error handler registered for `` InternalServerError `` , registered for instead of the order they are registered in . def do_custom ( ) : .. versionchanged : : 0.11 response = e.get_response ( ) def report_error ( self , e ) : Error handlers still respect the exception class hierarchy . If you unhandled error . The original error is available as `` e.original_error `` . assert client.get ( `` /keyerror '' ) .data == b '' wrapped KeyError '' available as `` e.original_exception `` rather than being passed assert client.get ( `` /error '' ) .data == b '' wrapped KeyError '' `` name '' : e.name , assert client.get ( `` /custom '' ) .data == b '' direct Custom '' def test_handle_generic ( self , app , client ) : mode , the error will be re-raised so that the debugger can return response always receive the `` InternalServerError `` . The original assert client.get ( `` /custom '' ) .data == b '' wrapped Custom '' return self.finalize_request ( handler ( e ) , from_error_handler=True ) return render_template ( `` 500_generic.html '' , e=e ) , 500 Handlers are prioritized by specificity of the exception classes they are assert client.get ( `` /raise '' ) .data == b '' direct InternalServerError '' assert client.get ( `` /error '' ) .data == b '' 500 '' if isinstance ( e , HTTPException ) : return InternalServerError ( ) def test_handle_generic_http ( self , app , client ) : `` `` '' Return JSON instead of HTML for HTTP errors . '' '' '' def handle_500 ( e ) : from flask import json An error handler for `` HTTPException `` might be useful for turning def handle_exception ( e ) : assert client.get ( `` /not-found '' ) .data == b '' 404 '' server_error = InternalServerError ( ) # direct 500 error , such as abort ( 500 ) If : attr : ` propagate_exceptions ` is `` True `` , such as in debug def do_abort ( ) : assert isinstance ( e , HTTPException ) and 405 errors during routing . Be sure to craft your handler carefully This always causes a 500 `` InternalServerError `` . if original is None : due to an unhandled exception , that original exception is now app.config [ `` PROPAGATE_EXCEPTIONS '' ] = False including `` HTTPExceptions `` . pass","['CHANGES.rst', 'docs/errorhandling.rst', 'src/flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 3266 from pallets/internal-server-error-type
71,2fa30f6a9e67e4515c85c6fe776783b058097498,2019-06-13 12:46:53-07:00,"return value assert client.get ( `` /1,2,3 '' ) .data == b '' 1|2|3 '' class ContextConverter ( BaseConverter ) : : issue : ` 3088 ` base_to_url = super ( ListConverter , self ) .to_url than when it 's created . This allows custom URL converters to access class ListConverter ( BaseConverter ) : return name from werkzeug.routing import BaseConverter def index ( args ) : with ctx : the app and request contexts , such as to query a database for an id . if self.url_adapter is not None : def to_url ( self , value ) : self.request.url_rule , self.request.view_args = result def to_python ( self , value ) : def index ( args ) : with app.test_request_context ( ) : assert url_for ( `` index '' , args= [ 4 , 5 , 6 ] ) == `` /4,5,6 '' self.match_request ( ) def test_custom_converters ( app , client ) : return value.split ( `` , '' ) return `` , '' .join ( base_to_url ( x ) for x in value ) app.url_map.converters [ `` ctx '' ] = ContextConverter url_rule , self.request.view_args = self.url_adapter.match ( return_rule=True ) return value.split ( `` , '' ) URL matching now occurs after the request context is pushed , rather def to_url ( self , value ) : def test_context_available ( app , client ) : result = self.url_adapter.match ( return_rule=True ) assert has_request_context ( ) if self.url_adapter is not None : assert ctx.request.blueprint == bp.name return `` | '' .join ( args ) from flask import url_for def index ( name ) : def test_custom_converters ( app , client ) : base_to_url = super ( ListConverter , self ) .to_url assert client.get ( `` /1,2,3 '' ) .data == b '' 1|2|3 '' return `` | '' .join ( args ) class ListConverter ( BaseConverter ) : from werkzeug.routing import BaseConverter app.url_map.converters [ `` list '' ] = ListConverter self.match_request ( ) return `` , '' .join ( base_to_url ( x ) for x in value ) self.request.url_rule = url_rule def to_python ( self , value ) : app.url_map.converters [ `` list '' ] = ListConverter from flask import has_request_context @ app.route ( `` / < list : args > '' ) assert client.get ( `` /admin '' ) .data == b '' admin '' assert ctx.request.blueprint == bp.name","['CHANGES.rst', 'src/flask/ctx.py', 'tests/test_basic.py', 'tests/test_converters.py', 'tests/test_testing.py']",Merge pull request # 3104 from eladm26/adding_models_converter
72,d5fea5fa1da0c56860e7023e4af3ba2eb0097dd7,2019-06-12 14:10:42-07:00,"`` `` '' Get the exception class being handled . For HTTP status codes or `` HTTPException `` subclasses , return both the exception and `` `` '' code as an integer . `` `` '' Ensure that we register only exceptions as handler keys '' '' '' status code . : param exc_class_or_code : Any exception class , or an HTTP status",['flask/app.py'],Merge pull request # 3253 from aligoren/document-get-exc-class-and-code
73,53f5fd234b8a7377c401ae88e2fb6c29812715d5,2019-06-12 14:02:56-07:00,"blueprint 's root path . Blueprint templates are disabled by to the app 's template search path . The path is relative to the blueprint . : param url_defaults : A dict of default values that blueprint routes when the blueprint is registered on an application . functions that will be called with the and the blueprint 's static files wo n't be accessible . application by recording them for later registration . based on `` import_name `` . In certain situations this automatic detection can fail , so the path can be specified manually default . that is called with : class : ` ~flask.blueprints.BlueprintSetupState ` Decorating a function with a blueprint creates a deferred function : param static_url_path : The url to serve static files from . default . Blueprint templates have a lower precedence than those instead . without requiring an application object ahead of time . It uses the : param template_folder : A folder with templates that should be added the blueprint 's root path . Blueprint static files are disabled later . `` __name__ `` . This helps locate the `` root_path `` for the Defaults to `` static_folder `` . If the blueprint does not have : param static_folder : A folder with static files that should be : class : ` ~flask.blueprints.BlueprintSetupState ` later to register functions will receive by default . : param subdomain : A subdomain that blueprint routes will match on by app-related functions that can be registered on a real application or other things on the main application . See : ref : ` blueprints ` for more a `` url_prefix `` , the app 's static route will take precedence , `` `` '' Represents a blueprint , a collection of routes and other information . by default . `` `` '' Represents a blueprint . A blueprint is an object that records : param name : The name of the blueprint . Will be prepended to each endpoint name . same decorators as : class : ` ~flask.Flask ` , but defers the need for an : param url_prefix : A path to prepend to all of the blueprint 's URLs , : param root_path : By default , the blueprint will automatically this See : ref : ` blueprints ` for more information . : param import_name : The name of the blueprint package , usually A blueprint is an object that allows defining application functions served by the blueprint 's static route . The path is relative to in the app 's templates folder . to make them distinct from the rest of the app 's routes .",['flask/blueprints.py'],Merge pull request # 3248 from Vicolatope/document-blueprint-parameters
74,f7f1d9de3daa84ba968fd53553dc8fdb277219a3,2019-06-12 11:07:04-07:00,".. code-block : : python When using Flask for web APIs , you can use the same techniques as above return jsonify ( error=str ( e ) ) , 404 use that as the JSON error message , and set the status code to 404 . resource = get_resource ( ) def get_one_cheese ( ) : if resource is None : return jsonify ( resource ) abort ( 404 , description= '' Resource not found '' ) with a `` description `` parameter . The : meth : ` ~flask.errorhandler ` will to return JSON responses to API errors . : func : ` ~flask.abort ` is called from flask import abort , jsonify Returning API errors as JSON def resource_not_found ( e ) :",['docs/patterns/errorpages.rst'],Merge pull request # 3260 from LBWright/error-handling
75,46a67b6789ceb3ba814afdb72ed7770033858a73,2019-06-12 08:17:25-07:00,"rv = client.get ( '/ ' , 'http : //foo.localhost ' ) rv = client.get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) def test_server_name_subdomain ( ) : rv = client.get ( `` / '' , `` http : //foo.dev.local '' ) rv = client.get ( `` / '' , `` http : //dev.local:5000 '' ) # suppress Werkzeug 1.0 warning about name mismatch yield gc.collect ( ) def test_test_app_proper_environ ( ) : rv = client.get ( `` / '' , `` https : //dev.local '' ) except ValueError as e : @ app.route ( '/ ' , subdomain='foo ' ) app.config [ `` SERVER_NAME '' ] = `` dev.local:443 '' # suppress Werkzeug 0.15 warning about name mismatch app.config.update ( SERVER_NAME='localhost.localdomain:443 ' ) assert not recwarn.list , '\n'.join ( str ( w.message ) for w in recwarn.list ) rv = client.get ( '/ ' , 'http : //127.0.0.1:3000/ ' ) assert rv.status_code == 404 if matching else 204 return 'Foo ' assert rv.data == b '' default '' rv = client.get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) def catch_deprecation_warnings ( recwarn ) : try : app.config.update ( app.config.update ( SERVER_NAME='localhost.localdomain ' ) # ip address ca n't match name rv = client.get ( `` / '' , `` http : //foo.localhost '' ) rv = client.get ( '/ ' , 'https : //localhost.localdomain ' ) `` server name from the WSGI environment ( 'localhost.localdomain ' ) '' rv = client.get ( '/ ' , 'http : //foo.localhost.localdomain ' ) # ip address ca n't match name assert rv.data == b '' subdomain '' def test_send_file_xsendfile ( self , app , req_ctx ) : rv = client.get ( `` / '' ) coverage run -p -m pytest -- tb=short -Werror -- junitxml=test-results.xml { posargs : tests examples } assert rv.status_code == 404 return `` subdomain '' app.config [ `` SERVER_NAME '' ] = `` dev.local:5000 '' coverage run -p -m pytest -- tb=short -Werror { posargs : tests examples } `` ( 'localhost.localdomain:443 ' ) does not match the `` return 'Foo SubDomain ' app.config [ `` SERVER_NAME '' ] = `` dev.local '' `` server name from the WSGI environment ( 'foo.localhost ' ) '' with pytest.warns ( None ) : @ app.route ( '/ ' ) assert rv.data == b'Foo ' if rv.status_code ! = 404 : `` the server name provided `` def test_send_file_xsendfile ( self , app , req_ctx , catch_deprecation_warnings ) : `` server name from the WSGI environment ( 'localhost ' ) '' coverage run -p -m pytest -- tb=short { posargs : tests examples } `` ( 'localhost.localdomain ' ) does not match the `` assert rv.status_code == 404 if matching else 204 `` ( 'localhost.localdomain:5000 ' ) does not match the `` assert rv.data == b'Foo SubDomain ' # Werkzeug 1.0 fixes matching https scheme with 443 port rv = client.get ( `` / '' , `` https : //dev.local:5000 '' ) coverage run -p -m pytest -- tb=short -- junitxml=test-results.xml { posargs : tests examples } ) rv = client.get ( '/ ' , 'https : //localhost.localdomain ' ) @ pytest.fixture ( autouse=True ) assert str ( e ) == ( return `` default '' rv = client.get ( '/ ' , 'http : //127.0.0.1:3000/ ' ) assert rv.data == b '' default '' rv = client.get ( '/ ' ) # Werkzeug 0.8 # Werkzeug 0.7 app.config.update ( SERVER_NAME='localhost.localdomain ' ) SERVER_NAME='localhost.localdomain:5000 ' )","['tests/conftest.py', 'tests/test_basic.py', 'tests/test_helpers.py', 'tests/test_reqctx.py', 'tox.ini']",Merge pull request # 3261 from pallets/fix-server-name-warnings
76,d4b688bd035b9704b3168b28fed39c8fcfe3b997,2019-06-01 12:28:29-04:00,"`` [ Errno 2 ] Unable to load configuration file ( No such file or directory ) : '' rv = flask.render_template_string ( `` Hello { { config.WORLD_NAME } } { { foo } } '' ) `` Session transactions only make sense with cookies enabled . '' message = `` Python % ( python ) s\nFlask % ( flask ) s\nWerkzeug % ( werkzeug ) s '' assert rv is self , `` Popped wrong request context . ( % r instead of % r ) '' % ( raise TypeError ( `` filename unavailable , required for sending as attachment '' ) message = `` Python % ( python ) s\n '' `` Flask % ( flask ) s\n '' `` Werkzeug % ( werkzeug ) s '' ) self , `` filename unavailable , required for `` `` sending as attachment '' rv = flask.render_template_string ( `` Hello { { config.WORLD_NAME } } `` `` { { foo } } '' ) rv , raise TypeError ( `` Request finalizing failed with an `` `` error while handling an error '' assert ( `` Make sure to directly send `` `` your POST-request to this URL '' ) in str ( e ) assert ( `` Make sure to directly send your POST-request to this URL '' ) in str ( e ) `` import flask\n '' `` app = flask.Flask ( __name__ ) \n '' assert view_func is not None , `` expected view func if endpoint `` `` is not provided . '' ) , `` Popped wrong request context. `` `` ( % r instead of % r ) '' % ( rv , self ) rv is self `` import flask\napp = flask.Flask ( __name__ ) \n '' `` INSERT INTO post ( title , body , author_id ) VALUES ( ? , ? , ? ) '' , assert view_func is not None , `` expected view func if endpoint is not provided . '' `` Request finalizing failed with an error while handling an error '' ) `` [ Errno 2 ] Unable to load configuration `` `` file ( No such file or directory ) : '' `` Session backend did not open a session . Check the configuration '' `` INSERT INTO post ( title , body , author_id ) '' `` VALUES ( ? , ? , ? ) '' , assert ( `` Session transactions only make sense `` `` with cookies enabled . '' `` Session backend did not open a session. `` `` Check the configuration ''","['examples/tutorial/flaskr/blog.py', 'src/flask/app.py', 'src/flask/cli.py', 'src/flask/ctx.py', 'src/flask/helpers.py', 'src/flask/testing.py', 'tests/test_basic.py', 'tests/test_config.py', 'tests/test_instance_config.py', 'tests/test_templating.py']",Merge pull request # 3247 from pallets/join-strings
77,3db469795996523cf834c07684b0eff540227aba,2019-06-01 12:12:49-04:00,"from jinja2 import escape import pytest from .config import Config from .ctx import ( FlaskGroup , from .signals import appcontext_tearing_down signals_available = False from werkzeug.local import LocalStack , LocalProxy from .json import jsonify from flask import json _app_ctx_stack , from werkzeug.local import LocalStack from flask import Flask from flask import render_template from flask.cli import ScriptInfo find_best_app , from flask.json.tag import TaggedJSONSerializer , JSONTag import functools from flask.cli import dotenv from flask.logging import default_handler , has_level_handler , wsgi_errors_stream from flask import jsonify , render_template , request g , from .helpers import get_flashed_messages send_from_directory , import werkzeug locate_app , from ._compat import integer_types from .testing import EnvironBuilder from flaskr.db import get_db , init_db from flask.cli import prepare_import DispatchingJinjaLoader , from setuptools import setup from werkzeug.datastructures import Headers from .json import dumps as json_dumps from werkzeug.routing import Rule from . import json from werkzeug.datastructures import ImmutableDict got_request_exception , import posixpath send_file , from __future__ import absolute_import flash , from . import Flask prepare_import , url_for , from .ctx import RequestContext from flask.json.tag import TaggedJSONSerializer rev : v2.1.0 from flask.logging import wsgi_errors_stream from jinja2 import TemplateNotFound _request_ctx_stack , from flask.testing import EnvironBuilder from werkzeug.http import parse_date from setuptools import find_packages from .helpers import safe_join from .blueprints import Blueprint from ._compat import getargspec from flask.cli import ScriptInfo from flask._compat import text_type appcontext_pushed , BadRequest , from jinja2 import TemplateNotFound from .helpers import _PackageBoundObject from werkzeug.exceptions import InternalServerError from flask.testing import FlaskCliRunner from ._compat import fspath from flask.logging import default_handler from werkzeug.http import http_date , parse_cache_control_header , parse_options_header from flask._compat import iteritems , text_type has_app_context , message_flashed , make_response , from flask.cli import FlaskGroup import werkzeug.serving from .globals import request from .signals import request_finished from .signals import message_flashed import werkzeug.test from flask.helpers import is_ip , total_seconds HTTPException , from .ctx import _AppCtxGlobals from flask.json import dumps , loads from .helpers import _PackageBoundObject , _endpoint_from_view_func from jinja2 import FileSystemLoader from flask.cli import load_dotenv from werkzeug.exceptions import BadRequestKeyError from .globals import _request_ctx_stack from werkzeug.exceptions import NotFound from functools import partial request_started , from .testing import FlaskCliRunner as cls from werkzeug.routing import RoutingException from .. json import dumps from . import cli , json from flask.helpers import get_env from .wrappers import Response # We 're not exposing the actual json module but a convenient wrapper around from .testing import FlaskClient as cls from ._compat import string_types from flask import current_app from subprocess import PIPE from flask.json.tag import JSONTag # Use the same json implementation as itsdangerous on which we from flask import flash from .ctx import has_app_context _PackageBoundObject , get_load_dotenv , from flask.logging import has_level_handler from datetime import date from .templating import _default_template_ctx_processor from functools import partial from .templating import DispatchingJinjaLoader # it . current_app , MethodNotAllowed , from base64 import b64decode , b64encode # a more generic name . from ._compat import string_types , iteritems import mimetypes __version__ = `` 1.1.dev '' from ._compat import BROKEN_PYPY_CTXMGR_EXIT , reraise request , from .globals import _app_ctx_stack from werkzeug.security import generate_password_hash ) from .helpers import send_from_directory from ._compat import collections_abc from ._compat import text_type import errno from werkzeug.exceptions import RequestedRangeNotSatisfiable from .ctx import AppContext import logging import functools __version__ = `` 1.1.dev '' from .helpers import get_env from .ctx import AppContext , RequestContext , _AppCtxGlobals import errno get_version , find_package , from threading import RLock from flask.cli import locate_app dotenv , from flask import request from flask.cli import get_version import unicodedata from werkzeug.exceptions import MethodNotAllowed from werkzeug.exceptions import Forbidden import posixpath template_rendered , from flask import ( from . import __version__ from ._compat import implements_to_string before_render_template , import unicodedata from flask import _request_ctx_stack appcontext_tearing_down , from flask._compat import collections_abc import mimetypes from .signals import appcontext_popped files : `` ^ ( ? ! examples/ ) '' _endpoint_from_view_func , Environment , from flask.globals import current_app from .templating import ( from .cli import ScriptInfo request_finished , from .templating import render_template , render_template_string from werkzeug.exceptions import HTTPException args : [ `` -- application-directories '' , `` . : src '' ] from flask import Flask , current_app , Blueprint from itsdangerous import URLSafeTimedSerializer from subprocess import Popen from .globals import _app_ctx_stack appcontext_popped , from .signals import got_request_exception name : Reorder Python imports ( src , tests ) from werkzeug.routing import Map signals_available = False from werkzeug.exceptions import BadRequest , NotFound , RequestedRangeNotSatisfiable from .signals import appcontext_pushed from .app import Response from .globals import g import logging import flask hooks : from flaskr.db import get_db from .signals import template_rendered , before_render_template from jinja2 import Markup , escape from threading import Lock , Thread BadRequestKeyError , from base64 import b64encode import werkzeug.test from ._compat import with_metaclass from ._compat import with_metaclass _default_template_ctx_processor , from flask.globals import current_app , request session , from werkzeug.http import http_date from subprocess import PIPE , Popen from .globals import _request_ctx_stack , _app_ctx_stack from werkzeug.http import parse_cache_control_header from .json.tag import TaggedJSONSerializer locked_cached_property , from .helpers import url_for # depend anyways . from .helpers import ( from .. globals import request from functools import update_wrapper from .helpers import stream_with_context from . import json from werkzeug.datastructures import Headers , ImmutableDict from werkzeug.security import check_password_hash from .. globals import current_app from .ctx import after_this_request from .. _compat import iteritems from .helpers import get_load_dotenv from werkzeug.wrappers import Request as RequestBase from werkzeug.http import parse_options_header from threading import Thread from base64 import b64decode from flask.cli import with_appcontext copy_current_request_context , from ._compat import PY2 from .helpers import find_package from flask.cli import NoAppException from .config import ConfigAttribute rev : v2.2.3 default_exceptions , from .signals import ( from werkzeug.local import LocalProxy from flask.helpers import get_debug_flag , get_env get_env , from flask.cli import find_best_app from .templating import render_template from .helpers import locked_cached_property from .helpers import get_template_attribute from werkzeug.wrappers import Response as ResponseBase from flask import redirect from .globals import _request_ctx_stack , g , request , session from .helpers import is_ip from .signals import signals_available from datetime import date , datetime repo : https : //github.com/asottile/reorder_python_imports from werkzeug.wrappers import Request as RequestBase , Response as ResponseBase from flask import Blueprint , flash , g , redirect , render_template , request , url_for Blueprint , from werkzeug.exceptions import BadRequest , Forbidden , NotFound from jinja2 import FileSystemLoader id : reorder-python-imports from werkzeug.routing import BuildError , Map , RequestRedirect , RoutingException , Rule from flask import g , session from .blueprints import Blueprint from flask.cli import ( from flask import jsonify from flask.testing import make_test_environ_builder # This was the only thing that Flask used to export at one point and it had import werkzeug from werkzeug.datastructures import Headers from .signals import before_render_template jsonify = json.jsonify from ._compat import itervalues request_tearing_down , # the signals render_template , from ._compat import implements_to_string , text_type from .. _compat import text_type from flask import Flask from flaskr.db import init_db from setuptools import find_packages , setup from .signals import request_started from flask.json import dumps as json_dumps from ._compat import iteritems from .wrappers import Request , Response from .helpers import total_seconds from flask.json.tag import TaggedJSONSerializer from itsdangerous import json as _json from .signals import template_rendered from ._compat import getargspec , itervalues , reraise , text_type from jinja2 import BaseLoader has_request_context , from .signals import appcontext_pushed , appcontext_popped from jinja2 import Environment as BaseEnvironment redirect , from werkzeug.exceptions import ( from flask.cli import run_command from .helpers import send_file from flask.globals import _app_ctx_stack from threading import RLock from flask._compat import text_type , PY2 from .. json import loads from functools import update_wrapper from flask.testing import make_test_environ_builder , FlaskCliRunner , EnvironBuilder safe_join , from itsdangerous import BadSignature from flask._compat import StringIO from flask import current_app , g with_appcontext , from flask import Blueprint , render_template from flask import session from .signals import request_tearing_down from .. _compat import PY2 import werkzeug.serving from .templating import Environment from werkzeug.http import parse_cache_control_header from .globals import ( from jinja2 import BaseLoader , Environment as BaseEnvironment , TemplateNotFound from flask.testing import FlaskCliRunner as cls rev : v1.4.0 NoAppException , from .ctx import copy_current_request_context from __future__ import print_function get_template_attribute , AppGroup , from flask import g from datetime import timedelta from itsdangerous import json as _json from flask import url_for from werkzeug.security import check_password_hash , generate_password_hash import pkgutil from flask.cli import AppGroup from .templating import render_template_string signals_available , from flask import Blueprint from werkzeug.routing import RequestRedirect InternalServerError , from werkzeug.http import http_date , parse_date from .helpers import make_response from threading import Lock from .app import Flask , Request , Response from .wrappers import Request from werkzeug.routing import BuildError from .helpers import get_debug_flag from ._compat import integer_types , reraise , string_types , text_type import pkgutil from datetime import timedelta from jinja2 import Markup import pytest from ._compat import reraise load_dotenv , from .helpers import get_debug_flag , get_env , get_load_dotenv from flask._compat import StringIO , text_type from ._compat import string_types , text_type , PY2 , fspath stream_with_context , run_command , get_flashed_messages , from .app import Flask from flask.testing import FlaskClient as cls from ._compat import BROKEN_PYPY_CTXMGR_EXIT from . import cli from werkzeug.exceptions import Forbidden , InternalServerError , HTTPException , NotFound from jinja2 import Markup from .globals import session from .globals import session , _request_ctx_stack , _app_ctx_stack , current_app , request from .ctx import has_request_context from .app import Request from werkzeug.exceptions import BadRequest , NotFound from .helpers import flash from . import _request_ctx_stack from flask.helpers import get_debug_flag from flask.testing import EnvironBuilder ScriptInfo , from itsdangerous import BadSignature , URLSafeTimedSerializer from .config import Config , ConfigAttribute from __future__ import absolute_import , print_function from . import __version__ from .helpers import _endpoint_from_view_func from datetime import datetime from werkzeug.exceptions import default_exceptions get_debug_flag , after_this_request , from .globals import current_app from werkzeug.exceptions import BadRequest","['.pre-commit-config.yaml', 'examples/javascript/js_example/views.py', 'examples/javascript/setup.py', 'examples/javascript/tests/test_js_example.py', 'examples/tutorial/flaskr/auth.py', 'examples/tutorial/flaskr/blog.py', 'examples/tutorial/flaskr/db.py', 'examples/tutorial/setup.py', 'examples/tutorial/tests/conftest.py', 'examples/tutorial/tests/test_auth.py', 'examples/tutorial/tests/test_blog.py', 'examples/tutorial/tests/test_db.py', 'scripts/make-release.py', 'src/flask/__init__.py', 'src/flask/_compat.py', 'src/flask/app.py', 'src/flask/blueprints.py', 'src/flask/cli.py', 'src/flask/config.py', 'src/flask/ctx.py', 'src/flask/debughelpers.py', 'src/flask/globals.py', 'src/flask/helpers.py', 'src/flask/json/__init__.py', 'src/flask/json/tag.py', 'src/flask/logging.py', 'src/flask/sessions.py', 'src/flask/signals.py', 'src/flask/templating.py', 'src/flask/testing.py', 'src/flask/views.py', 'src/flask/wrappers.py', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_apps/blueprintapp/apps/admin/__init__.py', 'tests/test_apps/blueprintapp/apps/frontend/__init__.py', 'tests/test_apps/cliapp/app.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_apps/cliapp/importerrorapp.py', 'tests/test_apps/cliapp/multiapp.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_config.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_json_tag.py', 'tests/test_logging.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py', 'tests/test_views.py']",Merge pull request # 3246 from pallets/reorder-imports
78,ab8d60d826f2e07f70973c754134fd9508232b8a,2019-06-01 11:10:33-04:00,"package_dir= { `` '' : `` src '' } , with io.open ( `` flask/__init__.py '' , `` rt '' , encoding= '' utf8 '' ) as f : * * /_compat.py : E731 , B301 , F401 from setuptools import find_packages with io.open ( `` src/flask/__init__.py '' , `` rt '' , encoding= '' utf8 '' ) as f : packages= [ `` flask '' , `` flask.json '' ] , packages=find_packages ( `` src '' ) , flask src/flask src/flask/_compat.py : E731 , B301 , F401","['setup.cfg', 'setup.py', '{flask => src/flask}/__init__.py', '{flask => src/flask}/__main__.py', '{flask => src/flask}/_compat.py', '{flask => src/flask}/app.py', '{flask => src/flask}/blueprints.py', '{flask => src/flask}/cli.py', '{flask => src/flask}/config.py', '{flask => src/flask}/ctx.py', '{flask => src/flask}/debughelpers.py', '{flask => src/flask}/globals.py', '{flask => src/flask}/helpers.py', '{flask => src/flask}/json/__init__.py', '{flask => src/flask}/json/tag.py', '{flask => src/flask}/logging.py', '{flask => src/flask}/sessions.py', '{flask => src/flask}/signals.py', '{flask => src/flask}/templating.py', '{flask => src/flask}/testing.py', '{flask => src/flask}/views.py', '{flask => src/flask}/wrappers.py']",Merge pull request # 3245 from pallets/src-dir
79,48d0e86313b479f97cec1a9869bdaf468c248666,2019-06-01 09:36:23-04:00,"with c.session_transaction ( ) : os.environ = { `` FOO_SETTINGS '' : `` missing.cfg '' } assert msg.startswith ( assert app.jinja_env.auto_reload == True from hello import app `` file ( No such file or directory ) : '' os.environ = env return flask.jsonify ( * l ) __traceback_hide__ = True # Providing host_matching=True without static_host but with static_folder=None should not error . if _trigger == `` after '' : assert msg.endswith ( `` missing.cfg ' '' ) E501 `` [ Errno 2 ] Unable to load configuration `` `` file ( No such file or directory ) : '' for _x in range ( 10 ) : except : # noqa : B001 def test_config_from_envvar_missing ( monkeypatch ) : assert msg.endswith ( `` missing.cfg ' '' ) assert flask.json.loads ( rv.data ) == a_list os.environ = { `` FOO_SETTINGS '' : __file__.rsplit ( `` . `` , 1 ) [ 0 ] + `` .py '' } __traceback_hide__ = True # noqa : F841 def get_flashed_messages ( with_categories=False , category_filter= ( ) ) : { { value|super_reverse } } for x in range ( 10 ) : # bare except , handled by bugbear B001 return flask.jsonify ( * a_list ) id : check-byte-order-marker # but with static_folder=None should not error . # : instead ( an attribute of the Werkzeug exception : exc : ` ~werkzeug.exceptions.MethodNotAllowed ` ) per-file-ignores = if not has_encoding ( `` euc-kr '' ) : template_string = lambda : flask.render_template_string ( if _trigger == `` before '' : __traceback_hide__ = True # noqa : F841 assert not app.config.from_envvar ( `` FOO_SETTINGS '' , silent=True ) with c.session_transaction ( ) as sess : assert msg.startswith ( # Issue 1288 : Test that automatic options are not added l = [ except Exception : import OpenSSL # noqa : F401 % Apply following fix only on PDF output , i.e . pdfoutput macro is not # W = pycodestyle warnings # F = flake8 pyflakes # bin op line break , invalid select = B , E , F , W , B9 `` `` '' Test if ` find_best_app ` behaves as expected with different combinations of input . '' '' '' # E = pycodestyle errors # up to 88 allowed by bugbear B950 with c.session_transaction ( ) : with pytest.raises ( IOError ) as e : for _srcobj , loader in self._iter_loaders ( template ) : assert app.config.from_envvar ( `` FOO_SETTINGS '' ) def handle_403 ( e ) : AssertionError ( ) app.config.from_envvar ( `` FOO_SETTINGS '' ) class Foo ( object ) : repo : https : //gitlab.com/pycqa/flake8 assert app.jinja_env.auto_reload finally : `` [ Errno 2 ] Unable to load configuration `` __traceback_hide__ = True # noqa : F841 def handle ( self , record ) : # Issue 1288 : Test that automatic options are not added when non-uppercase 'options ' in methods def __new__ ( mcs , name , this_bases , d ) : for _x in range ( 3 ) : # when non-uppercase 'options ' in methods def catchall_errorhandler ( e ) : for srcobj , loader in self._iter_loaders ( template ) : def handle ( x , record ) : from werkzeug.test import Client not has_encoding ( `` euc-kr '' ) , reason= '' The euc-kr encoding is required . '' for x in range ( 3 ) : assert app.config [ `` JSON_SORT_KEYS '' ] == True test_modified_url_encoding = None `` os.environ '' , { `` FOO_SETTINGS '' : __file__.rsplit ( `` . `` , 1 ) [ 0 ] + `` .py '' } except : with pytest.raises ( IOError ) as e : env = os.environ # B = bugbear E722 `` `` '' Test if ` find_best_app ` behaves as expected with different combinations of input . '' '' '' # noqa : B950 assert app.templates_auto_reload == False with pytest.raises ( RuntimeError ) as e : from werkzeug.test import Client , EnvironBuilder def catchall_exception_handler ( e ) : __traceback_hide__ = True app = flask.Flask ( __name__ ) class Foo ( object ) : # noqa : B903 , for Python2 compatibility ) * * /_compat.py : E731 , B301 , F401 id : end-of-file-fixer import OpenSSL os.environ = { } msg = str ( e.value ) * * /__init__.py : F401 assert False , `` Flask ( import_name ) is importing import_name . '' AssertionError ( `` Flask ( import_name ) is importing import_name . '' ) app = flask.Flask ( __name__ ) client.get ( `` / '' ) # B9 = bugbear opinions assert not app.jinja_env.auto_reload class X ( object ) : Configuration values `` APPLICATION_ROOT `` and `` SERVER_NAME `` are only used when # : : exc : ` ~werkzeug.exceptions.MethodNotAllowed ` ) assert app.templates_auto_reload monkeypatch.setattr ( `` os.environ '' , { `` FOO_SETTINGS '' : `` missing.cfg '' } ) import unimportable # noqa : F401 def test_config_from_envvar_missing ( ) : a_list = [ reqctx = flask._request_ctx_stack.top.copy ( ) def get_flashed_messages ( with_categories=False , category_filter= [ ] ) : try : max-line-length = 80 monkeypatch.setattr ( `` os.environ '' , { } ) # Providing host_matching=True without static_host # : instead ( an attribute of the Werkzeug exception monkeypatch.setattr ( for trigger in `` before '' , `` after '' : assert not app.templates_auto_reload repo : https : //github.com/pre-commit/pre-commit-hooks rev : 3.7.7 def test_config_from_envvar ( monkeypatch ) : def handle_forbidden_subclass ( e ) : assert False assert `` 'FOO_SETTINGS ' is not set '' in str ( e.value ) match = re.search ( r '' ^Version\s+ ( . * ) '' , line.strip ( ) ) __traceback_hide__ = True except HTTPException as e : if trigger == `` after '' : # line length , handled by bugbear B950 Flask will automatically detect the factory ( `` create_app `` or `` make_app `` ) ) ignore = rev : v2.1.0 assert `` 'FOO_SETTINGS ' is not set '' in str ( e.value ) # but without static_host should error . # slice notation whitespace , invalid [ flake8 ] W503 % Apply following fix only on PDF output , i.e . pdfoutput macro is not common_object_test ( app ) id : trailing-whitespace def __new__ ( cls , name , this_bases , d ) : Configuration values `` APPLICATION_ROOT `` and `` SERVER_NAME `` are only used when assert app.config [ `` JSON_SORT_KEYS '' ] assert not app.config.from_envvar ( `` FOO_SETTINGS '' , silent=True ) with pytest.raises ( RuntimeError ) as e : def bp_exception_handler ( e ) : app.config.from_envvar ( `` FOO_SETTINGS '' ) common_object_test ( app ) return flask.jsonify ( l ) except : except HTTPException : match = re.search ( `` ^Version\s+ ( . * ) '' , line.strip ( ) ) E203 def test_config_from_envvar ( ) : # import at top , too many circular import fixes return flask.jsonify ( a_list ) rv = client.get ( `` / '' ) # __init__ modules export names id : flake8 { { value|super_reverse } } # Providing host_matching=True with static_folder but without static_host should error . hooks : assert app.jinja_env.auto_reload == False from hello import app # noqa : F401 except : # noqa : B001 assert app.config.from_envvar ( `` FOO_SETTINGS '' ) with c.session_transaction ( ) as s : for _trigger in `` before '' , `` after '' : msg = str ( e.value ) class X ( object ) : # noqa : B903 , for Python2 compatibility def bp_forbidden_handler ( e ) : def catchall_forbidden_handler ( e ) : E402 @ $ ( SPHINXBUILD ) -M $ @ `` $ ( SOURCEDIR ) '' `` $ ( BUILDDIR ) '' $ ( SPHINXOPTS ) $ ( O ) assert flask.json.loads ( rv.data ) == l additional_dependencies : [ flake8-bugbear ] import unimportable assert app.templates_auto_reload == True # Providing host_matching=True with static_folder if trigger == `` before '' : Flask will automatically detect the factory ( `` create_app `` or `` make_app `` ) template_string = lambda : flask.render_template_string ( # noqa : E731","['.pre-commit-config.yaml', 'docs/Makefile', 'docs/flaskstyle.sty', 'docs/patterns/appfactories.rst', 'docs/testing.rst', 'flask/_compat.py', 'flask/app.py', 'flask/cli.py', 'flask/helpers.py', 'flask/templating.py', 'flask/testing.py', 'flask/wrappers.py', 'scripts/make-release.py', 'setup.cfg', 'tests/templates/template_filter.html', 'tests/test_apps/helloworld/wsgi.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_config.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_json_tag.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py']",Merge pull request # 3241 from jon-stumpf/jss-updates
80,b61cbf8ab437574d4b041e49a214240b650eb1be,2019-06-01 08:59:01-04:00,"for examples of dispatch configuration ) . generating URLs outside of a request context . web server . web server . This is used for generating URLs outside the context of a `` SCRIPT_NAME `` instead ; see : ref : ` Application Dispatching < app-dispatch > ` request ( inside a request , the dispatcher is responsible for setting Configuration values `` APPLICATION_ROOT `` and `` SERVER_NAME `` are only used when","['docs/config.rst', 'flask/helpers.py']",Merge pull request # 3244 from paulgb/master
81,13b689bba6119613a2a47e8a9c84e82e69f602c4,2019-06-01 08:57:06-04:00,"run_command.make_context ( `` run '' , [ `` -- cert '' , `` not_here '' ] ) ctx , if ssl is None : except ImportError : def test_run_cert_no_ssl ( monkeypatch ) : ) try : appropriate error message . : issue : ` 3211 ` ssl = None raise click.BadParameter ( monkeypatch.setattr ( `` flask.cli.ssl '' , None ) 'Using `` -- cert '' requires Python to be compiled with SSL support . ' , param , with SSL support . Using the `` -- cert `` option will show an The `` flask run `` command no longer fails if Python is not built import ssl with pytest.raises ( click.BadParameter ) : import ssl","['CHANGES.rst', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 3242 from cslecrone/3211-ssl-import
82,6369537a49f55ba3c3e319b7d21b6c6a96e5d332,2019-05-31 16:47:32-04:00,"from flask import request else : record.url = request.url record.url = None record.remote_addr = request.remote_addr if has_request_context ( ) : record.remote_addr = request.remote_addr from flask import has_request_context , request record.url = request.url record.remote_addr = None",['docs/logging.rst'],Merge pull request # 3243 from DiegoAlbertoTorres/docs
83,a3272941ce76a212e9d8d55722a0b230b963411d,2019-05-31 15:33:06-04:00,"for examples of dispatch configuration ) . generating URLs outside of a request context . web server . web server . This is used for generating URLs outside the context of a `` SCRIPT_NAME `` instead ; see : ref : ` Application Dispatching < app-dispatch > ` request ( inside a request , the dispatcher is responsible for setting Configuration values `` APPLICATION_ROOT `` and `` SERVER_NAME `` are only used when","['docs/config.rst', 'flask/helpers.py']",Clarify documentation about how url_for uses configuration values ( # 2759 )
84,6e995f23792c1cc1809292c770d02797d80622fb,2019-05-31 14:06:54-04:00,flaskr.init_db ( ) with flaskr.app.app_context ( ) : with flaskr.app.app_context ( ) : with flaskr.app.test_client ( ) as client : yield client yield client client = flaskr.app.test_client ( ) flaskr.init_db ( ),['docs/testing.rst'],Merge pull request # 3240 from ultimecia7/docfix
85,5e15850532be5521dac7082b155b15b83e1236e8,2019-05-31 13:58:40-04:00,"url = url_parse ( path ) ) if url_scheme is None : base_url = `` { scheme } : // { netloc } / { path } '' .format ( super ( EnvironBuilder , self ) .__init__ ( path , base_url , * args , * * kwargs ) Will be removed in 1.2 . Construct `` flask.testing.EnvironBuilder `` base_url is not None builder = make_test_environ_builder ( app , path= '' /index '' , method= '' GET '' ) kwargs.setdefault ( `` app '' , self.app ) assert eb.script_root == `` '' ) with pytest.deprecated_call ( ) : from flask.testing import EnvironBuilder http_host = app.config.get ( `` SERVER_NAME '' ) or `` localhost '' if `` json '' in kwargs : path += sep + url.query if subdomain : app , base_url=None , `` instead . '' builder = EnvironBuilder ( self.application , * args , * * kwargs ) .. deprecated : 1.1 scheme=url.scheme or url_scheme , ) : def __init__ ( from flask.testing import make_test_environ_builder ) ! = bool ( def test_environbuilder_json_dumps ( app ) : path=app_root.lstrip ( `` / '' ) , sep = b '' ? '' if isinstance ( url.query , bytes ) else `` ? '' base_url = `` { scheme } : // { netloc } / { path } '' .format ( if base_url is None : builder = make_test_environ_builder ( self , * args , * * kwargs ) 'in 1.2 . Construct `` flask.testing.EnvironBuilder '' directly ' return json_dumps ( obj , * * kwargs ) * * kwargs `` `` '' An : class : ` ~werkzeug.test.EnvironBuilder ` , that takes defaults from the http_host = app.config.get ( `` SERVER_NAME '' ) or `` localhost '' warnings.warn ( subdomain or url_scheme and isinstance ( args [ 0 ] , ( werkzeug.test.EnvironBuilder , dict ) ) path= '' / '' , path += sep + url.query path=app_root.lstrip ( `` / '' ) , ) , ' Can not pass `` subdomain '' or `` url_scheme '' with `` base_url '' . ' eb = make_test_environ_builder ( app , `` https : //example.com/ '' ) `` flask.testing.make_test_environ_builder ( ) `` has been deprecated in defaults from the application . ' '' make_test_environ_builder ( ) '' is deprecated and will be removed ' app , path= '' / '' , base_url=None , subdomain=None , url_scheme=None , * args , * * kwargs subdomain or url_scheme assert eb.host == `` example.com '' def json_dumps ( self , obj , * * kwargs ) : if base_url is None : def make_test_environ_builder ( * args , * * kwargs ) : * args , assert eb.url_scheme == `` https '' ) builder = EnvironBuilder ( app ) if `` content_type '' not in kwargs : import warnings from flask.testing import make_test_environ_builder builder = make_test_environ_builder ( app ) if url.query : eb = make_test_environ_builder ( app , `` https : //example.com/ '' ) url_scheme = app.config [ `` PREFERRED_URL_SCHEME '' ] DeprecationWarning ( def test_make_test_environ_builder ( app ) : kwargs [ `` data '' ] = json_dumps ( kwargs.pop ( `` json '' ) , app=app ) ) , ' Can not pass `` subdomain '' or `` url_scheme '' with `` base_url '' . ' netloc=url.netloc or http_host , with this EnvironBuilder 's `` app `` . builder = make_test_environ_builder ( self.application , * args , * * kwargs ) netloc=url.netloc or http_host , assert eb.path == `` / '' from flask.testing import make_test_environ_builder , FlaskCliRunner `` `` '' eb = EnvironBuilder ( app , `` https : //example.com/ '' ) from flask.testing import make_test_environ_builder , FlaskCliRunner , EnvironBuilder scheme=url.scheme or url_scheme , ) url_scheme=None , http_host = `` { 0 } . { 1 } '' .format ( subdomain , http_host ) eb = EnvironBuilder ( app , json=u '' \u20ac '' ) `` `` '' builder = EnvironBuilder ( app , path= '' /index '' , method= '' GET '' ) url = url_parse ( path ) if url.query : app_root = app.config [ `` APPLICATION_ROOT '' ] kwargs [ `` content_type '' ] = `` application/json '' subdomain=None , self , ) : return EnvironBuilder ( path , base_url , * args , * * kwargs ) builder = EnvironBuilder ( self , * args , * * kwargs ) from flask.testing import EnvironBuilder self.app = app if isinstance ( args [ 0 ] , werkzeug.test.EnvironBuilder ) : favour of a new class `` flask.testing.EnvironBuilder `` . : pr : ` 3232 ` class EnvironBuilder ( werkzeug.test.EnvironBuilder ) : app_root = app.config [ `` APPLICATION_ROOT '' ] return EnvironBuilder ( * args , * * kwargs ) import werkzeug.test and isinstance ( args [ 0 ] , ( EnvironBuilder , dict ) ) `` `` '' Create a : class : ` flask.testing.EnvironBuilder ` . if subdomain : `` `` '' Serialize `` obj `` to a JSON-formatted string . if isinstance ( args [ 0 ] , EnvironBuilder ) : assert eb.input_stream.read ( ) .decode ( `` utf8 '' ) == u ' '' \u20ac '' ' `` `` '' Create a : class : ` ~werkzeug.test.EnvironBuilder ` , taking some assert not ( base_url or subdomain or url_scheme ) or ( base_url is not None ) ! = bool ( app.config [ `` JSON_AS_ASCII '' ] = False path = url.path assert `` data '' not in kwargs , `` Client can not provide both 'json ' and 'data ' . '' `` `` '' EnvironBuilder.json_dumps ( ) takes settings from the app . '' '' '' The serialization will be configured according to the config associated url_scheme = app.config [ `` PREFERRED_URL_SCHEME '' ] # TODO use EnvironBuilder.json_dumps once we require Werkzeug 0.15 directly instead . def make_test_environ_builder ( assert not ( base_url or subdomain or url_scheme ) or ( if url_scheme is None : application . sep = b '' ? '' if isinstance ( url.query , bytes ) else `` ? '' http_host = `` { 0 } . { 1 } '' .format ( subdomain , http_host ) path = url.path","['CHANGES.rst', 'flask/app.py', 'flask/testing.py', 'tests/test_reqctx.py', 'tests/test_testing.py']",Merge pull request # 3232 from lordmauve/environbuilder
86,cd4023d9d2ab630ce4f95856f065072ef8badb2b,2019-05-31 13:44:22-04:00,"# : Default : `` True `` if : attr : ` env ` is `` 'development ' `` , or def _set_static_folder ( self , value ) : _set_static_folder , `` False `` otherwise . * * Do not enable debug mode when deploying in production . * * def _set_g ( self , value ) : def g ( self ) : g = property ( _get_g , _set_g ) # : by the `` FLASK_DEBUG `` environment variable . It may not behave as debug = property ( _get_debug , _set_debug ) `` `` '' Whether debug mode is enabled . When using `` flask run `` to start # : unhandled exceptions , and the server will be reloaded when code def _set_debug ( self , value ) : def static_folder ( self , value ) : static_folder = property ( enabled when : attr : ` env ` is `` 'development ' `` and is overridden def _get_debug ( self ) : def debug ( self ) : def _get_static_folder ( self ) : del _get_g , _set_g del _get_templates_auto_reload , _set_templates_auto_reload def debug ( self , value ) : def _set_templates_auto_reload ( self , value ) : expected if set in code . Default : `` True `` if : attr : ` env ` is `` 'development ' `` , or # : enabled when : attr : ` env ` is `` 'development ' `` and is overridden # : del _get_static_folder , _set_static_folder def static_folder ( self ) : del _get_debug , _set_debug _get_static_folder , def _get_templates_auto_reload ( self ) : def g ( self , value ) : def templates_auto_reload ( self ) : # : `` False `` otherwise . by the `` FLASK_DEBUG `` environment variable . It may not behave as # : * * Do not enable debug mode when deploying in production . * * unhandled exceptions , and the server will be reloaded when code the development server , an interactive debugger will be shown for `` `` '' The absolute path to the configured static folder . '' '' '' def _get_g ( self ) : def templates_auto_reload ( self , value ) : ) `` `` '' templates_auto_reload = property ( # : expected if set in code . changes . This maps to the : data : ` DEBUG ` config key . This is # : changes . This maps to the : data : ` DEBUG ` config key . This is # : Whether debug mode is enabled . When using `` flask run `` to start doc= '' The absolute path to the configured static folder . `` , # : the development server , an interactive debugger will be shown for _get_templates_auto_reload , _set_templates_auto_reload","['flask/app.py', 'flask/ctx.py', 'flask/helpers.py']",Merge pull request # 3237 from scrosby/fix-3218
87,976dfedaa9efdb566333ea829b12751820268f67,2019-05-31 18:05:25+01:00,"url = url_parse ( path ) ) if url_scheme is None : base_url = `` { scheme } : // { netloc } / { path } '' .format ( super ( EnvironBuilder , self ) .__init__ ( path , base_url , * args , * * kwargs ) Will be removed in 1.2 . Construct `` flask.testing.EnvironBuilder `` base_url is not None builder = make_test_environ_builder ( app , path= '' /index '' , method= '' GET '' ) def test_environbuilder_json_dumps_static ( ) : assert eb.script_root == `` '' ) with pytest.deprecated_call ( ) : from flask.testing import EnvironBuilder http_host = app.config.get ( `` SERVER_NAME '' ) or `` localhost '' if `` json '' in kwargs : path += sep + url.query if subdomain : app , base_url=None , `` instead . '' builder = EnvironBuilder ( self.application , * args , * * kwargs ) .. deprecated : 1.1 scheme=url.scheme or url_scheme , ) : def __init__ ( from flask.testing import make_test_environ_builder ) ! = bool ( def test_environbuilder_json_dumps ( app ) : path=app_root.lstrip ( `` / '' ) , kwargs [ `` data '' ] = self.json_dumps ( kwargs.pop ( `` json '' ) , app=app ) sep = b '' ? '' if isinstance ( url.query , bytes ) else `` ? '' base_url = `` { scheme } : // { netloc } / { path } '' .format ( if base_url is None : builder = make_test_environ_builder ( self , * args , * * kwargs ) 'in 1.2 . Construct `` flask.testing.EnvironBuilder '' directly ' * * kwargs `` `` '' An : class : ` ~werkzeug.test.EnvironBuilder ` , that takes defaults from the http_host = app.config.get ( `` SERVER_NAME '' ) or `` localhost '' warnings.warn ( subdomain or url_scheme `` `` '' EnvironBuilder.json_dumps ( ) can be called as a static method . '' '' '' and isinstance ( args [ 0 ] , ( werkzeug.test.EnvironBuilder , dict ) ) path= '' / '' , path += sep + url.query path=app_root.lstrip ( `` / '' ) , ) , ' Can not pass `` subdomain '' or `` url_scheme '' with `` base_url '' . ' eb = make_test_environ_builder ( app , `` https : //example.com/ '' ) defaults from the application . ' '' make_test_environ_builder ( ) '' is deprecated and will be removed ' app , path= '' / '' , base_url=None , subdomain=None , url_scheme=None , * args , * * kwargs subdomain or url_scheme assert eb.host == `` example.com '' if base_url is None : def make_test_environ_builder ( * args , * * kwargs ) : * args , assert eb.url_scheme == `` https '' ) builder = EnvironBuilder ( app ) if `` content_type '' not in kwargs : import warnings from flask.testing import make_test_environ_builder builder = make_test_environ_builder ( app ) if url.query : eb = make_test_environ_builder ( app , `` https : //example.com/ '' ) url_scheme = app.config [ `` PREFERRED_URL_SCHEME '' ] DeprecationWarning ( def test_make_test_environ_builder ( app ) : kwargs [ `` data '' ] = json_dumps ( kwargs.pop ( `` json '' ) , app=app ) ) , ' Can not pass `` subdomain '' or `` url_scheme '' with `` base_url '' . ' netloc=url.netloc or http_host , assert `` data '' not in kwargs , `` Client can not provide both 'json ' and 'data ' . '' builder = make_test_environ_builder ( self.application , * args , * * kwargs ) json_dumps = staticmethod ( json_dumps ) netloc=url.netloc or http_host , assert eb.path == `` / '' from flask.testing import make_test_environ_builder , FlaskCliRunner `` `` '' eb = EnvironBuilder ( app , `` https : //example.com/ '' ) from flask.testing import make_test_environ_builder , FlaskCliRunner , EnvironBuilder scheme=url.scheme or url_scheme , ) url_scheme=None , http_host = `` { 0 } . { 1 } '' .format ( subdomain , http_host ) eb = EnvironBuilder ( app , json=u '' \u20ac '' ) builder = EnvironBuilder ( app , path= '' /index '' , method= '' GET '' ) url = url_parse ( path ) if url.query : app_root = app.config [ `` APPLICATION_ROOT '' ] kwargs [ `` content_type '' ] = `` application/json '' subdomain=None , self , assert EnvironBuilder.json_dumps ( u '' \u20ac '' ) == u ' '' \\u20ac '' ' ) : return EnvironBuilder ( path , base_url , * args , * * kwargs ) builder = EnvironBuilder ( self , * args , * * kwargs ) from flask.testing import EnvironBuilder self.app = app if isinstance ( args [ 0 ] , werkzeug.test.EnvironBuilder ) : kwargs [ `` content_type '' ] = `` application/json '' class EnvironBuilder ( werkzeug.test.EnvironBuilder ) : app_root = app.config [ `` APPLICATION_ROOT '' ] if `` content_type '' not in kwargs : return EnvironBuilder ( * args , * * kwargs ) import werkzeug.test and isinstance ( args [ 0 ] , ( EnvironBuilder , dict ) ) `` `` '' Create a : class : ` flask.testing.EnvironBuilder ` . if subdomain : if isinstance ( args [ 0 ] , EnvironBuilder ) : assert eb.input_stream.read ( ) .decode ( `` utf8 '' ) == u ' '' \u20ac '' ' if `` json '' in kwargs : `` `` '' Create a : class : ` ~werkzeug.test.EnvironBuilder ` , taking some assert not ( base_url or subdomain or url_scheme ) or ( base_url is not None ) ! = bool ( app.config [ `` JSON_AS_ASCII '' ] = False path = url.path assert `` data '' not in kwargs , `` Client can not provide both 'json ' and 'data ' . '' `` `` '' EnvironBuilder.json_dumps ( ) takes settings from the app . '' '' '' url_scheme = app.config [ `` PREFERRED_URL_SCHEME '' ] # TODO use EnvironBuilder.json_dumps once we require Werkzeug 0.15 directly instead . def make_test_environ_builder ( assert not ( base_url or subdomain or url_scheme ) or ( if url_scheme is None : application . sep = b '' ? '' if isinstance ( url.query , bytes ) else `` ? '' http_host = `` { 0 } . { 1 } '' .format ( subdomain , http_host ) path = url.path","['flask/app.py', 'flask/testing.py', 'tests/test_reqctx.py', 'tests/test_testing.py']",Convert make_test_environ_builder into class ( fixes # 3207 )
88,91e53da054c8e923ad6bf45cfb4c12de029de1b2,2019-05-31 13:05:00-04:00,"`` `` '' If a Blueprint 's CLI group is empty , do not register it . '' '' '' def test_cli_empty ( app ) : return app.register_blueprint ( bp ) if not self.cli.commands : assert result.exit_code == 2 , `` Unexpected success : \n\n '' + result.output bp = Blueprint ( `` blue '' , __name__ , cli_group= '' blue '' ) result = app.test_cli_runner ( ) .invoke ( args= [ `` blue '' , `` -- help '' ] )","['flask/blueprints.py', 'tests/test_cli.py']",Merge pull request # 3236 from lordmauve/no-cligroup-empty
89,52f9aa7ed6ceee6b416eab39a4f785d958245937,2019-05-31 12:50:59-04:00,"`` Response instance , or WSGI callable , but it was a '' `` response . The return type must be a string , dict , tuple , '' `` { rv.__class__.__name__ } . `` .format ( rv=rv ) elif isinstance ( rv , BaseResponse ) or callable ( rv ) : else : assert `` tuple must have the form '' in str ( e ) assert `` it was a bool '' in str ( e ) raise TypeError ( Show a better error message when the view return type is not assert `` it was a bool '' in str ( e ) else : supported . : issue : ` 3214 ` assert `` tuple must have the form '' in str ( e ) ) assert `` returned None '' in str ( e ) assert `` returned None '' in str ( e ) from werkzeug.wrappers import BaseResponse `` The view function did not return a valid '' `` response . The return type must be a string , dict , tuple , '' assert `` object is not callable '' not in str ( e ) `` response . The return type must be a string , tuple , ''","['CHANGES.rst', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 3235 from johnzeringue/better-return-type-error
90,240e398c8d2b46607f6e5c87b6e39eab50ad7796,2019-05-31 07:18:40-04:00,"assert client.get ( '/text ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) rv = client.get ( '/dict ' ) ) app = flask.Flask ( __name__ , static_folder= '' ) def test_run_from_config ( monkeypatch , host , port , server_name , expect_host , expect_port , app ) : @ app.route ( '/dict ' ) assert client.get ( '/bytes ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) app = flask.Flask ( __name__ , static_folder= '' '' , static_url_path= '' '' ) `` Do not use it in a production deployment . `` , click.secho ( `` Use a production WSGI server instead . `` , dim=True ) assert not load_dotenv ( `` non-existent-file '' ) fg= '' red '' , assert client.get ( `` /bytes '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) click.secho ( ' Use a production WSGI server instead . ' , dim=True ) app = flask.Flask ( __name__ , static_folder= '' '' ) ) : ' WARNING : This is a development server . ' rv = app.test_client ( ) .open ( `` /static/index.html '' , method= '' GET '' ) monkeypatch , host , port , server_name , expect_host , expect_port , app assert not load_dotenv ( 'non-existent-file ' ) rv = app.test_client ( ) .open ( '/static/index.html ' , method='GET ' ) rv = client.get ( `` /dict '' ) `` WARNING : This is a development server. `` def test_run_from_config ( 'Do not use it in a production deployment . ' , fg='red ' ) assert client.get ( `` /text '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) app = flask.Flask ( __name__ , static_folder= '' , static_url_path= '' )","['flask/cli.py', 'tests/test_basic.py', 'tests/test_cli.py', 'tests/test_helpers.py']",Merge pull request # 3229 from lordmauve/style-fix
91,2c68f86336dc8729f58e8e19af0f49c269c1cfaa,2019-05-25 14:09:17-07:00,"top = _request_ctx_stack.top client.get ( `` / '' ) break # req_ctx fixture pushed an initial context , not marked preserved # stays preserved until the next request in the same thread comes def test_client_pop_all_preserved ( app , req_ctx , client ) : while True : # stream_with_context pushes a third context , preserved by client # only req_ctx fixture should still be pushed else : When using the test client as a context manager ( `` with client : `` ) , # Normally the request context is preserved until the next top.pop ( ) top = _request_ctx_stack.top all preserved request contexts are popped when the block exits , return flask.Response ( flask.stream_with_context ( `` hello '' ) ) # on exit we want to clean up earlier . Normally the request context ensuring nested contexts are cleaned up correctly . : pr : ` 3157 ` # want to clean up earlier . Pop request contexts until the stack with client : top.pop ( ) if top is not None and top.preserved : # request pushes a second request context , preserved by client if top is not None and top.preserved : # request in the same thread comes . When the client exits we # in . See RequestGlobals.push ( ) for the general behavior . def index ( ) : # is empty or a non-preserved one is found . assert flask._request_ctx_stack.top is req_ctx","['CHANGES.rst', 'flask/testing.py', 'tests/test_testing.py']",Merge pull request # 3157 from fantix/fix-test-client-teardown
92,754b72957854e0b955fe973d169daa27a2f98ef1,2019-05-25 11:23:00-07:00,"def static_url_path ( self ) : value = value.rstrip ( `` / '' ) del _get_static_url_path , _set_static_url_path doc= '' The URL prefix that the static route will be registered for . `` , Support empty `` static_folder `` without requiring setting an empty return `` / '' + os.path.basename ( self.static_folder ) if static_url_path is not None : def _set_static_url_path ( self , value ) : : attr : ` static_folder ` . self.static_url_path = static_url_path `` `` '' The URL prefix that the static route will be accessible from . self.static_folder = static_folder self.static_url_path.rstrip ( `` / '' ) + `` / < path : filename > '' , rv.close ( ) static_url_path = property ( self.static_folder = static_folder return ( `` / '' + basename ) .rstrip ( `` / '' ) if value is not None : if static_folder is not None : `` static_url_path `` as well . : pr : ` 3124 ` def test_static_url_empty_path_default ( app ) : def test_static_url_empty_path ( app ) : rv = app.test_client ( ) .open ( '/static/index.html ' , method='GET ' ) def _get_static_url_path ( self ) : self.static_url_path = static_url_path basename = os.path.basename ( self.static_folder ) _set_static_url_path , app = flask.Flask ( __name__ , static_folder= '' , static_url_path= '' ) `` `` '' ) _get_static_url_path , If it was not configured during init , it is derived from assert rv.status_code == 200 def static_url_path ( self , value ) : self.static_url_path + `` / < path : filename > '' , app = flask.Flask ( __name__ , static_folder= '' )","['CHANGES.rst', 'flask/app.py', 'flask/blueprints.py', 'flask/helpers.py', 'tests/test_basic.py']",Merge pull request # 3124 from elbeardmorez/fix_static_url_path
93,b83760675ded7124f8a7c2cc49fa8d7eea438233,2019-05-24 14:47:48-07:00,"# : The Click command group for registration of CLI commands application , the associated commands will be available to the `` flask `` # the app 's commands to another CLI tool . If your application uses blueprints , you can optionally register CLI if cli_resolved_group is None : the `` flask `` command . bp = Blueprint ( 'students ' , __name__ , cli_group='other ' ) click.echo ( `` merged_result '' ) def test_cli_blueprints ( app ) : app.cli.commands.update ( self.cli.commands ) .. code-block : : python app.register_blueprint ( custom ) bp = Blueprint ( 'students ' , __name__ ) app.register_blueprint ( bp ) click.echo ( `` nested_result '' ) _sentinel = object ( ) The following are equivalent : commands directly onto them . When your blueprint is registered onto your $ flask students create alice self.cli = AppGroup ( ) The `` cli_group `` parameter controls the name of the group under else : : meth : ` app.register_blueprint ( bp , cli_group= ' ... ' ) < Flask.register_blueprint > ` . # : This is an instance of a : class : ` click.Group ` object . # : application has been discovered and blueprints registered . result = app_runner.invoke ( args= [ `` late_registration '' , `` late '' ] ) assert `` nested_result '' in result.output Blueprints have a `` cli `` group to register nested CLI commands . # circular import # : application has been discovered . The default commands are # : The click command line context for this application . Commands self.cli.name = cli_resolved_group nested = Blueprint ( `` nested '' , __name__ ) merged = Blueprint ( `` merged '' , __name__ , cli_group=None ) .. code-block : : text app.cli.add_command ( self.cli ) click.echo ( `` custom_result '' ) click.echo ( `` late_result '' ) Specifying `` cli_group=None `` will remove the nesting and merge the def nested_command ( ) : result = app_runner.invoke ( args= [ `` nested '' , `` nested '' ] ) cli_group=_sentinel , assert `` merged_result '' in result.output self.cli = cli.AppGroup ( self.name ) ... Registering Commands with Blueprints result = app_runner.invoke ( args= [ `` merged '' ] ) def create ( name ) : self.cli.name = self.name assert `` late_result '' in result.output app.register_blueprint ( nested ) app.register_blueprint ( bp , cli_group='other ' ) You can alter the group name by specifying the `` cli_group `` parameter def custom_command ( ) : def merged_command ( ) : cli_resolved_group = options.get ( `` cli_group '' , self.cli_group ) self.cli_group = cli_group def late_command ( ) : # Set the name of the Click group in case someone wants to add result = app_runner.invoke ( args= [ `` customized '' , `` custom '' ] ) # : registered here show up in the : command : ` flask ` command once the when creating the : class : ` Blueprint ` object , or later with # a singleton sentinel value for parameter defaults command . By default , those commands will be nested in a group matching from flask import Blueprint `` `` '' Test blueprint commands register correctly to the application '' '' '' from .cli import AppGroup the name of the blueprint . commands directly to the application 's level : $ flask create alice # : are accessible via the : command : ` flask ` command once the app.register_blueprint ( bp , cli_group=None ) app.register_blueprint ( merged ) from flask import Flask , current_app , Blueprint # : provided by Flask itself and can be overridden . ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # : # : on the application and associated blueprints . These commands app_runner = app.test_cli_runner ( ) late = Blueprint ( `` late '' , __name__ ) custom = Blueprint ( `` custom '' , __name__ , cli_group= '' customized '' ) self.cli.name = self.name `` flask `` command . : issue : ` 1357 ` . from flask import Flask , current_app $ flask other create alice app.register_blueprint ( late , cli_group= '' late_registration '' ) elif cli_resolved_group is _sentinel : assert `` custom_result '' in result.output bp = Blueprint ( 'students ' , __name__ , cli_group=None ) .. versionchanged : : 1.1.0 registered with a blueprint will be available as a group under the # or Blueprints have a `` cli `` Click group like `` app.cli `` . CLI commands","['CHANGES.rst', 'docs/cli.rst', 'flask/app.py', 'flask/blueprints.py', 'flask/helpers.py', 'tests/test_cli.py']",Merge pull request # 2784 from doobeh/master
94,855d59b68b71db78165e4d4e2905c280450b6214,2019-05-24 10:39:11-07:00,"A common response format when writing an API is JSON . It 's easy to get additional header values . 2 . If it 's a string , a response object is created with that data and the assert rv.status_code == 201 response object for you . If the return value is a string it 's converted return value is a dict , : func : ` jsonify ` is called to produce a response . `` ( response , status , headers ) `` . The `` status `` value will override def users_api ( ) : 5 . If none of that works , Flask will assume the return value is a The logic that Flask applies to converting return values into 3 . If a tuple is returned the items in the tuple can provide extra information . has to be in the tuple . The `` status `` value will override the status code a response object for you . If the return value is a string it 's The return value from a view function is automatically converted into a return { `` foo '' : `` bar '' } , 201 `` `` `` `` `` `` `` rv = jsonify ( rv ) more complex applications . assert client.get ( `` /bytes '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) return { `` ( response , status ) `` , `` ( response , headers ) `` , or Such tuples have to be in the form `` ( response , status , headers ) `` , view , it will be converted to a JSON response . from .json import jsonify assert client.get ( `` /text '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) `` ( response , headers ) `` or `` ( response , status ) `` where at least one item response objects is as follows : def me_api ( ) : The return value from a view function is automatically converted into APIs with JSON 4 . If none of that works , Flask will assume the return value is a JSON data type . Or look into Flask community extensions that support .. code-block : : python 2 . If it 's a string , a response object is created with that data and 3 . If it 's a dict , a response object is created using `` jsonify `` . returning a string will produce a `` text/html `` response , returning information . Such tuples have to be in the form return jsonify ( [ user.to_json ( ) for user in users ] ) elif isinstance ( rv , dict ) : def from_dict ( ) : assert client.get ( '/text ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) types other than `` dict `` . In that case , use the Allow returning a dictionary from a view function . Similar to how the default parameters . response . : pr : ` 3111 ` started writing such an API with Flask . If you return a `` dict `` from a converted into a response object with the string as response body , a The logic that Flask applies to converting return values into response Depending on your API design , you may want to create JSON responses for `` image '' : url_for ( `` user_image '' , filename=user.image ) , `` dict `` rv = client.get ( '/dict ' ) default parameters . users = get_all_users ( ) : func : ` ~flask.json.jsonify ` function , which will serialize any supported `` 200 OK `` status code and a : mimetype : ` text/html ` mimetype . If the assert rv.json == { `` foo '' : `` bar '' } a dict will call `` jsonify `` to produce a `` application/json `` `` username '' : user.username , into a response object with the string as response body , a `` 200 OK `` 4 . If a tuple is returned the items in the tuple can provide extra assert client.get ( '/bytes ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) status code and a : mimetype : ` text/html ` mimetype . the status code and `` headers `` can be a list or dictionary of `` theme '' : user.theme , and `` headers `` can be a list or dictionary of additional header values . user = get_current_user ( ) objects is as follows : } A dictionary that will be jsonify 'd before being returned .","['CHANGES.rst', 'docs/quickstart.rst', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 3111 from pgjones/master
95,2616d97f326504b494304fe744cdd5adfc9c6d91,2019-05-24 07:32:45-07:00,"$ export FLASK_RUN_EXTRA_FILES=file1 : dirA/file2 : dirB/ info , host , port , reload , debugger , eager_loading , with_threads , cert , extra_files ) , .. code-block : : none * Detected change in '/path/to/file1 ' , reloading validated as a : class : ` click.Path ` type . return [ super_convert ( item , param , ctx ) for item in items ] `` FLASK_RUN_EXTRA_FILES `` environment variable . Multiple paths are type=SeparatedPathType ( ) , : issue : ` 2897 ` $ flask run ) Watch Extra Files with the Reloader super_convert = super ( SeparatedPathType , self ) .convert `` -- extra-files '' , def run_command ( def convert ( self , value , param , ctx ) : def run_command ( info , host , port , reload , debugger , eager_loading , with_threads , cert ) : OS 's path separator ( `` : `` , `` ; `` on Windows ) . Each value is specify extra files that will trigger the reloader on change . ) : help= ( class SeparatedPathType ( click.Path ) : Add an `` -- extra-files `` option to the `` flask run `` CLI command to When using development mode , the reloader will trigger whenever your $ flask run -- extra-files file1 : dirA/file2 : dirB/ `` `` '' default=None , `` `` '' Click option type that accepts a list of values separated by the `` Extra files that trigger a reload on change . Multiple paths '' `` are separated by ' { } ' . `` .format ( os.path.pathsep ) items = self.split_envvar_value ( value ) separated with `` : `` , or `` ; `` on Windows . * Running on http : //127.0.0.1:8000/ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # or extra_files=extra_files , Python code or imported modules change . The reloader can watch additional files with the `` -- extra-files `` option , or the","['CHANGES.rst', 'docs/cli.rst', 'flask/cli.py']",Merge pull request # 2898 from rochacbruno/2897-Add-Extra-Files-to-CLI
96,2308cba407884996047790bfb77f90ae17bdb2bc,2019-05-23 10:47:41-07:00,"To define a list of files the reloader should watch additionally to the modules # on windows use `` ; `` instead of `` : `` to separate paths .. code-block : : none * Detected change in '/path/to/file1 ' , reloading def run_command ( info , host , port , reload , debugger , eager_loading , as in `` extra_files `` argument used in the `` app.run `` and `` werkzeug.serving.run_simple `` `` FLASK_RUN_EXTRA_FILES `` environment variable . you can either use the `` -- extra-files `` ( or multiple `` -f `` ) option or define the On command line the same can be achieved with `` flask run -f /path/to/file1 -f /path/to/file2 `` . export FLASK_RUN_EXTRA_FILES=/path/to/file1 : /path/to/file2 Added support to `` extra_files `` argument in ` flask run ` CLI . ( ` # 2898 ` _ ) help='Files reloader should watch additionally to the modules ' ) flask run def run_command ( info , host , port , reload , debugger , eager_loading , with_threads , cert ) : with_threads , cert , extra_files ) : .. _ # 2898 : https : //github.com/pallets/flask/pull/2898 multiple=True , default=None , type=click.Path ( ) , extra_files=extra_files * Running on http : //127.0.0.1:8000/","['CHANGES.rst', 'docs/cli.rst', 'flask/cli.py']",Fix # 2897 - Add ` extra_files ` option to ` flask run ` CLI
97,4fe81d7c62a4ecffd238a74783c054c4e5235fae,2019-05-23 08:22:07-07:00,"pass ) = ( connect = ( disconnect the Blinker library is not installed . : pr : ` 3208 ` `` not installed . '' has_receivers_for = receivers_for = _fail disconnect = _fail `` because the blinker library is `` send = lambda * a , * * kw : None connect = connect_via = connected_to = temporarily_connected_to = _fail ) = receivers_for = temporarily_connected_to = connected_to = _fail Signaling support has a stub for the `` connect_via `` method when `` library is not installed . '' `` signalling support is unavailable `` def send ( self , * args , * * kwargs ) : has_receivers_for `` Signalling support is unavailable because the blinker ''","['CHANGES.rst', 'flask/signals.py']",Merge pull request # 3208 from singingwolfboy/fakesignal-connect-via
98,fe41c6c8aee865ca494b91914f877319b07effd9,2019-05-23 10:55:06-04:00,".. _pre-commit : https : //pre-commit.com You may also wish to use Black 's ` Editor integration ` _ . Try to follow ` PEP8 ` _ , but you may ignore the line length limit if following .. _Editor integration : https : //black.readthedocs.io/en/stable/editor_integration.html git ` pre-commit ` _ hook , which gets installed when you run `` pip install -e . [ dev ] `` . `` pre-commit '' , .. _PEP8 : https : //pep8.org/ Use ` Black ` _ to autoformat your code . This should be done for you as a it would make the code uglier . .. _Black : https : //black.readthedocs.io","['CONTRIBUTING.rst', 'setup.py']",Merge pull request # 3213 from jab/contributing
99,d3e1fed7773d1a85a9e2b434c375822edb904619,2019-05-19 12:03:45-07:00,"the given path is n't a file . return dotenv.load_dotenv ( path ) with the documentation . It will return `` False `` if python-dotenv is assert not load_dotenv ( 'non-existent-file ' ) assert load_dotenv ( ) # if the given path specifies the actual file then return True , if os.path.isfile ( path ) : return False not installed , or if the given path is n't a file . : issue : ` 2937 ` The return value from : meth : ` cli.load_dotenv ` is more consistent Returns `` False `` when python-dotenv is not installed , or when # else False # Non existent file should not load return return dotenv.load_dotenv ( path ) load_dotenv ( ) .. versionchanged : : 1.1.0","['CHANGES.rst', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2939 from sharmaadarsh563/2937-correct-load_dotenv-return-value
100,db8cb31f2b2c39c1b0800926969c16d44b28ea38,2019-05-19 11:58:39-07:00,"the given path is n't a file . return dotenv.load_dotenv ( path ) with the documentation . It will return `` False `` if python-dotenv is assert not load_dotenv ( 'non-existent-file ' ) assert load_dotenv ( ) # if the given path specifies the actual file then return True , if os.path.isfile ( path ) : return False not installed , or if the given path is n't a file . : issue : ` 2937 ` The return value from : meth : ` cli.load_dotenv ` is more consistent Returns `` False `` when python-dotenv is not installed , or when # else False # Non existent file should not load return return dotenv.load_dotenv ( path ) load_dotenv ( ) .. versionchanged : : 1.1.0","['CHANGES.rst', 'flask/cli.py', 'tests/test_cli.py']",Fix # 2937 : Ensure the consistency in load_dotenv 's return type
101,d9fa28ba68809aec8df30c65d7ab1f8a5e0514c8,2019-05-19 11:40:54-07:00,"app.config [ `` SERVER_NAME '' ] = `` pocoo.org:8080 '' port = int ( next ( ( p for p in ( port , sn_port ) if p is not None ) , _port ) ) ( None , None , `` pocoo.org '' , 8080 ) , ( None , 80 , `` pocoo.org:8080 '' , `` pocoo.org '' , 80 ) , ( `` localhost '' , 80 , `` localhost '' , 80 ) , ( `` localhost '' , 0 , `` localhost:8080 '' , `` localhost '' , 0 ) , pick an available port . : issue : ` 2926 ` def test_run_from_config ( monkeypatch , host , port , server_name , expect_host , expect_port , app ) : ( `` localhost '' , None , `` localhost '' , 8080 ) , port = int ( port or sn_port or _port ) ( None , 80 , `` pocoo.org '' , 80 ) , app.config [ `` SERVER_NAME '' ] = server_name `` host , port , server_name , expect_host , expect_port '' , ( `` localhost '' , 80 , `` pocoo.org:8080 '' , `` localhost '' , 80 ) , def test_run_from_config ( monkeypatch , host , port , expect_host , expect_port , app ) : ( None , None , `` localhost:8080 '' , `` localhost '' , 8080 ) , # pick the first value that 's not None ( 0 is allowed ) ( None , None , `` pocoo.org:8080 '' , `` pocoo.org '' , 8080 ) , `` host , port , expect_host , expect_port '' , The development server port can be set to 0 , which tells the OS to ( None , None , `` localhost:0 '' , `` localhost '' , 0 ) , ( `` localhost '' , None , `` pocoo.org:8080 '' , `` localhost '' , 8080 ) ,","['CHANGES.rst', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 2928 from vorelq/2926-default-port-overrides-zero
102,05102f63b8dc5341d2d650da3aaa51b0b355f65d,2019-05-18 21:57:09-07:00,# : The map object to use for storing the URL rules and routing # : configuration parameters . Defaults to : class : ` werkzeug.routing.Map ` . # : self.url_map = Map ( ) : pr : ` 3069 ` Allow customizing the : attr : ` Flask.url_map_class ` used for routing . self.url_map = self.url_map_class ( ) # : .. versionadded : : 1.1.0 url_map_class = Map,"['CHANGES.rst', 'flask/app.py']",Merge pull request # 3069 from shidenggui/feature_allow_customizing_url_map
103,b0185a620522269acb9cbef01437acd01d2b551d,2019-05-18 21:44:21-07:00,"as the HTTP date format ) . In order to support more data types override the : meth : ` jsonify ` supports : class : ` dataclasses.dataclass ` objects . encoder by also supporting `` datetime `` , `` UUID `` , `` dataclasses `` , Data = make_dataclass ( `` Data '' , [ ( `` name '' , str ) ] ) `` Markup `` objects which are serialized as RFC 822 datetime strings ( same `` datetime `` objects are serialized as RFC 822 datetime strings . value = flask.json.dumps ( Data ( `` Flask '' ) , app=app ) import dataclasses assert value == { `` name '' : `` Flask '' } : meth : ` default ` method . except ImportError : This is the same as the HTTP date format . and `` Markup `` objects . def test_json_dump_dataclass ( app , req_ctx ) : : pr : ` 3195 ` In order to support more data types , override the : meth : ` default ` try : `` `` '' The default Flask JSON encoder . This one extends the default simplejson return dataclasses.asdict ( o ) method . encoder by also supporting `` datetime `` objects , `` UUID `` as well as dataclasses = None from dataclasses import make_dataclass value = flask.json.loads ( value , app=app ) import sys `` `` '' The default Flask JSON encoder . This one extends the default if dataclasses and dataclasses.is_dataclass ( o ) :","['CHANGES.rst', 'flask/json/__init__.py', 'tests/test_basic.py']",Merge pull request # 3195 from eruvanos/json_support_dataclass
104,dbd38404108f5c3c3cc31310a3eff24aa6b262c9,2019-05-18 21:27:31-07:00,"app = flask.Flask ( __name__ , static_url_path= '' /foo/ '' ) with app.test_request_context ( ) : assert flask.url_for ( `` static '' , filename= '' index.html '' ) == `` /foo/index.html '' self.static_url_path.rstrip ( `` / '' ) + `` / < path : filename > '' , rv.close ( ) def test_static_url_path_with_ending_slash ( ) : rv = app.test_client ( ) .get ( `` /foo/index.html '' ) assert rv.status_code == 200 app.testing = True Support `` static_url_path `` that ends with a forward slash . self.static_url_path + `` / < path : filename > '' , : issue : ` 3134 `","['CHANGES.rst', 'flask/app.py', 'flask/blueprints.py', 'tests/test_basic.py']",Merge pull request # 3182 from qil026/issue-3134-url-join
105,7f98a28432f2059259a5b8e5088322fa8f42f829,2019-05-18 21:19:57-07:00,"this_module = `` flask '' else : # Python rewrites `` python -m flask '' to the path to the file in argv . of Werkzeug 0.15 's better reloader support . This bumps the Werkzeug cli.main ( prog_name= '' python -m flask '' if as_module else None ) dependency to > = 0.15. : issue : ` 3022 ` The `` flask `` command entry point is simplified to take advantage args = sys.argv [ 1 : ] name = None this_module += `` .cli '' # Restore the original command so that the reloader works . sys.argv = [ `` -m '' , this_module ] + args cli.main ( args=args , prog_name=name ) if as_module : if sys.version_info < ( 2 , 7 ) : name = `` python -m `` + this_module","['CHANGES.rst', 'flask/cli.py']",Merge pull request # 3185 from EtiennePelletier/Flask-3022
106,5a49b96d0e15f423ce8f2abc27a0ac280e69f726,2019-05-18 21:10:12-07:00,"parsing capabilities . message as JSON . If you want that behavior you can add it by return self.get_json ( ) assert flask.request.get_json ( silent=True , cache=True ) is None try : self._cached_json = ( rv , silent_rv ) : meth : ` is_json ` ) , this returns `` None `` unless `` force `` is ) : rv = None .. versionadded : : 0.8 this method returns a value , it is used as the return value for `` `` '' This will contain the parsed JSON data if the mimetype indicates `` `` '' `` / '' , method= '' POST '' , data= '' malformed '' , content_type= '' application/json '' assert b '' Failed to decode JSON object '' in rv.data def get_json ( self , force=False , silent=False , cache=True ) : def is_json ( self ) : assert contains == debug `` `` '' Common mixin for both request and response objects to provide JSON instead . @ property : param cache : Store the parsed JSON to return for subsequent will be `` None `` . class JSONMixin ( object ) : if current_app and current_app.debug : with pytest.raises ( BadRequest ) : else : : mimetype : ` application/json ` or : mimetype : ` application/ * +json ` . def test_post_empty_json_adds_exception_to_response_content_in_debug ( return rv with app.test_request_context ( true . If parsing fails , : meth : ` on_json_loading_failed ` is called mt == `` application/json '' rv = self.on_json_loading_failed ( e ) normal_rv = flask.request.get_json ( silent=False ) or ( mt.startswith ( `` application/ '' ) ) self._cached_json = ( normal_rv , rv ) _cached_json = ( Ellipsis , Ellipsis ) : meth : ` get_json ` . The default implementation raises a `` `` '' self._cached_json = ( rv , rv ) : issue : ` 3125 ` lowest : Werkzeug==0.14 support . This bumps the Werkzeug dependency to > = 0.15 . moved into Werkzeug . Use Werkzeug 's version with Flask-specific .. versionadded : : 0.11 Raise a : exc : ` BadRequest ` error instead of returning an error def json ( self ) : if cache : if cache and self._cached_json [ silent ] is not Ellipsis : _ , silent_rv = self._cached_json return None `` `` '' Check if the mimetype indicates JSON data , either contains = b '' Failed to decode JSON object '' in rv.data if current_app is not None and current_app.debug : lowest : Werkzeug==0.15 silent_rv = flask.request.get_json ( silent=True ) rv = client.post ( `` /json '' , data=None , content_type= '' application/json '' ) assert flask.request.get_json ( silent=True ) is None ) def test_post_empty_json_wont_add_exception_to_response_if_no_debug ( app.config [ `` DEBUG '' ] = False json_module = json if not ( force or self.is_json ) : `` Werkzeug > =0.14 '' , app.config [ `` DEBUG '' ] = debug def post_json ( ) : .. versionadded : : 1.0 .. versionchanged : : 0.10 if silent : ) : def test_bad_request_debug_message ( self , app , client , debug ) : return ( rv = json.loads ( data ) JSON ( : mimetype : ` application/json ` , see : meth : ` is_json ` ) , otherwise it with app.test_request_context ( `` / '' , method= '' POST '' , json= { `` foo '' : `` bar '' } ) : self , app , client assert rv.status_code == 400 else : and mt.endswith ( `` +json '' ) def test_different_silent_on_normal_request ( self , app ) : : param silent : Silence parsing errors and return `` None `` def _get_data_for_json ( self , cache ) : return self._cached_json [ silent ] subclassing . if cache : def test_ignore_cached_json ( self , app ) : assert b '' Failed to decode JSON object '' not in rv.data flask.request.get_json ( silent=False ) flask.request.get_json ( silent=False , cache=False ) : class : ` BadRequest ` exception . .. _ # 3125 : https : //github.com/pallets/flask/pull/3125 flask.request.get_json ( ) mt = self.mimetype `` Werkzeug > =0.15 '' , `` `` '' Called if : meth : ` get_json ` parsing fails and is n't silenced . If app.config [ `` DEBUG '' ] = True calls . def test_different_silent_on_bad_request ( self , app ) : indicate JSON ( : mimetype : ` application/json ` , see Bump minimum Werkzeug version to > = 0.15 . @ app.route ( `` /json '' , methods= [ `` POST '' ] ) `` `` '' Parse and return the data as JSON . If the mimetype does not normal_rv , _ = self._cached_json assert normal_rv [ `` foo '' ] == `` bar '' : param force : Ignore the mimetype and always try to parse JSON . return self.get_data ( cache=cache ) data = self._get_data_for_json ( cache=cache ) except ValueError as e : Flask 's `` JSONMixin `` for the request and response wrappers was from werkzeug.wrappers.json import JSONMixin as _JSONMixin and its return value is used as the return value . class JSONMixin ( _JSONMixin ) : app.config [ `` TRAP_BAD_REQUEST_ERRORS '' ] = False assert silent_rv is normal_rv Drop support for Python 3.4 .","['CHANGES.rst', 'flask/wrappers.py', 'setup.py', 'tests/test_helpers.py', 'tox.ini']",Merge pull request # 3181 from EtiennePelletier/Flask-3125
107,d0bfb065e5c2d00927ed192c4ea5d8a02b4e19d6,2019-05-18 08:44:03-07:00,": attr : ` Flask.jinja_options ` is a `` dict `` instead of an `` `` '' Creates the Jinja2 environment based on : attr : ` jinja_options ` and : meth : ` select_jinja_autoescape ` . Since 0.7 this also adds `` `` '' The Jinja environment used to load templates . # : the environment is created ( accessing : attr : ` jinja_env ` ) will jinja_options = ImmutableDict ( `` `` '' Create the Jinja environment based on : attr : ` jinja_options ` the Jinja2 globals and filters after initialization . Override # : This is a `` dict `` instead of an `` ImmutableDict `` to allow .. versionadded : : 0.5 this function to customize the behavior . .. versionadded : : 0.5 # : Options that are passed directly to the Jinja2 environment . The environment is created the first time this property is accessed . Changing : attr : ` jinja_options ` after that will have no # : .. versionchanged : : 1.1.0 # : easier configuration . Version 1.1 # : have no effect . extensions= [ `` jinja2.ext.autoescape '' , `` jinja2.ext.with_ '' ] effect . `` `` '' The Jinja2 environment used to load templates . '' '' '' `` ImmutableDict `` to allow easier configuration . Changes must still ) `` `` '' Version 1.1.0 # : and the various Jinja-related methods of the app . Changing : attr : ` jinja_options ` after this will have no effect . Also adds be made before creating the environment . : pr : ` 3190 ` # : Options that are passed to the Jinja environment in # : : meth : ` create_jinja_environment ` . Changing these options after Flask-related globals and filters to the environment . jinja_options = { `` extensions '' : [ `` jinja2.ext.autoescape '' , `` jinja2.ext.with_ '' ] }","['CHANGES.rst', 'flask/app.py']",Merge pull request # 3190 from EtiennePelletier/jinja2-977
108,aade460f1557aa0546ebf248a4f323140f30759f,2019-05-17 14:18:40-07:00,".. _ # 3179 : https : //github.com/pallets/flask/pull/3179 from werkzeug.http import parse_set_header methods = [ `` GET '' , `` PROPFIND '' ] app.add_url_rule ( `` / '' , view_func=ChildView.as_view ( `` index '' ) ) def propfind ( self ) : if getattr ( base , `` methods '' , None ) : def get ( self ) : for base in bases : the same thing as `` r '' . : issue : ` 3163 ` The : attr : ` MethodView.methods ` attribute set in a base class is used assert client.get ( `` / '' ) .data == b '' GET '' the same thing as `` r '' . ( : issue : ` 3163 ` ) return `` GET '' methods.update ( base.methods ) assert ChildView.methods == { `` PROPFIND '' , `` GET '' } class ChildView ( BaseView ) : from werkzeug.http import parse_set_header class BaseView ( flask.views.MethodView ) : by subclasses . : issue : ` 3138 ` return `` PROPFIND '' assert client.open ( `` / '' , method= '' PROPFIND '' ) .data == b '' PROPFIND '' def test_methods_var_inheritance ( app , client ) :","['CHANGES.rst', 'flask/views.py', 'tests/test_views.py']",Merge pull request # 3179 from Lee-W/MethodView-inheritance
109,8ef56c8c6d0be4d4a9e844c723e70810a0be2fbc,2019-05-17 13:32:40-07:00,": param mode : Open file in this mode . Only reading is supported , assert `` < h1 > Hello World ! < /h1 > '' in str ( f.read ( ) ) with pytest.raises ( ValueError ) : with app.open_resource ( `` static/index.html '' , mode ) as f : if mode not in ( `` r '' , `` rb '' ) : def test_open_resource ( self , mode ) : issues_github_path = `` pallets/flask '' `` sphinx_issues '' , app.open_resource ( `` static/index.html '' , mode ) app = flask.Flask ( __name__ ) def test_open_resource_exceptions ( self , mode ) : : func : ` open_resource ` accepts the `` rt '' file mode . This still does valid values are `` r '' ( or `` rt '' ) and `` rb '' . sphinx-issues~=1.2.0 if mode not in { `` r '' , `` rt '' , `` rb '' } : the same thing as `` r '' . ( : issue : ` 3163 ` ) : param mode : resource file opening mode , default is 'rb ' .","['CHANGES.rst', 'docs/conf.py', 'docs/requirements.txt', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 3174 from icreatedanaccount/master
110,3dc84ec4609de0c08fd159ebe991453309952fa8,2019-05-17 09:04:37-07:00,"app = current_app : param obj : Object to serialize to JSON . ( : attr : ` ~flask.Flask.json_encoder ` ) , or fall back to the default def dump ( obj , fp , * * kwargs ) : if not app.config [ 'JSON_AS_ASCII ' ] : Passing the `` json `` argument to `` app.test_client `` does not `` `` '' count = 0 kwargs.setdefault ( 'sort_keys ' , current_app.config [ 'JSON_SORT_KEYS ' ] ) def _dump_arg_defaults ( kwargs , app=None ) : assert ns.count == 1 def _load_arg_defaults ( kwargs , app=None ) : bp.json_encoder if bp and bp.json_encoder `` `` '' Like : func : ` loads ` but reads from a file object . '' '' '' Takes the same arguments as the built-in : func : ` json.dumps ` , and configured decoder ( : attr : ` ~flask.Flask.json_decoder ` ) if there is an def load ( fp , * * kwargs ) : with app.app_context ( ) : if current_app : and can be overridden by the simplejson `` ensure_ascii `` parameter . there is an app context pushed , use the current app 's configured def load ( fp , app=None , * * kwargs ) : default : class : ` JSONDecoder ` . decoder ( : attr : ` ~flask.Flask.json_decoder ` ) , or fall back to the _load_arg_defaults ( kwargs ) Takes the same arguments as the built-in : func : ` json.loads ` , and bp = current_app.blueprints.get ( request.blueprint ) if request else None kwargs [ 'data ' ] = json_dumps ( kwargs.pop ( 'json ' ) , app=app ) else app.json_decoder import blinker from flask import appcontext_popped with appcontext_popped.connected_to ( ns.add , app ) : 'cls ' , try : context for configuration . def hello ( ) : `` `` '' Deserialize an object from a JSON-formatted string `` s `` . If .. _ # 2900 : https : //github.com/pallets/flask/issues/2900 `` `` '' Serialize `` obj `` to a JSON-formatted string . If there is an def dumps ( obj , app=None , * * kwargs ) : application on the stack . kwargs [ 'data ' ] = json_dumps ( kwargs.pop ( 'json ' ) ) def loads ( s , * * kwargs ) : assert 'data ' not in kwargs , ( def test_client_json_no_app_context ( app , client ) : push/pop an extra app context . ( ` # 2900 ` _ ) ns = Namespace ( ) def add ( self , app ) : ) return `` Hello , { } ! `` .format ( flask.request.json [ `` name '' ] ) if app : simplejson package is installed , it is preferred . rv = client.post ( `` /hello '' , json= { `` name '' : `` Flask '' } ) : class : ` JSONEncoder ` . This function can return `` unicode `` strings or ascii-only bytestrings by does some extra configuration based on the application . If the Uses `` current_app `` if not given , and falls back to the default : param s : JSON string to deserialize . .. versionchanged : : 1.0.3 _load_arg_defaults ( kwargs , app=app ) default is controlled by the `` JSON_AS_ASCII `` configuration variable _dump_arg_defaults ( kwargs ) # push a context so flask.json can use app 's json attributes def _dump_arg_defaults ( kwargs ) : encoder when not in an app context . `` `` '' Unserialize a JSON object from a string `` s `` by using the application 's else current_app.json_encoder 'cls ' , bp.json_encoder if bp and bp.json_encoder else app.json_encoder `` app `` can be passed directly , rather than requiring an app blinker = None `` `` '' Like : func : ` loads ` but reads from a file object . kwargs.setdefault ( 'sort_keys ' , app.config [ 'JSON_SORT_KEYS ' ] ) def loads ( s , app=None , * * kwargs ) : configured encoder ( : attr : ` ~flask.Flask.json_encoder ` ) if there is an `` Client can not provide both 'json ' and 'data ' . '' def dumps ( obj , * * kwargs ) : `` `` '' Serialize `` obj `` to a JSON formatted `` str `` by using the application 's except ImportError : default which coerce into unicode strings automatically . That behavior by : param app : App instance to use to configure the JSON decoder . assert rv.get_data ( as_text=True ) == `` Hello , Flask ! '' else current_app.json_decoder def _load_arg_defaults ( kwargs ) : : param app : App instance to use to configure the JSON encoder . # TODO use EnvironBuilder.json_dumps once we require Werkzeug 0.15 if app is None : def dump ( obj , fp , app=None , * * kwargs ) : if not current_app.config [ 'JSON_AS_ASCII ' ] : assert 'data ' not in kwargs , `` Client can not provide both 'json ' and 'data ' . '' bp = app.blueprints.get ( request.blueprint ) if request else None : param kwargs : Extra arguments passed to : func : ` json.dumps ` . self.count += 1 _dump_arg_defaults ( kwargs , app=app ) class Namespace ( object ) : app context pushed , use the current app 's configured encoder","['CHANGES.rst', 'flask/json/__init__.py', 'flask/testing.py', 'tests/test_testing.py']",Merge pull request # 3206 from pallets/test-client-json
111,f2c854060adf021347a6c4217fdb06a77a38bf58,2019-05-16 19:23:19-07:00,"' environment . ' , fg='red ' ) 'Do not use it in a production deployment . ' , fg='red ' ) ' WARNING : This is a development server . ' ' WARNING : Do not use the development server in a production '",['flask/cli.py'],Merge pull request # 3169 from DamianSkrzypczak/3168-improve-warning-about-dev-server-use-in-production
112,e2f4b53396f4676978f86492dae5d3952446df89,2019-05-16 19:03:08-07:00,"' environment . ' , fg='red ' ) 'Do not use it in a production deployment . ' , fg='red ' ) ' WARNING : This is a development server . ' ' WARNING : Do not use the development server in a production '",['flask/cli.py'],Fix dev-server warning message readability ( # 3168 )
113,ab3f92253388df031d2947a5a76c980cba7cb694,2019-05-16 18:17:45-07:00,# once this is reached the session was stored independently of the session backend used : : used by the test client . This works independently of the session backend used : : # once this is reached the session was stored and ready to be used by the client c.get ( ... ) it . At the end of the transaction the session is stored and ready to be it . At the end of the transaction the session is stored . This works,['docs/testing.rst'],Merge pull request # 3154 from brunoais/more-explicit-session-transaction
114,814a7ea96f1f0aa124537cee98fed0955ebbf6c4,2019-05-16 17:32:45-07:00,"global : `` 2.7 '' script : tox -e nightly py { 37,27 , py } -simplejson deps = codecov inputs : publish.test.results : 'false ' python : pypy3.5-6.0 [ testenv : coverage ] deps = # courtesy Python nightly test , do n't fail the build in CI script : tox -- -- junitxml=test-results.xml tests examples init : versionSpec : $ ( python.version ) `` 3.4 '' python : nightly env : TOXENV=devel , lowest , codecov matrix : pip -- disable-pip-version-check install -- user -U tox ' * .x ' Python35Linux : script : | py37- { simplejson , devel , lowest } codecov coverage run -p -m pytest -- tb=short -- junitxml=test-results.xml { posargs : tests examples } testRunTitle : $ ( Agent.JobName ) pytest * Test status : https : //dev.azure.com/pallets/pallets/_build ? definitionId=2 py { 37,36,35,34,27 , py } pip install -q -e examples/javascript [ test ] allow_failures : pip install tox ignore_outcome = true skip_install = true passenv = CODECOV_TOKEN build : false Python27Windows : [ testenv : nightly ] brew upgrade python PYTHON : C : \Python27-x64 codecov ' % LOCALAPPDATA % \pip\Cache ' [ testenv : coverage-ci ] * Test status : python.version : ' 2.7 ' python -m pip install -U tox vmImage : 'windows-latest ' TOXENV : py , codecov echo `` # # vso [ task.prependPath ] $ HOME/.local/bin '' passenv = CI TRAVIS TRAVIS_ * APPVEYOR APPVEYOR_ * master condition : eq ( variables [ 'publish.test.results ' ] , 'true ' ) # cache : env : TOXENV=py , codecov coverage displayName : Publish test results | nightly publish.test.results : 'true ' Python37Linux : deps = pre-commit [ testenv : codecov ] python -m tox `` 3.7 '' # - $ HOME/Library/Caches/pip only : `` 3.6 '' displayName : Use Python $ ( python.version ) email : false displayName : Run tox # - $ HOME/Library/Caches/Homebrew job : Flask $ HOME/.cache/pip * Windows : https : //ci.appveyor.com/project/pallets/flask vmImage : $ [ variables.vmImage ] install : job : FlaskOnNightly include : TOXENV : 'devel , lowest , coverage-ci ' # - os : osx [ testenv : coverage-report ] os : osx $ HOME/.cache/pre-commit commands = script : VersionRange : py { 37,27 , py } -lowest CODECOV_TOKEN : ' $ ( codecov.token ) ' coverage html py { 37,27 , py } -devel export PATH= '' /usr/local/opt/python/libexec/bin : $ { PATH } '' commands = pre-commit run -- all-files -- show-diff-on-failure codeCoverageTool : Cobertura directories : fast_finish : true python.version : ' 3.7 ' python.version : ' 3.5 ' dist : xenial vmImage : ubuntu-latest # Test on the nightly version of Python . Pypy3Linux : DocsHtml : # Use a container since Azure Pipelines may not have the latest build . Python36Linux : coverage xml pip install -q -e examples/tutorial [ test ] architecture : $ ( python.architecture ) if [ [ $ TRAVIS_OS_NAME == 'osx ' ] ] ; then # disabled because before_install is too slow vmImage : 'macos-latest ' steps : /^\d+ ( \.\d+ ) * -maintenance $ / trigger : notifications : * Linux , Mac : https : //travis-ci.org/pallets/flask jobs : python : before_install : python.version : ' 3.7 ' displayName : Install tox python.version : 'pypy3 ' pool : 'master ' TOXENV : 'py , coverage-ci ' TOXENV : 'docs-html ' environment : test_script : python.version : ' 3.6 ' # directories : /^ . * -maintenance $ / [ testenv : stylecheck ] matrix : tox Python37Windows : script : pip -- disable-pip-version-check install -U tox python.architecture : 'x64 ' # language : generic variables : coverage run -p -m pytest -- tb=short { posargs : tests examples } # env : TOXENV=py3 , codecov branches : matrix : coverage run -p -m pytest tests examples strategy : SET PATH= % PYTHON % ; % PATH % `` 3.5 '' PYTHON : C : \Python37-x64 cache : language : python coverage-report env : TOXENV=docs-html summaryFileLocation : coverage.xml coverage html container : python : rc-stretch pypy3.5-6.0 displayName : Publish coverage results py { 37,36,35,27 , py3 , py } Python37Mac : Python27Linux : testResultsFiles : test-results.xml os : linux fi /^\d+ ( \.\d+ ) * ( \.x ) ? $ / pytest > =3","['.appveyor.yml', '.azure-pipelines.yml', '.travis.yml', 'CONTRIBUTING.rst', 'README.rst', 'tox.ini']",Merge pull request # 3204 from pallets/azure
115,d68abe99f69f051435bfac1c040b3a4cef058adb,2019-05-16 12:12:06-07:00,"* Test status : * Windows : https : //ci.appveyor.com/project/pallets/flask * Test status : https : //dev.azure.com/pallets/pallets/_build ? definitionId=2 * Linux , Mac : https : //travis-ci.org/pallets/flask",['README.rst'],Merge pull request # 3203 from vtbassmatt/patch-1
116,ded0f68c16d6eeb95abfca925e29bff70b026e10,2019-05-16 11:54:34-07:00,"mailing list , and let other developers give you a helping hand with to contact the developers on the mailing list or IRC channel . The best way for frameworks to help build certain types of applications , like a REST API . some special characters of Latin letters without umlauts or anything also for unittesting and other situations that require a faked request time ? A good example for this is unit testing . When you want to test time ? A good example for this is unittesting . When you want to test available when the application starts up . You can hard code the and the full life cycle of a request . different configurations attached which makes unit testing a lot as long as you are using ASCII code points only ( basically numbers , some special characters of latin letters without umlauts or anything frameworks to help build certain types of applications , like a ReST API . create the application which is very helpful for unit testing and similar different configurations attached which makes unittesting a lot also for unit testing and other situations that require a faked request and the full lifecycle of a request . and import different hardcoded files based on that . create the application which is very helpful for unittesting and similar mailinglist , and let other developers give you a helping hand with as long as you are using ASCII charpoints only ( basically numbers , available when the application starts up . You can hardcode the Blueprints support the `` errorhandler `` decorator just like the : class : ` Flask ` the application instance has no way of knowing which blueprint errorhandler it and import different hard-coded files based on that . Blueprints support the errorhandler decorator just like the : class : ` Flask ` the application instance has no way of knowing which blueprint error handler it to contact the developers on the mailinglist or IRC channel . The best way for","['docs/appcontext.rst', 'docs/becomingbig.rst', 'docs/blueprints.rst', 'docs/config.rst', 'docs/design.rst', 'docs/extensiondev.rst', 'docs/extensions.rst', 'docs/shell.rst', 'docs/unicode.rst']",Merge pull request # 3199 from alecbrooks/master
117,7f782ba84e18d327ff25d40dc7d5719c8a036258,2019-05-16 10:45:50-07:00,"If `` FLASK_APP `` is not set , the command will try to import `` app '' or $ gunicorn `` myproject : create_app ( ) '' instance or factory . .. _greenlet : https : //greenlet.readthedocs.io/en/latest/ factory . .. _Gunicorn : http : //gunicorn.org/ .. _Gunicorn : https : //gunicorn.org/ : file : ` wsgi.py ` or : file : ` app.py ` and try to detect an application instance or .. _eventlet : https : //eventlet.net/ If `` FLASK_APP `` is not set , the command will look for a file called .. _eventlet : http : //eventlet.net/ package and the application instance within the module . If you use the `` wsgi '' ( as a `` .py '' file , or package ) and try to detect an application application factory pattern , you can pass a call to that : : The `` gunicorn `` command expects the names of your application module or","['docs/cli.rst', 'docs/deploying/wsgi-standalone.rst']",Merge pull request # 3162 from chivalry/gunicorn-discovery-docs-update
118,00ca5b7328fbc5b11594ad448343ba371142c43a,2019-05-16 10:23:17-07:00,"you 're submitting a bug or documentation fix , branch off of the latest `` .x '' branch : : git checkout -b your-branch-name origin/1.0.x git checkout -b your-branch-name origin/master git push -- set-upstream origin your-branch-name If you 're submitting a feature addition or change , branch off of the `` master '' branch : : `` 2287-dry-test-suite `` ) Push your commits to GitHub and ` create a pull request ` _ . Push your commits to GitHub and ` create a pull request ` _ by using : : Create a branch to identify the issue you would like to work on ( e.g . Create a branch to identify the issue you would like to work on . If",['CONTRIBUTING.rst'],Merge pull request # 3159 from abhinavsagar/updatedoc
119,8609b7d840b2430ade985465d87cd9e2f09d477a,2019-05-16 09:55:30-07:00,"app.wsgi_app = ProxyFix ( app.wsgi_app ) app.wsgi_app = ProxyFix ( app.wsgi_app , x_proto=1 , x_host=1 ) from werkzeug.middleware.proxy_fix import ProxyFix from werkzeug.contrib.fixers import ProxyFix",['docs/deploying/wsgi-standalone.rst'],Merge pull request # 3142 from Tom-McDonald/3139-alter-deprecated-docs
120,bbedd6454094bc26edbcc95bab1ed3d05b4085ea,2019-05-16 09:52:13-07:00,"return ' { } \ 's profile'.format ( username ) return 'Subpath % s ' % subpath from flask import Flask , url_for return 'User % s ' % escape ( username ) return 'User % s ' % username return ' { } \ 's profile'.format ( escape ( username ) ) return 'Subpath % s ' % escape ( subpath ) from flask import Flask , escape , url_for",['docs/quickstart.rst'],Merge pull request # 3129 from adamchainz/fix_html_injection
121,eadb99eb93aa21cae3ce907006e62818319fbff7,2019-05-16 09:48:59-07:00,"* The IRC channel `` # pocoo `` on FreeNode is linked to Discord , but Discord is preferred . * The IRC channel `` # pocoo `` on FreeNode . * The IRC channel `` # python `` on FreeNode for more general questions . * The `` # get-help `` channel on our Discord chat : https : //discord.gg/t6rrQZH",['CONTRIBUTING.rst'],Merge pull request # 3137 from Abdur-rahmaanJ/patch-2
122,4091013ee1e0c126b803a2d76a085609675dc60b,2019-05-16 08:52:23-07:00,"if ENVIRONMENT_DEBUG.lower ( ) in ( `` f '' , `` false '' ) : raise ValueError ( `` No secret key set for Flask application '' ) _mail_enabled = os.environ.get ( `` MAIL_ENABLED '' , default= '' true '' ) On Windows systems use the ` set ` builtin instead : : ENVIRONMENT_DEBUG = os.environ.get ( `` DEBUG '' , default=False ) SECRET_KEY = os.environ.get ( `` SECRET_KEY '' , default=None ) * Restarting with reloader ... $ export MAIL_ENABLED=false MAIL_ENABLED = _mail_enabled.lower ( ) in { `` 1 '' , `` t '' , `` true '' } raise ValueError ( `` No SECRET_KEY set for Flask application '' ) > set DEBUG=False DEBUG = ENVIRONMENT_DEBUG On Windows systems use the `` set `` builtin instead : : $ export DEBUG=False SECRET_KEY = os.environ.get ( `` SECRET_KEY '' ) # Example configuration ENVIRONMENT_DEBUG = False",['docs/config.rst'],Merge pull request # 3118 from JBonser/master
123,4260b7c2d3a9bf1332e22d18125f5f6157f61b5b,2019-05-16 07:36:02-07:00,"job : FlaskOnLatest displayName : 'Run tox ' versionSpec : $ ( python.version ) pool : { vmImage : ubuntu-latest } vmImage : 'windows-latest ' pool : architecture : $ ( python.architecture ) Python37Linux : Python37Mac : python.version : ' 3.6 ' TOXENV : docs-html displayName : 'Install tox ' vmImage : 'macos-latest ' pool : python.version : ' 3.7 ' TOXENV : devel , lowest , codecov master TOXENV : 'py , codecov ' displayName : 'Run tox ' pip install -q -e examples/javascript [ test ] Pypy3Linux : ignore_outcome = true vmImage : $ [ variables.vmImage ] TOXENV : devel , lowest , codecov TOXENV : docs-html python.version : ' 3.7 ' vmImage : ubuntu-latest script : pip install -U tox publish.test.results : 'false ' python.version : ' 2.7 ' steps : Python37Windows : passenv = CI TRAVIS TRAVIS_ * APPVEYOR APPVEYOR_ * script : pip install -U tox # As a courtesy , try this on the dev version of Python Python27Windows : Python37Linux : Python27Linux : VersionRange : testRunTitle : ' $ ( Agent.JobName ) ' # Use a container since Azure Pipelines may not have the bleeding-edge Python RC container : python : rc-stretch python.version : ' 3.5 ' matrix : python.version : ' 3.5 ' python.version : ' 2.7 ' Python35Linux : # TODO : add codecov token ' * -maintenance ' python.version : 'pypy3 ' VersionRange : matrix : jobs : python.version : 'pypy3 ' # TODO : build on nightly commands = variables : job : Flask task : UsePythonVersion @ 0 strategy : python.version : ' 3.7 ' python.version : ' 3.6 ' [ testenv : future ] script : | steps : # do n't fail the build if this does n't work ! TOXENV : 'future ' pip install -q -e examples/tutorial [ test ] testResultsFiles : 'test-results.xml ' Python37Windows : vmImage : ubuntu-latest publish.test.results : 'true ' 'master ' script : tox Python37Mac : displayName : 'Install tox ' passenv = CI TRAVIS TRAVIS_ * APPVEYOR APPVEYOR_ * BUILD_ * SYSTEM_ * AGENT_ * TF_BUILD script : tox vmImage : 'macos-latest ' python.version : ' 3.7 ' Python35Linux : inputs : python.architecture : 'x64 ' TOXENV : 'py , codecov ' variables : strategy : DocsHtml : vmImage : 'windows-latest ' Python27Linux : # TODO : emit JUnit test results architecture : $ ( python.architecture ) Python36Linux : condition : eq ( variables [ 'publish.test.results ' ] , 'true ' ) coverage run -p -m pytest -- junitxml=test-results.xml tests examples Python27Windows : DocsHtml : Pypy3Linux : Python36Linux : # TODO : add codecov token echo `` # # vso [ task.prependPath ] $ HOME/.local/bin '' pip install -U -- user tox vmImage : $ [ variables.vmImage ] inputs : python.architecture : 'x64 ' versionSpec : $ ( python.version )","['.azure-pipelines.yml', 'tox.ini']",Merge pull request # 3172 from vtbassmatt/enhance-azure-pipelines
124,1dda032b00cb4f7a783e018a7c370ee88f15e797,2019-05-06 16:34:46-04:00,"app.register_blueprint ( bp , url_prefix= '' /2 '' , url_defaults= { `` bar '' : 19 } ) assert b'43 ' in app_page_bytes assert rv.data == b'value ' app.secret_key , if `` methods '' not in d : return 'GET ' rv = client.post ( 'http : //domain.com/action ? vodka=42 ' , data= { 'gin ' : 43 } ) return _render ( gmt = FixedOffset ( hours=0 , name='GMT ' ) app.config [ `` PREFERRED_URL_SCHEME '' ] = `` https '' client.environ_base [ 'HTTP_USER_AGENT ' ] = 'Bar ' assert rv.mimetype == 'application/json ' assert rv.data == b'42 ' 'Could not import `` { name } '' . '.format ( name=module_name ) _app_ctx_stack methods = [ `` GET '' , `` POST '' ] assert flask.g.user_agent == `` werkzeug/ '' + werkzeug.__version__ evts.append ( 'index ' ) rv = client.get ( '/py/bar ' ) pytest.raises ( BuildError , flask.url_for , 'spam ' ) `` ENV '' : None , return flask.render_template ( 'index.html ' ) frontend = flask.Blueprint ( 'frontend ' , __name__ ) if hasattr ( adapter , `` allowed_methods '' ) : flask.session [ 'test ' ] = 'aha ' for item in ( 'FOO ' , 'BAR ' , 'SPAM ' ) : got_request_exception = _signals.signal ( 'got-request-exception ' ) app.config.update ( SERVER_NAME= '' example.com:8080 '' ) `` { rv.__class__.__name__ } . `` .format ( e=e , rv=rv ) ( 'localhost ' , None , 'localhost ' , 8080 ) , monkeypatch.setitem ( sys.modules , `` not_here '' , None ) assert find_best_app ( script_info , Module ) .name == 'appname ' flask.session [ 'di_tag ' ] = { ' di ' : 'not-a-dict ' } rv = client.get ( '/ ' , 'http : //foo.localhost.localdomain ' ) `` Intended Audience : : Developers '' , @ click.command ( 'routes ' , short_help='Show the routes for the app . ' ) assert list ( flask.g ) == [ 'foo ' ] assert rv.headers [ ' X-Bar ' ] == 'Foo ' e.strerror = 'Unable to load configuration file ( % s ) ' % e.strerror app.config.from_mapping ( [ run_command.make_context ( `` run '' , [ `` -- cert '' , `` flask '' ] ) ' { { foo } } ' , foo= ' < test > ' ) == ' & lt ; test & gt ; ' `` / '' , headers= { `` Range '' : `` bytes=4-15 '' , `` If-Range '' : http_date ( last_modified ) } `` Session transactions only make sense `` `` with cookies enabled . '' assert rv.headers [ ' X-Parachute ' ] == 'awesome ' rv = flask.make_response ( 'W00t ' , 404 ) text = ' < p > Hello World ! ' client.get ( '/test_filters/ ' ) `` statement . '' rv = client.get ( `` /py/bar '' ) `` `` '' .format ( assert rv == b'hello ' flags=re.IGNORECASE @ bp.route ( '/bp ' ) assert `` path=/ '' in cookie assert session [ `` user_id '' ] == 1 `` X-Foo '' : `` Bar '' , .mkdir ( `` python { x [ 0 ] } . { x [ 1 ] } '' .format ( x=sys.version_info ) ) ' environment . ' , fg='red ' ) .replace ( u '' > '' , u '' \\u003e '' ) set_debug_flag=True ) : ' '' save_session '' is deprecated and will be removed in 1.1 . Use ' return flask.render_template ( 'non_escaping_template.txt ' , text=text , return text_type ( json [ `` a '' ] + json [ `` b '' ] ) client.get ( `` /test_filters/ '' ) self.record_once ( lambda s : s.app._register_error_handler ( file = io.BytesIO ( b'somethingsomething ' ) return ' x ' `` fly need unique names . '' assert options [ `` filename '' ] == `` index.html '' response.vary.add ( 'Cookie ' ) assert response.get_json ( ) [ `` result '' ] == result os.environ = { 'FOO_SETTINGS ' : 'missing.cfg ' } raise RuntimeError ( 'Session transactions only make sense ' stacklevel=3 , admin = Blueprint ( 'admin ' , __name__ , url_prefix='/admin ' , [ `` aaa_post '' , `` yyy_get_post '' , `` static '' ] , ] , elif sort == `` methods '' : subdomain=subdomain , 'SESSION_REFRESH_EACH_REQUEST ' : True , } , `` utf-16 '' , import_name , send_file , app.config [ `` SESSION_COOKIE_DOMAIN '' ] = rv monkeypatch.chdir ( os.path.join ( test_path , `` cliapp '' , `` inner1 '' ) ) def add_url_rule ( return flask.render_template ( `` context_template.html '' , value=23 ) return URLSafeTimedSerializer ( rv = app.test_client ( ) .get ( '/ ' ) rv = client.get ( `` /static/index.html '' ) view_func=more , flask.session [ 'foo ' ] = 42 username = request.form [ 'username ' ] kwargs.setdefault ( 'environ_base ' , self.environ_base ) rv = url_adapter.build ( endpoint , values , method=method , ( 'message ' , u'Hello World ' ) , assert rv.data == b '' Hello from the Frontend '' assert resp.mimetype == `` text/x-special '' site_packages.join ( 'site_app.py ' ) .write ( app.config.update ( { `` JSONIFY_MIMETYPE '' : 'application/vnd.api+json ' } ) if 'script_info ' in arg_names : for config_key in `` TESTING '' , `` PROPAGATE_EXCEPTIONS '' , `` DEBUG '' , None : result = runner.invoke ( args= [ `` init-db '' ] ) @ app.route ( '/bytes ' ) ( `` username '' , `` password '' , `` message '' ) , if flask.request.method == `` POST '' : fp = _wrap_reader_for_text ( fp , kwargs.pop ( 'encoding ' , None ) or 'utf-8 ' ) app.url_map.charset = 'euc-kr ' appcontext_tearing_down , appcontext_pushed , \ msg = `` Mocking a loader which does not have ` % s. ` `` % name provide_automatic_options=False , url_for , a = request.form.get ( `` a '' , 0 , type=float ) assert rv == b'request|after ' return `` index '' provide_automatic_options=False return path.__fspath__ ( ) if hasattr ( path , '__fspath__ ' ) else path info.append ( `` - > % s '' % detail ) rv = client.get ( `` /E1 '' ) rv = c.get ( '/ ' ) if path or os.path.isfile ( `` .env '' ) or os.path.isfile ( `` .flaskenv '' ) : `` The view function did not return a valid response . The '' assert rv.data == b '' Foo SubDomain '' app1 = Flask ( 'app1 ' ) rv = dumps ( obj , * * kwargs ) \ ( `` cliapp.app '' , None , `` testapp '' ) , assert 'foo option 2 ' == foo_options [ 'foo_option_2 ' ] ( ( `` /a '' , `` b/c '' ) , `` /a/b/c '' ) , app1 = Flask ( `` app1 '' ) flask.url_for ( `` index '' ) == `` http : //localhost/hello/test % 20x '' app.add_url_rule ( `` / < test > / '' , `` index '' , self.index ) last_modified=last_modified , ( '/ ' , `` , '/ ' ) , 'not provide file name information or because ' return 'Get % d ' % id template_rendered , assert `` x-sendfile '' not in rv.headers ( os.environ , 'FLASK_APP ' , monkeypatch.notset ) , assert `` cookie domain is an IP '' in str ( w.message ) content_type= '' application/json '' , flags=re.DOTALL | re.MULTILINE assert evts == [ 'first ' , 'before ' , 'after ' , 'teardown ' ] assert client.get ( `` /create '' ) .status_code == 200 Markup ( ' < html > ' ) , `` HTTP_USER_AGENT '' : `` werkzeug/ '' + werkzeug.__version__ if not self.subdomain_matching else None ) `` { `` , ' { e } \nThe view function did not return a valid ' assert 'Error : the template could not be found ' in text if `` auto_reload '' not in options : ( 'cliapp.factory ' , 'create_app ( ' ) , db = g.pop ( `` db '' , None ) title = request.form [ 'title ' ] assert ( for path in ( 'wsgi.py ' , 'app.py ' ) : info.append ( ' % 5d : trying loader of % s ' % ( expect ( `` /getitem '' ) assert template.name == 'simple_template.html ' assert b'Response ' in rv.data assert b'forbidden ' == rv.data rv = client.get ( '/ ' , url_scheme='https ' ) @ app.route ( '/test_filters_without_returning_categories/ ' ) init = app.join ( '__init__.py ' ) assert `` domain=127.0.0.1 '' in rv.headers [ `` set-cookie '' ] .lower ( ) ( ' 0 ' , False , False ) , flask.g.foo = `` bar '' 'view functions . ' ) assert rv.data == b'Hello Server Error ' ) .append ( f ) return text_type ( json [ ' a ' ] + json [ ' b ' ] ) rv = render ( `` < a ng-data= ' { { data|tojson } } ' > < /a > '' , app.config [ `` SESSION_REFRESH_EACH_REQUEST '' ] = False rv = client.get ( '/admin/static/css/test.css ' ) foo_foo_foo.__name__ = `` bar.123 '' rv = flask.json.htmlsafe_dumps ( `` < /script > '' ) c.get ( '/none ' ) lambda s : s.app.url_default_functions.setdefault ( None , [ ] ) .append ( f ) self.path_type = click.Path ( exists=True , dir_okay=False , resolve_path=True ) kwargs.setdefault ( `` cls '' , JSONDecoder ) re.split ( r '' : ( ? ! [ \\/ ] ) '' , self.app_import_path , 1 ) + [ None ] assert type ( s [ `` m '' ] ) == flask.Markup flask.url_for ( 'index ' ) type=click.Path ( exists=True , dir_okay=False , resolve_path=True ) , return 'test index ' `` as intended in some browsers . Add an entry to your hosts '' frontend = flask.Blueprint ( 'myapp.frontend ' , __name__ ) rv = rv.rsplit ( ' : ' , 1 ) [ 0 ] .lstrip ( ' . ' ) limit_loader , modules_tmpdir , modules_tmpdir_prefix , purge_module , monkeypatch as_tuple = kwargs.pop ( `` as_tuple '' , False ) if not has_encoding ( `` euc-kr '' ) : cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) `` msg '' : { raise RuntimeError ( `` Test case where BuildError is not current . '' ) cmd = [ sys.executable , `` setup.py '' , `` sdist '' , `` bdist_wheel '' ] modules_tmpdir.join ( 'importerror.py ' ) .write ( 'raise NotImplementedError ( ) ' ) ctx = app.test_request_context ( `` / ? name=World '' ) assert flask.render_template ( `` mail.txt '' , foo= '' < test > '' ) == `` < test > Mail '' static_url_path=None , template_folder=None , rv = client.post ( '/echo ' , json=json_data ) yield ' ! ' self.spam = `` eggs '' if flask.g.lang_code is not None and app.url_map.is_endpoint_expecting ( ( `` False '' , False , False ) , '/bar/123 ' , endpoint='bar.123 ' , view_func=foo_foo_foo assert `` x-sendfile '' not in rv.headers cache_timeout=None , myapp2 = Flask ( 'appname2 ' ) flask.url_for ( `` spam '' ) url_charset = `` euc-kr '' def exit ( self ) : SERVER_NAME='example.com ' post = get_db ( ) .execute ( app = locate_app ( info , `` notanapp.py '' , None , raise_if_not_found=False ) backend = flask.Blueprint ( `` myapp.backend '' , __name__ ) return `` frontend says no '' , 403 app.config.update ( SESSION_COOKIE_SAMESITE= '' Lax '' ) rv = flask.send_file ( f , mimetype= '' text/html '' ) assert c.post ( `` / '' ) .data == b '' POST '' return `` DELETE '' lambda : None 'itsdangerous > =0.24 ' , count = db.execute ( 'SELECT COUNT ( id ) FROM post ' ) .fetchone ( ) [ 0 ] flask.send_from_directory ( 'static ' , 'bad\x00 ' ) return `` child-registered '' flask.Flask ( __name__ , instance_path='instance ' ) help='Enable or disable multithreading . ' ) `` Could not locate a Flask application . You did not provide `` bp = Blueprint ( `` auth '' , __name__ , url_prefix= '' /auth '' ) client.environ_base [ `` REMOTE_ADDR '' ] = `` 0.0.0.0 '' ( `` /jquery '' , `` jquery.html '' ) , options [ 'endpoint ' ] = endpoint flash , assert client.delete ( '/ ' ) .data == b'DELETE ' filepath = getattr ( mod , `` __file__ '' , None ) ) test_path , 'cliapp.message.txt ' `` ORDER BY created DESC '' client.get ( '/abort ' ) if sort in ( 'endpoint ' , 'rule ' ) : assert rv.data == b'http : //xxx.example.com:1234/foo/ ' ( `` '' , `` production '' , False ) , if hasattr ( filename_or_fp , '__fspath__ ' ) : if self.request.environ.get ( 'flask._preserve_context ' ) or \ assert flask.g.pop ( 'bar ' ) == 'the cake is a lie ' reason= '' not implemented within werkzeug '' , lambda s : s.app.before_request_funcs.setdefault ( self.name , [ ] ) .append ( f ) session.permanent and app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] ' The tuple must have the form ( body , status , headers ) , ' raise AssertionError ( def __init__ ( self , name , import_name , static_folder=None , `` dump '' , return 'Foo ' .mkdir ( 'lib ' ) \ assert ( 'trying loader of blueprint `` frontend '' ' limit_loader , modules_tmpdir , modules_tmpdir_prefix , purge_module , site_packages 400 , [ ( ' X-Foo ' , 'bar ' ) ] ) except ( ValueError , SyntaxError ) as e : assert messages [ 0 ] == u '' Hello World '' assert flask.g.get ( `` x '' ) == 42 ) assert 'samesite ' in cookie ' statement . ' '/ ' , method='POST ' , data='malformed ' , ' ` filename_or_fp ` or set your own MIME-type via ` mimetype ` . ' assert 'httponly ' in rv.headers [ 'set-cookie ' ] .lower ( ) return render_template ( 'missing_template.html ' ) return flask.url_for ( `` myapp.backend.backend_index '' ) get_flashed_messages , locked_cached_property , url_for , get_load_dotenv ( `` /foo '' , `` /bar '' , `` /foo/bar '' ) , ( 'notanapp.py ' , None ) , flask.render_template ( `` missing.html '' ) has_request_context , url_defaults=None , ( `` production '' , `` production '' , False ) , 'database models and everything related at a central place ' row = ' { { 0 : < { 0 } } } { { 1 : < { 1 } } } { { 2 : < { 2 } } } '.format ( * widths ) g.user = ( environ , `` docs '' : [ `` sphinx '' , `` pallets-sphinx-themes '' , `` sphinxcontrib-log-cabinet '' ] , invoke ( [ `` routes '' , `` -s '' , `` rule '' ] ) .output , '_anchor ' : None , [ 'yyy_get_post ' , 'static ' , 'aaa_post ' ] , 'when a request context is on the stack . For instance within ' `` utf-32-be '' , and self.mimetype ! = 'multipart/form-data ' assert `` get_stuff '' in app.jinja_env.globals.keys ( ) rv = client.get ( '/static/index.html ' ) assert b'Internal Server Error ' in resp.data del sys.modules [ 'site_egg ' ] dumps ( data , indent=indent , separators=separators ) + `` \n '' , app.wsgi_app = PrefixPathMiddleware ( app.wsgi_app , '/bar ' ) kwargs [ 'data ' ] = json_dumps ( kwargs.pop ( 'json ' ) ) InternalServerError , 'issued automatically by the routing system to `` % s '' . ' return flask.Response ( `` '' , headers= { `` X-Method '' : `` HEAD '' } ) 'Programming Language : : Python : : 3.4 ' , assert `` Exception on / [ GET ] '' in err assert `` my_reverse '' in app.jinja_env.filters.keys ( ) root_path=None , return 'POST ' ( 2 , ' b ' , 2 ) , assert client.get ( `` /de/about '' ) .data == b '' /de/ '' % ( request.url , exc.new_url ) exec ( compile ( config_file.read ( ) , filename , `` exec '' ) , d.__dict__ ) key = k [ len ( namespace ) : ] assert response.data == b '' Hello , World ! '' return os.path.join ( package_path , `` instance '' ) return `` Get % d '' % id output = invoke ( [ 'routes ' ] ) .output purge_module ( `` site_package '' ) bp.add_url_rule ( assert options [ 'filename ' ] == 'index.html ' values [ '_anchor ' ] = anchor 'Topic : : Internet : : WWW/HTTP : : Dynamic Content ' , `` utf-8 '' , rv = render ( SESSION_COOKIE_SAMESITE= '' Lax '' , loc.__storage__ [ 'FOOO ' ] = [ 1 , 2 , 3 ] [ testenv : stylecheck ] @ app.route ( '/ ' , subdomain= ' < user > ' ) assert ctx.request.url == 'http : //localhost/ ' flask.session [ 'data ' ] = 'foo ' rv = app.config [ `` SESSION_COOKIE_DOMAIN '' ] @ frontend.route ( '/ ' ) assert env [ `` werkzeug.request '' ] is not None os.path.join ( app.root_path , 'static/index.html ' ) rv = client.get ( `` /admin/static/test.txt '' ) if self.request.environ.get ( `` flask._preserve_context '' ) or ( app.config.update ( SERVER_NAME= '' localhost '' ) @ app.route ( '/meh ' ) ctx = run_command.make_context ( `` run '' , [ `` -- cert '' , __file__ , `` -- key '' , __file__ ] ) flask.Flask ( 'importerror ' ) `` Releasing % s ( codename % s , release date % s ) '' , macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) rv = client.post ( '/json ' , data='malformed ' , content_type='application/json ' ) app = modules_tmpdir.join ( 'unimportable.py ' ) assert app.config [ `` TEST_KEY '' ] == `` foo '' with app.test_request_context ( '/ ' , environ_overrides= { 'HTTP_HOST ' : 'localhost ' } ) : assert list ( messages ) == [ ( 'message ' , u'Hello World ' ) ] @ app.route ( '/getsession ' ) resp.mimetype = `` text/x-special '' assert rv.data == b'/test/ ' assert recorded == [ ( `` tear_down '' , { `` exc '' : None } ) ] rv = client.get ( '/ ' , 'https : //localhost.localdomain ' ) foo_options = app.config.get_namespace ( 'FOO_ ' , trim_namespace=False ) 'Programming Language : : Python : : 2.7 ' , app.add_url_rule ( `` /myview/ < int : id > '' , methods= [ `` GET '' ] , view_func=myview ) `` /add '' , return Flask ( 'appname2 ' ) return `` you shall not pass '' , 403 assert client.get ( `` /bar/123 '' ) .data == b '' 123 '' assert rv.data == b '' rv = client.get ( '/wsgi ' ) match = re.search ( r '' ( ? i ) \bexpires= ( [ ^ ; ] + ) '' , rv.headers [ `` set-cookie '' ] ) assert c.get ( '/forbidden-registered ' ) .data == b'forbidden-registered ' resp = client.get ( `` / '' ) session [ `` _flashes '' ] = flashes SECRET_KEY = `` config '' assert rv == b '' hello '' root_path=root_path return 'value set ' app.config.from_mapping ( { `` SECRET_KEY '' : `` config '' , `` TEST_KEY '' : `` foo '' } ) app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = 3600 ' `` session_interface.make_null_session '' instead . ' ' as intended in some browsers . Add an entry to your hosts ' return ' . '.join ( module_name [ : :-1 ] ) assert client.get ( '/py/bar ' ) .data == b'bp.bar ' got_request_exception , textwrap.dedent ( assert rv.headers [ 'Vary ' ] == header_value from werkzeug.http import http_date , parse_cache_control_header , parse_options_header rv = flask.make_response ( `` W00t '' , 404 ) warnings.warn ( DeprecationWarning ( assert b'href= '' /1/update '' ' not in client.get ( '/ ' ) .data _set_static_url_path , rv = flask.render_template_string ( `` { { get_answer ( ) } } '' ) 'PROPAGATE_EXCEPTIONS ' : None , rv = flask.send_from_directory ( FakePath ( 'static ' ) , FakePath ( 'hello.txt ' ) ) assert client.get ( `` /foo/ '' ) .data == b '' foo '' ' instead . ' return 'request ' bp = flask.Blueprint ( `` company '' , __name__ , subdomain= '' xxx '' ) buffered = kwargs.pop ( 'buffered ' , False ) NotFound use_reloader , propagate_exceptions , app ) : val = os.environ.get ( 'FLASK_SKIP_DOTENV ' ) app.config [ `` SERVER_NAME '' ] = `` localhost.localdomain:3000 '' description= '' The basic blog app built in the Flask tutorial . `` , assert messages [ 1 ] == flask.Markup ( u '' < em > Testing < /em > '' ) assert b '' xxx '' == response.data @ pytest.mark.usefixtures ( 'req_ctx ' ) warn ( Warning ( 'The blueprint was already registered once ' assert client.get ( '/ ' ) .status_code == 500 recorded.append ( `` push '' ) return u '' Hällo Wörld '' .encode ( `` utf-8 '' ) datetime.date ( 1975 , 1 , 5 ) , return flask.session.get ( 'test ' ) return `` Okay '' assert `` samesite=strict '' in cookie `` JSONDecoder '' , return redirect ( url_for ( `` blog.index '' ) ) assert s [ `` m '' ] == flask.Markup ( `` < html > '' ) calls.append ( `` after-signal '' ) if name in ( `` archive '' , `` get_filename '' ) : assert rv.data == b '' request|after '' serializer=self.serializer , methods = [ `` GET '' ] rv = client.get ( `` / '' , `` http : //mitsuhiko.localhost.localdomain/ '' ) match = re.search ( r '' \bexpires= ( [ ^ ; ] + ) '' , rv.headers [ `` set-cookie '' ] ) dev_version = bump_version ( version ) + `` .dev '' if request.base_url + '/ ' == exc.new_url.split ( ' ? ' ) [ 0 ] : `` is active if debug is enabled . `` , ( os.environ , 'FLASK_ENV ' , monkeypatch.notset ) , # Native string not marked as Unicode on Python 2 & 0xFFFFFFFF , trap_bad_request is None context [ 'whiskey ' ] = 43 template_folder='templates ' , __slots__ = ( 'serializer ' , ) session [ '_flashes ' ] = flashes is_eager=True , assert rv.data.strip ( ) == b'/ * nested file * / ' is_eager=True assert flask.request.path == `` / '' @ click.option ( ' -- key ' , `` dotenv '' : [ `` python-dotenv '' ] , rv = client.get ( '/full_tuple ' ) info.append ( 'PREFERRED_URL_SCHEME ' : 'http ' , self.app.add_url_rule ( ' { { foo } } ' ) 'Development Status : : 5 - Production/Stable ' , mimetype=current_app.config [ 'JSONIFY_MIMETYPE ' ] @ app.route ( '/response_headers ' ) expect ( `` /get '' ) `` first request was handled . This usually indicates a bug `` purge_module , site_packages , limit_loader ) : provide_automatic_options=None , assert `` FOO '' not in os.environ return current_app.config [ 'MAX_COOKIE_SIZE ' ] assert b '' Failed to decode JSON object '' in rv.data rv = url_adapter.build ( rv = flask.send_from_directory ( 'static ' , 'hello.txt ' ) ' '' app.config.update ( SERVER_NAME= '' example.com '' ) app.config.update ( SERVER_NAME= '' example.com:8080 '' , APPLICATION_ROOT= '' /foo '' ) b ' & lt ; p & gt ; Hello World ! ' , _get_static_folder , _set_static_folder , with open ( filename , `` w '' ) as f : `` database models and everything related at a central place `` 'expression . '.format ( name=app_name ) flask.url_for ( `` index '' , _external=True , _scheme= '' https '' ) if hasattr ( mapping [ 0 ] , 'items ' ) : banner = `` Python % s on % s\nApp : % s [ % s ] \nInstance : % s '' % ( static_folder='static ' , assert rv [ 'result ' ] == 'running ... ' ( `` cliapp.factory '' , `` create_app ( ) `` , `` app '' ) , app.config [ 'PERMANENT_SESSION_LIFETIME ' ] = 42 max_age_default = app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] return 'you shall not pass ' , 403 get_flashed_messages , get_template_attribute , make_response , safe_join , \ 'application to something unique and secret . ' ) assert s [ `` d '' ] == now assert rv.data == b ' < h1 > 43 < /h1 > ' dumps ( obj , * * kwargs ) SESSION_COOKIE_SAMESITE='Lax ' , `` USE_X_SENDFILE '' : False , after_this_request , ssl_context=cert , help= '' Show HEAD and OPTIONS methods . '' flask.request.form [ 'missing_key ' ] this_module += '.cli ' modules_tmpdir.mkdir ( `` lib '' ) dotenv is None , reason='dotenv is not installed ' flask.session [ 't_tag ' ] = { ' t ' : 'not-a-tuple ' } values.setdefault ( `` lang_code '' , flask.g.lang_code ) @ click.command ( 'run ' , short_help='Run a development server . ' ) if hasattr ( client , `` options '' ) : `` -- debugger/ -- no-debugger '' , assert rv.headers [ `` X-Bar '' ] == `` Foo '' 'the blueprint `` frontend '' ' ) in text `` Client can not provide both 'json ' and 'data ' . '' password = request.form [ `` password '' ] self.msg = `` .join ( buf ) assert app.jinja_env.filters [ 'strrev ' ] == my_reverse flask.flash ( u '' Hello World '' , `` error '' ) rv = client.get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) return 'parent ' return 'index for % s ' % user default_mimetype = `` text/html '' post = db.execute ( 'SELECT * FROM post WHERE id = 1 ' ) .fetchone ( ) assert app.config [ `` TEMPLATES_AUTO_RELOAD '' ] is None if ' . ' not in rv : from werkzeug.exceptions import BadRequest , BadRequestKeyError , HTTPException , \ view_func , defaults=defaults , * * options ) kwargs.setdefault ( 'environ_overrides ' , { } ) \ default= '' endpoint '' , exc is not None and self.app.preserve_context_on_exception response = client.post ( `` /1/delete '' ) subdomain or url_scheme url= '' http : //flask.pocoo.org/docs/tutorial/ '' , expect_exception ( flask.session.pop , `` foo '' ) buf.append ( `` \n\nNote : this exception is only raised in debug mode '' ) ] return text_type ( flask.session [ 'foo ' ] ) app.config.update ( SESSION_COOKIE_SAMESITE='invalid ' ) `` A name collision occurred between blueprints % r and % r . Both '' app.url_map.add ( Submount ( '/foo ' , [ return filename.endswith ( ( `` .html '' , `` .htm '' , `` .xml '' , `` .xhtml '' ) ) install_egg ( 'site_egg ' ) rv = client.get ( `` / '' , `` http : //foo.localhost '' ) fail ( `` Current version is not numeric '' ) ' 2 : trying loader of blueprint `` admin '' ' `` ( blueprintapp.apps.admin ) '' __all__ = [ 'dump ' , 'dumps ' , 'load ' , 'loads ' , 'htmlsafe_dump ' , assert ctx.request.url == `` http : //xxx.example.com:1234/foo/ '' return 'bp-forbidden ' attachment_filename=None , with current_app.open_resource ( `` schema.sql '' ) as f : separators = ( ' , ' , ' : ' ) request.path , raise TypeError ( 'bad bad factory ! ' ) rv = self.config [ `` TEMPLATES_AUTO_RELOAD '' ] locate_app ( info , `` cliapp.importerrorapp '' , None , raise_if_not_found=False ) 'Content-Type ' : 'text/plain ; charset=utf-8 ' kwargs.setdefault ( `` object_hook '' , self.object_hook ) @ app.route ( '/success ' ) '/2/delete ' , match = re.search ( '^Version\s+ ( . * ) ' , line.strip ( ) ) info.data [ `` test '' ] = `` spam '' def test_prefix_package_paths ( limit_loader , modules_tmpdir , title = request.form [ `` title '' ] assert not hasattr ( flask.g , 'value ' ) assert client.get ( '/bytes ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) assert sorted ( rv.allow ) == [ `` OPTIONS '' ] info.append ( 'Error : the template could not be found . ' ) elif site_folder.lower ( ) == 'site-packages ' : return Flask ( `` _ '' .join ( [ `` app3 '' , foo , script_info.data [ `` test '' ] ] ) ) project_urls=OrderedDict ( assert result.output == 'testapp\n ' assert c.get ( `` /bp/error '' ) .data == b '' bp-error '' ( 'development ' , 'development ' , True ) , assert client.get ( `` /get '' ) .data == b '' 42 '' assert rv.mimetype == 'text/html ' http_date , parse_cache_control_header , assert ctx.params [ 'cert ' ] == 'adhoc ' rv = app.send_static_file ( FakePath ( 'index.html ' ) ) test_path , client.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.0 ' `` sphinxcontrib-log-cabinet '' , assert `` before '' in evts ( `` , `` , b'Username is required . ' ) , textwrap.dedent ( True , client.get ( `` / '' ) run_command.make_context ( 'run ' , [ ' -- cert ' , __file__ ] ) `` htmlsafe_dumps '' , ( `` /foo/ '' , `` //bar '' , `` /foo/bar '' ) , TagDict , return flask.url_for ( `` about '' ) `` and as such configuration could not be `` return repr ( flask.session.get ( `` foo '' ) ) 'utf-32-le ' , 'utf-32-be ' , 'utf-32 ' , return 'bar ' if not self.debug \ self.spam = 'eggs ' `` cliapp.message.txt '' , datetime.utcnow ( ) .replace ( microsecond=0 ) , @ admin.route ( '/ ' ) return flask.request.files [ 'foo ' ] .filename assert rv.data.strip ( ) == b'Admin File ' app.config.from_pyfile ( 'missing.cfg ' ) app.config.from_pyfile ( `` missing.cfg '' ) self.expect_order ( key = `` di '' assert index ( ) == 'Hello World ! ' # not enough arguments if current_app.config [ `` JSONIFY_PRETTYPRINT_REGULAR '' ] or current_app.debug : rv = client.open ( `` /options '' , method= '' OPTIONS '' ) @ app.route ( '/test ' ) assert resp == b'request|after ' rv = client.get ( `` /forbidden '' ) ( `` , 'production ' , False ) , assert rv.mimetype == `` application/json '' flask.g.lang_code = values.pop ( 'lang_code ' , None ) extras_require= { assert rv.data == b '' Hi , status ! '' run_command.make_context ( 'run ' , [ ' -- cert ' , 'adhoc ' , ' -- key ' , __file__ ] ) app.add_template_filter ( my_reverse , `` strrev '' ) app.config.update ( SERVER_NAME= '' localhost:80 '' ) static_folder= '' static '' , from werkzeug.exceptions import ( assert rv.headers [ `` X-Parachute '' ] == `` awesome '' def run_command ( info , host , port , reload , debugger , eager_loading , with_threads , cert ) : static_folder= '' static '' , _set_static_folder , rv = client.get ( '/py/bar/123 ' ) assert rv.data.split ( ) == [ b '' 42 '' , b '' 23 '' , b '' False '' , b '' aha '' ] ) .fetchone ( ) ( `` cliapp.factory '' , 'create_app3 ( `` foo '' ) ' , `` app3_foo_spam '' ) , rv = flask.helpers.make_response ( 'Hello ' ) ' X-Method ' : flask.request.method app.add_url_rule ( `` /myview/create '' , methods= [ `` POST '' ] , view_func=myview ) lambda s : s.app.after_request_funcs.setdefault ( self.name , [ ] ) .append ( f ) with open ( os.path.join ( app.root_path , `` static/index.html '' ) ) as f : return 'Hello Server Error ' , 500 ) , `` Popped wrong request context. `` `` ( % r instead of % r ) '' % ( rv , self ) return render_template ( `` blog/index.html '' , posts=posts ) cli_app_path = os.path.abspath ( os.path.join ( @ bp.route ( '/forbidden ' ) assert b'missing_key ' not in rv.data `` _anchor '' : None , key = ' 1 ' url = flask.url_for ( `` view '' , company_id= '' xxx '' ) return app.config [ 'SESSION_COOKIE_HTTPONLY ' ] Warning ( rv = flask.send_file ( assert flask.g.pop ( `` bar '' ) == `` the cake is a lie '' mt == `` application/json '' return render_template ( './admin/index.html ' ) rv = client.get ( `` / '' , `` https : //localhost.localdomain '' ) purge_module ( 'main_app ' ) rv = client.get ( '/ ' , 'http : //www.example.com:8080/test/ ' ) release_date.date ( ) , date.today ( ) ( `` /foo '' , `` '' , `` /foo '' ) , session.pop ( `` _flashes '' ) if `` _flashes '' in session else [ ] if `` defaults '' in options : 'executable . Consider putting app.run ( ) behind an ' rv = flask.render_template_string ( `` Hello { { config.WORLD_NAME } } `` `` { { foo } } '' ) rv = c.get ( `` http : //example.com/static/index.html '' ) kwargs [ `` obj '' ] = obj if _matching_loader_thinks_module_is_package ( APPLICATION_ROOT='/test ' , ( 'warning ' , flask.Markup ( u ' < em > Testing < /em > ' ) ) ( `` cliapp/app '' , None ) , TagTuple , `` / '' , environ_overrides= { `` HTTP_HOST '' : `` localhost '' } ( ' a ' , `` , b'Password is required . ' ) , kwargs.setdefault ( 'cls ' , JSONEncoder ) assert sorted ( flask.g ) == [ 'bar ' , 'foo ' ] return redirect ( url_for ( 'index ' ) ) * * extra app.logger.error ( `` test '' ) return self.get ( '_permanent ' , False ) assert client.get ( '/de/ ' ) .data == b'/de/about ' app = locate_app ( self , import_name , None , raise_if_not_found=False ) app_root = app.config [ `` APPLICATION_ROOT '' ] assert 'after ' not in evts return 'success ' endpoint = options.pop ( `` endpoint '' , None ) return current_app.config [ `` MAX_COOKIE_SIZE '' ] 'Topic : : Software Development : : Libraries : : Application Frameworks ' , rv = client.get ( '/test ' ) ctx.app , return render_template ( ' { 0 } .html'.format ( js ) , js=js ) options [ 'autoescape ' ] = self.select_jinja_autoescape buf.append ( assert `` closed '' in str ( e ) def index ( self , test= '' a '' ) : @ bp.route ( '/error ' ) current_app , request app.add_url_rule ( '/ ' , view_func=BetterIndex.as_view ( 'index ' ) ) rv = c.get ( '/read ' ) 'key was set . Set the secret_key on the ' assert flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) == ' < test > Mail ' url_charset = 'euc-kr ' @ sideend.route ( '/what-is-a-sideend ' ) called.append ( 'TEARDOWN ' ) 'file ( No such file or directory ) : ' ) return self.url_rule.endpoint.rsplit ( ' . ' , 1 ) [ 0 ] .mkdir ( 'python { x [ 0 ] } . { x [ 1 ] } '.format ( x=sys.version_info ) ) \ _data_sql = f.read ( ) .decode ( 'utf8 ' ) return `` Hello , World ! '' [ ( `` X-Foo '' , `` bar '' ) ] , pretty_response = \ assert app.jinja_env.tests [ 'is_boolean ' ] ( False ) assert app.test_client ( ) .get ( `` / '' ) .status_code == 500 assert app.config.from_envvar ( 'FOO_SETTINGS ' ) 'Intended Audience : : Developers ' , assert rv.data == b ' 3 ' ' , '.join ( sorted ( rule.methods - ignored_methods ) ) for rule in rules assert s [ ' b ' ] == b'\xff ' assert client.get ( `` /1/update '' ) .status_code == 200 assert 'it was a bool ' in str ( e ) 'SERVER_NAME ' : None , method = values.pop ( '_method ' , None ) with open ( os.path.join ( app.root_path , 'static/index.html ' ) ) as f : modules_tmpdir_prefix , purge_module , assert app.instance_path == os.path.join ( here , 'instance ' ) environ [ `` HTTP_HOST '' ] = u '' \x8a '' # nested package use_x_sendfile = ConfigAttribute ( 'USE_X_SENDFILE ' ) assert rv.mimetype == `` application/vnd.api+json '' assert client.post ( `` /1/delete '' ) .status_code == 403 assert line [ : len ( expect ) ] == expect rv = app.send_static_file ( FakePath ( `` index.html '' ) ) 'app = flask.Flask ( __name__ ) \n ' test = flask.Blueprint ( 'test ' , __name__ ) assert client.get ( `` /1,2,3 '' ) .data == b '' 1|2|3 '' assert ( return flask.render_template ( 'context_template.html ' , value=23 ) rv = flask.send_file ( 'static/index.html ' ) assert rv.data == b '' Hello Server Error '' `` A request was sent to this URL ( % s ) but a redirect was `` assert response.headers [ 'Location ' ] == 'http : //localhost/auth/login ' if sep not in ( None , '/ ' ) ) return app.config [ `` SESSION_COOKIE_PATH '' ] or app.config [ `` APPLICATION_ROOT '' ] assert app.instance_path == os.path.join ( here , `` instance '' ) environ [ 'HTTP_HOST ' ] = u'ąśźäüжŠßя.com ' assert rv.data == b '' index for mitsuhiko '' sep for sep in [ os.path.sep , os.path.altsep ] if sep not in ( None , `` / '' ) assert repr ( flask.g ) == ' < LocalProxy unbound > ' and req.method == `` OPTIONS '' return os.path.join ( path , other [ len ( path ) : ] .lstrip ( os.sep ) ) == other frontend = flask.Blueprint ( `` frontend '' , __name__ ) 'TEMPLATES_AUTO_RELOAD ' : None , rv = flask.url_for ( 'static ' , filename='index.html ' , _external=True ) assert 'closed ' in str ( e ) .replace ( u ' & ' , u'\\u0026 ' ) \ assert rv is self , `` Popped wrong app context . ( % r instead of % r ) '' % ( rv , self ) output = invoke ( [ `` routes '' ] ) .output b = request.form.get ( `` b '' , 0 , type=float ) use_debugger=debugger , app_root = app.config [ 'APPLICATION_ROOT ' ] project_urls=OrderedDict ( ( .mkdir ( `` site-packages '' ) % ( lambda s : s.app.teardown_request_funcs.setdefault ( None , [ ] ) .append ( f ) signer_kwargs=signer_kwargs , warn ( Warning ( 'Silently ignoring app.run ( ) because the ' return self._client.get ( `` /auth/logout '' ) last_modified = datetime.datetime.utcfromtimestamp ( `` SECRET_KEY '' : None , flask.url_for ( `` hello '' , name= '' test x '' , _external=True ) assert calls == [ _request_ctx_stack.top.flashes = flashes = ( rv = tmpdir.mkdir ( 'modules_tmpdir ' ) rv.set_etag ( 'Environment : : Web Environment ' , os.path.join ( test_path , 'cliapp ' , 'inner1 ' , 'inner2 ' ) , appcontext_pushed , 'filename * ' : `` UTF-8 '' % s '' % url_quote ( attachment_filename ) , `` here = os.path.abspath ( os.path.dirname ( __file__ ) ) \n '' bp = flask.Blueprint ( 'bp ' , __name__ ) assert client.get ( '/ ' ) .data == b ' 1 ' repo : https : //github.com/python/black rv = current_app.response_class ( data , mimetype=mimetype , headers=headers , assert client.get ( '/bar/ ' ) .data == b'bar ' '/1/update ' , if check_author and post [ 'author_id ' ] ! = g.user [ 'id ' ] : value = app.config [ 'TEST_VALUE ' ] appcontext_tearing_down , assert 'domain ' not in rv.headers [ 'set-cookie ' ] .lower ( ) assert ( cmd = [ sys.executable , 'setup.py ' , 'sdist ' , 'bdist_wheel ' ] use_x_sendfile = ConfigAttribute ( `` USE_X_SENDFILE '' ) methods = [ 'GET ' ] assert rv.data == b'Hello from the Admin ' assert `` . '' not in endpoint , `` Blueprint endpoints should not contain dots '' assert 'path=/bar ' in rv.headers [ 'set-cookie ' ] .lower ( ) _app_ctx_err_msg = `` '' '' \ assert flask.g.user_agent == 'Foo ' rv = rv.replace ( '\\/ ' , '/ ' ) ( os.environ , `` FLASK_RUN_FROM_CLI '' , monkeypatch.notset ) , if silent and e.errno in ( yield ' % s : % r ' % ( key , value ) assert rv.data == b '' index '' callback=_validate_key , assert `` after '' in evts help= '' '' '' \ assert flask.url_for ( `` index '' , _external=True ) == `` http : //localhost/ '' return flask.request.args [ `` foo '' ] f = tmpdir.join ( 'my_config.py ' ) foo_foo_foo.__name__ = 'bar.123 ' doc= '' The absolute path to the configured static folder . `` , assert rv.headers [ `` Location '' ] == `` http : //localhost/test '' return redirect ( url_for ( `` auth.login '' ) ) ' pushed . This has to be executed when application context is ' `` JSON_AS_ASCII '' : True , myapp = Flask ( 'appname ' ) assert rv.data == b'Awesome ' == `` http : //foo.localhost.localdomain:5000/ '' 'arguments . '.format ( base.join ( name ) .join ( '__init__.py ' ) .ensure ( ) app.route ( '/ ' , methods= [ 'OPTIONS ' ] ) ( index2 ) request = LocalProxy ( partial ( _lookup_req_object , `` request '' ) ) app.config [ `` DEBUG '' ] = True rv.filters [ `` tojson '' ] = json.tojson_filter warnings.warn ( rv += `` # '' + url_quote ( anchor ) @ app.route ( '/hello/ < name > ' , methods= [ 'POST ' ] ) assert client.get ( '/1,2,3 ' ) .data == b ' 1|2|3 ' idx + 1 , src_info ) ) is_adhoc = cert == 'adhoc ' from werkzeug.http import ( ' available . ' help='The key file to use when specifying a certificate . ' ) safe_join ( `` /foo '' , `` .. '' ) assert c.get ( '/error ' ) .data == b'app-error ' if filename ! = `` : ( username , generate_password_hash ( password ) ) , rv = client.post ( '/ ' ) d = types.ModuleType ( 'config ' ) ( ( '/a/b/c ' , `` ) , '/a/b/c/ ' ) , @ pytest.mark.skipif ( not PY2 , reason='This only works under Python 2 . ' ) or filename.startswith ( `` .. / '' ) from .signals import signals_available , template_rendered , request_started , \ NoAppException , logger = logging.getLogger ( 'flask.app ' ) assert ' x-sendfile ' in rv.headers assert sorted ( rv.allow ) == [ `` GET '' , `` HEAD '' ] ' x ' : { '_foo ' : 42 } with app.test_request_context ( '/meh ' ) : cookie = rv.headers [ 'set-cookie ' ] .lower ( ) methods = options.pop ( `` methods '' , None ) @ app.route ( '/add ' , methods= [ 'POST ' ] ) 'Releasing % s ( codename % s , release date % s ) ' , kwargs [ `` data '' ] = json_dumps ( kwargs.pop ( `` json '' ) ) with io.open ( `` README.rst '' , `` rt '' , encoding= '' utf8 '' ) as f : app.config.from_mapping ( help='The port to bind to . ' ) flask.session [ `` b '' ] = b '' \xff '' Popen ( [ `` git '' , `` tag '' , tag ] ) .wait ( ) response = client.post ( yield flask.session [ `` test '' ] rv = client.get ( `` / ? foo=bar '' ) if self.import_name == '__main__ ' : `` you encounter this error please file a bug against Flask . '' assert result.output == `` % s\n '' % str ( not set_debug_flag ) == `` http : //localhost.localdomain:5000/ '' monkeypatch.setitem ( sys.modules , 'not_here ' , None ) `` ascii '' , `` ignore '' client.get ( `` /success '' ) raise RuntimeError ( 'No root path can be found for the provided ' rv = client.open ( `` / '' , method= '' OPTIONS '' ) assert rv.mimetype == 'text/html ' return flask.session.setdefault ( 'test ' , 'default ' ) assert rv.mimetype == 'application/json ' from .templating import ( print ( 'Error : ' , message % args , file=sys.stderr ) @ bp.app_template_filter ( 'super_reverse ' ) raise AssertionError ( self.static_folder , filename , cache_timeout=cache_timeout assert rv.data == b'index ' assert app.jinja_env.globals [ `` get_stuff '' ] == get_stuff app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) rv = client.get ( '/ ' , 'http : //www.localhost.localdomain:3000/ ' ) } , color=ctx.color ) get_version , load_dotenv , locate_app , prepare_import , run_command , 'INSERT INTO post ( title , body , author_id ) ' assert ' . ' not in endpoint , `` Blueprint endpoints should not contain dots '' } assert `` no file contents were transmitted '' in str ( e.value ) return 'backend says no ' , 403 `` one . `` .format ( module=module.__name__ ) client.get ( `` /test_filters_without_returning_categories/ '' ) flask.g.something = `` value '' 'Use `` FLASK_APP= { module } : name to specify one . '.format ( encoding = kwargs.pop ( `` encoding '' , None ) testapp = Flask ( 'testapp ' ) self.logger.exception ( purge_module ( `` installed_package '' ) attachment_filename= '' index.txt '' , app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = expected_max_age 'could not call it without arguments . Use ' assert eb.path == `` / '' ( '/a ' , ' .. /b/c ' ) , ' '' open_session '' is deprecated and will be removed in 1.1 . Use ' session [ 'user_id ' ] = user [ 'id ' ] server_name=self.config [ `` SERVER_NAME '' ] , SERVER_NAME='www.example.com:8080 ' , resp = client.get ( `` / '' ) `` PERMANENT_SESSION_LIFETIME '' , get_converter=_make_timedelta @ app.route ( '/ ' , subdomain='foo ' ) AssertionError , `` b '' : 23 , `` This was submitted : % s '' % `` , `` .join ( ' '' % s '' ' % x for x in form_matches ) assert 'domain=.example.com ' in cookie _endpoint_from_view_func , assert value == u '' föö '' assert 'domain=127.0.0.1 ' in rv.headers [ 'set-cookie ' ] .lower ( ) app.add_url_rule ( `` / '' , view_func=Index.as_view ( `` index '' ) ) if hasattr ( loader , 'get_filename ' ) : 'utf-16-le ' , 'utf-16-be ' , 'utf-16 ' , info.data [ 'test ' ] = 'spam ' rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , 'If-Range ' : http_date ( return `` Hello World '' app.view_functions [ 'bar ' ] = bar server_name = self.config.get ( 'SERVER_NAME ' ) return flask.send_file ( `` static/index.html '' , conditional=True ) assert rv == `` Hello Special World 42 '' rv = client.get ( `` / '' , headers= { `` Range '' : `` somethingsomething '' } ) calls.append ( 'before-signal ' ) return send_from_directory ( rv = flask.send_from_directory ( `` static '' , `` hello.txt '' ) ( 'cliapp.message.txt ' , None ) , help= '' Enable or disable the reloader . By default the reloader `` '\n\n { tb } '.format ( name=module_name , tb=traceback.format_exc ( ) ) app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] = 3600 rv.filters [ 'tojson ' ] = json.tojson_filter sep = b ' ? ' if isinstance ( url.query , bytes ) else ' ? ' client.post ( `` /create '' , data= { `` title '' : `` created '' , `` body '' : `` '' } ) defaults [ `` DEBUG '' ] = get_debug_flag ( ) `` loads '' , assert `` foo option 2 '' == foo_options [ `` option_2 '' ] anchor = values.pop ( `` _anchor '' , None ) assert b'Success ! ' in rv.data rv = current_app.response_class ( client.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) rv = client.get ( '/text_headers ' ) rv [ `` request '' ] = reqctx.request lines = [ x.strip ( ) for x in rv.data.strip ( ) .decode ( 'utf-8 ' ) .splitlines ( ) ] TemplateNotFound rv = client.options ( `` /more '' ) `` before the application starts serving requests . '' key = ' di ' result = invoke_no_routes ( [ 'routes ' ] ) app.add_url_rule ( `` /more '' , `` more '' , more , methods= [ `` GET '' , `` POST '' ] ) attachment_filename = attachment_filename.decode ( `` utf-8 '' ) return request.environ [ `` wsgi.errors '' ] if request else sys.stderr assert `` user_id '' not in session assert c.get ( `` /bp/undefined '' ) .data == b '' bp-default '' assert os.environ [ 'FOO ' ] == 'env ' assert c.get ( `` /forbidden-unregistered '' ) .data == b '' forbidden '' _get_static_url_path , expect ( '/vary-cookie-header-set ' ) expose_value=False , self.record_once ( lambda s : s.app.after_request_funcs message = `` Python % ( python ) s\n '' `` Flask % ( flask ) s\n '' `` Werkzeug % ( werkzeug ) s '' for name in ( '.env ' , '.flaskenv ' ) : or app.config [ 'APPLICATION_ROOT ' ] last_modified = datetime.datetime.utcfromtimestamp ( os.path.getmtime ( environ_overrides = kwargs.setdefault ( `` environ_overrides '' , { } ) ( 'cliapp.factory ' , 'create_app ' , 'app ' ) , assert b '' Title is required . '' in response.data path=app_root.lstrip ( '/ ' ) help='Show the flask version ' , return `` apple '' '/auth/login ' , self.expect_order ( [ `` aaa_post '' , `` static '' , `` yyy_get_post '' ] , result.output ) assert rv.mimetype == `` text/html '' headers = ( `` Endpoint '' , `` Methods '' , `` Rule '' ) `` arguments . `` .format ( factory=attr_name , module=module.__name__ ) ' '' -- cert '' must also be specified . ' , ' i ' : { 'test ' : 'dict ' } } subdomain=None , ) : name= '' Flask '' , os.path.join ( app.root_path , 'static/index.html ' ) ) ) .replace ( @ bp.route ( '/about ' ) result = runner.invoke ( cli , [ 'test ' ] ) if b '' \x00 '' not in head : self.config [ `` TEMPLATES_AUTO_RELOAD '' ] = value assert 'OPTIONS ' in rv.allow assert rv.headers [ `` x-sendfile '' ] == os.path.join ( else current_app.json_decoder ' response . The return type must be a string , tuple , ' for ep in pkg_resources.iter_entry_points ( `` flask.commands '' ) : values.setdefault ( `` lang_code '' , flask.g.lang_code ) `` Silently ignoring app.run ( ) because the `` assert `` A setup function was called '' in str ( e ) if os.path.basename ( path ) == `` __init__ '' : rv [ 'result ' ] = 'running on % s : % s ... ' % ( hostname , port ) return flask.render_template ( 'template_filter.html ' , value='abcd ' ) client.get ( '/ ' , errors_stream=stream ) buf.append ( ' The URL was defined with a trailing slash so ' data , mimetype=mimetype , headers=headers , direct_passthrough=True rule , elif site_folder.lower ( ) == `` site-packages '' : monkeypatch , debug , use_debugger , use_reloader , propagate_exceptions , app ] 'License : : OSI Approved : : BSD License ' , self.template_context_processors = { assert client.get ( '/de/about ' ) .data == b'/de/ ' % ( blueprint , self.blueprints [ blueprint.name ] , blueprint.name ) headers = ( 'Endpoint ' , 'Methods ' , 'Rule ' ) rv = flask.make_response ( flask.jsonify ( msg ) , 200 ) evts.append ( `` index '' ) return `` Awesome '' test_data = { 'name ' : 'Flask ' } return 'utf-16-le ' kwargs.setdefault ( `` auto_envvar_prefix '' , `` FLASK '' ) @ app.route ( '/foo ' ) app.register_blueprint ( bp , url_prefix= '' /bp '' ) 'PERMANENT_SESSION_LIFETIME ' : timedelta ( days=31 ) , assert client.get ( `` /foo/ '' ) .data == b '' index '' return render_template ( 'auth/login.html ' ) rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , `` INSERT INTO post ( title , body , author_id ) '' `` VALUES ( ? , ? , ? ) '' , options.setdefault ( `` subdomain '' , self.subdomain ) ( 'False ' , False , False ) , rv = client.get ( `` / '' , subdomain= '' xxx '' ) raise RuntimeError ( 'Session backend did not open a session . ' os.path.join ( test_path , `` cliapp '' , `` inner1 '' , `` inner2 '' ) , external = values.pop ( '_external ' , True ) assert 'behavior undefined ' in str ( e.value ) db.execute ( `` SELECT id FROM user WHERE username = ? `` , ( username , ) ) .fetchone ( ) signer_kwargs=signer_kwargs ) rv = blueprint.send_static_file ( `` index.html '' ) 400 , assert 'path=/ ' in cookie values [ '_external ' ] = external lambda s : s.app._register_error_handler ( self.name , code_or_exception , f ) ( `` test '' , cwd , `` test '' ) , rv = client.open ( '/ ' ) app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = True rv.set_etag ( ' % s- % s- % s ' % ( ( `` /a '' , `` b/ .. / .. /c '' ) , default='endpoint ' , assert app.jinja_env.filters [ `` my_reverse '' ] ( `` abcd '' ) == `` dcba '' TagUUID , BuildError , app.handle_url_build_error , error , 'spam ' , { } ) assert rv.data.strip ( ) == b ' < h1 > Hello World ! < /h1 > ' assert ( [ 'aaa_post ' , 'static ' , 'yyy_get_post ' ] , _request_ctx_stack , resp = client.get ( `` / '' ) .data '/create ' , @ pytest.mark.parametrize ( 'tz ' , ( ( 'UTC ' , 0 ) , ( 'PST ' , -8 ) , ( 'KST ' , 9 ) ) ) assert `` samesite '' in cookie rv = flask.send_file ( 'static/index.html ' , as_attachment=True ) assert client.get ( `` /bar/ '' ) .data == b '' bar '' app.config [ `` FOO_OPTION_2 '' ] = `` foo option 2 '' egg_setup.write ( textwrap.dedent ( `` '' '' assert rv.data == b '' dcba '' rv = client.open ( `` / '' ) rv = client.get ( '/ ' ) .data.strip ( ) ( '/a ' , ' b ' , '/c ' ) , return flask.request.args [ 'foo ' ] ( `` cliapp.app '' , `` notanapp '' ) , 3.14 , endpoint_output = invoke ( [ 'routes ' , '-s ' , 'endpoint ' ] ) .output assert 'httponly ' not in cookie if folder.lower ( ) == 'lib ' : mimetype='text/plain ' ) f.read ( ) , return `` / '' + os.path.basename ( self.static_folder ) assert templates == [ `` admin/index.html '' , `` frontend/index.html '' ] json_data = { 'drink ' : { 'gin ' : 1 , 'tonic ' : True } , 'price ' : 10 } `` BAR_ '' , lowercase=False , trim_namespace=False rv = c.get ( 'http : //example.com/static/index.html ' ) rv [ 'session ' ] = reqctx.session ( u'Vögel.txt ' , 'Vogel.txt ' , ' V % C3 % B6gel.txt ' ) , `` utf-32-le '' , file = io.BytesIO ( b '' somethingsomething '' ) assert options [ 'filename ' ] == 'index.html ' ( `` cliapp.message.txt '' , None ) , assert b'test\nbody ' in response.data make_git_commit ( `` Bump version number to % s '' , version ) app.register_blueprint ( bp , url_prefix= '' /1 '' , url_defaults= { `` bar '' : 23 } ) rv = flask.send_file ( f , mimetype='text/html ' ) ) ) , exc_info=exc_info ) from werkzeug.routing import BuildError , Map , RequestRedirect , RoutingException , Rule rv = flask.url_for ( 'index ' ) if PY2 and os.name == `` nt '' : return send_from_directory ( self.static_folder , filename , if __name__ == '__main__ ' : rv = client.get ( u'/киртест ' ) 'If-Range ' : http_date ( last_modified ) } ) key = `` f '' @ app.route ( '/1 ' ) ( `` error '' , u '' Hello World '' ) , assert flask.url_for ( 'index ' , _anchor= ' x y ' ) == '/ # x % 20y ' db.executescript ( f.read ( ) .decode ( `` utf8 '' ) ) InternalServerError , MethodNotAllowed , default_exceptions @ app.route ( u'/киртест ' ) view_func=None , has_receivers_for rv = app.test_client ( ) .get ( `` / '' ) rv = client.get ( `` / '' , `` http : //www.example.com:8080/test/ '' ) ' '' { module } : { app_name } '' . '.format ( module=module.__name__ , app_name=app_name ) with_appcontext if hasattr ( sys , `` exc_clear '' ) : Popen ( [ `` git '' , `` commit '' , `` -am '' , message ] ) .wait ( ) assert client.get ( `` / '' ) .data == b '' 1 '' ( ' % s.is_package ( ) method is missing but is required by Flask of ' doc='The URL prefix that the static route will be registered for . ' return DictLoader ( { 'index.html ' : 'Hello Custom World ! ' } ) for url in `` /args_unpack '' , `` /array '' : `` The blueprint was already registered once `` yield `` Hello `` assert flask.url_for ( 'myview ' , _method='GET ' ) == '/myview/ ' rv = client.get ( '/text_status ' ) assert app.name == 'hello ' as_tuple = kwargs.pop ( 'as_tuple ' , False ) assert `` Unable to infer MIME-type '' in str ( excinfo ) render_template , description= ' A simple framework for building complex web applications . ' , assert rv.data == b '' Blub '' @ pytest.mark.parametrize ( 'env , ref_env , debug ' , [ return `` GET '' % loader.__class__.__name__ assert `` data '' not in kwargs , `` Client can not provide both 'json ' and 'data ' . '' rv = client.get ( '/ ? foo=bar ' ) assert client.get ( '/2/bar ' ) .data == b'19 ' 'Operating System : : OS Independent ' , for item in ( 'FOO ' , 'BAR ' , 'EGGS ' ) : return u'Hällo Wörld'.encode ( 'utf-8 ' ) app = flask.Flask ( __name__ , host_matching=True , static_host='example.com ' ) `` { e } \nThe view function did not return a valid '' `` `` '' .format ( purge_module ( 'site_package ' ) detect_types=sqlite3.PARSE_DECLTYPES evts.append ( 'first ' ) assert b'42 ' not in app_page_bytes assert rv.headers [ `` X-Method '' ] == `` HEAD '' return Flask ( `` _ '' .join ( [ `` app2 '' , foo , bar ] ) ) @ bp.route ( '/bar ' , endpoint='bar.bar ' ) os.path.join ( test_path , `` cliapp '' , `` message.txt '' ) , TagMarkup , cls.__str__ = lambda x : x.__unicode__ ( ) .encode ( 'utf-8 ' ) { ' di ' : ' di ' } , assert called == [ `` request '' , `` app '' ] assert client.get ( `` /be '' ) .data.strip ( ) == b '' /fe '' content_type='application/json ' ) : answer_page_bytes = client.get ( '/bp ' ) .data base_url = `` { scheme } : // { netloc } / { path } '' .format ( options.setdefault ( 'threaded ' , True ) } , self.config [ 'SERVER_NAME ' ] , return `` Test '' modules_tmpdir.join ( 'var ' ) .join ( 'installed_package-instance ' ) default = flask.Flask.default_config [ 'MAX_COOKIE_SIZE ' ] app.view_functions [ `` bar '' ] = bar if head [ 1 : :2 ] == b '' \x00\x00 '' : parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) ( ( ' a/b ' , ' X/ .. /c ' ) , ' a/b/c ' ) , or request.method in ( 'GET ' , 'HEAD ' , 'OPTIONS ' ) : return `` Foo '' ( `` /foo/ '' , `` bar '' , `` /foo/bar '' ) , @ app.route ( '/json ' , methods= [ 'POST ' ] ) conditional=False , `` JSON_SORT_KEYS '' : True , assert `` TestConfig '' not in app.config @ app.route ( '/echo ' , methods= [ 'POST ' ] ) kwargs [ 'obj ' ] = obj return `` Create '' if view_func and hasattr ( view_func , `` __name__ '' ) : from .globals import session , _request_ctx_stack , _app_ctx_stack , current_app , request defaults [ 'DEBUG ' ] = get_debug_flag ( ) attachment_filename='index.txt ' , install_egg ( `` site_egg '' ) def flash ( message , category='message ' ) : 400 , and self.mimetype ! = `` multipart/form-data '' @ app.route ( '/child-unregistered ' ) rv = client.get ( `` /getsession '' ) if trigger == 'before ' : template_folder='templates ' , error = 'Incorrect password . ' client.environ_base [ `` HTTP_USER_AGENT '' ] = `` Bar '' context , ctx.app ) pytest.raises ( BuildError , flask.url_for , `` not.existing '' ) `` encoding '' , run_command , assert rv.headers [ ' X-Method ' ] == 'HEAD ' obj = ScriptInfo ( app_import_path=cli_app_path + `` : testapp '' ) if 'methods ' not in d : add_default_commands=True , return flask.Response ( generate ( `` Hello `` ) ) return text_type ( flask.session [ `` foo '' ] ) root_path=None with open ( startup , ' r ' ) as f : self.name , code_or_exception , f ) ) for config_key in 'TESTING ' , 'PROPAGATE_EXCEPTIONS ' , 'DEBUG ' , None : assert client.get ( `` /2 '' ) .data == b '' apple '' 'context_template.html ' ] , assert `` Initialized '' in result.output extras_require= { `` test '' : [ `` pytest '' , `` coverage '' ] } , result = runner.invoke ( cli , [ `` -- help '' ] ) rv = flask.send_file ( f , mimetype= '' text/html '' ) anchor = values.pop ( '_anchor ' , None ) rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=- ' } ) return ' < flask.g of % r > ' % top.app.name def open_resource ( self , resource , mode= '' rb '' ) : add_etags=True , assert len ( rv.headers.get_all ( `` Vary '' ) ) == 1 assert rv.mimetype == `` text/plain '' rv = client.get ( `` / '' , `` http : //example.com:8080/foo '' ) srcobj.import_name ) root_path=root_path ) @ app.route ( '/ ' ) ( `` index.html '' , `` index.html '' , False ) , StringIO ( `` party like it 's '' ) , 'DATABASE ' : db_path , click.echo ( 'Hello , World ! ' ) answer_bp = flask.Blueprint ( 'answer_bp ' , __name__ ) return X ( obj [ '_foo ' ] ) if `` FLASK_ENV '' in os.environ : html=flask.Markup ( text ) ) bp = Blueprint ( `` blog '' , __name__ ) app.add_url_rule ( `` / '' , view_func=Index1.as_view ( `` index '' ) ) or ( base_url is not None ) ! = bool ( subdomain or url_scheme ) return flask.render_template ( `` simple_template.html '' , whiskey=42 ) secret_key = ConfigAttribute ( 'SECRET_KEY ' ) assert b '' forbidden '' == rv.data app.config [ `` WORLD_NAME '' ] = `` Special World '' `` TEMPLATES_AUTO_RELOAD '' : None , rv = client.get ( `` / '' , `` http : //foo.localhost.localdomain '' ) appcontext_pushed = _signals.signal ( 'appcontext-pushed ' ) filename.encode ( 'utf-8 ' ) if isinstance ( filename , text_type ) response = client.post ( `` /auth/register '' , data= { `` username '' : `` a '' , `` password '' : `` a '' } ) assert client.get ( '/page/2 ' ) .data == b ' 2 ' return 'forbidden ' , 403 return self._client.get ( '/auth/logout ' ) assert rv.data.split ( ) == [ b'42 ' , b'23 ' , b'False ' , b'aha ' ] assert flask.url_for ( 'index ' , _external=True ) == \ rv = client.get ( `` /full_tuple '' ) url_prefix = self.options.get ( 'url_prefix ' ) `` % s. % s '' % ( self.blueprint.name , endpoint ) , assert not recwarn.list , '\n'.join ( str ( w.message ) for w in recwarn.list ) if request.method == `` POST '' : app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = timedelta ( hours=2 ) if hasattr ( loader , 'is_package ' ) : click.echo ( 'Initialized the database . ' ) return 'Hello % s ! ' % flask.request.args [ 'name ' ] rv = client.get ( `` / '' , `` http : //127.0.0.1:3000/ '' ) app.inject_url_defaults ( 'foo.bar.baz.view ' , values ) os.path.getsize ( filename ) , monkeypatch ) : { ' t__ ' : b ' a ' } , assert list ( flask.get_flashed_messages ( ) ) == [ `` Zap '' , `` Zip '' ] assert app.name == 'testapp ' app.add_url_rule ( '/ ' , view_func=Index3.as_view ( 'index ' ) ) ( `` No '' , False , False ) , ( ( '/a/b/c ' , './ ' ) , '/a/b/c/ . ' ) , [ flask.session [ `` test '' ] = `` test '' request_finished = _signals.signal ( 'request-finished ' ) assert create_app ( { 'TESTING ' : True } ) .testing flask.session [ 'd ' ] = now if b'\x00 ' not in head : assert client.get ( `` /3 '' ) .data == b '' apple '' info.append ( `` Maybe you did not place a template in the right folder ? '' ) user_id = session.get ( 'user_id ' ) rv = c.get ( `` / '' ) static_folder=None , flask.session [ ' u ' ] = the_uuid message_flashed.send ( current_app._get_current_object ( ) , assert client.get ( `` /1/foo '' ) .data == b '' 23/42 '' uncompressed_msg = { lambda : bp.add_url_rule ( `` /bar/123 '' , endpoint= '' bar.123 '' , view_func=foo_foo_foo ) , rv = flask.send_file ( force_external=external ) response = client.get ( `` /hello '' ) @ app.route ( '/set ' ) return flask.url_for ( '.about ' ) myapp1 = Flask ( `` appname1 '' ) assert rv.data == b '' http : //localhost/ '' assert rv.data == b '' Hello '' return getattr ( current_app.jinja_env.get_template ( template_name ) .module , rv = flask.send_file ( f , mimetype='application/octet-stream ' ) { ' t ' : ( 1 , 2 , 3 ) } , rule = '/'.join ( ( self.template_context_processors = { None : [ _default_template_ctx_processor ] } assert rv.data.strip ( ) == b '' Hello Subdomain '' assert result.output == ' % s\n ' % str ( not set_debug_flag ) ( self.url_map.default_subdomain or None ) ( ( ' .. / ' , ' a/b/c ' ) , ' .. /a/b/c ' ) , db.execute ( `` SELECT 1 '' ) os.environ = { `` FOO_SETTINGS '' : __file__.rsplit ( `` . `` , 1 ) [ 0 ] + `` .py '' } info.append ( 'Warning : multiple loaders returned a match for the template . ' ) rv_x = flask.json.loads ( rv.data ) [ ' x ' ] assert 'TestConfig ' not in app.config `` Operating System : : OS Independent '' , for trigger in `` before '' , `` after '' : flask.session [ `` test '' ] = `` flask '' ' '' ) assert rv.data == b'Meh ' bp = flask.Blueprint ( `` test '' , __name__ , url_prefix=prefix ) `` provided . '' % import_name 'will not show up . ' ) ) AssertionError.__init__ ( self , `` .join ( buf ) .encode ( 'utf-8 ' ) ) attribute ) return 'Hello , World ! ' help='Specify a certificate file to use HTTPS . ' ) `` / '' , method= '' POST '' , data= '' malformed '' , content_type= '' application/json '' rv [ ' g ' ] = appctx.g assert 'missing_template.html ' in str ( excinfo.value ) rv = app.config [ 'SESSION_COOKIE_DOMAIN ' ] calls.append ( `` before-signal '' ) DATABASE=os.path.join ( app.instance_path , 'flaskr.sqlite ' ) , 'dev ' : [ return Flask ( `` app '' ) rv = client.delete ( `` /more '' ) app.config [ 'SERVER_NAME ' ] = 'localhost.localdomain ' maintainer='Pallets team ' , assert list ( messages ) == [ ( `` message '' , u '' Hello World '' ) ] for ep in pkg_resources.iter_entry_points ( 'flask.commands ' ) : @ app.route ( '/bump ' ) modules_tmpdir.mkdir ( `` site_egg '' ) .join ( `` __init__.py '' ) .write ( assert `` after '' not in evts def test_post_empty_json_adds_exception_to_response_content_in_debug ( self , app , client ) : startup = os.environ.get ( 'PYTHONSTARTUP ' ) current_app.config [ 'DATABASE ' ] , ' '' { module } : { app_name } '' . '.format ( assert value == 'attachment ' `` utf-16-be '' , return flask.send_file ( StringIO ( `` party like it 's '' ) , raise TypeError ( `` bad bad factory ! '' ) request.method ) return datetime.strptime ( string , `` % B % d % Y '' ) @ app.route ( '/ ' , methods= [ 'POST ' ] ) loader.__class__.__name__ ) expect ( '/vary-header-set ' , 'Accept-Encoding , Accept-Language , Cookie ' ) # __repr__ yield `` ! '' help= '' Enable or disable the debugger . By default the debugger `` password = request.form [ 'password ' ] rv = flask.session [ 'foo ' ] = flask.session.get ( 'foo ' , 0 ) + 1 filepath = getattr ( mod , '__file__ ' , None ) name='logging-plugin ' ) if path or os.path.isfile ( '.env ' ) or os.path.isfile ( '.flaskenv ' ) : with app.test_request_context ( '/ ' ) : return { key + '__ ' : self.serializer.tag ( value [ key ] ) } meths = parse_set_header ( c.open ( `` / '' , method= '' OPTIONS '' ) .headers [ `` Allow '' ] ) get_db ( ) description= '' Demonstrates making Ajax requests to Flask . `` , name = `` path '' app = flask.Flask ( __name__ , host_matching=True , static_host= '' example.com '' ) return `` bp-default '' @ click.command ( 'shell ' , short_help='Run a shell in the app context . ' ) meth = getattr ( self , 'get ' , None ) foo_options = app.config.get_namespace ( `` FOO_ '' ) blinker is None , reason= '' Signals require the blinker library . '' `` If-Range '' : http_date ( datetime.datetime ( 1999 , 1 , 1 ) ) , assert rv.data == b'http : //example.com:1234/foo/ ' assert 'data ' not in kwargs , ( options.setdefault ( 'conditional ' , True ) 'SELECT * FROM user WHERE username = ? ' , ( username , ) assert `` foo '' not in flask.g run_command.make_context ( add_version_option=True , load_dotenv=True , 'SESSION_COOKIE_SAMESITE ' : None , flask.session [ `` di_t_tag '' ] = { `` t__ '' : `` not-a-tuple '' } @ app.route ( '/set ' , methods= [ 'POST ' ] ) 'http : //localhost/hello/test % 20x ' return `` bp-error '' @ app.template_filter ( 'super_reverse ' ) monkeypatch.setattr ( `` flaskr.db.init_db '' , fake_init_db ) appcontext_pushed = _signals.signal ( `` appcontext-pushed '' ) `` pytest > =3 '' , error = `` Username is required . '' provide_automatic_options = getattr ( view_func , buf.append ( '\n\nNote : this exception is only raised in debug mode ' ) return app.config [ `` SESSION_COOKIE_SECURE '' ] app.config [ 'MAX_CONTENT_LENGTH ' ] = 64 url='http : //flask.pocoo.org/docs/tutorial/ ' , self.name , code_or_exception , f ) ) meths = parse_set_header ( c.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) if env == `` production '' : assert repr ( flask.g ) == `` < LocalProxy unbound > '' flask.session [ ' b ' ] = b'\xff ' assert len ( rv.headers.get_all ( 'Vary ' ) ) == 1 def test_installed_module_paths ( 'Werkzeug % ( werkzeug ) s ' return `` parent '' ( '/foo/ ' , '/bar ' , '/foo/bar ' ) , if self.app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] : rv = app.test_client ( ) .get ( '/foo/index.html ' ) headers [ 'Content-Length ' ] = fsize app.register_blueprint ( bp , url_prefix='/py ' ) assert ctx.params [ `` cert '' ] == ( __file__ , __file__ ) app.config [ `` SESSION_REFRESH_EACH_REQUEST '' ] = True assert isinstance ( s.tags [ ' d ' ] , TagDict ) assert app.jinja_env.filters [ `` strrev '' ] ( `` abcd '' ) == `` dcba '' assert result.output == `` flaskgroup\n '' app.config [ 'SESSION_COOKIE_DOMAIN ' ] = False extensions= [ `` jinja2.ext.autoescape '' , `` jinja2.ext.with_ '' ] cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) salt=self.salt , assert client.get ( '/1/bar ' ) .data == b'23 ' app.route ( '/ ' ) ( index ) rv = client.get ( '/ ' , subdomain='xxx ' ) message_flashed = _signals.signal ( 'message-flashed ' ) assert rv.headers [ ' X-Method ' ] == 'GET ' return render_template ( `` auth/login.html '' ) ( 'error ' , u'Hello World ' ) , http_host = app.config.get ( 'SERVER_NAME ' ) or 'localhost ' assert sorted ( View.methods ) == [ `` GET '' ] assert 'Use a subclass ' in exc_info.value.args [ 0 ] assert 'FOO ' not in os.environ # no script_info ( `` message '' , u '' Hello World '' ) , if 'autoescape ' not in options : request_started = _signals.signal ( 'request-started ' ) raise TypeError ( 'filename unavailable , required for ' elif os.path.basename ( parent ) .lower ( ) == 'lib ' : if hasattr ( sys , `` pypy_version_info '' ) : request_close = getattr ( self.request , 'close ' , None ) expect ( '/setdefault ' ) if flask.g.lang_code is not None and \ run_command.make_context ( 'run ' , [ ' -- key ' , __file__ ] ) assert rv.headers [ `` X-Method '' ] == `` GET '' 'cls ' , assert value == `` attachment '' rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=1000- ' } ) ( `` '' , `` /bar '' , `` /bar '' ) , assert s.loads ( s.dumps ( Foo ( 'bar ' ) ) ) .data == 'bar ' rv = `` . '' + rv 'issued automatically by the routing system to `` % s '' . ' exec ( compile ( config_file.read ( ) , filename , 'exec ' ) , d.__dict__ ) assert b '' Internal Server Error '' in resp.data assert rv.data == b'Hello Custom World ! ' filename.encode ( `` utf-8 '' ) assert b '' 42 '' in answer_page_bytes recorded.append ( ( 'tear_down ' , kwargs ) ) ( `` 0 '' , False , False ) , `` env , ref_env , debug '' , ( `` /a '' , `` b/ .. /b/ .. / .. /c '' ) , ( `` cliapp.factory '' , `` create_app ( `` ) , `` not installed . '' @ app.route ( '/test_with_categories/ ' ) client.get ( `` / '' ) result = invoke ( [ 'routes ' ] ) return 'ignored anyway ' file = open ( filename , `` rb '' ) return 'Foo SubDomain ' assert rv.data == b'Blub ' app.add_url_rule ( '/ < test > / ' , 'index ' , self.index ) buf = [ assert flask.g.pop ( `` bar '' , `` more cake '' ) == `` more cake '' app.config.update ( SESSION_COOKIE_SAMESITE='Lax ' ) help= '' Enable or disable multithreading . `` , follow_redirects=follow_redirects db = g.pop ( 'db ' , None ) assert not app.config.from_pyfile ( 'missing.cfg ' , silent=True ) `` utf-8-sig '' , rv = app.config [ `` SERVER_NAME '' ] assert client.get ( '/function ' ) .data == b'bam ' app = flask.Flask ( __name__ , static_url_path='/foo ' ) return 'utf-8 ' flask.jsonify ( compressed_msg ) , 200 ) `` [ Errno 2 ] Unable to load configuration `` uuid4 ( ) , 'flask ' : __version__ , rv = client.get ( `` / '' ) .data.strip ( ) if not os.path.exists ( os.path.join ( path , '__init__.py ' ) ) : bp.add_app_template_filter ( my_reverse , `` super_reverse '' ) app.add_url_rule ( `` /myview/ '' , methods= [ `` GET '' ] , view_func=myview ) datetime.datetime ( 1999 , 1 , 1 ) ) } ) return `` < % s % r > '' % ( self.__class__.__name__ , self.name ) method = values.pop ( `` _method '' , None ) return Popen ( [ 'git ' , 'diff ' , ' -- quiet ' ] ) .wait ( ) == 0 assert flask.url_for ( 'hello ' , name='test x ' , _external=True ) == \ make_git_commit ( 'Bump version number to % s ' , version ) assert response.data == b '' stuff '' ) .replace ( microsecond=0 ) ( ' a ' , 'test ' , b'Incorrect username . ' ) , rv [ 'result ' ] = 'running ... ' assert client.get ( '/foo ' ) .data == b'/en/about ' raise_if_not_found=False ) view_func , `` provide_automatic_options '' , None TEST_KEY = 'foo ' secret_key = `` test key '' ( title , body , g.user [ 'id ' ] ) @ bp.route ( '/ < int : id > /delete ' , methods= ( 'POST ' , ) ) # not a Python file , will be caught during import assert `` bar stuff 2 '' == bar_options [ `` STUFF_2 '' ] @ app.route ( '/ < list : args > ' ) flask.jsonify ( msg ) , 200 ) assert sorted ( rv.allow ) == [ `` GET '' , `` HEAD '' , `` OPTIONS '' , `` POST '' , `` PUT '' ] `` without one . '' flask.session [ `` test '' ] = 42 app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = 3600 return 'utf-16-be ' obj = kwargs.get ( 'obj ' ) cli = FlaskGroup ( assert `` samesite '' not in cookie rv = client.get ( `` / '' ) .data def index ( test= '' a '' ) : assert not app.config.from_json ( 'missing.json ' , silent=True ) 'because the blinker library is ' ) , `` `` '' AssertionError.__init__ ( self , `` '' .join ( buf ) .encode ( `` utf-8 '' ) ) app.logger.error ( 'test ' ) raise RuntimeError ( 'The session is unavailable because no secret ' data=flask.json.dumps ( { `` a '' : 1 , `` b '' : 2 } ) , appcontext_popped = _signals.signal ( 'appcontext-popped ' ) assert `` http : //localhost/auth/login '' == response.headers [ `` Location '' ] elif 'FLASK_DEBUG ' in os.environ : with app.test_request_context ( `` / '' , method= '' POST '' , json= { `` foo '' : `` bar '' } ) : `` This decorator can only be used at local scopes `` return repr ( flask.session.get ( 'foo ' ) ) request_close = getattr ( self.request , `` close '' , None ) ' VALUES ( ? , ? , ? ) ' , return flask.session.setdefault ( `` test '' , `` default '' ) kwargs.setdefault ( `` environ_overrides '' , { } ) [ app.config.update ( SERVER_NAME= '' localhost:5000 '' ) 'flask = flask.cli : main ' , app.config [ `` FOO_OPTION_1 '' ] = `` foo option 1 '' '/bar/123 ' , view_func=foo_foo_foo if hasattr ( sys , 'exc_clear ' ) : assert 'samesite=strict ' in cookie fail ( 'Current version is not numeric ' ) 'TRAP_BAD_REQUEST_ERRORS ' : None , if hasattr ( loader , 'get_filename ' ) : evts.append ( `` first '' ) client.environ_base [ `` REMOTE_ADDR '' ] = `` 0.0.0.1 '' rv = client.get ( '/ ' , headers= { 'Range ' : 'somethingsomething ' } ) assert client.get ( `` /fe2 '' ) .data.strip ( ) == b '' /fe '' ( 'test ' , ' a ' , b'Incorrect password . ' ) , assert rv.data == b '' E2 '' else filename def test_egg_installed_paths ( install_egg , modules_tmpdir , flags=re.IGNORECASE , app = flask.Flask ( __name__ , static_url_path= '' /foo '' ) if __name__ == `` __main__ '' : @ click.option ( ' -- cert ' , type=CertParamType ( ) , @ app.route ( '/hello ' ) ( 2 , 3 , 5 ) , request.method @ app.route ( '/fail ' ) yield ' - % s ' % item `` If an instance path is provided it must be absolute . '' endpoint= '' static '' , @ app.route ( '/foo ' ) options.setdefault ( 'use_reloader ' , self.debug ) rule , rv = client.post ( '/add ' , data=flask.json.dumps ( { ' a ' : 1 , ' b ' : 2 } ) , assert flask.session.get ( 'data ' ) == 'foo ' trap_bad_request is None and self.debug @ app.route ( '/vary-header-set ' ) app.add_template_filter ( my_reverse , 'strrev ' ) `` in the application where a module was not imported `` app.config [ `` MAX_COOKIE_SIZE '' ] = 0 assert client.get ( '/1 ' ) .data == b'banana ' client.get ( `` /key '' ) return get_env ( ) == 'development ' assert rv == `` 42 '' `` TRAP_BAD_REQUEST_ERRORS '' : None , ' `` session_interface.save_session '' instead . ' rv = client.get ( `` /E3 '' ) ' } ' , TEST_KEY = `` foo '' get_converter=_make_timedelta ) options [ 'loader ' ] = app.create_global_jinja_loader ( ) app.config [ 'FOO_OPTION_2 ' ] = 'foo option 2 ' assert b'Title is required . ' in response.data testing = ConfigAttribute ( 'TESTING ' ) url='https : //www.palletsprojects.com/p/flask/ ' , assert flask.session.get ( 'missing_key ' ) is None content_type='application/json ' ) : post = db.execute ( `` SELECT * FROM post WHERE id = 1 '' ) .fetchone ( ) assert client.get ( '/fe2 ' ) .data.strip ( ) == b'/fe ' SERVER_NAME='example.com:8080 ' value , options = \ monkeypatch.setenv ( 'FLASK_ENV ' , env ) bar_options = app.config.get_namespace ( 'BAR_ ' , lowercase=False , trim_namespace=False ) flask.Response ( `` , headers= { 'Content-Type ' : 'text/html ' } ) , return redirect ( url_for ( `` index '' ) ) `` application is run from the flask command line `` assert rv == '42 ' assert ctx.params [ 'cert ' ] == ( __file__ , __file__ ) assert client.post ( '/ ' ) .status_code == 405 def test_werkzeug_passthrough_errors ( monkeypatch , debug , use_debugger , app.config.from_json ( `` missing.json '' ) if next ( lineiter ) .count ( '- ' ) ! = len ( match.group ( 0 ) ) : assert rv.data == b '' success '' client.environ_base [ 'REMOTE_ADDR ' ] = '127.0.0.2 ' cli = FlaskGroup ( help= '' '' '' \ assert `` set-cookie '' in rv.headers ( `` a '' , `` '' , b '' Password is required . `` ) , def flash ( message , category= '' message '' ) : `` SESSION_COOKIE_NAME '' : `` session '' , return `` request '' flask.session [ `` value '' ] = flask.request.form [ `` value '' ] ctx = app.test_request_context ( '/ ' , subdomain='xxx ' ) assert s [ `` t '' ] == ( 1 , 2 , 3 ) rv = flask.send_file ( f , mimetype='text/plain ' ) click.secho ( ' Use a production WSGI server instead . ' , dim=True ) request_finished , assert 'my_reverse ' in app.jinja_env.filters.keys ( ) ) , rv = client.post ( `` /json '' , data= '' malformed '' , content_type= '' application/json '' ) .replace ( u ' > ' , u'\\u003e ' ) \ rv = c.open ( `` / '' , method= '' OPTIONS '' ) return `` __main__ '' db.execute ( 'UPDATE post SET author_id = 2 WHERE id = 1 ' ) raise BadRequest ( 'Failed to decode JSON object : { 0 } '.format ( e ) ) if name in ( 'archive ' , 'get_filename ' ) : blinker is None , builder = make_test_environ_builder ( app , path='/index ' , method='GET ' ) 'Could not parse the arguments in ' with open ( os.path.join ( app.root_path , 'static/index.html ' ) ) as f : module=module.__name__ name = `` python -m `` + this_module assert app.config [ 'JSON_SORT_KEYS ' ] == True if `` OPTIONS '' not in methods : @ click.option ( ' -- debugger/ -- no-debugger ' , default=None , not callable ( getattr ( Range , 'to_content_range_header ' , None ) ) , cache_timeout=cache_timeout ) or not isinstance ( request.routing_exception , RequestRedirect ) \ ( '/foo// ' , '/bar ' , '/foo/bar ' ) , kwargs.setdefault ( `` ensure_ascii '' , False ) assert flask.request.args [ `` foo '' ] == `` bar '' return flask.redirect ( `` /other '' ) app2 = Flask ( `` app2 '' ) with app.test_request_context ( `` /somepage '' ) : rv = client.get ( '/ ' , 'http : //test.localhost.localdomain/ ' ) `` import flask\n '' `` app = flask.Flask ( __name__ ) \n '' with open ( os.path.join ( app.root_path , `` static/index.html '' ) ) as f : ' A name collision occurred between blueprints % r and % r . Both ' @ pytest.mark.parametrize ( 'test_value ' , [ 0 , -1 , 1 , 23 , 3.14 , 's ' , `` longer string '' , True , False , None ] ) self , fail ( 'You need to install the wheel package . ' ) calls.append ( 'before-handler ' ) assert rv.data == b '' < h1 > 43 < /h1 > '' 'is not provided . ' from .ctx import ( assert client.get ( '/bar/123 ' ) .data == b'123 ' `` before-handler '' , pytest.raises ( BuildError , flask.url_for , 'not.existing ' ) app.config.from_mapping ( assert 'samesite=lax ' in cookie # Native string not marked as Unicode on Python 2 SECRET_KEY='dev ' , assert sess [ 'foo ' ] == [ 42 ] return `` Meh '' raise ValueError ( `` When specifying _scheme , _external must be True '' ) .execute ( ' ( body , status ) , or ( body , headers ) . ' assert rv == `` 42 '' defaults [ `` ENV '' ] = get_env ( ) `` routes when dispatching a request . '' match = re.search ( r ' ( ? i ) \bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) ( `` development '' , `` development '' , True ) , return render_template ( `` blog/create.html '' ) assert client.get ( `` /foo '' ) .data == b '' /en/about '' rv = blueprint.send_static_file ( 'index.html ' ) kwargs.setdefault ( 'auto_envvar_prefix ' , 'FLASK ' ) rv = flask.send_file ( `` static/index.html '' ) assert app.config [ 'TEST_KEY ' ] == 'foo ' rv = client.open ( `` /more '' , method= '' OPTIONS '' ) rv = client.get ( `` / '' , headers= { `` Range '' : `` bytes=- '' } ) app.config [ 'SERVER_NAME ' ] = 'example.com:1234 ' app = modules_tmpdir.mkdir ( 'config_package_app ' ) flask.jsonify ( { 'msg ' : 'W00t ' } ) , 400 ) installed_path = modules_tmpdir.mkdir ( 'path ' ) ( id , ) rv.headers.pop ( ' x-sendfile ' , None ) name monkeypatch.setattr ( egg_path , = modules_tmpdir.join ( `` dist/ '' ) .listdir ( ) assert b'43 ' in answer_page_bytes self.record_once ( return flask.send_file ( 'static/index.html ' , conditional=True ) assert client.get ( '/2/foo ' ) .data == b'19/42 ' if ' . ' in endpoint : assert flask.g.get ( ' x ' ) is None return flask.session [ 'test ' ] assert list ( flask.get_flashed_messages ( ) ) == [ 'Zap ' , 'Zip ' ] assert rv.data == b ' a ' assert flask.session.get ( `` data '' ) == `` foo '' app.config [ 'DEBUG ' ] = True run_command.make_context ( `` run '' , [ `` -- cert '' , `` adhoc '' , `` -- key '' , __file__ ] ) assert client.post ( '/1/delete ' ) .status_code == 403 @ frontend.route ( '/fe2 ' ) app.add_url_rule ( `` / '' , view_func=index , provide_automatic_options=False ) return 'List ' rv = app.test_client ( ) .open ( '/ ' , method='OPTIONS ' ) external = values.pop ( `` _external '' , False ) rv is self ( `` cliapp.factory '' , 'create_app2 ( `` foo '' , `` bar '' , ) ' , `` app2_foo_bar '' ) , stacklevel=2 , rv = client.get ( '/foo ' , data= { } , follow_redirects=True ) bp.json_encoder if bp and bp.json_encoder else current_app.json_encoder , return val.lower ( ) in ( `` 0 '' , `` false '' , `` no '' ) if hasattr ( client , 'options ' ) : message_flashed.send ( monkeypatch.setitem ( sys.modules , 'OpenSSL ' , types.ModuleType ( 'OpenSSL ' ) ) self.app , ( `` /foo// '' , `` /bar '' , `` /foo/bar '' ) , app = installed_path.mkdir ( 'installed_package ' ) assert client.post ( '/more ' ) .data == b'POST ' return os.path.join ( prefix , 'var ' , self.name + '-instance ' ) `` X-Bar '' : `` Foo '' assert options [ 'filename ' ] == 'index.txt ' return '|'.join ( args ) app.add_url_rule ( '/options ' , 'options ' , options , methods= [ 'options ' ] ) assert s [ `` t_tag '' ] == { `` t '' : `` not-a-tuple '' } `` non_escaping_template.txt '' , text=text , html=flask.Markup ( text ) self [ `` _permanent '' ] = bool ( value ) ' function either returned None or ended without a return ' app.config.update ( SERVER_NAME= '' localhost.localdomain '' ) rv = client.get ( `` / '' , `` http : //example.com:8080/ '' ) attachment_filename='index.html ' ) app , path= '' / '' , base_url=None , subdomain=None , url_scheme=None , * args , * * kwargs assert rv.data == b ' < p > 23|42 ' rv.request.environ [ 'werkzeug.request ' ] = None lambda s : s.app.template_context_processors.setdefault ( assert rv.data == b'not found ' app.config [ `` PROPAGATE_EXCEPTIONS '' ] = propagate_exceptions return `` default '' rv [ `` session '' ] = reqctx.session result = runner.invoke ( cli , [ `` test '' ] , obj=obj ) assert flask.url_for ( 'spam ' ) == '/test_handler/ ' assert app.name == `` testapp '' rv = flask.make_response ( flask.jsonify ( uncompressed_msg ) , 200 ) 'htmlsafe_dumps ' , 'JSONDecoder ' , 'JSONEncoder ' , rv = client.get ( '/response_headers ' ) assert flask.session.get ( `` fizz '' ) == `` buzz '' app.add_url_rule ( '/ ' , view_func=View.as_view ( 'index ' ) ) `` [ Errno 2 ] Unable to load configuration `` `` file ( No such file or directory ) : '' `` DEBUG '' : None , warn ( assert client.get ( '/ ' ) .data == b'None ' assert b'by test on 2018-01-01 ' in response.data app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = max_age_default assert app.jinja_env.globals [ 'get_answer ' ] ( ) == 42 [ `` yyy_get_post '' , `` static '' , `` aaa_post '' ] , samesite=samesite , _host = '127.0.0.1 ' assert result.output == 'testappgroup\n ' bp.json_decoder if bp and bp.json_decoder else current_app.json_decoder , 'coverage ' , ) pytest.raises ( TypeError , c.get , `` /large_tuple '' ) ( `` cliapp.app '' , `` testapp '' , `` testapp '' ) , `` be called with the specified arguments . `` .format ( assert c.get ( '/bp/error ' ) .data == b'bp-error ' @ pytest.mark.parametrize ( 'host , port , expect_host , expect_port ' , ( resp = client.get ( '/ ' ) rv = c.get ( `` / '' ) return flask.url_for ( `` about '' , lang_code= '' en '' ) rv += ' # ' + url_quote ( anchor ) BadRequest , find_package , @ pytest.mark.skipif ( greenlet is None , reason='greenlet not installed ' ) ( 'No ' , False , False ) , monkeypatch.setenv ( `` FLASK_DEBUG '' , debug ) rv = flask.send_file ( `` static/index.html '' , as_attachment=True ) `` /more '' , factory=attr_name , module=module.__name__ 'loaded . Set this variable and make it ' response = client.post ( path , data= { 'title ' : `` , 'body ' : `` } ) assert client.get ( '/foo/bar ' ) .data == b'bar ' yield 'class : % s. % s ' % ( type ( loader ) .__module__ , type ( loader ) .__name__ ) 'if __name__ == `` __main__ '' guard to silence this ' logging_plugin = pytestconfig.pluginmanager.unregister ( name= '' logging-plugin '' ) from .helpers import url_for , flash , send_file , send_from_directory , \ ' A relative path was given instead . ' app.root_path , `` static/index.html '' with app.test_request_context ( `` / '' , environ_overrides= { `` SERVER_NAME '' : `` localhost '' } ) : flask.session [ `` fizz '' ] = `` buzz '' '/2/update ' , assert os.environ [ `` EGGS '' ] == `` 3 '' assert `` httponly '' in rv.headers [ `` set-cookie '' ] .lower ( ) salt = `` cookie-session '' return { `` answer '' : 42 } expect_exception ( flask.session.pop , 'foo ' ) not kwargs assert client.get ( '/ ' ) .data == b'42 ' return dumps ( self.tag ( value ) , separators= ( ' , ' , ' : ' ) ) @ app.route ( '/large_tuple ' ) assert 'cookies ' in str ( e.value ) app = Flask ( `` flask_test '' , root_path=os.path.dirname ( __file__ ) ) @ pytest.mark.parametrize ( 'use_debugger ' , [ True , False ] ) return `` bar '' ' A valid Flask application was not obtained from ' cli_app_path = os.path.abspath ( @ pytest.mark.parametrize ( ( ' a ' , ' b ' , 'result ' ) , ( subdomain = ( meths = parse_set_header ( client.open ( `` / '' , method= '' OPTIONS '' ) .headers [ `` Allow '' ] ) hooks : @ bp.route ( '/login ' , methods= ( 'GET ' , 'POST ' ) ) if value == 'adhoc ' : exec ( 'def reraise ( tp , value , tb=None ) : \n raise tp , value , tb ' ) AppGroup , FlaskGroup , NoAppException , ScriptInfo , dotenv , find_best_app , u '' Ñandú／pingüino.txt '' , assert 'foo ' in flask.g egg_path , = modules_tmpdir.join ( 'dist/ ' ) .listdir ( ) if not os.path.exists ( os.path.join ( path , `` __init__.py '' ) ) : assert c.get ( '/forbidden-unregistered ' ) .data == b'forbidden ' assert app.jinja_env.tests [ `` boolean '' ] == boolean ( `` , '/ ' , '/ ' ) , assert 'foos ' not in flask.g Popen ( [ 'git ' , 'commit ' , '-am ' , message ] ) .wait ( ) assert context [ `` whiskey '' ] == 43 client.post ( `` /foo '' , data= { } ) key = ' d ' app.register_error_handler ( 999 , lambda e : ( '999 ' , 999 ) ) if hasattr ( o , '__html__ ' ) : assert ( 'Make sure to directly send ' mod = Module ( __name__ , `` foo '' , subdomain= '' foo '' ) assert app.logger.name == 'flask.app ' bool ( static_host ) == host_matching assert client.get ( '/ ' ) .data == b'Awesome ' options [ `` loader '' ] = app.create_global_jinja_loader ( ) Forbidden , ( '/fetch ' , 'fetch.html ' ) , rv = client.post ( '/foo ' , data= { } , follow_redirects=True ) ' ORDER BY created DESC ' def __init__ ( self , app_import_path=None , create_app=None , set_debug_flag=True ) : bar_options = app.config.get_namespace ( 'BAR_ ' , lowercase=False ) _get_static_url_path , _set_static_url_path , self.app , self.request rv = c.get ( '/test ' ) ( '/a ' , ' .. ' , ' b/c ' ) , with app.test_request_context ( `` /meh '' ) : install_requires= [ ) , 'pallets-sphinx-themes ' , app.add_url_rule ( '/ ' , view_func=view ) [ `` -- version '' ] , url_prefix=None , subdomain=None , url_defaults=None , assert 'filename * ' not in rv.headers [ 'Content-Disposition ' ] if self.import_name == `` __main__ '' : appcontext_popped = _signals.signal ( `` appcontext-popped '' ) defaults = dict ( defaults , * * options.pop ( 'defaults ' ) ) assert 'strrev ' in app.jinja_env.filters.keys ( ) ctx = run_command.make_context ( `` run '' , [ `` -- cert '' , `` adhoc '' ] ) assert c.get ( `` /child-registered '' ) .data == b '' child-registered '' flask.request.form [ `` missing_key '' ] app.config [ `` TRAP_HTTP_EXCEPTIONS '' ] = True @ app.route ( '/ ' , methods= [ 'GET ' , 'POST ' ] ) client.get ( '/fail ' ) assert client.get ( `` /auth/register '' ) .status_code == 200 flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename='filename ' ) return os.environ.get ( `` FLASK_ENV '' ) or `` production '' `` SESSION_COOKIE_DOMAIN '' : None , self.url_prefix.rstrip ( '/ ' ) , rule.lstrip ( '/ ' ) ) ) ( 1 , 2 , 3 ) , app.config.update ( SERVER_NAME= '' localhost.localdomain '' ) return 'Exception ' assert client.get ( `` /backend-no '' ) .data == b '' backend says no '' msg = { `` msg '' : { `` submsg '' : `` W00t '' } } assert b '' internal server error '' == rv.data 0 , if meth is None and request.method == `` HEAD '' : `` python '' : platform.python_version ( ) , flags=re.DOTALL | re.MULTILINE , 'filename ' : unicodedata.normalize ( assert rv.headers.getlist ( `` X-Foo '' ) == [ `` Baz '' , `` Bar '' ] obj = ScriptInfo ( app_import_path=cli_app_path + ' : testapp ' ) flask.url_for ( `` admin.static '' , filename= '' test.txt '' ) app.add_template_filter ( my_reverse , `` super_reverse '' ) options [ `` autoescape '' ] = self.select_jinja_autoescape assert app.jinja_env.tests [ 'is_boolean ' ] == is_boolean calls.append ( 'after-handler ' ) assert app.jinja_env.filters [ `` my_reverse '' ] == my_reverse os.path.join ( test_path , 'cliapp ' , 'message.txt ' ) , headers= { if key.startswith ( ' _ ' ) : assert client.get ( `` /what-is-a-sideend '' ) .data == b '' application itself says no '' .fetchone ( ) os.path.dirname ( __file__ ) , `` test_apps '' , `` subdomaintestmodule '' app.config.update ( SERVER_NAME= '' localhost.localdomain:5000 '' ) @ pytest.fixture ( scope='session ' , autouse=True ) rv = client.get ( `` /test '' ) ' { ' , fp.write ( `` ) } `` `` '' with_appcontext , static_folder='static ' ) if 'FLASK_ENV ' in os.environ : return ' < % s % s > ' % ( self.__class__.__name__ , dict.__repr__ ( self ) ) assert client.get ( `` /custom '' ) .data == b '' custom '' value=23 ) with current_app.open_resource ( 'schema.sql ' ) as f : c.get ( `` /small_tuple '' ) warn ( 'Access % s failed , maybe it does not exist , so ignore etags in ' assert sorted ( rv.allow ) == [ `` GET '' , `` HEAD '' , `` OPTIONS '' ] monkeypatch.setattr ( pkgutil , 'get_loader ' , get_loader ) `` Development Status : : 5 - Production/Stable '' , 'When `` -- cert '' is `` adhoc '' , `` -- key '' is not used . ' , assert client.get ( `` /function '' ) .data == b '' bam '' assert app.jinja_env.tests [ 'boolean ' ] == boolean 'SECRET_KEY ' : 'config ' , 'SELECT id FROM user WHERE username = ? ' , ( username , ) raise NoAppException ( 'Could not import `` { name } '' . '.format ( name=module_name ) ) `` hello '' , modules_tmpdir , modules_tmpdir_prefix , purge_module , site_packages , limit_loader return b64encode ( value ) .decode ( 'ascii ' ) called.append ( `` app '' ) flask.send_from_directory ( `` static '' , `` bad\x00 '' ) assert rv.data == b '' Test '' `` when a request context is on the stack . For instance within `` os.path.getsize ( filename ) , `` filename unavailable , required for `` `` sending as attachment '' assert rv == 'Hello Special World 42 ' with open ( os.path.join ( app.root_path , 'static/index.html ' ) , mode='rb ' ) as f : assert value == `` attachment '' os.path.dirname ( __file__ ) , 'test_apps ' ) ) ( ( `` a/b/c '' , ) , `` a/b/c '' ) , return flask.session.get ( `` data '' , `` < missing > '' ) @ app.route ( '/keyerror ' ) assert rv.mimetype == `` application/json '' return flask.url_for ( `` .about '' ) this_module += `` .cli '' bp.add_url_rule ( '/bar/456 ' , endpoint='foofoofoo ' , view_func=functools.partial ( foo_foo_foo ) ) app.register_blueprint ( bp , url_prefix='/bp ' ) [ ( 1 , 2 , 3 ) ] , 'UPDATE post SET title = ? , body = ? WHERE id = ? ' , rv = client.get ( `` / '' , `` http : //127.0.0.1:5000/ '' ) assert flask.json.loads ( rv.data ) [ ' x ' ] == http_date ( d.timetuple ( ) ) or ( mt.startswith ( 'application/ ' ) ) and mt.endswith ( '+json ' ) defaults=defaults , 'trying loader of blueprint `` frontend '' ' `` ( blueprintapp.apps.frontend ) '' 'Application was not able to create a URL adapter for request ' response.vary.update ( ( `` Accept-Encoding '' , `` Accept-Language '' ) ) @ app.route ( '/read ' ) if ext == `` .py '' : return flask.url_for ( `` .index '' ) bp = endpoint.rsplit ( `` . `` , 1 ) [ 0 ] response.headers [ `` X-Foo '' ] = `` a header '' info , 'cliapp.importerrorapp ' , None , raise_if_not_found=False for attr_name in ( 'create_app ' , 'make_app ' ) : return 'utf-16 ' author='Armin Ronacher ' , 'here = os.path.abspath ( os.path.dirname ( __file__ ) ) \n ' fail ( `` Release date is not today ( % s ! = % s ) '' , release_date.date ( ) , date.today ( ) ) assert client.get ( `` /text '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) assert flask.g.bar == 'the cake is a lie ' db.execute ( `` UPDATE post SET author_id = 2 WHERE id = 1 '' ) assert rv.mimetype == 'text/plain ' `` Could not parse the arguments in `` rv = flask.render_template_string ( 'Hello { { config.WORLD_NAME } } ' string = _date_strip_re.sub ( `` , string ) python_requires= ' > =2.7 , ! =3.0. * , ! =3.1. * , ! =3.2. * , ! =3.3 . * ' , flask.url_for , 'TEST_KEY ' : 'foo ' `` setting the SERVER_NAME config variable . '' return redirect ( url_for ( 'blog.index ' ) ) flask.session [ `` d '' ] = now from .templating import DispatchingJinjaLoader , Environment , \ `` PROPAGATE_EXCEPTIONS '' : None , flask.Markup ( u '' < em > Testing < /em > '' ) , f = PyStringIO ( `` Test '' ) args = ast.literal_eval ( `` ( { args } , ) '' .format ( args=args ) ) 'Attempted to generate a URL without the application context being ' app = modules_tmpdir.join ( `` main_app.py '' ) ) , `` h '' : [ `` test list '' , 10 , False ] , test_path , 'cliapp.inner1.inner2 ' description='The basic blog app built in the Flask tutorial . ' , key = `` d '' assert b'Not Found ' in rv.data _PackageBoundObject.__init__ ( `` HTTP_USER_AGENT '' : `` werkzeug/ '' + werkzeug.__version__ , 'Programming Language : : Python : : 2 ' , assert rv.mimetype == `` application/octet-stream '' from .helpers import ( assert rv.data == b '' Foo '' get_db ( ) .execute ( `` select * from user where username = ' a ' '' ) .fetchone ( ) @ pytest.mark.parametrize ( 'use_reloader ' , [ True , False ] ) return flask.Response ( `` , headers= { ' X-Method ' : 'HEAD ' } ) g = LocalProxy ( partial ( _lookup_app_object , ' g ' ) ) assert c.get ( '/bump ' ) .data == b ' 2 ' assert rv.data == b ' < missing > ' app.config [ `` BAR_STUFF_1 '' ] = `` bar stuff 1 '' def test_get_debug_flag ( self , monkeypatch , debug , expected_flag , expected_default_flag ) : assert client.get ( `` / '' ) .data == b '' 42 '' os.path.join ( test_path , `` cliapp '' , `` inner1 '' , `` __init__ '' ) , `` Make sure to directly send your % s-request to this URL `` modules_tmpdir.mkdir ( 'site_egg ' ) .join ( '__init__.py ' ) .write ( kwargs [ 'content_type ' ] = 'application/json ' purge_module ( `` config_module_app '' ) assert messages [ 1 ] == flask.Markup ( u ' < em > Testing < /em > ' ) assert app.instance_path == \ u '' Hello World '' , @ frontend.route ( '/missing ' ) cookie = rv.headers [ `` set-cookie '' ] .lower ( ) ' * Tip : There are .env or .flaskenv files present . ' rv = client.get ( `` / '' , headers= { `` Range '' : `` bytes=1000- '' } ) fg= '' yellow '' , return u '' info.append ( ' See http : //flask.pocoo.org/docs/blueprints/ # templates ' ) name= '' flaskr '' , builder = make_test_environ_builder ( c.get ( `` /missing '' ) assert `` path=/foo '' in rv.headers [ `` set-cookie '' ] .lower ( ) `` test_value , expected '' , [ ( True , ' '' \\u2603 '' ' ) , ( False , u ' '' \u2603 '' ' ) ] @ app.route ( '/more ' , methods= [ 'GET ' , 'POST ' ] ) rv = client.options ( `` / '' ) @ pytest.fixture ( name='app ' ) run_command.make_context ( 'run ' , [ ' -- cert ' , 'adhoc ' ] ) return `` % s/ % d '' % ( bar , baz ) return 'forbidden ' assert recorded == [ 'push ' , 'pop ' ] default=None , rv = flask.helpers.make_response ( `` Hello '' ) hostname , port = 'localhost ' , 8000 if filename ! = `` '' : return `` Hello % s ! '' % flask.request.args [ `` name '' ] __all__ = [ rule_methods = [ `` , `` .join ( sorted ( rule.methods - ignored_methods ) ) for rule in rules ] app.config [ 'MAX_COOKIE_SIZE ' ] = 100 if head [ 1 : ] == b '' \x00\x00\x00 '' : 'is `` % s '' instead of `` multipart/form-data '' which means that no ' assert app.instance_path == modules_tmpdir.join ( `` var '' ) .join ( r = flask.Response ( `` , status=204 ) assert s [ 't_tag ' ] == { ' t ' : 'not-a-tuple ' } self.config [ `` SERVER_NAME '' ] , assert context [ 'whiskey ' ] == 43 app.add_url_rule ( `` / '' , view_func=Index3.as_view ( `` index '' ) ) } ) if check_author and post [ `` author_id '' ] ! = g.user [ `` id '' ] : 'after-handler ' , 'after-signal ' ] methods = options.pop ( 'methods ' , None ) return { 'whiskey ' : 'Jameson ' } app.config.from_mapping ( [ ( `` SECRET_KEY '' , `` config '' ) , ( `` TEST_KEY '' , `` foo '' ) ] ) `` after-signal '' , `` Attempted to generate a URL without the application context being '' `` Programming Language : : Python : : 3.5 '' , 'not installed . ' ) ( `` /a '' , `` b '' , `` c/ .. / .. '' ) , g.user = get_db ( ) .execute ( Markup ( `` < html > '' ) , ) raise Exception ( 'test ' ) assert resp == b '' request|after '' os.path.abspath ( assert 'bar stuff 1 ' == bar_options [ 'BAR_STUFF_1 ' ] SECRET_KEY = 'config ' ) assert app.jinja_env.globals [ 'get_stuff ' ] == get_stuff `` Range '' : `` bytes=4-15 '' , rv = client.get ( '/E1 ' ) rv = client.get ( `` / '' , `` http : //localhost.localdomain/ '' ) platforms= '' any '' , sideend = flask.Blueprint ( `` sideend '' , __name__ ) @ app.route ( '/bad_wsgi ' ) raise BadRequest ( `` Failed to decode JSON object : { 0 } '' .format ( e ) ) client.post ( `` /1/update '' , data= { `` title '' : `` updated '' , `` body '' : `` '' } ) assert rv.data == b'Hello from the Frontend ' ( `` test '' , `` test '' , b '' already registered '' ) , # no app returned os.environ [ `` FLASK_RUN_FROM_CLI '' ] = `` true '' answer_bp = flask.Blueprint ( `` answer_bp '' , __name__ ) dev_version = bump_version ( version ) + '.dev ' ) = ( # nested import error `` The session cookie domain is an IP address . This may not work '' f , as_attachment=True , attachment_filename= '' index.html '' assert client.get ( '/text ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) direct_passthrough=True ) [ 'no_template.xml ' , # should skip this one 'Flask will automatically redirect to the URL ' ' '' make_null_session '' is deprecated and will be removed in 1.1 . Use ' assert `` tuple must have the form '' in str ( e ) init.write ( 'import flask\napp = flask.Flask ( __name__ ) ' ) assert b'xxx ' == response.data assert flask.url_for ( 'foo ' ) == '/foo/ ' assert str ( cleanup_stuff [ 0 ] ) == `` dummy '' if value == `` adhoc '' : return `` custom '' url = flask.url_for ( `` foo.bar.baz.view '' ) assert eb.url_scheme == `` https '' with app.open_resource ( 'static/index.html ' ) as f : assert client.get ( '/more ' ) .data == b'GET ' return 'utf-16-be ' if head.startswith ( b'\x00 ' ) else 'utf-16-le ' 'warning . ' ) , stacklevel=3 ) forbidden_bp = flask.Blueprint ( `` forbidden_bp '' , __name__ ) r = flask.Response ( `` '' , status=204 ) bp = Blueprint ( 'blog ' , __name__ ) return render_template ( 'blog/create.html ' ) assert 'boolean ' in app.jinja_env.tests.keys ( ) file , attachment_filename= '' filename '' , conditional=True name= '' js_example '' , _slash_escape = '\\/ ' not in _json.dumps ( '/ ' ) return current_app.config [ 'MAX_CONTENT_LENGTH ' ] assert flask.request.args [ 'foo ' ] == 'bar ' `` Allowed methods have to be iterables of strings , `` return ( `` Hello '' , ) ( `` / '' , `` plain.html '' ) , script_name=self.config [ 'APPLICATION_ROOT ' ] , data= { ' x ' : [ `` foo '' , `` bar '' , `` baz ' '' ] } ) result = runner.invoke ( cli , [ ' -- help ' ] ) file = open ( filename , 'rb ' ) @ app.route ( '/setdefault ' ) return os.path.join ( path , other [ len ( path ) : ] .lstrip ( os.sep ) ) == other app = Flask ( `` appname '' ) assert `` Session backend did not open a session '' in str ( e.value ) click.echo ( `` * Debug mode : { 0 } '' .format ( `` on '' if debug else `` off '' ) ) if self.get_cookie_path ( app ) == `` / '' and not ip : and len ( args ) == 1 c.get ( `` /bad_type '' ) @ app.route ( '/response_status ' ) ' '' open_session '' is deprecated and will be removed in 1.1 . Use ' return `` forbidden '' , 403 ) .fetchone ( ) is not None ' ( % r instead of % r ) ' % ( rv , self ) assert `` http : //localhost/foo/ '' in str ( e ) ( `` test.py '' , cwd , `` test '' ) , assert ctx.params [ `` cert '' ] == `` adhoc '' return `` utf-16-be '' if head.startswith ( b '' \x00 '' ) else `` utf-16-le '' return 'Hello ' , { assert app.jinja_env.globals [ `` get_answer '' ] is get_answer stream_with_context rv = client.get ( `` / '' , headers= { `` Range '' : `` bytes=4-15 '' } ) values [ `` page '' ] = `` login '' assert 'no filename is available ' in str ( excinfo ) r.set_cookie ( `` foo '' , `` bar '' * 100 ) rv = client.get ( `` /bp '' ) @ pytest.mark.parametrize ( ( 'filename ' , 'ascii ' , 'utf8 ' ) , ( def test_installed_package_paths ( assert flask.g.get ( `` x '' ) is None click.echo ( d = { def index ( self , test= ' a ' ) : assert env [ 'werkzeug.request ' ] is not None app.url_map.add ( Rule ( '/foo ' , endpoint='bar ' ) ) 'Jinja2 > =2.10.1 ' , app.config.update ( SESSION_COOKIE_SAMESITE= '' Strict '' ) return Popen ( [ `` git '' , `` diff '' , `` -- quiet '' ] ) .wait ( ) == 0 # invalid identifier assert response.headers [ `` Location '' ] == `` http : //localhost/ '' ( 'cliapp/app ' , None ) , rv = client.get ( '/admin/ ' ) def exit ( self ) : return @ click.option ( ' -- eager-loading/ -- lazy-loader ' , default=None , raise Exception ( `` dummy '' ) ctx = app.test_request_context ( url_scheme= '' https '' ) rv = client.get ( '/key ' ) raise click.BadParameter ( 'Required when using `` -- cert '' . ' , ctx , param ) url = '/datetest { 0 } '.format ( i ) assert c.post ( '/ ' ) .data == b'POST ' app.config [ `` PROPAGATE_EXCEPTIONS '' ] = True session=self.session client.get ( `` /abort '' ) 'JSON_SORT_KEYS ' : True , @ pytest.mark.parametrize ( 'value , path , result ' , ( @ click.option ( ' -- port ' , '-p ' , default=5000 , assert flask.url_for ( `` index '' , _anchor= '' x y '' ) == `` / # x % 20y '' kwargs [ `` obj '' ] = ScriptInfo ( create_app=lambda : self.app ) assert context [ `` whiskey '' ] == 42 return 'not found ' , 404 SESSION_COOKIE_PATH= '' / '' , assert flask.g.get ( `` x '' , 11 ) == 11 rv = c.get ( `` /test '' ) assert e.value.name == 'missing.html ' @ app.route ( '/child-registered ' ) assert response.data == b'Hello , World ! ' Wrapper ( generate ( ) ) ) ) self.path_type = click.Path ( secret_key = ConfigAttribute ( `` SECRET_KEY '' ) `` `` '' # no script_info flask.g.setdefault ( 'bar ' , 'the cake is a lie ' ) `` `` '' @ app.route ( '/error ' ) request = LocalProxy ( partial ( _lookup_req_object , 'request ' ) ) return ' . '.join ( map ( str , parts ) ) default = flask.Flask.default_config [ `` MAX_COOKIE_SIZE '' ] info ( `` Setting __init__.py version to % s '' , version ) options.setdefault ( `` threaded '' , True ) assert 'get_answer ' in app.jinja_env.globals.keys ( ) assert `` bar stuff 1 '' == bar_options [ `` STUFF_1 '' ] c.get ( '/bad_type ' ) assert client.get ( `` /auth/login '' ) .status_code == 200 values [ `` _external '' ] = external { `` t__ '' : b '' a '' } , assert template.name == `` simple_template.html '' lambda s : s.app.template_context_processors.setdefault ( None , [ ] ) .append ( f ) return 'index ' `` because the blinker library is `` raise Exception ( `` test '' ) 'The view function did not return a valid response tuple . ' expect ( '/get ' ) load_dotenv , app.url_map.converters [ `` list '' ] = ListConverter raise RuntimeError ( app.add_url_rule ( `` / '' , view_func=Index.as_view ( `` index '' ) ) evts.append ( `` teardown '' ) url_rule , self.request.view_args = \ _app_ctx_stack , parse_options_header @ bp.route ( '/bar ' , endpoint='bar ' ) warn ( rv = client.get ( `` / '' , `` http : //mitsuhiko.localhost.localdomain:3000/ '' ) app.config [ 'JSON_AS_ASCII ' ] = test_value 'headers ' % filename , stacklevel=2 ) return 'E2 ' return `` utf-16-be '' assert 'Hello ' in result.output `` /auth/register '' , data= { `` username '' : username , `` password '' : password } def test_egg_installed_paths ( install_egg , modules_tmpdir , modules_tmpdir_prefix ) : assert rv [ 'result ' ] == 'running on % s : % s ... ' % ( hostname , port ) flashes = session.get ( `` _flashes '' , [ ] ) required_methods = set ( getattr ( view_func , 'required_methods ' , ( ) ) ) @ pytest.mark.parametrize ( 'debug , expected_flag , expected_default_flag ' , [ skip_install = true self , import_name , template_folder=template_folder , root_path=root_path [ `` static '' , `` yyy_get_post '' , `` aaa_post '' ] , assert rv.data.strip ( ) == b '' Admin File '' endpoint , `` lang_code '' assert rv.data == b'Foo SubDomain ' assert flask.url_for ( `` myview '' , _method= '' POST '' ) == `` /myview/create '' assert client.post ( '/set ' , data= { 'value ' : '42 ' } ) .data == b'value set ' assert app.instance_path == str ( modules_tmpdir.join ( 'instance ' ) ) assert create_app ( { `` TESTING '' : True } ) .testing app.register_blueprint ( bp , url_prefix='/bp_prefix ' ) if hasattr ( sys , `` exc_clear '' ) : match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) `` cliapp.inner1.inner2 '' , @ pytest.mark.parametrize ( 'value ' , ( assert s [ `` u '' ] == the_uuid with app.test_request_context ( `` / ? name=World '' ) : d = dict.fromkeys ( range ( 20 ) , `` foo '' ) ) ) @ backend.route ( '/be ' ) app.add_url_rule ( `` / '' , view_func=GetDeleteView.as_view ( `` index '' ) ) assert c.get ( '/ ' ) .data == b'GET ' return current_app.config [ `` MAX_CONTENT_LENGTH '' ] app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] = unexpected_max_age assert `` domain=.example.com '' in rv.headers [ `` set-cookie '' ] .lower ( ) RoutingException , Rule assert flask.url_for ( 'hello ' , name='test x ' ) == '/hello/test % 20x ' assert flask.session.get ( `` missing_key '' ) is None `` Tried to register a handler for an exception instance { 0 ! r } . '' return `` forbidden-registered '' `` admin '' , 'Programming Language : : Python : : 3.6 ' , buf.append ( '\n\nThe browser instead transmitted some file names . ' return flask.request.files [ `` foo '' ] .filename _os_alt_seps = list ( ( key , request.mimetype ) ] assert rv.data == b'test index ' flask.Flask ( __name__ , static_host='example.com ' ) description= '' A simple framework for building complex web applications . `` , @ pytest.mark.parametrize ( 'matching ' , ( False , True ) ) `` `` '' .format ( name ) ) ) bp = endpoint.rsplit ( ' . ' , 1 ) [ 0 ] { @ pytest.mark.parametrize ( 'debug ' , [ True , False ] ) rv = flask.send_file ( f , mimetype= '' text/plain '' ) get_flashed_messages , .replace ( u '' ' '' , u '' \\u0027 '' ) rv = client.get ( '/ ' , 'http : //mitsuhiko.localhost.localdomain:3000/ ' ) mt == 'application/json ' 'docs ' : [ def send_file ( @ admin.route ( '/index2 ' ) ) = receivers_for = temporarily_connected_to = connected_to = _fail error = 'Incorrect username . ' scheme = values.pop ( `` _scheme '' , None ) elif hasattr ( loader , `` archive '' ) : app.add_template_filter ( my_reverse , 'super_reverse ' ) assert `` Exception : test '' in err click.secho ( `` Use a production WSGI server instead . `` , dim=True ) return `` . `` .join ( map ( str , parts ) ) return flask.render_template_string ( `` { { config } } '' , config=42 ) assert b '' Not Found '' in rv.data info.append ( ' Maybe you did not place a template in the right folder ? ' ) assert rv.data == b'dcba ' values [ `` _scheme '' ] = scheme return app.config [ 'SESSION_COOKIE_SAMESITE ' ] pytest.fail ( `` Example code leaked '' ) if hasattr ( gen , `` close '' ) : if `` autoescape '' not in options : val = os.environ.get ( `` FLASK_DEBUG '' ) assert client.get ( '/keyerror ' ) .data == b'KeyError ' 'provide enctype= '' multipart/form-data '' in your form . ' % rv [ 'request ' ] = reqctx.request assert `` it was a bool '' in str ( e ) assert value == 'attachment ' assert client.get ( '/foo ' ) .data == b'bar ' or filename == `` .. '' from .signals import ( result = runner.invoke ( args= [ 'init-db ' ] ) codename , @ pytest.mark.parametrize ( ( 'username ' , 'password ' , 'message ' ) , ( with io.open ( 'flask/__init__.py ' , 'rt ' , encoding='utf8 ' ) as f : ( `` cliapp.factory '' , 'create_app2 ( `` foo '' ) ' ) , assert flask.g.get ( `` foo '' , `` bar '' ) == `` bar '' app.config.update ( SERVER_NAME='localhost.localdomain:443 ' ) assert e.value.name == `` missing.html '' `` it 's a namespace package . In this case `` app.write ( `` import flask\napp = flask.Flask ( __name__ ) '' ) assert flask.url_for ( `` hello '' , name= '' test x '' ) == `` /hello/test % 20x '' return value.split ( `` , '' ) expect ( '/no-vary-header ' , None ) ctx = app.test_request_context ( url_scheme='https ' ) egg_setup = base.join ( `` setup.py '' ) testapp = Flask ( `` testapp '' ) if `` . '' in endpoint : assert rv.data == b '' flask '' rv = flask.send_file ( f , as_attachment=True , values.setdefault ( 'lang_code ' , flask.g.lang_code ) ( assert view_func is not None , `` expected view func if endpoint `` `` is not provided . '' key = `` t '' session = LocalProxy ( partial ( _lookup_req_object , `` session '' ) ) assert 'domain=example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) os.environ = { 'FOO_SETTINGS ' : __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' } help='Enable or disable the reloader . By default the reloader ' builder = make_test_environ_builder ( app , path= '' /index '' , method= '' GET '' ) url = '/uuid_test ' rv = client.post ( `` /foo '' , data= { } , follow_redirects=True ) assert rv.data == b '' https : //localhost/ '' app.add_url_rule ( `` / '' , view_func=Index2.as_view ( `` index '' ) ) assert `` behavior undefined '' in str ( e.value ) db.execute ( 'SELECT 1 ' ) ' '' make_null_session '' is deprecated and will be removed in 1.1 . Use ' assert s.loads ( s.dumps ( Foo ( `` bar '' ) ) ) .data == `` bar '' app.config [ `` DEBUG '' ] = False bp = flask.Blueprint ( `` frontend '' , __name__ , url_prefix= '' / < lang_code > '' ) ( `` /a '' , `` b '' , `` /c '' ) , os.environ [ 'FLASK_RUN_FROM_CLI ' ] = 'true ' app.add_url_rule ( '/ ' , view_func=GetDeleteView.as_view ( 'index ' ) ) assert rv.headers [ 'Location ' ] == 'http : //localhost/test ' assert `` missing_key '' in e.value.get_description ( ) assert rv.data == b ' 0.0.0.1 ' `` the root path needs to be explicitly `` return str ( flask.session.get ( `` foo '' , 0 ) ) `` A setup function was called after the `` expected = dict ( page= '' login '' ) if head [ 1 : ] == b'\x00\x00\x00 ' : PassDict , raise AssertionError ( `` some kind of exception expected '' ) @ app.endpoint ( 'index ' ) assert rv.data == b'Hi , status ! ' app.session_cookie_name , domain=domain , path=path fail ( 'Could not parse changelog ' ) return `` internal server error '' , 500 '/auth/register ' , rv = client.get ( `` / ? foo=42 '' ) ( 'cliapp.importerrorapp ' , None ) , redirect , ( 'test/__init__.py ' , cwd , 'test ' ) , raise TypeError ( `` jsonify ( ) behavior undefined when passed both args and kwargs '' ) assert 'Traceback ' in result.output assert 'foo option 1 ' == foo_options [ 'foo_option_1 ' ] g=g rv = client.get ( u '' /киртест '' ) app.add_url_rule ( '/ ' , view_func=Index2.as_view ( 'index ' ) ) `` MAX_CONTENT_LENGTH '' : None , foo_options = app.config.get_namespace ( `` FOO_ '' , trim_namespace=False ) info.append ( `` % s '' % line ) assert `` missing_template.html '' in str ( excinfo.value ) port , assert category == `` notice '' assert rv.data == b'Hello ' app.add_url_rule ( '/ ' , view_func=index , provide_automatic_options=False ) fail ( return 'bp-error ' endpoint='static ' , if app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] == unexpected_max_age : temporarily_connected_to = connected_to = _fail rv = client.post ( '/json ' , data=None , content_type='application/json ' ) `` load '' , assert flask.url_for ( 'sub ' , _external=True ) == \ 'be called with the specified arguments . '.format ( request_tearing_down = _signals.signal ( 'request-tearing-down ' ) type=click.Path ( exists=True , dir_okay=False , resolve_path=True ) , assert b '' test title '' in response.data `` { % if notanswer % } { { notanswer } } is not the answer . { % endif % } '' ( `` '' , False , False ) , if meth is None and request.method == 'HEAD ' : assert client.get ( '/2 ' ) .data == b'apple ' app.config.from_pyfile ( 'config.py ' , silent=True ) flask.flash ( flask.Markup ( u ' < em > Testing < /em > ' ) , 'warning ' ) ' X-Foo ' : 'Testing ' , os.path.getmtime ( filename ) , return 'utf-32 ' key = `` u '' .setdefault ( self.name , [ ] ) .append ( f ) ) return '/ ' + os.path.basename ( self.static_folder ) assert client.get ( '/ ' ) .status_code == 404 flask.flash ( 'Zap ' ) ( None , 80 , 'pocoo.org ' , 80 ) , self , monkeypatch , debug , expected_flag , expected_default_flag assert c.get ( '/bump ' ) .data == b ' 1 ' ) , @ app.route ( '/ ' , methods= [ 'PUT ' ] ) ( 'test/__init__ ' , cwd , 'test ' ) , app = modules_tmpdir.join ( 'main_app.py ' ) app.add_url_rule ( '/more ' , 'more ' , more , methods= [ 'GET ' , 'POST ' ] ) ( '/ ' , 'plain.html ' ) , app.logger.info ( `` \n '' .join ( info ) ) 'SESSION_COOKIE_NAME ' : 'session ' , assert app.jinja_env.tests [ `` is_boolean '' ] == is_boolean client.environ_base [ `` HTTP_USER_AGENT '' ] = `` Foo '' subdomain = ( ( self.url_map.default_subdomain or None ) rv = flask.url_for ( `` index '' ) BadRequestKeyError , file , attachment_filename='filename ' , conditional=True APPLICATION_ROOT='/foo ' app.config [ 'APPLICATION_ROOT ' ] = '/foo ' assert calls == [ 'before-signal ' , 'before-handler ' , 'handler ' , assert app.name == `` hello '' assert post [ 'title ' ] == 'updated ' 'When `` -- cert '' is `` adhoc '' , `` -- key '' is not used . ' , ctx , param session=self.session , if ext == '.py ' : headers.add ( `` Content-Disposition '' , `` attachment '' , * * filenames ) assert app.secret_key == `` config '' assert sorted ( meths ) == [ `` GET '' , `` HEAD '' , `` OPTIONS '' , `` POST '' ] not hasattr ( sys , 'pypy_translation_info ' ) : assert client.get ( `` /frontend-no '' ) .data == b '' frontend says no '' params = list ( extra.pop ( 'params ' , None ) or ( ) ) lines = [ x.strip ( ) for x in rv.data.strip ( ) .decode ( `` utf-8 '' ) .splitlines ( ) ] assert flask.url_for ( `` myview '' , _method= '' GET '' ) == `` /myview/ '' lambda s : s.app.url_value_preprocessors.setdefault ( None , [ ] ) .append ( f ) assert flask.session.get ( `` fizz '' ) == `` buzz '' assert c.get ( `` /bump '' ) .data == b '' 3 '' entry_points= { add_etags=False , Popen ( [ 'git ' , 'tag ' , tag ] ) .wait ( ) sep = b '' ? '' if isinstance ( url.query , bytes ) else `` ? '' return 'DELETE ' got_request_exception = _signals.signal ( `` got-request-exception '' ) `` jsonify '' , SECRET_KEY='config ' , or `` application/octet-stream '' client.get ( '/key ' ) result = runner.invoke ( cli , [ `` test '' ] ) # strip whitespace url_prefix = self.options.get ( `` url_prefix '' ) assert c.get ( '/child-unregistered ' ) .data == b'parent ' set_filename_version ( 'flask/__init__.py ' , version , '__version__ ' ) expect ( '/getitem ' ) assert msg.startswith ( DATABASE=os.path.join ( app.instance_path , `` flaskr.sqlite '' ) , environ [ 'flask._preserve_context ' ] = self.preserve_context banner = 'Python % s on % s\nApp : % s [ % s ] \nInstance : % s ' % ( assert 'no file contents were transmitted ' in str ( e.value ) f = tmpdir.join ( `` my_config.py '' ) raise RuntimeError ( 'Attempted to stream with context but ' rv = ' . ' + rv if endpoint [ :1 ] == ' . ' : `` e '' : `` Hi '' , `` JSONIFY_MIMETYPE '' : `` application/json '' , buf = [ ' A request was sent to this URL ( % s ) but a redirect was ' 'JSONIFY_PRETTYPRINT_REGULAR ' : False , `` but is getting modified now . These changes `` if os.environ.get ( 'WERKZEUG_RUN_MAIN ' ) == 'true ' : bp = flask.Blueprint ( `` bp '' , __name__ ) raise AssertionError ( ' A setup function was called after the ' license= '' BSD '' , return flask.url_for ( 'app_index ' ) if hasattr ( mapping [ 0 ] , `` items '' ) : response.data = 'stuff ' 'PEP 302 import hooks . If you do not use import hooks and ' * * options @ bp.route ( '/page/ < int : page > ' ) assert client.post ( '/1/update ' ) .status_code == 403 assert rv.data == b '' test index '' assert 'get_answer ' not in app.jinja_env.globals.keys ( ) value , options = parse_options_header ( rv.headers [ `` Content-Disposition '' ] ) assert flask.url_for ( 'static ' , filename='index.html ' ) == \ [ ' -- version ' ] , assert client.get ( '/foo ' ) .data == b'Meh ' client.get ( '/test_with_categories/ ' ) response = client.get ( '/hello ' ) `` * Tip : There are .env or .flaskenv files present . '' from werkzeug.routing import BuildError , Map , RequestRedirect , \ for url in '/kw ' , '/dict ' : ' HTTP error codes . '.format ( code_or_exception ) raise Exception ( 'dummy ' ) assert 'must be absolute ' in str ( excinfo.value ) with open ( os.path.join ( app.root_path , `` static/index.html '' ) , mode= '' rb '' ) as f : bp = flask.Blueprint ( 'frontend ' , __name__ , url_prefix='/ < lang_code > ' ) `` site_package-instance '' @ blue.route ( '/function ' ) values [ '_scheme ' ] = scheme 'http : //localhost.localdomain:5000/ ' return b64encode ( value ) .decode ( `` ascii '' ) return render_template ( 'blog/update.html ' , post=post ) assert client.get ( `` /bytes '' ) .data == u '' Hällo Wörld '' .encode ( `` utf-8 '' ) assert c.get ( `` /forbidden '' ) .data == b '' forbidden '' assert flask.request.args [ 'foo ' ] == 'bar ' if app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] == expected_max_age : parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) assert client.post ( `` /set '' , data= { `` value '' : `` 42 '' } ) .data == b '' value set '' kwargs.setdefault ( `` cls '' , AppGroup ) `` The session is unavailable because no secret `` ( request.blueprint , None ) , ( None , None ) pytest.raises ( BuildError , app.handle_url_build_error , error , `` spam '' , { } ) assert client.get ( '/nope ' ) .data == b'you shall not pass ' return callable ( getattr ( value , `` __html__ '' , None ) ) ( ( ' a/b/c ' , ) , ' a/b/c ' ) , rv = client.get ( `` /wsgi '' ) bp = flask.Blueprint ( 'bp ' , __name__ ) .replace ( u '' < `` , u '' \\u003c '' ) datetime.utcnow ( ) .replace ( microsecond=0 ) , detail = `` found ( % r ) '' % ( triple [ 1 ] or `` < string > '' ) ( ( `` / '' , `` a/ '' , `` b/ '' , `` c/ '' ) , `` /a/b/c '' ) , if not has_encoding ( 'euc-kr ' ) : { `` x '' : ( 1 , 2 , 3 ) , `` y '' : 4 } , os.path.abspath ( os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' , `` cliapp '' ) ) ( `` /plain '' , `` plain.html '' ) , assert resp.mimetype == 'text/x-special ' return X ( obj [ `` _foo '' ] ) return '/test_handler/ ' rv = client.options ( '/ ' ) assert rv.data == b'stuff ' SERVER_NAME='localhost:5000 ' , return `` Hello Server Error '' , 500 @ app.route ( '/foo/ ' ) url= '' https : //www.palletsprojects.com/p/flask/ '' , ( os.environ , `` FLASK_ENV '' , monkeypatch.notset ) , return self.__class__ ( 'since we can\'t make browsers or HTTP clients redirect ' return `` Exception '' bp.add_app_template_filter ( my_reverse , 'strrev ' ) rv [ `` g '' ] = appctx.g app.add_url_rule ( `` / '' , `` index '' , index ) and loader.__class__.__name__ == `` NamespaceLoader '' else None 'SESSION_COOKIE_DOMAIN ' : None , match = re.match ( r '' ^ * ( [ ^ ( ) ] + ) * ( ? : \ ( ( . * ? ) * , ? * \ ) ) ? * $ '' , app_name ) ) a = request.form.get ( ' a ' , 0 , type=float ) return `` application itself says no '' , 403 update = setdefault = _fail bp = flask.Blueprint ( 'company ' , __name__ , subdomain='xxx ' ) flask.flash ( 'This is a flash message ' , category='notice ' ) assert `` filename= % s '' % ascii in content_disposition .mkdir ( 'site-packages ' ) monkeypatch.setitem ( sys.modules , `` ssl_context '' , ssl_context ) flask.session [ `` test '' ] = `` aha '' `` Meh '' , assert bool ( static_host ) == host_matching , 'Invalid static_host/host_matching combination ' assert not ( base_url or subdomain or url_scheme ) or ( base_url is not None ) ! = bool ( test_data = { `` name '' : `` Flask '' } return _render ( ctx.app.jinja_env.from_string ( source ) , context , ctx.app ) client.get ( '/test_filters_without_returning_categories/ ' ) description='Demonstrates making Ajax requests to Flask . ' , response = app.test_client ( ) .get ( '/ ' , headers= { 'host ' : 'xn -- on-0ia.com ' } ) assert `` no filename is available '' in str ( excinfo ) rv = self.config [ `` PRESERVE_CONTEXT_ON_EXCEPTION '' ] default_exceptions , 'When `` -- cert '' is an SSLContext object , `` -- key is not used . ' , invoke ( [ `` routes '' , `` -s '' , `` match '' ] ) .output , `` select * from user where username = ' a ' '' , flask.jsonify ( 'fake args ' , kwargs='fake ' ) app.route ( `` / '' ) ( index ) @ click.option ( ' -- host ' , '-h ' , default='127.0.0.1 ' , invoke ( [ 'routes ' , '-s ' , 'methods ' ] ) .output flask.url_for ( `` index '' ) raise ValueError ( 'When specifying _scheme , _external must be True ' ) assert flask.url_for ( `` 123 '' ) == `` /bar/123 '' rv = client.head ( `` / '' ) assert 'Session backend did not open a session ' in str ( e.value ) return 'utf-8 ' monkeypatch.setattr ( sys , 'prefix ' , str ( modules_tmpdir ) ) `` looked up from an endpoint that belongs to `` 'the blueprint `` frontend '' ' environ [ 'HTTP_HOST ' ] = u'\x8a ' return redirect ( url_for ( `` index '' ) ) rv = flask.make_response ( flask.session [ `` m '' ] = flask.Markup ( `` < html > '' ) app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] = timedelta ( hours=2 ) `` \ '' FLASK_APP= ' { module } : { factory } ( args ) '\ '' to specify `` info.append ( `` Error : the template could not be found . '' ) .setdefault ( None , [ ] ) .append ( f ) ) elif not check_password_hash ( user [ 'password ' ] , password ) : assert s [ `` b '' ] == b '' \xff '' ( 'test ' , cwd , 'test ' ) , AssertionError , lambda : bp.add_url_rule ( `` /bar/123 '' , view_func=foo_foo_foo ) ( 'test.a.b ' , cwd , 'test.a.b ' ) , env = ConfigAttribute ( 'ENV ' ) 'ENV ' : None , assert b'href= '' /1/update '' ' not in client.get ( `` / '' ) .data assert flask.request.path == `` / '' { } , { } return flask.url_for ( 'about ' ) flask.session [ 'test ' ] = 'test ' ( ( `` a/b/c '' , `` X/ .. '' ) , `` a/b/c/ . `` ) , assert False , `` Flask ( import_name ) is importing import_name . '' client.get ( '/ ' ) b '' < p > Hello World ! `` , purge_module ( `` site_app '' ) @ bp.route ( '/ < page > ' ) evts.append ( `` before '' ) encoding val = os.environ.get ( `` FLASK_SKIP_DOTENV '' ) app.config [ `` MAX_CONTENT_LENGTH '' ] = 64 elif ( rv = client.get ( '/admin/static/css/test.css ' ) detail = `` no match '' key_derivation=self.key_derivation , digest_method=self.digest_method options [ `` auto_reload '' ] = self.templates_auto_reload DeprecationWarning ( assert rv.data == b '' Hello World ! '' expect ( `` /set '' ) assert `` Use a subclass '' in exc_info.value.args [ 0 ] assert client.get ( '/bp_prefix/bar ' ) .status_code == 404 ) [ :2 ] 'SELECT p.id , title , body , created , author_id , username ' `` _external '' : False , if hasattr ( sys , 'exc_clear ' ) : 'without one . ' ) app.register_blueprint ( bp , url_prefix= '' /bp_prefix '' ) self.logger.error ( 'Exception on % s [ % s ] ' % ( # nested package if request.method == 'POST ' : rv = client.get ( `` / '' , `` http : //example.com/ '' ) 'provided . ' % import_name ) purge_module ( `` main_app '' ) ' ( blueprintapp.apps.frontend ) ' ) in text if getattr ( rule , 'provide_automatic_options ' , False ) \ rv = client.get ( '/ ? name=World ' ) elif hasattr ( loader , 'archive ' ) : backend = flask.Blueprint ( 'myapp.backend ' , __name__ ) calls.append ( `` before-handler '' ) ( `` cliapp.factory '' , `` no_app '' ) , return 'Hello World ! ' assert client.get ( `` / '' ) .status_code == 500 rv = ( db.execute ( `` DELETE FROM post WHERE id = ? `` , ( id , ) ) @ pytest.mark.parametrize ( 'iname , aname , result ' , ( return val.lower ( ) in ( ' 0 ' , 'false ' , 'no ' ) assert rv.data == b'request|after ' digest_method=self.digest_method assert `` Error : the template could not be found '' in text `` sphinx '' , `` dictionary but it does not exist . The mimetype for the request `` 'with form data reliably or without user interaction . ' % `` Programming Language : : Python : : 2.7 '' , '_external ' : False , subdomain=subdomain ) `` \n\nThe browser instead transmitted some file names. `` TagDict , PassDict , TagTuple , PassList , TagBytes , TagMarkup , TagUUID , ( `` Issue tracker '' , `` https : //github.com/pallets/flask/issues '' ) , `` d '' : `` t '' , assert client.get ( `` /py/bar '' ) .data == b '' bp.bar '' wsgi_errors_stream @ app.endpoint ( 'bar ' ) help='Enable or disable eager loading . By default eager ' response.data += b'|after ' yield flask.session [ 'test ' ] _date_strip_re = re.compile ( r ' ( ? < =\d ) ( st|nd|rd|th ) ' ) assert rv.data == b'W00t ' values [ 'page ' ] = 'login ' except ( ValueError , SyntaxError ) as e : `` SELECT p.id , title , body , created , author_id , username '' assert eb.host == `` example.com '' 'Tried to register a handler for an exception instance { 0 ! r } . ' assert `` returned None '' in str ( e ) ] ( `` test/__init__.py '' , cwd , `` test '' ) , `` PRESERVE_CONTEXT_ON_EXCEPTION '' : None , assert rv.data == b '' '' client.get ( `` / '' ) assert client.get ( '/fe ' ) .data.strip ( ) == b'/be ' assert list ( flask.g ) == [ `` foo '' ] return `` . `` .join ( module_name [ : :-1 ] ) client.post ( '/create ' , data= { 'title ' : 'created ' , 'body ' : `` } ) if isinstance ( filename , text_type ) return 'normal index ' assert app.jinja_env.filters [ 'my_reverse ' ] == my_reverse `` Attempted to stream with context but `` return flask.render_template ( `` template_test.html '' , value=False ) @ app.route ( '/no-vary-header ' ) ' { % if answer % } { { answer } } is the answer . { % endif % } ' ( '/foo ' , `` , '/foo ' ) , def test_post_empty_json_wont_add_exception_to_response_if_no_debug ( with io.open ( 'README.rst ' , 'rt ' , encoding='utf8 ' ) as f : return flask.redirect ( '/other ' ) ( 'index.html ' , 'index.html ' , False ) , assert flask.g.user_agent == `` Foo '' f.write_binary ( rv = flask.render_template_string ( ' { { get_stuff ( ) } } ' ) assert os.environ [ 'BAR ' ] == 'bar ' app.config [ 'SERVER_NAME ' ] = 'localhost ' `` g '' : False , assert ctx.request.url == `` https : //localhost/ '' flask.session [ `` foo '' ] = 42 client.get ( '/ ' ) assert rv.data == b '' Hello world '' def __init__ ( self , add_default_commands=True , create_app=None , 'run ' , [ ' -- cert ' , 'ssl_context ' , ' -- key ' , __file__ ] ) assert rv.headers [ `` X-Foo '' ] == `` bar '' _date_strip_re = re.compile ( r '' ( ? < =\d ) ( st|nd|rd|th ) '' ) context , assert client.get ( '/custom ' ) .data == b'custom ' app.url_map.add ( app.config.update ( SERVER_NAME='localhost:80 ' ) assert options [ `` filename '' ] == `` index.txt '' __version__ = ' 1.1.dev ' rv = client.get ( `` /admin/ '' ) 'point to a configuration file ' % rv = client.get ( u '' / ? foo=정상처리 '' .encode ( `` euc-kr '' ) ) ( '/foo/ ' , `` , '/foo/ ' ) , init.write ( `` import flask\napp = flask.Flask ( __name__ ) '' ) app.url_map.converters [ 'list ' ] = ListConverter rv = modules_tmpdir \ assert rv.data == b ' < h1 > Jameson < /h1 > ' 'DEBUG ' : None , @ app.route ( '/other ' ) 'application is run from the flask command line ' return app.response_class ( `` Hello world '' , 400 ) , 500 and mt.endswith ( `` +json '' ) `` / '' , return ( assert rv [ `` result '' ] == `` running ... '' assert flask.g.pop ( 'bar ' , 'more cake ' ) == 'more cake ' ) , `` Invalid static_host/host_matching combination '' pytestconfig.pluginmanager.register ( logging_plugin , `` logging-plugin '' ) return 'app-error ' foo_options = app.config.get_namespace ( 'FOO_ ' ) rv = client.get ( `` / '' , `` http : //localhost.localdomain:5000 '' ) click.echo ( `` Initialized the database . '' ) assert `` foos '' not in flask.g @ app.route ( '/abort ' ) return `` x '' 'sending as attachment ' ) with open ( os.path.join ( os.path.dirname ( __file__ ) , `` data.sql '' ) , `` rb '' ) as f : environ [ `` HTTP_HOST '' ] = u '' ąśźäüжŠßя.com '' ( `` cliapp.factory '' , 'create_app2 ( `` foo '' , `` bar '' ) ' , `` app2_foo_bar '' ) , rv = flask.send_file ( f , as_attachment=True , assert c.get ( '/child-registered ' ) .data == b'child-registered ' assert client.get ( '/what-is-a-sideend ' ) .data == b'application itself says no ' assert `` domain=example.com '' in rv.headers [ `` set-cookie '' ] .lower ( ) return self.__class__ ( self.app , return os.path.join ( package_path , 'instance ' ) if not current_app.config [ `` JSON_AS_ASCII '' ] : 'is active if debug is enabled . ' ) `` instead . '' SECRET_KEY = `` config '' def test_post_empty_json_wont_add_exception_to_response_if_no_debug ( self , app , client ) : assert rv.data == b'Hello ' 'test ' : [ assert rv.data == b '' 0.0.0.0 '' pretty_response = ( if `` obj '' not in kwargs : `` expected at most 1 positional argument , got % d '' % len ( mapping ) # invalid identifier assert rv.data == b '' b '' key = ' f ' assert rv.mimetype == 'text/html ' options.setdefault ( `` conditional '' , True ) assert client.get ( '/de/about ' ) .data == b'/foo ' request_started , errors = flask.Blueprint ( 'errors ' , __name__ ) `` Programming Language : : Python : : 3 '' , app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : assert 'is_boolean ' in app.jinja_env.tests.keys ( ) ) : @ app.route ( '/ < lang_code > /about ' ) 'blinker ' , flask.session [ 'value ' ] = flask.request.form [ 'value ' ] rv = { `` app '' : self , `` g '' : g } `` click > =5.1 '' , @ bp.route ( '/ ' , defaults= { 'page ' : 1 } ) rv = client.head ( '/ ' ) assert 'Unable to infer MIME-type ' in str ( excinfo ) @ app.route ( '/ < company_id > ' ) else current_app.json_encoder username = request.form [ `` username '' ] return flask.url_for ( 'myapp.frontend.frontend_index ' ) purge_module ( `` config_package_app '' ) rv = client.get ( '/ ' , 'http : //localhost.localdomain/ ' ) raise flask.abort ( flask.redirect ( flask.url_for ( `` test '' ) ) ) assert 'cookie domain is an IP ' in str ( w.message ) assert rv.data == b'index for mitsuhiko ' assert `` foo option 1 '' == foo_options [ `` option_1 '' ] self.name , [ ] return flask.Response ( 'Blub ' , headers= { fp.write ( `` '' ) attachment_filename = attachment_filename.encode ( 'ascii ' ) raise RuntimeError ( `` No static folder for this object '' ) return render_template ( `` frontend/index.html '' ) evts.append ( 'before ' ) `` < a ng-data= ' { { data|tojson } } ' > < /a > '' , data= { `` x '' : [ `` foo '' , `` bar '' , `` baz ' '' ] } _PackageBoundObject.__init__ ( self , import_name , template_folder , from flask.logging import default_handler , has_level_handler , \ `` APPLICATION_ROOT '' : `` / '' , adler32 ( egg_setup.write ( def open_resource ( self , resource , mode='rb ' ) : flask.g.pop ( 'bar ' ) admin = Blueprint ( assert evts == [ `` first '' ] + [ `` before '' , `` after '' , `` teardown '' ] * 2 `` FROM post p JOIN user u ON p.author_id = u.id '' assert b '' test\nbody '' in response.data result = runner.invoke ( cli , [ 'test ' ] , obj=obj ) monkeypatch.chdir ( os.path.join ( test_path , 'cliapp ' , 'inner1 ' ) ) assert flask.url_for ( `` myview '' , id=42 , _method= '' GET '' ) == `` /myview/42 '' def test_installed_package_paths ( limit_loader , modules_tmpdir , rv = rv.replace ( `` \\/ '' , `` / '' ) microsecond=0 ) assert `` get_answer '' not in app.jinja_env.globals.keys ( ) `` tox '' , 'before the application starts serving requests . ' ) assert meth is not None , `` Unimplemented method % r '' % request.method assert rv.data == b'GET ' application = Flask ( 'appname ' ) assert b'internal server error ' == rv.data return 'Awesome ' name = 'python -m ' + this_module 'Could not locate a Flask application . You did not provide ' install_requires= [ `` flask '' ] , assert flask.g.user_agent == `` Bar '' assert client.get ( `` / '' ) .data == b '' Awesome '' AppGroup , rv = client.get ( `` /error '' ) @ app.route ( '/full_tuple ' ) ( `` /a '' , `` .. '' , `` b/c '' ) , assert `` boolean '' in app.jinja_env.tests.keys ( ) set_debug_flag=True , response = client.get ( '/ ' ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] key = ' 2 ' assert rv.data == b '' 42 '' mod = Module ( __name__ , 'foo ' , subdomain='foo ' ) `` host , port , expect_host , expect_port '' , @ bp.app_template_filter ( 'strrev ' ) bp.add_app_template_filter ( my_reverse , 'super_reverse ' ) return { 'injected_value ' : 42 } assert rv.data == b '' a '' assert app.jinja_env.tests [ 'boolean ' ] ( False ) 'dictionary but it does not exist . The mimetype for the request ' `` Programming Language : : Python : : 2 '' , view_func=self.send_static_file , response.vary.update ( ( 'Accept-Encoding ' , 'Accept-Language ' ) ) os.path.dirname ( __file__ ) , 'test_apps ' , 'cliapp ' 'sphinx ' , assert messages [ 0 ] == u'Hello World ' assert rv is self , 'Popped wrong app context . ( % r instead of % r ) ' \ assert flask.session.get ( 'data ' ) == 'foo ' `` PREFERRED_URL_SCHEME '' : `` http '' , flask.Flask ( `` importerror '' ) rv = client.post ( if folder.lower ( ) == `` lib '' : `` with form data reliably or without user interaction . '' % request.method forbidden_bp = flask.Blueprint ( 'forbidden_bp ' , __name__ ) logging.getLogger ( 'flask ' ) , 'handlers ' , [ _TestHandler ( ) ] if 'json ' in kwargs : ( 'Code ' , 'https : //github.com/pallets/flask ' ) , if loader is None or import_name == '__main__ ' : run_command.make_context ( 'run ' , [ ' -- cert ' , 'not_here ' ] ) return Flask ( `` appname2 '' ) ' [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s ' return FileSystemLoader ( os.path.join ( self.root_path , self.template_folder ) ) raise ValueError ( 'Resources can only be opened for reading ' ) assert ( `` Make sure to directly send `` `` your POST-request to this URL '' ) in str ( e ) @ bp.app_template_test ( 'boolean ' ) self.__class__.__name__ , db.executescript ( f.read ( ) .decode ( 'utf8 ' ) ) if next ( lineiter ) .count ( `` - '' ) ! = len ( match.group ( 0 ) ) : click.echo ( `` * Environment : { 0 } '' .format ( env ) ) response = app.test_client ( ) .get ( `` / '' ) assert b '' 42 '' not in app_page_bytes bp = flask.Blueprint ( `` foo.bar.baz '' , __name__ , template_folder= '' template '' ) ' h ' : [ 'test list ' , 10 , False ] , if head [ :3 ] == b'\x00\x00\x00 ' : repos : `` View function mapping is overwriting an `` Blueprint , rv = flask.send_file ( StringIO ( 'Test ' ) , as_attachment=True , json_data = { `` drink '' : { `` gin '' : 1 , `` tonic '' : True } , `` price '' : 10 } assert flask.url_for ( '123 ' ) == '/bar/123 ' rv = flask.url_for ( `` static '' , filename= '' index.html '' , _external=True ) raise RuntimeError ( ' Can not nest client invocations ' ) if self.get_cookie_path ( app ) == '/ ' and not ip : `` there was no context in the first place to keep around . '' assert ' A setup function was called ' in str ( e ) assert rv.headers [ ' X-Foo ' ] == 'bar ' return render_template ( `` auth/register.html '' ) assert ( ' 2 : trying loader of blueprint `` admin '' ' flask.session [ 'test ' ] = 42 assert flask.url_for ( 'bar ' ) == '/bar/ ' ( '/ ' , '/ ' , '/ ' ) , return `` value set '' error = `` Incorrect password . '' ( 'cliapp.factory ' , 'create_app3 ( `` foo '' ) ' , 'app3_foo_spam ' ) , ] ) ) app.session_cookie_name , '/static/index.html ' '/more ' , view_func=more , methods= [ 'GET ' , 'POST ' ] , app.config.update ( SERVER_NAME='localhost.localdomain ' ) fail ( `` You have uncommitted changes in git '' ) assert rv.mimetype == `` text/plain '' assert evts == [ 'first ' ] + [ 'before ' , 'after ' , 'teardown ' ] * 2 methods = [ 'GET ' , 'POST ' ] return { `` whiskey '' : `` Jameson '' } threaded=with_threads , client.get ( `` /test_with_categories/ '' ) [ mimetype= '' text/plain '' , result = invoke ( [ `` routes '' ] ) self.static_url_path + '/ < path : filename > ' , client.post ( `` /fail '' , data= { `` foo '' : `` index.txt '' } ) 'SESSION_COOKIE_PATH ' : None , 'provide enctype= '' multipart/form-data '' in your form . ' app.config [ `` BAR_STUFF_2 '' ] = `` bar stuff 2 '' response = client.post ( '/add ' , data= { ' a ' : a , ' b ' : b } ) locate_app , return flask.url_for ( 'something_else ' ) value , options = \ assert find_best_app ( script_info , Module ) .name == `` appname '' @ app.route ( '/foo/ ' , methods= [ 'GET ' , 'POST ' ] ) return flask.url_for ( `` myapp.frontend.frontend_index '' ) permanent_session_lifetime = ConfigAttribute ( 'PERMANENT_SESSION_LIFETIME ' , kwargs.setdefault ( 'ensure_ascii ' , False ) @ app.route ( '/forbidden ' ) copy_current_request_context , return val.lower ( ) not in ( ' 0 ' , 'false ' , 'no ' ) resp = client.get ( `` /other '' ) python_requires= '' > =2.7 , ! =3.0. * , ! =3.1. * , ! =3.2. * , ! =3.3 . * '' , mimetype = ( raise AssertionError ( 'View function mapping is overwriting an ' parts = [ int ( i ) for i in version.split ( ' . ' ) ] assert 'missing_key ' in e.value.get_description ( ) rv = client.open ( '/more ' , method='OPTIONS ' ) @ app.route ( '/wsgi ' ) if os.environ.get ( `` WERKZEUG_RUN_MAIN '' ) ! = `` true '' : return `` < flask.g of % r > '' % top.app.name monkeypatch.setenv ( 'EGGS ' , ' 3 ' ) info ( 'Setting __init__.py version to % s ' , version ) assert rv.data == b '' Meh '' assert rv.headers [ `` Vary '' ] == header_value rv = client.open ( `` / '' , method= '' OPTIONS '' ) flask.flash ( flask.Markup ( u '' < em > Testing < /em > '' ) , `` warning '' ) return flask.url_for ( `` test.index '' ) app = locate_app ( info , 'notanapp.py ' , None , raise_if_not_found=False ) client.get ( `` /fail '' ) buf.append ( ' Make sure to directly send your % s-request to this URL ' external = values.pop ( '_external ' , False ) return 'frontend says no ' , 403 ( os.environ , 'FLASK_DEBUG ' , monkeypatch.notset ) , `` } '' , * * options rv = client.get ( '/ ' , 'http : //example.com:8080/foo ' ) `` independent URL generation . You might be able to fix this by '' def add_url_rule ( self , rule , endpoint=None , view_func=None , app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True `` \n\n { tb } '' .format ( name=module_name , tb=traceback.format_exc ( ) ) ( `` / '' , `` '' , `` / '' ) , `` existing endpoint function : % s '' % endpoint attachment_filename = attachment_filename.decode ( 'utf-8 ' ) if self.config [ 'TRAP_HTTP_EXCEPTIONS ' ] : return `` /test_handler/ '' } if hasattr ( adapter , 'allowed_methods ' ) : assert client.delete ( `` / '' ) .data == b '' DELETE '' lambda s : s.app.url_value_preprocessors.setdefault ( self.name , [ ] ) .append ( f ) flask.session [ 'testing ' ] = 42 flask.session [ 'fizz ' ] = 'buzz ' expect_exception ( flask.session.__setitem__ , 'foo ' , 42 ) ( assert b '' Success ! '' in rv.data f = PyStringIO ( 'Test ' ) ( `` True '' , True , True ) , assert rv.data == b'flask ' assert rv.data == b ' 3 ' rv = client.get ( `` / '' ) stream_with_context , scheme = values.pop ( '_scheme ' , None ) recorded.append ( ( `` tear_down '' , kwargs ) ) flask.render_template ( 'missing.html ' ) ctx = app.test_request_context ( `` / '' , subdomain= '' xxx '' ) return render_template ( 'blog/index.html ' , posts=posts ) headers [ 'Content-Length ' ] = fsize if 'obj ' not in kwargs : return render_template ( 'frontend/index.html ' ) return `` utf-32 '' rv = flask.render_template_string ( `` { { get_stuff ( ) } } '' ) assert rv.data == b'E2 ' 'JSONIFY_MIMETYPE ' : 'application/json ' , '_method ' : None , assert flask.render_template_string ( `` { { foo } } '' , foo= '' < test > '' ) == `` & lt ; test & gt ; '' _scheme='https ' ) assert client.post ( `` /more '' ) .data == b '' POST '' 'belongs to the blueprint `` % s '' . ' % blueprint ) 'Framework : : Flask ' , return flask.url_for ( `` index '' ) value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) `` static/index.html '' , as_attachment=True , attachment_filename=filename rv = flask.send_file ( 'static/index.html ' , as_attachment=True , attachment_filename=filename ) error = 'Password is required . ' # __repr__ return flask.url_for ( `` app_index '' ) assert eb.script_root == `` @ app.route ( '/3 ' ) `` Werkzeug > =0.14 '' , return `` handled '' assert flask.request.args [ `` foo '' ] == `` bar '' assert ' x-sendfile ' not in rv.headers fn = getattr ( sys.modules [ `` __main__ '' ] , `` __file__ '' , None ) assert flask.g.user_agent == 'werkzeug/ ' + werkzeug.__version__ 'and decorators or other functionality was called too late.\n ' session_cookie_name = ConfigAttribute ( `` SESSION_COOKIE_NAME '' ) `` _scheme '' : None , last_modified=None , } , assert rv.data == b '' foo '' raise click.BadParameter ( ' '' -- cert '' must also be specified . ' , ctx , param ) `` function either returned None or ended without a return '' return `` Hello World ! '' http_host = ' { 0 } . { 1 } '.format ( subdomain , http_host ) headers [ `` Content-Length '' ] = fsize assert flask.url_for ( `` bar '' ) == `` /bar/ '' template_rendered = _signals.signal ( 'template-rendered ' ) app.config.from_mapping ( SECRET_KEY= '' config '' , TEST_KEY= '' foo '' ) assert message == `` This is a flash message '' app.add_template_test ( is_boolean , 'boolean ' ) return 'apple ' `` SESSION_COOKIE_SECURE '' : False , raise TypeError ( 'Allowed methods have to be iterables of strings , ' rv [ 'passthrough_errors ' ] = kwargs.get ( 'passthrough_errors ' ) ( ( `` /a/b '' , `` c/X/ .. '' ) , `` /a/b/c '' ) , send_file_max_age_default = ConfigAttribute ( matches = [ v for v in itervalues ( module.__dict__ ) if isinstance ( v , Flask ) ] assert b '' missing_key '' not in rv.data assert line [ : len ( expect ) ] == expect @ app.route ( '/key ' ) self.app.add_url_rule ( rule , ' % s. % s ' % ( self.blueprint.name , endpoint ) , @ app.route ( '/get ' ) rv_x = flask.json.loads ( rv.data ) [ `` x '' ] assert flask.render_template_string ( @ click.option ( ' -- with-threads/ -- without-threads ' , default=True , `` dumps '' , @ app.route ( '/forbidden-registered ' ) ctx.params [ `` cert '' ] = cert , value % ( request.url , exc.new_url ) ] ( ( `` /a/b/c '' , `` '' ) , `` /a/b/c/ '' ) , app.config [ `` PERMANENT_SESSION_LIFETIME '' ] = 42 @ frontend.route ( '/frontend-no ' ) ( `` '' , `` / '' , `` / '' ) , click.echo ( `` No routes were registered . '' ) def test_installed_module_paths ( modules_tmpdir , modules_tmpdir_prefix , assert sess [ `` foo '' ] == [ 42 ] # strip whitespace assert `` No routes were registered . '' in result.output view_func=self.send_static_file version = re.search ( r'__version__ = \ ' ( . * ? ) \ '' , f.read ( ) ) .group ( 1 ) assert c.get ( `` /bp/forbidden '' ) .data == b '' bp-forbidden '' assert b '' by test on 2018-01-01 '' in response.data ( `` notanapp.py '' , None ) , get_template_attribute , 'Use `` FLASK_APP= { module } : name to specify one . '.format ( module=module.__name__ ) app , rv = app.test_client ( ) .get ( '/ ' , errors_stream=out ) return `` utf-8 '' __version__ = `` 1.1.dev '' assert rv.data == b '' < missing > '' 'The view function did not return a valid response . The ' assert rv.mimetype == 'application/json ' assert `` cookies '' in str ( e.value ) blueprint = MyBlueprint ( 'blueprint ' , __name__ , static_folder='static ' ) assert flask.url_for ( 'index ' , _external=True , _scheme='https ' ) == 'https : //localhost/ ' raise Exception ( 'dummy ' ) `` -s '' , rv = c.get ( '/ ' ) assert `` Exception : oh no '' in result.output ( `` prefix '' , `` rule '' , `` url '' ) , if head [ : :2 ] == b'\x00\x00 ' : @ app.route ( '/ ' , methods='GET POST ' ) assert meth is not None , 'Unimplemented method % r ' % request.method meths = parse_set_header ( client.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) subdomain = self.options.get ( 'subdomain ' ) as_attachment=False , assert `` must be absolute '' in str ( excinfo.value ) app.config [ `` SERVER_NAME '' ] = `` example.com:1234 '' assert site_egg.app.instance_path == \ assert client.get ( '/frontend-no ' ) .data == b'frontend says no ' @ app.route ( '/zzz_post ' , methods= [ 'POST ' ] ) assert rv.data == b '' < h1 > Jameson < /h1 > '' ( os.path.join ( test_path , `` cliapp.app '' ) , test_path , `` cliapp.app '' ) , return flask.Response ( flask.stream_with_context ( Wrapper ( generate ( ) ) ) ) `` /bp '' , if self.config [ 'SERVER_NAME ' ] is not None : rv = client.get ( u'/ ? foo=정상처리'.encode ( 'euc-kr ' ) ) `` /auth/login '' , data= { `` username '' : username , `` password '' : password } 'loading is enabled if the reloader is disabled . ' ) `` itsdangerous > =0.24 '' , u'Hello World ' , view = Index.as_view ( 'index ' ) `` -- eager-loading/ -- lazy-loader '' , assert str ( cleanup_stuff [ 0 ] ) == 'dummy ' return `` Hello '' , 234 , { `` X-Foo '' : `` Bar '' } , `` ? ? ? '' return pytest.raises ( ValueError , ( ( `` a '' , `` test '' , b '' Incorrect username . `` ) , ( `` test '' , `` a '' , b '' Incorrect password . `` ) ) , if PY2 and os.name == 'nt ' : before_render_template = _signals.signal ( `` before-render-template '' ) kwargs.setdefault ( 'cls ' , AppGroup ) assert `` strrev '' in app.jinja_env.filters.keys ( ) for path in ( `` wsgi.py '' , `` app.py '' ) : default_output = invoke ( [ `` routes '' ] ) .output app.config [ `` TRAP_BAD_REQUEST_ERRORS '' ] = False assert rv.data == b'foo ' rv = client.get ( '/ ' , 'http : //127.0.0.1:5000/ ' ) `` % s.is_package ( ) method is missing but is required by Flask of `` if '_flashes ' in session else [ ] src_info = 'blueprint `` % s '' ( % s ) ' % ( srcobj.name , srcobj.import_name ) assert sorted ( rv.allow ) == [ `` GET '' , `` HEAD '' , `` POST '' ] assert s [ 't ' ] == ( 1 , 2 , 3 ) ( `` cliapp.factory '' , `` create_app ( ) '' , `` app '' ) , ( 'cliapp.factory ' , 'no_app ' ) , rule_methods = [ return flask.url_for ( `` .frontend_index '' ) if 'site_egg ' in sys.modules : self.record_once ( lambda s : s.app.teardown_request_funcs _data_sql = f.read ( ) .decode ( `` utf8 '' ) ( 'cliapp.factory ' , 'create_app ( ) ' , 'app ' ) , fg= '' red '' , for x in form_matches ) ) assert client.get ( '/1/update ' ) .status_code == 200 rv = flask.make_response ( flask.Response ( `` '' ) , 400 ) 'file contents were transmitted . To fix this error you should ' assert c.get ( '/bp/undefined ' ) .data == b'bp-default ' post = ( flask.url_for ( '/ ' ) val = os.environ.get ( 'FLASK_DEBUG ' ) rv = client.open ( `` /b/ '' ) assert message == 'This is a flash message ' @ pytest.mark.parametrize ( 'propagate_exceptions ' , [ None , True , False ] ) assert b'Failed to decode JSON object ' in rv.data app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = unexpected_max_age assert app.jinja_env.tests [ `` boolean '' ] ( False ) return { 'notanswer ' : 43 } { `` X-Foo '' : `` Testing '' , `` Content-Type '' : `` text/plain ; charset=utf-8 '' } , content_type='application/json ' ) packages= [ `` flask '' , `` flask.json '' ] , .replace ( u '' & '' , u '' \\u0026 '' ) app = modules_tmpdir.join ( 'config_module_app.py ' ) .write ( assert client.post ( `` /1/update '' ) .status_code == 403 ( os.environ , 'WERKZEUG_RUN_MAIN ' , monkeypatch.notset ) , modules_tmpdir.join ( `` importerror.py '' ) .write ( `` raise NotImplementedError ( ) '' ) assert recorded == [ 'push ' ] set_cookie = rv.headers.get ( `` set-cookie '' ) ' '' save_session '' is deprecated and will be removed in 1.1 . Use ' ' Response instance , or WSGI callable , but it was a ' `` Topic : : Software Development : : Libraries : : Python Modules '' , info.append ( `` % 5d : trying loader of % s '' % ( idx + 1 , src_info ) ) `` app = flask.Flask ( __name__ ) \n '' ( request.blueprint , code ) , ( None , code ) , disconnect pytest.raises ( TypeError , c.get , '/bad_wsgi ' ) assert rv.mimetype == 'text/plain ' Submount ( `` /foo '' , [ Rule ( `` /bar '' , endpoint= '' bar '' ) , Rule ( `` / '' , endpoint= '' index '' ) ] ) client.get ( '/test_filter/ ' ) buf = [ 'You tried to access the file `` % s '' in the request.files ' assert 'http : //localhost/foo/ ' in str ( e ) `` could not call it without arguments . Use `` macro = flask.get_template_attribute ( `` _macro.html '' , `` hello '' ) ' -- sort ' , '-s ' , `` environment . `` , return Flask ( ' _'.join ( [ 'app3 ' , foo , script_info.data [ 'test ' ] ] ) ) flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename= '' filename '' ) assert `` gin '' in flask.request.form rv [ `` result '' ] = `` running ... '' `` The URL was defined with a trailing slash so `` assert resp.data == b '' Hello World ! '' if hasattr ( loader , `` get_filename '' ) : monkeypatch.setattr ( `` flask.cli.dotenv '' , None ) assert client.get ( `` /bp_prefix/bar '' ) .status_code == 404 template_rendered = _signals.signal ( `` template-rendered '' ) if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == unexpected_max_age : app.config [ `` DEBUG '' ] = True `` flask '' : __version__ , if trigger == `` before '' : assert rv == `` https : //localhost/ '' rv = client.post ( `` /json '' , data= ' '' foo '' ' , content_type= '' application/x+json '' ) if self.url_rule and ' . ' in self.url_rule.endpoint : TEST_KEY='foo ' assert app.test_client ( ) .get ( '/ ' ) .status_code == 500 app.url_map.add ( Rule ( `` /foo '' , endpoint= '' bar '' ) ) `` werkzeug '' : werkzeug.__version__ , default_config = ImmutableDict ( # dotted name { 'test ' : 'dict ' } ( 'production ' , 'production ' , False ) , `` SELECT * FROM user WHERE username = ? `` , ( username , ) ( 'TEST_KEY ' , 'foo ' ) name='Flask ' , assert resp.headers [ `` X-Foo '' ] == `` a header '' recorded.append ( `` pop '' ) category_filter= [ `` message '' ] , with_categories=True parts = [ int ( i ) for i in version.split ( `` . '' ) ] samesite=samesite ( None , None , `` pocoo.org '' , 8080 ) , key = ' t ' def open_instance_resource ( self , resource , mode= '' rb '' ) : with app.test_request_context ( if hasattr ( loader , `` is_package '' ) : return `` 42 '' 'the root path needs to be explicitly ' app = modules_tmpdir.join ( `` config_module_app.py '' ) .write ( return `` 42 '' rv = client.get ( '/forbidden ' ) `` No root path can be found for the provided `` rv = client.get ( `` /text_headers '' ) assert `` after '' not in evts session , yield `` % s : '' % key for attr_name in ( `` create_app '' , `` make_app '' ) : assert 'domain=.example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) count = db.execute ( `` SELECT COUNT ( id ) FROM post '' ) .fetchone ( ) [ 0 ] key = `` m '' assert flask.session.get ( `` data '' ) == `` foo '' `` cls '' , assert value == 'attachment ' TagBytes , `` c '' : 3.14 , assert ( 'looked up from an endpoint that belongs to ' 'index ' , message=message , category=category ) assert category == 'notice ' if self.url_rule and `` . '' in self.url_rule.endpoint : base.join ( name ) .join ( `` __init__.py '' ) .ensure ( ) app.config [ `` MAX_COOKIE_SIZE '' ] = 100 ( `` other '' , `` other '' , False ) , from werkzeug.exceptions import ( expect_exception ( flask.session.__setitem__ , `` foo '' , 42 ) return `` , '' .join ( base_to_url ( x ) for x in value ) [ 'static ' , 'yyy_get_post ' , 'aaa_post ' ] , data=flask.json.dumps ( { `` x '' : { `` _foo '' : 42 } } ) , test_uuid = uuid.UUID ( bytes=b'\xDE\xAD\xBE\xEF ' * 4 ) return redirect ( url_for ( `` blog.index '' ) ) assert flask.session.get ( 'fizz ' ) == 'buzz ' `` ( body , status ) , or ( body , headers ) . '' assert 'GET , HEAD , OPTIONS , POST ' in output fail ( `` Could not parse changelog '' ) assert rv == '42 ' assert `` GET , HEAD , OPTIONS , POST '' in output 'module came from an import hook that does ' if view_func and hasattr ( view_func , '__name__ ' ) : cc = parse_cache_control_header ( rv.headers [ `` Cache-Control '' ] ) return URLSafeTimedSerializer ( app.secret_key , salt=self.salt , myview = MyView.as_view ( `` myview '' ) ( title , body , g.user [ `` id '' ] ) , assert 'before ' in evts assert 'bar stuff 1 ' == bar_options [ 'STUFF_1 ' ] rv = client.get ( '/response_status ' ) assert normal_rv [ 'foo ' ] == 'bar ' SERVER_NAME= '' www.example.com:8080 '' , return 'bam ' assert app.secret_key == 'config ' key_derivation=self.key_derivation , ' setting the SERVER_NAME config variable . ' ( '/plain ' , 'plain.html ' ) , loader.__class__.__name__ == 'NamespaceLoader ' ) : `` coverage '' , assert s [ ' u ' ] == the_uuid view = Index.as_view ( `` index '' ) extensions= [ 'jinja2.ext.autoescape ' , 'jinja2.ext.with_ ' ] `` loading is enabled if the reloader is disabled . `` , return flask.session [ `` test '' ] options.setdefault ( `` use_reloader '' , self.debug ) return render_template ( `` admin/index.html '' ) click.echo ( ' * Debug mode : { 0 } '.format ( 'on ' if debug else 'off ' ) ) ' Handlers can only be registered for exception classes or ' ( `` Documentation '' , `` http : //flask.pocoo.org/docs/ '' ) , ( 'cliapp.app ' , 'notanapp ' ) , get_debug_flag , `` % s- % s- % s '' assert called == [ `` flask_test '' , `` TEARDOWN '' ] 1 , 't ' , True , False , None , @ app.route ( '/ ' , defaults= { 'js ' : 'plain ' } ) app.url_map.charset = `` euc-kr '' endpoint , values , method=method , force_external=external info.append ( `` Warning : multiple loaders returned a match for the template . '' ) @ app.route ( '/test_filters/ ' ) ( os.path.join ( test_path , 'cliapp.app ' ) , test_path , 'cliapp.app ' ) , assert flask.url_for ( 'static ' , filename='index.html ' ) == '/foo/index.html ' app.config [ 'BAR_STUFF_2 ' ] = 'bar stuff 2 ' SERVER_NAME='localhost.localdomain:5000 ' monkeypatch.setitem ( app.config , 'EXPLAIN_TEMPLATE_LOADING ' , True ) `` handler '' , MethodNotAllowed , `` dev '' : [ app = create_app ( { return getattr ( current_app.jinja_env.get_template ( template_name ) .module , attribute ) flask.g.setdefault ( 'bar ' , 'hello world ' ) info.append ( `` See http : //flask.pocoo.org/docs/blueprints/ # templates '' ) test_uuid = uuid.UUID ( bytes=b '' \xDE\xAD\xBE\xEF '' * 4 ) environ_overrides = kwargs.setdefault ( 'environ_overrides ' , { } ) before_render_template , `` To fix this make sure to import all your view modules , `` server_name=self.config [ 'SERVER_NAME ' ] , # dotted name rv = flask.render_template_string ( ' { { get_answer ( ) } } ' ) pytest.raises ( BuildError , flask.url_for , `` spam '' ) `` SESSION_COOKIE_PATH '' : None , return app.config [ 'SESSION_COOKIE_PATH ' ] \ [ 'flask._preserve_context ' ] = self.preserve_context ] ) flask.jsonify ( uncompressed_msg ) , 200 ) [ 'test list ' , 2 , False ] , monkeypatch.setattr ( pkgutil , `` get_loader '' , get_loader ) return set ( ) ) frontend = Blueprint ( 'frontend ' , __name__ , template_folder='templates ' ) TEST_KEY = 'foo ' for url in `` /kw '' , `` /dict '' : app.config.from_mapping ( { `` context_template.html '' , `` not provide file name information or because `` required_methods.add ( `` OPTIONS '' ) assert rv.data == b '' 42 '' `` pallets-sphinx-themes '' , attachment_filename = attachment_filename.encode ( `` ascii '' ) return u'Hällo Wörld ' `` since we ca n't make browsers or HTTP clients redirect `` application = Flask ( `` appname '' ) path=app_root.lstrip ( `` / '' ) , hostname , port = `` localhost '' , 8000 url = `` /datetest { 0 } '' .format ( i ) # trailing comma space methods = [ `` OPTIONS '' ] eval ( compile ( f.read ( ) , startup , 'exec ' ) , ctx ) client.post ( '/foo ' , data= { } ) assert app.jinja_env.filters [ 'my_reverse ' ] ( 'abcd ' ) == 'dcba ' with open ( startup , `` r '' ) as f : assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'POST ' ] rv = client.get ( `` / '' , `` http : //www.localhost.localdomain:3000/ '' ) variable_name ) raise RuntimeError ( 'The environment variable % r is not set ' `` with the trailing slash if it was accessed `` environ [ `` SCRIPT_NAME '' ] = self.prefix author_email='armin.ronacher @ active-4.com ' , assert os.environ [ 'EGGS ' ] == ' 3 ' app.config.from_json ( os.path.join ( current_dir , 'static ' , 'config.json ' ) ) % ( rv , self ) pytest.fail ( 'Example code leaked ' ) from werkzeug.exceptions import Forbidden , InternalServerError , HTTPException , NotFound return flask.json.dumps ( flask.request.get_json ( ) [ ' x ' ] ) assert options [ `` filename '' ] == `` index.html '' key_derivation = `` hmac '' assert app.jinja_env.tests [ 'boolean ' ] == is_boolean return flask.Response ( flask.stream_with_context ( rv = app.test_client ( ) .open ( `` / '' , method= '' OPTIONS '' ) ( u'Ñandú／pingüino.txt ' , ' '' Nandu/pinguino.txt '' ' , raise TypeError ( for attr_name in ( `` app '' , `` application '' ) : app.add_url_rule ( '/ ' , endpoint='index ' ) @ pytest.mark.parametrize ( 'test_value , expected ' , [ ( True , ' '' \\u2603 '' ' ) , ( False , u ' '' \u2603 '' ' ) ] ) app.config [ `` SERVER_NAME '' ] = `` pocoo.org:8080 '' @ app.route ( '/2 ' ) client.environ_base [ `` REMOTE_ADDR '' ] = `` 127.0.0.2 '' assert client.get ( `` /py/bar/123 '' ) .data == b '' bp.123 '' `` point to a configuration file '' % variable_name purge_module ( 'config_package_app ' ) rv = client.get ( `` / '' , `` http : //localhost:5000/ '' ) app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] = max_age_default `` i '' : { `` test '' : `` dict '' } , view_func , info.append ( ' % s ' % line ) after_this_request , copy_current_request_context app.config [ 'DEBUG ' ] = True message += `` ( lazy loading ) '' return `` Hello '' , { `` X-Foo '' : `` Test '' , `` Content-Type '' : `` text/plain ; charset=utf-8 '' } adler32 ( assert app.jinja_env.globals [ 'get_stuff ' ] ( ) , 42 app.add_url_rule ( '/ ' , view_func=Index1.as_view ( 'index ' ) ) self.config [ 'TEMPLATES_AUTO_RELOAD ' ] = value return ' < % d > ' % o.val self.url_defaults.update ( self.options.get ( `` url_defaults '' , ( ) ) ) `` Programming Language : : Python : : 3.7 '' , from .ctx import has_request_context , has_app_context , \ error = `` User { 0 } is already registered . `` .format ( username ) error = 'User { 0 } is already registered . '.format ( username ) assert rv.data == b'Hello World ! ' name , u '' '' '' @ test.route ( '/test/ ' ) ( deps = pre-commit 'it\ 's a namespace package . In this case ' rv = client.get ( '/admin/index2 ' ) assert b'42 ' in answer_page_bytes @ app.route ( '/text_status ' ) buffered = kwargs.pop ( `` buffered '' , False ) `` /bar/456 '' , endpoint= '' foofoofoo '' , view_func=functools.partial ( foo_foo_foo ) cache_timeout=None , conditional=False , last_modified=None ) : key = `` b '' ( ( '/a ' , ' b/c ' ) , '/a/b/c ' ) , data= { 'username ' : username , 'password ' : password } assert `` Hello '' in result.output SERVER_NAME='127.0.0.1:5000 ' , ( `` A valid Flask application was not obtained from `` with app.test_request_context ( `` / '' ) : purge_module ( 'config_module_app ' ) from flask import ( `` import flask\n\napp = flask.Flask ( __name__ ) '' assert eb.path == '/ ' uncompressed_msg = { `` msg '' : { `` submsg '' : `` W00t '' } , `` msg2 '' : `` foobar '' } `` htmlsafe_dump '' , msg = { result.output errors = flask.Blueprint ( `` errors '' , __name__ ) app = Flask ( 'appname ' ) ( None , None , 'pocoo.org ' , 8080 ) , evts.append ( 'teardown ' ) return flask.url_for ( 'about ' , lang_code='en ' ) os.path.getmtime ( os.path.join ( app.root_path , `` static/index.html '' ) ) response.headers [ ' X-Foo ' ] = ' a header ' return `` E2 '' if `` db '' not in g : return render_template ( `` ./admin/index.html '' ) return app.config [ `` SESSION_COOKIE_SAMESITE '' ] blueprint = MyBlueprint ( `` blueprint '' , __name__ , static_folder= '' static '' ) license='BSD ' , ) & 0xffffffff @ frontend.route ( '/fe ' ) Popen ( [ 'git ' , 'tag ' ] , stdout=PIPE ) .communicate ( ) [ 0 ] .splitlines ( ) resp.mimetype = 'text/x-special ' blue = flask.Blueprint ( 'blue ' , __name__ ) `` / '' , environ_overrides= { `` SERVER_NAME '' : `` localhost:80 '' } ( exc is not None and self.app.preserve_context_on_exception ) : ctx , param ) ( request.blueprint , code ) , Rule ( '/ ' , endpoint='index ' ) _default_template_ctx_processor , request_started = _signals.signal ( `` request-started '' ) assert c.get ( `` /bump '' ) .data == b '' 1 '' app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = False def test_post_empty_json_adds_exception_to_response_content_in_debug ( `` simple_template.html '' , # should render this app.add_url_rule ( `` / '' , view_func=view ) AssertionError , bp.route ( `` /bar/123 '' , endpoint= '' bar.123 '' ) , lambda : None return set ( Popen ( [ `` git '' , `` tag '' ] , stdout=PIPE ) .communicate ( ) [ 0 ] .splitlines ( ) ) content_disposition = rv.headers [ 'Content-Disposition ' ] 0 , 42 , 3.14 , 't ' , 'hello ' , True , False , session_cookie_name = ConfigAttribute ( 'SESSION_COOKIE_NAME ' ) bar_options = app.config.get_namespace ( `` BAR_ '' , lowercase=False ) kwargs.setdefault ( 'sort_keys ' , current_app.config [ 'JSON_SORT_KEYS ' ] ) APPLICATION_ROOT= '' /test '' , elif ( from .globals import session , _request_ctx_stack , _app_ctx_stack , \ assert rv.headers [ 'Content-Type ' ] == 'text/html ' data= { 'username ' : username , 'password ' : password } return flask.render_template_string ( return `` app-error '' ScriptInfo , template_folder='template ' ) assert rv.headers [ ' X-Foo ' ] == 'Testing ' with app.open_resource ( `` static/index.html '' ) as f : assert ctx.request.url == 'https : //localhost/ ' is not None if endpoint [ :1 ] == `` . `` : @ backend.route ( '/backend-no ' ) detail = 'no match ' def test_werkzeug_passthrough_errors ( assert rv.data == b '' Awesome '' inject_version , app.wsgi_app = PrefixPathMiddleware ( app.wsgi_app , `` /bar '' ) ) return '42 ' has_app_context , safe_join , assert 'See http : //flask.pocoo.org/docs/blueprints/ # templates ' in text test_path , 'cliapp.inner1 ' run_command.make_context ( `` run '' , [ `` -- cert '' , __file__ ] ) assert e.value.args and 'session is unavailable ' in e.value.args [ 0 ] _endpoint_from_view_func , find_package , get_env , get_debug_flag , kwargs.setdefault ( 'object_hook ' , self.object_hook ) rv = self.config [ 'PRESERVE_CONTEXT_ON_EXCEPTION ' ] assert rv.data == b'http : //localhost/ ' '/1/delete ' , 'Please set either ` attachment_filename ` , pass a filepath to ' `` The environment variable % r is not set `` if key.startswith ( `` _ '' ) : or filename.startswith ( ' .. / ' ) default_output = invoke ( [ 'routes ' ] ) .output rv = c.open ( '/ ' , method='OPTIONS ' ) if hasattr ( sys , `` exc_clear '' ) : 'provide_automatic_options ' , None ) version= ' 1.0.0 ' , expect ( `` /vary-cookie-header-set '' ) def run_command ( info , host , port , reload , debugger , eager_loading , ( ( ' a/b/c ' , ' X/ .. ' ) , ' a/b/c/ . ' ) , lambda s : s.app.before_request_funcs.setdefault ( None , [ ] ) .append ( f ) assert rv.data.strip ( ) == b '' < h1 > Hello World ! < /h1 > '' return flask.Response ( `` Blub '' , headers= { `` X-Method '' : flask.request.method } ) ( `` /foo/ '' , `` '' , `` /foo/ '' ) , modules_tmpdir_prefix ) : 'run ' , [ ' -- cert ' , __file__ , ' -- key ' , __file__ ] ) provide_automatic_options=None , * * options ) : 'USE_X_SENDFILE ' : False , from .globals import current_app , g , request , session , _request_ctx_stack , \ default_handler.setFormatter ( elif `` FLASK_DEBUG '' in os.environ : ' { % if notanswer % } { { notanswer } } is not the answer . { % endif % } ' return ' < % s % r > ' % ( with open ( filename , ' w ' ) as f : 'Programming Language : : Python : : 3.7 ' , uuid4 ( ) , return `` '' , 204 ) : monkeypatch.chdir ( message = ( # nested import error url_rule , self.request.view_args = self.url_adapter.match ( return_rule=True ) bp.add_app_template_filter ( my_reverse , `` strrev '' ) assert g.user [ 'username ' ] == 'test ' assert session [ 'user_id ' ] == 1 rv = client.get ( '/getsession ' ) view_func=myview ) ' FROM post p JOIN user u ON p.author_id = u.id ' @ app.route ( '/bad_type ' ) with app.test_request_context ( '/ ' , method='POST ' , json= { 'foo ' : 'bar ' } ) : assert view_func is not None , 'expected view func if endpoint ' \ rv = app.send_static_file ( 'index.html ' ) assert rv.mimetype == `` text/html '' app.config [ 'SERVER_NAME ' ] = 'pocoo.org:8080 ' f = StringIO ( 'Test ' ) assert sorted ( GetDeleteView.methods ) == [ 'DELETE ' , 'GET ' ] `` _method '' : None , assert client.get ( '/forbidden ' ) .data == b'you shall not pass ' assert site_package.app.instance_path == \ app.write ( 'import flask\napp = flask.Flask ( __name__ ) ' ) _slash_escape = `` \\/ '' not in _json.dumps ( `` / '' ) __name__ , return render_template ( `` missing_template.html '' ) encoding = kwargs.pop ( 'encoding ' , None ) `` application to something unique and secret . '' raise RuntimeError ( 'signalling support is unavailable ' endpoint=None , expected = dict ( page='login ' ) `` warning . '' assert `` ERROR in test_logging : test '' in stream.getvalue ( ) bp = Blueprint ( 'auth ' , __name__ , url_prefix='/auth ' ) assert client.get ( `` /fe '' ) .data.strip ( ) == b '' /be '' required_methods.add ( 'OPTIONS ' ) Blueprint , flash , g , redirect , render_template , request , url_for assert app.jinja_env.globals [ `` get_stuff '' ] ( ) , 42 monkeypatch.setenv ( `` EGGS '' , `` 3 '' ) if len ( obj ) == 1 and `` _foo '' in obj : elif ( loader.__class__.__module__ == '_frozen_importlib ' and loc.__storage__ [ `` FOOO '' ] = [ 1 , 2 , 3 ] return 'utf-32-be ' rv = client.get ( `` /text_status '' ) ( u '' Vögel.txt '' , `` Vogel.txt '' , `` V % C3 % B6gel.txt '' ) , ( 'test ' , 'test ' , b'already registered ' ) , for name in ( `` .env '' , `` .flaskenv '' ) : client.get ( `` / '' , errors_stream=stream ) rv = c.get ( '/ ' ) # trailing comma space ( ( ' a ' , ' b ' , ' c ' ) , ' a/b/c ' ) , assert c.get ( `` /child-unregistered '' ) .data == b '' parent '' 'TESTING ' : False , from werkzeug.exceptions import BadRequest , NotFound , \ 'utf-8 ' , 'utf-8-sig ' , if `` script_info '' in arg_names : obj = ScriptInfo ( create_app=self.create_app , return 'custom ' app.view_functions [ `` index '' ] = index assert os.environ [ `` FOO '' ] == `` env '' app.config.update ( SERVER_NAME= '' 127.0.0.1:5000 '' ) result = runner.invoke ( cli , [ 'subgroup ' , 'test2 ' ] , obj=obj ) @ pytest.mark.parametrize ( 'encoding ' , ( @ pytest.mark.parametrize ( 'path ' , ( return `` < % s ' % s ' [ % s ] of % s > '' % ( assert rv == `` http : //example.com/static/index.html '' rv = client.get ( `` /response_status '' ) ( ( `` / .. '' , ) , `` / .. '' ) , ( 2.5 , 3 , 5.5 ) , app.add_url_rule ( '/ ' , 'index ' , index ) if os.environ.get ( 'WERKZEUG_RUN_MAIN ' ) ! = 'true ' : return type.__new__ ( metaclass , `` temporary_class '' , ( ) , { } ) flask.url_for ( 'spam ' ) assert client.get ( '/ ' ) .data == b'index ' raise NoAppException ( app.config.update ( ( '/a ' , ' b/ .. /b/ .. / .. /c ' ) , if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == expected_max_age : return `` banana '' add_etags=False ) ( ( '/ .. ' , ) , '/ .. ' ) , return flask.redirect ( `` /getsession '' ) @ pytest.mark.parametrize ( ( 'path ' , 'template_name ' ) , ( Rule ( '/bar ' , endpoint='bar ' ) , assert `` Traceback '' in result.output if silent and e.errno in ( errno.ENOENT , errno.EISDIR , errno.ENOTDIR ) : maintainer= '' Pallets team '' , ignored_methods = set ( ( ) if all_methods else ( 'HEAD ' , 'OPTIONS ' ) ) assert `` x-sendfile '' in rv.headers with app.test_request_context ( '/ ' , method='POST ' , data='malformed ' , assert client.get ( `` /2/foo '' ) .data == b '' 19/42 '' elif sort == 'methods ' : obj = ScriptInfo ( app.config [ 'PROPAGATE_EXCEPTIONS ' ] = propagate_exceptions `` flask._preserve_context '' ( os.environ , `` FLASK_APP '' , monkeypatch.notset ) , assert client.get ( `` /more '' ) .data == b '' GET '' ( `` cliapp.factory '' , `` create_app '' , `` app '' ) , attachment_filename=None , add_etags=True , assert rv.data == b '' W00t '' rv = client.get ( `` / '' , `` https : //localhost.localdomain:5000 '' ) 'belongs to the blueprint `` % s '' . ' % blueprint return `` Hi , status ! `` , 400 monkeypatch.setenv ( `` FLASK_ENV '' , env ) monkeypatch.setitem ( sys.modules , 'ssl_context ' , ssl_context ) return `` , 204 environ [ 'SCRIPT_NAME ' ] = self.prefix assert ' . ' not in view_func.__name__ , `` Blueprint view function name should not contain dots '' elif not check_password_hash ( user [ `` password '' ] , password ) : return `` bp-forbidden '' return `` utf-32-le '' `` available . '' from .signals import appcontext_tearing_down , got_request_exception , \ assert flask.json.loads ( rv.data ) [ `` x '' ] == http_date ( d.timetuple ( ) ) assert rv.data == b '' < h1 > 42 < /h1 > '' assert s [ 'di_t_tag ' ] == { ' t__ ' : 'not-a-tuple ' } assert msg.startswith ( key = ' m ' assert 'foo option 2 ' == foo_options [ 'option_2 ' ] } , app.route ( `` / '' , methods= [ `` OPTIONS '' ] ) ( index2 ) flask.session [ 'di_t_tag ' ] = { ' t__ ' : 'not-a-tuple ' } rv = self.config [ 'TEMPLATES_AUTO_RELOAD ' ] return type.__new__ ( metaclass , 'temporary_class ' , ( ) , { } ) `` INSERT INTO user ( username , password ) VALUES ( ? , ? ) '' , 'You tried to access the file `` % s '' in the request.files ' url = '/jsonify_basic_types ' assert rv.mimetype == 'application/vnd.api+json ' 'SESSION_COOKIE_SECURE ' : False , APPLICATION_ROOT='/bar ' 'EXPLAIN_TEMPLATE_LOADING ' : False , set_cookie = rv.headers.get ( 'set-cookie ' ) ( `` warning '' , flask.Markup ( u '' < em > Testing < /em > '' ) ) , message_flashed = _signals.signal ( `` message-flashed '' ) methods = getattr ( view_func , `` methods '' , None ) or ( `` GET '' , ) cert = ctx.params.get ( 'cert ' ) assert app.jinja_env.globals [ `` get_answer '' ] ( ) == 42 `` -- sort '' , return `` ignored anyway '' messages = flask.get_flashed_messages ( cmd='export ' if os.name == 'posix ' else 'set ' , @ bp.route ( '/ ' ) self , import_name , template_folder , root_path=root_path @ pytest.mark.parametrize ( ( 'prefix ' , 'rule ' , 'url ' ) , ( f , as_attachment=True , attachment_filename= '' index.html '' exec ( `` def reraise ( tp , value , tb=None ) : \n raise tp , value , tb '' ) assert 'http : //localhost/auth/login ' == response.headers [ 'Location ' ] expect ( `` /no-vary-header '' , None ) return redirect ( url_for ( 'auth.login ' ) ) `` EXPLAIN_TEMPLATE_LOADING '' : False , assert context [ 'whiskey ' ] == 42 assert rv.headers [ `` Content-Type '' ] == `` text/html '' @ app.route ( '/test_filter/ ' ) attachment_filename='index.html ' ) 'MAX_CONTENT_LENGTH ' : None , ( '/a ' , ' b/ .. / .. /c ' ) , ( os.environ , `` FLASK_DEBUG '' , monkeypatch.notset ) , assert app.jinja_env.globals [ 'get_answer ' ] is get_answer content_disposition = rv.headers [ `` Content-Disposition '' ] return Flask ( `` appname '' ) response.data = `` stuff '' http_method_funcs = frozenset ( [ 'get ' , 'post ' , 'head ' , 'options ' , assert c.get ( `` /parent '' ) .data == b '' parent '' assert rv.data == b '' http : //example.com:1234/foo/ '' with app.open_resource ( `` static/index.html '' ) as f : template_folder=template_folder , assert 'FOO ' in os.environ r.set_cookie ( 'foo ' , 'bar ' * 100 ) `` Response instance , or WSGI callable , but it was a '' assert normal_rv [ `` foo '' ] == `` bar '' adapter.match ( method= ' -- ' ) assert app.logger.name == `` flask.app '' return app.response_class ( 'Hello world ' , 400 ) , 500 output = invoke ( [ `` routes '' , `` -- all-methods '' ] ) .output if sort in ( `` endpoint '' , `` rule '' ) : `` License : : OSI Approved : : BSD License '' , ' Add an entry to your hosts file , for example ' bp.json_decoder if bp and bp.json_decoder assert app.jinja_env.tests [ `` boolean '' ] == is_boolean res = client.get ( `` / '' ) appcontext_popped , test = flask.Blueprint ( `` test '' , __name__ ) def login ( self , username='test ' , password='test ' ) : rv = client.open ( '/b/ ' ) assert flask.url_for ( `` spam '' ) == `` /test_handler/ '' packages= [ 'flask ' , 'flask.json ' ] , base_url = ' { scheme } : // { netloc } / { path } '.format ( __setitem__ = __delitem__ = clear = pop = popitem = \ resp = client.get ( '/ ' ) == `` /admin/static/test.txt '' flask.g.foo = 'bar ' bp.add_app_template_test ( is_boolean , 'boolean ' ) assert `` foo option 2 '' == foo_options [ `` foo_option_2 '' ] return `` < % s % s > '' % ( self.__class__.__name__ , dict.__repr__ ( self ) ) flask.session [ `` data '' ] = `` foo '' client.post ( '/1/update ' , data= { 'title ' : 'updated ' , 'body ' : `` } ) @ app.route ( '/vary-cookie-header-set ' ) `` iname , aname , result '' , rv = flask.send_file ( 'static/index.html ' ) flask.url_for ( 'index ' ) b ' < p > Hello World ! ' , ] rv = client.get ( '/ ' , 'http : //example.com/ ' ) @ bp.route ( '/bar ' ) ( `` a/test '' , os.path.join ( cwd , `` a '' ) , `` test '' ) , return `` POST '' ( 'cliapp.factory ' , 'create_app2 ( `` foo '' , `` bar '' , ) ' , 'app2_foo_bar ' ) , def expect ( path , header_value='Cookie ' ) : monkeypatch.setattr ( 'flaskr.db.init_db ' , fake_init_db ) ( ( '/a/b ' , ' c/X/ .. ' ) , '/a/b/c ' ) , rv = client.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) assert 'cookie is too large ' in str ( w.message ) return `` < % d > '' % o.val myview = MyView.as_view ( 'myview ' ) 'Python % ( python ) s\n ' assert flask.g.get ( ' x ' , 11 ) == 11 rv = client.get ( '/ ' ) ( 2 , None , 2 ) , @ click.option ( ' -- reload/ -- no-reload ' , default=None , return `` Aha ! '' `` SEND_FILE_MAX_AGE_DEFAULT '' , get_converter=_make_timedelta ( `` Code '' , `` https : //github.com/pallets/flask '' ) , create_app=None , assert rv.data == u '' 정상처리 '' .encode ( `` utf-8 '' ) app.register_blueprint ( bp , url_prefix= '' /py '' ) assert `` OPTIONS '' in rv.allow assert result.output == 'flaskgroup\n ' rv = client.get ( `` / '' , headers= { `` Range '' : `` bytes=4- '' } ) salt = 'cookie-session ' url= '' http : //flask.pocoo.org/docs/patterns/jquery/ '' , return 'application itself says no ' , 403 assert flask.g.get ( ' x ' ) == 42 == `` https : //localhost/ '' b '' & lt ; p & gt ; Hello World ! `` , return 'Hello ' , 234 , { ' X-Foo ' : 'Bar ' } , ' ? ? ? ' self.session = session_interface.open_session ( self.app , self.request ) os.path.dirname ( __file__ ) , 'test_apps ' , 'helloworld ' @ bp.route ( '/undefined ' ) assert 'bar stuff 2 ' == bar_options [ 'BAR_STUFF_2 ' ] assert 'gin ' in flask.request.form id : black assert get_db ( ) .execute ( `` -- key '' , assert c.get ( `` /undefined '' ) .data == b '' default '' ' `` session_interface.save_session '' instead . ' return redirect ( url_for ( 'index ' ) ) False , `` loaded . Set this variable and make it `` raise RuntimeError ( `` Can not nest client invocations '' ) assert rv.headers [ `` X-Foo '' ] == `` Test '' return flask.url_for ( 'index ' ) `` Request finalizing failed with an `` `` error while handling an error '' assert client.get ( '/create ' ) .status_code == 200 if `` . '' not in rv : blueprint , self.blueprints [ blueprint.name ] , blueprint.name load_dotenv ( os.path.join ( test_path , `` .flaskenv '' ) ) app.config [ 'TRAP_HTTP_EXCEPTIONS ' ] = True assert client.get ( '/be ' ) .data.strip ( ) == b'/fe ' 'if __name__ == `` __main__ '' guard to silence this ' assert meh ( ) == 'http : //localhost/meh ' ) .fetchone ( ) is not None : assert result.output == `` testapp\n '' assert c.get ( `` /bump '' ) .data == b '' 2 '' assert 'Vary ' not in rv.headers assert flask.render_template_string ( ' { { g.spam } } ' ) == 'eggs ' pytest.raises ( 'your POST-request to this URL ' ) in str ( e ) { `` di '' : `` di '' } , not ( base_url or subdomain or url_scheme ) assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost:80 ' } ) : required_methods = set ( getattr ( view_func , `` required_methods '' , ( ) ) ) category_filter= [ 'message ' , 'warning ' ] ) rv = flask.send_file ( `` static/index.html '' ) ctx = run_command.make_context ( 'run ' , [ ' -- cert ' , 'ssl_context ' ] ) assert 'secure ' in cookie bp = flask.Blueprint ( 'test ' , __name__ ) if not hasattr ( client , 'redirect_client ' ) : assert rv.mimetype == 'application/octet-stream ' rv = client.delete ( '/more ' ) category_filter= [ 'message ' , 'warning ' ] , with_categories=True ) url='http : //flask.pocoo.org/docs/patterns/jquery/ ' , assert 'returned None ' in str ( e ) flask.flash ( `` This is a flash message '' , category= '' notice '' ) 'one . '.format ( module=module.__name__ ) b ' < p > Hello World ! ' assert c.put ( '/ ' ) .status_code == 405 ' WHERE p.id = ? ' , ( 'tést.txt ' , 'test.txt ' , 't % C3 % A9st.txt ' ) , assert b '' 43 '' in answer_page_bytes assert index ( ) == `` Hello World ! '' ( `` / '' , `` / '' , `` / '' ) , response = app.test_client ( ) .get ( '/ ' ) reason='Signals require the blinker library . ' assert s [ `` di_t_tag '' ] == { `` t__ '' : `` not-a-tuple '' } app.add_url_rule ( `` / '' , view_func=View.as_view ( `` index '' ) ) return get_env ( ) == `` development '' assert `` is_boolean '' in app.jinja_env.tests.keys ( ) g = LocalProxy ( partial ( _lookup_app_object , `` g '' ) ) return `` testing '' assert flask.g.get ( 'foo ' ) is None ( `` cliapp.importerrorapp '' , None ) , rv [ `` passthrough_errors '' ] = kwargs.get ( `` passthrough_errors '' ) ' } ' `` MAX_COOKIE_SIZE '' : 4093 , assert `` See http : //flask.pocoo.org/docs/blueprints/ # templates '' in text @ app.route ( '/parent ' ) 'To fix this make sure to import all your view modules , ' if `` json '' in kwargs : return Flask ( 'appname ' ) _request_ctx_err_msg = `` '\ flask.Response ( `` Hello world '' , 404 , { `` X-Foo '' : `` Baz '' } ) , expected = `` /login '' response.vary.add ( `` Cookie '' ) `` The template was looked up from an endpoint that `` bp = flask.Blueprint ( 'foo.bar.baz ' , __name__ , load_dotenv=True , assert rv.data == b'somethingsomething ' [ 4:16 ] bp.add_app_template_test ( is_boolean , `` boolean '' ) lambda s : s.app.teardown_request_funcs.setdefault ( self.name , [ ] ) .append ( f ) flask.Response ( `` '' , headers= { `` Content-Type '' : `` text/html '' } ) , app , path='/ ' , base_url=None , subdomain=None , url_scheme=None , flask.g.something = 'value ' client.get ( '/fail ' ) `` WARNING : Do not use the development server in a production '' return flask.json.dumps ( flask.request.get_json ( ) [ `` x '' ] ) sess [ 'foo ' ] = [ 42 ] click.echo ( `` Hello , World ! '' ) rv = client.post ( '/json ' , data= ' '' foo '' ' , content_type='application/x+json ' ) ( ' a/test ' , os.path.join ( cwd , ' a ' ) , 'test ' ) , ( `` test.a.b '' , cwd , `` test.a.b '' ) , @ app.template_filter ( 'strrev ' ) myapp1 = Flask ( 'appname1 ' ) assert sorted ( meths ) == [ `` DELETE '' , `` GET '' , `` HEAD '' , `` OPTIONS '' , `` POST '' ] script_name=self.config [ `` APPLICATION_ROOT '' ] , 'SECRET_KEY ' : None , modules_tmpdir.join ( 'var ' ) .join ( 'site_package-instance ' ) assert False , 'Flask ( import_name ) is importing import_name . ' return flask.render_template ( 'template_test.html ' , value=False ) def index ( test= ' a ' ) : bp = flask.Blueprint ( `` bp '' , __name__ ) raise RuntimeError ( @ app.route ( '/ ' , subdomain='test ' ) `` SERVER_NAME '' : None , loader.__class__.__module__ == `` _frozen_importlib '' 'dotenv ' : [ 'python-dotenv ' ] , assert 'Initialized ' in result.output 'Werkzeug > =0.14 ' , assert rv.headers [ ' X-Foo ' ] == 'Test ' assert rv.headers.getlist ( ' X-Foo ' ) == [ 'Baz ' , 'Bar ' ] assert app.instance_path == str ( modules_tmpdir.join ( `` instance '' ) ) assert recorded == [ `` push '' ] @ app.route ( '/ ' ) fn = getattr ( sys.modules [ '__main__ ' ] , '__file__ ' , None ) ( os.environ , 'FLASK_RUN_FROM_CLI ' , monkeypatch.notset ) , flask.flash ( u'Hello World ' , 'error ' ) url = flask.url_for ( 'view ' , company_id='xxx ' ) errno.ENOENT , errno.EISDIR , errno.ENOTDIR assert called == [ 'request ' , 'app ' ] @ app.route ( '/ ' , subdomain= ' < company_id > ' ) if 'defaults ' in options : rv = flask.send_file ( FakePath ( `` static/index.html '' ) ) or ( mt.startswith ( `` application/ '' ) ) app.config.update ( SESSION_COOKIE_SAMESITE='Strict ' ) return flask.render_template ( `` index.html '' ) self , assert type ( s [ `` b '' ] ) == bytes SECRET_KEY= '' dev '' , assert flask.render_template ( `` nested/nested.txt '' ) == `` I 'm nested '' rv = flask.send_file ( f , mimetype= '' application/octet-stream '' ) template_folder= '' templates '' , return `` normal index '' `` msg2 '' : `` foobar '' app.config [ 'DEBUG ' ] = True PassList , os.path.join ( test_path , 'cliapp ' , 'inner1 ' , '__init__ ' ) , 'is `` % s '' instead of `` multipart/form-data '' which means that no ' flask.session [ 'test ' ] = 'flask ' return 'boom ' `` data '' , assert eb.host == 'example.com ' assert response.get_json ( ) [ 'result ' ] == result eval ( compile ( f.read ( ) , startup , `` exec '' ) , ctx ) app_page_bytes = client.get ( '/ ' ) .data `` import os\n '' @ app.route ( '/index ' ) assert rv.data == b '' 3 '' return `` Hello '' defaults [ 'ENV ' ] = get_env ( ) url_scheme = app.config [ `` PREFERRED_URL_SCHEME '' ] assert 'path=/foo ' in rv.headers [ 'set-cookie ' ] .lower ( ) resp = client.get ( '/ ' ) .data follow_redirects = kwargs.pop ( 'follow_redirects ' , False ) assert client.get ( `` /foo '' ) .data == b '' Meh '' 'and as such configuration could not be ' fail ( `` You need to install the wheel package . '' ) @ forbidden_bp.route ( '/nope ' ) ( None , 80 , `` pocoo.org '' , 80 ) , self.record_once ( lambda s : s.app.url_default_functions eb = make_test_environ_builder ( app , `` https : //example.com/ '' ) if sys.version_info > = ( 2 , 7 ) and not hasattr ( sys , `` pypy_translation_info '' ) : session [ `` user_id '' ] = user [ `` id '' ] 'delete ' , 'put ' , 'trace ' , 'patch ' ] ) @ bp.route ( '/ ' ) return 'Meh ' return 'testing ' rv = flask.make_response ( 'Awesome ' ) assert rv.data.strip ( ) == b '' / * nested file * / '' if mod is not None and hasattr ( mod , `` __file__ '' ) : return 'Hi , status ! ' , 400 url = flask.url_for ( 'foo.bar.baz.view ' ) row = `` { { 0 : < { 0 } } } { { 1 : < { 1 } } } { { 2 : < { 2 } } } '' .format ( * widths ) return `` Awesome '' `` will not show up . '' assert flask.request.path == '/ ' serializer=self.serializer , set_debug_flag=self.set_debug_flag ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' ] if `` content_type '' not in kwargs : 'TESTING ' : True , assert `` foo option 1 '' == foo_options [ `` foo_option_1 '' ] rv = rv.make_conditional ( request , accept_ranges=True , complete_length=fsize ) if head [ : :2 ] == b '' \x00\x00 '' : if loader is None or import_name == `` __main__ '' : assert 'set-cookie ' in rv.headers os.chdir ( os.path.join ( os.path.dirname ( __file__ ) , `` .. '' ) ) @ pytest.mark.parametrize ( 'set_debug_flag ' , ( True , False ) ) res = client.get ( '/ ' ) Environment , return 'Awesome ' assert flask.g.get ( 'foo ' , 'bar ' ) == 'bar ' rv = client.get ( '/ ' , 'http : //127.0.0.1:3000/ ' ) ' '' FLASK_APP=\ ' { module } : { factory } ( args ) \ ' '' to specify ' flask.Markup ( u ' < em > Testing < /em > ' ) flask.g.lang_code = values.pop ( `` lang_code '' , None ) [ `` get '' , `` post '' , `` head '' , `` options '' , `` delete '' , `` put '' , `` trace '' , `` patch '' ] return 'Meh ' assert flask.url_for ( `` foo '' ) == `` /foo/ '' rv = client.get ( '/ ' ) if 'loader ' not in options : assert flask.session.get ( 'fizz ' ) == 'buzz ' app.config [ `` TEMPLATES_AUTO_RELOAD '' ] = False os.path.abspath ( os.path.join ( 'import os\n ' return u '' '' site_packages ) : rv = client.get ( '/ ' , 'http : //example.com:8080/ ' ) name='flaskr ' , ) : assert s [ `` di_tag '' ] == { `` di '' : `` not-a-dict '' } expected = '/login ' __slots__ = ( 'tags ' , 'order ' ) match = re.search ( `` ^Version\s+ ( . * ) '' , line.strip ( ) ) @ app.route ( '/accept ' , methods= [ 'POST ' ] ) connect = ( assert c.get ( '/bp/forbidden ' ) .data == b'bp-forbidden ' ) ) ) # not a Python file , will be caught during import ( 'cliapp.app ' , None , 'testapp ' ) , client.get ( `` /fail '' ) assert rv.data == b '' Hello '' return self.get ( `` _permanent '' , False ) `` UPDATE post SET title = ? , body = ? WHERE id = ? `` , ( title , body , id ) _request_ctx_err_msg = `` '' '' \ secret_key = 'test key ' root_mod_name = import_name.split ( ' . ' ) [ 0 ] assert ctx.request.url == 'http : //xxx.example.com:1234/foo/ ' assert client.get ( `` / '' ) .data == b '' None '' 'TRAP_HTTP_EXCEPTIONS ' : False , assert macro ( `` World '' ) == `` Hello World ! '' rv = client.post ( `` / '' ) rv = client.get ( '/E3 ' ) ctx = run_command.make_context ( run_command.make_context ( 'run ' , [ ' -- cert ' , 'flask ' ] ) threaded=with_threads , ssl_context=cert ) methods = getattr ( view_func , 'methods ' , None ) or ( 'GET ' , ) @ click.option ( `` filename '' : unicodedata.normalize ( `` NFKD '' , attachment_filename ) .encode ( maintainer_email='contact @ palletsprojects.com ' , ( `` , '/bar ' , '/bar ' ) , `` iname , aname '' , assert client.get ( '/1/foo ' ) .data == b'23/42 ' ' % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt ' ) , request_tearing_down = _signals.signal ( `` request-tearing-down '' ) prepare_import , root_path=None ) : 'but is getting modified now . These changes ' if current_app.config [ 'JSONIFY_PRETTYPRINT_REGULAR ' ] or current_app.debug : need_dotenv = pytest.mark.skipif ( ( '/foo ' , '/bar ' , '/foo/bar ' ) , str ( modules_tmpdir.join ( 'var/ ' ) .join ( 'site_egg-instance ' ) ) assert rv.data == b '' Hello Custom World ! '' rv = rv.rsplit ( `` : '' , 1 ) [ 0 ] .lstrip ( `` . '' ) def __init__ ( self , app_import_path=None , create_app=None , return 'Aha ! ' mimetype=current_app.config [ `` JSONIFY_MIMETYPE '' ] , ( '/a ' , ' b ' , ' c/ .. / .. ' ) , if os.path.basename ( path ) == '__init__ ' : help= '' Enable or disable eager loading . By default eager `` } ) , content_type='application/json ' ) if os.environ.get ( `` WERKZEUG_RUN_MAIN '' ) == `` true '' : assert c.get ( '/parent ' ) .data == b'parent ' self.logger.error ( pytest.raises ( ValueError , flask.url_for , `` index '' , _scheme= '' https '' ) run_command.make_context ( `` run '' , [ `` -- cert '' , `` not_here '' ] ) assert 'Exception on / [ GET ] ' in err mimetype=None , rv.request.environ [ `` werkzeug.request '' ] = None gmt = FixedOffset ( hours=0 , name= '' GMT '' ) return flask.render_template ( 'escaping_template.html ' , text=text , HTTPException , ( `` path '' , `` template_name '' ) , assert ctx.params [ `` cert '' ] is ssl_context logging.Formatter ( `` [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s '' ) if head [ 1 : :2 ] == b'\x00\x00 ' : assert not app.config.from_json ( `` missing.json '' , silent=True ) return ' % s/ % d ' % ( bar , baz ) key = ' u ' self.record ( lambda s : s.add_url_rule ( rule , endpoint , view_func , * * options ) ) ( `` test/__init__ '' , cwd , `` test '' ) , @ app.route ( '/small_tuple ' ) sys.argv = [ `` -m '' , this_module ] + args assert rv.data == b ' b ' doc= '' The URL prefix that the static route will be registered for . `` , assert flask.url_for ( `` static '' , filename= '' index.html '' ) == `` /static/index.html '' assert client.get ( `` /1 '' ) .data == b '' banana '' return flask.url_for ( 'myapp.backend.backend_index ' ) app = locate_app ( self , import_name , None , rev : 19.3b0 response.vary.add ( 'Cookie ' ) assert sorted ( flask.g ) == [ `` bar '' , `` foo '' ] `` % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt '' , StringIO ( `` Test '' ) , `` before-signal '' , template_folder= '' templates '' , assert app.config.from_envvar ( `` FOO_SETTINGS '' ) `` expression . `` .format ( name=app_name ) self.config [ 'DEBUG ' ] = value return filename.endswith ( ( '.html ' , '.htm ' , '.xml ' , '.xhtml ' ) ) flask.g.setdefault ( `` bar '' , `` the cake is a lie '' ) help='The interface to bind to . ' ) rv = flask.json.htmlsafe_dumps ( ' < /script > ' ) complete_length=fsize ) monkeypatch.setattr ( werkzeug.serving , 'run_simple ' , run_simple_mock ) bar_options = app.config.get_namespace ( @ app.route ( '/E1 ' ) rv = client.get ( `` /admin/index2 '' ) assert not recwarn.list , `` \n '' .join ( str ( w.message ) for w in recwarn.list ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' , 'PUT ' ] assert 'vodka ' in flask.request.args rv = c.get ( `` /read '' ) locked_cached_property , assert app.jinja_env.filters [ `` strrev '' ] == my_reverse assert ctx.params [ 'cert ' ] is ssl_context assert app.jinja_env.filters [ 'strrev ' ] ( 'abcd ' ) == 'dcba ' assert evts == [ `` first '' , `` before '' , `` after '' , `` teardown '' ] `` Topic : : Software Development : : Libraries : : Application Frameworks '' , click.echo ( ' * Environment : { 0 } '.format ( env ) ) `` Session backend did not open a session. `` `` Check the configuration '' print ( `` Error : '' , message % args , file=sys.stderr ) kwargs [ `` content_type '' ] = `` application/json '' with app.test_request_context ( create_app=self.create_app , set_debug_flag=self.set_debug_flag url = `` /uuid_test '' reason= '' not implemented within werkzeug '' if len ( obj ) == 1 and '_foo ' in obj : `` Programming Language : : Python : : 3.6 '' , d = types.ModuleType ( `` config '' ) assert rv.data == b'True ' assert `` FOO '' in os.environ assert sorted ( meths ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] context [ `` whiskey '' ] = 43 if self.app.config [ `` EXPLAIN_TEMPLATE_LOADING '' ] : return val.lower ( ) not in ( `` 0 '' , `` false '' , `` no '' ) [ sys.executable , 'setup.py ' , 'bdist_egg ' ] , @ bp.endpoint ( 'bar ' ) return `` bam '' calls.append ( `` handler '' ) app.add_url_rule ( '/ ' , 'index ' , self.index ) `` debug , expected_flag , expected_default_flag '' , raise RuntimeError ( 'Test case where BuildError is not current . ' ) appcontext_popped , message_flashed , before_render_template assert rv.data == b '' True '' elif os.path.basename ( parent ) .lower ( ) == `` lib '' : @ app.route ( '/test/ ' ) assert app.instance_path == modules_tmpdir.join ( `` var '' ) .join ( `` site_app-instance '' ) rv = client.post ( `` / '' , data= { } , follow_redirects=True ) assert rv.data == b '' /test/ '' `` SELECT p.id , title , body , created , author_id , username '' assert client.post ( `` / '' ) .status_code == 405 datetime.date ( 1975 , 1 , 5 ) value , options = parse_options_header ( rv.headers [ `` Content-Disposition '' ] ) raise RuntimeError ( 'This decorator can only be used at local scopes ' cert = ctx.params.get ( `` cert '' ) response = client.post ( `` /add '' , data= { `` a '' : a , `` b '' : b } ) startup = os.environ.get ( `` PYTHONSTARTUP '' ) http_host = app.config.get ( `` SERVER_NAME '' ) or `` localhost '' app.config.update ( SERVER_NAME='localhost ' ) rv = { 'app ' : self , ' g ' : g } filenames = { 'filename ' : attachment_filename } ( ( `` /a/b/c '' , `` ./ '' ) , `` /a/b/c/ . `` ) , `` SESSION_COOKIE_HTTPONLY '' : True , doc='The absolute path to the configured static folder . ' assert os.environ [ `` SPAM '' ] == `` 1 '' `` Flask will automatically redirect to the URL `` recorded.append ( 'pop ' ) assert rv.data == b '' Hello from the Admin '' def expect ( path , header_value= '' Cookie '' ) : category_filter= [ 'message ' ] , with_categories=True ) trap_bad_request = self.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] return { `` notanswer '' : 43 } @ app.route ( '/args_unpack ' ) SECRET_KEY = 'config ' bp = flask.Blueprint ( 'test ' , __name__ , url_prefix=prefix ) assert 'filename= % s ' % ascii in content_disposition def __init__ ( assert rv == 'https : //localhost/ ' if self.config [ `` SERVER_NAME '' ] is not None : return 'Hello ' return `` Hello World ! '' assert 'after ' in evts assert 'Exception : oh no ' in result.output assert type ( s [ 'm ' ] ) == flask.Markup self.app_import_path = app_import_path or os.environ.get ( 'FLASK_APP ' ) `` Topic : : Internet : : WWW/HTTP : : WSGI : : Application '' , self , app , client flask.g.setdefault ( `` bar '' , `` hello world '' ) return `` '' @ pytest.mark.parametrize ( 'iname , aname ' , ( assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' ] app = site_packages.mkdir ( `` site_package '' ) `` Add an entry to your hosts file , for example '' `` pushed . This has to be executed when application context is '' 'tox ' , purge_module ( 'installed_package ' ) flashes = session.get ( '_flashes ' , [ ] ) rv = client.get ( `` / ? name=World '' ) filenames = { `` filename '' : attachment_filename } with_threads , cert ) : rv = client.get ( `` / '' , headers= { `` Range '' : `` bytes=-10 '' } ) `` headers '' % filename , http_host = `` { 0 } . { 1 } '' .format ( subdomain , http_host ) 'Flask % ( flask ) s\n ' wrap_for_ctx = kwargs.pop ( `` with_appcontext '' , True ) type=click.Choice ( ( `` endpoint '' , `` methods '' , `` rule '' , `` match '' ) ) , monkeypatch.setenv ( 'FLASK_DEBUG ' , debug ) return FileSystemLoader ( os.path.join ( self.root_path , ( id , ) , app.config.update ( { `` JSONIFY_MIMETYPE '' : `` application/vnd.api+json '' } ) @ app.route ( '/get_post/ < int : x > / < int : y > ' , methods= [ 'GET ' , 'POST ' ] ) return flask.url_for ( '.index ' ) ) .encode ( encoding ) key = ' d ' assert c.get ( `` / '' ) .data == b '' GET '' with open ( `` CHANGES.rst '' ) as f : if flask.request.method == 'POST ' : return self.url_rule.endpoint.rsplit ( `` . `` , 1 ) [ 0 ] 'When `` -- cert '' is an SSLContext object , `` -- key is not used . ' , ctx , param ( None , None ) , help= '' The key file to use when specifying a certificate . `` , assert client.get ( `` / '' ) .data == b '' index '' rv = app.test_client ( ) .get ( `` / '' , errors_stream=out ) assert rv.data == b '' 127.0.0.2 '' ctx = app.test_request_context ( '/ ? name=World ' ) ] , app.config [ 'SESSION_COOKIE_DOMAIN ' ] = rv rv = client.get ( '/admin/static/test.txt ' ) response = app.test_client ( ) .get ( `` / '' , headers= { `` host '' : `` xn -- on-0ia.com '' } ) assert c.put ( `` / '' ) .status_code == 405 assert os.environ [ 'SPAM ' ] == ' 1 ' assert client.get ( '/auth/login ' ) .status_code == 200 assert rv.data == b'https : //localhost/ ' `` key was set . Set the secret_key on the `` matches = [ `` HTTP error codes . `` .format ( code_or_exception ) @ bp.route ( '/ < int : id > /update ' , methods= ( 'GET ' , 'POST ' ) ) __slots__ = ( `` serializer '' , ) flask.Response ( `` ) , 400 ) flask.g.lang_code = values.pop ( `` lang_code '' ) myapp2 = Flask ( `` appname2 '' ) flask.jsonify ( `` fake args '' , kwargs= '' fake '' ) cwd=str ( modules_tmpdir ) error = `` Password is required . '' rv = client.get ( `` / '' , `` http : //test.localhost.localdomain/ '' ) @ bp.route ( '/bar/123 ' , endpoint='123 ' ) is_flag=True , or not isinstance ( request.routing_exception , RequestRedirect ) 'This was submitted : % s ' % ' , '.join ( ' '' % s '' ' % x if not self.subdomain_matching default_config = ImmutableDict ( { ' `` session_interface.open_session '' instead . ' extras_require= { `` test '' : [ `` pytest '' , `` coverage '' , `` blinker '' ] } , 'If an instance path is provided it must be absolute . ' platforms='any ' , assert 'No routes were registered . ' in result.output return `` expect ( `` /vary-header-set '' , `` Accept-Encoding , Accept-Language , Cookie '' ) egg_setup = base.join ( 'setup.py ' ) this_module = 'flask ' get_env , this_module = `` flask '' # takes script_info assert 'GET , HEAD , OPTIONS , POST ' not in output flask.g.lang_code = values.pop ( 'lang_code ' ) yield ' % s : ' % key app.add_url_rule ( '/myview/ < int : id > ' , methods= [ 'GET ' ] , evts.append ( `` after '' ) for attr_name in ( 'app ' , 'application ' ) : root_mod_name = import_name.split ( `` . `` ) [ 0 ] app.config.update ( SERVER_NAME= '' localhost.localdomain:443 '' ) if 'OPTIONS ' not in methods : ( `` a '' , `` b '' , `` result '' ) , ( ( 2 , 3 , 5 ) , ( 2.5 , 3 , 5.5 ) , ( 2 , None , 2 ) , ( 2 , `` b '' , 2 ) ) ( 'cliapp.factory ' , None , 'app ' ) , assert 'ERROR in test_logging : test ' in stream.getvalue ( ) ( ( `` a '' , `` b '' , `` c '' ) , `` a/b/c '' ) , return flask.Response ( 'Hello world ' , 404 , { ' X-Foo ' : 'Baz ' } ) , { flask.url_for ( `` / '' ) client.get ( '/ ' ) e.strerror = `` Unable to load configuration file ( % s ) '' % e.strerror return `` not found '' , 404 return `` index for % s '' % user return callable ( getattr ( value , '__html__ ' , None ) ) `` A relative path was given instead . '' rv = flask.send_file ( FakePath ( 'static/index.html ' ) ) use_reloader=reload , click.echo ( row.format ( * ( '- ' * width for width in widths ) ) ) if trigger == 'after ' : `` Please set either ` attachment_filename ` , pass a filepath to `` return datetime.strptime ( string , ' % B % d % Y ' ) type=click.Choice ( ( 'endpoint ' , 'methods ' , 'rule ' , 'match ' ) ) , click.echo ( message % { rv = client.get ( `` /response_headers '' ) frontend = Blueprint ( `` frontend '' , __name__ , template_folder= '' templates '' ) 'Required when using `` -- cert '' . ' , with app.open_resource ( 'static/index.html ' ) as f : send_file_max_age_default = ConfigAttribute ( 'SEND_FILE_MAX_AGE_DEFAULT ' , ( 'Issue tracker ' , 'https : //github.com/pallets/flask/issues ' ) , `` Using ad-hoc certificates requires pyOpenSSL . `` , ctx , param `` Unable to infer MIME-type because no filename is available. `` options.setdefault ( `` use_debugger '' , self.debug ) kwargs.setdefault ( 'cls ' , JSONDecoder ) 'python ' : platform.python_version ( ) , myapp = Flask ( `` appname '' ) from jinja2 import BaseLoader , Environment as BaseEnvironment , \ return flask.url_for ( '.frontend_index ' ) SESSION_COOKIE_DOMAIN= '' .example.com '' , `` TESTING '' : False , return app.config [ `` SESSION_COOKIE_HTTPONLY '' ] default=True , 'SEND_FILE_MAX_AGE_DEFAULT ' : timedelta ( hours=12 ) , raise RuntimeError ( 'No static folder for this object ' ) v = flask.session.get ( 'value ' , 'None ' ) 'INSERT INTO user ( username , password ) VALUES ( ? , ? ) ' , return 'utf-32-le ' environ [ `` flask._preserve_context '' ] = self.preserve_context assert client.get ( `` /2/bar '' ) .data == b '' 19 '' backend = flask.Blueprint ( 'backend ' , __name__ ) 'JSON_AS_ASCII ' : True , flask.session [ `` di_tag '' ] = { `` di '' : `` not-a-dict '' } v = flask.session.get ( `` value '' , `` None '' ) `` PERMANENT_SESSION_LIFETIME '' : timedelta ( days=31 ) , with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost ' } ) : def run ( self , host=None , port=None , debug=None , @ app.route ( '/ < lang_code > / ' ) app.config [ 'SERVER_NAME ' ] = 'localhost.localdomain:3000 ' invoke ( [ 'routes ' , '-s ' , 'rule ' ] ) .output assert client.get ( '/ ' ) .data == b'GET ' self.record_once ( lambda s : s.app.before_request_funcs flask.flash ( u'Hello World ' ) rv = client.get ( '/ ' , 'http : //localhost:5000/ ' ) rv = client.open ( '/ ' , method='OPTIONS ' ) `` utf-16-le '' , ( 'cliapp.factory ' , 'create_app2 ( `` foo '' ) ' ) , text = `` < p > Hello World ! '' follow_redirects=follow_redirects , or filename == ' .. ' assert rv.data == b '' normal index '' app.config.from_json ( os.path.join ( current_dir , `` static '' , `` config.json '' ) ) [ 'aaa_post ' , 'yyy_get_post ' , 'static ' ] , app.config.from_json ( 'missing.json ' ) return `` utf-16 '' 'first request was handled . This usually indicates a bug ' return 'Hello World ! ' assert ctx.request.url == `` http : //example.com:1234/foo/ '' ( '/jquery ' , 'jquery.html ' ) , `` -- with-threads/ -- without-threads '' , ( 'True ' , True , True ) load_dotenv ( os.path.join ( test_path , '.flaskenv ' ) ) error = 'Title is required . ' ' `` session_interface.make_null_session '' instead . ' assert 'user_id ' not in session { } , { 'foo ' : u'🐍 ' } , def send_file ( filename_or_fp , mimetype=None , as_attachment=False , os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' , `` cliapp '' , `` app.py '' ) ( 'other ' , 'other ' , False ) , set_debug_flag=True , * * extra ) : app.add_url_rule ( `` / '' , endpoint= '' index '' ) 'routes when dispatching a request . ' return flask.render_template_string ( `` ' else filename version , yield flask.request.args [ `` name '' ] rv = flask.session [ `` foo '' ] = flask.session.get ( `` foo '' , 0 ) + 1 `` SEND_FILE_MAX_AGE_DEFAULT '' : timedelta ( hours=12 ) , rv = app.config [ 'SERVER_NAME ' ] ' -- all-methods ' , assert s [ 'm ' ] == flask.Markup ( ' < html > ' ) f = StringIO ( `` Test '' ) assert flask.url_for ( 'myview ' , _method='POST ' ) == '/myview/create ' ctx = run_command.make_context ( `` run '' , [ `` -- cert '' , `` ssl_context '' ] ) lines = client.get ( `` / '' ) .data.splitlines ( ) c.get ( `` /none '' ) return redirect ( url_for ( 'blog.index ' ) ) installed_path = modules_tmpdir.mkdir ( `` path '' ) 'you encounter this error please file a bug against Flask . ' ) % assert rv.data == b '' Hello World ! '' @ app.route ( '/custom ' ) .replace ( u ' < ' , u'\\u003c ' ) \ TEST_KEY = `` foo '' return 'bp-default ' adapter.match ( method= '' -- '' ) app.config [ 'WORLD_NAME ' ] = 'Special World ' _get_static_folder , url_scheme=self.config [ 'PREFERRED_URL_SCHEME ' ] ) safe_join ( '/foo ' , ' .. ' ) request , assert client.get ( '/3 ' ) .data == b'apple ' ( `` localhost '' , 80 , `` localhost '' , 80 ) , cmd= '' export '' if os.name == `` posix '' else `` set '' , app.config.update ( APPLICATION_ROOT= '' /bar '' ) `` JSONEncoder '' , ( `` filename '' , `` ascii '' , `` utf8 '' ) , @ app.route ( '/forbidden-unregistered ' ) assert isinstance ( s.tags [ `` d '' ] , TagDict ) return flask.Response ( generate ( 'Hello ' ) ) # takes script_info return 'Hello World ' run_command.make_context ( `` run '' , [ `` -- cert '' , `` adhoc '' ] ) kwargs [ 'obj ' ] = ScriptInfo ( create_app=lambda : self.app ) return `` | '' .join ( args ) f.write_binary ( textwrap.dedent ( u '' ' methods= [ `` GET '' , `` POST '' ] , cls.__str__ = lambda x : x.__unicode__ ( ) .encode ( `` utf-8 '' ) assert resp.headers [ ' X-Foo ' ] == ' a header ' return u '' Hällo Wörld '' ( ( '/ ' , ' a/ ' , ' b/ ' , ' c/ ' ) , '/a/b/c ' ) , error = `` Incorrect username . '' self.record ( lambda s : app.root_path = os.path.join ( os.path.dirname ( __file__ ) , connect = disconnect = has_receivers_for = receivers_for = \ `` Exception on % s [ % s ] '' % ( request.path , request.method ) , exc_info=exc_info invoke ( [ `` routes '' , `` -s '' , `` methods '' ] ) .output , rv = rv.make_conditional ( request , accept_ranges=True , __slots__ = ( `` tags '' , `` order '' ) assert rv.data == b'42 ' separators = ( `` , `` , `` : `` ) assert `` samesite=lax '' in cookie flask.session [ `` testing '' ] = 42 ' ( blueprintapp.apps.admin ) ' ) in text import_name , assert g.user [ `` username '' ] == `` test '' called.append ( `` request '' ) self.record_once ( [ sys.executable , `` setup.py '' , `` bdist_egg '' ] , cwd=str ( modules_tmpdir ) ' `` session_interface.open_session '' instead . ' assert flask.url_for ( 'admin.static ' , filename='test.txt ' ) == '/admin/static/test.txt ' return `` forbidden '' appcontext_tearing_down = _signals.signal ( `` appcontext-tearing-down '' ) ' fly need unique names . ' % ( assert evts == [ `` before '' , `` after '' , `` teardown '' ] r'released on ( \w+\s+\d+\w+\s+\d+ ) ( ? : , codename ( . * ) ) ? ' , return self.config [ 'DEBUG ' ] assert rv.headers [ ' x-sendfile ' ] == \ endpoint_output = invoke ( [ `` routes '' , `` -s '' , `` endpoint '' ] ) .output assert flask.url_for ( 'index ' , _external=True ) == 'http : //localhost/ ' monkeypatch.setitem ( app.config , `` EXPLAIN_TEMPLATE_LOADING '' , True ) assert rv.data == b '' 0.0.0.1 '' return 'banana ' return _render ( ctx.app.jinja_env.from_string ( source ) , client.get ( `` /test_filter/ '' ) ) ) app = modules_tmpdir.join ( `` unimportable.py '' ) app.config [ `` SERVER_NAME '' ] = `` example.com '' error = `` Title is required . '' permanent_session_lifetime = ConfigAttribute ( rv = client.get ( '/ ' ) .data ( `` /fetch '' , `` fetch.html '' ) , app.config [ `` SESSION_COOKIE_DOMAIN '' ] = False sn_host , _ , sn_port = server_name.partition ( ' : ' ) d = dict.fromkeys ( range ( 20 ) , 'foo ' ) yield 'Hello ' args = ast.literal_eval ( ' ( { args } , ) '.format ( args=args ) ) app.config [ 'PREFERRED_URL_SCHEME ' ] = 'https ' { `` X-Foo '' : `` Bar '' , `` X-Bar '' : `` Foo '' } , flask.url_for ( `` index '' , _external=True ) ( `` /a '' , `` .. /b/c '' ) , f.name = `` test.txt '' init = app.join ( `` __init__.py '' ) if ( ) assert client.get ( `` /nope '' ) .data == b '' you shall not pass '' evts.append ( 'after ' ) 'module `` % s '' . This can happen because the ' app.config [ `` SERVER_NAME '' ] = `` localhost.localdomain '' return { 'answer ' : 42 } ] = self.preserve_context assert os.environ [ `` BAR '' ] == `` bar '' encoding = kwargs.pop ( 'encoding ' , None ) 'import flask\n\napp = flask.Flask ( __name__ ) ' app = modules_tmpdir.mkdir ( `` config_package_app '' ) rv = client.get ( `` / '' , url_scheme= '' https '' ) rv = flask.json.dumps ( u'\N { SNOWMAN } ' ) `` signalling support is unavailable `` bp.route ( '/bar/123 ' , endpoint='bar.123 ' ) , assert 'foo ' not in flask.g loader , root_mod_name ) : rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=-10 ' } ) monkeypatch.setitem ( sys.modules , `` OpenSSL '' , None ) raise Exception ( `` dummy '' ) return flask.session.get ( `` test '' ) assert meh ( ) == `` http : //localhost/meh '' monkeypatch.setitem ( sys.modules , 'OpenSSL ' , None ) ) ) , key = k [ len ( namespace ) : ] client.get ( `` / '' ) is_adhoc = cert == `` adhoc '' 'with the trailing slash if it was accessed ' InternalServerError , `` executable . Consider putting app.run ( ) behind an `` body = request.form [ 'body ' ] @ app.route ( '/action ' , methods= [ 'POST ' ] ) assert 'after ' not in evts `` no_template.xml '' , # should skip this one if hasattr ( filename_or_fp , `` __fspath__ '' ) : return dumps ( self.tag ( value ) , separators= ( `` , '' , `` : '' ) ) assert response.headers [ `` Location '' ] == `` http : //localhost/auth/login '' ) , `` Blueprint view function name should not contain dots '' for trigger in 'before ' , 'after ' : make_response , app.root_path = os.path.join ( assert `` domain=.example.com '' in cookie r '' released on ( \w+\s+\d+\w+\s+\d+ ) ( ? : , codename ( . * ) ) ? `` , body = request.form [ `` body '' ] assert rv.data == b ' [ 42 ] ' return request.environ [ 'wsgi.errors ' ] if request else sys.stderr module=module.__name__ , app_name=app_name return self.config [ `` DEBUG '' ] `` The tuple must have the form ( body , status , headers ) , '' filename_or_fp , flask.request.form [ `` myfile '' ] version = re.search ( r '' __version__ = \ '' ( . * ? ) \ '' '' , f.read ( ) ) .group ( 1 ) return value.split ( ' , ' ) options [ 'auto_reload ' ] = self.templates_auto_reload `` value '' , ( 1 , `` t '' , True , False , None , [ ] , [ 1 , 2 , 3 ] , { } , { `` foo '' : u '' 🐍 '' } ) return Flask ( ' _'.join ( [ 'app2 ' , foo , bar ] ) ) ctx.app.jinja_env.get_or_select_template ( template_name_or_list ) , assert client.get ( '/py/bar/123 ' ) .data == b'bp.123 ' current_app , and self.debug rv = client.post ( `` /json '' , data=None , content_type= '' application/json '' ) app_page_bytes = client.get ( `` / '' ) .data ( None , code ) , yield `` % s : % r '' % ( key , value ) rv = client.get ( '/ ? foo=42 ' ) assert macro ( 'World ' ) == 'Hello World ! ' assert rv.data == b ' < h1 > 42 < /h1 > ' 'sphinxcontrib-log-cabinet ' , assert flask.url_for ( 'myview ' , id=42 , _method='GET ' ) == '/myview/42 ' ctx , param ) result = runner.invoke ( args= [ 'hello ' ] ) from .globals import ( assert not app.config.from_pyfile ( `` missing.cfg '' , silent=True ) ( 'Documentation ' , 'http : //flask.pocoo.org/docs/ ' ) , app.config.update ( SERVER_NAME='localhost.localdomain ' ) 'module `` % s '' . This can happen because the ' `` JSONIFY_PRETTYPRINT_REGULAR '' : False , mimetypes.guess_type ( attachment_filename ) [ 0 ] 'pytest > =3 ' , with app.test_request_context ( '/somepage ' ) : ( `` , False , False ) , result = runner.invoke ( args= [ `` hello '' ] ) app.config [ 'DEBUG ' ] = False ( os.environ , `` WERKZEUG_RUN_MAIN '' , monkeypatch.notset ) , app.register_error_handler ( 999 , lambda e : ( `` 999 '' , 999 ) ) assert rv.data == u'정상처리'.encode ( 'utf-8 ' ) monkeypatch.setitem ( sys.modules , `` OpenSSL '' , types.ModuleType ( `` OpenSSL '' ) ) default_handler.setFormatter ( logging.Formatter ( recorded.append ( 'push ' ) 'APPLICATION_ROOT ' : '/ ' , ' X-Foo ' : 'Test ' , assert index ( ) == 'Hello World ! ' sys.argv = [ '-m ' , this_module ] + args resp.headers [ ' X-Parachute ' ] = 'awesome ' g , `` FROM post p JOIN user u ON p.author_id = u.id '' '_scheme ' : None , assert resp.data == b'internal server error ' ( `` cliapp.factory '' , None , `` app '' ) , key = `` 2 '' app.config [ `` TRAP_BAD_REQUEST_ERRORS '' ] = True expect ( `` /setdefault '' ) ] , assert client.get ( `` /keyerror '' ) .data == b '' KeyError '' from jinja2 import BaseLoader , Environment as BaseEnvironment , TemplateNotFound ( 'cliapp.app ' , 'testapp ' , 'testapp ' ) , ) ) assert rv.data == b '' 3 '' or request.method in ( `` GET '' , `` HEAD '' , `` OPTIONS '' ) assert flask.g.get ( `` foo '' ) is None ) .fetchone ( ) assert resp.data == b '' internal server error '' assert rv is self , 'Popped wrong request context . ' \ assert rv.data == b '' value '' rv = client.get ( `` /py/bar/123 '' ) app.config.from_pyfile ( __file__.rsplit ( `` . `` , 1 ) [ 0 ] + `` .py '' ) info.append ( ' - > % s ' % detail ) def open_instance_resource ( self , resource , mode='rb ' ) : mimetype = mimetypes.guess_type ( attachment_filename ) [ 0 ] \ assert client.get ( `` / '' ) .data == b '' GET '' @ bp.route ( '/foo ' ) os.path.dirname ( __file__ ) , 'test_apps ' , 'cliapp ' , 'app.py ' ) ) { `` test '' : `` dict '' } , assert evts == [ 'before ' , 'after ' , 'teardown ' ] flask.url_for ( `` sub '' , _external=True ) self.application , * args , * * kwargs return flask.url_for ( 'test.index ' ) headers [ `` Content-Length '' ] = fsize @ bp.route ( '/bar/foo ' ) set_filename_version ( `` flask/__init__.py '' , version , `` __version__ '' ) assert b '' Response '' in rv.data app.add_url_rule ( '/myview/create ' , methods= [ 'POST ' ] , @ app.route ( '/getitem ' ) assert app.config [ `` JSON_SORT_KEYS '' ] == True ( `` tést.txt '' , `` test.txt '' , `` t % C3 % A9st.txt '' ) , assert client.get ( `` /1/bar '' ) .data == b '' 23 '' assert result.output == `` testappgroup\n '' if hasattr ( sys , 'pypy_version_info ' ) : '/auth/register ' , data= { 'username ' : ' a ' , 'password ' : ' a ' } # not a Python file assert client.get ( `` /forbidden '' ) .data == b '' you shall not pass '' app.add_url_rule ( `` / '' , `` index '' , self.index ) self.msg = `` '' .join ( buf ) `` cliapp.inner1 '' , from flask.logging import default_handler , has_level_handler , wsgi_errors_stream os.path.getmtime ( filename ) , assert b'test title ' in response.data assert sorted ( rv.allow ) == [ `` GET '' , `` HEAD '' , `` OPTIONS '' , `` POST '' ] test_path = os.path.abspath ( os.path.join ( return 'utf-8-sig ' self.static_url_path + `` / < path : filename > '' , inject_version , f.read ( ) , app.config.from_envvar ( 'FOO_SETTINGS ' ) `` The view function did not return a valid response tuple . '' separators = ( ' , ' , ' : ' ) answer_page_bytes = client.get ( `` /bp '' ) .data raise AssertionError ( `` expected AssertionError not raised '' ) del sys.modules [ `` site_egg '' ] # not a Python file assert index ( ) == `` Hello World ! '' assert 'bar stuff 2 ' == bar_options [ 'STUFF_2 ' ] assert rv.data == b ' 0.0.0.0 ' assert recorded == [ `` push '' , `` pop '' ] ( 'test.py ' , cwd , 'test ' ) , 'error while handling an error ' ) before_render_template = _signals.signal ( 'before-render-template ' ) app = Flask ( 'flask_test ' , root_path=os.path.dirname ( __file__ ) ) db.execute ( 'DELETE FROM post WHERE id = ? ' , ( id , ) ) g=g , fg='yellow ' ) assert rv.data == b'Test ' os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' , `` helloworld '' ) SESSION_COOKIE_PATH='/ ' assert `` Vary '' not in rv.headers @ app.route ( '/text ' ) `` Handlers can only be registered for exception classes or '' 42 , message += ' ( lazy loading ) ' @ pytest.mark.parametrize ( 'encoding ' , [ 'utf-8 ' , 'iso-8859-15 ' , 'latin-1 ' ] ) rv = flask.make_response ( flask.jsonify ( compressed_msg ) , 200 ) rv = client.get ( `` /admin/static/css/test.css '' ) bp = flask.Blueprint ( `` test '' , __name__ ) msg = 'Mocking a loader which does not have ` % s. ` ' % name return 'Meh ' , 400 , { key = `` 1 '' ] , if os.environ.get ( `` FLASK_RUN_FROM_CLI '' ) == `` true '' : assert `` bar stuff 2 '' == bar_options [ `` BAR_STUFF_2 '' ] `` SESSION_REFRESH_EACH_REQUEST '' : True , assert type ( s [ ' b ' ] ) == bytes app.logger.info ( '\n'.join ( info ) ) if mode not in ( ' r ' , 'rb ' ) : rv = app.send_static_file ( `` index.html '' ) ( 'cliapp.factory ' , ' create_app ( ) ' , 'app ' ) , sn_host , _ , sn_port = server_name.partition ( `` : '' ) run_command.make_context ( `` run '' , [ `` -- key '' , __file__ ] ) assert rv.data == b'success ' test_path = os.path.abspath ( os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' ) ) app.add_url_rule ( '/myview/ ' , methods= [ 'GET ' ] , resp = client.get ( '/other ' ) assert rv.data == b'127.0.0.1 ' return `` utf-8-sig '' with open ( 'CHANGES.rst ' ) as f : 'for example : @ app.route ( ... , methods= [ `` POST '' ] ) ' ) request_finished , got_request_exception , request_tearing_down , \ ( title , body , id ) `` SESSION_COOKIE_SAMESITE '' : None , ' independent URL generation . You might be able to fix this by ' called.append ( 'request ' ) assert client.get ( '/py/foo ' ) .data == b'bp.foo ' rv = client.get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) value , options = parse_options_header ( rv.headers [ `` Content-Disposition '' ] ) `` -- cert '' , type=CertParamType ( ) , help= '' Specify a certificate file to use HTTPS . '' def login ( self , username= '' test '' , password= '' test '' ) : key_derivation = 'hmac ' client.get ( '/ ' ) request_finished = _signals.signal ( `` request-finished '' ) .replace ( u '' ' '' , u'\\u0027 ' ) expect ( '/set ' ) not callable ( getattr ( Range , `` to_content_range_header '' , None ) ) , return DictLoader ( { `` index.html '' : `` Hello Custom World ! '' } ) assert `` foo '' in flask.g with open ( filename , mode='rb ' ) as config_file : rv = client.get ( assert b'Failed to decode JSON object ' not in rv.data assert client.get ( `` /decorator '' ) .data == b '' boom '' def run ( self , host=None , port=None , debug=None , load_dotenv=True , * * options ) : options.setdefault ( 'use_debugger ' , self.debug ) `` view functions . '' get_db ( ) .execute ( `` SELECT * FROM user WHERE id = ? `` , ( user_id , ) ) .fetchone ( ) app.config [ 'FOO_OPTION_1 ' ] = 'foo option 1 ' if hasattr ( gen , 'close ' ) : need_dotenv = pytest.mark.skipif ( dotenv is None , reason= '' dotenv is not installed '' ) 'Programming Language : : Python : : 3.5 ' , assert client.get ( `` /de/ '' ) .data == b '' /de/about '' % { return `` Foo SubDomain '' headers [ `` X-Sendfile '' ] = filename resp.headers [ `` X-Parachute '' ] = `` awesome '' get_version , if 'auto_reload ' not in options : `` WHERE p.id = ? `` , flask.request.form [ 'myfile ' ] assert response.data == b'stuff ' assert client.get ( `` /foo/bar '' ) .data == b '' bar '' assert rv.data == b '' [ 42 ] '' rv = client.post ( '/ ' , data=flask.json.dumps ( { if mode not in ( `` r '' , `` rb '' ) : rv = client.post ( `` /accept '' , data= { `` myfile '' : `` foo '' * 100 } ) assert rv.data == b'Exception ' run_simple ( host , port , app , use_reloader=reload , use_debugger=debugger , assert client.get ( `` /py/bar/foo '' ) .data == b '' bp.bar_foo '' rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' } ) assert resp.data == b'Hello World ! ' values [ `` _anchor '' ] = anchor and req.method == 'OPTIONS ' : `` a '' : 0 , for item in ( `` FOO '' , `` BAR '' , `` SPAM '' ) : prefix= ' $ ' if os.name == 'posix ' else ' > ' if request.base_url + `` / '' == exc.new_url.split ( `` ? `` ) [ 0 ] : flask.flash ( `` Zap '' ) return ' , '.join ( base_to_url ( x ) for x in value ) ( request.blueprint , None ) , flask.session [ `` t_tag '' ] = { `` t '' : `` not-a-tuple '' } headers [ ' X-Sendfile ' ] = filename monkeypatch.setattr ( sys , `` prefix '' , str ( modules_tmpdir ) ) app.view_functions [ 'index ' ] = index SESSION_COOKIE_DOMAIN='.example.com ' , assert client.get ( `` / '' ) .status_code == 404 response = client.post ( path , data= { `` title '' : `` '' , `` body '' : `` '' } ) app.config [ `` SERVER_NAME '' ] = `` localhost '' assert client.get ( `` /foo '' ) .data == b '' bar '' wrap_for_ctx = kwargs.pop ( 'with_appcontext ' , True ) def test_get_debug_flag ( load_dotenv=True , * * options ) : assert ctx.request.url == 'http : //example.com:1234/foo/ ' `` msg '' : { `` submsg '' : `` W00t '' } , assert b '' Internal Server Error '' in rv.data rv = flask.json.dumps ( u '' \N { SNOWMAN } '' ) return 'child-registered ' exists=True , dir_okay=False , resolve_path=True ) assert rv == b '' request|after '' rv [ `` result '' ] = `` running on % s : % s ... '' % ( hostname , port ) assert flask.g.user_agent == 'Bar ' assert not hasattr ( flask.g , `` value '' ) assert rv.data == b'127.0.0.2 ' assert b '' 43 '' in app_page_bytes `` f '' : True , yield flask.request.args [ 'name ' ] [ `` test list '' , 2 , False ] , [ ] , [ 1 , 2 , 3 ] , return `` utf-8 '' flask.g.pop ( `` bar '' ) assert c.get ( '/undefined ' ) .data == b'default ' return `` Meh '' assert app.config [ 'TEMPLATES_AUTO_RELOAD ' ] is None builder = make_test_environ_builder ( self.application , * args , * * kwargs ) for item in ( `` FOO '' , `` BAR '' , `` EGGS '' ) : `` ` filename_or_fp ` or set your own MIME-type via ` mimetype ` . '' def test_prefix_package_paths ( assert rv.data == b '' stuff '' assert b'Internal Server Error ' in rv.data assert flask.request.path == '/ ' b '' \xff '' , 'Programming Language : : Python : : 3 ' , 'SELECT * FROM user WHERE id = ? ' , ( user_id , ) 'Topic : : Software Development : : Libraries : : Python Modules ' , app.add_url_rule ( `` / '' , view_func=BetterIndex.as_view ( `` index '' ) ) click.echo ( row.format ( * ( `` - '' * width for width in widths ) ) ) ) flask.Flask ( __name__ , instance_path= '' instance '' ) assert ctx.request.url == `` http : //localhost/ '' endpoint = options.pop ( 'endpoint ' , None ) kwargs.setdefault ( `` environ_base '' , self.environ_base ) return `` utf-16-le '' @ app.template_test ( 'boolean ' ) ) in text f.name = 'test.txt ' assert client.get ( '/decorator ' ) .data == b'boom ' `` file ( No such file or directory ) : '' assert rv.data == b '' < p > 23|42 '' raise RuntimeError ( 'existing endpoint function : % s ' % endpoint ) kwargs.setdefault ( 'sort_keys ' , True ) commands = pre-commit run -- all-files -- show-diff-on-failure monkeypatch.setattr ( werkzeug.serving , `` run_simple '' , run_simple_mock ) assert client.get ( '/backend-no ' ) .data == b'backend says no ' assert rv.data == b'Hello World ! ' return 'default ' lambda : bp.add_url_rule ( if self.config [ `` TRAP_HTTP_EXCEPTIONS '' ] : { ' x ' : ( 1 , 2 , 3 ) , ' y ' : 4 } , view_func=self.send_static_file , endpoint='static ' category_filter= [ `` message '' , `` warning '' ] , with_categories=True ctx = run_command.make_context ( 'run ' , [ ' -- cert ' , 'adhoc ' ] ) assert sorted ( GetDeleteView.methods ) == [ `` DELETE '' , `` GET '' ] `` installed_package-instance '' @ bp.route ( '/create ' , methods= ( 'GET ' , 'POST ' ) ) self.name , 'simple_template.html ' , # should render this raise ValueError ( `` Resources can only be opened for reading '' ) return 'handled ' kwargs.setdefault ( `` sort_keys '' , current_app.config [ `` JSON_SORT_KEYS '' ] ) assert value == u'föö ' rv = client.get ( `` /key '' ) rv = flask.make_response ( `` Awesome '' ) @ app.route ( '/text_headers ' ) called.append ( `` TEARDOWN '' ) rv = client.get ( '/error ' ) assert sorted ( rv.allow ) == [ 'OPTIONS ' ] return app.config [ 'SESSION_COOKIE_SECURE ' ] return ' < % s \ ' % s\ ' [ % s ] of % s > ' % ( provide_automatic_options = getattr ( `` Topic : : Internet : : WWW/HTTP : : Dynamic Content '' , `` Environment : : Web Environment '' , if not current_app.config [ 'JSON_AS_ASCII ' ] : app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = False assert client.get ( `` /de/about '' ) .data == b '' /foo '' author= '' Armin Ronacher '' , 'jsonify ' ] rv = flask.send_from_directory ( FakePath ( `` static '' ) , FakePath ( `` hello.txt '' ) ) return flask.url_for ( `` something_else '' ) obj = kwargs.get ( `` obj '' ) os.environ = { `` FOO_SETTINGS '' : `` missing.cfg '' } @ app.route ( '/E3 ' ) session = LocalProxy ( partial ( _lookup_req_object , 'session ' ) ) assert recorded == [ ( 'tear_down ' , { 'exc ' : None } ) ] response = client.get ( `` / '' ) assert 'foo option 1 ' == foo_options [ 'option_1 ' ] return flask.render_template ( `` template_filter.html '' , value= '' abcd '' ) return flask.render_template_string ( ' { { config } } ' , config=42 ) `` Framework : : Flask '' , client.get ( '/success ' ) @ answer_bp.route ( '/bp ' ) flask.flash ( 'Zip ' ) assert `` vodka '' in flask.request.args c.get ( '/small_tuple ' ) rv = app.test_client ( ) .get ( `` /foo/index.html '' ) app.add_url_rule ( `` /options '' , `` options '' , options , methods= [ `` options '' ] ) ( ( `` a/b '' , `` X/ .. /c '' ) , `` a/b/c '' ) , assert sorted ( meths ) == [ 'DELETE ' , 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] self.template_folder ) ) rv = client.get ( '/bp ' ) assert `` GET , HEAD , OPTIONS , POST '' not in output rv = client.options ( '/more ' ) 'Unable to infer MIME-type because no filename is available . ' app.config.from_envvar ( `` FOO_SETTINGS '' ) rv = client.post ( '/bp ' , data=flask.json.dumps ( { return render_template ( `` { 0 } .html '' .format ( js ) , js=js ) src_info = 'blueprint `` % s '' ( % s ) ' % ( srcobj.name , assert `` secure '' in cookie assert s [ 'd ' ] == now assert `` filename * '' not in rv.headers [ `` Content-Disposition '' ] logging_plugin = pytestconfig.pluginmanager.unregister ( fail ( 'Could not find % s in % s ' , pattern , filename ) invoke ( [ 'routes ' , '-s ' , 'match ' ] ) .output response.vary.add ( `` Cookie '' ) headers.add ( 'Content-Disposition ' , 'attachment ' , * * filenames ) if not hasattr ( client , `` redirect_client '' ) : `` response . The return type must be a string , tuple , '' assert 'samesite ' not in cookie self.record_once ( lambda s : s.app.url_value_preprocessors 'test_apps ' , 'subdomaintestmodule ' ) detail = 'found ( % r ) ' % ( triple [ 1 ] or ' < string > ' ) rv = client.get ( `` / '' , errors_stream=stream ) assert flask.g.bar == `` the cake is a lie '' app.register_blueprint ( bp , url_prefix='/2 ' , url_defaults= { 'bar ' : 19 } ) appcontext_tearing_down = _signals.signal ( 'appcontext-tearing-down ' ) `` value , path , result '' , assert rv.data == b '' not found '' domain=domain , rv = client.get ( `` /admin/static/css/test.css '' ) path , name = ( @ bp.route ( '/foo ' , defaults= { 'baz ' : 42 } ) `` submsg '' : `` W00t '' send_from_directory , assert rv.data == b'Foo ' rv = client.open ( '/ ' , method='OPTIONS ' ) ' '' Nandu/pinguino.txt '' ' , return render_template ( 'auth/register.html ' ) prefix= '' $ `` if os.name == `` posix '' else `` > `` , return os.path.join ( prefix , `` var '' , self.name + `` -instance '' ) @ app.route ( '/ < any ( plain , jquery , fetch ) : js > ' ) help='Enable or disable the debugger . By default the debugger ' value=23 , rv = app.send_static_file ( `` index.html '' ) ( 'cliapp.factory ' , 'create_app2 ( `` foo '' , `` bar '' ) ' , 'app2_foo_bar ' ) , @ app.route ( '/dict ' ) assert c.get ( '/bump ' ) .data == b ' 3 ' _os_alt_seps = list ( sep for sep in [ os.path.sep , os.path.altsep ] if sys.version_info > = ( 2 , 7 ) and \ rv = client.open ( '/options ' , method='OPTIONS ' ) rv = client.get ( `` / '' ) flask.flash ( `` Zip '' ) return 'Okay ' __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail self.session = session_interface.open_session ( @ pytest.mark.parametrize ( `` data '' , ( assert sorted ( View.methods ) == [ 'GET ' ] request_finished , request_started , request_tearing_down raise AssertionError ( 'some kind of exception expected ' ) string = _date_strip_re.sub ( `` '' , string ) run_simple ( assert rv.data == b'normal index ' getattr ( rule , `` provide_automatic_options '' , False ) `` Jinja2 > =2.10.1 '' , return flask.session.get ( 'data ' , ' < missing > ' ) messages = flask.get_flashed_messages ( category_filter= [ `` message '' , `` warning '' ] ) lambda s : s.app.after_request_funcs.setdefault ( None , [ ] ) .append ( f ) fp = _wrap_reader_for_text ( fp , kwargs.pop ( `` encoding '' , None ) or `` utf-8 '' ) { `` t '' : ( 1 , 2 , 3 ) } , assert flask.render_template ( 'nested/nested.txt ' ) == ' I\ 'm nested ' 'file ( No such file or directory ) : ' ) return 'internal server error ' , 500 'Programming Language : : Python ' , assert rv.mimetype == `` application/json '' # no app returned return `` success '' `` filename * '' : `` UTF-8 '' % s '' % url_quote ( attachment_filename ) , assert s [ 'di_tag ' ] == { ' di ' : 'not-a-dict ' } @ bp.route ( '/bar/123 ' , endpoint='bar.123 ' ) FlaskGroup , assert site_package.app.instance_path == modules_tmpdir.join ( `` var '' ) .join ( assert client.get ( `` /page/2 '' ) .data == b '' 2 '' rv = client.get ( '/ ' , 'http : //foo.localhost ' ) version= '' 1.0.0 '' , 'with cookies enabled . ' ) self.record_once ( lambda s : s.app.template_context_processors assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' values [ `` _method '' ] = method assert res.data == b '' '' yield `` - % s '' % item app2 = Flask ( 'app2 ' ) app = site_packages.mkdir ( 'site_package ' ) assert e.value.args and `` session is unavailable '' in e.value.args [ 0 ] add_version_option=True , modules_tmpdir.join ( `` var/ '' ) .join ( `` site_egg-instance '' ) rv = client.get ( `` / '' , `` https : //localhost.localdomain '' ) myapp = Flask ( `` appname1 '' ) rv = self.config [ `` PROPAGATE_EXCEPTIONS '' ] methods = [ 'OPTIONS ' ] not self.debug path=path assert rv.data == b '' somethingsomething '' [ 4:16 ] return path.__fspath__ ( ) if hasattr ( path , `` __fspath__ '' ) else path http_method_funcs = frozenset ( calls.append ( 'handler ' ) external = values.pop ( `` _external '' , True ) self.app_import_path = app_import_path or os.environ.get ( `` FLASK_APP '' ) _request_ctx_stack.top.flashes = flashes = session.pop ( '_flashes ' ) \ output = invoke ( [ 'routes ' , ' -- all-methods ' ] ) .output assert `` domain '' not in rv.headers [ `` set-cookie '' ] .lower ( ) rv = app.send_static_file ( 'index.html ' ) 'PRESERVE_CONTEXT_ON_EXCEPTION ' : None , [ ( 1 , 2 , 3 ) ] , ' { rv.__class__.__name__ } . '.format ( e=e , rv=rv ) calls.append ( `` after-handler '' ) assert c.get ( `` /forbidden-registered '' ) .data == b '' forbidden-registered '' rv = client.get ( `` / '' , headers= { `` Range '' : `` bytes=4-1000 '' } ) release_date.strftime ( `` % d/ % m/ % Y '' ) , @ app.route ( '/bar/123 ' , endpoint='123 ' ) assert `` get_answer '' in app.jinja_env.globals.keys ( ) static_url_path=None , kwargs.setdefault ( `` sort_keys '' , True ) from flask import Blueprint , flash , g , redirect , render_template , request , url_for return { `` injected_value '' : 42 } `` Access % s failed , maybe it does not exist , so ignore etags in `` assert eb.url_scheme == 'https ' ) locate_app ( rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4- ' } ) `` PEP 302 import hooks . If you do not use import hooks and `` assert `` path=/bar '' in rv.headers [ `` set-cookie '' ] .lower ( ) rv = client.get ( `` /foo '' , data= { } , follow_redirects=True ) @ app.route ( '/fail ' , methods= [ 'POST ' ] ) ( `` localhost '' , None , `` localhost '' , 8080 ) , return Flask ( 'app ' ) assert 'get_stuff ' in app.jinja_env.globals.keys ( ) RequestedRangeNotSatisfiable for url in '/args_unpack ' , '/array ' : if env == 'production ' : `` . '' not in view_func.__name__ Blueprint , flash , g , redirect , render_template , request , session , url_for return _render ( ctx.app.jinja_env.get_or_select_template ( template_name_or_list ) , kwargs.setdefault ( `` cls '' , JSONEncoder ) click.echo ( 'No routes were registered . ' ) self [ '_permanent ' ] = bool ( value ) default_mimetype = 'text/html ' d = { ' a ' : 0 , ' b ' : 23 , ' c ' : 3.14 , 'd ' : 't ' , find_best_app , if `` site_egg '' in sys.modules : url_scheme=self.config [ `` PREFERRED_URL_SCHEME '' ] , rv = tmpdir.mkdir ( `` modules_tmpdir '' ) _host = `` 127.0.0.1 '' `` utf-32 '' , url_scheme = app.config [ 'PREFERRED_URL_SCHEME ' ] if head [ :3 ] == b '' \x00\x00\x00 '' : assert 'tuple must have the form ' in str ( e ) os.path.dirname ( __file__ ) , 'test_apps ' result = runner.invoke ( cli , [ `` subgroup '' , `` test2 '' ] , obj=obj ) if 'db ' not in g : assert rv.data == b '' GET '' dotenv , raise click.BadParameter ( lambda s : s.app._register_error_handler ( self.name , code_or_exception , f ) assert eb.script_root == `` '' `` file contents were transmitted . To fix this error you should `` app.config.from_pyfile ( `` config.py '' , silent=True ) assert flask.render_template_string ( `` { { g.spam } } '' ) == `` eggs '' cc = parse_cache_control_header ( rv.headers [ `` Cache-Control '' ] ) assert `` cookie is too large '' in str ( w.message ) @ app.route ( '/ < test > / ' ) `` Programming Language : : Python : : 3.4 '' , purge_module ( 'site_app ' ) flask.flash ( u '' Hello World '' ) `` module came from an import hook that does `` template_folder=None , `` after-handler '' , assert ' x-sendfile ' not in rv.headers app.config.from_mapping ( { } , { } ) user_id = session.get ( `` user_id '' ) app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] = expected_max_age os.path.abspath ( os.path.join ( os.path.dirname ( __file__ ) , `` test_apps '' ) ) assert client.get ( '/foo/ ' ) .data == b'foo ' rule = `` / '' .join ( ( self.url_prefix.rstrip ( `` / '' ) , rule.lstrip ( `` / '' ) ) ) return '42 ' assert response.headers [ 'Location ' ] == 'http : //localhost/ ' self.url_defaults.update ( self.options.get ( 'url_defaults ' , ( ) ) ) options [ `` endpoint '' ] = endpoint self , environ , eb = make_test_environ_builder ( app , 'https : //example.com/ ' ) assert flask.url_for ( `` static '' , filename= '' index.html '' ) == `` /foo/index.html '' current_app.config [ `` DATABASE '' ] , detect_types=sqlite3.PARSE_DECLTYPES ( '/foo/ ' , '//bar ' , '/foo/bar ' ) , % ( key , request.mimetype ) return 'forbidden-registered ' return flask.render_template ( 'simple_template.html ' , whiskey=42 ) } ) pytestconfig.pluginmanager.register ( logging_plugin , 'logging-plugin ' ) 'pytest ' , os.chdir ( os.path.join ( os.path.dirname ( __file__ ) , ' .. ' ) ) app.config [ `` JSON_AS_ASCII '' ] = test_value options.setdefault ( 'subdomain ' , self.subdomain ) values [ '_method ' ] = method rv = client.get ( `` /abort '' ) Warning ( params = list ( extra.pop ( `` params '' , None ) or ( ) ) # not enough arguments assert res.data == b '' assert client.get ( '/py/bar/foo ' ) .data == b'bp.bar_foo ' 'there was no context in the first place to keep around . ' ) meth = getattr ( self , `` get '' , None ) `` and decorators or other functionality was called too late.\n '' url_prefix= '' /admin '' , if os.environ.get ( 'FLASK_RUN_FROM_CLI ' ) == 'true ' : key = ' b ' rv = client.post ( `` http : //domain.com/action ? vodka=42 '' , data= { `` gin '' : 43 } ) assert app.jinja_env.tests [ `` is_boolean '' ] ( False ) rv = flask.make_response ( flask.jsonify ( { `` msg '' : `` W00t '' } ) , 400 ) app.register_blueprint ( bp , url_prefix='/1 ' , url_defaults= { 'bar ' : 23 } ) assert site_egg.app.instance_path == str ( `` TRAP_HTTP_EXCEPTIONS '' : False , `` escaping_template.html '' , text=text , html=flask.Markup ( text ) @ blue.route ( '/decorator ' ) response.data += b '' |after '' rv.headers.pop ( `` x-sendfile '' , None ) path , name = ( re.split ( r ' : ( ? ! [ \\/ ] ) ' , self.app_import_path , 1 ) + [ None ] ) [ :2 ] 'MAX_COOKIE_SIZE ' : 4093 , assert client.get ( `` /py/foo '' ) .data == b '' bp.foo '' * args , * * kwargs return '__main__ ' app = installed_path.mkdir ( `` installed_package '' ) @ bp.route ( '/logout ' ) return 'Hello ' , ( `` /foo/ '' , `` /bar '' , `` /foo/bar '' ) , assert client.get ( '/foo/ ' ) .data == b'index ' response = client.post ( '/1/delete ' ) app = create_app ( { `` TESTING '' : True , `` DATABASE '' : db_path } ) self.logger.exception ( 'Request finalizing failed with an ' app.inject_url_defaults ( `` foo.bar.baz.view '' , values ) host , bp.json_encoder if bp and bp.json_encoder _default_template_ctx_processor with open ( os.path.join ( os.path.dirname ( __file__ ) , 'data.sql ' ) , 'rb ' ) as f : current_app._get_current_object ( ) , message=message , category=category signals_available , blue = flask.Blueprint ( `` blue '' , __name__ ) last_modified=last_modified , app.config [ `` DEBUG '' ] = True rv = client.get ( '/ ' , errors_stream=stream ) return 'Create ' name='js_example ' , ' '' .format ( encoding ) ) .encode ( encoding ) ) b = request.form.get ( ' b ' , 0 , type=float ) 'werkzeug ' : werkzeug.__version__ , assert rv.data == b'Hello world ' @ click.command ( 'init-db ' ) assert called == [ 'flask_test ' , 'TEARDOWN ' ] message_flashed , match = re.match ( r'^ * ( [ ^ ( ) ] + ) * ( ? : \ ( ( . * ? ) * , ? * \ ) ) ? * $ ' , app_name ) ( username , generate_password_hash ( password ) ) `` import flask\n '' called.append ( 'app ' ) @ app.route ( '/kw ' ) max_age_default = app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] self.config [ `` DEBUG '' ] = value assert rv.data == b '' http : //xxx.example.com:1234/foo/ '' `` test_value '' , [ 0 , -1 , 1 , 23 , 3.14 , `` s '' , `` longer string '' , True , False , None ] myapp = Flask ( 'appname1 ' ) 'expected at most 1 positional argument , got % d ' % len ( mapping ) elif db.execute ( if 'content_type ' not in kwargs : backend = flask.Blueprint ( `` backend '' , __name__ ) calls.append ( 'after-signal ' ) HTTPException , return 'Test ' separators = ( `` , '' , `` : '' ) rv = client.get ( '/ ' , 'http : //mitsuhiko.localhost.localdomain/ ' ) app.config [ `` TEMPLATES_AUTO_RELOAD '' ] = True `` Application was not able to create a URL adapter for request '' return `` boom '' color=ctx.color , app.config [ 'PROPAGATE_EXCEPTIONS ' ] = True assert not app.config.from_envvar ( `` FOO_SETTINGS '' , silent=True ) 'import flask\n ' flask.session [ 't ' ] = ( 1 , 2 , 3 ) sess [ `` foo '' ] = [ 42 ] SERVER_NAME='example.com:8080 ' , return flask.render_template ( modules_tmpdir.join ( 'var ' ) .join ( 'site_app-instance ' ) info.append ( ' The template was looked up from an endpoint that ' if hasattr ( loader , `` get_filename '' ) : callback=_validate_key , expose_value=False , 'Release date is not today ( % s ! = % s ) ' , assert client.get ( '/auth/register ' ) .status_code == 200 with io.open ( `` flask/__init__.py '' , `` rt '' , encoding= '' utf8 '' ) as f : assert `` bar stuff 1 '' == bar_options [ `` BAR_STUFF_1 '' ] rv = c.get ( `` / '' ) raise flask.abort ( flask.redirect ( flask.url_for ( 'test ' ) ) ) rv = client.post ( `` /echo '' , json=json_data ) assert rv == 'http : //example.com/static/index.html ' monkeypatch.setattr ( 'flask.cli.dotenv ' , None ) raise TypeError ( 'jsonify ( ) behavior undefined when passed both args and kwargs ' ) ( `` '' , `` '' , b '' Username is required . `` ) , 'in the application where a module was not imported ' ctx.params [ 'cert ' ] = cert , value `` { % if answer % } { { answer } } is the answer . { % endif % } '' 'Using ad-hoc certificates requires pyOpenSSL . ' , buf.append ( app.config.update ( SESSION_COOKIE_SAMESITE= '' invalid '' ) flask.Flask ( __name__ , static_host= '' example.com '' ) return flask.send_file ( message rv = client.get ( '/abort ' ) url = `` /jsonify_basic_types '' ( 'SECRET_KEY ' , 'config ' ) , 'click > =5.1 ' , return flask.redirect ( '/getsession ' ) site_packages.join ( `` site_app.py '' ) .write ( from werkzeug.exceptions import BadRequest , NotFound , RequestedRangeNotSatisfiable lines = client.get ( '/ ' ) .data.splitlines ( ) assert rv.data.strip ( ) == b'Hello Subdomain ' app.config.from_pyfile ( __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' ) key = `` d '' @ bp.route ( '/register ' , methods= ( 'GET ' , 'POST ' ) ) ignored_methods = set ( ( ) if all_methods else ( `` HEAD '' , `` OPTIONS '' ) ) assert value == `` attachment '' if trigger == `` after '' : `` t '' , entry_points= { `` console_scripts '' : [ `` flask = flask.cli : main '' ] } , name = 'path ' ' e ' : 'Hi ' , ' f ' : True , ' g ' : False , ( 1 , 2 , 3 ) , None : [ _default_template_ctx_processor ] dumps ( data , indent=indent , separators=separators ) + '\n ' , help= '' Show the flask version '' , 'http : //foo.localhost.localdomain:5000/ ' @ app.route ( '/add ' , methods= [ 'POST ' ] ) with app.test_request_context ( '/ ? name=World ' ) : or 'application/octet-stream ' request_tearing_down , return { key + `` __ '' : self.serializer.tag ( value [ key ] ) } flask.session [ 'm ' ] = flask.Markup ( ' < html > ' ) if mod is not None and hasattr ( mod , '__file__ ' ) : assert rv.data == b '' 127.0.0.1 '' with open ( filename , mode= '' rb '' ) as config_file : rv = client.get ( '/ ' , 'https : //localhost.localdomain ' ) assert `` httponly '' not in cookie self.record_once ( lambda s : s.app._register_error_handler ( 'console_scripts ' : [ if `` loader '' not in options : rv = self.config [ 'PROPAGATE_EXCEPTIONS ' ] follow_redirects = kwargs.pop ( `` follow_redirects '' , False ) app.config [ 'BAR_STUFF_1 ' ] = 'bar stuff 1 ' run_command.make_context ( `` run '' , [ `` -- cert '' , `` ssl_context '' , `` -- key '' , __file__ ] ) `` Programming Language : : Python '' , return render_template ( `` blog/update.html '' , post=post ) ( ( `` .. / '' , `` a/b/c '' ) , `` .. /a/b/c '' ) , return `` utf-32-be '' assert rv.mimetype == `` text/html '' ( 'localhost ' , 80 , 'localhost ' , 80 ) , v for v in itervalues ( module.__dict__ ) if isinstance ( v , Flask ) logger = logging.getLogger ( `` flask.app '' ) app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] = False raise AssertionError ( 'expected AssertionError not raised ' ) DispatchingJinjaLoader , return `` test index '' get_load_dotenv , client.environ_base [ 'HTTP_USER_AGENT ' ] = 'Foo ' app.config [ 'MAX_COOKIE_SIZE ' ] = 0 version , codename , release_date.strftime ( ' % d/ % m/ % Y ' ) pytest.raises ( TypeError , c.get , `` /bad_wsgi '' ) s.add_url_rule ( rule , endpoint , view_func , * * options ) ) rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-1000 ' } ) assert b '' Failed to decode JSON object '' not in rv.data @ app.cli.command ( 'hello ' ) self.url_adapter.match ( return_rule=True ) assert 'Exception : test ' in err app.config [ 'SERVER_NAME ' ] = 'example.com ' @ bp.route ( '/bp ' , methods= [ 'POST ' ] ) defaults = dict ( defaults , * * options.pop ( `` defaults '' ) ) ' WARNING : Do not use the development server in a production ' assert rv [ `` result '' ] == `` running on % s : % s ... '' % ( hostname , port ) ( '/foo/ ' , 'bar ' , '/foo/bar ' ) , value = app.config [ `` TEST_VALUE '' ] ) app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) 'Topic : : Internet : : WWW/HTTP : : WSGI : : Application ' , as_attachment=True , 'NFKD ' , attachment_filename ) .encode ( 'ascii ' , 'ignore ' ) , sideend = flask.Blueprint ( 'sideend ' , __name__ ) monkeypatch.setitem ( os.environ , `` FLASK_SKIP_DOTENV '' , `` 1 '' ) modules_tmpdir_prefix , purge_module , frontend = flask.Blueprint ( `` myapp.frontend '' , __name__ ) error = 'Username is required . ' encoding = kwargs.pop ( `` encoding '' , None ) rv = flask.send_file ( f , mimetype='text/html ' ) server_name = self.config.get ( `` SERVER_NAME '' ) env = ConfigAttribute ( `` ENV '' ) fail ( 'You have uncommitted changes in git ' ) values.setdefault ( 'lang_code ' , flask.g.lang_code ) app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] = True trap_bad_request = self.config [ `` TRAP_BAD_REQUEST_ERRORS '' ] testing = ConfigAttribute ( `` TESTING '' ) monkeypatch.setitem ( os.environ , 'FLASK_SKIP_DOTENV ' , ' 1 ' ) lambda s : s.app.url_default_functions.setdefault ( self.name , [ ] ) .append ( f ) _app_ctx_err_msg = `` '\ app.config [ `` APPLICATION_ROOT '' ] = `` /foo '' assert not app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) flask.session [ `` u '' ] = the_uuid assert rv.data == b '' Exception '' b'\xff ' , monkeypatch.chdir ( os.path.abspath ( os.path.join ( app.add_template_test ( is_boolean , `` boolean '' ) result = invoke_no_routes ( [ `` routes '' ] ) rv = flask.send_file ( return `` backend says no '' , 403 return os.environ.get ( 'FLASK_ENV ' ) or 'production ' return render_template ( 'admin/index.html ' ) return str ( flask.session.get ( 'foo ' , 0 ) ) assert c.get ( '/forbidden ' ) .data == b'forbidden ' flask.session [ `` t '' ] = ( 1 , 2 , 3 ) assert rv.headers [ `` X-Foo '' ] == `` Testing '' assert templates == [ 'admin/index.html ' , 'frontend/index.html ' ] monkeypatch.setattr ( logging.getLogger ( `` flask '' ) , `` handlers '' , [ _TestHandler ( ) ] ) @ app.route ( '/array ' ) 'Check the configuration ' ) c.get ( '/missing ' ) subdomain = self.options.get ( `` subdomain '' ) client.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.1 ' return `` List '' assert client.get ( '/get ' ) .data == b'42 ' self , assert post [ `` title '' ] == `` updated '' 'The session cookie domain is an IP address . This may not work ' assert c.get ( `` /error '' ) .data == b '' app-error '' `` -- reload/ -- no-reload '' , session.permanent and app.config [ `` SESSION_REFRESH_EACH_REQUEST '' ] @ app.route ( '/bar/ ' , endpoint='bar ' ) url_prefix=None , not kwargs and len ( args ) == 1 if hasattr ( o , `` __html__ '' ) : fail ( `` Could not find % s in % s '' , pattern , filename ) 'flask ' , @ app.route ( '/none ' ) pytest.raises ( TypeError , c.get , '/large_tuple ' ) if _matching_loader_thinks_module_is_package ( loader , root_mod_name ) : yield `` class : % s. % s '' % ( type ( loader ) .__module__ , type ( loader ) .__name__ ) 'SESSION_COOKIE_HTTPONLY ' : True , if hasattr ( sys , 'exc_clear ' ) : rv = client.post ( '/ ' , data= { } , follow_redirects=True ) app.config [ `` SEND_FILE_MAX_AGE_DEFAULT '' ] = 3600","['.pre-commit-config.yaml', 'examples/javascript/js_example/views.py', 'examples/javascript/setup.py', 'examples/javascript/tests/conftest.py', 'examples/javascript/tests/test_js_example.py', 'examples/tutorial/flaskr/__init__.py', 'examples/tutorial/flaskr/auth.py', 'examples/tutorial/flaskr/blog.py', 'examples/tutorial/flaskr/db.py', 'examples/tutorial/setup.py', 'examples/tutorial/tests/conftest.py', 'examples/tutorial/tests/test_auth.py', 'examples/tutorial/tests/test_blog.py', 'examples/tutorial/tests/test_db.py', 'examples/tutorial/tests/test_factory.py', 'flask/__init__.py', 'flask/__main__.py', 'flask/_compat.py', 'flask/app.py', 'flask/blueprints.py', 'flask/cli.py', 'flask/config.py', 'flask/ctx.py', 'flask/debughelpers.py', 'flask/globals.py', 'flask/helpers.py', 'flask/json/__init__.py', 'flask/json/tag.py', 'flask/logging.py', 'flask/sessions.py', 'flask/signals.py', 'flask/templating.py', 'flask/testing.py', 'flask/views.py', 'flask/wrappers.py', 'scripts/make-release.py', 'setup.py', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_apps/blueprintapp/__init__.py', 'tests/test_apps/blueprintapp/apps/admin/__init__.py', 'tests/test_apps/blueprintapp/apps/frontend/__init__.py', 'tests/test_apps/cliapp/app.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_apps/cliapp/importerrorapp.py', 'tests/test_apps/cliapp/multiapp.py', 'tests/test_apps/helloworld/hello.py', 'tests/test_apps/subdomaintestmodule/__init__.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_config.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_json_tag.py', 'tests/test_logging.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py', 'tests/test_views.py', 'tox.ini']",Merge pull request # 3183 from singingwolfboy/pre-commit
125,819368a52dc9eb0ba4e20195783f2807872dabad,2019-05-06 15:23:35-04:00,"don ’ t have to pass objects around from function to function within a request in source tree , with the names : file : ` templates ` and : file : ` static ` requests to `` /yourapplication `` be directed to `` myapp : app `` . attaches the `` teardown `` handler . respectively . While this can be changed , you usually do n't have to , < /Directory > no configuration is supplied . In addition , the `` init_app `` method attaches application class . This works well with : ref : ` app-factories ` . See : doc : ` /patterns/subclassing ` for an example . In this case , a file called `` .htaccess `` , sitting in the public directory you want * `` use_reloader `` - whether to reload and fork the process if modules were changed converting return values into response objects is as follows : : func : ` ~werkzeug.utils.secure_filename ` function that : func : ` ~tempfile.mkstemp ` function does two things for us : it returns a .. code-block : : none < Directory C : \yourdir > unorthodox . For example , Flask uses thread-local objects internally so that you no configuration is supplied . In addition , the `` init_app `` method ServerName example.com that wo n't do and the code has to continue working . is no longer available ( because you are trying to use it outside of the actual request ) . based on URL prefixes , they may be defined at the application level using It is used together with the `` -- mount `` directive which will make To run your application you need a : file : ` yourapplication.wsgi ` file . wo n't work in that case : Allow from all Here is a simple example showing how that works : : : attr : ` ~werkzeug.datastructures.FileStorage.filename ` attribute . However please keep in Request `` in that situation , but sometimes that wo n't do and the code has names : file : ` templates ` and : file : ` static ` respectively . While this can be changed , you test `` , test dependencies can be specified in the : file : ` setup.py ` file . : meth : ` ~werkzeug.datastructures.FileStorage.save ` method that The `` -- manage-script-name `` will move the handling of `` SCRIPT_NAME `` to uwsgi , * `` use_reloader `` - whether to reload and fork the process if modules want to use the filename of the client to store the file on the server , The most popular one is ` flup ` _ which we will use for this guide . Make sure to ` cherokee ` _ ; see : doc : ` uwsgi ` and : doc : ` wsgi-standalone ` for other options . To with that MIME type . to continue working . to read files with that MIME type . For example , if an instance of : exc : ` ConnectionRefusedError ` is raised , and a handler contains the code ` mod_wsgi ` is executing on startup to get the application the given path . The return value will be a : class : ` ~flask.Flask.response_class ` object . surprising or unorthodox . For example , Flask uses thread-local objects In this case , a file called `` .htaccess `` , sitting in the public directory In case you did track the master branch you will notice that : command : ` flask -- app ` Even though it did not run any actual tests , we already know that our `` flaskr `` Order deny , allow < Directory C : \yourdir > function to function within a request in order to stay threadsafe . this guide . Make sure to have it installed to follow along . access . This is because the blueprint does not `` own '' a certain URL space , so test suite also has to be part of the distribution . order to stay threadsafe . This approach is convenient , but requires a valid at the application level using the `` request `` proxy object : : `` myapp : app `` . If your application is accessible at root level , you can use a usually do n't have to , especially when getting started . since it is smarter about that . It is used together with the `` -- mount `` server first . The most popular one is ` flup ` _ which we will use for to create a temporary database and initialize it . The but it 's obviously malformed . This might be caused by a user tampering application class . This works well with : ref : ` app-factories ` . WSGIScriptAlias / C : \yourdir\yourapp.wsgi conventions when getting started . By convention , templates and static work in that case : By using `` client.get `` we can send an HTTP `` GET `` request to the application with However please keep in mind that this value can be forged type : mimetype : ` application/xhtml+xml ` , but Internet Explorer refuses to read files files are stored in subdirectories within the application 's Python especially when getting started . outside of the actual request ) . object . The object called ` application ` in that file is then used as client code failing . Most of the time it 's okay to reply with `` 400 Bad Because SQLite3 is filesystem-based , we can easily use the should be correct , but actually is not . For example you may have there are multiple reasons this might be the case . First of all you need mind that this value can be forged so never ever trust that value . If you for ` Apache 2.4 ` _ . After installation , failures leading to an Internal Server Error are automatically reported to : class : ` ~flask.Flask.response_class ` object . We can now use the of the blueprint 's view functions ; they are not invoked by , e.g. , an invalid URL ` cherokee ` _ ; see : doc : ` uwsgi ` and : doc : ` wsgi-standalone ` for other options . WSGIScriptAlias / C : \yourdir\yourapp.wsgi internally so that you don ’ t have to pass objects around from invoked from an appropriate `` raise `` statement or a call to `` abort `` in another should be correct , but actually is not . For example you may have some client-side to reply with `` 400 Bad Request `` in that situation , but sometimes of that , Flask has a few design choices that some people might find : meth : ` ~werkzeug.datastructures.FileStorage.save ` method that allows you to store that use your WSGI application with any of them you will need a FastCGI server first . should run if given an invalid URL . If you would like to execute different Sentry and from there you can receive error notifications . to look at the error message . Even though it did not run any actual tests , we already know that our `` 'No entries here so far ' `` is part of the output . is no longer available ( because you are trying to use it does not exist , there are multiple reasons this might be the case . This approach is convenient , but requires a valid e.g. , an invalid URL access . This is because the blueprint does not In this case , we ensure that `` 'No entries here so far ' `` Then in your application 's entry-point ( main.py ) , you could have something like : : the `` teardown `` handler . is registered for : exc : ` ConnectionError ` and : exc : ` ConnectionRefusedError ` , Then in your application 's entry-point ( main.py ) , malformed . This might be caused by a user tampering with the data , or the In case you did track the master branch you will notice that : exc : ` ConnectionRefusedError ` , and a handler is registered for : exc : ` ConnectionError ` and ServerName example.com the return value ( as string ) from the application . You need to use the environment variable to specify an application . to uwsgi , since it is smarter about that . test `` , test dependencies can be specified in the : file : ` setup.py ` file . The is part of the output . Note : There have been some changes in access control configuration for ` Apache 2.4 ` _ . < VirtualHost * > the `` request `` proxy object : : handling strategies for these errors based on URL prefixes , they may be defined you want your app to be available , works too but the `` ScriptAlias `` directive We can now use the : attr : ` ~werkzeug.wrappers.BaseResponse.data ` attribute to inspect The test suite also has to be part of the distribution . < /Directory > in that file is then used as application . < /VirtualHost > invoked from an appropriate `` raise `` statement or a call to `` abort `` code that sends an HTTP request to the server but it 's obviously file on the filesystem of the server . Here is a simple example showing how knowing which blueprint errorhandler it should run if given an invalid URL . : mod : ` tempfile ` module to create a temporary database and initialize it . Order deny , allow of the client to store the file on the server , pass it through the you could have something like : : directive which will make requests to `` /yourapplication `` be directed to `` own '' a certain URL space , so the application instance has no way of application with the given path . The return value will be a `` flaskr `` application is syntactically valid , otherwise the import conventions when getting started . By convention , templates and static files are of that , Flask has a few design choices that some people might find surprising or have it installed to follow along . is removed now . You need to use the environment variable to specify an stored in subdirectories within the application 's Python source tree , with the Allow from all If your application is accessible at root level , you can use a See : doc : ` /patterns/subclassing ` for an example . status code and a : mimetype : ` text/html ` mimetype . < /VirtualHost > < VirtualHost * > some client-side code that sends an HTTP request to the server would have died with an exception . allows you to store that file on the filesystem of the server . : command : ` flask -- app ` is removed now . This file contains the code ` mod_wsgi ` is executing on startup After installation , failures leading to an Internal Server Error In case the : command : ` python -m flask ` fails or : command : ` flask ` does not exist , Because SQLite3 is filesystem-based , we can easily use the : mod : ` tempfile ` module If you would like to execute different handling strategies for these errors To use your WSGI application with any of them you will need a FastCGI were changed that works : : to get the application object . The object called ` application ` type : mimetype : ` application/xhtml+xml ` , but Internet Explorer refuses so never ever trust that value . If you want to use the filename your app to be available , works too but the `` ScriptAlias `` directive wo n't pass it through the : func : ` ~werkzeug.utils.secure_filename ` function that For example , if an instance of : exc : ` ConnectionRefusedError ` is raised , : attr : ` ~werkzeug.wrappers.BaseResponse.data ` attribute to inspect status code and a : mimetype : ` text/html ` mimetype . The logic that Flask applies to with an exception . the return value ( as string ) from the application . In this case , we ensure that : attr : ` ~werkzeug.datastructures.FileStorage.filename ` attribute . The logic that Flask applies to converting return values into The : func : ` ~tempfile.mkstemp ` function does two things for us : it returns a By using `` client.get `` we can send an HTTP `` GET `` request to the application . receive error notifications . application is syntactically valid , otherwise the import would have died Note : There have been some changes in access control configuration In case the : command : ` python -m flask ` fails or : command : ` flask ` response objects is as follows : the application instance has no way of knowing which blueprint errorhandler it .. code-block : : bash are automatically reported to Sentry and from there you can First of all you need to look at the error message . in another of the blueprint 's view functions ; they are not invoked by , To run your application you need a : file : ` yourapplication.wsgi ` file . This file with the data , or the client code failing . Most of the time it 's okay The `` -- manage-script-name `` will move the handling of `` SCRIPT_NAME ``","['docs/advanced_foreword.rst', 'docs/becomingbig.rst', 'docs/blueprints.rst', 'docs/cli.rst', 'docs/deploying/cgi.rst', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/deploying/uwsgi.rst', 'docs/errorhandling.rst', 'docs/extensiondev.rst', 'docs/foreword.rst', 'docs/htmlfaq.rst', 'docs/quickstart.rst', 'docs/testing.rst', 'docs/upgrading.rst']",Merge pull request # 3175 from singingwolfboy/fix-rst-line-too-long
126,5e378b4f28af344702a65fcce85a7d8574674860,2019-05-06 13:46:38-04:00,"Project maintainers have the right and responsibility to remove , edit , or * Other conduct which could reasonably be considered inappropriate in a representing a project or community include using an official project e-mail # # Our Standards Project maintainers who do not follow or enforce the Code of Conduct in good This Code of Conduct is adapted from the [ Contributor Covenant ] [ homepage ] , version 1.4 , contributors and maintainers pledge to making participation in our project and permanently any contributor for other behaviors that they deem inappropriate , Project maintainers are responsible for clarifying the standards of acceptable Examples of unacceptable behavior by participants include : complaints will be reviewed and investigated and will result in a response that https : //www.contributor-covenant.org/faq is deemed necessary and appropriate to the circumstances . The project team is faith may face temporary or permanent repercussions as determined by other when an individual is representing the project or its community . Examples of # # Our Pledge * The use of sexualized language or imagery and unwelcome sexual attention or include : appearance , race , religion , or sexual identity and orientation . * Publishing others ' private information , such as a physical or electronic # # Scope size , disability , ethnicity , sex characteristics , gender identity and expression , Instances of abusive , harassing , or otherwise unacceptable behavior may be # # Attribution available at https : //www.contributor-covenant.org/version/1/4/code-of-conduct.html that are not aligned to this Code of Conduct , or to ban temporarily or * Focusing on what is best for the community * Public or private harassment address , without explicit permission * Being respectful of differing viewpoints and experiences our community a harassment-free experience for everyone , regardless of age , body behavior and are expected to take appropriate and fair corrective action in For answers to common questions about this code of conduct , see obligated to maintain confidentiality with regard to the reporter of an incident . Further details of specific enforcement policies may be posted separately . * Gracefully accepting constructive criticism # Contributor Covenant Code of Conduct further defined and clarified by project maintainers . advances In the interest of fostering an open and welcoming environment , we as members of the project 's leadership . [ homepage ] : https : //www.contributor-covenant.org * Trolling , insulting/derogatory comments , and personal or political attacks professional setting # # Our Responsibilities threatening , offensive , or harmful . address , posting via an official social media account , or acting as an appointed * Showing empathy towards other community members response to any instances of unacceptable behavior . # # Enforcement This Code of Conduct applies both within project spaces and in public spaces level of experience , education , socio-economic status , nationality , personal Examples of behavior that contributes to creating a positive environment * Using welcoming and inclusive language reject comments , commits , code , wiki edits , issues , and other contributions representative at an online or offline event . Representation of a project may be",['CODE_OF_CONDUCT.md'],Merge pull request # 3178 from LindsayYoung/patch-1
127,12ab9f9c0d8445d5bf2e79707f9ede194a6c6d03,2019-05-04 10:51:57-04:00,"vmImage : 'macos-latest ' inputs : python.version : 'pypy3 ' # TODO : emit JUnit test results vmImage : ubuntu-latest matrix : displayName : 'Run tox ' python.version : ' 3.7 ' vmImage : $ [ variables.vmImage ] Python37Mac : versionSpec : $ ( python.version ) Pypy3Linux : python.architecture : 'x64 ' Python36Linux : steps : python.version : ' 3.6 ' python.version : ' 2.7 ' architecture : $ ( python.architecture ) Python27Linux : TOXENV : 'py , codecov ' variables : Python27Windows : displayName : 'Install tox ' python.version : ' 3.7 ' Python37Linux : strategy : python.version : ' 3.5 ' TOXENV : docs-html script : tox TOXENV : devel , lowest , codecov vmImage : 'windows-latest ' DocsHtml : # TODO : build on nightly VersionRange : pool : Python37Windows : Python35Linux : # TODO : add codecov token script : pip install -U tox trigger : master",['.azure-pipelines.yml'],Set up Azure Pipelines ( # 3170 )
128,5cb4b731671491941bd5d877f222bf5cee71869c,2019-03-06 05:40:22-08:00,"has to be in the tuple . The `` status `` value will override the status code Such tuples have to be in the form `` ( response , status , headers ) `` , to be in the tuple . The `` status `` value will override the status code 3 . If a tuple is returned the items in the tuple can provide extra `` ( response , headers ) `` or `` ( response , status ) `` where at least one item headers ) `` or `` ( response , headers ) `` where at least one item has information . Such tuples have to be in the form `` ( response , status , 3 . If a tuple is returned the items in the tuple can provide extra information .",['docs/quickstart.rst'],Merge pull request # 3113 from greyli/improve-doc-quickstart
129,86bf9dca72cd188813e26ef5dd972101ef8983cf,2019-02-24 06:33:44-08:00,"extentions for Flask does . Flask-Caching supports various backends , and it is extension for Flask does . Flask-Caching supports various backends , and it is Instantiating the configutation object allows you to use `` @ property `` in an extension caled `` Flask-Foo '' might be used like this : : an extension called `` Flask-Foo '' might be used like this : :","['docs/config.rst', 'docs/extensions.rst', 'docs/patterns/caching.rst']",Merge pull request # 3103 from tbm/typos
130,c795adf684718142d52975264aa059af23316e0d,2019-02-22 16:32:12-08:00,"manually change hard-coded URLs . handles that for you . handles that for you . `` /myapplication `` instead of `` / `` , : func : ` ~flask.url_for ` properly `` /myapplication `` instead of `` / `` , : func : ` ~flask.url_for ` properly transparently . transparently . manually change hard-coded URLs .",['docs/quickstart.rst'],Merge pull request # 3101 from tbm/docs-formatting
131,0b5b4a66ef99c8b91569dd9b9b34911834689d3f,2019-01-25 05:56:54-08:00,"try : # Python 2 except NameError : # Python 3 string_types = ( str , unicode ) integer_types = ( int , long ) if not PY2 : integer_types = ( int , long ) string_types = ( str , unicode ) text_type = unicode if not PY2 : text_type = unicode",['flask/_compat.py'],Merge pull request # 3082 from cclauss/patch-2
132,d7a1b0157aae0e60983c51c6f255772be11d43f3,2019-01-07 13:20:00-08:00,"To use this with Flask , wrap the app object with the middleware : : methods ( such as PATCH ) . In that case it 's possible to “ proxy ” HTTP This can easily be accomplished with an HTTP middleware : : set the `` X-HTTP-Method-Override `` header . Then the method is replaced method = method.encode ( 'ascii ' , 'replace ' ) To use this with Flask this is all that is necessary : : with the header value before being passed to Flask . This can be accomplished with an HTTP middleware : : methods ( such as PATCH ) . In that case it 's possible to `` proxy '' HTTP intended HTTP method ( such as `` PATCH `` ) . set the `` X-HTTP-Method-Override `` header and set the value to the",['docs/patterns/methodoverrides.rst'],Merge pull request # 3068 from pallets/method-override-encoding
133,ded7cbe4294dde22e553d6a8035f414f0ce72f50,2019-01-07 09:58:32-08:00,".. versionchanged : : 1.0.3 RoutingException , Rule handlers . A catch-all error handler registered for `` HTTPException `` will not def slash ( ) : in 1.0 . ( ` # 2986 ` _ ) .. versionchanged : : 1.0 return e assert c.get ( `` /slash '' , follow_redirects=True ) .data == b '' slash '' if isinstance ( e , RoutingException ) : `` RoutingException `` , used internally for actions such as routing . This fixes the unexpected behavior that had been introduced # actions , such as slash redirects raising RequestRedirect . They slash redirects during routing , is not passed to error from werkzeug.routing import BuildError , Map , RequestRedirect , \ return `` slash '' handle `` RoutingExcpetion `` , which is used internally during # are not raised or handled in user code . .. _ # 2986 : https : //github.com/pallets/flask/pull/2986 Exceptions are looked up by code * and * by MRO , so from werkzeug.routing import BuildError , Map , RequestRedirect , Rule `` HTTPExcpetion `` subclasses can be handled with a catch-all # Do n't handle RequestRedirect raised when adding slash . # RoutingExceptions are used internally to trigger routing handler for the base `` HTTPException `` .","['CHANGES.rst', 'flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 2986 from taion/do-not-handle-routing-exception
134,38a391815b4936e9357834bb4924e09fc4384e9a,2019-01-07 07:22:59-08:00,"it always being overwritten based on environment variables . : func : ` send_file ` handles an `` attachment_filename `` that is a # Native string not marked as Unicode on Python 2 attachment_filename = attachment_filename.decode ( 'utf-8 ' ) if not isinstance ( attachment_filename , text_type ) : it always being overwritten based on environment variables . ( ` # 2765 ` _ ) .. _ # 2933 : https : //github.com/pallets/flask/issues/2933 native Python 2 string ( bytes ) with UTF-8 coded bytes . ( ` # 2933 ` _ ) ( ` # 2765 ` _ ) ( 'tést.txt ' , 'test.txt ' , 't % C3 % A9st.txt ' ) ,","['CHANGES.rst', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 2934 from garenchan/bugfix- # 2933
135,4f32c6d4e37cda7a5053aa4f1527b6c340433778,2019-01-07 07:02:02-08:00,"return flask.send_file ( headers [ 'Content-Length ' ] = fsize fsize = file.getbuffer ( ) .nbytes assert rv.status_code == 206 ( ` # 3059 ` _ ) ( ` # 2994 ` ) import io pointing to an out-of-date object . ( ` # 2935 ` ) except AttributeError : # Python 2 does n't have getbuffer Using built-in RequestContext , unprintable Unicode characters in Host pointing to an out-of-date object . ( ` # 2935 ` _ ) assert rv.data == b'somethingsomething ' [ 4:16 ] object in the request context copy . This prevents `` flask.session `` Host header will result in a HTTP 400 response and not HTTP 500 as described in PEP 0519 , to support : mod : ` pathlib ` in Python 3 . previously . ( ` # 2994 ` _ ) ) object in the request context copy . This prevents `` session `` ( ` # 2957 ` _ ) Partial content supports : class : ` ~io.BytesIO ` . elif isinstance ( file , io.BytesIO ) : def index ( ) : PEP 0519 , to support `` pathlib `` in Python 3 . ( ` # 3059 ` _ ) try : : func : ` send_file ` supports `` PathLike `` objects as describe in Filename may be a : class : ` ~os.PathLike ` object . def test_send_file_range_request_bytesio ( self , app , client ) : Using built-in RequestContext , unprintable Unicode characters in fsize = len ( file.getvalue ( ) ) : func : ` send_file ` supports : class : ` ~os.PathLike ` objects as .. versionadded : : 1.1 rv.close ( ) .. _ # 2957 : https : //github.com/pallets/flask/issues/2957 file = io.BytesIO ( b'somethingsomething ' ) : func : ` send_file ` supports : class : ` ~io.BytesIO ` partial content . header will result in a HTTP 400 response and not HTTP 500 as previously . Filenames may be a ` PathLike ` object . file , attachment_filename='filename ' , conditional=True rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' } )","['CHANGES.rst', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 2957 from IgnasiBosch/2943-bytesio-partial-content
136,232e5c81bc722c3ea87f15d0f95f8b52f064fc4c,2019-01-06 16:30:11-08:00,"'flask ' : __version__ , import werkzeug `` flask -- version `` outputs Werkzeug 's version and simplifies the import platform 'python ' : platform.python_version ( ) , 'werkzeug ' : werkzeug.__version__ , assert flask_ver in out 'Python % ( python ) s\n ' 'version ' : __version__ , assert `` Python `` + python_version ( ) in out Python version . ( ` # 2825 ` _ ) from werkzeug import __version__ as werkzeug_version assert py_ver in out from flask import __version__ as flask_version `` `` '' Test of get_version . '' '' '' assert `` Werkzeug `` + werkzeug_version in out from sys import version as py_ver 'python_version ' : sys.version , from platform import python_version message = 'Flask % ( version ) s\nPython % ( python_version ) s ' message = ( 'Werkzeug % ( werkzeug ) s ' ) assert `` Flask `` + flask_version in out 'Flask % ( flask ) s\n ' from flask import __version__ as flask_ver .. _ # 2825 : https : //github.com/pallets/flask/pull/2825","['CHANGES.rst', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2825 from eso31/fix-2824-issue
137,0f56c0cb04c4f63a1ed439cbb3fc49d8c83f8f65,2019-01-06 15:43:14-08:00,"bttf = Movies.objects ( title= '' Back To The Future '' ) .get_or_404 ( ) return True instead . db = MongoEngine ( app ) from flask_mongoengine import MongoEngine This pattern requires a running MongoDB server and the MongoKit library To insert data you can use the ` insert ` method . We have to get a < User u'admin ' > use_dot_notation = True > > > collection.User.find_one ( { 'name ' : u'admin ' } ) You can insert entries into the database like this : { u'_id ' : ObjectId ( '4c271729e13823182f000000 ' ) , u'name ' : u'admin ' , u'email ' : u'admin @ localhost ' } year = me.IntField ( ) makes it more to type but also makes it blazingly fast . On the other hand , > > > collection.find_one ( { 'name ' : u'admin ' } ) Documentation Configuration from flask import Flask For more information about MongoKit , head over to the > > > list ( collection.User.find ( ) ) If the document has nested fields , use `` EmbeddedDocument `` to Basic setup can be done by defining `` MONGODB_SETTINGS `` on using a double-underscore . `` objects `` , and queries returned by MongoKit is no longer maintained . See : doc : ` /patterns/mongoengine ` ======================== # register the User document with our current connection validators = { director = me.StringField ( ) Query operators may be used by concatenating them with the field name common ideas from Django or the SQLAlchemy declarative extension . may use this process if you need the best performance to get . Note that this def __repr__ ( self ) : bttf = Movie ( title= '' Back To The Future '' , year=1985 ) MongoKit will automatically commit for us . inherits from `` Document `` and declare each of the fields . : : > > > collection = connection [ 'test ' ] .users Using a document database rather than a full DBMS gets more common these days . .. _Flask-MongoEngine : https : //flask-mongoengine.readthedocs.io too , but implements some validation to ensure data integrity . imdb = me.EmbeddedDocumentField ( Imdb ) ===================== bttf.actors = [ You can also assign values to the field attributes after instantiation . ] To declare a model that represents a Mongo document , create a class that imdb_id = me.StringField ( ) calling it , are iterable . : : structure = { import mongoengine as me from mongokit import ValidationError class User ( Document ) : class Movie ( me.Document ) : } defined the fields of the embedded document and looks for an equal value on the field . : : for recents in Movie.objects ( year__gte=2017 ) : 'email ' : unicode , For more information , check out the ` official documentation Note that MongoKit is kinda strict with used column types , you must not use a PyMongo Compatibility Layer To query your database , you use the collection directly : here : example does not show how to couple it with Flask , see the above MongoKit code > > > list ( collection.find ( ) ) .. mongokit-pattern : ================= `` db '' : `` myapp '' , > > > collection.insert ( user ) > > > from yourapplication.models import User # configuration To define your models , just subclass the ` Document ` class that is imported This example shows you how to define your schema ( named structure ) , a .. _MongoKit : http : //bytebucket.org/namlook/mongokit/ # must have % s in error format string to have mongokit place key in there # create the little application object Flask-MongoEngine adds helpful utilities on top of MongoEngine . Check Here an example : file : ` app.py ` module for your application : : MongoDB is schemaless . This means you can modify the data structure from one Use the class `` objects `` attribute to make queries . A keyword argument MONGODB_PORT = 27017 one hand , MongoKit does not have something like a session . This sometimes integrate with MongoDB . } raise ValidationError ( ' % s must be at most { } characters long'.format ( length ) ) documents like you use models in nearly any other ORM by using dots to > > > user [ 'email ' ] = u'admin @ localhost ' > > > r = collection.find_one ( { 'name ' : u'admin ' } ) if len ( value ) < = length : > > > user = collection.User ( ) Creating Data mongoengine There are many more ways to define and query documents with MongoEngine . Instantiate your document class with keyword arguments for the fields . app = Flask ( __name__ ) 'name ' : max_length ( 50 ) , def max_length ( length ) : return ' < User % r > ' % ( self.name ) mongokit separate between attributes . > > > user [ 'name ' ] = u'admin ' actors = me.ListField ( ) `` app.config `` and creating a `` MongoEngine `` instance . : : ... some_theron_movie = Movie.objects ( actors__in= [ `` Charlize Theron '' ] ) .first ( ) called ` use_dot_notation ` . Per default MongoKit behaves like a python from flask import Flask These results are also dict-like objects : class Imdb ( me.EmbeddedDocument ) : 'email ' : max_length ( 120 ) connection = Connection ( ) Declarative < MongoEngine_ > ` _ . validator for the maximum character length and uses a special MongoKit feature A running MongoDB server and ` Flask-MongoEngine ` _ are required . : : collection first , this is somewhat the same as a table in the SQL world . rating = me.DecimalField ( ) dictionary but with ` use_dot_notation ` set to `` True `` you can use your MONGODB_HOST = 'localhost ' common ` str ` type for either ` name ` or ` email ` but unicode . u'admin @ localhost ' .. _MongoEngine : http : //mongoengine.org connection = Connection ( app.config [ 'MONGODB_HOST ' ] , `` EmbeddedDocumentField `` to declare it on the parent document . : : bttf.imdb = Imdb ( imdb_id= '' tt0088763 '' , rating=8.5 ) connection.register ( [ User ] ) installed . This pattern shows how to use MongoKit , a document mapper library , to ` MongoEngine ` _ , a document mapper library , to integrate with MongoDB . > > > from yourapplication.database import connection MongoDB with MongoEngine The default behavior of MongoKit is the declarative one that is based on app.config [ 'MONGODB_PORT ' ] ) app = Flask ( __name__ ) Mapping Documents 'name ' : unicode , from mongokit import Connection , Document from MongoKit import Connection > > > user.save ( ) Here is an example document ( put this also into : file : ` app.py ` , e.g . ) : : relational SQL databases . This pattern shows how to use ` website < https : //github.com/namlook/mongokit > ` _ . out their ` documentation < Flask-MongoEngine_ > ` _ as well . app.config.from_object ( __name__ ) rated = me.StringField ( ) [ { u'_id ' : ObjectId ( '4c271729e13823182f000000 ' ) , u'name ' : u'admin ' , u'email ' : u'admin @ localhost ' } ] `` Michael J . Fox '' , def validate ( value ) : : orphan : for examples : : > > > r [ 'email ' ] return validate > > > user = { 'name ' : u'admin ' , 'email ' : u'admin @ localhost ' } If you just want to use PyMongo , you can do that with MongoKit as well . You bttf.save ( ) from MongoKit . If you 've seen the SQLAlchemy pattern you may wonder why we do title = me.StringField ( required=True ) Then call `` doc.save ( ) `` . : : MongoDB with MongoKit There are two very common ways to use MongoKit . I will outline each of them Using a document database like MongoDB is a common alternative to app.config [ 'MONGODB_SETTINGS ' ] = { insert query to the next without any problem . MongoKit is just schemaless votes = me.IntField ( ) [ < User u'admin ' > ] Querying is simple as well : Queries print ( recents.title ) not have a session and even do not define a ` init_db ` function here . On the MongoKit in Flask # connect to the database `` Christopher Lloyd '' pip install flask-mongoengine","['docs/patterns/index.rst', 'docs/patterns/mongoengine.rst', 'docs/patterns/mongokit.rst']",Merge pull request # 2964 from igortg/2907-docs-update-mongo-pattern
138,b2765893e6bd64787ab14b1d67eb7d29314f1bdf,2019-01-06 15:11:30-08:00,"development mode . `` flask-tutorial `` directory . `` flask-tutorial `` directory , not the `` flaskr `` package . the application , but you can call it from anywhere , not just the the application . development mode . Remember , you should still be in the top-level","['docs/tutorial/factory.rst', 'docs/tutorial/install.rst']",Merge pull request # 3067 from pallets/tutorial-flask-run
139,7474a9cb8b715ef96a37eedbbf143d39139bf382,2019-01-06 15:00:00-08:00,": gh : ` example code < examples/tutorial > ` . see the : gh : ` example code < examples/tutorial > ` . For larger applications it 's a good idea to use a package instead of a it 's a good idea to use a package instead of a module . this : : module . That is quite simple . Imagine a small application looks like The : ref : ` tutorial < tutorial > ` is structured to use the package pattern , While this is fine for small applications , for larger applications The : ref : ` tutorial < tutorial > ` is structured this way , see the Imagine a simple flask application structure that looks like this : :",['docs/patterns/packages.rst'],Merge pull request # 2875 from nathanbegbie/patch-1
140,1e616696c00c72f01958b761173c8f29f09acc60,2019-01-06 14:51:55-08:00,"`` jsonify `` . This has security implications when rendering the JSON in from a module and then override the config from a file in the instance JavaScript in templates , and should typically remain enabled . to JavaScript in templates , and should typically remain enabled . from a module and then override the config from a file in the config `` jsonify `` . This has security implications when rendering the JSON into",['docs/config.rst'],Merge pull request # 2918 from garenchan/docs2
141,914a033586becc94a4001a448107f02d547d81d7,2019-01-06 14:43:17-08:00,"class ProductionConfig ( Config ) : `` `` '' Base config , uses staging database server . '' '' '' class TestingConfig ( Config ) : DATABASE_URI = 'sqlite : /// : memory : ' Nothing is done to the object before loading . If the object is a `` `` '' Uses production database server . '' '' '' DB_SERVER = '192.168.19.32 ' DEBUG = True object . If you need to instantiate the class , such as to access a property , instantiated before being passed to this method . your configuration classes : : def DATABASE_URI ( self ) : # Note : all caps from configmodule import ProductionConfig DB_SERVER = '192.168.1.56 ' class Config ( object ) : app.config.from_object ( cfg ) TESTING = False cfg = import_string ( 'configmodule.ProductionConfig ' ) ( ) from werkzeug.utils import import_string class DevelopmentConfig ( Config ) : Note that : meth : ` ~flask.Config.from_object ` does not instantiate the class # Alternatively , import via string : DB_SERVER = 'localhost ' app.config.from_object ( ProductionConfig ( ) ) DEBUG = False then you must do so before calling : meth : ` ~flask.Config.from_object ` : :","['docs/config.rst', 'flask/config.py']",Merge pull request # 2854 from dougthor42/update-docs-to-be-more-clear-about-from_config-instantiation- # 2853
142,1c92c02c4a9762be059e930eb4b5a51488fd4037,2019-01-06 10:45:14-08:00,"# language : generic language : generic # - $ HOME/Library/Caches/pip $ HOME/Library/Caches/Homebrew # directories : # disabled because before_install is too slow env : TOXENV=py3 , codecov # cache : directories : # - $ HOME/Library/Caches/Homebrew cache : # - os : osx # env : TOXENV=py3 , codecov os : osx $ HOME/Library/Caches/pip",['.travis.yml'],Merge pull request # 3066 from pallets/no-osx
143,a656025c3bbedb1d8092e553cc799bcde375db3a,2019-01-06 10:34:52-08:00,"virtualenv venv Python , use the following command instead : If you needed to install virtualenv because you are on an older version of the following command instead : If you needed to install virtualenv because you are using Python 2 , use python2 -m virtualenv venv",['docs/installation.rst'],Merge pull request # 3065 from pallets/fedora
144,10d0ed68a342880ea355ba62e8d24efa664142cd,2019-01-06 10:25:47-08:00,.exceptions.HTTPException ` which is forwarded to the : class : ` ~werkzeug.exception.HTTPException ` \s which are forwarded by should be handled . A special case is : class : ` ~werkzeug message . `` `` '' This method is called whenever an exception occurs that exception with the same traceback . Key errors raised from request data like `` form `` show the this function to the : meth : ` handle_http_exception ` method . This bad key in debug mode rather than a generic bad request : meth : ` handle_http_exception ` method . This function will either traceback . handled . A special case are `` `` '' This method is called whenever an exception occurs that should be Key errors raised from request data like `` form `` show the the bad return a response value or reraise the exception with the same function will either return a response value or reraise the key in debug mode rather than a generic bad request message .,['flask/app.py'],Merge pull request # 3056 from tirkarthi/fix-syntax-warning
145,717f9d33ca7c803abf781ad81d3854ddd7869900,2019-01-06 10:09:18-08:00,class SessionMixin ( collections_abc.MutableMapping ) : import collections.abc as collections_abc import collections as collections_abc from collections import MutableMapping class SessionMixin ( MutableMapping ) : from flask._compat import collections_abc,"['flask/_compat.py', 'flask/sessions.py']",Merge pull request # 3054 from tirkarthi/fix-py37-warnings
146,c9245609f4a2c23103bcb5cbfbc58ed78b76892e,2019-01-06 09:54:59-08:00,"happens automatically ( but it 's harmless to include `` |safe `` anyway ) . with `` |safe `` if you intend to use it inside `` script `` tags unless `` |tojson `` output inside `` script `` tags . In Flask 0.10 and above , this tags no escaping must take place , so make sure to disable escaping < /button > to Flask 0.10 , you must disable escaping with `` |safe `` if you intend to use attribute : you are using Flask 0.10 which implies that : It is also safe to use the output of ` |tojson ` in a * single-quoted * HTML .. sourcecode : : html+jinja as filter called `` |tojson `` in Jinja2 . Note that inside `` script `` Note that inside `` script `` tags no escaping must take place , so make In Flask 0.10 and above , this happens automatically . sure to disable escaping with `` |safe `` before Flask 0.10 if you intend doSomethingWith ( { { user.username|tojson } } ) ; `` |tojson `` inside `` script `` , make sure to disable escaping with `` |safe `` . Note that in versions of Flask prior to 0.10 , if using the output of to use it inside `` script `` tags : < button onclick='doSomethingWith ( { { user.username|tojson } } ) ' > doSomethingWith ( { { user.username|tojson|safe } } ) ; as a filter called `` |tojson `` in Jinja2 . Note that in versions of Flask prior Click me","['docs/api.rst', 'docs/templating.rst']",Merge pull request # 3051 from ExplodingCabbage/tojson-docs-fixes
147,aef4159588be8bc245243c80e5032ccc79092f42,2019-01-06 08:11:39-08:00,"with the application instance , otherwise they wo n't be used by the is no template , it will only handle the `` POST `` method and then redirect is no template , it will only handle the `` POST `` method then redirect with the application instance ; otherwise , they wo n't be used by the","['docs/tutorial/blog.rst', 'docs/tutorial/database.rst']",Merge pull request # 3031 from jseldess/fix-typos
148,446cea9221e4f6d368a02a90cd105db0f8c9c7c9,2019-01-06 08:00:23-08:00,"python : 2.7 sudo : false /^ . * -maintenance $ / pip : false nightly $ HOME/.cache/pip `` 3.6 '' `` 3.4 '' python : env : TOXENV=py , codecov /^\d+ ( \.\d+ ) * -maintenance $ / python : 3.6 PYTHON : C : \Python37-x64 `` 3.5 '' python : nightly `` 2.7 '' dist : xenial py { 36,27 , py } -lowest env : TOXENV=docs-html python : pypy3 `` 3.7 '' env : TOXENV=py3 , py2 , codecov pypy3.5-6.0 python : 3.4 env : TOXENV=py , codecov $ HOME/.cache/pre-commit PYTHON : C : \Python36-x64 env : TOXENV=py , simplejson , devel , lowest , codecov env : TOXENV=py python : 3.5 py { 37,27 , py } -simplejson env : TOXENV=docs-html brew install python @ 2 ; py { 37,36,35,34,27 , py } env : TOXENV=py3 , codecov py { 37,27 , py } -lowest pip py { 36,35,34,27 , py } py { 36,27 , py } -simplejson python : pypy3.5-6.0 env : TOXENV=devel , lowest , codecov py { 37,27 , py } -devel directories : /^\d+ ( \.\d+ ) * ( \.x ) ? $ / py { 36,27 , py } -devel","['.appveyor.yml', '.travis.yml', 'tox.ini']",Merge pull request # 3044 from garenchan/ci-test
149,7e65f1c5f13f7f721c64f551d0022f6907a35b40,2019-01-06 07:07:59-08:00,"decorator , the blueprint will record the intention of registering the constructor ( in this case also `` simple_page `` ) . decorator the blueprint will record the intention of registering the function `` show `` on the application when it 's later registered . constructor ( in this case also `` simple_page `` ) . The blueprint 's name does not modify the URL , only the endpoint . function ` show ` on the application when it 's later registered .",['docs/blueprints.rst'],Merge pull request # 3019 from colincadams/patch-2
150,80f14e30a204a76520154a613998a926f920c0a4,2019-01-06 06:38:14-08:00,"@ click.command ( 'shell ' , short_help='Runs a shell in the app context . ' ) @ click.command ( 'run ' , short_help='Runs a development server . ' ) `` `` '' Runs an interactive Python shell in the context of a given `` `` '' Run an interactive Python shell in the context of a given",['flask/cli.py'],Merge pull request # 3011 from greyli/improve-cli-help-text
151,b78ebacca7500f625bf7ac48989073dc872a4418,2019-01-06 06:26:07-08:00,"from flask import Flask , jsonify files produced by your frontend framework in a subfolder inside of your Single-Page Applications app = Flask ( __name__ , static_folder='app ' ) def heartbeat ( ) : Flask can be used to serve Single-Page Applications ( SPA ) by placing static project . You will also need to create a catch-all endpoint that routes all ======================== return jsonify ( { `` status '' : `` healthy '' } ) return app.send_static_file ( `` index.html '' ) singlepageapplications The following example demonstrates how to serve an SPA along with an API : : requests to your SPA . def catch_all ( path ) :","['docs/patterns/index.rst', 'docs/patterns/singlepageapplications.rst']",Merge pull request # 2996 from alysivji/spa-docs
152,4d37acad21b3877f4881daa55b808b809a391e84,2019-01-05 15:44:53-08:00,"'test_apps ' , 'subdomaintestmodule ' ) filename_or_fp = fspath ( filename_or_fp ) rv.direct_passthrough = False # Backwards compatibility as proposed in PEP 0519 : # Test with static file handler . self.path = path return path.__fspath__ ( ) if hasattr ( path , '__fspath__ ' ) else path assert rv.data.strip ( ) == b'Hello Subdomain ' with app.open_resource ( 'static/index.html ' ) as f : assert rv.direct_passthrough rv = flask.send_file ( FakePath ( 'static/index.html ' ) ) except ImportError : rv = flask.send_from_directory ( FakePath ( 'static ' ) , FakePath ( 'hello.txt ' ) ) def __fspath__ ( self ) : PEP 0519 , to support `` pathlib `` in Python 3 . ( ` # 3059 ` _ ) if hasattr ( filename_or_fp , '__fspath__ ' ) : assert cc.max_age == 3600 try : return self.path from ._compat import string_types , text_type , PY2 , fspath assert rv.data == f.read ( ) See : https : //www.python.org/dev/peps/pep-0519/ object in the request context copy . This prevents `` flask.session `` assert rv.mimetype == 'text/html ' filename = fspath ( filename ) from ._compat import string_types , text_type , PY2 .. _ # 3059 : https : //github.com/pallets/flask/pull/3059 def fspath ( path ) : .. versionchanged : : 1.1 # https : //www.python.org/dev/peps/pep-0519/ # backwards-compatibility `` `` '' Fake object to represent a `` PathLike object `` . rv.direct_passthrough = False def test_send_file_pathlike ( self , app , req_ctx ) : app.root_path = os.path.join ( os.path.dirname ( __file__ ) , object in the request context copy . This prevents `` flask.session `` `` `` '' def test_send_from_directory_pathlike ( self , app , req_ctx ) : from os import fspath rv.close ( ) : func : ` send_file ` supports `` PathLike `` objects as describe in Filenames may be a ` PathLike ` object . directory = fspath ( directory ) This represents a `` pathlib.Path `` object in python 3 . class FakePath ( object ) : def __init__ ( self , path ) : cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) rv = app.send_static_file ( FakePath ( 'index.html ' ) )","['CHANGES.rst', 'flask/_compat.py', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 3059 from mattrobenolt/fspath
153,15c079f500967543c033ddeb113febc1d84abc87,2019-01-05 15:07:06-08:00,"description = e.get_description ( ) ( self.debug or self.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] ) e.args = ( ) # Werkzeug > = 0.15 does add it , remove it in production and e.description is BadRequestKeyError.description assert 'missing_key ' in e.value.get_description ( ) e.description = `` KeyError : ' { } ' '' .format ( * e.args ) else : ) : # MultiDict passes the key to the exception , but that 's ignored if self.debug or self.config [ `` TRAP_BAD_REQUEST_ERRORS '' ] : if ( if isinstance ( e , BadRequestKeyError ) : # message , add it in manually . assert 'missing_key ' in e.value.description e.description = `` KeyError : ' { 0 } ' '' .format ( * e.args ) and isinstance ( e , BadRequestKeyError ) if e.args [ 0 ] not in description : # only set it if it 's still the default description # when generating the response message . Set an informative # description for key errors in debug mode or when trapping errors . # Werkzeug < 0.15 does n't add the KeyError to the 400","['flask/app.py', 'tests/test_basic.py']",Merge pull request # 3063 from pallets/key-error
154,1096e226ccbae8135085322fb006a01836a19dcb,2019-01-05 15:06:41-08:00,"import inspect `` blinker '' : ( `` https : //pythonhosted.org/blinker/ '' , None ) , } ] ProjectLink ( 'PyPI releases ' , 'https : //pypi.org/project/Flask/ ' ) , 'pointsize ' : '12pt ' , `` project_links '' : [ ProjectLink ( `` pallets_sphinx_themes '' , line for line in lines `` werkzeug '' : ( `` http : //werkzeug.pocoo.org/docs/ '' , None ) , master_doc = 'index ' DocVersion ( 'dev ' , 'Development ' , 'unstable ' ) , 'preamble ' : r'\usepackage { flaskstyle } ' , import functools `` sphinx.ext.autodoc '' , 'localtoc.html ' , import sphinx.util.inspect as inspect _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' , re.M ) 'index ' : [ ( master_doc , `` Flask.tex '' , `` Flask Documentation '' , `` Pallets Team '' , `` manual '' ) rv = old_update_wrapper ( wrapper , wrapped , * a , * * kw ) old_update_wrapper = functools.update_wrapper url = `` { 0 } master/ { 1 } '' .format ( base_url , text ) release , version = get_version ( `` Flask '' ) author = 'Pallets Team ' from pallets_sphinx_themes import ProjectLink , get_version `` click '' : ( `` https : //click.palletsprojects.com/ '' , None ) , DocVersion ( ' 1.0 ' , 'Flask 1.0 ' , 'stable ' ) , 'fontpkg ' : r'\usepackage { mathpazo } ' , ) : `` fontpkg '' : r '' \usepackage { mathpazo } '' , url = `` { 0 } { 1 } / { 2 } '' .format ( base_url , release , text ) html_title = `` Flask Documentation ( { } ) '' .format ( version ) ProjectLink ( `` Flask Website '' , `` https : //palletsprojects.com/p/flask/ '' ) , latex_additional_files = [ `` flaskstyle.sty '' , `` logo.pdf '' ] linkcheck_anchors = False base_url = 'https : //github.com/pallets/flask/tree/ ' words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) sphinx html_static_path = [ `` _static '' ] ProjectLink ( 'Donate to Pallets ' , 'https : //psfmember.org/civicrm/contribute/transact ? reset=1 & id=20 ' ) , html_logo = '_static/flask.png ' 'sphinx.ext.autodoc ' , ] author = `` Pallets Team '' return rv base_url = `` https : //github.com/pallets/flask/tree/ '' : target : https : //palletsprojects.com/p/flask/ 'relations.html ' , ProjectLink ( `` Issue Tracker '' , `` https : //github.com/pallets/flask/issues/ '' ) , html_static_path = [ '_static ' ] latex_additional_files = [ 'flaskstyle.sty ' , 'logo.pdf ' ] 'carbon_ads_args ' : 'zoneid=1673 & serve=C6AILKT & placement=pocooorg ' , 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , Pallets-Sphinx-Themes~=1.1.0 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , '404 ' : '404.html ' , url = ' { 0 } master/ { 1 } '.format ( base_url , text ) sphinxcontrib-log-cabinet~=1.0.0 if text.endswith ( `` > '' ) : commands = sphinx-build -W -b linkcheck -d { envtmpdir } /doctrees docs { envtmpdir } /linkcheck 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , sphinxcontrib-log-cabinet def cut_module_meta ( app , what , name , obj , options , lines ) : ' * * ' : [ html_favicon = '_static/flask-favicon.ico ' 'project.html ' , del unwrap_decorators html_theme = 'flask ' 'sphinxcontrib.log_cabinet ' , inspect.getargspec = getargspec 'Issue Tracker ' , 'https : //github.com/pallets/flask/issues/ ' ) , 'carbon_ads.html ' , ProjectLink ( `` Donate to Pallets '' , `` https : //palletsprojects.com/donate '' ) , 'canonical_url ' : 'http : //flask.pocoo.org/docs/ { } /'.format ( version ) , docstring = inspect.getdoc ( obj ) or `` if text.endswith ( ' > ' ) : if release.endswith ( `` dev '' ) : 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , return old_getargspec ( getattr ( x , '_original_function ' , x ) ) 'sphinx.ext.intersphinx ' , project = `` Flask '' master_doc = `` index '' ProjectLink ( 'Flask Website ' , 'https : //palletsprojects.com/p/flask/ ' ) , singlehtml_sidebars = { `` index '' : [ `` project.html '' , `` localtoc.html '' ] } # linkcheck if release.endswith ( 'dev ' ) : `` jinja '' : ( `` http : //jinja.pocoo.org/docs/ '' , None ) , def skip_internal ( app , what , name , obj , skip , options ) : 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , `` sphinxcontrib.log_cabinet '' , `` itsdangerous '' : ( `` https : //itsdangerous.palletsprojects.com/ '' , None ) , html_theme_options = { `` index_sidebar_logo '' : False } deps = project = 'Flask ' html_logo = `` _static/flask.png '' `` papersize '' : `` a4paper '' , 'papersize ' : 'a4paper ' , old_getargspec = inspect.getargspec words , text = text [ : -1 ] .rsplit ( `` < `` , 1 ) app.add_role ( `` gh '' , github_link ) ProjectLink ( `` Source Code '' , `` https : //github.com/pallets/flask/ '' ) , rv._original_function = wrapped html_theme = `` flask '' ProjectLink ( 'Source Code ' , 'https : //github.com/pallets/flask/ ' ) , html_additional_pages = { `` `` '' Remove metadata from autodoc output . '' '' '' copyright = '2010 Pallets Team ' `` sphinx.ext.intersphinx '' , `` sqlalchemy '' : ( `` https : //docs.sqlalchemy.org/ '' , None ) , def github_link ( name , rawtext , text , lineno , inliner , options=None , content=None ) : : orphan : ] , unwrap_decorators ( ) def unwrap_decorators ( ) : app.connect ( 'autodoc-skip-member ' , skip_internal ) app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) [ testenv : docs-linkcheck ] html_favicon = `` _static/flask-favicon.ico '' 'itsdangerous ' : ( 'https : //pythonhosted.org/itsdangerous ' , None ) , if skip or _internal_mark_re.search ( docstring ) is not None : name , rawtext , text , lineno , inliner , options=None , content=None copyright = `` 2010 Pallets Team '' url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) release , version = get_version ( 'Flask ' ) 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) , if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) 'project_links ' : [ `` * * '' : [ `` localtoc.html '' , `` relations.html '' , `` searchbox.html '' ] , 'versions ' : [ app.add_role ( 'gh ' , github_link ) `` python '' : ( `` https : //docs.python.org/3/ '' , None ) , `` wtforms '' : ( `` https : //wtforms.readthedocs.io/en/stable/ '' , None ) , 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , `` preamble '' : r '' \usepackage { flaskstyle } '' , 'searchbox.html ' , def update_wrapper ( wrapper , wrapped , * a , * * kw ) : def github_link ( def getargspec ( x ) : lines [ : ] = [ import re if what ! = 'module ' : ( master_doc , 'Flask.tex ' , 'Flask Documentation ' , 'Pallets Team ' , 'manual ' ) , functools.update_wrapper = update_wrapper ProjectLink ( `` PyPI releases '' , `` https : //pypi.org/project/Flask/ '' ) , `` index '' : [ `` project.html '' , `` localtoc.html '' , `` searchbox.html '' ] , DocVersion ( ' 0.12 ' , 'Flask 0.12 ' ) , : align : center 'versions.html ' , .. rst-class : : hide-header pallets-sphinx-themes `` pointsize '' : `` 12pt '' , from pallets_sphinx_themes import DocVersion , ProjectLink , get_version : align : right Sphinx~=1.8.0 return True return r docs/requirements.txt","['docs/conf.py', 'docs/index.rst', 'docs/requirements.txt', 'tox.ini']",Merge pull request # 3064 from pallets/docs-fix
155,afb7e4ee5f6e9cb8a1a937458cb39ee312e172ae,2019-01-04 14:35:14-08:00,"from yourapplication import create_app If a factory function is used in a : file : ` __init__.py ` file , then the function should be imported : : application = create_app ( )",['docs/deploying/mod_wsgi.rst'],Merge pull request # 3062 from EJEP/master
156,d5665e4ba6cf4f7eabdc0be047952a27965a455f,2018-11-28 22:25:21+09:00,"pass An error handler is a normal view function that return a response , but instead try : if app.debug : use_debugger = True status code that would is raised while trying to handle a request . use_debugger = not ( app.config.get ( 'DEBUG_WITH_APTANA ' ) ) use_debugger = app.debug and not ( app.config.get ( 'DEBUG_WITH_APTANA ' ) ) # Disable Flask 's debugger if external debugger is requested An error handler is a normal view function that returns a response , but instead * `` use_reloader `` - whether to reload and fork the process if modules were changed * `` use_reloader `` - whether to reload and fork the process on exception except : status code that would be raised while trying to handle a request .",['docs/errorhandling.rst'],Merge pull request # 2917 from garenchan/docs1
157,877da63462d9a7e270c295d898d689aacf155779,2018-11-13 14:09:31-05:00,".. _Flask-Caching : https : //flask-caching.readthedocs.io/en/latest/ memcached server running somewhere . This is how you connect to such an Using a Cache cache = SimpleCache ( ) return rv Flask itself does not provide caching for you , but ` Flask-Caching ` _ , an will automatically remove item . from werkzeug.contrib.cache import SimpleCache method instead . The first argument is the key and the second the value that should be set . Also a timeout can be provided after which the cache libraries it is based on , has some very basic cache support . It supports memcached server then : : from werkzeug.contrib.cache import MemcachedCache supported ( you get them from ` PyPI < https : //pypi.org/ > ` _ ) and a To get an item from the cache call Setting up a Cache Here a full example how this looks like normally : : To add items to the cache , use the : meth : ` ~werkzeug.contrib.cache.BaseCache.set ` rv = cache.get ( 'my-item ' ) rv = calculate_value ( ) operations : : meth : ` ~werkzeug.contrib.cache.BaseCache.get ` and even possible to develop your own caching backend . server easily : : : meth : ` ~werkzeug.contrib.cache.BaseCache.get ` with a string as key name . Flask itself does not provide caching for you , but Werkzeug , one of the rv = cache.get ( 'my-item ' ) cache = GAEMemcachedCache ( ) extentions for Flask does . Flask-Caching supports various backends , and it is cache = MemcachedCache ( [ '127.0.0.1:11211 ' ] ) from werkzeug.contrib.cache import GAEMemcachedCache You create a cache object once and keep it around , similar to how cache that keeps the item stored in the memory of the Python interpreter : : will return `` None `` : : cache.set ( 'my-item ' , rv , timeout=5 * 60 ) If you want to use memcached , make sure to have one of the memcache modules : meth : ` ~werkzeug.contrib.cache.BaseCache.set ` . This is how to use them : If you are using App Engine , you can connect to the App Engine memcache if rv is None : : class : ` ~werkzeug.contrib.cache.SimpleCache ` object , that one is a simple Now how can one use such a cache ? There are two very important def get_my_item ( ) : multiple cache backends , normally you want to use a memcached server . development server you can create a : class : ` ~flask.Flask ` objects are created . If you are using the If something is in the cache , it is returned . Otherwise that function",['docs/patterns/caching.rst'],Merge pull request # 2993 from data-get/update-cache-documentation
158,ca23b7b40638c48a72e7be4ea5134984c399b502,2018-11-13 13:55:35-05:00,"# We can not use app.test_client ( ) for the Unicode-rich Host header , environ [ 'HTTP_HOST ' ] = u'\x8a ' try : # use a non-printable character in the Host - this is key to this test app = flask.Flask ( __name__ ) return 'Hello World ! ' self.url_adapter = app.create_url_adapter ( self.request ) if self.url_adapter is not None : environ = builder.get_environ ( ) .. _ # 2994 : https : //github.com/pallets/flask/pull/2994 # these characters are all IDNA-compatible assert response.status_code == 200 builder = make_test_environ_builder ( app ) # because werkzeug enforces latin1 on Python 2 . Using built-in RequestContext , unprintable Unicode characters in Host self.url_adapter = None response = app.test_client ( ) .get ( '/ ' , headers= { 'host ' : 'xn -- on-0ia.com ' } ) except HTTPException as e : # However it works when actually passed to the server . def test_environ_for_valid_idna_completes ( ) : from flask.testing import make_test_environ_builder header will result in a HTTP 400 response and not HTTP 500 as previously . assert response.status_code == 400 self.url_adapter = app.create_url_adapter ( self.request ) self.request.routing_exception = e response = app.full_dispatch_request ( ) def test_normal_environ_completes ( ) : self.match_request ( ) def index ( ) : self.match_request ( ) def test_bad_environ_raises_bad_request ( ) : environ [ 'HTTP_HOST ' ] = u'ąśźäüжŠßя.com ' ( ` # 2994 ` ) with app.request_context ( environ ) :","['CHANGES.rst', 'flask/ctx.py', 'tests/test_reqctx.py']",Merge pull request # 2994 from jarek/werkzeug-640-exceptions-during-bind
159,339419117fff06fa89124d04b1921b61b8865d80,2018-11-07 21:04:10+01:00,"Sentry and from there you can receive error notifications . Sentry also supports See the ` Python < https : //docs.sentry.io/platforms/python/ > ` _ and ` Flask-specific < https : //docs.sentry.io/platforms/python/flask/ > ` _ throwing_function ( ) * ` Getting started with Sentry < https : //docs.sentry.io/quickstart/ ? platform=python > ` _ * ` Flask-specific documentation < https : //docs.sentry.io/platforms/python/flask/ > ` _ . capturing custom exceptions : : import sentry_sdk try : similar fashion . See the ` Python SDK docs Sentry SDK documentation for more detailed information . Sentry and from there you can receive error notifications . except Exception as e : with sentry_sdk.push_scope ( ) as scope : Follow-up reads : < https : //docs.sentry.io/platforms/python/ > ` _ for more information . * Sentry also supports catching errors from your worker queue ( RQ , Celery ) in a sentry_sdk.capture_exception ( e )",['docs/errorhandling.rst'],Fixes for sentry docs ( # 2991 )
160,3bf80912cf959fe860528f75031fe9e4612e3848,2018-11-07 20:25:52+01:00,"return app Sentry and from there you can receive error notifications . Sentry also supports sentry = Sentry ( app , dsn='YOUR_DSN_HERE ' ) capturing custom exceptions : : sentry_sdk.capture_exception ( e ) def create_app ( ) : with sentry_sdk.push_scope ( ) as scope : < https : //sentry.io/signup/ > ` _ which you can try for free . Sentry < https : //sentry.io/ > ` _ for dealing with application errors . It 's Or if you are using factories you can also init it later : : To use Sentry you need to install the ` raven ` client with extra ` flask ` dependencies : : $ pip install raven [ flask ] ... $ pip install sentry-sdk [ flask ] from raven.contrib.flask import Sentry you can receive error notifications . < https : //getsentry.com/signup/ > ` _ which you can try for free . Sentry Sentry SDK documentation for more detailed information . After installation , failures leading to an Internal Server Error are automatically reported to except Exception as e : sentry = Sentry ( dsn='YOUR_DSN_HERE ' ) Afterwards failures are automatically reported to Sentry and from there import sentry_sdk sentry_sdk.init ( 'YOUR_DSN_HERE ' , integrations= [ FlaskIntegration ( ) ] ) try : app = Flask ( __name__ ) sentry.init_app ( app ) See the ` Python < https : //docs.sentry.io/platforms/python/ > ` _ and ` Flask-specific < https : //docs.sentry.io/platforms/python/flask/ > ` _ from sentry_sdk.integrations.flask import FlaskIntegration To use Sentry you need to install the ` sentry-sdk ` client with extra ` flask ` dependencies : : < https : //github.com/getsentry/sentry > ` __ and is also available as a ` hosted version < https : //www.getsentry.com/ > ` _ for dealing with application errors . It 's throwing_function ( ) < https : //github.com/getsentry/sentry > ` _ and is also available as a ` hosted version",['docs/errorhandling.rst'],Update sentry error handling documentation ( # 2990 )
161,e08bcf9f9700180a09f77f52604ea6de36fb83a8,2018-11-03 20:32:24-07:00,"request=self.request , The current session object is used instead of reloading the original def __init__ ( self , app , environ , request=None ) : : meth : ` flask.RequestContext.copy ` includes the current session # would otherwise in the view function . data . This prevents ` flask.session ` pointing to an out-of-date object . pointing to an out-of-date object . ( ` # 2935 ` ) # do some work here , it can access flask.request or flask.session [ 'fizz ' ] = 'buzz ' self.session = None then pushed when the function is called . def __init__ ( self , app , environ , request=None , session=None ) : then pushed when the function is called . The current session is also .. _ # 2935 : https : //github.com/pallets/flask/issues/2935 object in the request context copy . This prevents `` flask.session `` assert flask.session.get ( 'fizz ' ) == 'buzz ' request=self.request self.session = session # do some work here , it can access flask.request like you assert flask.session.get ( 'fizz ' ) == 'buzz ' included in the copied request context . # flask.session like you would otherwise in the view function . .. versionchanged : : 1.1 session=self.session","['CHANGES.rst', 'flask/ctx.py', 'tests/test_reqctx.py']",Fix # 2935 : Copy current session object in copy_current_request_context ( # 2936 )
162,7e714bd28b6e96d82b2848b48cf8ff48b517b09b,2018-10-27 13:56:09-07:00,"< http : //tools.ietf.org/html/rfc3987 > ` _ . Imagine your application is .. _eventlet : https : //eventlet.net/ .. _jQuery : http : //jquery.com/ Read more about ` Sphinx < https : //www.sphinx-doc.org > ` _ . ` First Steps with Celery < http : //docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html > ` _ echo.https : //www.sphinx-doc.org/ .. _fabric : https : //www.fabfile.org/ < http : //www.joelonsoftware.com/articles/Unicode.html > ` _ . This part of the < https : //tools.ietf.org/html/rfc3987 > ` _ . Imagine your application is .. _Dive Into HTML5 : http : //diveintohtml5.info/table-of-contents.html .. _MongoKit : https : //github.com/namlook/mongokit .. _Gunicorn : http : //gunicorn.org/ .. _eventlet : http : //eventlet.net/ Read more about ` Sphinx < http : //www.sphinx-doc.org > ` _ . Ideally , create an [ MCVE ] ( http : //stackoverflow.com/help/mcve ) , which helps us .. _uwsgi : https : //uwsgi-docs.readthedocs.io/ < https : //www.joelonsoftware.com/articles/Unicode.html > ` _ . This part of the .. _Fabric : https : //www.fabfile.org/ .. _Dive Into HTML5 : http : //diveintohtml5.info/ .. _MongoKit : http : //bytebucket.org/namlook/mongokit/ .. _uWSGI HTTP Router : http : //uwsgi-docs.readthedocs.io/en/latest/HTTP.html # the-uwsgi-http-https-router .. _jQuery : https : //jquery.com/ .. _committing as you go : http : //dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html # commit-your-changes .. _fabric : http : //www.fabfile.org/ .. _committing as you go : https : //dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html # commit-your-changes .. _Fabric : http : //www.fabfile.org/ .. _uWSGI HTTP Router : https : //uwsgi-docs.readthedocs.io/en/latest/HTTP.html # the-uwsgi-http-https-router echo.http : //sphinx-doc.org/ Ideally , create an [ MCVE ] ( https : //stackoverflow.com/help/mcve ) , which helps us .. _Gunicorn : https : //gunicorn.org/ ` First Steps with Celery < https : //celery.readthedocs.io/en/latest/getting-started/first-steps-with-celery.html > ` _ .. _uwsgi : http : //projects.unbit.it/uwsgi/ .. _uWSGI : https : //uwsgi-docs.readthedocs.io/en/latest/ .. _uWSGI : http : //uwsgi-docs.readthedocs.io/en/latest/","['.github/ISSUE_TEMPLATE.md', 'CONTRIBUTING.rst', 'docs/api.rst', 'docs/config.rst', 'docs/deploying/uwsgi.rst', 'docs/deploying/wsgi-standalone.rst', 'docs/htmlfaq.rst', 'docs/make.bat', 'docs/patterns/celery.rst', 'docs/patterns/fabric.rst', 'docs/patterns/jquery.rst', 'docs/patterns/mongokit.rst', 'docs/unicode.rst']",Merge pull request # 2969 from codeaditya/update-links
163,0038a6796feaea05d9839520eb7f31f7f976fc47,2018-10-24 09:06:39-07:00,"assert app.name == `` testapp '' cli_app_path = os.path.abspath ( os.path.join ( obj = ScriptInfo ( app_import_path=cli_app_path + ' : testapp ' ) obj = ScriptInfo ( app_import_path=cli_app_path ) assert obj.load_app ( ) .name == `` testapp '' path , name = ( re.split ( r ' : ( ? ! [ \\/ ] ) ' , self.app_import_path , 1 ) + [ None ] ) [ :2 ] # import app with module 's absolute path os.path.dirname ( __file__ ) , 'test_apps ' , 'cliapp ' , 'app.py ' ) ) path , name = ( self.app_import_path.split ( ' : ' , 1 ) + [ None ] ) [ :2 ] assert app.name == 'testapp ' assert obj.load_app ( ) is app app = obj.load_app ( ) assert obj.load_app ( ) == app","['flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2963 from garenchan/bugfix- # 2961
164,70b45094ab3d62b919a84f8fb8376e6614a98dd3,2018-10-23 08:27:46-07:00,"if os.path.splitext ( path ) [ 1 ] == '.py ' : path = os.path.splitext ( path ) [ 0 ] fname , ext = os.path.splitext ( path ) if ext == '.py ' : path = fname",['flask/cli.py'],Merge pull request # 2962 from garenchan/dev
165,393bd46085fbf308e8b4e182c43f3871df4ec191,2018-09-21 18:33:56+08:00,/user/John % 20Doe # / /login # /user/John % 20Doe # /login # /login ? next=/ / /login ? next=/,['docs/quickstart.rst'],Merge pull request # 2916 from tombusby/patch-1
166,19a0a7d7718277e63692c8e9d4c11248a5e30a50,2018-09-17 08:56:25-07:00,"import inspect `` blinker '' : ( `` https : //pythonhosted.org/blinker/ '' , None ) , } ] ProjectLink ( 'PyPI releases ' , 'https : //pypi.org/project/Flask/ ' ) , 'pointsize ' : '12pt ' , `` project_links '' : [ ProjectLink ( `` pallets_sphinx_themes '' , line for line in lines `` werkzeug '' : ( `` http : //werkzeug.pocoo.org/docs/ '' , None ) , master_doc = 'index ' 'preamble ' : r'\usepackage { flaskstyle } ' , import functools `` sphinx.ext.autodoc '' , 'localtoc.html ' , import sphinx.util.inspect as inspect _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' , re.M ) 'index ' : [ rv = old_update_wrapper ( wrapper , wrapped , * a , * * kw ) old_update_wrapper = functools.update_wrapper url = `` { 0 } master/ { 1 } '' .format ( base_url , text ) release , version = get_version ( `` Flask '' ) author = 'Pallets Team ' ) : 'fontpkg ' : r'\usepackage { mathpazo } ' , `` fontpkg '' : r '' \usepackage { mathpazo } '' , url = `` { 0 } { 1 } / { 2 } '' .format ( base_url , release , text ) html_title = `` Flask Documentation ( { } ) '' .format ( version ) ProjectLink ( `` Flask Website '' , `` https : //palletsprojects.com/p/flask/ '' ) , `` click '' : ( `` http : //click.pocoo.org/ '' , None ) , latex_additional_files = [ `` flaskstyle.sty '' , `` logo.pdf '' ] linkcheck_anchors = False base_url = 'https : //github.com/pallets/flask/tree/ ' words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) html_static_path = [ `` _static '' ] from pallets_sphinx_themes import get_version ProjectLink ( 'Donate to Pallets ' , 'https : //psfmember.org/civicrm/contribute/transact ? reset=1 & id=20 ' ) , html_logo = '_static/flask.png ' 'sphinx.ext.autodoc ' , ] author = `` Pallets Team '' return rv base_url = `` https : //github.com/pallets/flask/tree/ '' : target : https : //palletsprojects.com/p/flask/ 'relations.html ' , ProjectLink ( `` Issue Tracker '' , `` https : //github.com/pallets/flask/issues/ '' ) , .. image : : _static/flask-logo.png html_static_path = [ '_static ' ] latex_additional_files = [ 'flaskstyle.sty ' , 'logo.pdf ' ] 'carbon_ads_args ' : 'zoneid=1673 & serve=C6AILKT & placement=pocooorg ' , 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , '404 ' : '404.html ' , url = ' { 0 } master/ { 1 } '.format ( base_url , text ) singlehtml_sidebars = { `` index '' : [ `` project.html '' , `` versions.html '' , `` localtoc.html '' ] } if text.endswith ( `` > '' ) : `` * * '' : [ `` localtoc.html '' , `` relations.html '' , `` versions.html '' , `` searchbox.html '' ] , 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , def cut_module_meta ( app , what , name , obj , options , lines ) : ' * * ' : [ html_favicon = '_static/flask-favicon.ico ' 'project.html ' , del unwrap_decorators html_theme = 'flask ' 'sphinxcontrib.log_cabinet ' , inspect.getargspec = getargspec 'Issue Tracker ' , 'https : //github.com/pallets/flask/issues/ ' ) , 'carbon_ads.html ' , ProjectLink ( `` Donate to Pallets '' , `` https : //palletsprojects.com/donate '' ) , 'canonical_url ' : 'http : //flask.pocoo.org/docs/ { } /'.format ( version ) , docstring = inspect.getdoc ( obj ) or `` if text.endswith ( ' > ' ) : if release.endswith ( `` dev '' ) : `` wtforms '' : ( `` https : //wtforms.readthedocs.io/en/latest/ '' , None ) , 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , html_domain_indices = False return old_getargspec ( getattr ( x , '_original_function ' , x ) ) 'sphinx.ext.intersphinx ' , `` sqlalchemy '' : ( `` https : //docs.sqlalchemy.org/en/latest/ '' , None ) , from pallets_sphinx_themes import ProjectLink project = `` Flask '' master_doc = `` index '' ProjectLink ( 'Flask Website ' , 'https : //palletsprojects.com/p/flask/ ' ) , # linkcheck if release.endswith ( 'dev ' ) : `` jinja '' : ( `` http : //jinja.pocoo.org/docs/ '' , None ) , def skip_internal ( app , what , name , obj , skip , options ) : 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , `` sphinxcontrib.log_cabinet '' , html_theme_options = { `` index_sidebar_logo '' : False } project = 'Flask ' `` papersize '' : `` a4paper '' , 'papersize ' : 'a4paper ' , old_getargspec = inspect.getargspec words , text = text [ : -1 ] .rsplit ( `` < `` , 1 ) app.add_role ( `` gh '' , github_link ) ProjectLink ( `` Source Code '' , `` https : //github.com/pallets/flask/ '' ) , rv._original_function = wrapped html_theme = `` flask '' ProjectLink ( 'Source Code ' , 'https : //github.com/pallets/flask/ ' ) , html_additional_pages = { `` `` '' Remove metadata from autodoc output . '' '' '' copyright = '2010 Pallets Team ' `` sphinx.ext.intersphinx '' , 'pallets_sphinx_themes ' , `` index '' : [ `` project.html '' , `` localtoc.html '' , `` versions.html '' , `` searchbox.html '' ] , def github_link ( name , rawtext , text , lineno , inliner , options=None , content=None ) : ] , unwrap_decorators ( ) def unwrap_decorators ( ) : app.connect ( 'autodoc-skip-member ' , skip_internal ) app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) 'itsdangerous ' : ( 'https : //pythonhosted.org/itsdangerous ' , None ) , if skip or _internal_mark_re.search ( docstring ) is not None : name , rawtext , text , lineno , inliner , options=None , content=None copyright = `` 2010 Pallets Team '' url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) # - * - coding : utf-8 - * release , version = get_version ( 'Flask ' ) .. image : : _static/logo-full.png 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) , if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) 'project_links ' : [ app.add_role ( 'gh ' , github_link ) `` python '' : ( `` https : //docs.python.org/3/ '' , None ) , html_favicon = `` _static/flask-icon.png '' 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , `` preamble '' : r '' \usepackage { flaskstyle } '' , 'searchbox.html ' , def update_wrapper ( wrapper , wrapped , * a , * * kw ) : def github_link ( def getargspec ( x ) : lines [ : ] = [ import re if what ! = 'module ' : ( master_doc , 'Flask.tex ' , 'Flask Documentation ' , 'Pallets Team ' , 'manual ' ) , from pallets_sphinx_themes import ProjectLink , get_version ProjectLink ( `` PyPI releases '' , `` https : //pypi.org/project/Flask/ '' ) , functools.update_wrapper = update_wrapper : align : center 'versions.html ' , html_logo = `` _static/flask-logo-sidebar.png '' Binary files /dev/null and b/docs/_static/flask-favicon.ico differ .. rst-class : : hide-header `` pointsize '' : `` 12pt '' , `` itsdangerous '' : ( `` https : //pythonhosted.org/itsdangerous '' , None ) , : align : right return True ( master_doc , `` Flask- { } .tex '' .format ( version ) , html_title , author , `` manual '' ) return","['docs/_static/flask-favicon.ico', 'docs/_static/{touch-icon.png => flask-icon.png}', 'docs/_static/{flask.png => flask-logo-sidebar.png}', 'docs/_static/{logo-full.png => flask-logo.png}', 'docs/conf.py', 'docs/index.rst']",Merge pull request # 2912 from pallets/docs-theme
167,d493e3e083f7565f9b158b12445a994abe9a39cf,2018-09-17 06:39:45-07:00,"from pallets_sphinx_themes import ProjectLink , get_version DocVersion ( ' 0.12 ' , 'Flask 0.12 ' ) , from pallets_sphinx_themes import DocVersion , ProjectLink , get_version 'versions ' : [ DocVersion ( 'dev ' , 'Development ' , 'unstable ' ) , 'pallets_sphinx_themes ' , DocVersion ( ' 1.0 ' , 'Flask 1.0 ' , 'stable ' ) , ] ,",['docs/conf.py'],Merge pull request # 2910 from garenchan/docs
168,21b0aa6dd8b471a72af942a84d58336e2dd68fcb,2018-09-09 17:41:56+09:00,> venv\Scripts\activate coverage run -m pytest $ py -3 -m venv venv $ twistd web -- wsgi myproject.app # apt-get install libapache2-mod-wsgi $ flask run \Python27\python.exe -m pip install virtualenv sudo python2 -m pip install virtualenv export FLASK_ENV=development python -c 'import os ; print ( os.urandom ( 16 ) ) ' $ patch -p1 < patchfile.diff venv\Scripts\activate.bat $ git clone https : //github.com/pallets/flask $ virtualenv venv $ gunicorn myproject : app $ export FLASK_APP= '' myapp : create_app ( 'dev ' ) '' $ export FLASK_ENV=development $ pip install -e .. / .. \Python27\Scripts\virtualenv.exe venv $ pytest pip list > set SECRET_KEY='5f352379324c22463451387a0aec5d2f ' sudo pacman -S python-virtualenv $ pip install -e . sudo apt-get install python-virtualenv $ export FLASK_SKIP_DOTENV=1 $ . venv/bin/activate set FLASK_APP=hello > set DEBUG=False export FLASK_APP=hello twistd -n web -- port tcp:8080 -- wsgi myproject.app export FLASK_APP=flaskr uwsgi -- http 127.0.0.1:5000 -- module myproject : app $ cd examples/tutorial $ sudo pacman -S python-virtualenv flask create_user admin $ pip list gunicorn myproject : app $ sudo python2 -m pip install virtualenv $ pip install ' . [ test ] ' $ pkg install ap22-mod_wsgi2 pytest coverage html # open htmlcov/index.html in a browser py -3 -m venv venv > flask init-db $ python -c 'import os ; print ( os.urandom ( 16 ) ) ' $ apt-get install libapache2-mod-wsgi pip install waitress mkdir flask-tutorial $ cd flask-tutorial python3 -m venv venv pip install -e . flask run -- host=0.0.0.0 flask user create demo $ git tag # shows the tagged versions > set YOURAPPLICATION_SETTINGS=\path\to\settings.cfg $ uwsgi -- http 127.0.0.1:5000 -- module myproject : app $ pip install wheel git clone https : //github.com/pallets/flask mkdir flaskr python -c 'import os ; print ( os.urandom ( 16 ) ) ' $ venv\Scripts\activate.bat > set FLASK_APP=hello $ sudo apt-get install python-virtualenv twistd web -- wsgi myproject.app > set DEBUG=False pip install pytest coverage virtualenv venv $ export FLASK_APP=myapp $ waitress-serve -- call 'flaskr : create_app ' pip install -U https : //github.com/pallets/flask/archive/master.tar.gz mkdir myproject pip install -e .. / .. $ mkdir flaskr $ export FLASK_APP=yourapplication $ pip install waitress venv\Scripts\activate > \Python27\python.exe Downloads\get-pip.py $ python flask-07-upgrade.py > patchfile.diff $ python setup.py bdist_wheel coverage html python setup.py bdist_wheel export FLASK_APP=js_example $ pip install Flask $ coverage report $ flask create_user admin > set SECRET_KEY='5f352379324c22463451387a0aec5d2f ' flask run # chmod +x /var/www/yourapplication/yourapplication.fcgi $ flask run -- host=0.0.0.0 export FLASK_APP= '' myapp : create_app ( 'dev ' ) '' cd flask cd flask-tutorial waitress-serve -- call 'flaskr : create_app ' $ yum install mod_wsgi > set FLASK_APP=flaskr export FLASK_APP=yourapplication $ env : FLASK_ENV = `` development '' cd myproject pip install Flask $ sudo yum install python-virtualenv flask init-db pip install ' . [ test ] ' > set YOURAPPLICATION_SETTINGS=\path\to\settings.cfg $ cd flask # yum install mod_wsgi $ export FLASK_APP=js_example patch -p1 < patchfile.diff > flask run git tag # shows the tagged versions $ flask user create demo $ export FLASK_APP=flaskr $ env : FLASK_APP = `` flaskr '' pip install wheel $ pip install -e ' . [ test ] ' pip install -e ' . [ test ] ' $ git checkout latest-tag-found-above $ pip install -U https : //github.com/pallets/flask/archive/master.tar.gz $ export FLASK_RUN_PORT=8000 $ python -c 'import os ; print ( os.urandom ( 16 ) ) ' git checkout latest-tag-found-above $ gunicorn -w 4 -b 127.0.0.1:4000 myproject : app export FLASK_SKIP_DOTENV=1 pip install pytest sudo python2 Downloads/get-pip.py $ cd myproject pip install flaskr-1.0.0-py3-none-any.whl python flask-07-upgrade.py > patchfile.diff > \Python27\python.exe -m pip install virtualenv $ coverage run -m pytest $ sudo python2 Downloads/get-pip.py $ export FLASK_APP=hello coverage report $ flask init-db > $ env : FLASK_ENV = `` development '' set FLASK_APP=flaskr cd examples/tutorial > $ env : FLASK_APP = `` flaskr '' # pkg install ap22-mod_wsgi2 $ chmod +x /var/www/yourapplication/yourapplication.fcgi $ coverage html sudo yum install python-virtualenv $ pip install pytest coverage set FLASK_ENV=development $ twistd -n web -- port tcp:8080 -- wsgi myproject.app $ mkdir myproject > \Python27\Scripts\virtualenv.exe venv export FLASK_RUN_PORT=8000 $ pip install pytest . venv/bin/activate $ pip install flaskr-1.0.0-py3-none-any.whl > set FLASK_ENV=development gunicorn -w 4 -b 127.0.0.1:4000 myproject : app \Python27\python.exe Downloads\get-pip.py export FLASK_APP=myapp $ mkdir flask-tutorial $ coverage html # open htmlcov/index.html in a browser $ python3 -m venv venv,"['docs/cli.rst', 'docs/config.rst', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/deploying/wsgi-standalone.rst', 'docs/installation.rst', 'docs/patterns/appfactories.rst', 'docs/patterns/packages.rst', 'docs/quickstart.rst', 'docs/testing.rst', 'docs/tutorial/database.rst', 'docs/tutorial/deploy.rst', 'docs/tutorial/factory.rst', 'docs/tutorial/install.rst', 'docs/tutorial/layout.rst', 'docs/tutorial/tests.rst', 'docs/upgrading.rst', 'examples/javascript/README.rst', 'examples/tutorial/README.rst']",Add prefix for all commands in documentation ( # 2877 )
169,345685c0143f030eda443d6c672ae1b705789027,2018-07-20 10:42:09-07:00,".. _contributing guidelines : https : //github.com/pallets/flask/blob/master/CONTRIBUTING.rst single `` / `` instead of `` /yourapplication `` . `` myapp `` refers to the name of for other options . To use your WSGI application with any of them you will need `` myapp : app `` . If your application is accessible at root level , you can use a the application server can serve uWSGI , FastCGI , and HTTP protocols . this guide . Make sure to have it installed to follow along . since it is smarter about that . It is used together with the `` -- mount `` server can serve uWSGI , FastCGI , and HTTP protocols . the file of your flask application ( without extension ) or the module which your flask application ( without extension ) or the module which provides `` app `` . ` cherokee ` _ ; see : ref : ` deploying-fastcgi ` and : ref : ` deploying-wsgi-standalone ` for other options . To use your WSGI application with uWSGI protocol you will `` app = Flask ( __name__ ) `` . guide . Make sure to have it installed to follow along . ` cherokee ` _ ; see : doc : ` uwsgi ` and : doc : ` wsgi-standalone ` for other options . To the line reads `` app = Flask ( __name__ ) `` . directive which will make requests to `` /yourapplication `` be directed to Contributing which will make requests to `` /yourapplication `` be directed to `` myapp : app `` . contribution to Flask , see the ` contributing guidelines ` _ . need a uWSGI server first . uWSGI is both a protocol and an application server ; first . uWSGI is both a protocol and an application server ; the application ` cherokee ` _ ; see : ref : ` deploying-uwsgi ` and : ref : ` deploying-wsgi-standalone ` To use your WSGI application with uWSGI protocol you will need a uWSGI server If your application is accessible at root level , you can use a single `` / `` For a more optimized setup , see : ref : ` configuring uWSGI and NGINX < deploying-uwsgi > ` . The most popular one is ` flup ` _ which we will use for this guide . Make sure to provides `` app `` . `` app `` is the callable inside of your application ( usually since its smarter about that . It is used together with the `` -- mount `` directive instead of `` /yourapplication `` . `` myapp `` refers to the name of the file of guide . Make sure to have it installed to follow along . For guidance on setting up a development environment and how to make a ` cherokee ` _ ; see : doc : ` fastcgi ` and : doc : ` wsgi-standalone ` for other options . `` app `` is the callable inside of your application ( usually the line reads For a more optimized setup , see : doc : ` configuring uWSGI and NGINX < uwsgi > ` . have it installed to follow along . use your WSGI application with any of them you will need a FastCGI server first . a FastCGI server first . The most popular one is ` flup ` _ which we will use for","['README.rst', 'docs/deploying/fastcgi.rst', 'docs/deploying/uwsgi.rst', 'docs/deploying/wsgi-standalone.rst']",Merge pull request # 2861 from jwflory/fix/uwsgi-docs
170,93e4b714a179c7132b505dfbcd835e7aab542a56,2018-07-20 10:28:04-07:00,"as Python literals and passes as arguments to the function . This means that strings must still be in quotes . keyword argument . If the application factory takes only one argument and no is passed as a positional argument . If parentheses follow the factory name , parentheses follow the factory name , the : class : ` ~cli.ScriptInfo ` instance their contents are parsed as Python literals and passes as arguments to the argument . If parentheses follow the factory name , their contents are parsed `` info `` , then the : class : ` ~cli.ScriptInfo ` instance is passed as a keyword `` script_info `` , then the : class : ` ~cli.ScriptInfo ` instance is passed as a function . This means that strings must still be in quotes .",['docs/cli.rst'],Merge pull request # 2870 from jerr0328/docs-update-cli-scriptinfo
171,0bb25eb3673904179e772f4b7376ecc7fbe4822f,2018-06-28 22:23:08-07:00,"from ._compat import getargspec , iteritems , reraise , text_type v for v in itervalues ( module.__dict__ ) if isinstance ( v , Flask ) v for k , v in iteritems ( module.__dict__ ) if isinstance ( v , Flask ) from ._compat import getargspec , itervalues , reraise , text_type",['flask/cli.py'],Merge pull request # 2848 from gcrsaldanha/use-itervalues
172,81c2a1e47565708f7af359503ff61f16558007ad,2018-06-28 07:22:17-07:00,"json_available = True # backwards compat , goes away in 1.0 from .sessions import SecureCookieSession as Session",['flask/__init__.py'],Merge pull request # 2842 from gcrsaldanha/task/remove-deprecated-code
173,827536e20ad2079f3f50db11aac03e037e98503e,2018-06-20 06:50:59-07:00,"Map ( [ < Rule '/static/ < filename > ' ( HEAD , OPTIONS , GET ) - > static > , < Rule '/ ' ( HEAD , OPTIONS , GET ) - > simple_page.show > ] ) < Rule '/pages/ ' ( HEAD , OPTIONS , GET ) - > simple_page.show > ] ) [ < Rule '/static/ < filename > ' ( HEAD , OPTIONS , GET ) - > static > , > > > app.url_map < Rule '/ ' ( HEAD , OPTIONS , GET ) - > simple_page.show > ] < Rule '/pages/ ' ( HEAD , OPTIONS , GET ) - > simple_page.show > ]",['docs/blueprints.rst'],Merge pull request # 2837 from quamilek/update-docs
174,1a9caedb49ada290b00d0db0ec61e66d95807413,2018-06-14 13:31:00+02:00,"assert result.output == ' % s\n ' % str ( not set_debug_flag ) def __init__ ( self , app_import_path=None , create_app=None ) : add_version_option=True , load_dotenv=True , * * extra ) : def __init__ ( self , app_import_path=None , create_app=None , app.debug = debug environment if debug is not None : # Update the app 's debug flag through the descriptor so that other add_version_option=True , load_dotenv=True , : param set_debug_flag : Set the app 's debug flag based on the active obj = ScriptInfo ( create_app=self.create_app ) set_debug_flag=True , * * extra ) : # other values repopulate as well . Allow custom CLIs using `` FlaskGroup `` to set the debug flag without def test ( ) : obj = ScriptInfo ( create_app=self.create_app , app = Flask ( `` flaskgroup '' ) result = runner.invoke ( cli , [ 'test ' ] ) set_debug_flag=True ) : click.echo ( str ( current_app.debug ) ) app.debug = get_debug_flag ( ) def create_app ( info ) : def cli ( * * params ) : .. _ # 2765 : https : //github.com/pallets/flask/pull/2765 set_debug_flag=self.set_debug_flag ) if self.set_debug_flag : debug = get_debug_flag ( ) def test_flaskgroup_debug ( runner , set_debug_flag ) : return app it always being overwritten based on environment variables . ( ` # 2765 ` _ ) # Update the app 's debug flag through the descriptor so that app.debug = True `` `` '' Test FlaskGroup debug flag behavior . '' '' '' # values repopulate as well . self.set_debug_flag = set_debug_flag assert result.exit_code == 0 pass","['CHANGES.rst', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2765 from ThiefMaster/custom-cli-ignore-debug
175,9c0e110e233f67f1853a4ab8e0521ed4ff8afa9a,2018-06-03 18:39:17+09:00,"an Internal Server Error ( pull request `` # 2006 `` ) . `` application/octet-stream `` . See pull request `` # 1988 `` . pull request `` # 1872 `` . .. _ # 1326 : https : //github.com/pallets/flask/pull/1326 .. _ # 1393 : https : //github.com/pallets/flask/pull/1393 has been removed , as per issue `` # 104 `` . ( ` # 1849 ` _ ) Fixed a bug that prevented `` FLASK_APP=foobar/__init__.py `` from working . See has been removed , as per issue `` # 104 `` . See pull request `` # 1849 `` . an Internal Server Error ( ` # 2006 ` _ ) . ( ` # 1730 ` _ ) . .. _ # 1728 : https : //github.com/pallets/flask/pull/1728 the server OS ( ` # 1763 ` _ ) . Allow custom Jinja environment subclasses ( ` # 1422 ` _ ) . ( pull request `` # 1730 `` ) . .. _ # 1484 : https : //github.com/pallets/flask/pull/1484 Allow custom Jinja environment subclasses ( pull request `` # 1422 `` ) . Fix crash when running under PyPy3 . ( ` # 1814 ` _ ) ( ` # 1515 ` _ ) . .. _ # 1515 : https : //github.com/pallets/flask/pull/1515 .. _ # 1422 : https : //github.com/pallets/flask/pull/1422 Fixed a bug that prevented `` FLASK_APP=foobar/__init__.py `` from working . ( ` # 1872 ` _ ) `` flask.json.jsonify `` now supports the `` datetime.date `` type ( pull request the server OS ( pull request `` # 1763 `` ) . .. _ # 1849 : https : //github.com/pallets/flask/pull/1849 `` flask.json.jsonify `` now supports the `` datetime.date `` type ( ` # 1326 ` _ ) . ( pull request `` # 1515 `` ) . .. _ # 1814 : https : //github.com/pallets/flask/pull/1814 Fix crash when running under PyPy3 , see pull request `` # 1814 `` . handlers ( ` # 1393 ` _ ) . .. _ # 1730 : https : //github.com/pallets/flask/pull/1730 `` flask.ext `` is now deprecated ( ` # 1484 ` _ ) . `` flask.ext `` is now deprecated ( pull request `` # 1484 `` ) . .. _ # 2006 : https : //github.com/pallets/flask/pull/2006 Added the `` JSONIFY_MIMETYPE `` configuration variable ( ` # 1728 ` _ ) . .. _ # 1763 : https : //github.com/pallets/flask/pull/1763 `` application/octet-stream `` . ( ` # 1988 ` _ ) .. _ # 1872 : https : //github.com/pallets/flask/pull/1872 .. _ # 1988 : https : //github.com/pallets/flask/pull/1988 handlers ( pull request `` # 1393 `` ) . `` # 1326 `` ) . Added the `` JSONIFY_MIMETYPE `` configuration variable ( pull request `` # 1728 `` ) .",['CHANGES.rst'],Merge pull request # 2795 from dayiguizhen/master
176,b6a8f75c70a0aa72d907a37840213b84f3595f6c,2018-05-31 09:10:17-07:00,"def create_app ( info ) : app.testing = True result = invoke_no_routes ( [ 'routes ' ] ) cli = FlaskGroup ( create_app=create_app ) return partial ( runner.invoke , cli ) def invoke_no_routes ( self , runner ) : assert result.exit_code == 0 assert 'No routes were registered . ' in result.output def test_no_routes ( self , invoke_no_routes ) : return app app = Flask ( __name__ , static_folder=None )",['tests/test_cli.py'],Merge pull request # 2811 from greyli/test-routes-command-for-no-routes
177,99c56eaafa05a34857623d5318c5bccbd634adff,2018-05-28 06:57:15-07:00,"rv = flask.send_file ( 'static/index.html ' , as_attachment=True , attachment_filename=filename ) def test_attachment_with_utf8_filename ( self , app , req_ctx ) : ) ) .. _ # 2766 : https : //github.com/pallets/flask/issues/2766 'NFKD ' , attachment_filename ) .encode ( 'ascii ' , 'ignore ' ) , ' % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt ' ) , assert content_disposition == set ( ( ( 'index.html ' , 'index.html ' , False ) , def test_attachment_filename_encoding ( self , filename , ascii , utf8 ) : 'filename= '' Nandu/pinguino.txt '' ' , content_disposition = set ( rv.headers [ 'Content-Disposition ' ] .split ( ' ; ' ) ) stricter about header encodings than PEP 3333 . ( ` # 2766 ` _ ) 'attachment ' , : func : ` send_file ` encodes filenames as ASCII instead of Latin-1 .. versionchanged : : 1.0.3 ( ISO-8859-1 ) . This fixes compatibility with Gunicorn , which is 'NFKD ' , attachment_filename ) .encode ( 'latin-1 ' , 'ignore ' ) , ( u'Vögel.txt ' , 'Vogel.txt ' , ' V % C3 % B6gel.txt ' ) , assert 'filename= % s ' % ascii in content_disposition assert `` filename * =UTF-8 '' '' not in content_disposition `` filename * =UTF-8 '' % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt '' ) ) ( u'Ñandú／pingüino.txt ' , ' '' Nandu/pinguino.txt '' ' , if utf8 : attachment_filename = attachment_filename.encode ( 'ascii ' ) compatibility with WSGI servers . else : rv = flask.send_file ( 'static/index.html ' , as_attachment=True , attachment_filename=u'Ñandú／pingüino.txt ' ) Filenames are encoded with ASCII instead of Latin-1 for broader assert `` filename * =UTF-8 '' '' + utf8 in content_disposition content_disposition = rv.headers [ 'Content-Disposition ' ] attachment_filename = attachment_filename.encode ( 'latin-1 ' )","['CHANGES.rst', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 2804 from pallets/ascii-header
178,027aeecf26716bff4efcaa7b007e61f2c577a81a,2018-05-20 21:28:26-07:00,an Internal Server Error ( pull request `` # 2006 `` ) . a Internal Server Error ( pull request `` # 2006 `` ) . test client has not the ability to preserve the request context : data : ` SERVER_NAME ` does not implicily enable it . It can be enabled test client has the ability to preserve the request context : data : ` SERVER_NAME ` does not implicitly enable it . It can be enabled,['CHANGES.rst'],Merge pull request # 2792 from greyli/patch-9
179,401d7f9bb2514eb45ff98b2ac7c04952f5eaa678,2018-05-17 09:24:21-04:00,"if sys.version_info < ( 2 , 7 ) : if sys.version_info > = ( 2 , 7 ) : if sys.version_info < ( 2 , 7 , 9 ) : if sys.version_info < ( 2 , 7 , 9 ) : if sys.version_info < ( 2 , 7 ) : if sys.version_info > = ( 2 , 7 , 9 ) :","['flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2789 from briehanlombaard/fix-sslcontext-attribute-error
180,03036533f021c83205be4ba5c826a33322dc4d78,2018-05-13 09:18:08-04:00,audit : .PHONY : all install-dev test coverage cov test-all tox docs release clean-pyc upload-docs ebook python setup.py audit .PHONY : all install-dev test coverage cov test-all tox docs audit release clean-pyc upload-docs ebook,['Makefile'],Merge pull request # 2774 from nicolaiarocci/remove_osbolete_audit_shortcut_from_makefile
181,8c9df3f4eb593cd4755b882d8f412a13ad97429a,2018-05-08 20:27:16-07:00,"% undefined % Apply following fix only on PDF output , i.e . pdfoutput macro is not \DeclareUnicodeCharacter { 1F389 } { \nobreakspace } \ifsphinxpdfoutput % pdfLaTeX does n't support Unicode . % Replace Unicode character 'PARTY POPPER ' ( U+1F389 ) with a non-breaking space . \ifx\pdfoutput\undefined\else",['docs/flaskstyle.sty'],Merge pull request # 2754 from danielopitz/master
182,72011908b530e53761694cfd60a7d4426d96143d,2018-05-08 20:11:47-07:00,: doc : ` Documentation Overview < /index > ` . Now you can return above and : ref : ` install-create-env ` . Now you can continue to : ref : ` install-create-env ` . Flask is now installed . Check out the : doc : ` /quickstart ` or go to the,['docs/installation.rst'],Merge pull request # 2764 from mgalgs/patch-1
183,ad09134c8e124d8e53171b2cf6bd75b8f2819188,2018-05-02 06:16:11-07:00,click.echo ( 'No routes were registered . ' ) if not rules : return,['flask/cli.py'],Merge pull request # 2752 from greyli/patch-9
184,a6a6810d563949303bb820cdb83c63714bf98bcd,2018-05-02 06:04:31-07:00,"url_prefix = url_prefix.rstrip ( '/ ' ) self.url_prefix.rstrip ( '/ ' ) , rule.lstrip ( '/ ' ) ) ) ( `` , '/ ' , '/ ' ) , rule = self.url_prefix else : rule = '/'.join ( ( if rule : if url_prefix : from werkzeug.urls import url_join ( '/foo ' , `` , '/foo ' ) , ( '/foo/ ' , `` , '/foo/ ' ) , ( `` , '/bar ' , '/bar ' ) , rule = '/'.join ( ( self.url_prefix , rule.lstrip ( '/ ' ) ) ) ( '/ ' , '/ ' , '/ ' ) , ( '/ ' , `` , '/ ' ) ,","['flask/blueprints.py', 'tests/test_blueprints.py']",Merge pull request # 2748 from pallets/fix-bp-route
185,6b2127b1e0ef474aed91a25492e18a361ad7f364,2018-04-29 14:57:24-07:00,"return ' { } \ 's profile'.format ( username ) return ' { } 's profile'.format ( username ) and handles `` HEAD `` requests according to the ` HTTP RFC ` _ . Likewise , from flask import request and handles `` HEAD `` requests according to the the ` HTTP RFC ` _ . Likewise ,",['docs/quickstart.rst'],Merge pull request # 2745 from dmarasquin/patch-1
186,6f84cf4e4b4ab71d950db28d1b0776e07a8726e1,2018-04-29 14:27:05-07:00,"' Do `` pip install python-dotenv '' to use them ' , a project runner that loads them already . Keep in mind that the This can be useful if you want to load them manually , or if you 're using .. code-block : : none files . export FLASK_SKIP_DOTENV=1 monkeypatch.setitem ( os.environ , 'FLASK_SKIP_DOTENV ' , ' 1 ' ) val = os.environ.get ( 'FLASK_SKIP_DOTENV ' ) ' Do `` pip install python-dotenv '' to use them . ' , return val.lower ( ) in ( ' 0 ' , 'false ' , 'no ' ) environment variables must be set before the app loads or it wo n't if get_load_dotenv ( self.load_dotenv ) : configure as expected . flask run def test_disable_dotenv_from_env ( monkeypatch , runner ) : `` `` '' Get whether the user has disabled loading dotenv files by setting * Tip : There are .env files present . Do `` pip install python-dotenv '' to use them . : param default : What to return if the env var is n't set . if not val : The `` flask `` command will show a message if it detects dotenv files but monkeypatch.chdir ( test_path ) installed by setting the `` FLASK_SKIP_DOTENV `` environment variable . : envvar : ` FLASK_SKIP_DOTENV ` . The default is `` True `` , load the Disable dotenv ~~~~~~~~~~~~~~ if self.load_dotenv : `` `` '' python-dotenv is not installed . from .helpers import get_debug_flag , get_env , get_load_dotenv return default You can tell Flask not to load dotenv files even when python-dotenv is from .helpers import get_debug_flag , get_env def get_load_dotenv ( default=True ) : assert 'FOO ' not in os.environ runner.invoke ( FlaskGroup ( ) )","['docs/cli.rst', 'flask/cli.py', 'flask/helpers.py', 'tests/test_cli.py']",Merge pull request # 2724 from pallets/issue-2722
187,4c8ec8f555af8aeba5a48c3c4cd9cc39c74dce8f,2018-04-28 07:01:42-07:00,"def allow_abort ( ) : return True trap_bad_request is None and self.debug rv = client.get ( '/fail ' ) with pytest.raises ( KeyError ) : if ( trap_bad_request is None and self.debug ) or trap_bad_request : app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True client.get ( '/abort ' ) # if unset , trap based on debug mode rv = client.get ( '/key ' ) @ app.route ( '/fail ' ) with pytest.raises ( BadRequest ) : # if unset , trap key errors in debug mode and isinstance ( e , BadRequestKeyError ) app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True app.debug = True client.get ( '/key ' ) ) : if trap_bad_request : assert rv.status_code == 400 app.debug = False client.get ( `` /key '' ) flask.abort ( 400 ) client.get ( `` /fail '' ) rv = client.get ( '/abort ' ) if (","['flask/app.py', 'tests/test_basic.py']",Merge pull request # 2739 from pallets/2735-abort-debug
188,27d56c1df5fc977e17806b466dc74dfa9a98689b,2018-04-27 12:46:37-07:00,"rule = self.url_prefix + rule ( '/foo/ ' , 'bar ' , '/foo/bar ' ) , assert client.get ( '/bar/foo ' ) .status_code == 204 url_prefix = url_prefix.rstrip ( '/ ' ) ( '/foo/ ' , '/bar ' , '/foo/bar ' ) , def foo ( ) : app.register_blueprint ( bp , url_prefix='/spam/ ' ) bp = flask.Blueprint ( 'test ' , __name__ , url_prefix=prefix ) if url_prefix and url_prefix [ -1 ] == '/ ' : rule = '/'.join ( ( self.url_prefix , rule.lstrip ( '/ ' ) ) ) ( '/foo// ' , '/bar ' , '/foo/bar ' ) , @ bp.route ( '/foo ' ) def test_blueprint_prefix_slash ( app , client ) : assert client.get ( url ) .status_code == 204 ) ) url_prefix = url_prefix [ : -1 ] assert client.get ( '/spam/foo ' ) .status_code == 204 if url_prefix : def test_blueprint_prefix_slash ( app , client , prefix , rule , url ) : ( '/foo ' , '/bar ' , '/foo/bar ' ) , def index ( ) : ( '/foo/ ' , '//bar ' , '/foo/bar ' ) , bp = flask.Blueprint ( 'test ' , __name__ , url_prefix='/bar/ ' )","['flask/blueprints.py', 'tests/test_blueprints.py']",Merge pull request # 2738 from pallets/2731-bp-prefix-slash
189,32e813f728ca5d8ac662231d8fb1aceafcd85412,2018-04-27 10:11:41-07:00,"`` /users/page/N `` will be the URL for page `` N `` . def region ( id ) : pass requests , make sure the default route only handles `` GET `` , as redirects form with a 301 redirect . In the above example , `` /users/page/1 `` will If a URL contains a default value , it will be redirected to its simpler ca n't preserve form data . : : `` /users/page/N `` will be the URL for page ` N ` . be redirected to `` /users/ `` . If your route handles `` GET `` and `` POST ``",['docs/api.rst'],Merge pull request # 2729 from Dunstrom/2601-internal-error-when-requesting-route-with-url-part-equals-defaults
190,062745b23f7abaafb144e3d94b6fbdf8ccc456b9,2018-04-26 12:07:01-07:00,"( 'Documentation ' , 'http : //flask.pocoo.org/docs/ ' ) , project_urls=OrderedDict ( ( from collections import OrderedDict ) ) , ( 'Issue tracker ' , 'https : //github.com/pallets/pallets-sphinx-themes/issues ' ) , ( 'Code ' , 'https : //github.com/pallets/pallets-sphinx-themes ' ) ,",['setup.py'],Merge pull request # 2720 from pallets/setup-link
191,324b4ea2559f42ca710061bcf6c85960a1f2d2a9,2018-04-19 06:57:11-07:00,"key = ' 2 ' assert isinstance ( s.order [ -1 ] , Tag2 ) the new tag is a special case of an existing tag . If `` None `` s.register ( Tag2 , index=None ) if index == -1 : app.session_interface.serializer.register ( TagOrderedDict , index=0 ) assert isinstance ( s.order [ -2 ] , Tag1 ) s = TaggedJSONSerializer ( ) if index is None : s.register ( Tag1 , index=-1 ) the new tag is a special case of an existing tag . If -1 ( default ) , key = ' 1 ' def register ( self , tag_class , force=False , index=-1 ) : def test_tag_order ( ) : ( default ) , the tag is appended to the end of the order . app.session_interface.serializer.register ( TagOrderedDict , 0 ) class Tag2 ( JSONTag ) : class Tag1 ( JSONTag ) : def register ( self , tag_class , force=False , index=None ) : the tag is appended to the end of the order .","['flask/json/tag.py', 'tests/test_json_tag.py']",Merge pull request # 2711 from pope1ni/session-serializer-fixes
192,e102e5cb3328e6a13aa8c1a1a492c54c4f6d7aba,2018-04-18 13:45:35-07:00,"cli.show_server_banner ( self.env , self.debug , self.name ) click.echo ( message ) def show_server_banner ( env , debug , app_import_path , eager_loading ) : print ( ' * Debug mode : { 0 } '.format ( 'on ' if debug else 'off ' ) ) def show_server_banner ( env , debug , app_import_path ) : if not eager_loading : click.echo ( ' * Environment : { 0 } '.format ( env ) ) cli.show_server_banner ( self.env , self.debug , self.name , False ) click.echo ( ' * Debug mode : { 0 } '.format ( 'on ' if debug else 'off ' ) ) message += ' ( lazy loading ) ' message = ' * Serving Flask app `` { 0 } '' '.format ( app_import_path ) show_server_banner ( get_env ( ) , debug , info.app_import_path ) print ( ' * Serving Flask app `` { 0 } '' '.format ( app_import_path ) ) print ( ' * Environment : { 0 } '.format ( env ) ) show_server_banner ( get_env ( ) , debug , info.app_import_path , eager_loading )","['flask/app.py', 'flask/cli.py']",Merge pull request # 2707 from rochacbruno/lazy_loader_message
193,0ff3f722c1c22399d3c755090901fe0250ca9b50,2018-04-18 13:07:36-07:00,"# If true , an OpenSearch description file will be output , and all pages will import inspect $ ( SPHINXBUILD ) -b doctest $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /doctest can put all of your application code into a single Python module . # language = None app.connect ( 'autodoc-skip-member ' , skip_internal ) words = words.strip ( ) Generic.Prompt : `` # 745334 '' , # class : 'gp ' set SOURCEDIR= . # Local Extensions if errorlevel 9009 ( # 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , echo.Build finished ; the LaTeX files are in % BUILDDIR % /latex . # sphinx-quickstart on Tue Apr 6 15:24:58 2010 . master_doc = 'index ' download it from GitHub : ` flaskext_compat.py ` _ .. _flup : https : //pypi.org/project/flup/ < li > < a href= '' http : //pypi.python.org/pypi/Flask '' > Flask @ PyPI < /a > < /li > If you need a moment to find your bearings , take a look at how the ` example # The name of an image file ( relative to this directory ) to place at the top < https : //pypi.python.org/pypi/Flask-WTF > ` _ . ) : # or the project homepage . 'preamble ' : r'\usepackage { flaskstyle } ' , # If false , no module index is generated . # `` < project > v < release > documentation '' . < ul > # Theme options are theme-specific and customize the look and feel of a theme .PHONY : help Makefile from pallets_sphinx_themes import ProjectLink , get_version 'fontpkg ' : r'\usepackage { mathpazo } ' , changes : < h3 > About Flask < /h3 > # HTML set ALLSPHINXOPTS=-D latex_paper_size= % PAPER % % ALLSPHINXOPTS % echo . qthelp to make HTML files and a qthelp project return [ node ] , [ ] import inspect # html_additional_pages = { } Keyword : `` bold # 004461 '' , # class : ' k ' Name.Builtin.Pseudo : `` # 3465a4 '' , # class : 'bp ' copyright = u'2010 - { 0 } , Armin Ronacher'.format ( datetime.utcnow ( ) .year ) # output . They are ignored by default . # add_function_parentheses = True .. _blinker : https : //pypi.python.org/pypi/blinker % SPHINXBUILD % -b qthelp % ALLSPHINXOPTS % % BUILDDIR % /qthelp background_color = `` # f8f8f8 '' # The depth of the table of contents in toc.ncx . def cut_module_meta ( app , what , name , obj , options , lines ) : Error : `` # a40000 border : # ef2929 '' , # class : 'err ' $ ( SPHINXBUILD ) -b json $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /json .qhcp project file in % BUILDDIR % /qthelp , like this : # unwrap decorators You do n't have to , and if your app Keyword.Type : `` bold # 004461 '' , # class : 'kt ' # -- Options for LaTeX output .. _flaskext_compat.py : https : //raw.githubusercontent.com/pallets/flask/master/scripts/flaskext_compat.py from docutils.nodes import reference Generic.Traceback : `` bold # a40000 '' , # class : 'gt ' @ echo `` linkcheck to check all external links for integrity '' $ ( SPHINXBUILD ) -b linkcheck $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /linkcheck for this example `` results in $ ( BUILDDIR ) /doctest/output.txt . '' release , version = get_version ( 'Flask ' ) print ( 'Warning : Flask themes unavailable . Building with default theme ' ) Generic.Output : `` # 888 '' , # class : 'go ' # directories to ignore when looking for source files . name , rawtext , text , lineno , inliner , options=None , content=None echo.^ > qcollectiongenerator % BUILDDIR % \qthelp\Flask.qhcp docs/_build/ source ` _ is organized . In Flask , you can put all of your application code docstring = inspect.getdoc ( obj ) # -- Options for Epub output echo.Build finished . The HTML pages are in % BUILDDIR % /dirhtml . @ echo `` # ln -s _build/devhelp $ $ HOME/.local/share/devhelp/Flask '' @ echo `` Running LaTeX files through pdflatex ... '' html_show_sourcelink = False Generic.Inserted : `` # 00A000 '' , # class : 'gi ' .hhp project file in % BUILDDIR % /htmlhelp . You can download the documentation in other formats as well : $ ( SPHINXBUILD ) -b changes $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /changes # Put it first so that `` make '' without argument is like `` make help '' . .. _example source : import flaskext_compat # A shorter title for the navigation bar . Default is the same as html_title . String.Regex : `` # 4e9a06 '' , # class : 'sr ' # serve to show the default . an extension that fits your need . If this is the case , you can always create your own . Name.Property : `` # 000000 '' , # class : 'py ' # add these directories to sys.path here . If the directory is relative to the popd @ echo `` dirhtml to make HTML files named index.html in directories '' # html_last_updated_fmt = ' % b % d , % Y ' import re # If true , sectionauthor and moduleauthor directives will be shown in the # Add any paths that contain custom themes here , relative to this directory . < https : //pypi.org/project/Flask-WTF/ > ` _ . # Minimal makefile for Sphinx documentation % SPHINXBUILD % > NUL 2 > NUL @ echo `` Build finished ; now you can run `` qcollectiongenerator '' with the '' \ `` .hhp project file in $ ( BUILDDIR ) /htmlhelp . '' '404 ' : '404.html ' , # epub_author = `` @ echo `` Build finished ; now you can process the pickle files . '' release = pkg_resources.get_distribution ( 'Flask ' ) .version from pygments.style import Style # Bibliographic Dublin Core info . results in % BUILDDIR % /doctest/output.txt . If you do n't get the whole picture , download the ` sourcecode # Flask documentation build configuration file , created by Name.Namespace : `` # 000000 '' , # class : 'nn ' - to be revised .. _flup : https : //pypi.python.org/pypi/flup # `` make mode '' option . $ ( O ) is meant as a shortcut for $ ( SPHINXOPTS ) . # add_module_names = True # template names . @ echo `` Build finished . '' $ ( SPHINXBUILD ) -b htmlhelp $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /htmlhelp < /a > < /p > # This file is execfile ( ) d with the current directory set to its containing dir . html_favicon = '_static/flask-favicon.ico ' # 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , # latex_appendices = [ ] # HTML files shat should be inserted after the pages created by sphinx . html : # The name for this set of Sphinx documents . If None , it defaults to html_additional_pages = { # There are two options for replacing |today| : either , you set today to some PAPER = % SPHINXBUILD % -M help % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % ( master_doc , 'Flask.tex ' , 'Flask Documentation ' , 'Pallets Team ' , 'manual ' ) , # # If true , `` ( C ) Copyright ... '' is shown in the HTML footer . Default is True . docstring = inspect.getdoc ( obj ) or `` String.Backtick : `` # 4e9a06 '' , # class : 'sb ' html_theme_options = { 'carbon_ads_args ' : 'zoneid=1673 & serve=C6AILKT & placement=pocooorg ' , } echo . html to make standalone HTML files default_style = `` '' @ echo `` Build finished . The epub file is in $ ( BUILDDIR ) /epub . '' < li > < a href= '' http : //github.com/pallets/flask '' > Flask @ GitHub < /a > < /li > # -- General configuration if `` % 1 '' == `` json '' ( < li > < a href= '' http : //github.com/pallets/flask/issues '' > Issue Tracker < /a > < /li > set SPHINXPROJ=Flask [ submodule `` docs/_themes '' ] : help html_theme_path = [ '_themes ' ] source_suffix = '.rst ' # The scheme of the identifier . Typical schemes are ISBN or URL . Keyword.Declaration : `` bold # 004461 '' , # class : 'kd ' # Add any paths that contain templates here , relative to this directory . # All configuration values have a default ; values that are commented out echo.Please use ` make ^ < target^ > ` where ^ < target^ > is one of print ( 'Flask must be installed to build the documentation . ' ) intersphinx_mapping = { 'Issue Tracker ' , 'https : //github.com/pallets/flask/issues/ ' ) , Flask Before 0.8 set ALLSPHINXOPTS=-d % BUILDDIR % /doctrees % SPHINXOPTS % . PAPEROPT_letter = -D latex_paper_size=letter # 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , # The theme to use for HTML and HTML Help pages . Major themes that come with except ImportError : # epub_post_files = [ ] print ( 'If you want the Flask themes , run this command and build again : ' ) # html_use_index = True # The format is a list of tuples containing the path and title . goto end : align : right # If extensions ( or modules to document with autodoc ) are in another directory , % SPHINXBUILD % -b changes % ALLSPHINXOPTS % % BUILDDIR % /changes # are not recognized as such later in the parsing , we choose them 'project.html ' , % SPHINXBUILD % -M % 1 % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % Generic.Deleted : `` # a40000 '' , # class : 'gd ' class FlaskyStyle ( Style ) : # default_role = None And here is how you can use it : : # Else , today_fmt is used as the format for a strftime call . exist and you can start importing from there . < h3 > Other Formats < /h3 > # HTML files that should be inserted before the pages created by sphinx . Name.Attribute : `` # c4a000 '' , # class : 'na ' - to be revised < https : //raw.githubusercontent.com/pallets/flask/0.12.3/scripts/flask-07-upgrade.py > ` _ 'sqlalchemy ' : ( 'http : //docs.sqlalchemy.org/en/latest/ ' , None ) , if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) options = options or { } # If true , SmartyPants will be used to convert quotes and dashes to @ echo `` doctest to run all doctests embedded in the documentation ( if enabled ) '' Comment.Preproc : `` noitalic '' , # class : 'cp ' # If not `` , a 'Last updated on : ' timestamp is inserted at every page bottom , 'project_links ' : [ ) html_static_path = [ '_static ' ] # General information about the project . # epub_scheme = `` % SPHINXBUILD % -b singlehtml % ALLSPHINXOPTS % % BUILDDIR % /singlehtml # A unique identification for the text . print ( ) echo.Build finished . The HTML pages are in % BUILDDIR % /html . # 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , latex : # html_use_opensearch = `` styles = { # The reST default role ( used for this markup : ` text ` ) to use for all documents . html_static_path = [ '_static ' ] print ( ' git submodule update -- init ' ) # 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , if skip : app = inliner.document.settings.env.app # epub_title = `` echo.If you do n't have Sphinx installed , grab it from clean : echo . htmlhelp to make HTML files and a HTML help project % SPHINXBUILD % -b epub % ALLSPHINXOPTS % % BUILDDIR % /epub String.Heredoc : `` # 4e9a06 '' , # class : 'sh ' If you are using Flask 0.7 or earlier the : data : ` flask.ext ` package will not 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , intersphinx_mapping = { if `` % 1 '' == `` dirhtml '' ( $ ( SPHINXBUILD ) -b pickle $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /pickle # Text : `` '' , # class : `` echo.to the full path of the 'sphinx-build ' executable . Alternatively you # html_logo = None % : Makefile singlehtml : application that supports Flask 0.7 or earlier you should still import < https : //github.com/pallets/flask/tree/master/examples/jqueryexample > ` _ echo.installed , then set the SPHINXBUILD environment variable to point # Makefile for Sphinx documentation @ echo `` Please use \ ` make < target > ' where < target > is one of '' Operator : `` # 582800 '' , # class : ' o ' 'sourcelink.html ' , Name.Entity : `` # ce5c00 '' , # class : 'ni ' String.Single : `` # 4e9a06 '' , # class : 's1 ' del /q /s % BUILDDIR % \ * # so a file named `` default.css '' will overwrite the builtin `` default.css '' . words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) echo.Build finished ; now you can process the JSON files . # epub_copyright = `` 'carbon_ads.html ' , # Additional templates that should be rendered to pages , maps page names to templates_path = [ '_templates ' ] Once the `` flaskext_compat `` module is activated the : data : ` flask.ext ` will # of the sidebar . Do not set , template magic ! echo . pickle to make pickle files html_logo = '_static/flask.png ' pushd % ~dp0 # If true , ' ( ) ' will be appended to : func : etc . cross-reference text . Operator.Word : `` bold # 004461 '' , # class : 'ow ' - like keywords def skip_internal ( app , what , name , obj , skip , options ) : if `` % 1 '' == `` help '' ( goto end doctest : Keyword.Pseudo : `` bold # 004461 '' , # class : 'kp ' Name.Decorator : `` # 888 '' , # class : 'nd ' - to be revised # Add any paths that contain custom static files ( such as style sheets ) here , # for a list of supported languages . Name.Label : `` # f57900 '' , # class : 'nl ' import sys print ( 'Install from source using ` pip install -e . ` in a virtualenv . ' ) # html_split_index = False # List of patterns , relative to source directory , that match files and @ echo `` Build finished . The HTML pages are in $ ( BUILDDIR ) /html . '' sys.exit ( 1 ) echo.The 'sphinx-build ' command was not found . Make sure you have Sphinx depending on how the extension is distributed . If you want to develop an @ echo `` The overview file is in $ ( BUILDDIR ) /changes . '' # The language of the text . It defaults to the language option echo.Build finished ; now you can process the pickle files . @ echo `` latexpdf to make LaTeX files and run them through pdflatex '' if `` % 1 '' == `` qthelp '' ( echo.Build finished . import re # html_title = None # built documents . Number : `` # 990000 '' , # class : 'm ' @ echo `` qthelp to make HTML files and a qthelp project '' # -- Options for HTML output `` .qhcp project file in $ ( BUILDDIR ) /qthelp , like this : '' .PHONY : help clean html dirhtml singlehtml pickle json htmlhelp qthelp epub latex changes linkcheck doctest ProjectLink ( 'Flask Website ' , 'https : //palletsprojects.com/p/flask/ ' ) , $ ( SPHINXBUILD ) -b epub $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /epub 'sidebarlogo.html ' , 'touch_icon ' : 'touch-icon.png ' % SPHINXBUILD % -b doctest % ALLSPHINXOPTS % % BUILDDIR % /doctest # If true , links to the reST sources are added to the pages . # The unique identifier of the text . This can be a ISBN number # If your documentation needs a minimal Sphinx version , state it here . echo . singlehtml to make a single large HTML file try : # A list of ignored prefixes for module index sorting . # 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) , __import__ ( 'flask_theme_support ' ) # epub_language = `` @ echo `` Link check complete ; look for any errors in the above output `` \ else : if text.endswith ( ' > ' ) : # html_theme = 'default ' < /ul > # |version| and |release| , also used in various other places throughout the # base URL from which the finished HTML is served . Name.Function : `` # 000000 '' , # class : 'nf ' < https : //pypi.org/project/Flask-SQLAlchemy/ > ` _ . If you need a moment to find your bearings , take a look at how the < img class= '' logo '' src= '' { { pathto ( '_static/flask.png ' , 1 ) } } '' alt= '' Logo '' / > from the : data : ` flask.ext ` package . We provide you with a compatibility # or en if the language is not set . this example < examples/jqueryexample > ` from GitHub . # epub_uid = `` qthelp : # non-false value , then it is used : Name.Variable.Instance : `` # 000000 '' , # class : 'vi ' - to be revised if skip or _internal_mark_re.search ( docstring ) is not None : echo . linkcheck to check all external links for integrity $ ( SPHINXBUILD ) -b dirhtml $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /dirhtml SPHINXPROJ = Flask if `` % 1 '' == `` clean '' ( .. _virtual python : https : //pypi.python.org/pypi/virtualenv json : 'sphinxcontrib.log_cabinet ' , # html_short_title = None sources from ` the examples ` _ . $ ( SPHINXBUILD ) -b html $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /html sys.path.append ( os.path.join ( os.path.dirname ( __file__ ) , '_themes ' ) ) String.Interpol : `` # 4e9a06 '' , # class : 'si ' @ echo `` latex to make LaTeX files , you can set PAPER=a4 or PAPER=letter '' # No corresponding class for the following : @ echo `` Run \ ` make all-pdf ' or \ ` make all-ps ' in that directory to '' \ # 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , html_theme = 'flask ' # epub_tocdepth = 3 echo.The overview file is in % BUILDDIR % /changes . @ echo def skip_member ( app , what , name , obj , skip , options ) : if `` % 1 '' == `` doctest '' ( < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.pdf '' > as PDF < /a > if `` % 1 '' == `` changes '' ( # Internal variables . # today_fmt = ' % B % d , % Y ' echo . json to make JSON files words = None if `` % 1 '' == `` pickle '' ( # If true , the index is split into individual pages for each letter . ProjectLink ( ] Generic.Strong : `` bold # 000000 '' , # class : 'gs ' @ echo `` Build finished . The HTML page is in $ ( BUILDDIR ) /singlehtml . '' $ ( SPHINXBUILD ) -b latex $ ( ALLSPHINXOPTS ) _build/latex make -C _build/latex all-pdf # html_file_suffix = `` < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.epub '' > as ePub < /a > # source_encoding = 'utf-8-sig ' # autogenerated file . echo.Build finished . The HTML pages are in % BUILDDIR % /singlehtml . def setup ( app ) : if `` % 1 '' == `` latex '' ( 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) # linkcheck or in % BUILDDIR % /linkcheck/output.txt . # Project # coming with Sphinx ( named 'sphinx.ext . * ' ) or your custom ones . echo.Build finished . The epub file is in % BUILDDIR % /epub . echo.Link check complete ; look for any errors in the above output ^ # flasky extensions . flasky pygments style based on tango style project = u'Flask ' # to look the same as ordinary variables . @ echo `` html to make standalone HTML files '' app.connect ( 'autodoc-skip-member ' , skip_member ) # LaTeX # today = `` # 'itsdangerous ' : ( 'https : //pythonhosted.org/itsdangerous ' , None ) , # Add any Sphinx extension module names here , as strings . They can be extensions linkcheck : % SPHINXBUILD % -b devhelp % ALLSPHINXOPTS % _build/devhelp html_show_sphinx = False html_favicon = '_static/flask-favicon.ico ' Name.Builtin : `` # 004461 '' , # class : 'nb ' looking at the documentation of the development version . sys.path.append ( os.path.dirname ( __file__ ) ) @ echo `` Testing of doctests in the sources finished , look at the `` \ 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , SOURCEDIR = . echo . dirhtml to make HTML files named index.html in directories @ echo `` pickle to make pickle files '' # html_use_smartypants = True # pixels large . # If true , the current module name will be prepended to all description line for line in lines def setup ( app ) : from datetime import datetime # Output file base name for HTML help builder . flaskext_compat.activate ( ) If you do n't get the whole picture , download the : gh : ` sourcecode for return True import os .. _the examples : return _internal_mark_re.search ( docstring or `` ) is not None # Catch-all target : route all unknown targets to Sphinx using the new echo . epub to make an epub if `` % 1 '' == `` singlehtml '' ( # The language for content autogenerated by Sphinx . Refer to documentation # documentation root , use os.path.abspath to make it absolute , like shown here . Number , Operator , Generic , Whitespace , Punctuation , Other , Literal echo . < p class= '' logo '' > < a href= '' { { pathto ( master_doc ) } } '' > echo.To view the help file : # A list of files that should not be packed into the epub file . String.Symbol : `` # 4e9a06 '' , # class : 'ss ' # The name of an image file ( within the static path ) to use as favicon of the Name.Class : `` # 000000 '' , # class : 'nc ' - to be revised release = app.config.release return .. _pip : https : //pypi.python.org/pypi/pip ProjectLink ( 'Source Code ' , 'https : //github.com/pallets/flask/ ' ) , release = `` .join ( release.partition ( 'dev ' ) [ :2 ] ) % SPHINXBUILD % -b htmlhelp % ALLSPHINXOPTS % % BUILDDIR % /htmlhelp pickle : @ echo `` Build finished . The HTML pages are in $ ( BUILDDIR ) /dirhtml . '' String.Double : `` # 4e9a06 '' , # class : 's2 ' _build @ echo `` json to make JSON files '' echo.may add the Sphinx directory to PATH . @ echo `` # qcollectiongenerator $ ( BUILDDIR ) /qthelp/Flask.qhcp '' # Sphinx are currently 'default ' and 'sphinxdoc ' . Other : `` # 000000 '' , # class ' x ' for /d % % i in ( % BUILDDIR % \ * ) do rmdir /q /s % % i version = '.'.join ( release.split ( ' . ' ) [ :2 ] ) 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , an extension that fits your need . If this is the case , you can always create your own . String.Char : `` # 4e9a06 '' , # class : 'sc ' # using the given strftime format . if NOT `` % PAPER % '' == `` '' ( # The encoding of source files . -rm -rf $ ( BUILDDIR ) / * $ ( SPHINXBUILD ) -b singlehtml $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /singlehtml Subproject commit 3d964b660442e23faedf801caed6e3c7bd42d5c9 $ ( SPHINXBUILD ) -b latex $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /latex epub : # Grouping the document tree into LaTeX files . List of tuples echo . latex to make LaTeX files , you can set PAPER=a4 or PAPER=letter Name.Variable.Global : `` # 000000 '' , # class : 'vg ' - to be revised .. _blinker : https : //pypi.org/project/blinker/ # modindex_common_prefix = [ ] echo . devhelp to make HTML files and a Devhelp project 'versions.html ' , htmlhelp : module that provides this package for older versions of Flask . You can # Custom sidebar templates , maps document names to template names . return True % SPHINXBUILD % -b latex % ALLSPHINXOPTS % % BUILDDIR % /latex @ echo `` pdflatex finished ; the PDF files are in _build/latex . '' the ` example source ` _ . # documentation . lines [ : ] = [ words = url if what ! = 'module ' : https : //github.com/pallets/flask/tree/0.12.3/examples/minitwit/ } exist , instead you have to import from `` flaskext.foo `` or `` flask_foo `` echo.Build finished ; now you can run HTML Help Workshop with the ^ < h3 > Useful Links < /h3 > # The suffix of source filenames . node = reference ( rawtext , words , refuri=url , * * options ) app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) master_doc = 'index ' % SPHINXBUILD % -b html % ALLSPHINXOPTS % % BUILDDIR % /html latexpdf : latex @ echo `` devhelp to make HTML files and a Devhelp project '' https : //github.com/pallets/flask/tree/master/examples/minitwit/ } @ echo `` # assistant -collectionFile $ ( BUILDDIR ) /qthelp/Flask.qhc '' project = 'Flask ' @ echo `` changes to make an overview of all changed/added/deprecated items '' copyright = '2010 Pallets Team ' echo.^ > assistant -collectionFile % BUILDDIR % \qthelp\Flask.ghc exclude_patterns = [ '_build ' ] % SPHINXBUILD % -b linkcheck % ALLSPHINXOPTS % % BUILDDIR % /linkcheck set_classes ( options ) String.Doc : `` italic # 8f5902 '' , # class : 'sd ' - like a comment # because special names such as Name.Class , Name.Function , etc . # contain a < link > tag referring to it . The value of this option must be the : gh : ` example source < examples/flaskr > ` is organized . In Flask , you 'fontpkg ' : r'\usepackage { mathpazo } ' , 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) ] , .. _virtual python : https : //pypi.org/project/virtualenv/ Generic.Error : `` # ef2929 '' , # class : 'gr ' if `` % 1 '' == `` htmlhelp '' ( < https : //raw.githubusercontent.com/pallets/flask/master/scripts/flask-07-upgrade.py > ` _ % SPHINXBUILD % -b json % ALLSPHINXOPTS % % BUILDDIR % /json PAPEROPT_a4 = -D latex_paper_size=a4 Whitespace : `` underline # f8f8f8 '' , # class : ' w ' @ echo `` Build finished ; now you can run HTML Help Workshop with the '' \ .. _pip : https : //pypi.org/project/pip/ Keyword.Constant : `` bold # 004461 '' , # class : 'kc ' : help # html_theme_options = { } # If nonempty , this is the file name suffix for HTML files ( e.g . `` .xhtml '' ) . echo.http : //sphinx-doc.org/ https : //github.com/pallets/flask/tree/master/examples/flaskr/ @ echo `` # mkdir -p $ $ HOME/.local/share/devhelp/Flask '' if words is None : if 'dev ' in release : @ echo `` Build finished ; the LaTeX files are in $ ( BUILDDIR ) /latex . '' $ ( SPHINXBUILD ) -b devhelp $ ( ALLSPHINXOPTS ) _build/devhelp devhelp : Name.Other : `` # 000000 '' , # class : 'nx ' : ref : ` grows larger < larger-applications > ` , it 's a good idea not to . if `` % 1 '' == `` html '' ( linkcheck_anchors = False # General ( 'latexindex ' , 'Flask.tex ' , u'Flask Documentation ' , u'Armin Ronacher ' , 'manual ' ) , Literal : `` # 000000 '' , # class : ' l ' < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.mobi '' > as .mobi < /a > < li > < a href= '' http : //flask.pocoo.org/ '' > The Flask Website < /a > < /li > 'searchbox.html ' , def github_link ( echo.Build finished ; now you can run `` qcollectiongenerator '' with the ^ larger < larger-applications > ` , it 's a good idea not to . Generic.Subheading : `` bold # 800080 '' , # class : 'gu ' # epub_identifier = `` # epub_exclude_files = [ ] @ echo `` Build finished ; now you can process the JSON files . '' < p > 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , dirhtml : Comment : `` italic # 8f5902 '' , # class : ' c ' < /p > except pkg_resources.DistributionNotFound : html_use_modindex = False url = ' { 0 } master/ { 1 } '.format ( base_url , text ) $ ( SPHINXBUILD ) -b qthelp $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /qthelp exit /b 1 # The version info for the project you 're documenting , acts as replacement for # epub_pre_files = [ ] # needs_sphinx = ' 1.0 ' 'sidebarintro.html ' , the : gh : ` example source < examples/flaskr > ` . % SPHINXBUILD % -b dirhtml % ALLSPHINXOPTS % % BUILDDIR % /dirhtml author = 'Pallets Team ' Keyword.Reserved : `` bold # 004461 '' , # class : 'kr ' < https : //pypi.python.org/pypi/Flask-SQLAlchemy > ` _ . # epub_publisher = `` html_theme = 'flask ' # docs . This file should be a Windows icon file ( .ico ) being 16x16 or 32x32 Generic.Heading : `` bold # 000080 '' , # class : 'gh ' if `` % 1 '' == `` epub '' ( Name.Constant : `` # 000000 '' , # class : 'no ' - to be revised Keyword.Namespace : `` bold # 004461 '' , # class : 'kn ' 'flaskdocext ' # unit titles ( such as .. function : : ) . `` `` '' Remove metadata from autodoc output . '' '' '' # typographically correct entities . Punctuation : `` bold # 000000 '' , # class : ' p ' from GitHub . # The master toctree document . Generic.Emph : `` italic # 000000 '' , # class : 'ge ' pygments_style = 'flask_theme_support.FlaskyStyle ' print ( '- ' * 74 ) ALLSPHINXOPTS = -d $ ( BUILDDIR ) /doctrees $ ( PAPEROPT_ $ ( PAPER ) ) $ ( SPHINXOPTS ) . # show_authors = False # ( source start file , target name , title , author , documentclass [ howto/manual ] ) . base_url = 'https : //github.com/pallets/flask/tree/ ' # html_show_copyright = True from docutils.parsers.rst.roles import set_classes # further . For a list of options available for each theme , see the # If false , no index is generated . @ echo `` To view the help file : '' # Documents to append as an appendix to all manuals . _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' , re.M ) Name.Tag : `` bold # 004461 '' , # class : 'nt ' - like a keyword Name.Variable.Class : `` # 000000 '' , # class : 'vc ' - to be revised @ echo `` epub to make an epub '' String : `` # 4e9a06 '' , # class : 's ' path = docs/_themes # html_show_sourcelink = True 'canonical_url ' : 'http : //flask.pocoo.org/docs/ { } /'.format ( version ) , import pkg_resources # Note that not all possible configuration values are present in this # relative to this directory . They are copied after the builtin static files , if release.endswith ( 'dev ' ) : ProjectLink ( 'PyPI releases ' , 'https : //pypi.org/project/Flask/ ' ) , from flask.ext import foo Generic : `` # 000000 '' , # class : ' g ' % SPHINXBUILD % -b pickle % ALLSPHINXOPTS % % BUILDDIR % /pickle Flask is a micro webdevelopment framework for Python . You are currently into a single Python module . You do n't have to , and if your app : ref : ` grows from pygments.token import Keyword , Name , Comment , String , Error , \ < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.zip '' > as zipped HTML < /a > sources from : gh : ` the examples < examples/flaskr > ` . app.add_role ( 'gh ' , github_link ) htmlhelp_basename = 'Flaskdoc ' `` or in $ ( BUILDDIR ) /linkcheck/output.txt . '' Name.Exception : `` bold # cc0000 '' , # class : 'ne ' echo . changes to make an overview over all changed/added/deprecated items # If true , `` Created using Sphinx '' is shown in the HTML footer . Default is True . echo.Testing of doctests in the sources finished , look at the ^ 'preamble ' : r'\usepackage { flaskstyle } ' String.Escape : `` # 4e9a06 '' , # class : 'se ' @ echo `` singlehtml to make a single large HTML file '' echo . doctest to run all doctests embedded in the documentation if enabled url = https : //github.com/mitsuhiko/flask-sphinx-themes.git _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' ) @ echo `` # devhelp '' Name : `` # 000000 '' , # class : ' n ' if `` % 1 '' == `` linkcheck '' ( 'searchbox.html ' Name.Variable : `` # 000000 '' , # class : 'nv ' - to be revised Literal.Date : `` # 000000 '' , # class : 'ld ' @ echo `` htmlhelp to make HTML files and a HTML help project '' String.Other : `` # 4e9a06 '' , # class : 'sx ' `` run these through ( pdf ) latex . '' if `` % 1 '' == `` devhelp '' ( html_context = {","['.gitignore', '.gitmodules', 'CHANGES', 'docs/.gitignore', 'docs/Makefile', 'docs/_templates/sidebarintro.html', 'docs/_templates/sidebarlogo.html', 'docs/_themes', 'docs/api.rst', 'docs/conf.py', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/extensions.rst', 'docs/flaskdocext.py', 'docs/flaskext.py', 'docs/index.rst', 'docs/make.bat', 'docs/patterns/distribute.rst', 'docs/patterns/jquery.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/wtforms.rst', 'docs/signals.rst', 'docs/testing.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/index.rst', 'docs/upgrading.rst']",Merge pull request # 2710 from davidism/0.12-docs-theme
194,5fba092c22bee738ad2818d587d75ae17be882d1,2018-04-18 12:13:04-07:00,"# If true , an OpenSearch description file will be output , and all pages will import inspect $ ( SPHINXBUILD ) -b doctest $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /doctest # language = None app.connect ( 'autodoc-skip-member ' , skip_internal ) words = words.strip ( ) `` `` '' Remove metadata from autodoc output . '' '' '' 7 . The documentation must use the `` flask `` theme from the ` Official # Local Extensions ) : % SPHINXBUILD % -M help % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % echo.Build finished ; the LaTeX files are in % BUILDDIR % /latex . # sphinx-quickstart on Tue Apr 6 15:24:58 2010 . master_doc = 'index ' 'Could not import `` { name } '' . '.format ( name=module_name ) .. _flup : https : //pypi.org/project/flup/ # The name of an image file ( relative to this directory ) to place at the top 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , < https : //pypi.python.org/pypi/Flask-WTF > ` _ . from pallets_sphinx_themes import DocVersion , ProjectLink , get_version ) : # or the project homepage . 'preamble ' : r'\usepackage { flaskstyle } ' , # If false , no module index is generated . words = url extensions.append ( 'sphinxcontrib.log_cabinet ' ) # `` < project > v < release > documentation '' . < ul > # Theme options are theme-specific and customize the look and feel of a theme .PHONY : help Makefile Pallets Themes ` _ . app = inliner.document.settings.env.app 'fontpkg ' : r'\usepackage { mathpazo } ' , changes : < h3 > About Flask < /h3 > # HTML set ALLSPHINXOPTS=-D latex_paper_size= % PAPER % % ALLSPHINXOPTS % echo . qthelp to make HTML files and a qthelp project return [ node ] , [ ] import inspect # html_additional_pages = { } set SPHINXPROJ=Flask # output . They are ignored by default . # add_function_parentheses = True .. _blinker : https : //pypi.python.org/pypi/blinker % SPHINXBUILD % -b qthelp % ALLSPHINXOPTS % % BUILDDIR % /qthelp < li > < a href= '' https : //pypi.python.org/pypi/Flask '' > Flask @ PyPI < /a > < /li > # The depth of the table of contents in toc.ncx . return def cut_module_meta ( app , what , name , obj , options , lines ) : $ ( SPHINXBUILD ) -b json $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /json .qhcp project file in % BUILDDIR % /qthelp , like this : # unwrap decorators # -- Options for LaTeX output from docutils.nodes import reference 'versions ' : [ from docutils.nodes import reference @ echo `` linkcheck to check all external links for integrity '' $ ( SPHINXBUILD ) -b linkcheck $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /linkcheck words = None : end `` results in $ ( BUILDDIR ) /doctest/output.txt . '' release , version = get_version ( 'Flask ' ) # directories to ignore when looking for source files . name , rawtext , text , lineno , inliner , options=None , content=None echo.^ > qcollectiongenerator % BUILDDIR % \qthelp\Flask.qhcp docs/_build/ docstring = inspect.getdoc ( obj ) # -- Options for Epub output echo.Build finished . The HTML pages are in % BUILDDIR % /dirhtml . @ echo `` # ln -s _build/devhelp $ $ HOME/.local/share/devhelp/Flask '' @ echo `` Running LaTeX files through pdflatex ... '' html_show_sourcelink = False .hhp project file in % BUILDDIR % /htmlhelp . You can download the documentation in other formats as well : ] $ ( SPHINXBUILD ) -b changes $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /changes # Put it first so that `` make '' without argument is like `` make help '' . # A shorter title for the navigation bar . Default is the same as html_title . node = reference ( rawtext , words , refuri=url , * * options ) def cut_module_meta ( app , what , name , obj , options , lines ) : # serve to show the default . # add these directories to sys.path here . If the directory is relative to the @ echo `` dirhtml to make HTML files named index.html in directories '' # html_last_updated_fmt = ' % b % d , % Y ' .. _MarkupSafe : https : //pypi.org/project/MarkupSafe/ import re # If true , sectionauthor and moduleauthor directives will be shown in the echo . 'docs ' : [ app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) # Add any paths that contain custom themes here , relative to this directory . < https : //pypi.org/project/Flask-WTF/ > ` _ . # Minimal makefile for Sphinx documentation @ echo `` Build finished ; now you can run `` qcollectiongenerator '' with the '' \ `` .hhp project file in $ ( BUILDDIR ) /htmlhelp . '' pallets-sphinx-themes '404 ' : '404.html ' , # epub_author = `` @ echo `` Build finished ; now you can process the pickle files . '' release = pkg_resources.get_distribution ( 'Flask ' ) .version results in % BUILDDIR % /doctest/output.txt . # Bibliographic Dublin Core info . # Flask documentation build configuration file , created by .. _Official Pallets Themes : https : //pypi.org/project/pallets-sphinx-themes/ .. _flup : https : //pypi.python.org/pypi/flup # `` make mode '' option . $ ( O ) is meant as a shortcut for $ ( SPHINXOPTS ) . # add_module_names = True # template names . @ echo `` Build finished . '' $ ( SPHINXBUILD ) -b htmlhelp $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /htmlhelp < /a > < /p > options = options or { } .. _pypi : https : //pypi.org/search/ ? c=Framework+ % 3A % 3A+Flask if `` % SPHINXBUILD % '' == `` '' ( # This file is execfile ( ) d with the current directory set to its containing dir . html_favicon = '_static/flask-favicon.ico ' release = app.config.release # latex_appendices = [ ] # HTML files shat should be inserted after the pages created by sphinx . : help html : # The name for this set of Sphinx documents . If None , it defaults to html_additional_pages = { # There are two options for replacing |today| : either , you set today to some PAPER = ( master_doc , 'Flask.tex ' , 'Flask Documentation ' , 'Pallets Team ' , 'manual ' ) , # # If true , `` ( C ) Copyright ... '' is shown in the HTML footer . Default is True . DocVersion ( ' 0.12 ' , 'Flask 0.12 ' ) , docstring = inspect.getdoc ( obj ) or `` 'carbon_ads_args ' : 'zoneid=1673 & serve=C6AILKT & placement=pocooorg ' , } echo . html to make standalone HTML files ] deps = sphinx @ echo `` Build finished . The epub file is in $ ( BUILDDIR ) /epub . '' # -- General configuration if `` % 1 '' == `` json '' ( line for line in lines source_suffix = '.rst ' # The scheme of the identifier . Typical schemes are ISBN or URL . deps = # Add any paths that contain templates here , relative to this directory . # All configuration values have a default ; values that are commented out echo.Please use ` make ^ < target^ > ` where ^ < target^ > is one of print ( 'Flask must be installed to build the documentation . ' ) intersphinx_mapping = { 'Issue Tracker ' , 'https : //github.com/pallets/flask/issues/ ' ) , .. versionchanged : : 0.13 % SPHINXBUILD % > NUL 2 > NUL set ALLSPHINXOPTS=-d % BUILDDIR % /doctrees % SPHINXOPTS % . PAPEROPT_letter = -D latex_paper_size=letter # The theme to use for HTML and HTML Help pages . Major themes that come with except ImportError : # epub_post_files = [ ] # html_use_index = True # The format is a list of tuples containing the path and title . # If extensions ( or modules to document with autodoc ) are in another directory , 'sphinx ' , goto end % SPHINXBUILD % -b changes % ALLSPHINXOPTS % % BUILDDIR % /changes 'project.html ' , # default_role = None else : # Else , today_fmt is used as the format for a strftime call . < h3 > Other Formats < /h3 > # HTML files that should be inserted before the pages created by sphinx . if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) options = options or { } # If true , SmartyPants will be used to convert quotes and dashes to @ echo `` doctest to run all doctests embedded in the documentation ( if enabled ) '' # If not `` , a 'Last updated on : ' timestamp is inserted at every page bottom , 'project_links ' : [ ) html_static_path = [ '_static ' ] Flask is a micro web development framework for Python . You are currently # General information about the project . 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , # epub_scheme = `` % SPHINXBUILD % -b singlehtml % ALLSPHINXOPTS % % BUILDDIR % /singlehtml from docutils.parsers.rst.roles import set_classes # A unique identification for the text . echo.Build finished . The HTML pages are in % BUILDDIR % /html . latex : lines [ : ] = [ # html_use_opensearch = `` # The reST default role ( used for this markup : ` text ` ) to use for all documents . html_static_path = [ '_static ' ] if skip : app = inliner.document.settings.env.app # epub_title = `` clean : echo . htmlhelp to make HTML files and a HTML help project DocVersion ( ' 1.0 ' , 'Flask 1.0 ' , 'stable ' ) , % SPHINXBUILD % -b epub % ALLSPHINXOPTS % % BUILDDIR % /epub 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , intersphinx_mapping = { if `` % 1 '' == `` dirhtml '' ( $ ( SPHINXBUILD ) -b pickle $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /pickle # html_logo = None % : Makefile singlehtml : 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , # Makefile for Sphinx documentation @ echo `` Please use \ ` make < target > ' where < target > is one of '' 'touch_icon ' : 'touch-icon.png ' .. versionchanged : : 1.0 'sourcelink.html ' , del /q /s % BUILDDIR % \ * # so a file named `` default.css '' will overwrite the builtin `` default.css '' . words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) echo.Build finished ; now you can process the JSON files . words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) # epub_copyright = `` 'carbon_ads.html ' , 'sphinxcontrib-log-cabinet ' , # Additional templates that should be rendered to pages , maps page names to templates_path = [ '_templates ' ] 'pallets-sphinx-themes ' , # of the sidebar . Do not set , template magic ! echo . pickle to make pickle files html_logo = '_static/flask.png ' if `` % 1 '' == `` help '' ( print ( 'sphinxcontrib-log-cabinet is not installed . ' ) # If true , ' ( ) ' will be appended to : func : etc . cross-reference text . def skip_internal ( app , what , name , obj , skip , options ) : goto end doctest : # Add any paths that contain custom static files ( such as style sheets ) here , # for a list of supported languages . base_url = 'https : //github.com/pallets/flask/tree/ ' import sys print ( 'Install from source using ` pip install -e . ` in a virtualenv . ' ) # html_split_index = False # List of patterns , relative to source directory , that match files and echo.may add the Sphinx directory to PATH . @ echo `` Build finished . The HTML pages are in $ ( BUILDDIR ) /html . '' sys.exit ( 1 ) @ echo `` The overview file is in $ ( BUILDDIR ) /changes . '' # The language of the text . It defaults to the language option echo.http : //sphinx-doc.org/ if `` % 1 '' == `` '' goto help echo.Build finished ; now you can process the pickle files . @ echo `` latexpdf to make LaTeX files and run them through pdflatex '' if `` % 1 '' == `` qthelp '' ( echo.Build finished . import re # html_title = None # built documents . @ echo `` qthelp to make HTML files and a qthelp project '' # -- Options for HTML output `` .qhcp project file in $ ( BUILDDIR ) /qthelp , like this : '' .PHONY : help clean html dirhtml singlehtml pickle json htmlhelp qthelp epub latex changes linkcheck doctest 'sidebarlogo.html ' , ProjectLink ( 'Flask Website ' , 'https : //palletsprojects.com/p/flask/ ' ) , $ ( SPHINXBUILD ) -b epub $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /epub % SPHINXBUILD % -b doctest % ALLSPHINXOPTS % % BUILDDIR % /doctest # If true , links to the reST sources are added to the pages . echo . singlehtml to make a single large HTML file # If your documentation needs a minimal Sphinx version , state it here . try : # A list of ignored prefixes for module index sorting . __import__ ( 'sphinxcontrib.log_cabinet ' ) # epub_language = `` .. _Setuptools : https : //pypi.python.org/pypi/setuptools @ echo `` Link check complete ; look for any errors in the above output `` \ else : if text.endswith ( ' > ' ) : # html_theme = 'default ' < /ul > # |version| and |release| , also used in various other places throughout the # base URL from which the finished HTML is served . < https : //pypi.org/project/Flask-SQLAlchemy/ > ` _ . < img class= '' logo '' src= '' { { pathto ( '_static/flask.png ' , 1 ) } } '' alt= '' Logo '' / > DocVersion ( 'dev ' , 'Development ' , 'unstable ' ) , # or en if the language is not set . : end # epub_uid = `` qthelp : # non-false value , then it is used : echo . linkcheck to check all external links for integrity if skip or _internal_mark_re.search ( docstring ) is not None : $ ( SPHINXBUILD ) -b dirhtml $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /dirhtml sphinxcontrib-log-cabinet if `` % 1 '' == `` clean '' ( SPHINXPROJ = Flask .. _virtual python : https : //pypi.python.org/pypi/virtualenv json : 'sphinxcontrib.log_cabinet ' , # html_short_title = None $ ( SPHINXBUILD ) -b html $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /html @ echo `` latex to make LaTeX files , you can set PAPER=a4 or PAPER=letter '' @ echo `` Run \ ` make all-pdf ' or \ ` make all-ps ' in that directory to '' \ # epub_tocdepth = 3 echo.If you do n't have Sphinx installed , grab it from echo.The overview file is in % BUILDDIR % /changes . @ echo def skip_member ( app , what , name , obj , skip , options ) : if `` % 1 '' == `` doctest '' ( < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.pdf '' > as PDF < /a > themes for Sphinx documentation . if `` % 1 '' == `` changes '' ( # Internal variables . # today_fmt = ' % B % d , % Y ' echo . json to make JSON files words = None if `` % 1 '' == `` pickle '' ( # If true , the index is split into individual pages for each letter . ProjectLink ( ] @ echo `` Build finished . The HTML page is in $ ( BUILDDIR ) /singlehtml . '' $ ( SPHINXBUILD ) -b latex $ ( ALLSPHINXOPTS ) _build/latex make -C _build/latex all-pdf # html_file_suffix = `` < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.epub '' > as ePub < /a > # source_encoding = 'utf-8-sig ' # autogenerated file . if release.endswith ( 'dev ' ) : echo.Build finished . The HTML pages are in % BUILDDIR % /singlehtml . def setup ( app ) : if `` % 1 '' == `` latex '' ( 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) # linkcheck or in % BUILDDIR % /linkcheck/output.txt . # Project # coming with Sphinx ( named 'sphinx.ext . * ' ) or your custom ones . echo.Build finished . The epub file is in % BUILDDIR % /epub . echo.Link check complete ; look for any errors in the above output ^ @ ECHO OFF project = u'Flask ' @ echo `` html to make standalone HTML files '' app.connect ( 'autodoc-skip-member ' , skip_member ) url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) # LaTeX # today = `` % SPHINXBUILD % -b devhelp % ALLSPHINXOPTS % _build/devhelp # Add any Sphinx extension module names here , as strings . They can be extensions linkcheck : 'Could not import `` { name } '' . `` '.format ( name=module_name ) html_show_sphinx = False html_favicon = '_static/flask-favicon.ico ' if words is None : looking at the documentation of the development version . sys.path.append ( os.path.dirname ( __file__ ) ) @ echo `` Testing of doctests in the sources finished , look at the `` \ 'click ' : ( 'http : //click.pocoo.org/ ' , None ) , SOURCEDIR = . echo . dirhtml to make HTML files named index.html in directories @ echo `` pickle to make pickle files '' # html_use_smartypants = True # pixels large . BUILD_DATE = datetime.datetime.utcfromtimestamp ( int ( os.environ.get ( 'SOURCE_DATE_EPOCH ' , time.time ( ) ) ) ) # If true , the current module name will be prepended to all description line for line in lines 'itsdangerous ' : ( 'https : //pythonhosted.org/itsdangerous ' , None ) , def setup ( app ) : < li > < a href= '' https : //github.com/pallets/flask/issues '' > Issue Tracker < /a > < /li > exit /b 1 # Output file base name for HTML help builder . return True import os return _internal_mark_re.search ( docstring or `` ) is not None # Catch-all target : route all unknown targets to Sphinx using the new echo . epub to make an epub if `` % 1 '' == `` singlehtml '' ( # The language for content autogenerated by Sphinx . Refer to documentation if errorlevel 9009 ( # documentation root , use os.path.abspath to make it absolute , like shown here . echo . echo.To view the help file : < p class= '' logo '' > < a href= '' { { pathto ( master_doc ) } } '' > set_classes ( options ) set SPHINXBUILD=sphinx-build # A list of files that should not be packed into the epub file . # The name of an image file ( within the static path ) to use as favicon of the release = app.config.release options=None , content=None return 'werkzeug ' : ( 'http : //werkzeug.pocoo.org/docs/ ' , None ) , : class : floatingflask set SOURCEDIR= . .. _pip : https : //pypi.python.org/pypi/pip ProjectLink ( 'Source Code ' , 'https : //github.com/pallets/flask/ ' ) , release = `` .join ( release.partition ( 'dev ' ) [ :2 ] ) % SPHINXBUILD % -b htmlhelp % ALLSPHINXOPTS % % BUILDDIR % /htmlhelp pickle : 'itsdangerous ' : ( 'https : //pythonhosted.org/itsdangerous ' , None ) , @ echo `` Build finished . The HTML pages are in $ ( BUILDDIR ) /dirhtml . '' _build @ echo `` json to make JSON files '' html_theme_options = { 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) , if `` % SPHINXBUILD % '' == `` '' ( @ echo `` # qcollectiongenerator $ ( BUILDDIR ) /qthelp/Flask.qhcp '' # Sphinx are currently 'default ' and 'sphinxdoc ' . for /d % % i in ( % BUILDDIR % \ * ) do rmdir /q /s % % i version = '.'.join ( release.split ( ' . ' ) [ :2 ] ) 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , if what ! = 'module ' : # using the given strftime format . if NOT `` % PAPER % '' == `` '' ( # The encoding of source files . 'python ' : ( 'https : //docs.python.org/3/ ' , None ) , # The unique identifier of the text . This can be an ISBN number -rm -rf $ ( BUILDDIR ) / * $ ( SPHINXBUILD ) -b singlehtml $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /singlehtml supported ( you get them from ` PyPI < https : //pypi.org/ > ` _ ) and a $ ( SPHINXBUILD ) -b latex $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /latex # Grouping the document tree into LaTeX files . List of tuples epub : echo . latex to make LaTeX files , you can set PAPER=a4 or PAPER=letter if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) .. _blinker : https : //pypi.org/project/blinker/ # modindex_common_prefix = [ ] echo . devhelp to make HTML files and a Devhelp project 'versions.html ' , htmlhelp : if `` % 1 '' == `` '' goto help # Custom sidebar templates , maps document names to template names . return True % SPHINXBUILD % -b latex % ALLSPHINXOPTS % % BUILDDIR % /latex @ echo `` pdflatex finished ; the PDF files are in _build/latex . '' # documentation . lines [ : ] = [ words = url return [ node ] , [ ] if what ! = 'module ' : } url = ' { 0 } master/ { 1 } '.format ( base_url , text ) echo.Build finished ; now you can run HTML Help Workshop with the ^ < h3 > Useful Links < /h3 > # The suffix of source filenames . node = reference ( rawtext , words , refuri=url , * * options ) app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) master_doc = 'index ' % SPHINXBUILD % -b html % ALLSPHINXOPTS % % BUILDDIR % /html echo.The 'sphinx-build ' command was not found . Make sure you have Sphinx latexpdf : latex @ echo `` devhelp to make HTML files and a Devhelp project '' @ echo `` # assistant -collectionFile $ ( BUILDDIR ) /qthelp/Flask.qhc '' project = 'Flask ' @ echo `` changes to make an overview of all changed/added/deprecated items '' copyright = '2010 Pallets Team ' echo.^ > assistant -collectionFile % BUILDDIR % \qthelp\Flask.ghc exclude_patterns = [ '_build ' ] % SPHINXBUILD % -b linkcheck % ALLSPHINXOPTS % % BUILDDIR % /linkcheck set_classes ( options ) # contain a < link > tag referring to it . The value of this option must be the 'fontpkg ' : r'\usepackage { mathpazo } ' , ] , .. _virtual python : https : //pypi.org/project/virtualenv/ if `` % 1 '' == `` htmlhelp '' ( print ( 'Changelog directives will not be re-organized . ' ) % SPHINXBUILD % -b json % ALLSPHINXOPTS % % BUILDDIR % /json PAPEROPT_a4 = -D latex_paper_size=a4 @ echo `` Build finished ; now you can run HTML Help Workshop with the '' \ .. _pip : https : //pypi.org/project/pip/ ) set BUILDDIR=_build : help # html_theme_options = { } # If nonempty , this is the file name suffix for HTML files ( e.g . `` .xhtml '' ) . .. _MarkupSafe : https : //pypi.python.org/pypi/MarkupSafe @ echo `` # mkdir -p $ $ HOME/.local/share/devhelp/Flask '' if words is None : if 'dev ' in release : @ echo `` Build finished ; the LaTeX files are in $ ( BUILDDIR ) /latex . '' $ ( SPHINXBUILD ) -b devhelp $ ( ALLSPHINXOPTS ) _build/devhelp < li > < a href= '' https : //github.com/pallets/flask '' > Flask @ GitHub < /a > < /li > import datetime devhelp : .. _Setuptools : https : //pypi.org/project/setuptools/ : ref : ` patterns ` section . The rest of the docs desribe each component of popd if `` % 1 '' == `` html '' ( linkcheck_anchors = False : ref : ` patterns ` section . The rest of the docs describe each component of # General ( 'latexindex ' , 'Flask.tex ' , u'Flask Documentation ' , u'Armin Ronacher ' , 'manual ' ) , < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.mobi '' > as .mobi < /a > < li > < a href= '' http : //flask.pocoo.org/ '' > The Flask Website < /a > < /li > 'searchbox.html ' , def github_link ( echo.Build finished ; now you can run `` qcollectiongenerator '' with the ^ # epub_identifier = `` # epub_exclude_files = [ ] echo.installed , then set the SPHINXBUILD environment variable to point supported ( you get them from ` PyPI < https : //pypi.python.org/pypi > ` _ ) and a @ echo `` Build finished ; now you can process the JSON files . '' < p > set SPHINXBUILD=sphinx-build 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , dirhtml : < /p > except pkg_resources.DistributionNotFound : html_use_modindex = False if text.endswith ( ' > ' ) : url = ' { 0 } master/ { 1 } '.format ( base_url , text ) $ ( SPHINXBUILD ) -b qthelp $ ( ALLSPHINXOPTS ) $ ( BUILDDIR ) /qthelp % SPHINXBUILD % -M % 1 % SOURCEDIR % % BUILDDIR % % SPHINXOPTS % def github_link ( name , rawtext , text , lineno , inliner , # The version info for the project you 're documenting , acts as replacement for # epub_pre_files = [ ] # needs_sphinx = ' 1.0 ' echo.to the full path of the 'sphinx-build ' executable . Alternatively you 'sidebarintro.html ' , : align : right % SPHINXBUILD % -b dirhtml % ALLSPHINXOPTS % % BUILDDIR % /dirhtml author = 'Pallets Team ' < https : //pypi.python.org/pypi/Flask-SQLAlchemy > ` _ . # epub_publisher = `` html_theme = 'flask ' # docs . This file should be a Windows icon file ( .ico ) being 16x16 or 32x32 if `` % 1 '' == `` epub '' ( # html_theme_path = [ '_themes ' ] 'flaskdocext ' # unit titles ( such as .. function : : ) . `` `` '' Remove metadata from autodoc output . '' '' '' # typographically correct entities . # The master toctree document . 7 . The extension must have documentation that uses one of the two Flask ALLSPHINXOPTS = -d $ ( BUILDDIR ) /doctrees $ ( PAPEROPT_ $ ( PAPER ) ) $ ( SPHINXOPTS ) . # show_authors = False # ( source start file , target name , title , author , documentclass [ howto/manual ] ) . base_url = 'https : //github.com/pallets/flask/tree/ ' # html_show_copyright = True from docutils.parsers.rst.roles import set_classes # further . For a list of options available for each theme , see the # If false , no index is generated . @ echo `` To view the help file : '' # Documents to append as an appendix to all manuals . _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' , re.M ) @ echo `` epub to make an epub '' else : REM Command file for Sphinx documentation # html_show_sourcelink = True 'canonical_url ' : 'http : //flask.pocoo.org/docs/ { } /'.format ( version ) , import pkg_resources pushd % ~dp0 REM Command file for Sphinx documentation # Note that not all possible configuration values are present in this # relative to this directory . They are copied after the builtin static files , if release.endswith ( 'dev ' ) : ProjectLink ( 'PyPI releases ' , 'https : //pypi.org/project/Flask/ ' ) , % SPHINXBUILD % -b pickle % ALLSPHINXOPTS % % BUILDDIR % /pickle < li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.zip '' > as zipped HTML < /a > import time htmlhelp_basename = 'Flaskdoc ' `` or in $ ( BUILDDIR ) /linkcheck/output.txt . '' echo . changes to make an overview over all changed/added/deprecated items # If true , `` Created using Sphinx '' is shown in the HTML footer . Default is True . words = words.strip ( ) 'jinja ' : ( 'http : //jinja.pocoo.org/docs/ ' , None ) , sphinx echo.Testing of doctests in the sources finished , look at the ^ 'preamble ' : r'\usepackage { flaskstyle } ' .. _pypi : https : //pypi.python.org/pypi ? : action=browse & c=585 @ echo `` singlehtml to make a single large HTML file '' echo . doctest to run all doctests embedded in the documentation if enabled _internal_mark_re = re.compile ( r'^\s * : internal : \s * $ ( ? m ) ' ) @ echo `` # devhelp '' if `` % 1 '' == `` linkcheck '' ( 'searchbox.html ' copyright = u'2010 - { 0 } , Armin Ronacher'.format ( BUILD_DATE.year ) 'blinker ' : ( 'https : //pythonhosted.org/blinker/ ' , None ) , @ echo `` htmlhelp to make HTML files and a HTML help project '' 'wtforms ' : ( 'https : //wtforms.readthedocs.io/en/latest/ ' , None ) , set BUILDDIR=_build `` run these through ( pdf ) latex . '' if `` % 1 '' == `` devhelp '' ( html_context = {","['.gitignore', 'CHANGES.rst', 'docs/.gitignore', 'docs/Makefile', 'docs/_templates/sidebarintro.html', 'docs/_templates/sidebarlogo.html', 'docs/api.rst', 'docs/conf.py', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/extensiondev.rst', 'docs/extensions.rst', 'docs/flaskdocext.py', 'docs/index.rst', 'docs/installation.rst', 'docs/make.bat', 'docs/patterns/caching.rst', 'docs/patterns/distribute.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/wtforms.rst', 'docs/signals.rst', 'flask/cli.py', 'flask/helpers.py', 'setup.py', 'tox.ini']",Merge pull request # 2709 from davidism/docs-theme
195,8f5168cb31a34c54c9a751cb386b8615e03fb148,2018-04-18 13:42:46-03:00,"def show_server_banner ( env , debug , app_import_path , eager_loading=True ) : if not eager_loading : def show_server_banner ( env , debug , app_import_path ) : print ( message ) message += ' ( lazy loading ) ' message = ' * Serving Flask app `` { 0 } '' '.format ( app_import_path ) show_server_banner ( get_env ( ) , debug , info.app_import_path ) print ( ' * Serving Flask app `` { 0 } '' '.format ( app_import_path ) ) show_server_banner ( get_env ( ) , debug , info.app_import_path , eager_loading )",['flask/cli.py'],Add explicit ` ( lazy loading ) ` message to ` flask run ` related to # 2706
196,746b91dfced525651c9b71a3bd075a78d2b9262f,2018-04-12 11:28:49-07:00,"for this example < examples/jqueryexample > ` . branch = True [ tool : pytest ] < a href= '' { { url_for ( 'index ' , js='plain ' ) } } '' > Plain < /a > * .egg-info/ coverage report li.active > a { color : # 5e5e5e ; border-bottom : 2px solid # 4a4a4a ; } .. |fetch| replace : : `` fetch `` universal = True description='Demonstrates making Ajax requests to Flask . ' , dist/ Some rights reserved . * Neither the name of the copyright holder nor the names of its app.testing = True client.get ( path ) ) https : //github.com/pallets/flask/tree/master/examples/minitwit/ CONTRIBUTORS `` AS IS '' AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , assert response.get_json ( ) [ 'result ' ] == result * ~ b = request.form.get ( ' b ' , 0 , type=float ) < /style > yield app testpaths = tests ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT graft js_example/templates ( '/jquery ' , 'jquery.html ' ) , include LICENSE SUCH DAMAGE . ] , label > input { width : 3em ; } < script src= '' https : //code.jquery.com/jquery-3.3.1.min.js '' > < /script > assert template.name == template_name pip install -q -e examples/javascript [ test ] .. |XMLHttpRequest| replace : : `` XMLHttpRequest `` is the < em > new < /em > plain JavaScript way to make requests . It 's form { display : flex ; } $ .ajax ( { function addSubmit ( ev ) { } ) well as documentation , with or without modification , are permitted request.addEventListener ( 'load ' , addShow ) ; return render_template ( ' { 0 } .html'.format ( js ) , js=js ) For more complex tests with headers and status codes , check out the this software without specific prior written permission . < /script > readme = f.read ( ) error = 'User { 0 } is already registered . '.format ( username ) coverage run -m pytest thing using `` XMLHttpRequest `` and `` fetch `` . Run < hr > ======================= from flask import jsonify , render_template , request [ metadata ] notice , this list of conditions and the following disclaimer in the with io.open ( 'README.rst ' , 'rt ' , encoding='utf8 ' ) as f : * Redistributions of source code must retain the above copyright notice , FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE ul { margin : 0 ; padding : 0 ; display : flex ; list-style-type : none ; } .coverage name='js_example ' , Open http : //127.0.0.1:5000 in a browser . ( 2 , ' b ' , 2 ) , is the plain JavaScript way to make requests . It 's natively supported < a href= '' https : //jquery.com/ '' > jQuery < /a > is a popular library that COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , ( 2 , 3 , 5 ) , .. _jQuery.ajax : https : //api.jquery.com/jQuery.ajax/ this list of conditions and the following disclaimer . < /ul > < script > adds cross browser APIs for common tasks . However , it requires loading < label > a < input name= '' a '' > < /label > def client ( app ) : < li > < span > Type : < /span > def add ( ) : python3 -m venv venv license_file = LICENSE pip install ' . [ test ] ' } .. _MiniTwit Example : htmlcov/ < li class= '' { % if js == 'jquery ' % } active { % endif % } '' > [ coverage : run ] { % extends 'base.html ' % } by all browsers . 'flask ' , ( 2.5 , 3 , 5.5 ) , .pytest_cache/ from setuptools import find_packages , setup < a href= '' { { url_for ( 'index ' , js='jquery ' ) } } '' > jQuery < /a > < input type= '' submit '' value= '' Calculate '' > < label > b < input name= '' b '' > < /label > method : 'POST ' , Copyright © 2010 by the Pallets team . < p > { % block intro % } { % endblock % } < /p > < a href= '' https : //developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch '' > < code > fetch < /code > < /a > version= ' 1.0.0 ' , function addShow ( ) { maintainer='Pallets team ' , .idea/ .cache/ Test THIS SOFTWARE AND DOCUMENTATION , EVEN IF ADVISED OF THE POSSIBILITY OF request.open ( 'POST ' , ' { { url_for ( 'add ' ) } } ' ) ; include_package_data=True , < span > = < span id= '' result '' > < /span > < /span > pip install pytest coverage * Redistributions in binary form must reproduce the above copyright < span > + < /span > ( '/plain ' , 'plain.html ' ) , app = Flask ( __name__ ) < ! doctype html > request.send ( new FormData ( this ) ) ; { % block script % } { % endblock % } * .pyc $ ( ' # result ' ) .text ( data.result ) ; def test_index ( app , client , path , template_name ) : . venv/bin/activate provided that the following conditions are met : { % endblock % } url : ' { { url_for ( 'add ' ) } } ' , contributors may be used to endorse or promote products derived from .. _XMLHttpRequest : https : //developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest var data = JSON.parse ( this.responseText ) ; license='BSD ' , document.forms [ 0 ] .addEventListener ( 'submit ' , addSubmit ) ; url='http : //flask.pocoo.org/docs/patterns/jquery/ ' , li > * { padding : 1em ; } Demonstrates how to post form data and process a JSON response using suite . { % block intro % } import io < a href= '' https : //developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest '' > < code > XMLHttpRequest < /code > < /a > return app.test_client ( ) return response.json ( ) ; function parseJSON ( response ) { data : $ ( this ) .serialize ( ) < style > instance/ a = request.form.get ( ' a ' , 0 , type=float ) function addShow ( data ) { NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF var request = new XMLHttpRequest ( ) ; setup ( page . Demonstrates using |XMLHttpRequest|_ , |fetch|_ , and JavaScript Ajax Example from js_example import views flask run pip install -e ' . [ test ] ' BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND graft tests < title > JavaScript Example < /title > < a href= '' https : //github.com/github/fetch '' > polyfill < /a > . pip install -q -e examples/tutorial [ test ] ) ) pip install -e . supported in all modern browsers except IE , which requires a def fixture_app ( ) : js_example 'blinker ' , documentation and/or other materials provided with the distribution . export FLASK_APP=js_example } ) .done ( addShow ) ; $ ( 'form : first ' ) .on ( 'submit ' , addSubmit ) ; var span = document.getElementById ( 'result ' ) ; universal = False an extra library . INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT [ bdist_wheel ] ( '/ ' , 'plain.html ' ) , { % block script % } ( 2 , None , 2 ) , .. |jQuery.ajax| replace : : `` jQuery.ajax `` packages=find_packages ( ) , global-exclude * .pyc < /form > pip install pytest < form > * .swp app.testing = False pip install -e examples/tutorial -q error = 'User { } is already registered . '.format ( username ) ` MiniTwit Example ` _ from the sources which contains a larger test __pycache__/ < li class= '' { % if js == 'fetch ' % } active { % endif % } '' > extras_require= { from js_example import app def check ( sender , template , context ) : return jsonify ( result=a + b ) import pytest .. _fetch : https : //developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch } , THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND < li class= '' { % if js == 'plain ' % } active { % endif % } '' > 'test ' : [ build/ response = client.post ( '/add ' , data= { ' a ' : a , ' b ' : b } ) from flask import Flask form > * { padding-right : 1em ; } fetch ( ' { { url_for ( 'add ' ) } } ' , { ] , ( '/fetch ' , 'fetch.html ' ) , with template_rendered.connected_to ( check , app ) : ev.preventDefault ( ) ; If you do n't get the whole picture , download the : gh : ` sourcecode .then ( addShow ) ; |jQuery.ajax|_ . See the ` Flask docs ` _ about jQuery and Ajax . 'pytest ' , .. _Flask docs : http : //flask.pocoo.org/docs/patterns/jquery/ < ul > < a href= '' { { url_for ( 'index ' , js='fetch ' ) } } '' > Fetch < /a > span.innerText = data.result ; zip_safe=False , JavaScript . This allows making requests without navigating away from the .then ( parseJSON ) application demonstrating the jQuery on this page , as well as the same from flask import template_rendered USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON # result { font-weight : bold ; } Redistribution and use in source and binary forms of the software as source = 'coverage ' , : : install_requires= [ def test_add ( client , a , b , result ) : def index ( js ) : Check out the : gh : ` example source < examples/javascript > ` for a full Install body : new FormData ( this ) long_description=readme , venv/","['docs/patterns/jquery.rst', 'docs/testing.rst', 'examples/javascript/.gitignore', 'examples/javascript/LICENSE', 'examples/javascript/MANIFEST.in', 'examples/javascript/README.rst', 'examples/javascript/js_example/__init__.py', 'examples/javascript/js_example/templates/base.html', 'examples/javascript/js_example/templates/fetch.html', 'examples/javascript/js_example/templates/jquery.html', 'examples/javascript/js_example/templates/plain.html', 'examples/javascript/js_example/views.py', 'examples/javascript/setup.cfg', 'examples/javascript/setup.py', 'examples/javascript/tests/conftest.py', 'examples/javascript/tests/test_js_example.py', 'examples/tutorial/README.rst', 'examples/tutorial/flaskr/auth.py', 'examples/tutorial/setup.cfg', 'examples/tutorial/setup.py', 'tox.ini']",Merge pull request # 2699 from pallets/javascript
197,b178e89e4456e777b1a7ac6d7199052d0dfdbbbe,2018-04-10 12:58:45-07:00,"[ ] , [ 1 , 2 , 3 ] , : param data : Bytes in unknown UTF encoding . if request_charset is not None : : return : UTF encoding name rv = json.loads ( data ) # fits our general approach of being nice in what we accept ) ) `` `` '' Detect which UTF codec was used to encode the given bytes . if head in ( codecs.BOM_UTF32_BE , codecs.BOM_UTF32_LE ) : s = s.decode ( kwargs.pop ( 'encoding ' , None ) or 'utf-8 ' ) if head [ :3 ] == codecs.BOM_UTF8 : if head [ 1 : ] == b'\x00\x00\x00 ' : return 'utf-16-be ' if head [ : :2 ] == b'\x00\x00 ' : def test_detect_encoding ( self , value , encoding ) : request_charset = self.mimetype_params.get ( 'charset ' ) rv = json.loads ( data ) 1 , 't ' , True , False , None , return 'utf-32-be ' if head [ :3 ] == b'\x00\x00\x00 ' : app = flask.Flask ( __name__ ) return 'utf-32 ' rv = json.loads ( data , encoding=request_charset ) data = json.dumps ( value ) .encode ( encoding ) 'utf-16-le ' , 'utf-16-be ' , 'utf-16 ' , def detect_encoding ( data ) : data = _get_data ( self , cache ) # certain clients have been using this in the past . This accepted . Older documents allowed 8 , 16 , or 32 . 16 and 32 can be big # We accept a request charset against the specification as content_type='application/json ; charset=iso-8859-15 ' ) resp = c.get ( '/ ' , data=u ' '' Hällo Wörld '' '.encode ( 'iso-8859-15 ' ) , if head [ 1 : :2 ] == b'\x00\x00 ' : return 'utf-16-le ' else : { } , { 'foo ' : u'🐍 ' } , 'utf-8 ' , 'utf-8-sig ' , if len ( head ) == 4 : if encoding is None : c = app.test_client ( ) head = data [ :4 ] `` `` '' if head [ :2 ] in ( codecs.BOM_UTF16_BE , codecs.BOM_UTF16_LE ) : import codecs return 'utf-8-sig ' or little endian . Some editors or libraries may prepend a BOM . return 'utf-32-le ' from flask import json @ app.route ( '/ ' ) return 'utf-8 ' 'utf-32-le ' , 'utf-32-be ' , 'utf-32 ' , data = _get_data ( self , cache ) encoding = detect_encoding ( s ) def index ( ) : return flask.request.get_json ( ) app.testing = True def test_json_body_encoding ( self ) : return 'utf-16 ' if len ( head ) == 2 : The latest JSON standard ( : rfc : ` 8259 ` ) suggests that only UTF-8 is s = s.decode ( encoding ) return 'utf-16-be ' if head.startswith ( b'\x00 ' ) else 'utf-16-le ' return 'utf-8 ' assert json.loads ( data ) == value assert json.detect_encoding ( data ) == encoding assert resp.data == u'Hällo Wörld'.encode ( 'utf-8 ' ) # and strict in what we send out . encoding = kwargs.pop ( 'encoding ' , None ) if b'\x00 ' not in head :","['flask/json.py', 'flask/wrappers.py', 'tests/test_helpers.py']",Merge pull request # 2695 from pallets/backport-2691-json-encoding
198,aab4c8c7452ba198c6096face53ac2b7cc6460b8,2018-04-10 12:31:52-07:00,"# the reloader can properly operate . sys.argv = [ '-m ' , this_module ] + sys.argv [ 1 : ] if sys.version_info < ( 2 , 7 ) : # we need to ensure that we restore the actual command line so that this_module += '.cli ' this_module = 'flask ' name = 'python -m ' + this_module this_module = __package__ + '.cli ' # Python rewrites `` python -m flask '' to the path to the file in argv . sys.argv = [ '-m ' , this_module ] + args if sys.version_info > = ( 2 , 7 ) : else : name = 'python -m ' + this_module # Restore the original command so that the reloader works . name = 'python -m ' + this_module.rsplit ( ' . ' , 1 ) [ 0 ] # This module is always executed as `` python -m flask.run '' and as such",['flask/cli.py'],Merge pull request # 2694 from pallets/backport-2359-cli-warning
199,d8bf589d4835ab03daee3101a91c80ee648e72b6,2018-04-10 11:26:15-07:00,"response = flask.Response ( ) with app.app_context ( ) : Werkzeug 's docs . : members : set_cookie , data , mimetype , is_json , get_json app.config [ 'MAX_COOKIE_SIZE ' ] = 100 assert len ( recwarn ) == 0 ignore . ( ` # 2693 ` _ ) # which is also the default config See : attr : ` ~werkzeug.wrappers.BaseResponse.max_cookie_size ` in def test_max_cookie_size ( app , client , recwarn ) : def max_cookie_size ( self ) : default = flask.Flask.default_config [ 'MAX_COOKIE_SIZE ' ] Added : data : ` MAX_COOKIE_SIZE ` to control a warning from Werkzeug . client.get ( '/ ' ) # return Werkzeug 's default when not in an app context app.config [ 'MAX_COOKIE_SIZE ' ] = 0 assert 'cookie is too large ' in str ( w.message ) .. versionchanged : : 1.0 if current_app : # outside app context , default to Werkzeug static value , .. _ # 2693 : https : //github.com/pallets/flask/pull/2693 : meth : ` Request.get_json ( ) < flask.Request.get_json > ` does n't cache the return current_app.config [ 'MAX_COOKIE_SIZE ' ] arbitrary encodings . Incoming JSON should be encoded using UTF-8 per `` `` '' Read-only view of the : data : ` MAX_COOKIE_SIZE ` config key . # inside app context , use app config assert len ( recwarn ) == 1 'MAX_COOKIE_SIZE ' : 4093 , Added : attr : ` max_cookie_size ` . `` 0 `` to disable the warning . : func : ` Request.get_json ` no longer accepts arbitrary encodings . assert flask.Response ( ) .max_cookie_size == 100 assert response.max_cookie_size == default return super ( Response , self ) .max_cookie_size r = flask.Response ( `` , status=204 ) Added : data : ` MAX_COOKIE_SIZE ` and : attr : ` Response.max_cookie_size ` to : meth : ` Request.get_json ` does n't cache the r.set_cookie ( 'foo ' , 'bar ' * 100 ) : func : ` request.get_json < flask.Request.get_json > ` no longer accepts `` `` '' Warn if cookie headers are larger than this many bytes . Defaults to .. py : data : : MAX_COOKIE_SIZE return r w = recwarn.pop ( ) def index ( ) : will autodetect UTF-8 , -16 , or -32 . ( ` # 2691 ` _ ) control when Werkzeug warns about large cookies that browsers may : members : set_cookie , max_cookie_size , data , mimetype , is_json , get_json `` 4093 `` . Larger cookies may be silently ignored by browsers . Set to : rfc : ` 8259 ` , but Flask will autodetect UTF-8 , -16 , or -32 . ( ` # 2691 ` _ ) Incoming JSON should be encoded using UTF-8 per : rfc : ` 8259 ` , but Flask","['CHANGES.rst', 'docs/api.rst', 'docs/config.rst', 'flask/app.py', 'flask/wrappers.py', 'tests/test_basic.py']",Merge pull request # 2693 from davidism/max-cookie-size
200,465b48ed4e4af52493df1febe4687f53032a5e0a,2018-04-10 09:47:14-07:00,"# charset is set then the data has been encoded correctly as well . .. _ # 2691 : https : //github.com/pallets/flask/pull/2691 data = self._get_data_for_json ( cache=cache ) ) ) def test_json_body_encoding ( self , app , client ) : if head [ :3 ] == codecs.BOM_UTF8 : ) `` `` '' Parse and return the data as JSON . If the mimetype does not indicate def detect_encoding ( data ) : accepted . Older documents allowed 8 , 16 , or 32 . 16 and 32 can be big charset = self.mimetype_params.get ( 'charset ' ) return 'utf-16-le ' and its return value is used as the return value . : meth : ` on_json_loading_failed ` is called and its return value is used from flask import json if head [ :2 ] in ( codecs.BOM_UTF16_BE , codecs.BOM_UTF16_LE ) : return 'utf-32-le ' 'utf-32-le ' , 'utf-32-be ' , 'utf-32 ' , calls . encoding = detect_encoding ( s ) # have used this in the past . For responses , we assume that if the resp = client.get ( '/ ' , data=u ' '' Hällo Wörld '' '.encode ( 'iso-8859-15 ' ) , assert resp.data == u'Hällo Wörld'.encode ( 'utf-8 ' ) from werkzeug.http import http_date , parse_cache_control_header , \ encoding = kwargs.pop ( 'encoding ' , None ) : meth : ` is_json ` ) , this returns `` None `` unless `` force `` is : return : UTF encoding name s = s.decode ( kwargs.pop ( 'encoding ' , None ) or 'utf-8 ' ) : param silent : Silence parsing errors and return `` None `` if head [ : :2 ] == b'\x00\x00 ' : data = self._get_data_for_json ( cache=cache ) 1 , 't ' , True , False , None , if head [ :3 ] == b'\x00\x00\x00 ' : JSON ( : mimetype : ` application/json ` , see : meth : ` is_json ` ) , this returns content_type='application/json ; charset=iso-8859-15 ' ) if head [ 1 : :2 ] == b'\x00\x00 ' : : param cache : Store the parsed JSON to return for subsequent calls . 'utf-8 ' , 'utf-8-sig ' , if len ( head ) == 4 : or little endian . Some editors or libraries may prepend a BOM . return 'utf-8 ' indicate JSON ( : mimetype : ` application/json ` , see return flask.request.get_json ( ) The latest JSON standard ( : rfc : ` 8259 ` ) suggests that only UTF-8 is assert json.loads ( data ) == value assert json.detect_encoding ( data ) == encoding return 'utf-16-be ' if head.startswith ( b'\x00 ' ) else 'utf-16-le ' if b'\x00 ' not in head : rv = json.loads ( data , encoding=charset ) [ ] , [ 1 , 2 , 3 ] , : param data : Bytes in unknown UTF encoding . `` `` '' Detect which UTF codec was used to encode the given bytes . if head in ( codecs.BOM_UTF32_BE , codecs.BOM_UTF32_LE ) : http_date , parse_cache_control_header , return 'utf-16-be ' 'utf-16-le ' , 'utf-16-be ' , 'utf-16 ' , `` None `` unless `` force `` is true . If parsing fails , if encoding is None : head = data [ :4 ] `` `` '' instead . @ app.route ( '/ ' ) def index ( ) : arbitrary encodings . Incoming JSON should be encoded using UTF-8 per return 'utf-16 ' as the return value . : func : ` request.get_json < flask.Request.get_json > ` no longer accepts true . If parsing fails , : meth : ` on_json_loading_failed ` is called rv = json.loads ( data ) if head [ 1 : ] == b'\x00\x00\x00 ' : from werkzeug.http import ( def test_detect_encoding ( self , value , encoding ) : # We accept MIME charset against the specification as certain clients return 'utf-32 ' data = json.dumps ( value ) .encode ( encoding ) `` `` '' Parse and return the data as JSON . If the mimetype does not : param silent : Silence parsing errors and return `` None `` instead . { } , { 'foo ' : u'🐍 ' } , : rfc : ` 8259 ` , but Flask will autodetect UTF-8 , -16 , or -32 . ( ` # 2691 ` _ ) : param cache : Store the parsed JSON to return for subsequent import codecs return 'utf-8-sig ' if len ( head ) == 2 : s = s.decode ( encoding ) return 'utf-8 ' return 'utf-32-be '","['CHANGES.rst', 'flask/json/__init__.py', 'flask/wrappers.py', 'tests/test_helpers.py']",Merge pull request # 2691 from pallets/json-encoding
201,0cbe698958f81efe202e71ac07446b87ad694789,2018-04-09 03:00:14-07:00,"_cached_json = Ellipsis normal_rv , _ = self._cached_json assert flask.request.get_json ( silent=True ) is None .. _ # 2651 : https : //github.com/pallets/flask/issues/2651 content_type='application/json ' ) : if cache and self._cached_json [ silent ] is not Ellipsis : flask.request.get_json ( silent=False ) : meth : ` Request.get_json ( ) < flask.Request.get_json > ` does n't cache the if cache : normal_rv = flask.request.get_json ( silent=False ) assert silent_rv is normal_rv result if parsing fails when `` silent `` is true . ( ` # 2651 ` _ ) if cache : _ , silent_rv = self._cached_json def test_different_silent_on_normal_request ( self , app ) : self._cached_json = ( normal_rv , rv ) silent_rv = flask.request.get_json ( silent=True ) if cache : return self._cached_json return self._cached_json [ silent ] def test_different_silent_on_bad_request ( self , app ) : assert normal_rv [ 'foo ' ] == 'bar ' self._cached_json = rv _cached_json = ( Ellipsis , Ellipsis ) self._cached_json = ( rv , rv ) else : with app.test_request_context ( with app.test_request_context ( '/ ' , method='POST ' , json= { 'foo ' : 'bar ' } ) : with pytest.raises ( BadRequest ) : if cache and self._cached_json is not Ellipsis : self._cached_json = ( rv , silent_rv ) '/ ' , method='POST ' , data='malformed ' ,","['CHANGES.rst', 'flask/wrappers.py', 'tests/test_helpers.py']",Merge pull request # 2665 from fprocess/2651-get_json's-silent-option-weird-side-effect
202,8c0d8c1c147a2534c8ed60f7dc62080371126c18,2018-04-09 01:37:32-07:00,".. admonition : : Connection Reset Issue status response when running the app with a production WSGI server . When using the local development server , you may get a connection reset error instead of a 413 response . You will get the correct",['docs/patterns/fileuploads.rst'],Merge pull request # 2662 from greyli/patch-9
203,abba4b2a74634bc33a85cf5d512de473f0a3bfaf,2018-04-09 01:27:25-07:00,"web . This can be changed with the `` static_url `` argument . Because the web . Because the folder is called : file : ` static ` here it will be available at The endpoint is named ` blueprint_name.static ` so you can generate URLs to to the folder on the filesystem with the `` static_folder `` argument . either be an absolute path or one relative to the folder of the folder is called `` static `` here it will be available at the the location of the blueprint + `` /static `` . Say the blueprint is The endpoint is named `` blueprint_name.static `` . You can generate URLs A blueprint can expose a folder with static files by providing a path to a folder on the filesystem via the ` static_folder ` keyword argument . It can `` url_prefix `` of the blueprint + `` /static `` . If the blueprint blueprint : : However , if the blueprint does not have a `` url_prefix `` , it is not A blueprint can expose a folder with static files by providing the path to it with : func : ` url_for ` like you would with the static folder of the registered for `` /admin `` the static folder will be at `` /admin/static `` . static folder . it like you would do to the static folder of the application : : has the prefix `` /admin `` , the static URL will be `` /admin/static `` . folders are not searched if the file does not exist in the application route takes precedence . Unlike template folders , blueprint static possible to access the blueprint 's static folder . This is because the application : : URL would be `` /static `` in this case , and the application 's `` /static `` It is either an absolute path or relative to the blueprint 's location : :",['docs/blueprints.rst'],Merge pull request # 2686 from davidism/bp-static
204,c3e2ff2afa223dbe9a780345af06a57b37bbb28f,2018-04-09 01:09:03-07:00,"branch = True b'and can login now ' in rv.data An HTML report allows you to see which lines were covered in each file : boilerplate up front , but it 's done to avoid many common pitfalls that though , so that we can easily create databases in unit tests later on . ( For `` None `` . .flash { background : # cee5F5 ; padding : 0.5em ; │ ├── conftest.py `` Hello , World ! '' message . Congratulations , you 're now running your Flask first install it in the virtual environment : @ app.teardown_appcontext # a default secret that should be overridden by instance config Let 's continue building our code in the `` flaskr.py `` file . 1. edit the configuration in the factory.py file or if request.method == 'POST ' : can create a function and hook it into a : command : ` flask ` command that ~~~~~~~~~~~~ venv\Scripts\activate.bat release = app.config.release assert db is get_db ( ) { % elif request.endpoint == 'timeline ' % } def hello ( ) : .. _tutorial-schema : b'_5 # y2L '' F4Q8z\n\xec ] / ' db = get_db ( ) elif not check_password_hash ( user [ 'pw_hash ' ] , The above installation command assumes that it is run within the projects is passed to the teardown function . ================= changes . The flaskr app is now installed in your virtualenv ( see output Larger App Tests # test that successful login redirects to the index page def test_get_close_db ( app ) : URL when the register view redirects to the login view . `` pytest.mark.parametrize `` tells Pytest to run the same test function name='flaskr ' , .content textarea { : caption : `` flaskr/templates/base.html `` Test Coverage file in the instance folder if it exists . For example , when error = 'Invalid password ' def test_logout ( client , auth ) : app = Flask ( 'flaskr ' ) < h1 > { % block title % } Posts { % endblock % } < /h1 > # . If the user submitted the form , < dd > < input type= '' text '' size= '' 30 '' name= '' title '' > PASSWORD='default ' else : that the browser shows an error message . Try removing the `` required `` login ( client , app.config [ 'USERNAME ' ] , `` delete `` views . The logged in user must be the author of the post to In order to install and run the application you need to issue the following flash ( 'You are no longer following `` % s '' ' % username ) Initialized the database . replace the blocks from the base template . All the rendered content must Open http : //127.0.0.1:5000 in a browser . # now let 's follow foo There 's not much to test about the factory itself . Most of the code will background : # B9F3ED ; def test_delete ( client , auth , app ) : .. code-block : : sql messages . Note that the `` for `` loop iterates over the messages we passed The Application Factory be registered with this class . `` `` '' Get a post and its author by id . returns a database connection , which is used to execute the commands def client ( app ) : os.unlink ( db_path ) the session : : caption : `` flaskr/templates/auth/register.html `` A Flask application is an instance of the : class : ` Flask ` class . import statement , the export statement a few steps below would need to be tests_require= [ def test_exists_required ( client , auth , path ) : def initdb_command ( ) : * wheel * format , with the `` .whl `` extension . Make sure the wheel library flashed messages if there are any . The `` { % block body % } `` block can be `` `` '' Adds the current user as follower of the given user . '' '' '' configuration secrets and the database file . The `` create `` and `` update `` views should render and return a { % endif % } text-shadow : 0 1px 2px # ccc ; FOREIGN KEY ( author_id ) REFERENCES user ( id ) import click │ │ └── update.html export an MINITWIT_SETTINGS environment variable precisely , it is an application powered by a relational database system . Such It is recommended to install your Flask application within a virtualenv . Please all the standard Python tools to manage everything . .. _Click : http : //click.pocoo.org margin-bottom : 0 ; ) ; assert b '' Log In '' in response.data there . Such a schema could be created by piping the `` schema.sql `` file into the are using ` Jinja2 ` _ syntax and have autoescaping enabled by closed after the work is finished . Hello Learn by example to develop an application with Python and Flask . schema.sql Flaskr will have two blueprints , one for authentication functions and ( title , body , id ) < ! doctype html > to take a look at the source code for this example . .. image : : flaskr_index.png the layout of the website in all pages . * .pyc In order to run the application you need to export an environment variable Continue to : doc : ` factory ` . error = None $ ( 'input [ type=text ] ' ) .bind ( 'keydown ' , function ( e ) { installing Flaskr : : def test_login_logout ( client , app ) : div.page div.twitbox h3 { } ) list-style : none ; access `` update `` and `` delete `` , otherwise a `` 403 Forbidden `` status < li > < span > { { g.user [ 'username ' ] } } < /span > < dl > [ session [ 'user_id ' ] , session [ 'user_id ' ] , PER_PAGE ] ) ) html { < input name= '' title '' id= '' title '' value= '' { { request.form [ 'title ' ] } } '' required > def test_login_logout ( client ) : { % if g.user % } padding : 1px 3px ; it to use the : class : ` sqlite3.Row ` object to represent rows . This allows def register_cli ( app ) : # in another app , you might define a separate main index here with : caption : `` hello.py `` Step 6 : The View Functions See the ` official packaging guide ` _ for another explanation of the files Step 1 : Database Schema < /section > def test_create_update_validate ( client , auth , path ) : The most straightforward way to create a Flask application is to create templates : .. _example source : from sqlite3 import dbapi2 as sqlite3 font-size : 0.9em ; application handling the request . Since you used an application factory , return None def test_hello ( client ) : ( or log out if the user was already logged in ) . It also displays the app = Flask ( __name__ ) < ! doctype html > While it 's designed to give a good starting point , the tutorial does n't BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND applied to . { % else % } ` show_entries ` page . If everything worked out well , it will def fake_init_db ( ) : ============================== introduction def create_app ( config=None ) : username and password against the ones from the configuration and sets the session.pop ( 'logged_in ' , None ) def test_create ( client , auth , app ) : def test_login_validate_input ( auth , username , password , message ) : 'INSERT INTO post ( title , body , author_id ) ' test data is inserted . After the test is over , the temporary file is assert b'Title is required . ' in response.data < /div > return redirect ( url_for ( 'index ' ) ) id INTEGER PRIMARY KEY AUTOINCREMENT , the steps you took to get there . Compare your project to the is put the following contents into a file named : file : ` schema.sql ` in the : caption : `` flaskr/templates/auth/login.html `` is installed first : application . app.cli.add_command ( init_db_command ) create the database in the instance folder . │ └── static/ ============== { % for message in get_flashed_messages ( ) % } Create db.execute ( 'SELECT 1 ' ) `` `` '' Return the gravatar image for the given email address . '' '' '' At this point you should be able to install the application . As usual , it padding : 0 ; assert b'Invalid password ' in rv.data def get_db ( ) : @ app.route ( '/ < username > ' ) # login request set the user_id in the session auth.logout ( ) return g.db < /form > '/1/delete ' , ~ How do I use it ? `` register `` . Rather than testing the data in the database , from flaskr.db import get_db body { This view lets the user add new entries if they are logged in . This only ul.flashes li { the current request , whereas : data : ` ~flask.g ` is a general purpose # Load default config and override config from an environment variable border : none ; ] , `` url_for ( 'hello ' , who='World ' ) `` . Step 7 : The Templates Authentication environment variable : envvar : ` FLASKR_SETTINGS ` that points to a config file login page instead of returning that status . ) 'TESTING ' : True , body = request.form [ 'body ' ] the application will greet you on USERNAME='admin ' , because we do n't have any views yet . That will be addressed a little later , : meth : ` client.post ( ) < werkzeug.test.Client.post > ` makes a `` POST `` it makes a lot of sense to use ` SQLAlchemy ` _ , as it handles database return render_template ( 'show_entries.html ' , entries=entries ) Create a Blueprint The delete view does n't have its own template , the delete button is part error = 'The two passwords do not match ' In order to run the application you need to export an environment variable < input type= '' submit '' value= '' Save '' > def get_db ( ) : db.commit ( ) @ app.route ( '/add ' , methods= [ 'POST ' ] ) method on the config object and provide it with an import name of a You 've learned about quite a few Flask and Python concepts throughout yourapplication used so that the author information from the `` user `` table is profile_user = query_db ( 'select * from user where username = ? ' , app.register_blueprint ( auth.bp ) body { font-family : sans-serif ; background : # eee ; } name . This is preferable to writing the URL directly as it allows The : func : ` ~flask.Flask.open_resource ` method of the application object assert b ' & lt ; test message 2 & gt ; ' in rv.data Now that the user 's `` id `` is stored in the : data : ` session ` , it will be `` `` '' Closes the database again at the end of the request . '' '' '' `` 200 OK `` status for a `` GET `` request . When valid data is sent in a error = 'Incorrect password . ' configured to submit to the ` add_entry ` view function and use `` POST `` as * .egg-info/ : ref : ` extensions ` which make tasks like working with the database or .content input , .content textarea { Run with a Production Server .post > header { instead . < div class= '' about '' > by { { post [ 'username ' ] } } on { { post [ 'created ' ] .strftime ( ' % Y- % m- % d ' ) } } < /div > VALUES The `` create `` view works the same as the auth `` register `` view . Either return redirect ( url_for ( 'index ' ) ) def setup ( app : Sphinx ) : if words is None : appear inside `` { % block % } `` tags that override blocks from the base The one with the highest id ( the newest entry ) will be on top . The rows { % if g.user % } { % if not session.logged_in % } { % for post in posts % } DATABASE=os.path.join ( app.instance_path , 'flaskr.sqlite ' ) , available on subsequent requests . At the beginning of each request , if Essentially , the app context is created before the request comes in and is template . zip_safe=False , assert b'the message by foo ' not in rv.data assert client.get ( '/auth/login ' ) .status_code == 200 from flaskr.auth import login_required The project directory will contain : app.config.from_object ( __name__ ) # load config from this file , flaskr.py assert client.post ( '/1/update ' ) .status_code == 403 { % endwith % } is created at some point when handling a request , and closed before the the address at which you can access it in a browser . : command : ` flask ` script . When the command executes , Flask will automatically def test_register ( client , app ) : # ensure the instance folder exists if not session.get ( 'logged_in ' ) : @ app.route ( '/register ' , methods= [ 'GET ' , 'POST ' ] ) DATABASE=os.path.join ( app.root_path , 'flaskr.db ' ) , # bar 's timeline should just show bar 's message In this case , the static and templates directories need to be included , do this in tests is to make a `` POST `` request to the `` login `` view ) .fetchone ( ) is not None browser 's tab and window title . the form is displayed , or the posted data is validated and the post is ( `` , `` , b'Username is required . ' ) , Package Version Location from minitwit import minitwit def test_urls ( client ) : code . It takes an optional message to show with the error , otherwise a You will want to keep an actual function around that initializes the database , you 're now equipped to start developing your own web applications . Check app.config.from_mapping ( 'SELECT * FROM user WHERE id = ? ' , ( user_id , ) what server or software to use . You can set up a new environment on your : maxdepth : 2 Binary files a/docs/tutorial/flaskr_login.png and /dev/null differ application . Flask uses patterns to match the incoming request URL to DATABASE=os.path.join ( app.instance_path , 'flaskr.sqlite ' ) , .. _Werkzeug : https : //palletsprojects.com/p/werkzeug/ div.page { key is set to `` True `` , and the user is redirected back to the ` show_entries ` your application . Waitress is just an example , chosen for the tutorial flex : auto ; .. _Jinja2 : http : //jinja.pocoo.org/ Blueprint , flash , g , redirect , render_template , request , url_for margin-bottom : 1em ; background : # fafafa ; } cd flask-tutorial { % extends 'base.html ' % } div.page div.footer { session.clear ( ) default . This means that unless you mark a value in the code with from werkzeug import check_password_hash , generate_password_hash { % if flashes % } no longer exist in the database . ( 'test ' , ' a ' , b'Incorrect password . ' ) , assert not create_app ( ) .testing def test_logout ( client , auth ) : It 's time to start coding ! Create the `` flaskr `` directory and add the import tempfile to it . you 'll write the authentication one first . .content : last-child { margin-bottom : 0 ; } < ul > def get_post ( id , check_author=True ) : error = 'Title is required . ' You betcha . Run the ` python setup.py test ` file to 1. edit the configuration in the minitwit.py file or particularly efficient , stable , or secure . margin : 0 ; app.jinja_env.filters [ 'datetimeformat ' ] = format_datetime `` test_ `` . rendering failed , Flask would return a `` 500 Internal Server Error `` import os < a class= '' follow '' href= '' { { url_for ( 'follow_user ' , username=profile_user.username ) factory , similar to the `` hello `` view . Then the `` index `` and < a href= '' { { url_for ( 'flaskr.logout ' ) } } '' > log out < /a > .. sourcecode : : sql download `` pytest `` or any other testing framework one might use . < input type= '' submit '' value= '' Register '' > if profile_user is None : db.execute ( 'insert into follower ( who_id , whom_id ) values ( ? , ? ) ' , margin : 10px 0 ; : caption : `` flaskr/schema.sql `` { % block body % } { % endblock % } : raise 403 : if the current user is n't the author if not g.user : ( 'test ' , 'pbkdf2 : sha256:50000 $ TCI4GzcX $ 0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f ' ) , < dl > < form action= '' { { url_for ( 'flaskr.login ' ) } } '' method= '' post '' > it inside a function . This function is known as the * application .. _Jinja : http : //jinja.pocoo.org/docs/templates/ message_id integer primary key autoincrement , data in the `` app `` fixture . db.init_app ( app ) [ session [ 'user_id ' ] , whom_id ] ) < https : //github.com/pallets/flask/tree/master/examples/jqueryexample > ` _ return render_template ( 'blog/index.html ' , posts=posts ) password TEXT NOT NULL app = ... stores messages that can be retrieved when rendering the template . < div class= '' flash '' > { { message } } < /div > This calls on the alias created in : file : ` setup.cfg ` which in turn runs Blueprint Example Tests div.page div.navigation { * Any other project files you might add in the future . * Comments . `` `` '' Opens a new database connection if there is none yet for the 'pytest-runner ' , ( 'test ' , 'test ' , b'already registered ' ) , flaskr # change the post author to another user if test_config is None : color : white ; ` Werkzeug ` _ , and ` ItsDangerous ` _ behind the scenes , and they all have When the user visits the `` /auth/register `` URL , the `` register `` view platform linux -- Python 3.6.4 , pytest-3.5.0 , py-1.5.3 , pluggy-0.6.0 assert b'Title is required . ' in response.data return render_template ( 'auth/register.html ' ) < h2 > Login < /h2 > title = request.form [ 'title ' ] def logout ( client ) : Continue with : ref : ` tutorial-setup ` . If you want the full source code in advance or for comparison , check out We are also using template inheritance which makes it possible to reuse that tells Flask where to find the application instance : : db = get_db ( ) text text not null , url = ' { 0 } { 1 } / { 2 } '.format ( base_url , release , text ) app = Flask ( __name__ ) `` `` '' Helper function to register a user '' '' '' .. _tutorial-templates : will be redirected to the login page . { % if error % } < div class= '' error '' > < strong > Error : < /strong > { { error } } < /div > { % endif % } : caption : `` MANIFEST.in `` < /div > The template files will be stored in the `` templates `` directory inside def client ( ) : : caption : Contents : # test that successful registration redirects to the login page return render_template ( 'auth/register.html ' ) register ( client , username , password ) < a href= '' { { url_for ( 'register ' ) } } '' > sign up < /a > | words = None os.makedirs ( app.instance_path ) margin-left : 5px ; border : 1px solid # 81CEC6 ; session [ 'logged_in ' ] = True db.execute ( 'UPDATE post SET author_id = 2 WHERE id = 1 ' ) assert b'href= '' /1/update '' ' not in client.get ( '/ ' ) .data app.config.update ( dict ( return self._client.post ( change the metadata about the project , such as its dependencies . Next , to simplify locating the application , create the file , There are three blocks defined here that will be overridden in the other ' WHERE p.id = ? ' , url = ' { 0 } master/ { 1 } '.format ( base_url , text ) return rv app.register_blueprint ( simple_page , url_prefix='/pages ' ) Checks that the id exists and optionally that the current user is you 're running the server and try to go to any of the URLs , you 'll see a My Timeline `` `` '' Initializes the database . '' '' '' add_message ( client , 'test message 1 ' ) will notice . < input name= '' title '' id= '' title '' bp = Blueprint ( 'blog ' , __name__ ) every time the app context tears down . What does this mean ? `` create_app `` is the application factory function . You 'll add to it ' FROM post p JOIN user u ON p.author_id = u.id ' ` here < http : //flask.pocoo.org/extensions/ > ` _ to our application that initializes the database for you . To do this , you Now that the authentication templates are written , you can register a If you find yourself stuck on something , feel free error = 'User { } is already registered . '.format ( username ) : : body { The only behavior that can change is passing test config . If config is `` get_db `` and `` close_db `` functions below your existing def test_get_close_db ( app ) : # now unfollow and check if that worked import click write . For example , with git : you wrote works the way you expect . Flask provides a test client that count = db.execute ( 'SELECT COUNT ( id ) FROM post ' ) .fetchone ( ) [ 0 ] This tutorial will demonstrate a blogging application named Flaskr , but feel The Base Layout tutorial ` _ in the Python docs is a great way to learn or review first . def test_register ( client ) : def update ( id ) : display a line after each post except the last one , to visually separate : attr : ` request.method < Request.method > ` will be `` 'POST ' `` . In this tutorial will do this as well . session [ 'user_id ' ] = user [ 'id ' ] def init_app ( app ) : < li > < a href= '' { { url_for ( 'auth.register ' ) } } '' > Register < /a > ~~~~~~~~~~~~~~~~~~~~~ # the tutorial the blog will be the main index `` url_for ( 'index ' ) `` or `` url_for ( 'blog.index ' ) `` will both work , of `` pip freeze `` ) . parameter will be `` None `` ) or an exception happened , in which case the error # . : func : ` ~werkzeug.security.check_password_hash ` hashes the submitted required components to test the application : : MiniTwit by the `` DATABASE `` configuration key . This file does n't have to exist .. code-block : : css install assert b'the message by bar ' in rv.data this table has an `` id `` , a `` title `` , and a `` text `` . The `` id `` is an rv = query_db ( 'select user_id from user where username = ? ' , : caption : `` tests/test_db.py `` again . return redirect ( url_for ( 'blog.index ' ) ) This generates files in the `` htmlcov `` directory . Open b : $ ( 'input [ name= '' b '' ] ' ) .val ( ) < input type= '' text '' size= '' 5 '' name= '' b '' > = : caption : `` .gitignore `` : caption : `` flaskr/templates/blog/create.html `` : caption : `` flaskr/static/style.css `` from flaskr.auth import login_required : caption : `` tests/conftest.py `` a , h1 , h2 { color : # 377BA8 ; } Run create table message ( def app ( ) : ( ' a ' , 'test ' , b'Incorrect username . ' ) , in the `` user `` table , and posts in the `` post `` table . Create a file * distribution * file and install that in another environment , just like data should be in the database . Invalid data should display error ) ; ` Jinja2 ` _ templates . You will see examples of this later on . from flask.cli import with_appcontext into an outgoing response . Flask can also go the other direction and # . : data : ` session ` is a : class : ` dict ` that stores data across requests . Binary files a/docs/tutorial/flaskr_edit.png and /dev/null differ return datetime.utcfromtimestamp ( timestamp ) .strftime ( ' % Y- % m- % d @ % H : % M ' ) response is sent . is returned . If a `` post `` with the given `` id `` does n't exist , Now you can run : : `` `` '' Connects to the specific database . '' '' '' ) .fetchone ( ) is not None function you 'll write next takes a `` client `` argument . Pytest matches connection . templates tell your application about the `` close_db `` function in the application INSERT INTO user ( username , password ) assert b'test title ' in response.data * `` DATABASE `` is the path where the SQLite database file will be : : # . `` { % block title % } `` will change the title displayed in the You can find a list of recommended Flask extensions `` url_prefix `` . So the `` index `` view will be at `` / `` , the `` create `` read the : ref : ` installation ` section to set up your environment . then go to http : //127.0.0.1:5000/auth/register . You can also set any other necessary configuration here , although if hasattr ( mod , 'bp ' ) : A useful pattern used here is to place `` { % block title % } `` inside submit button . : ref : ` app-context ` documentation to learn more . include_package_data=True , configuration . Only one user is supported . because it supports both Windows and Linux . There are many more WSGI ) .fetchall ( ) For Windows cmd , use `` set `` instead of `` export `` : `` `` '' Make sure logging in and logging out works '' '' '' Serving on http : //0.0.0.0:8080 def update ( id ) : If you 're following the tutorial from a specific version of the docs , be current_app.config [ 'DATABASE ' ] , database , and `` update `` should modify the existing data . Both pages Functions marked with : meth : ` ~flask.Flask.teardown_appcontext ` are called rv = login ( client , app.config [ 'USERNAME ' ] + ' x ' , : caption : `` flaskr/blog.py `` flaskr/ systems need a schema that tells them how to store that information . title displayed on the page . value when deploying . database or file . `` `` '' Test that messages work '' '' '' assert response.data == b'Hello , World ! ' sure to check out the same tag in the repository , otherwise the tutorial * `` instance_relative_config=True `` tells the app that # second blueprint instance hashing passwords and verifying passwords against hashes , so adding user.user_id = message.author_id and user.user_id = ? .. _the examples : function that takes an application and does the registration . When you want to deploy your application elsewhere , you build a db.execute ( 'DELETE FROM post WHERE id = ? ' , ( id , ) ) projects you should test as you develop . def test_create_update_validate ( client , auth , path ) : b = request.args.get ( ' b ' , 0 , type=int ) app.register_blueprint ( blog.bp ) { % block header % } { % endblock % } │ ├── auth.py client = app.test_client ( ) < /dl > authentication blueprint to write the blog blueprint . The blog should ========= 'username ' : username , You can create a simple database connection through SQLite and then tell You 'll use ` pytest ` _ and ` coverage ` _ to test and measure your code . client.get ( '/ ' ) flash ( 'You are now following `` % s '' ' % username ) followed = False nav { { % for entry in entries % } app = Flask ( __name__ ) # create the application instance : ) `` g.user `` is set ( from `` load_logged_in_user `` ) , either the username CREATE TABLE user ( a class with methods to do that , and use a fixture to pass it the client padding : 10px ; { % block content % } { % endblock % } passwords should be both ` hashed and salted ` _ before being stored in a < header > db.execute ( 'UPDATE post SET author_id = 2 WHERE id = 1 ' ) '/auth/register ' , ] , # close and remove the temporary database tests/ .content form { margin : 1em 0 ; display : flex ; flex-direction : column ; } the view that should handle it . The view returns data that Flask turns .page { margin : 2em auto ; width : 35em ; border : 5px solid # ccc ; text-decoration : none ; rv = client.get ( '/foo/follow ' , follow_redirects=True ) When you head over to the server in your browser , you will get a 404 error : class : ` dict ` mapping submitted form keys and values . The user will and activate the env as described in : ref : ` install-activate-env ` . Add New Entry : caption : `` flaskr/templates/blog/index.html `` A view function is the code you write to respond to requests to your used to store data that might be accessed by multiple functions during input and error messages without writing the same code three times . from flask import Flask def init_app ( app ) : def delete ( id ) : : data : ` SECRET_KEY ` . This should be changed to some random bytes in global-exclude * .pyc def __init__ ( self , client ) : < dt > Username : │ ├── data.sql def test_author_required ( app , client , auth ) : g.db = sqlite3.connect ( will use the setting defined in the last import . This enables robust If the query returned no results , it returns `` None `` . Later , flaskr.py return render_template ( 'login.html ' , error=error ) def __init__ ( self , client ) : A SQLite and Flask powered twitter clone background : # cae6f6 ; will cover some more details of this later on . templates/ bp = Blueprint ( 'auth ' , __name__ , url_prefix='/auth ' ) return post client.post ( '/1/update ' , data= { 'title ' : 'updated ' , 'body ' : `` } ) The `` index `` view should display information about the post that was source = h2 { font-size : 1.2em ; } def follow_user ( username ) : background : # eee ; submitted , the original `` post `` data appears , but if invalid form data `` `` '' Show all the posts , most recent first . '' '' '' .entries { list-style : none ; margin : 0 ; padding : 0 ; } order by message.pub_date desc limit ? ' '' , [ PER_PAGE ] ) ) /home/user/Projects/flask-tutorial < h1 > { % block title % } Register { % endblock % } < /h1 > to do before the project is complete . < hr > .pytest_cache/ generate a URL to a view based on its name and arguments . Continue to : doc : ` database ` . if user_id is None : } } '' > Unfollow user < /a > . session.clear ( ) If you are outside of the project directory make sure to provide the exact folder . After setting the path , the database tables are created and the { % if g.user.user_id == profile_user.user_id % } padding : 0 ; export a FLASKR_SETTINGS environment variable print ( 'Initialized the database . ' ) < link rel= '' stylesheet '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > init_db ( ) flaskr/ if request.method == 'POST ' : background : white ; dictionary , so it can be updated with new values . if db is not None : local development configuration . production . Otherwise , attackers could use the public `` 'dev ' `` key to structured approach . This means that the tutorial will require a bit of return self._client.post ( detect_types=sqlite3.PARSE_DECLTYPES 'SELECT * FROM user WHERE username = ? ' , ( username , ) title text not null , print ( 'Initialized the database . ' ) them . db.commit ( ) return redirect ( url_for ( 'flaskr.show_entries ' ) ) # configuration Define and Access the Database margin : 30px auto ; g.sqlite_db.close ( ) simple and useful in some cases , it can cause some tricky issues as the rv = client.get ( '/public ' ) For now go ahead and create the applications directory structure . In the next detect_types=sqlite3.PARSE_DECLTYPES if release.endswith ( 'dev ' ) : plan to release a project based off this tutorial out into the world , also use the flag to make testing them easier . { % if g.user % } │ ├── schema.sql SECRET_KEY='dev ' , < li > < img src= '' { { message.email|gravatar ( size=48 ) } } '' > < p > import statement simplifies the location process . Without the above `` `` '' Clear the existing data and create new tables . '' '' '' return redirect ( url_for ( 'auth.login ' ) ) Visit http : //127.0.0.1:5000/hello in a browser and you should see the from flask import ( Running the tests install the application on other computers . < section class= '' content '' > who_id integer , connection each time it 's called . After the context , the connection The closer you get to 100 % coverage , the more comfortable you can be app.add_url_rule ( '/ ' , endpoint='index ' ) assert b'by test on 2018-01-01 ' in response.data 'UPDATE post SET title = ? , body = ? WHERE id = ? ' , if post is None : color : # 888 ; db.execute ( 'SELECT 1 ' ) border : 1px solid # aacbe2 ; } INSERT INTO post ( title , body , author_id , created ) < form action= '' { { url_for ( 'add_message ' ) } } '' method= '' post '' > This template contains the HTML skeleton , the header and a link to log in `` blog.index `` endpoints and URLs would be different . You are not yet following this user . _data_sql = f.read ( ) .decode ( 'utf8 ' ) created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , python setup.py test background : # F0FAF9 ; SECRET_KEY=b'_5 # y2L '' F4Q8z\n\xec ] / ' , overview of what Flask can do , then dive into the docs to find out more . : attr : ` ~Response.data ` contains the body of the response as bytes . If │ ├── templates/ < span id= '' result '' > ? < /span > def hello ( ) : user.user_id = ? or This can be used to open a connection on request and also from the the database into `` g.user `` . '' '' '' < p > if request.form [ 'text ' ] : if error is None : You betcha . Run ` python setup.py test ` to see share the same title without writing it twice . app.register_blueprint ( simple_page ) .. _pytest : https : //pytest.readthedocs.io/ from flask import Flask , jsonify , render_template , request In your application , you will use templates to render ` HTML ` _ which < p > from flaskr import auth , blog .add-entry { font-size : 0.9em ; border-bottom : 1px solid # ccc ; } where to put the code from this step and the next . A logical place is to statements . After that there will be a few lines of configuration code . If you 're still running the server from the previous page , you can log in as the `` test `` user , which was inserted as part of the test code . if not hasattr ( top , 'sqlite_db ' ) : return login ( client , username , password ) .post > header > div : first-of-type { .content { padding : 0 1rem 1rem ; } setup.py db.close ( ) the form , it will validate their input and either show the form again from werkzeug.security import check_password_hash , generate_password_hash < div class= '' actions '' > < input type= '' submit '' value= '' Sign Up '' > < /div > Nothing changes from how you 've been running your project so far . /flaskr node = reference ( rawtext , words , refuri=url , * * options ) include_package_data=True , assert b'You have to enter a username ' in rv.data In another application you might give the blog blueprint a if text.endswith ( ' > ' ) : │ ├── blog.py [ coverage : run ] `` FLASK_APP `` like `` flask run `` does . You need to tell it to import and def app ( ) : app.teardown_appcontext ( close_db ) │ │ └── blog/ { % endif % } .error { background : # F0D6D6 ; padding : 0.5em ; } Pip will install your project along with its dependencies . 3. tell flask about the right application : .. code-block : : none nav h1 a { < /ul > If you want to do this ( not required for this tutorial ) simply define the from .flaskr import app function that returns a response , the string `` 'Hello , World ! ' `` in `` `` '' Creates the database tables . '' '' '' < /div > rv = client.post ( '/add ' , data=dict ( closing database connections all the time is very inefficient , so you will $ ( function ( ) { .. _Jinja2 : http : //jinja.pocoo.org/docs/templates import pytest In the beginning of the tutorial that you gave a default value for Continue with : ref : ` tutorial-folders ` . < li > { { message } } Reference : Armin Ronacher , `` Flask for Fun and for Profit '' PyBay 2016 . git tag # shows the tagged versions .content : last-child { # existing code omitted Flaskr { % if not loop.last % } flask run elif not request.form [ 'password ' ] : < dt > E-Mail : < form action= '' { { url_for ( 'add_entry ' ) } } '' method=post class=add-entry > Ensures that the post exists and that the logged in user is the max-width : 960px ; font-family : 'Trebuchet MS ' , sans-serif ; assert client.get ( '/1/update ' ) .status_code == 200 Each test will create a new temporary database file and populate some pip install waitress The First View : Register pip install -e .. / .. pip install -e . Passwords should never be stored in plain text in a production nav h1 { flex : auto ; margin : 0 ; } < dl > < dl > .. admonition : : Troubleshooting assert client.get ( '/auth/login ' ) .status_code == 200 packages=find_packages ( ) , assert b'the message by foo ' in rv.data Within an application context , `` get_db `` should return the same `` url_for ( 'blog.update ' , id=post [ 'id ' ] ) `` . This is also in the * Version control config , such as ` git ` _ . You should make a habit of div.page ul.messages p { assert post is None < li > < em > Unbelievable . No entries here so far < /em > < /li > ) , follow_redirects=True ) variable associated with the current application context . The tutorial INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT os.unlink ( db_path ) ├── tests/ body TEXT NOT NULL , If any tests fail , pytest will show the error that was raised . You can `` Edit '' link to the `` update `` view for that post . `` loop.last `` is a if error is not None : safely on the : data : ` ~flask.g ` object . Continue with : ref : ` tutorial-dbcon ` . some default configuration that the app will use : body = request.form [ 'body ' ] < label for= '' body '' > Body < /label > Blueprint , flash , g , redirect , render_template , request , session , url_for color : # 2C7E76 ; if error is None : db.cursor ( ) .executescript ( f.read ( ) ) < title > Simple Page Blueprint < /title > to the `` index `` view . available in the result . < h2 > Sign Up < /h2 > def test_init_db_command ( runner , monkeypatch ) : get_db ( ) .executescript ( _data_sql ) A real URL will look like `` /1/update `` . Flask will capture the `` 1 `` , added with the test data . When logged in as the author , there should be DROP TABLE IF EXISTS user ; Deploy to Production update the : file : ` setup.py ` file to contain : : `` url_prefix `` and define a separate `` index `` view in the application You can use the following command to output a random secret key : auth.login ( ) cur = db.execute ( 'select title , text from entries order by id desc ' ) color : # 377ba8 ; dictionary with config values using the create_app { % endif % } jQuery Example .. currentmodule : : flask < hr > with client : As outlined earlier , Flaskr is a database powered application , and more with it , the SQLite docs describe the ` language ` _ . MANIFEST.in : data : ` session ` should have `` user_id `` set after logging in . ~ Is it tested ? app = Flask ( __name__ , instance_relative_config=True ) a message . error = 'Incorrect username . ' install_requires= [ # checkout the correct version MiniTwit & mdash ; A Flask Application yield app : meth : ` client.get ( ) < werkzeug.test.Client.get > ` makes a `` GET `` request Create the : file : ` MANIFEST.in ` and add the following lines : : should be closed . You can read more about CSS from ` Mozilla 's documentation < CSS_ > ` _ . If : ref : ` set up a new virtualenv < install-create-env > ` , then install the instance/ Keep Developing ! In the next section you will see how to run the application . user.user_id in ( select whom_id from follower from docutils.parsers.rst.roles import set_classes Instead of creating a : class : ` Flask ` instance globally , you will create .. _SQLAlchemy : https : //www.sqlalchemy.org/ There are a few differences from the `` register `` view : [ username ] , one=True ) db.execute ( `` 'insert into message ( author_id , text , pub_date ) pip list either stop the server , or run this command in a new terminal . If include flaskr/schema.sql from flask.cli import with_appcontext Flask securely * signs * the data so that it ca n't be tampered with . you can use that to check if the user is logged in or not . Note that in def test_login ( client , auth ) : get_db ( ) .executescript ( _data_sql ) .metanav { text-align : right ; font-size : 0.8em ; padding : 0.3em ; contain the application factory , and it tells Python that the `` flaskr `` template , each template will * extend * a base template and override If you need a moment to find your bearings , take a look at how the ` example `` .py `` file , load that , and import the values from there . flash ( error ) Templates add_message ( client , ' < test message 2 > ' ) if user is None : .post .body { again . There is a neat trick here : if you use the : meth : ` ~dict.pop ` method '/create ' , assert db is get_db ( ) init_db ( ) < dd > < input type= '' text '' name= '' email '' size= '' 30 '' value= '' { { request.form.email } } '' > error = 'Title is required . ' you 'll write later in the tutorial can be configured ============================ return client.get ( '/logout ' , follow_redirects=True ) a global : class : ` Flask ` instance directly at the top of your code , like Setup and Fixtures Everything about the application , such as configuration and URLs , will return self._client.get ( '/auth/logout ' ) Initialize the Database File notice , this list of conditions and the following disclaimer in the flash ( 'You were successfully registered and can login now ' ) app = create_app ( { app.config [ 'TESTING ' ] = True setup_requires= [ `` include_package_data `` is set . Python needs another file named assert b'You have to enter a valid email address ' in rv.data is no template , it will only handle the `` POST `` method then redirect COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , .flash { margin : 1em 0 ; padding : 1em ; background : # cae6f6 ; border : 1px solid # 377ba8 ; } ) .fetchone ( ) is not None : do n't specify `` int : `` and instead do `` < id > `` , it will be a string . ( username , generate_password_hash ( password ) ) This is you ! < div class= '' flash '' > { { message } } < /div > elif not check_password_hash ( user [ 'password ' ] , password ) : 'flask ' , htmlcov/ words = url return blueprintexample.app.test_client ( ) return redirect ( url_for ( 'public_timeline ' ) ) < ul class= '' messages '' > assert b'href= '' /1/update '' ' not in client.get ( '/ ' ) .data whom_id integer ~~~~~~~~~~~~~~~~~~~~~~~ if not session.get ( 'logged_in ' ) : `` `` '' Make sure registering works '' '' '' │ │ ├── auth/ version= ' 1.0.0 ' , htmlcov/ pip install -e . ~~~~~~~~~~~~~~~ specific sections . used to get a `` post `` without checking the author . This would be useful } , follow_redirects=True ) To log out , you need to remove the user id from the : data : ` session ` . Project Layout that each test will use . Tests are in Python modules that start with errors . Some extra configuration , which is not required but makes running from werkzeug.exceptions import abort For small applications like `` flaskr `` , it is possible to drop the configuration object , the blueprint needs to know where it 's defined , so `` __name__ `` or code layout . However , when first starting , it 's helpful to use a more application with : : Blueprint , flash , g , redirect , render_template , request , session , url_for the following into the `` flaskr/static/style.css `` file : def test_messages ( client , app ) : db_fd , db_path = tempfile.mkstemp ( ) margin : 0 auto ; 'SELECT * FROM user WHERE username = ? ' , ( username , ) 'DATABASE ' : db_path , : align : center `` `` '' Make sure that timelines work '' '' '' license='BSD ' , def logout ( ) : g.db.row_factory = sqlite3.Row return app.test_client ( ) color : # 444 ; `` setup.cfg `` file . ====================== 24 passed in 0.64 seconds ======================= os.close ( db_fd ) return 'Hello , World ! ' hr { rv = register ( client , 'user1 ' , 'default ' ) added to the database or an error is shown . this structure and take full advantage of Flask 's flexibility . blog As you implement each view , keep the development server running . As you Before starting the server for the first time , it 's important to create These functions are used to sign the user in and out . Login checks the try : distribution file . [ tool : pytest ] view is called and continues normally . You 'll use this decorator when `` `` '' Removes the current user as follower of the given user . '' '' '' flask run a block could change indentation . used , but there are other options such as `` nose `` . Integrating testing input [ type= '' submit '' ] { ==================== where who_id = ? ) ) To measure the code coverage of your tests , use the `` coverage `` command .. admonition : : Externally Visible Server configuration setups . : meth : ` ~flask.Config.from_envvar ` can help achieve < form method= '' post '' > webkit-border-radius : 2px ; `` flaskr/static `` directory and referenced with border : 1px solid # DD6F6F ; os.unlink ( minitwit.app.config [ 'DATABASE ' ] ) `` `` '' Initializes the database . '' '' '' profile_user=profile_user ) pip install -e examples/flaskr -q entries = cur.fetchall ( ) : ref : ` instance folder < instance-folders > ` . The instance folder ( ' a ' , `` , b'Password is required . ' ) , always fully validate the data on the server , even if the client does .post .body { white-space : pre-line ; } ================== 'UPDATE post SET title = ? , body = ? ' and arguments . The name associated with a view is also called the assert count == 2 and a log out link are displayed , otherwise links to register and log in border : 1px solid # BFE6E2 ; will return ` HTML ` _ with a form for them to fill out . When they submit If you do n't get the whole picture , download the ` sourcecode simple_page = Blueprint ( 'simple_page ' , __name__ , < li > < a href= '' /pages/world '' > /pages/world < /a > packages= [ 'yourapplication ' ] , write templates to generate the HTML form . wheel 0.30.0 care of escaping the values so you are not vulnerable to a return render_template ( 'auth/login.html ' ) elif not password : return g.sqlite_db graft flaskr/static save your changes , try going to the URL in your browser and testing them user = query_db ( `` 'select * from user where ~~~~~~~~ padding : 0 0.5rem ; connection for the current context , and successive calls will return the that you did execute the `` initdb `` command and that your table names are MarkupSafe 1.0 div.page ul.messages li { connections in a more intelligent way , allowing you to target different { % else % } it from each view . g.user = get_db ( ) .execute ( def gravatar_url ( email , size=80 ) : .post > header { display : flex ; align-items : flex-end ; font-size : 0.85em ; } .add-entry { font-size : 0.9em ; border-bottom : 1px solid # ccc ; } A simple page blueprint is registered under / and /pages return AuthActions ( client ) Endpoints and URLs does n't show up , try clearing your browser 's cache . them . If they match , the password is valid . if 'user_id ' in session : Bonus : Testing the Application user = db.execute ( < dd > < input type= '' password '' name= '' password '' size= '' 30 '' > except OSError : should n't use it for hosting a real public application . See pip install flaskr-1.0.0-py3-none-any.whl } '/2/update ' , { % endfor % } .. warning : : user . Make sure the server is still running ( `` flask run `` if it 's not ) , Within the function , you can then access : attr : ` flask.g ` and other things as Try clicking the `` Register '' button without filling out the form and see username TEXT UNIQUE NOT NULL , Fortunately , there are Flask extensions for the purpose of # create the database and load test data with current_app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : application needs will happen inside the function , then the application However , the downside of this is that it requires the `` sqlite3 `` command * Like / unlike a post . return rv [ 0 ] if rv else None pip install pytest Or if you are using the master branch , install Flask from source before For a real-world application , it 's recommended to use Here is a screenshot of the final application : The connection object provided by SQLite can give you a cursor object . Step 8 : Adding Style title = request.form [ 'title ' ] # store the database in the instance folder : func : ` abort ` will raise a special exception that returns an HTTP status initialize it with the config from the same file in : file : ` flaskr.py ` : : you 'll see later , it would be linked to using : class : ` ~flask.Markup ` or with the `` |safe `` filter in the template , padding : 0.25rem 0.5rem ; if check_author and post [ 'author_id ' ] ! = g.user [ 'id ' ] : `` auth.login ( ) `` and subsequent requests from the client will be logged def connect_db ( ) : error = 'Password is required . ' assert b'You were logged out ' in rv.data ~~~~~~~~~~~~~~~~ Installing also comes with other benefits that might not be obvious from def test_register_validate_input ( client , username , password , message ) : tests/test_db.py .. [ 95 % ] Then follow the : doc : ` installation instructions < /installation > ` to set on . Once you become more comfortable with Flask , you can step out of saved . It 's under for what to try next : : data : ` TESTING ` tells Flask that the app is in test mode . Flask changes only have to commit the changes . SQLite3 and other transactional : class : ` sqlite3.Row ` tells the connection to return rows that behave pytest SUCH DAMAGE . username = request.form [ 'username ' ] ================ abort ( 401 ) padding : 0 1rem 1rem ; return client.post ( '/login ' , data= { : meth : ` ~sqlite3.Cursor.fetchall ` is used , which returns a list of padding : 0.5rem ; db.commit ( ) [ session [ 'user_id ' ] ] , one=True ) runs when the function is called , and code in branches , such as `` if `` return render_template ( 'index.html ' ) # . If validation fails , the error is shown to the user . : func : ` flash ` render_template , abort , g , flash , _app_ctx_stack Flask and sqlite3 . .content label { effects . ' WHERE p.id = ? ' , The basic blog app built in the Flask ` tutorial ` _ . You 've written the authentication views for your application , but if session.clear ( ) with minitwit.app.app_context ( ) : def load_logged_in_user ( ) : placed inside of the : file : ` flaskr/flaskr ` folder . return redirect ( url_for ( 'timeline ' ) ) response = client.get ( '/ ' ) However , the endpoint for the `` index `` view defined below will be development mode . assert client.post ( '/1/delete ' ) .status_code == 403 < /section > need to keep it around for longer . Because database connections Define the blueprint and register it in the application factory . pass root directory , `` flaskr/ `` . The `` editable `` flag allows editing this list of conditions and the following disclaimer . utilizing the * application context * . Congratulations , you 've now finished writing your application ! Take some like dicts . This allows accessing the columns by name . < /article > < p class= '' body '' > { { post [ 'body ' ] } } < /p > * next to * the `` flaskr `` package , not inside it . The assert 'http : //localhost/auth/login ' == response.headers [ 'Location ' ] html { font-family : sans-serif ; background : # eee ; padding : 1rem ; } source code from ` the examples ` _ . a minimal blog application < link rel= '' stylesheet '' type= '' text/css '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > ) 5. now you can run flaskr : default message is used . `` 404 `` means `` Not Found '' , and `` 403 `` means db.commit ( ) background : white ; click 6.7 < hr > { % if g.user [ 'id ' ] == post [ 'author_id ' ] % } < div class= '' body '' > : param id : id of post to get font-weight : bold ; author of the post . The tutorial will assume you 're working from the `` flask-tutorial `` app.config [ 'PASSWORD ' ] ) url='http : //flask.pocoo.org/docs/tutorial/ ' , To generate a URL to the update page , : func : ` url_for ` needs to be passed Operating systems know the concept of a current working directory for 'password ' : password , Now that you have finished the application and everything works as < textarea name= '' body '' id= '' body '' > { { request.form [ 'body ' ] or post [ 'body ' ] } } < /textarea > The application will be installed and run as Python package . This is the rv.row_factory = sqlite3.Row .page { margin : 2em auto ; width : 35em ; border : 5px solid # ccc ; def user_timeline ( username ) : def init_db ( ) : dependencies are installed . src= '' http : //ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js '' > < /script > directory from now on . The file names at the top of each code block are that can call the Click commands registered with the application . This test uses Pytest 's `` monkeypatch `` fixture to replace the < h1 > { % block title % } Edit `` { { post [ 'title ' ] } } '' { % endblock % } < /h1 > : file : ` setup.py ` ) : : } , function ( data ) { If you 've been following along in this tutorial , you might be wondering from setuptools import setup 'pytest-runner ' , .. admonition : : Security Note border-bottom : 1px solid # eee ; assert 'http : //localhost/auth/login ' == response.headers [ 'Location ' ] the tests pass . contributors may be used to endorse or promote products derived from error = 'Invalid username ' submit_form ( e ) ; : meth : ` app.teardown_appcontext ( ) < Flask.teardown_appcontext > ` tells The first several lines of code in the application module are the needed import pip install -e . the : class : ` sqlite3.Row ` row factory . `` `` '' Convenience method to look up the id for a username . '' '' '' import io { % else % } db.execute ( a , h1 , h2 { color : # 377ba8 ; } def login ( ) : Step 4 : Database Connections 4. fire up a shell and run this : make changes to your local code , you 'll only need to re-install if you # . `` { % block content % } `` is where the content of each page goes , such setup ( This tells Python to copy everything in the `` static `` and `` templates `` name='yourapplication ' , .content input , .content textarea { margin-bottom : 1em ; } * request context * . For the time being , all you have to know is that there data that will be used in the tests . Write a SQL file to insert that { % block body % } { % endblock % } with the `` register `` view function . When Flask receives a request < div class= '' followstatus '' > ( newest on top ) and the user can add new ones from there if logged in . h1 , h2 { font-family : 'Georgia ' , serif ; margin : 0 ; } # create our little application : ) < h1 > < a href= '' { { url_for ( 'index ' ) } } '' > Flaskr < /a > < /h1 > ├── setup.py Continue to : ref : ` tutorial-dbinit ` . are special variables that use these . For instance , the .flash { background : # CEE5F5 ; padding : 0.5em ; Jinja looks and behaves mostly like Python . Special delimiters are used called = False list all posts , allow logged in users to create posts , and allow the border : 1px solid # 073B36 ; with app.app_context ( ) : environment . if __name__=='__main__ ' : Continue to : doc : ` layout ` . < title > { % block title % } { % endblock % } - Flaskr < /title > a link to edit the post . # the login page ) .fetchall ( ) projects you should always start with this . strings that must not be null . padding : 10px 14px ; < a href= '' { { url_for ( 'public_timeline ' ) } } '' > public timeline < /a > | ========================= test session starts ========================== This tells pip to find `` setup.py `` in the current directory and install 'SELECT id FROM user WHERE username = ? ' , ( username , ) db.init_app ( app ) The tutorial only uses what 's provided by Flask and Python . In another few steps you will be creating the database schema as well as the main module . to be installed , which is not necessarily the case on every system . This : data : ` g ` is automatically available in templates . Based on if This is identical to the register template except for the title and assert create_app ( { 'TESTING ' : True } ) .testing The `` register `` view should render successfully on `` GET `` . On `` POST `` def add_numbers ( ) : [ request.form [ 'title ' ] , request.form [ 'text ' ] ] ) As a quick side note , the files inside of the : file : ` static ` folder are # current user does n't see edit link views you installed Flask in your project 's environment . This makes deploying < a href= '' { { url_for ( 'logout ' ) } } '' > log out < /a > else : * .egg-info/ ensure it 's an : class : ` int ` , and pass it as the `` id `` argument . If you ~~~~~~~~~~~~~~~~~ nav h1 a { text-decoration : none ; padding : 0.25rem 0.5rem ; } Now that everything else works , it 's time to add some style to the < h2 > { { self.title ( ) } } < /h2 > < li > < a href= '' { { url_for ( 'simple_page.show ' , page='world ' ) } } '' > /world < /a > [ aliases ] < small > & mdash ; { { message.pub_date|datetimeformat } } < /small > from flaskr.db import get_db is a convenient helper function that will open a resource that the it 's applied to . The new function checks if a user is loaded and ul.flashes { to all the URLs associated with the blueprint . .entries { list-style : none ; margin : 0 ; padding : 0 ; } tests with coverage less verbose , can be added to the project 's < h1 > { % block title % } New Post { % endblock % } < /h1 > followed = query_db ( `` 'select 1 from follower where def test_index ( client ) : In the above code , the : class : ` ~flask.Config ` object works similarly to a A microblogging application written with Flask and sqlite3 . : class : screenshot rv = sqlite3.connect ( app.config [ 'DATABASE ' ] ) h1 { border-bottom : 2px solid # eee ; } follower.who_id = ? and follower.whom_id = ? ' '' , letter-spacing : 0.5px ; request.form [ 'password ' ] ) : `` `` '' Update a post if the current user is the author . '' '' '' : caption : `` flaskr/__init__.py `` Note that this view checks that the user is logged in ( that is , if the this way is that you do not have to install `` pytest `` . Go ahead and < li > < a href= '' { { url_for ( 'auth.login ' ) } } '' > Log In < /a > .error { background : # f0d6d6 ; padding : 0.5em ; } ' WHERE id = ? ' , ( Scroll to the end of the page for more about project layout . ) Blueprint Example assert b'You are no longer following & # 34 ; foo & # 34 ; ' in rv.data : attr : ` app.instance_path < Flask.instance_path > ` , which is the import functools < div class=page > : meth : ` app.register_blueprint ( ) < Flask.register_blueprint > ` . Place the title text not null , .. _tutorial : http : //flask.pocoo.org/docs/tutorial/ query modifies data , : meth : ` db.commit ( ) < sqlite3.Connection.commit > ` The authentication views and templates work , but they look very plain Continue with : ref : ` tutorial-css ` . │ │ ├── create.html Unicode text , use : meth : ` get_data ( as_text=True ) < werkzeug.wrappers.BaseResponse.get_data > ` group these module-level functions together , and put your new not contain `` user_id `` after logging out . ) .fetchone ( ) .content form { .. _CSS : https : //developer.mozilla.org/docs/Web/CSS if text : the browser not to submit the form until those fields are filled in . If return redirect ( url_for ( 'timeline ' ) ) error = 'Incorrect password . ' body { max-width : 960px ; margin : 0 auto ; background : white ; } if request.form [ 'username ' ] ! = current_app.config [ 'USERNAME ' ] : font-size : 12px ; < input type= '' password '' name= '' password '' id= '' password '' required > The base template is directly in the `` templates `` directory . To keep rv = login ( client , app.config [ 'USERNAME ' ] , flaskr/auth.py 54 0 22 0 100 % flash ( 'You were logged in ' ) post = db.execute ( 'SELECT * FROM post WHERE id = 1 ' ) .fetchone ( ) simulates requests to the application and returns the response data . .. code-block : : python replaced by a block of the same name ( `` body `` ) in a child template . { { profile_user.username } } 's Timeline h1 { font-family : serif ; color : # 377ba8 ; margin : 1rem 0 ; } nav ul { The `` init-db `` command should call the `` init_db `` function and output ) ; Continue with : ref : ` tutorial-packaging ` . .. image : : .. /_static/flaskr.png was set . If the connection exists , it is closed . Further down you will / Flaskr / its page . Continue to : doc : ` tests ` . 4. initialize the database with this command : < label for= '' password '' > Password < /label > Install the Project * `` venv/ `` , a Python virtual environment where Flask and other export FLASK_APP=flaskr assert get_db ( ) .execute ( .. toctree : : { % endfor % } The application will use a ` SQLite ` _ database to store users and posts . .. _Fork : https : //github.com/pallets/flask/fork Run and watch the tests pass , within the top-level : file : ` flaskr/ ` For now you should continue with : ref : ` tutorial-schema ` . the size . < li > < a href= '' { { url_for ( 'simple_page.show ' , page='hello ' ) } } '' > /hello < /a > < a href= '' { { url_for ( 'login ' ) } } '' > sign in < /a > { % if error % } < p class= '' error '' > < strong > Error : < /strong > { { error } } { % endif % } right now . Some ` CSS ` _ can be added to add style to the HTML layout you `` select * from user where username = ' a ' '' , decorator . It 's executed every time the application context tears down : : * Paged display . Only show 5 posts per page . set_classes ( options ) register_teardowns ( app ) < textarea name= '' body '' id= '' body '' > { { request.form [ 'body ' ] } } < /textarea > `` get_db `` will be called when the application has been created and is password TEXT NOT NULL 'INSERT INTO post ( title , body , author_id ) ' title= ' < Hello > ' , min-width : 10em ; 'DATABASE ' : db_path , def setup ( app ) : { % endif % } Login and Logout . Add the following code snipets to : file : ` flaskr.py ` . ( 'other ' , 'pbkdf2 : sha256:50000 $ kJPKsz6N $ d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79 ' ) ; rv = client.get ( '/foo ' ) if test_config is None : * An RSS feed of new posts . : gh : ` The tutorial project is available as an example in the Flask Register with the Application elif request.form [ 'password ' ] ! = app.config [ 'PASSWORD ' ] : `` `` '' Queries the database and returns a list of dictionaries . '' '' '' templates . < a class= '' action '' href= '' { { url_for ( 'blog.create ' ) } } '' > New < /a > $ .getJSON ( $ SCRIPT_ROOT + '/_add_numbers ' , { body TEXT NOT NULL , # load the instance config , if it exists , when not testing if not title : ~~~~~~~~~~~~~~ install_requires= [ example above . Otherwise , your app will be vulnerable to SQL injection when securely hash the password , and that hash is stored . Since this `` __init__.py `` file . The `` __init__.py `` serves double duty : it will ( 'test title ' , 'test ' || x'0a ' || 'body ' , 1 , '2018-01-01 00:00:00 ' ) ; Copy this file to another machine , `` { % extends 'base.html ' % } `` tells Jinja that this template should schema include flaskr/schema.sql closed and removed . '/1/delete ' , g.user = None app.teardown_appcontext ( close_db ) margin-bottom : 1em ; elif request.form [ 'password ' ] ! = request.form [ 'password2 ' ] : `` `` '' If a user id is stored in the session , load the user object from Delete import tempfile def index ( ) : class AuthActions ( object ) : * safe * values that look the same in the browser but do n't cause unwanted @ bp.route ( '/add ' , methods= [ 'POST ' ] ) click.echo ( 'Initialized the database . ' ) padding : 4px 10px ; * Upload an image to go along with a post . g.user = query_db ( 'select * from user where user_id = ? ' , padding : 2px ; < input type= '' submit '' value= '' Log In '' > rv = client.get ( '/foo/unfollow ' , follow_redirects=True ) import os import os VALUES `` `` '' Closes the database again at the end of the request . '' '' '' username , email , pw_hash ) values ( ? , ? , ? ) ' '' , app.config.from_pyfile ( 'config.py ' , silent=True ) some validation as well . test=pytest nav h1 { : func : ` click.command ` defines a command line command called `` init-db `` final document . Flask uses the ` Jinja ` _ template library to render app = Flask ( 'minitwit ' ) app.config.update ( test_config ) initializes the database . @ app.route ( '/ < username > /follow ' ) version= ' 1.0.0 ' , with the final product as you follow the tutorial . flash ( 'You were logged out ' ) a = request.args.get ( ' a ' , 0 , type=int ) return redirect ( url_for ( 'public_timeline ' ) ) Or on Windows cmd : : difference is that the `` update `` view uses a `` post `` object and an project , you might decide to use : ref : ` extensions ` or other libraries to < dd > < input type=text size=30 name=title > def auth ( client ) : one for the blog posts functions . The code for each blueprint will go .content > header { border-bottom : 1px solid lightgray ; display : flex ; align-items : flex-end ; } ] , assert not create_app ( ) .testing the value of it into the header block , so that both the window and page margin : 1rem 0 ; assert b'test\nbody ' in response.data A Flask application can be as simple as a single file . ) ) div.page ul.messages { ( 'test ' , ' a ' , b'Incorrect password . ' ) , 'TESTING ' : True , auth.login ( ) author_id INTEGER NOT NULL , elif db.execute ( .. _Click : https : //palletsprojects.com/p/click/ Install Flaskr : : < h2 > Login < /h2 > < dd > < input type= '' password '' name= '' password2 '' size= '' 30 '' > Continue to : doc : ` views ` . flask run assert post is None `` `` '' Connects to the specific database . '' '' '' return false ; * .swp You can observe that the project is now installed with `` pip list `` . password = request.form [ 'password ' ] db.close ( ) do , so `` pip install yourproject.whl `` installs them . The first thing to do when working with a SQLite database ( and most ============================= client = minitwit.app.test_client ( ) coverage html # open htmlcov/index.html in a browser deploy your application to . It gives an overview of how to create the db = get_db ( ) login.html < dt > Password : app.jinja_env.filters [ 'gravatar ' ] = gravatar_url select message . * , user . * from message , user path that Flask has chosen for the instance folder . You 'll learn assert b'href= '' /1/update '' ' in response.data .. code-block : : html+jinja DATABASE = '/tmp/minitwit.db ' as flaskr . Otherwise `` pytest `` test will not be able to import the session [ 'user_id ' ] = user [ 'user_id ' ] def login ( self , username='test ' , password='test ' ) : include_package_data=True , In addition to that , you can use the : meth : ` ~flask.Config.from_object ` pip install pytest coverage def show_entries ( ) : packages=find_packages ( ) , render_template , flash ) flash ( 'Your message was recorded ' ) background : # 6ECCC4 ; development computer to try out the instructions below , but probably assert b'You were successfully registered ' \ register_and_login ( client , 'foo ' , 'default ' ) default Git version is the master branch . : : options = options or { } db_fd , db_path = tempfile.mkstemp ( ) bp = Blueprint ( 'auth ' , __name__ , url_prefix='/auth ' ) In particular , it does n't test how the user interacts with the correct ( singular vs. plural , for example ) . @ app.cli.command ( 'initdb ' ) To test that the page renders successfully , a simple request is made and Flask is now shipped with built-in support for ` Click ` _ . Click provides database server and is built-in to Python . However , if concurrent assert b ' < strong > HTML < /strong > allowed here ' in rv.data the ` example source ` _ . `` `` '' Start with a blank database . '' '' '' they contain ) to include . `` find_packages ( ) `` finds these directories if hasattr ( g , 'sqlite_db ' ) : def test_login_required ( client , path ) : # . If validation succeeds , insert the new user data into the database . If you do n't get the whole picture , download the : gh : ` sourcecode assert b ' & lt ; Hello & gt ; ' in rv.data For security , passwords should never be stored in the database pointing to a configuration file or pass in a be executed for each test already , so if something fails the other tests with an error message or create the new user and go to the login page . # . After storing the user , they are redirected to the login page . def test_message_recording ( client ) : < /form > as the login form or a blog post . setup_requires= [ Database error = None user_id = session.get ( 'user_id ' ) response = client.post ( path ) ( title , body , id ) where message.author_id = user.user_id and ( < /form > before submitting . error = None nav { background : lightgray ; display : flex ; align-items : center ; padding : 0 0.5rem ; } : alt : screenshot of login page web application ! * Neither the name of the copyright holder nor the names of its order by message.pub_date desc limit ? ' '' , down as each write happens sequentially . Small applications wo n't notice * A search box that filters the index page by name . align-self : start ; } : meth : ` bp.before_app_request ( ) < Blueprint.before_app_request > ` registers __init__.py the test functions you 've written . nav ul { display : flex ; list-style : none ; margin : 0 ; padding : 0 ; } : file : ` test_flaskr.py ` file . may be different than the example . border : 1px solid # ccc ; view functions . You will need four of them ; Show Entries , Add New Entry , ( title , body , g.user [ 'id ' ] ) # current user ca n't modify other user 's post Create the `` setup.py `` file for `` flaskr `` with the following content : : app.add_url_rule ( '/ ' , endpoint='index ' ) * Debugger PIN : 855-212-761 assert get_db ( ) .execute ( current application context . app.run ( ) def close_database ( exception ) : def test_delete ( client , auth , app ) : `` `` '' Register database functions with the Flask app . This is called by messages . independently of any development values you have configured . configuration should be overridden . assert 'Initialized ' in result.output tutorial . `` pytest `` via `` pytest-runner `` , as the : file : ` setup.py ` script has screenshot below . init_db ( ) that requires adding a couple of lines to the : file : ` setup.py ` file and Blog each process . Unfortunately , you can not depend on this in web white-space : pre-line ; FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE [ request.form [ 'title ' ] , request.form [ 'text ' ] ] ) `` db.py `` file : < /dl > and options used . allow users to execute code on the server ! You need to tell Waitress about your application , but it does n't use g.user = None error = 'User { } is already registered . '.format ( username ) a { logged in . A * decorator * can be used to check this for each view it 's response = auth.login ( ) .. sourcecode : : html+jinja < textarea name= '' body '' id= '' body '' > { { request.form [ 'body ' ] } } < /textarea > title TEXT NOT NULL , For Windows PowerShell , use `` $ env : `` instead of `` export `` : if not hasattr ( g , 'sqlite_db ' ) : def client ( app ) : current_app.config [ 'DATABASE ' ] , databases will not commit unless you explicitly tell it to . blueprint . supports one user , only allows text entries , and has no feeds or comments . return app.test_client ( ) previous page . an application , they are registered with a blueprint . Then the blueprint `` `` '' db_fd , minitwit.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) You can find a less compact version of `` style.css `` in the def delete ( id ) : `` htmlcov/index.html `` in your browser to see the report . include flaskr/schema.sql .. _tutorial-testing : margin : 1em 0 ; the previous page . < input name= '' title '' id= '' title '' value= '' { { request.form [ 'title ' ] or post [ 'title ' ] } } '' required > page . Try entering an incorrect username , or the correct username and with the application instance , otherwise they wo n't be used by the : license : BSD , see LICENSE for more details . there is no application object when writing the rest of your code . app.config.update ( config or { } ) FOREIGN KEY ( author_id ) REFERENCES user ( id ) } ) ; assert b'Invalid username ' in rv.data assert 'user_id ' not in session `` __name__ `` is a convenient way to tell it that . name , rawtext , text , lineno , inliner , This tutorial is n't focused on how to write CSS , so you can just copy [ aliases ] .. _Python Packaging Guide : https : //packaging.python.org One possible and recommended project structure is : : return client.post ( '/register ' , data= { : caption : `` tests/test_blog.py `` def login ( ) : < /ul > and specifies an `` action `` attribute that posts to the delete view < ul class= '' flashes '' > < /nav > setup ( from flaskr import db < li > < a href= '' { { url_for ( 'auth.login ' ) } } '' > Log In < /a > monkeypatch.setattr ( 'flaskr.db.init_db ' , fake_init_db ) < input type= '' submit '' value= '' Register '' > documentation . Go there to see how easy it is to test Flask applications . db.execute ( # load the instance config , if it exists , when not testing Tests the MiniTwit application . top.sqlite_db = sqlite3.connect ( app.config [ 'DATABASE ' ] ) │ └── test_blog.py input [ type= '' password '' ] { from flask import Blueprint , render_template , abort from flaskr.db import get_db , init_db check if the user was logged in . background : # eee ; div.page div.twitbox input [ type= '' text '' ] { time to try out everything in the browser . However , there 's still more `` `` '' Registers a new message for the user . '' '' '' margin : 0 0 15px 0 ; return render_template ( 'auth/login.html ' ) password in the same way as the stored hash and securely compares from setuptools import setup ) ) words = words.strip ( ) div.page ul.messages li small { pw_hash text not null documentation and/or other materials provided with the distribution . * Never leave debug mode activated in a production system * , because it will that making a change wo n't unexpectedly change other behavior . However , app.register_blueprint ( blog.bp ) < /article > `` select * from user where username = ' a ' '' , def test_index ( client , auth ) : h1 , h2 { font-family : 'Georgia ' , serif ; margin : 0 ; } if 'db ' not in g : < input type= '' password '' name= '' password '' id= '' password '' required > application provides . This function opens a file from the resource with `` setuptools `` is convenient because it is not necessary to actually < title > { % block title % } { % endblock % } - Flaskr < /title > accessing `` session `` outside of a request would raise an error . Unlike the auth blueprint , the blog blueprint does not have a many general python libraries that can be used for hashing . __pycache__/ r = client.get ( '/hello ' ) border : 1px solid # AACBE2 ; } add_message ( client , 'the message by foo ' ) < dt > Username : # - * - coding : utf-8 - * if 'db ' not in g : from .minitwit import app into a single Python module . You do n't have to , and if your app : ref : ` grows ` logged_in ` key is present in the session and `` True `` ) . < p > < input type= '' text '' name= '' text '' size= '' 60 '' > < ! : func : ` ~werkzeug.security.generate_password_hash ` is used to __pycache__/ div.page div.twitbox { post = get_db ( ) .execute ( assert post [ 'title ' ] == 'updated ' [ session [ 'user_id ' ] , profile_user [ 'user_id ' ] ] , text= ' < strong > HTML < /strong > allowed here ' * Installation files telling Python how to install your project . @ app.route ( '/logout ' ) return redirect ( url_for ( 'blog.index ' ) ) tests < header > ~~~~~~ def test_login_validate_input ( auth , username , password , message ) : `` `` '' If this request connected to the database , close the each message returned by : func : ` get_flashed_messages ` . You used DROP TABLE IF EXISTS user ; < /dl > def close_db ( e=None ) : init_db ( ) See : doc : ` /deploying/index ` for a list of many different ways to host if hasattr ( top , 'sqlite_db ' ) : zip_safe=False , current page ( `` / < id > /update `` ) . The other form contains only a button up a Python virtual environment and install Flask for your project . 'SELECT p.id , title , body , created , author_id , username ' drop table if exists message ; def login_required ( view ) : < label for= '' password '' > Password < /label > color : # cc2f2e ; password2 = password is unique for each request and will be reused if this is called /flaskr # . : func : ` os.makedirs ` ensures that .. _tutorial-css : Public Timeline such as enabling the interactive debugger . ) .fetchone ( ) Each page in the application will have the same basic layout around a Install : func : ` render_template ` , but you have n't written the templates yet . * Environment : development other Python database libraries ) is to create a connection to it . Any def init_db_command ( ) : Flask is flexible . It does n't require you to use any particular project Running `` setup.py `` with Python gives you a command line tool to issue if user is None : app.run ( ) import pytest : meth : ` app.test_cli_runner ( ) < Flask.test_cli_runner > ` creates a runner Blueprint , flash , g , redirect , render_template , request , url_for value= '' { { request.form [ 'title ' ] or post [ 'title ' ] } } '' required > ) ) In this tutorial , we will create a simple blogging application . It only return g.sqlite_db from flask import g , session export FLASK_APP=flaskr return render_template ( 'pages/ % s.html ' % page ) CONTRIBUTORS `` AS IS '' AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , In SQLite , data is stored in * tables * and * columns * . These need to be for this tutorial . Your directory structure will look like this : : def runner ( app ) : When using a blueprint , the name of the blueprint is prepended to the { % endif % } < nav > user_id = session.get ( 'user_id ' ) color : # 26776F ; # . Validate that `` username `` is not already registered by querying the `` `` '' Connect to the application 's configured database . The connection read from the file . Flask provides two contexts : the * application context * and the mkdir flaskr [ profile_user [ 'user_id ' ] , PER_PAGE ] ) , followed=followed , packaging with pytest.raises ( sqlite3.ProgrammingError ) as e : ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT bp = Blueprint ( 'flaskr ' , __name__ ) import sqlite3 { % extends `` pages/layout.html '' % } Create the Tables When using setuptools , it is also necessary to specify any special files < input class= '' danger '' type= '' submit '' value= '' Delete '' onclick= '' return confirm ( 'Are you sure ? ' ) ; '' > margin : 1rem 0 0.25rem 0 ; assert response.headers [ 'Location ' ] == 'http : //localhost/auth/login ' template already has a link to the `` style.css `` file : during development , but it should be overridden with a random def logout ( self ) : assert b '' Log In '' in response.data input.danger { The `` input `` tags are using the `` required `` attribute here . This tells export FLASK_APP=minitwit : func : ` tempfile.mkstemp ` creates and opens a temporary file , returning return redirect ( url_for ( 'index ' ) ) does n't create the instance folder automatically , but it needs to be this software without specific prior written permission . * * Be sure to use the same version of the code as the version of the docs Unlike the views you 've written so far , the `` update `` function takes import yourapplication.views if not username : The : ref : ` tutorial < tutorial > ` is structured this way , see the def add_entry ( ) : a { background : # 105751 ; database ) .fetchone ( ) is not None : flask initdb `` index `` endpoint . : meth : ` app.add_url_rule ( ) < Flask.add_url_rule > ` db.execute ( 'delete from follower where who_id= ? and whom_id= ? ' , assert client.get ( '/create ' ) .status_code == 200 { % block content % } follow the tutorial . padding : 0 10px 0 0 ; * autoescape * any data that is rendered in HTML templates . This means from . import blog : caption : `` flaskr/db.py `` register_and_login ( client , 'bar ' , 'default ' ) < label for= '' body '' > Body < /label > blocks , only runs when the condition is met . You want to make sure that < form action= '' '' method= '' post '' > been called . ( Recall the ` setup_requires ` argument in : file : ` setup.py ` ) assert b '' Hello World ! '' in rv.data Update assert client.post ( path ) .status_code == 404 'email ' : email , : class : screenshot root of the application and will select title and text from the database . started . In addition to Flask , we will use SQLite for the database , which is abort ( 404 , `` Post id { 0 } does n't exist . `` .format ( id ) ) { % for message in get_flashed_messages ( ) % } : func : ` ~flask.flash ` an information message to the next request and `` `` '' Helper function to login '' '' '' @ app.route ( '/public ' ) because writing todo lists is not fun into multiple modules that can be imported where needed , and the : maxdepth : 1 using the `` flask `` command , similar to the `` run `` command from the font-size : 1.5em ; ├── venv/ email text not null , For example , the `` hello ( ) `` view that was added to the app moz-border-radius : 2px ; .. _the full src for this example here : https : //github.com/pallets/flask/tree/master/examples/patterns/largerapp flaskr 1.0.0 /home/user/Projects/flask-tutorial : gh : ` example project < examples/tutorial > ` , which might look a bit each function is tested with data that covers each branch . session.pop ( 'logged_in ' , None ) 'SELECT id FROM user WHERE username = ? ' , ( username , ) < form action= '' { { url_for ( 'blog.delete ' , id=post [ 'id ' ] ) } } '' method= '' post '' > { % block body % } post = db.execute ( 'SELECT * FROM post WHERE id = 1 ' ) .fetchone ( ) return render_template ( 'blog/create.html ' ) flaskr.db < strong > < a href= '' { { url_for ( 'user_timeline ' , username=message.username ) source ` _ is organized . In Flask , you can put all of your application code more information see : ref : ` testing ` . ) # check that the user is loaded from the session div.page div.twitbox input [ type= '' submit '' ] { Now you can run your application using the `` flask `` command . From the assert client.get ( '/auth/register ' ) .status_code == 200 # Blueprint can be registered many times def runner ( app ) : `` `` '' Check if adding messages works '' '' '' `` `` '' Helper function to logout '' '' '' padding : 1rem ; : caption : `` setup.py `` pip install pytest < link rel= '' stylesheet '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > data . interactive Python shell or a script . This will come in handy later . app.register_blueprint ( auth.bp ) return 'https : //www.gravatar.com/avatar/ % s ? d=identicon & s= % d ' % \ Flask with enhanced and extensible command line utilities . Later in this the author . < h1 > Flaskr < /h1 > pip install -e examples/tutorial -q def logout ( self ) : requests to the application without running the server . .. _tutorial-dbcon : { % endif % } * You can manage your project 's dependencies just like other packages assert g.user [ 'username ' ] == 'test ' '/2/delete ' , modifications in the future . The application above is used as a basic The `` app `` fixture will call the factory and pass `` test_config `` to A : class : ` Blueprint ` is a way to organize a group of related views and this case . session.pop ( 'user_id ' , None ) } } '' > Follow user < /a > . < li > < h2 > { { entry.title } } < /h2 > { { entry.text|safe } } < /li > 'SELECT p.id , title , body , created , author_id , username ' ( id , ) description='The basic blog app built in the Flask tutorial . ' , this . Once you become big , you may want to switch to a different a function that runs before the view function , no matter what URL is Now that you have installed Flask , you will need to create the folders required For the time being , all you have to know is that you can store information to log in and log out . return app from jinja2 import TemplateNotFound ( 'test ' , 'pbkdf2 : sha256:50000 $ TCI4GzcX $ 0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f ' ) , < /div > `` `` '' Clear existing data and create new tables . '' '' '' Step 0 : Creating The Folders to run pytest instead of running it directly . it . : func : ` redirect ` generates a redirect response to the generated client.post ( '/create ' , data= { 'title ' : 'created ' , 'body ' : `` } ) result = runner.invoke ( args= [ 'init-db ' ] ) < a href= '' { { url_for ( 'timeline ' ) } } '' > my timeline < /a > | could mess with the HTML , such as `` < `` and `` > `` will be * escaped * with assert b'You have to enter a password ' in rv.data Making your project installable means that you can build a from hashlib import md5 rv.row_factory = sqlite3.Row dbcon show_entries.html The test code is located in the `` tests `` directory . This directory is def test_index ( client , auth ) : `` `` '' Log in a registered user by adding the user id to the session . '' '' '' the end of the factory function before returning the app . .. _tutorial-packaging : def create_app ( test_config=None ) : The Blueprint { % if session.logged_in % } ( md5 ( email.strip ( ) .lower ( ) .encode ( 'utf-8 ' ) ) .hexdigest ( ) , size ) return render_template ( 'timeline.html ' , messages=query_db ( `` ' return 'Hello World ! ' response = client.post ( path ) The tutorial does n't go into detail about SQL . If you are not familiar Take a look at the code segment below . A good place to add this function , { % endblock % } { % else % } if error is not None : provided , you might be wondering about ways to organize the project . < div class= '' footer '' > border : 1px solid # 94E2DA ; pub_date integer build/ redirect to the public timeline . This timeline shows the user 's '/2/update ' , def get_user_id ( username ) : Continue with : ref : ` tutorial-views ` files , such as the static and templates directories , Development mode shows an interactive debugger whenever a page raises an that 's automatically available in templates . border : 1px solid # DBF3F1 ; < nav > ( In case you are on Windows you need to use `` set `` instead of `` export `` ) . logout ( client ) # . : meth : ` app.config.from_pyfile ( ) < Config.from_pyfile > ` overrides ) USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON Register For this reason the `` app.root_path `` attribute can be used to import blueprintexample '/1/update ' , that tells Flask where to find the application instance : : relative to this directory . The ` logout ` function , on the other hand , removes that key from the session your project . pip install -e examples/patterns/largerapp -q needed for this application and it will only support SQLite . All you need to do .entries li h2 { margin-left : -1em ; } JavaScript files go . Inside the : file : ` templates ` folder , Flask will look for flash ( 'You were logged out ' ) error = 'Invalid username ' { % if session.logged_in % } author_id integer not null , ) margin : 10px 10px 0 10px ; { % if g.user [ 'id ' ] == post [ 'author_id ' ] % } Build and Install PER_PAGE = 30 how the `` Hello , World ! '' example did on the previous page . While this is $ env : FLASK_ENV = `` development '' def create ( ) : margin : 0 ; session [ 'logged_in ' ] = True graft flaskr/templates < form action= '' { { url_for ( 'login ' ) } } '' method=post > Flask automatically adds a `` static `` view that takes a path relative # . Validate that `` username `` and `` password `` are not empty . export FLASK_ENV=development the `` flaskr `` package , which is useful since you wo n't necessarily know ============ ├── flaskr/ assert response.headers [ 'Location ' ] == 'http : //localhost/auth/login ' SECRET_KEY='dev ' , 'SELECT * FROM user WHERE id = ? ' , ( user_id , ) data= { 'username ' : username , 'password ' : password } projects root directory . You also need to add an : file : ` __init__.py ` float : left ; Factory World Binary files a/docs/tutorial/flaskr_index.png and /dev/null differ db = get_db ( ) This decorator returns a new view function that wraps the original view @ app.before_request import tempfile set FLASK_APP=flaskr width : 70px ; entries = cur.fetchall ( ) a different directory for the instance folder . You can find it at # we should now see foo 's message assert response.headers [ 'Location ' ] == 'http : //localhost/ ' font-style : italic ; import os assert r.status_code == 200 coverage run -m pytest After the page title , and before the content , the template loops over } ) ; venv/ The `` setup.py `` file describes your project and the files that belong Describe the Project # a simple page that says hello < header > else : .post .about { files can then easily be found . In this example , we place the @ pytest.fixture return app.test_client ( ) factory * . Any configuration , registration , and other setup the for this example < examples/jqueryexample > ` . # apply the blueprints to the app .content textarea { min-height : 12em ; resize : vertical ; } { % block content % } { % endblock % } an exception that Flask can not find the templates . The templates test_flaskr.py bp = Blueprint ( 'blog ' , __name__ ) Jinja2 2.10 pip install -- editable . font-size : 14px ; : return : the post with author information abort ( 403 ) < h1 > { % block title % } Log In { % endblock % } < /h1 > .pytest_cache/ from setuptools import find_packages , setup Introducing Flaskr that calls the `` init_db `` function and shows a success message to the width : 585px ; Login and Logout You will see a message telling you that server has started along with You can also test some more authentication behavior while testing the packages= [ 'minitwit ' ] , automatically incrementing integer and a primary key , the other two are css maintainer='Pallets team ' , app.cli.add_command ( init_db_command ) 'text ' text not null .cache/ db.execute ( `` 'insert into user ( register_blueprints ( app ) ) graft flaskr/static By the end , your project layout will look like this : you might expect . When the script ends , the application context tears down user = db.execute ( @ app.route ( '/login ' , methods= [ 'GET ' , 'POST ' ] ) project grows . with open ( os.path.join ( os.path.dirname ( __file__ ) , 'data.sql ' ) , 'rb ' ) as f : min-height : 48px ; rv = sqlite3.connect ( current_app.config [ 'DATABASE ' ] ) data= { 'username ' : username , 'password ' : password } provided that the following conditions are met : name='flaskr ' , Tests the Flaskr application . input their `` username `` and `` password `` . def login_required ( view ) : < /form > Now you know how to connect , but how can you properly disconnect ? For assert b'The two passwords do not match ' in rv.data For this tutorial , all the Python code we use will be put into this file : caption : `` tests/test_factory.py `` import sqlite3 git clone https : //github.com/pallets/flask { % block header % } { % endblock % } where that location is when deploying the application later . `` get_db `` { % endif % } '/auth/login ' , tutorial . It creates a connection between the URL `` /hello `` and a assert client.get ( '/1/update ' ) .status_code == 200 This view shows all the entries stored in the database . It listens on the 2. install the app from the root of the project directory < a href= '' { { url_for ( 'logout ' ) } } '' > sign out [ { { g.user.username } } ] < /a > `` `` '' Logs the user in . '' '' '' exception , and restarts the server whenever you make changes to the display : block ; git checkout latest-tag-found-above < dd > < input type= '' submit '' value= '' Login '' > wrote above is `` 'auth.login ' `` because you added it to the `` 'auth ' `` @ app.cli.command ( 'initdb ' ) `` `` '' Display 's a users tweets . '' '' '' with different arguments . You use it here to test different invalid response = auth.login ( username , password ) < a class= '' action '' href= '' { { url_for ( 'blog.update ' , id=post [ 'id ' ] ) } } '' > Edit < /a > < title > Flaskr < /title > `` SECRET_KEY `` is the only one needed for Flaskr . Following the standard rules of test-discovery your tests will be font-family : serif ; db.commit ( ) font-size : 13px ; from flaskr import create_app top = _app_ctx_stack.top build/ and returns the : class : ` Response ` object returned by Flask . Similarly , session [ 'user_id ' ] = user [ 'id ' ] def close_db ( error ) : return redirect ( url_for ( 'blog.index ' ) ) ) ; The `` login_required `` decorator you wrote earlier is used on the blog return app.test_cli_runner ( ) def get_post ( id , check_author=True ) : def create_app ( ) : applications because you might have more than one application in the monkeypatch.setattr ( 'flaskr.db.init_db ' , fake_init_db ) For now go ahead a create the : file : ` tests/ ` directory as well as the case , start validating the input . database and checking if a result is returned . .. _hashed and salted : https : //blog.codinghorror.com/youre-probably-storing-passwords-incorrectly/ from setuptools import find_packages , setup rv = register ( client , `` , 'default ' ) more about the database in the next section . .. _Jinja : https : //palletsprojects.com/p/jinja/ # . : meth : ` app.config.from_mapping ( ) < Config.from_mapping > ` sets you expect a certain value to render on the page , check that it 's in ====== < h1 > { { post [ 'title ' ] } } < /h1 > @ simple_page.route ( '/ < page > ' ) margin-bottom : 0.5em ; def app ( ) : @ app.route ( '/login ' , methods= [ 'GET ' , 'POST ' ] ) itsdangerous 0.24 Recorder.called = True def auth ( client ) : .eggs/ body { font-family : sans-serif ; background : # eee ; } in a separate module . Since the blog needs to know about authentication , response = client.post ( path , data= { 'title ' : `` , 'body ' : `` } ) all results . * `` flaskr/ `` , a Python package containing your application code and < ul > .. toctree : : @ app.route ( '/ < username > /unfollow ' ) < dt > Title : checked for a `` 200 OK `` : attr : ` ~Response.status_code ` . If tests/test_auth.py ........ [ 34 % ] < ul > < h3 > What 's on your mind { { g.user.username } } ? < /h3 > name of the function , so the endpoint for the `` login `` function you ~ What is MiniTwit ? rv = register ( client , 'meh ' , `` ) request at a time uses the connection . An elegant way to do this is by for each test . from simple_page.simple_page import simple_page with client : response = client.get ( '/ ' ) Want your server to be publicly available ? Check out the : data : ` ~flask.request ` variable is the request object associated with the user is using an older browser that does n't support that attribute , return render_template ( 'blog/create.html ' ) } } '' > { { message.username } } < /a > < /strong > the file can install . The index will show all of the posts , most recent first . A `` JOIN `` is # but on the user 's page we only want the user 's message Continue to : doc : ` static ` . function . The first time the function is called , it will create a database from flask import ( long_description=readme , from flask import g , session `` create `` view . When the user is the author of a post , they 'll see an [ tool : pytest ] tutorial it 's clearer to keep them separate . with app.app_context ( ) : db.execute ( 'DELETE FROM post WHERE id = ? ' , ( id , ) ) later in the tutorial , but it already does a lot . Install them both : browser , and the browser then sends it back with subsequent requests . assert b'test title ' in response.data assert client.post ( '/1/delete ' ) .status_code == 403 Assuming you have seen the : ref : ` testing ` section and have either written self._client = client constructed . The style wo n't change , so it 's a * static * file rather than get the path to the application . Together with the `` os.path `` module , .. _SQLite : https : //sqlite.org/about.html .. note : : Make sure that `` pytest `` is installed in the same virtualenv Creating , editing , and deleting blog posts will require a user to be assert session [ 'user_id ' ] == 1 When Flask detects that it 's installed ( not in editable mode ) , it uses ============= * Debug mode : on the user to login : 'text ' text not null $ ( ' a # calculate ' ) .bind ( 'click ' , submit_form ) ; testpaths = tests there is no user id , or if the id does n't exist , `` g.user `` will be `` `` '' decide to create ) . next so it makes sense that the blog index will be the main index . error = None > < input type= '' submit '' value= '' Share '' > You are currently following this user . built-in to Python , so there is nothing else you need . The view function will pass the entries to the : file : ` show_entries.html ` whom_id = get_user_id ( username ) and edit or delete their own posts . You will be able to package and no `` index `` view to redirect to yet . well as documentation , with or without modification , are permitted .content > header { error = 'Username is required . ' select message . * , user . * from message , user where Initialize the database . readme = f.read ( ) : raise 404 : if a post with the given id does n't exist '/auth/register ' , data= { 'username ' : ' a ' , 'password ' : ' a ' } * Debugger is active ! ============================ setup ( def create_app ( test_config=None ) : padding : 0.8em ; background : white ; } Register A User * Redistributions of source code must retain the above copyright notice , def wrapped_view ( * * kwargs ) : < script type= '' text/javascript '' Next , we will create the application module , : file : ` flaskr.py ` . Just like the to be loaded . The silent switch just tells Flask to not complain if no such assert Recorder.called app = create_app ( config=config ) input.danger { color : # cc2f2e ; } files . attributes from the `` register.html `` template and click `` Register '' { % endfor % } nav ul li a , nav ul li span , header .action { display : block ; padding : 0.5rem ; } < a href= '' { { url_for ( 'login ' ) } } '' > log in < /a > Blog Blueprint < div > rv = logout ( client ) : caption : `` venv/var/flaskr-instance/config.py `` result = runner.invoke ( args= [ 'init-db ' ] ) `` `` '' Shows a users timeline or if no user is logged in it will : file : ` static ` folder : < /header > def register ( client , username , password , password2=None , email=None ) : with current_app.open_resource ( 'schema.sql ' ) as f : on : data : ` g.user < g > ` , which lasts for the length of the request . If < /div > assert b'No entries here so far ' not in rv.data .entries li { margin : 0.8em 1.2em ; } Flaskr Tests same process . .. _official packaging guide : https : //packaging.python.org/tutorials/distributing-packages/ } ) ; package only because you 're running from your project 's directory . padding : 0.8em ; background : white ; } error = 'Username is required . ' ( username , generate_password_hash ( password ) ) post = get_post ( id ) .entries li { margin : 0.8em 1.2em ; } # load the test config if passed in def timeline ( ) : This template has two forms . The first posts the edited data to the You can find the file in `` dist/flaskr-1.0.0-py3-none-any.whl `` . The `` data `` . Bytes must be compared to bytes . If you want to compare `` `` '' Registers and logs in in one go '' '' '' Now create : file : ` setup.cfg ` in the project root ( alongside assert b'Your message was recorded ' in rv.data Import and register the blueprint from the factory using duplicating code , you can write a function to get the `` post `` and call SECRET_KEY = b'_5 # y2L '' F4Q8z\n\xec ] / ' This view follows the same pattern as the `` register `` view above . ( 'test ' , 'test ' , b'already registered ' ) , `` FLASK_APP `` is still set to `` flaskr `` and `` flask run `` still runs : param check_author : require the current user to be the author < p class= '' body '' > { { post [ 'body ' ] } } < /p > of `` update.html `` and posts to the `` / < id > /delete `` URL . Since there { % block body % } < li > < a href= '' /pages/hello '' > /pages/hello < /a > All the blog views use the `` auth `` fixture you wrote earlier . Call init_db ( ) views . A user must be logged in to visit these views , otherwise they command by name . pip install -- editable . 'password ' : password to the final document . `` { % `` and `` % } `` denotes a control flow padding : 3px ; : file : ` flaskr/flaskr ` folder : INSERT INTO user ( username , password ) should show an error message on invalid data . elif db.execute ( recommended way to install and run Flask applications . You will see exactly deploying , this can be used to set a real `` SECRET_KEY `` . < input type= '' submit '' value= '' Log In '' > not passed , there should be some default configuration , otherwise the http : //localhost:5000/ Make the Project Installable dist/ div.page h1 { < input name= '' username '' id= '' username '' required > flash ( 'New entry was successfully posted ' ) `` request.form `` is used instead . : data : ` request ` is another variable call the application factory to get an application object . < a class= '' action '' href= '' { { url_for ( 'blog.update ' , id=post [ 'id ' ] ) } } '' > Edit < /a > app.config.from_mapping ( '/auth/register ' , `` `` '' file with `` pip `` . # the name is available , store it in the database and go to 'password2 ' : password2 , `` MANIFEST.in `` to tell what this other data is . return render_template ( 'blog/update.html ' , post=post ) background : # CAECE9 ; if ( e.keyCode == 13 ) { instead . The button uses some JavaScript to show a confirmation dialog Log In The `` app.cli.command ( ) `` decorator registers a new command with the get_post ( id ) used instead of the instance configuration . This is so the tests < div class= '' twitbox '' > assert post [ 'title ' ] == 'updated ' [ bdist_wheel ] [ request.form [ 'username ' ] , request.form [ 'email ' ] , dive into the docs to keep learning . Flask uses ` Jinja ` _ , ` Click ` _ , INSERT INTO post ( title , body , author_id , created ) from yourapplication import app There will now be a `` flaskr.sqlite `` file in the `` instance `` folder in from flaskr import create_app count = db.execute ( 'SELECT COUNT ( id ) FROM post ' ) .fetchone ( ) [ 0 ] packages=find_packages ( ) , def register ( ) : return 'Hello , World ! ' A microblog example application written as Flask tutorial with top.sqlite_db.row_factory = sqlite3.Row layout.html follow_redirects=True ) # register the database commands Add the Python functions that will run these SQL commands to the # read in SQL for populating test data 'pytest ' , Import and call this function from the factory . Place the new code at │ │ ├── base.html < dt > Password : minitwit.init_db ( ) return view ( * * kwargs ) if whom_id is None : URL . assert 'Initialized ' in result.output Now that `` init-db `` has been registered with the app , it can be called This is being introduced late in the tutorial , but in your future Fill out a username and password and you 'll be redirected to the login < /nav > the rows to be treated as if they were dictionaries instead of tuples . background : # FAE4E4 ; cur = get_db ( ) .execute ( query , args ) THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND For now you will just write the view code . On the next page , you 'll margin-bottom : 1em ; background : # fafafa ; } using some type of version control for all your projects , no matter With the `` auth `` fixture , you can call `` auth.login ( ) `` in a test to tests_require= [ It is used in this example to execute a script on the database connection . ====================================== Using `` client `` in a `` with `` block allows accessing context variables collected 23 items email = username + ' @ example.com ' Since this is a different machine , you need to run `` init-db `` again to Binary files /dev/null and b/docs/_static/flaskr.png differ def public_timeline ( ) : def register_and_login ( client , username , password ) : < form action= '' { { url_for ( 'flaskr.add_entry ' ) } } '' method= '' post '' class= '' add-entry '' > generate_password_hash ( request.form [ 'password ' ] ) ] ) .. _tutorial-setup : coverage html Here 's what the `` register `` view function is doing : # test that the user was inserted into the database Static Files g.user = None assert b'Log Out ' in response.data tests/test_factory.py .. [ 100 % ] Redistribution and use in source and binary forms of the software as error = 'Password is required . ' < h1 > This is blueprint example < /h1 > if you wrote a view to show an individual post on a page , where the user : caption : `` setup.cfg `` ( title , body , g.user [ 'id ' ] ) special variable available inside ` Jinja for loops ` _ . It 's used to Instead of the `` sqlite3 `` command above , it 's a good idea to add a function * `` test_config `` can also be passed to the factory , and will be nav ul li a , nav ul li span , header .action { Pytest uses fixtures by matching their function names with the names } { % block content % } coverage report assert Recorder.called Connect to the Database < h1 > { % block title % } Register { % endblock % } < /h1 > : gh : ` example code < examples/tutorial > ` . configure the application and database for testing instead of using your cover all of Flask 's features . Check out the : ref : ` quickstart ` for an modify the session cookie , or anything else that uses the secret key . border : 1px solid # 6ECCC4 ; function . flash ( 'New entry was successfully posted ' ) 'INSERT INTO user ( username , password ) VALUES ( ? , ? ) ' , redirects to the login page otherwise . If a user is loaded the original return client `` `` '' Add two numbers server side , ridiculous but well ... '' '' '' .. _tutorial-dbinit : data= { 'username ' : username , 'password ' : password } # create our blueprint : ) { % for message in flashes % } text-shadow : 0 0 3px # 24776F ; with app.app_context ( ) : with `` ? `` placeholders for any user input , and a tuple of values * Format posts using Markdown . font-weight : normal ; directory with the same name as the blueprint . '/create ' , happen because of two reasons : either everything went well ( the error will display in the user 's browser . In Flask , Jinja is configured to Run The Application assert b'You were logged in ' in rv.data * Restarting with stat build-related commands . The `` bdist_wheel `` command will build a wheel * Test tools can isolate your test environment from your development Choose that key wisely and as hard to guess and complex as possible . 2 . When the user is logged in , they can add new entries to the page from flaskr.db import get_db , init_db : copyright : © 2010 by the Pallets team . def register_teardowns ( app ) : .. image : : flaskr_login.png A simple application that shows how Flask and jQuery get along . letter-spacing : 1px ; < input type= '' submit '' value= '' Save '' > the `` id `` so it knows what to fill in : : license : BSD , see LICENSE for more details . found , run , and hopefully pass . `` `` '' Displays the latest messages of all users . '' '' '' page . In addition , a message is flashed that informs the user that he or Continue to : doc : ` deploy ` . If you 're using version control , the following files that are generated { % if g.user % } return render_template ( 'login.html ' , error=error ) in as the `` test `` user . `` index.html `` file above . flask initdb posts = db.execute ( DROP TABLE IF EXISTS post ; ~ What is Flaskr ? cd examples/tutorial Templates are files that contain static data as well as placeholders if not hasattr ( g , 'sqlite_db ' ) : < input name= '' title '' id= '' title '' value= '' { { request.form [ 'title ' ] } } '' required > `` `` '' A test client for the app . '' '' '' creating a new file : file : ` setup.cfg ` . One benefit of running the tests While very simple , this example still features everything you need to get templates database . : : add_message ( client , 'the message by bar ' ) Now it is time to start working on the templates . As you may have DEBUG = True license_file = LICENSE Instead , use a production WSGI server . For example , to use ` Waitress ` _ , to `` /auth/register `` , it will call the `` register `` view and use module . Flask will then initialize the variable from that module . Note .. _HTML : https : //developer.mozilla.org/docs/Web/HTML password for security . < a href= '' { { url_for ( 'flaskr.login ' ) } } '' > log in < /a > ( id , ) response . * Currently , Python and Flask understand how to use the `` flaskr `` abort ( 404 ) rv = cur.fetchall ( ) such as : data : ` session ` after the response is returned . Normally , .. note : : div.page div.body { 'flask ' , : data : ` session ` and gets that user 's data from the database , storing it < dd > < input type=submit value=Share > top.sqlite_db.close ( ) return redirect ( url_for ( 'flaskr.show_entries ' ) ) db.executescript ( f.read ( ) .decode ( 'utf8 ' ) ) You 'll see output similar to this : elif not check_password_hash ( user [ 'password ' ] , password ) : out . application in the browser . Despite this , test coverage is an important Test import pkg_resources Exporting `` FLASK_ENV=development `` turns on all development features * Redistributions in binary form must reproduce the above copyright # . `` app = Flask ( __name__ , instance_relative_config=True ) `` creates the < ! doctype html > : copyright : © 2010 by the Pallets team . < li > < em > There 's no message so far. < /em > The `` runner `` fixture is similar to `` client `` . < h1 > MiniTwit < /h1 > { { message.text } } id INTEGER PRIMARY KEY AUTOINCREMENT , ============================== The next couple lines will create the actual application instance and .content label { font-weight : bold ; margin-bottom : 0.5em ; } < /header > db.execute ( 'insert into entries ( title , text ) values ( ? , ? ) ' , return redirect ( url_for ( 'timeline ' ) ) files . template_folder='templates ' ) response = client.post ( '/1/delete ' ) .. _tutorial-folders : graft flaskr/static : caption : `` tests/data.sql `` if user is None : destroyed ( torn down ) whenever the request finishes . A teardown can from flask import Flask mkdir flask-tutorial error = 'Incorrect username . ' < link rel=stylesheet type=text/css href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > def login ( client , username , password ) : from GitHub . `` Forbidden '' . ( `` 401 `` means `` Unauthorized '' , but you redirect to the instance/ '/1/update ' , : meth : ` db.execute < sqlite3.Connection.execute > ` takes a SQL query was posted you want to display that so the user can fix the error , so { % for entry in entries % } db = get_db ( ) ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF Application Setup < /ul > setuptools 39.0.1 password=password the others organized , the templates for a blueprint will be placed in a # . The user is queried first and stored in a variable for later use . def test_init_db_command ( runner , monkeypatch ) : var submit_form = function ( e ) { `` blog.index `` . Some of the authentication views referred to a plain include flaskr/schema.sql rv = client.get ( '/bar ' ) `` `` '' Clear the current session , including the stored user id . '' '' '' < dd > < input type= '' text '' name= '' username '' size= '' 30 '' value= '' { { request.form.username } } '' > color : slategray ; Curious about what these contexts mean ? Have a look at the cur = db.execute ( 'select title , text from entries order by id desc ' ) # . `` { % block header % } `` is similar to `` title `` but will change the See : ref : ` sqlite3 ` for more . color : # 105751 ; the code in one file . Python projects use * packages * to organize code response = client.get ( '/hello ' ) this functionality is fairly straight forward . There are also where message.author_id = user.user_id .. _Jinja for loops : http : //jinja.pocoo.org/docs/templates/ # for ) The pattern `` { { request.form [ 'title ' ] or post [ 'title ' ] } } `` is used to { % elif followed % } # clone the repository if not title : that schema . words , text = text [ : -1 ] .rsplit ( ' < ' , 1 ) def wrapped_view ( * * kwargs ) : Create the `` config.py `` file in the instance folder , which the factory directory should be treated as a package . ) : app.config.update ( pip install wheel : meth : ` open_resource ( ) < Flask.open_resource > ` opens a file relative to render_template , flash , current_app return g.db `` `` '' Test create_app without passing test config . '' '' '' base_url = 'https : //github.com/pallets/flask/tree/ ' your own tests for `` flaskr `` or have followed along with the examples div.page div.twitbox p { `` `` '' Create a new post for the current user . '' '' '' functions , or a logo image . They are all placed under the < /ul > db.commit ( ) : meth : ` app.test_client ( ) < Flask.test_client > ` with the application are displayed . : func : ` url_for ` is also automatically available , and is { % if error % } < p class=error > < strong > Error : < /strong > { { error } } { % endif % } Installing means you can import it no matter where you run from . align-items : center ; app.add_role ( 'gh ' , github_link ) < h1 > Flaskr < /h1 > # current user ca n't modify other user 's post provided by Werkzeug for convenience , but is not designed to be def init_db ( ) : < dt > Text : This creates a : class : ` Blueprint ` named `` 'auth ' `` . Like the application border-bottom : 1px solid lightgray ; def init_db ( ) : if email is None : { % extends `` layout.html '' % } with current_app.open_resource ( 'schema.sql ' ) as f : Then `` load_logged_in_user `` wo n't load a user on subsequent requests . except OSError : .. _tutorial-views : from . import db : align : center key is not in there . This is helpful because now it is not necessary to def register ( ) : < section class= '' content '' > def register ( ) : return redirect ( url_for ( 'show_entries ' ) ) .. image : : flaskr_edit.png < dt > Text : < div class= '' about '' > by { { post [ 'username ' ] } } on { { post [ 'created ' ] .strftime ( ' % Y- % m- % d ' ) } } < /div > : file : ` schema.sql ` file you created in the previous step , this file should be < a class= '' unfollow '' href= '' { { url_for ( 'unfollow_user ' , username=profile_user.username ) DROP TABLE IF EXISTS post ; rv = login ( client , 'user1 ' , 'wrongpassword ' ) return view ( * * kwargs ) from werkzeug.security import check_password_hash , generate_password_hash cd flask the request . The connection is stored and reused instead of creating a { % block header % } abort ( 403 ) { % if not loop.last % } Step 3 : Installing flaskr as a Package h2 { font-size : 1.2em ; } background : # E3EBEA ; information . elif request.form [ 'password ' ] ! = current_app.config [ 'PASSWORD ' ] : } database . try : Go to http : //127.0.0.1/auth/login and the page should look like the .. _example source : https : //github.com/pallets/flask/tree/master/examples/flaskr/ dist/ Some rights reserved . .add-entry dl { font-weight : bold ; } Continue with : ref : ` tutorial-testing ` . : alt : screenshot of index page `` `` '' Logs the user out . '' '' '' for an application of this size . For larger applications , however , < h1 > { % block title % } Posts { % endblock % } < /h1 > { % block header % } hr { border : none ; border-top : 1px solid lightgray ; } requested . `` load_logged_in_user `` checks if a user id is stored in the │ ├── test_factory.py < /dl > author of a post to edit or delete it . views import pytest * ~ db.commit ( ) if request.method == 'POST ' : def test_update ( client , auth , app ) : id integer primary key autoincrement , ' VALUES ( ? , ? , ? ) ' , Flask to call that function when cleaning up after returning the For Linux and Mac : `` close_db `` checks if a connection was created by checking if `` g.db `` def initdb_command ( ) : HTTP method : name='flaskr ' , consisting of a text-only title and some HTML for the text . This HTML ======================= { { url_for ( 'static ' , filename='style.css ' ) } } int ( time.time ( ) ) ) ) < a class= '' action '' href= '' { { url_for ( 'blog.create ' ) } } '' > New < /a > post = get_post ( id ) Do this on Mac or Linux with the following commands in `` flaskr/ `` : : < textarea name= '' body '' id= '' body '' > { { request.form [ 'body ' ] or post [ 'body ' ] } } < /textarea > error = 'You have to enter a password ' import functools again . Instead of the browser showing an error , the page will reload and the beginning of the tutorial . It returns `` Hello , World ! `` , so the test # load the test config if passed in [ metadata ] Continue with : ref : ` tutorial-templates ` . < dd > < textarea name=text rows=5 cols=40 > < /textarea > border-top : 1px solid # ccc ; app.config [ 'PASSWORD ' ] + ' x ' ) Lastly , add a method that allows for easy connections to the specified factory earlier in the tutorial has the name `` 'hello ' `` and can be g.sqlite_db = connect_db ( ) Writing unit tests for your application lets you check that the code .post > header h1 { Create the follwing three HTML files and place them in the $ ( ' # result ' ) .text ( data.result ) ; A user must be logged in to access the `` create `` , `` update `` , and The authentication blueprint will have views to register new users and linked to with `` url_for ( 'hello ' ) `` . If it took an argument , which error = 'You have to enter a valid email address ' Have fun and make awesome applications ! @ bp.route ( '/ ' ) used to generate URLs to views instead of writing them out manually . 3 . The index page shows all entries so far in reverse chronological order ( 'test title ' , 'test ' || x'0a ' || 'body ' , 1 , '2018-01-01 00:00:00 ' ) ; .. _Waitress : https : //docs.pylonsproject.org/projects/waitress/ following the ` Python Packaging Guide ` _ . Presently this involves .content { [ coverage : run ] their own documentation too . You 'll also be interested in * A detail view to show a single post . Click a post 's title to go to You 'll also need to set `` FLASK_APP `` and `` FLASK_ENV `` as shown on : caption : `` tests/test_auth.py `` ` logged_in ` key for the session . If the user logged in successfully , that ' FROM post p JOIN user u ON p.author_id = u.id ' app.register_blueprint ( mod.bp ) the application factory . author_id INTEGER NOT NULL , def get_db ( ) : while running your project should be ignored . There may be other files auth.logout ( ) assert create_app ( { 'TESTING ' : True } ) .testing make some tasks simpler . < dd > < input type=submit value=Login > incorrect password . If you log in you 'll get an error because there 's assert b'test message 1 ' in rv.data def close_db ( e=None ) : THIS SOFTWARE AND DOCUMENTATION , EVEN IF ADVISED OF THE POSSIBILITY OF escaped with their XML equivalents . Blueprints and Views directory as : : for this example flash ( 'You were logged in ' ) < h1 > { % block title % } Log In { % endblock % } < /h1 > there was an validation error , an HTML page with the registration Continue to : doc : ` templates ` . Continue to : doc : ` next ` . is located outside the `` flaskr `` package and can hold local : meth : ` ~sqlite3.Cursor.fetchone ` returns one row from the query . you 're reading . * * You probably want the latest tagged version , but the { % elif request.endpoint == 'user_timeline ' % } 'pytest ' , # current user does n't see edit link < div class= '' metanav '' > user . You can read : ref : ` cli ` to learn more about writing commands . { % endblock % } { % if not session.logged_in % } title TEXT NOT NULL , one of the popular NoSQL databases if your data is more suited for those . a template . Jinja2 will ensure that special characters such as `` < `` or `` > `` are .. _ItsDangerous : https : //palletsprojects.com/p/itsdangerous/ assert response.data == b'Hello , World ! ' assert b'by test on 2018-01-01 ' in response.data an argument , `` id `` . That corresponds to the `` < int : id > `` in the route . packages= [ 'flaskr ' ] , * endpoint * , and by default it 's the same as the name of the view └── MANIFEST.in the tutorial . Go back and review the tutorial and compare your code with { % with flashes = get_flashed_messages ( ) % } `` `` '' Records a message '' '' '' redirect back to the ` show_entries ` page : : changes , your code structure should be : : def test_empty_db ( client ) : already established connection : : flask init-db < div class= '' navigation '' > : caption : `` flaskr/templates/blog/update.html `` assert 'user_id ' not in session graft tests source code without having to reinstall the Flask app each time you make drop table if exists follower ; font-weight : bold ; you use string formatting to build SQL statements . file name is the name of the project , the version , and some tags about .flash { def login ( self , username='test ' , password='test ' ) : one=True ) is not None `` UPDATE `` query instead of an `` INSERT `` . With some clever refactoring , it in * editable * or * development * mode . Editable mode means that as you ( 'other ' , 'pbkdf2 : sha256:50000 $ kJPKsz6N $ d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79 ' ) ; app = Flask ( 'yourapplication ' ) def fake_init_db ( ) : interface ( CLI ) . < input type= '' text '' size= '' 5 '' name= '' a '' > session.clear ( ) checks that the response data matches . with the client . Rather than writing that out every time , you can write assert 'closed ' in str ( e ) # app.route , while giving the blog blueprint a url_prefix , but for from flask import Flask also requires that you provide the path to the database , which can introduce background : # DEE9E8 ; return wrapped_view include minitwit/schema.sql def get_db ( ) : You 'll use the same techniques you learned about when writing the < /div > webkit-border-radius : 5px ; return app.test_cli_runner ( ) $ ( 'input [ name=a ] ' ) .focus ( ) ; < /script > assert client.get ( '/create ' ) .status_code == 200 CREATE TABLE post ( The `` check_author `` argument is defined so that the function can be Both the `` update `` and `` delete `` views will need to fetch a `` post `` from flask import current_app , g : file : ` flaskr/__init__.py ` containing only the following import statement : : # ensure the instance folder exists < div class=metanav > div.page div.followstatus { input [ type=submit ] { request , converting the `` data `` dict into form data . input [ type= '' text '' ] , `` `` '' class Recorder ( object ) : # make url_for ( 'index ' ) == url_for ( 'blog.index ' ) < li > < a href= '' { { url_for ( 'auth.register ' ) } } '' > Register < /a > TOTAL 153 0 44 0 100 % < dt > Password < small > ( repeat ) < /small > : db = get_db ( ) < ul class= '' entries '' > < div class=flash > { { message } } < /div > testing def index ( ) : flash ( error ) def add_message ( client , text ) : ' ORDER BY created DESC ' Adding tests to flaskr Now that the database connections are working , you can start writing the input [ type=submit ] { align-self : start ; min-width : 10em ; } flex-direction : column ; is passed as the second argument . The `` url_prefix `` will be prepended : class : ` Flask ` instance . from flaskr.blueprints.flaskr import init_db `` `` '' Format a timestamp for display . '' '' '' < h1 > { { post [ 'title ' ] } } < /h1 > div.page h2 { .content > header h1 { flex : auto ; margin : 1rem 0 0.25rem 0 ; } click.echo ( 'Initialized the database . ' ) def test_create ( client , auth , app ) : distribution file . The current standard for Python distribution is the @ bp.route ( '/logout ' ) h1 { border-bottom : 2px solid # eee ; } you could use one view and template for both actions , but for the pass python -c 'import os ; print ( os.urandom ( 16 ) ) ' app = Flask ( __name__ , instance_relative_config=True ) return [ node ] , [ ] 3. instruct flask to use the right application branch = True Use `` pip `` to install your project in the virtual environment . .. _git : https : //git-scm.com/ graft flaskr/templates `` connect_db `` function ( following the tutorial line-by-line ) . ) Create a virtualenv and activate it : : The `` close_db `` and `` init_db_command `` functions need to be registered Testing + setuptools .post > header h1 { font-size : 1.5em ; margin-bottom : 0 ; } g.db.row_factory = sqlite3.Row .coverage layout : data : ` g ` is a special object that is unique for each request . It is os.makedirs ( app.instance_path ) rv = register ( client , 'meh ' , 'foo ' , email='broken ' ) yield app def test_config ( ) : def test_exists_required ( client , auth , path ) : color : # 333 ; Step 2 : Application Setup Code : gh : ` example code < examples/tutorial/flaskr/static/style.css > ` . id integer primary key autoincrement , include LICENSE graft flaskr/static the `` flaskr `` package . Recorder.called = True return redirect ( url_for ( 'user_timeline ' , username=username ) ) Werkzeug 0.14.1 available to other views . create table follower ( app.config.from_envvar ( 'FLASKR_SETTINGS ' , silent=True ) min-height : 12em ; : func : ` url_for ` generates the URL for the login view based on its In this step , you will create the database schema . Only a single table is This template extends the : file : ` layout.html ` template from above to display the .. admonition : : Database Path } ) if __name__ == '__main__ ' : With that out of the way , you should be able to start up the application . factory ( ' a ' , `` , b'Password is required . ' ) , Show Entries response = auth.login ( username , password ) < p > < a href= # id= '' calculate '' > calculate server side < /a > < dd > < input type= '' submit '' value= '' Share '' > / MiniTwit / < label for= '' title '' > Title < /label > rv = client.get ( '/ ' ) see the tests pass . < dd > < input type= '' password '' name= '' password '' > still want to validate the data in the Flask view . It 's important to user_id integer primary key autoincrement , < label for= '' username '' > Username < /label > you use a new terminal , remember to change to your project directory app.config [ 'PASSWORD ' ] ) < /header > a : hover { One way to handle testing is to integrate it with `` setuptools `` . Here assert 'closed ' in str ( e ) return rv self._client = client '/auth/login ' , : ref : ` instance-folders ` instead . tutorial you will see exactly how to extend the `` flask `` command line @ bp.route ( '/login ' , methods= [ 'GET ' , 'POST ' ] ) def register_blueprints ( app ) : `` { % block header % } `` . This will set the title block and then output other code . Rather than registering views and other code directly with MiniTwit Tests assert b'test\nbody ' in response.data │ └── style.css creating two new files ; : file : ` setup.py ` and : file : ` MANIFEST.in ` in the The : data : ` SECRET_KEY ` is needed to keep the client-side sessions secure . app = create_app ( { db.cursor ( ) .executescript ( f.read ( ) ) application . However , since you 're using a factory function , that < li > < span > { { g.user [ 'username ' ] } } < /span > < h1 > { % block title % } New Post { % endblock % } < /h1 > `` `` '' Creates the database tables . '' '' '' username = ? ' '' , [ request.form [ 'username ' ] ] , one=True ) assert client.post ( '/1/update ' ) .status_code == 403 : alt : screenshot of the final application returned value to the test function . `` venv/var/flaskr-instance `` instead . @ app.teardown_appcontext padding : 1em ; for dynamic data . A template is rendered with specific data to produce a def show_entries ( ) : It 's assumed that you 're already familiar with Python . The ` official ==================== At this point you can run the tests . Here `` pytest `` will be used . The `` create `` and `` update `` views look very similar . The main if not username : < label for= '' username '' > Username < /label > minitwit.db ` connect_db ` , but by itself , it is not particularly useful . Creating and Running the Tests For most of the views , a user needs to be logged in . The easiest way to { % if request.endpoint == 'user_timeline ' % } setup ( options=None , content=None tests/test_blog.py ............ [ 86 % ] padding : 4px ; The : func : ` url_for ` function generates the URL to a view based on a name out the : ref : ` quickstart ` for an overview of what Flask can do , then created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP , export FLASK_APP= '' flaskr.factory : create_app ( ) '' export FLASK_ENV=development install_requires= [ error = 'The username is already taken ' safe . It 's set to `` 'dev ' `` to provide a convenient value div.page div.navigation a { return render_template ( 'show_entries.html ' , entries=entries ) h1 , h2 , h3 , h4 , h5 , h6 { class AuthActions ( object ) : see the application working before getting into the rest of the returned from the cursor look a bit like dictionaries because we are using app = inliner.document.settings.env.app : attr : ` ~Response.headers ` will have a `` Location `` header with the login [ username ] , one=True ) # . When the user initially navigates to `` auth/register `` , or `` runner `` fixture you wrote above is used to call the `` init-db `` session . The data is stored in a * cookie * that is sent to the Testing `` logout `` is the opposite of `` login `` . : data : ` session ` should and command , is just below the `` connect_db `` function in : file : ` flaskr.py ` : : os.unlink ( db_path ) { % endfor % } setup you can access it using this URLs : def init_db ( ) : < dd > < textarea name= '' text '' rows= '' 5 '' cols= '' 40 '' > < /textarea > your project the same as installing any other library , so you 're using source code from : gh : ` the examples < examples/tutorial > ` . `` index `` view . When not logged in , each page shows links to log in or { % block body % } { % endblock % } CREATE TABLE user ( .. sourcecode : : css In web applications this connection is typically tied to the request . It * Running on http : //127.0.0.1:5000/ ( Press CTRL+C to quit ) password = request.form [ 'password ' ] `` `` '' Register a new user . assert b '' Register '' in response.data but first , you should get the database working . { % endblock % } else : username text not null , ) .fetchone ( ) deploy { % for message in messages % } overridden so it points to this temporary path instead of the instance response = client.post ( will be returned . form should be shown . : func : ` render_template ` will render a template When validation succeeds , the user 's `` id `` is stored in a new username=username , associates the endpoint name `` 'index ' `` with the `` / `` url so that `` `` '' Make sure login and logout works '' '' '' requests try to write to the database at the same time , they will slow needs to be called afterwards to save the changes . `` TemplateNotFound `` error . That 's because the views are calling return AuthActions ( client ) create table entries ( def format_datetime ( timestamp ) : assert count == 2 pip 9.0.3 as well as the schema . : file : ` templates ` folder : `` `` '' Registers the user . '' '' '' Now , in a terminal , from the application root directory : file : ` flaskr/ ` it is { % extends 'base.html ' % } a { color : # 377ba8 ; } < form method= '' post '' > directories , and the `` schema.sql `` file , but to exclude all bytecode r = client.get ( '/ ' ) When running publicly rather than in development , you should not use the universal = False `` tests/conftest.py `` file contains setup functions called * fixtures * expected , it 's probably not a bad idea to add automated tests to simplify new developers encounter , and it creates a project that 's easy to expand `` export FLASK_APP=flaskr.flaskr `` . of arguments in the test functions . For example , the `` test_hello `` based on the editor you use . In general , ignore files that you did n't `` `` '' A test runner for the app 's Click commands . '' '' '' by start and end tags rather than indentation since static text within set FLASK_ENV=development Drop any existing data and create empty tables . client.post ( '/1/update ' , data= { 'title ' : 'updated ' , 'body ' : `` } ) : attr : ` app.instance_path < Flask.instance_path > ` exists . Flask # change the post author to another user This is one possible way to run and manage testing . Here `` pytest `` is a : $ ( 'input [ name= '' a '' ] ' ) .val ( ) , the tutorial or as a new Python user , including : return redirect ( url_for ( 'login ' ) ) repository < examples/tutorial > ` , if you want to compare your project resize : vertical ; register . When logged in , there 's a link to log out . pip install -e examples/minitwit -q < article class= '' post '' > │ │ │ ├── login.html { % extends `` layout.html '' % } app.config.from_envvar ( 'MINITWIT_SETTINGS ' , silent=True ) padding : 5px 10px ; Initialized the database . < title > { % block title % } Welcome { % endblock % } | MiniTwit < /title > if post is None : border-top : 1px solid lightgray ; return self._client.get ( '/auth/logout ' ) < title > jQuery Example < /title > makes the following code work , even if there is no `` 'logged_in ' `` key in With that said , from the `` flaskr/ `` directory , go ahead and install the venv/ assert b '' Register '' in response.data database right next to it . db_fd , db_path = tempfile.mkstemp ( ) sqlite3 /tmp/flaskr.db < schema.sql g.sqlite_db = connect_db ( ) * SQL injection attack * . `` init_db `` function with one that records that it 's been called . The @ app.route ( '/_add_numbers ' ) background : lightgray ; < h1 > Flaskr < /h1 > py -3 -m venv venv needs to know where it 's located to set up some paths , and Index test=pytest else : │ ├── test_db.py `` `` '' Register all blueprint modules different due to the step-by-step nature of the tutorial . you change a static file , refresh the browser page . If the change { % for message in get_flashed_messages ( ) % } '/2/delete ' , < div class= '' flash '' > { { message } } < /div > def connect_db ( ) : how to run `` flaskr `` later on in this tutorial . However , as a project get bigger , it becomes overwhelming to keep all `` `` '' Create and configure an instance of the Flask application . '' '' '' with pytest.raises ( sqlite3.ProgrammingError ) as e : list-style : none ; different body . Instead of writing the entire HTML structure in each SQLite is convenient because it does n't require setting up a separate The : class : ` ~flask.session ` dict is available in the template as well and automatically so you do n't have to type them out . To include other < ul class=entries > name='flaskr ' , # create a temporary file to isolate the database for each test .post > header > div : first-of-type { flex : auto ; } terminal , tell Flask where to find your application , then run it in `` `` '' Opens a new database connection if there is none yet for the $ env : FLASK_APP = `` flaskr '' response = client.post ( def load_logged_in_user ( ) : from flask import Blueprint , request , session , g , redirect , url_for , abort , \ def test_hello ( client ) : she was logged in successfully . If an error occurred , the template is return render_template ( 'blog/index.html ' , posts=posts ) return jsonify ( result=a + b ) def logout ( ) : # add some filters to jinja assert message in response.data Require Authentication in Other Views assert b'the message by bar ' not in rv.data * Tags . Clicking a tag shows all the posts with that tag . │ ├── test_auth.py current application context . You currently have a function for establishing a database connection with that it 's safe to render user input ; any characters they 've entered that encapsulate a transaction , you will need to make sure that only one db = get_db ( ) Here are the import statements ( in : file : ` flaskr.py ` ) : : return app will read from if it exists . Copy the generated value into it . flaskr/__init__.py 21 0 2 0 100 % < title > Flaskr < /title > The tests for the `` login `` view are very similar to those for * .pyc request . example of how to perform unit testing in the : ref : ` testing ` section of the On that cursor , there is a method to execute a complete script . Finally , you noticed , if you make requests with the app running , you will get /templates In order to install and run the application you need to issue the following db = g.pop ( 'db ' , None ) app.config.from_mapping ( test_config ) < h2 > Sign In < /h2 > @ simple_page.route ( '/ ' , defaults= { 'page ' : 'index ' } ) assert client.get ( '/auth/register ' ) .status_code == 200 return redirect ( url_for ( 'show_entries ' ) ) or if they are using something besides a browser to make requests , you username = request.form [ 'username ' ] return wrapped_view ' @ ' not in request.form [ 'email ' ] : .entries li h2 { margin-left : -1em ; } python setup.py bdist_wheel this . : : app.config.from_pyfile ( 'config.py ' , silent=True ) A sqlite powered thumble blog application is registered with the application when it is available in the factory Continue to : doc : ` install ` . .metanav { text-align : right ; font-size : 0.8em ; padding : 0.3em ; for name in find_modules ( 'flaskr.blueprints ' ) : Copyright © 2010 by the Pallets team . : data : ` current_app ` is another special object that points to the Flask if user_id is None : that with the `` client `` fixture function , calls it , and passes the environment key is set . return client.post ( '/login ' , data=dict ( ' VALUES ( ? , ? , ? ) ' , ' ORDER BY created DESC ' .idea/ if request.form [ 'username ' ] ! = app.config [ 'USERNAME ' ] : with valid form data , it should redirect to the login URL and the user 's validating form data easier and more powerful . function . def test_author_required ( app , client , auth ) : * `` __name__ `` is the name of the current Python module . The app r = client.get ( '/pages/hello ' ) . venv/bin/activate # create and configure the app { % block title % } Sign Up { % endblock % } if not request.form [ 'username ' ] : elif not password : `` `` '' View decorator that redirects anonymous users to the login page . '' '' '' db = g.pop ( 'db ' , None ) response = client.post ( '/1/delete ' ) drop table if exists entries ; < div class= '' page '' > from datetime import datetime This part of the tutorial assumes you have a server that you want to The `` delete `` view should redirect to the index URL and the post should get_post ( id ) def github_link ( yield app def add_entry ( ) : .add-entry dl { font-weight : bold ; } created before you can store and retrieve data . Flaskr will store users < form action= '' { { url_for ( 'blog.delete ' , id=post [ 'id ' ] ) } } '' method= '' post '' > * Serving Flask app `` flaskr '' < input class= '' danger '' type= '' submit '' value= '' Delete '' onclick= '' return confirm ( 'Are you sure ? ' ) ; '' > responds to `` POST `` requests ; the actual form is shown on the { % for message in get_flashed_messages ( ) % } available to users of the application via HTTP . This is the place where CSS and def show ( page ) : with the SQL commands needed to create empty tables : You should test as much of your code as possible . Code in functions only r = client.get ( '/pages/world ' ) Run with coverage report : : @ app.route ( '/add_message ' , methods= [ 'POST ' ] ) font-family : sans-serif ; .. hint : : Where do I put this code ? .. _coverage : https : //coverage.readthedocs.io/ error = 'Invalid password ' from flask import current_app , g response = client.get ( '/hello ' ) drop table if exists entries ; def test_timelines ( client ) : in with the : func : ` ~flask.render_template ` function . Notice that the form is testpaths = tests * `` tests/ `` , a directory containing test modules . width : 700px ; post = get_db ( ) .execute ( the default configuration with values taken from the `` config.py `` .. _virtualenv : https : //virtualenv.pypa.io 5. now you can run minitwit : display : flex ; possible to create a database with the : command : ` flask ` script : : relational databases at once and more . You might also want to consider response = client.post ( path , data= { 'title ' : `` , 'body ' : `` } ) ===================== var $ SCRIPT_ROOT = { { request.script_root|tojson|safe } } ; You added the `` hello `` route as an example when writing the factory at rootdir : /home/user/Projects/flask-tutorial , inifile : setup.cfg CREATE TABLE post ( if g.user is None : servers and deployment options that you may choose for your project . rv = client.post ( '/add_message ' , data= { 'text ' : text } , by `` id `` and check if the author matches the logged in user . To avoid 'DATABASE ' : db_path , If you are outside of the project directory make sure to provide the exact file to make the : file : ` flaskr/flaskr ` directory a package . After these 'username ' : username , that in all cases , only variable names that are uppercase are considered . graft minitwit/templates < li > < a href= '' { { url_for ( 'auth.logout ' ) } } '' > Log Out < /a > view at `` /create `` , and so on . The blog is the main feature of Flaskr , if g.user is None : global-exclude * .pyc code . You can leave it running and just reload the browser page as you DEBUG=True , .. _tutorial-introduction : You 'll find ` the full src for this example here ` _ . error = 'You have to enter a username ' assert b'href= '' /1/update '' ' in response.data does n't matter because they 're not modifying the post . `` POST `` request , `` create `` should insert the new post data into the r = client.get ( '/world ' ) location ( the : file : ` flaskr/flaskr ` folder ) and allows you to read from it . notified about that , and the user is asked again : : div.error { return redirect ( url_for ( 'blog.index ' ) ) assert client.post ( path ) .status_code == 404 assert session [ 'user_id ' ] == 1 align-items : flex-end ; with app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : the file object and the path to it . The `` DATABASE `` path is : doc : ` /deploying/index ` for a list of many different ways to host your < h1 > { % block title % } Edit `` { { post [ 'title ' ] } } '' { % endblock % } < /h1 > ( except for one line in `` __init__.py `` , and any testing or optional files you { % block title % } is not sanitized because we trust the user here . from werkzeug.exceptions import abort When a user is logged in , the `` header `` block adds a link to the { % endif % } < div > flaskr < dd > < input type=text name=username > Python comes with built-in support for SQLite in the : mod : ` sqlite3 ` app.config.from_envvar ( 'FLASKR_SETTINGS ' , silent=True ) os.close ( db_fd ) response = auth.login ( ) ( ' a ' , 'test ' , b'Incorrect username . ' ) , │ ├── __init__.py include_package_data=True , import sqlite3 config = { @ app.route ( '/ ' ) < dt > Title : yourapplication.views { % block title % } Sign In { % endblock % } g.db = sqlite3.connect ( if g.user : folders The `` client `` fixture calls A useful pattern to manage a Flask application is to install your app source = rv = register ( client , 'meh ' , ' x ' , ' y ' ) elif not request.form [ 'email ' ] or \ .. _language : https : //sqlite.org/lang.html directly . Instead , configuration file . Flask allows you to import multiple configurations and it from sphinx.application import Sphinx : ref : ` externally visible server < public-server > ` section for more There 's a lot more to Flask than what you 've seen so far . Even so , # . : attr : ` request.form < Request.form > ` is a special type of assert b'You are now following & # 34 ; foo & # 34 ; ' in rv.data SQLite3 will be used directly for this application because it 's good enough : meth : ` app.cli.add_command ( ) < click.Group.add_command > ` adds a new except TemplateNotFound : So when do you put it on there ? To do that you can make a helper waitress-serve -- call 'flaskr : create_app ' `` `` '' Create and configure a new app instance for each test . '' '' '' ) create an application context which is bound to the right application . order by message.pub_date desc limit ? ' '' , This is the login template , which basically just displays a form to allow def test_config ( ) : is recommended to install your Flask application within a ` virtualenv ` _ . Blueprint example page instance is n't available when writing the functions . Instead , write a rv = login ( client , 'user2 ' , 'wrongpassword ' ) .post .about { color : slategray ; font-style : italic ; } run `` pytest -v `` to get a list of each test function rather than dots . Name Stmts Miss Branch BrPart Cover to the `` flaskr/static `` directory and serves it . The `` base.html `` .. _Fork : https : //github.com/pallets/flask/pull/2305 # fork-destination-box import datetime to replace the placeholders with . The database library will take drop table if exists user ; font-size : 1em ; application . Just create a stylesheet called : file : ` style.css ` in the handling a request , so : data : ` current_app ` can be used . * : data : ` SECRET_KEY ` is used by Flask and extensions to keep data client.get ( '/ ' ) flash ( error ) `` `` '' Delete a post . { % for post in posts % } template and return the rendered one : : ] , 'INSERT INTO user ( username , password ) VALUES ( ? , ? ) ' , Create a project directory and enter it : module . ========================== abort ( 401 ) { % if request.endpoint == 'public_timeline ' % } built-in development server ( `` flask run `` ) . The development server is Logout https : //github.com/pallets/flask/tree/master/examples/flaskr/ choose what data appears in the form . When the form has n't been create table entries ( data that should n't be committed to version control , such as `` sqlite3 `` command as follows : : with io.open ( 'README.rst ' , 'rt ' , encoding='utf8 ' ) as f : elif get_user_id ( request.form [ 'username ' ] ) is not None : static/ called = False @ app.route ( '/ ' ) from flask import Flask , request , session , url_for , redirect , \ _data_sql = f.read ( ) .decode ( 'utf8 ' ) .coverage pytest import datetime div.page ul.messages li img { factory so that it is called after each request . SECRET_KEY = b'_5 # y2L '' F4Q8z\n\xec ] / ' def client ( app ) : create table user ( object created by the `` app `` fixture . Tests will use the client to make g.user = get_db ( ) .execute ( python3 -m venv venv from docutils.nodes import reference called Flaskr . Users will be able to register , log in , create posts , the return value as the response . configuration files are relative to the < li > < a href= '' { { url_for ( 'auth.logout ' ) } } '' > Log Out < /a > larger < larger-applications > ` , it 's a good idea not to . Flask 1.0 command that can be called with the `` flask `` command . To run the tests , use the `` pytest `` command . It will find and run all < dd > < input type= '' text '' name= '' username '' > This tutorial will walk you through creating a basic blog application │ ├── db.py posts = db.execute ( yet , and wo n't until you initialize the database later . new code at the end of the factory function before returning the app . to distinguish Jinja syntax from the static data in the template . will delete the key from the dictionary if present or do nothing when that queries and operations are performed using the connection , which is def test_login ( client , auth ) : from werkzeug.utils import find_modules , import_string return top.sqlite_db `` update `` and `` delete `` should return `` 404 Not Found `` . you to change the URL later without changing all code that links to def test_register ( client , app ) : `` test_ `` , and each test function in those modules also starts with def test_register_validate_input ( client , username , password , message ) : flaskr/db.py 24 0 4 0 100 % the application . try : def query_db ( query , args= ( ) , one=False ) : return ( rv [ 0 ] if rv else None ) if one else rv directly into the module . However , a cleaner solution is to create a separate 'flask ' , 100 % coverage does n't guarantee that your application does n't have bugs . messages as well as all the messages of followed users . with app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : Flaskr < script type= '' text/javascript '' > name='minitwit ' , if check_author and post [ 'author_id ' ] ! = g.user [ 'id ' ] : def add_message ( ) : yield client os.close ( db_fd ) If you get an exception later on stating that a table can not be found , check .. _install-activate-env : def init_db_command ( ) : that will display them . Login return render_template ( 'blog/update.html ' , post=post ) │ │ │ └── register.html system . This tutorial uses plain text passwords for simplicity . If you return redirect ( url_for ( 'auth.login ' ) ) created because your project will create the SQLite database file '/auth/register ' , data= { 'username ' : ' a ' , 'password ' : ' a ' } < article class= '' post '' > If you want to keep developing your Flaskr project , here are some ideas mod = import_string ( name ) Step 5 : Creating The Database that should be included in your package ( in the : file : ` MANIFEST.in ` ) . assert b'No entries here so far ' in rv.data graft minitwit/static values ( ? , ? , ? ) ' '' , ( session [ 'user_id ' ] , request.form [ 'text ' ] , dbinit client.post ( '/create ' , data= { 'title ' : 'created ' , 'body ' : `` } ) NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF < li > < h2 > { { entry.title } } < /h2 > { { entry.text|safe } } < /li > from setuptools import setup , find_packages Usually , it is a good idea to load a separate , environment-specific with open ( os.path.join ( os.path.dirname ( __file__ ) , 'data.sql ' ) , 'rb ' ) as f : if db is not None : return app def test_update ( client , auth , app ) : that , Flask provides us with the : meth : ` ~flask.Flask.teardown_appcontext ` assert g.user [ 'username ' ] == 'test ' { % if g.user % } return redirect ( url_for ( 'index ' ) ) Run the `` init-db `` command : < dd > < input type=password name=password > Continue to : doc : ` blog ` . the error from : func : ` flash ` in the view will be shown . containing the HTML , which you 'll write in the next step of the Configure the Secret Key # store the user id in a new session and return to the index from flask import Flask , g statement like `` if `` and `` for `` . Unlike Python , blocks are denoted from flask import ( Flask , request , session , g , redirect , url_for , abort , db.execute ( 'insert into entries ( title , text ) values ( ? , ? ) ' , def test_login_required ( client , path ) : some internal behavior so it 's easier to test , and other extensions can assert response.headers [ 'Location ' ] == 'http : //localhost/ ' .content > header h1 { rv = register_and_login ( client , 'user1 ' , 'default ' ) border : 1px solid # 377ba8 ; < li > < em > Unbelievable . No entries here so far < /em > < /li > free to choose your own less Web-2.0-ish name ; ) Essentially , it will do the assert b'The username is already taken ' in rv.data import pkg_resources def before_request ( ) : abort ( 404 , `` Post id { 0 } does n't exist . `` .format ( id ) ) Anything between `` { { `` and `` } } `` is an expression that will be output from flaskr.factory import create_app ( `` , `` , b'Username is required . ' ) , } ; # create the app with common test config a user is logged in their information should be loaded and made @ app.route ( '/logout ' ) `` packages `` tells Python what package directories ( and the Python files return post return render_template ( 'register.html ' , error=error ) def create ( ) : 1 . Let the user sign in and out with credentials specified in the if password2 is None : < div class= '' actions '' > < input type= '' submit '' value= '' Sign In '' > < /div > $ ( 'input [ name=a ] ' ) .focus ( ) .select ( ) ; app.config.from_object ( __name__ ) static import time db.executescript ( f.read ( ) .decode ( 'utf8 ' ) ) .. _official tutorial : https : //docs.python.org/3/tutorial/ : caption : `` flaskr/auth.py `` Flask development server needs the location of the app instance . This < ! doctype html > register_cli ( app ) 'TESTING ' : True , < h1 > jQuery Example < /h1 > assert message in response.data writing the blog views . class Recorder ( object ) : : func : ` flash ` in the views to show error messages , and this is the code generating the same `` / `` URL either way . < label for= '' title '' > Title < /label > username TEXT UNIQUE NOT NULL , This import statement brings the application instance into the top-level of the application package . When it is time to run the application , the : func : ` sqlite3.connect ` establishes a connection to the file pointed at from . import auth Also you can register the same blueprint under another path /static Be sure to use question marks when building SQL statements , as done in the # test that viewing the page renders without template errors < input name= '' username '' id= '' username '' required > following things : Jinja you can access missing attributes and items of objects / dicts which if 'user_id ' not in session : Validates that the username is not already taken . Hashes the This schema consists of a single table called `` entries `` . Each row in < /form > of the dict and pass a second parameter to it ( the default ) , the method tool to use during development . 'flask ' , new connection if `` get_db `` is called a second time in the same distribution file and install it , but wo n't go into specifics about Besides CSS , other types of static files might be files with JavaScript def unfollow_user ( username ) : moz-border-radius : 5px ; `` url_for ( 'static ' , filename= ' ... ' ) `` . font-size : 0.85em ; padding : 5px ; def index ( ) : pointing to a configuration file . and the database connection is released . │ │ ├── index.html install_requires= [ flaskr/blog.py 54 0 16 0 100 % You can either view a simple coverage report in the terminal :","['CONTRIBUTING.rst', 'docs/_static/flaskr.png', 'docs/conf.py', 'docs/installation.rst', 'docs/patterns/jquery.rst', 'docs/patterns/packages.rst', 'docs/testing.rst', 'docs/tutorial/blog.rst', 'docs/tutorial/css.rst', 'docs/tutorial/database.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/dbinit.rst', 'docs/tutorial/deploy.rst', 'docs/tutorial/factory.rst', 'docs/tutorial/flaskr_edit.png', 'docs/tutorial/flaskr_index.png', 'docs/tutorial/flaskr_login.png', 'docs/tutorial/folders.rst', 'docs/tutorial/index.rst', 'docs/tutorial/install.rst', 'docs/tutorial/introduction.rst', 'docs/tutorial/layout.rst', 'docs/tutorial/next.rst', 'docs/tutorial/packaging.rst', 'docs/tutorial/schema.rst', 'docs/tutorial/setup.rst', 'docs/tutorial/static.rst', 'docs/tutorial/templates.rst', 'docs/tutorial/testing.rst', 'docs/tutorial/tests.rst', 'docs/tutorial/views.rst', 'examples/blueprintexample/blueprintexample.py', 'examples/blueprintexample/simple_page/__init__.py', 'examples/blueprintexample/simple_page/simple_page.py', 'examples/blueprintexample/simple_page/templates/pages/hello.html', 'examples/blueprintexample/simple_page/templates/pages/index.html', 'examples/blueprintexample/simple_page/templates/pages/layout.html', 'examples/blueprintexample/simple_page/templates/pages/world.html', 'examples/blueprintexample/test_blueprintexample.py', 'examples/flaskr/.gitignore', 'examples/flaskr/README', 'examples/flaskr/flaskr/__init__.py', 'examples/flaskr/flaskr/blueprints/__init__.py', 'examples/flaskr/flaskr/blueprints/flaskr.py', 'examples/flaskr/flaskr/factory.py', 'examples/flaskr/flaskr/schema.sql', 'examples/flaskr/flaskr/static/style.css', 'examples/flaskr/flaskr/templates/layout.html', 'examples/flaskr/flaskr/templates/login.html', 'examples/flaskr/flaskr/templates/show_entries.html', 'examples/flaskr/setup.cfg', 'examples/flaskr/setup.py', 'examples/flaskr/tests/test_flaskr.py', 'examples/jqueryexample/jqueryexample.py', 'examples/jqueryexample/templates/index.html', 'examples/jqueryexample/templates/layout.html', 'examples/minitwit/.gitignore', 'examples/minitwit/MANIFEST.in', 'examples/minitwit/README', 'examples/minitwit/minitwit/__init__.py', 'examples/minitwit/minitwit/minitwit.py', 'examples/minitwit/minitwit/schema.sql', 'examples/minitwit/minitwit/static/style.css', 'examples/minitwit/minitwit/templates/layout.html', 'examples/minitwit/minitwit/templates/login.html', 'examples/minitwit/minitwit/templates/register.html', 'examples/minitwit/minitwit/templates/timeline.html', 'examples/minitwit/setup.cfg', 'examples/minitwit/setup.py', 'examples/minitwit/tests/test_minitwit.py', 'examples/patterns/largerapp/setup.py', 'examples/patterns/largerapp/tests/test_largerapp.py', 'examples/patterns/largerapp/yourapplication/__init__.py', 'examples/patterns/largerapp/yourapplication/static/style.css', 'examples/patterns/largerapp/yourapplication/templates/index.html', 'examples/patterns/largerapp/yourapplication/templates/layout.html', 'examples/patterns/largerapp/yourapplication/templates/login.html', 'examples/patterns/largerapp/yourapplication/views.py', 'examples/tutorial/.gitignore', 'examples/tutorial/LICENSE', 'examples/{flaskr => tutorial}/MANIFEST.in', 'examples/tutorial/README.rst', 'examples/tutorial/flaskr/__init__.py', 'examples/tutorial/flaskr/auth.py', 'examples/tutorial/flaskr/blog.py', 'examples/tutorial/flaskr/db.py', 'examples/tutorial/flaskr/schema.sql', 'examples/tutorial/flaskr/static/style.css', 'examples/tutorial/flaskr/templates/auth/login.html', 'examples/tutorial/flaskr/templates/auth/register.html', 'examples/tutorial/flaskr/templates/base.html', 'examples/tutorial/flaskr/templates/blog/create.html', 'examples/tutorial/flaskr/templates/blog/index.html', 'examples/tutorial/flaskr/templates/blog/update.html', 'examples/tutorial/setup.cfg', 'examples/tutorial/setup.py', 'examples/tutorial/tests/conftest.py', 'examples/tutorial/tests/data.sql', 'examples/tutorial/tests/test_auth.py', 'examples/tutorial/tests/test_blog.py', 'examples/tutorial/tests/test_db.py', 'examples/tutorial/tests/test_factory.py', 'tox.ini']",Merge pull request # 2676 from davidism/tutorial
205,16d83d6bb413bec09a656a659b98d897e7abcc81,2018-04-09 00:22:16-07:00,"and others ) . `` 500 Internal Server Error `` response . The teardown functions are still things that absolutely need to happen at the end of request . to interface with the current application object in a way . To solve Example usage : : execute even if an unhandled exception occurred during dispatch . a list of headers and an optional defaults to `` True `` in the development environment . the : meth : ` ~Flask.teardown_request ` and : param base_url : Base URL where the app is being served , which ctx = _request_ctx_stack.top return request.args.get ( 'next ' ) or \ A namespace object that can store data during an This document describes the behavior in Flask 0.7 which is mostly in line sending : ref : ` signals ` or passing data to a background thread . us a : class : ` ~flask.ctx.RequestContext ` : with app.test_request_context ( ) : # within this block , current_app points to app . stack again . On popping the application 's Some of the objects provided by Flask are proxies to other objects . The : param kwargs : other keyword arguments passed to The following attributes are always present on each layer of the If you try to access : data : ` current_app ` , or anything that uses it , these contexts are pushed , the : data : ` current_app ` , : data : ` g ` , This is only available when an allows the development server to present the interactive debugger with See : ref : ` callbacks-and-errors ` . This is similar to the : doc : ` /appcontext ` , which keeps track of the pushed , which creates and pushes an : class : ` ~ctx.AppContext ` first if Flask automatically * pushes * an application context when handling a .. versionadded : : 0.10 is treated as a replacement for the view 's return value . returns a response . during a request will have access to : data : ` current_app ` . application context . This is a good place to store resources during a request . During The internal : class : ` ~werkzeug.local.LocalStack ` that holds push and pop multiple times . This is very handy to implement things like associated with it is destroyed . If an error occurs during development , Generally there would be a `` get_X ( ) `` function that creates resource print ( 'during with block ' ) format = request.args.get ( 'format ' ) : meth : ` ~Flask.teardown_request ` functions are called . all the context local objects used in Flask . This is a documented is especially useful when combined with the : ref : ` faking-resources ` A proxy to the application handling the current request . This is object and passed to the : meth : ` ~Flask.after_request ` `` `` '' Called after the actual request dispatching and will # object in your hand made available as the : data : ` g ` proxy . is now passed the ctx object . When the request starts , a : class : ` ~ctx.RequestContext ` is created and writing reusable : doc : ` blueprints < /blueprints > ` or everything that runs in the block will have access to : data : ` request ` , always execute at the end of the request , independent on if an provide you with important information . ` g ` : param default : Value to return if the attribute is not present , called even if there is an unhandled exception during dispatch , and for debug mode the context is preserved . If debug mode is set to off , the context needed to interface with the current application object in some way . defaults from the application . ctx.pop ( ) Creating an Application Context development however that can be problematic as you might want to have the See : doc : ` /reqcontext ` for more information about how the contexts work > > > ctx = app.test_request_context ( '/ ? next=http : //example.com/ ' ) and : meth : ` ~Flask.teardown_appcontext ` functions are are executed . These context from the command line : : # . : data : ` request_started ` is sent before the A common use for : data : ` g ` is to manage resources during a request . An application context is automatically pushed by `` `` '' The WSGI server calls the Flask application object as the To make this implicit a : class : ` ~werkzeug.local.LocalProxy ` can be used : : Now what happens on errors ? If you are not in debug mode and an exception is not : param default : Value to return if the attribute is not present . Flask automatically * pushes * a request context when handling a request . : param subdomain : Subdomain name to append to context local . could access . So we have to make a request and bind it to the current : data : ` PREFERRED_URL_SCHEME ` . a different point . Strictly speaking they are independent of the actual `` `` '' Called after the request is dispatched and the response is an environment and context instead of this method . interactive Python shell , head over to the : ref : ` shell ` chapter . instead of raise a `` KeyError `` . return db pattern or in blueprints and extensions . a context for that application is not already the top context . While described on this page . stack : on the module level . manages the contexts during the request . Internally , the request and with app.test_client ( ) as client : : meth : ` ~Flask.before_request ` functions are called . Context Usage AttributeError : 'NoneType ' object has no attribute 'request ' Do not force activate `` PRESERVE_CONTEXT_ON_EXCEPTION `` if debug mode is set to off called even if an unhandled exception was raised at any point above . 2 . In contrast , in the request handling state , a couple of other rules The `` g `` name stands for `` global '' , but that is referring to the from flask import _request_ctx_stack however the exception is not further processed and bubbles up to the WSGI def show_teardown ( exception ) : the request object for the current request . If : data : ` ~signals.signals_available ` is true , the following signals are of a better solution . Since one of the pillars of Flask 's design is that if db is None : # are called . Alternatively the same thing happens if another Until you call ` pop ` : return 'Hello , World ! ' ctx.push ( ) finally : : param path : URL path being requested . : param url_scheme : Scheme to use instead of : class : ` ctx._AppCtxGlobals ` . def wsgi_app ( self , environ ) : runs during a request , the : data : ` request ` and : data : ` session ` proxies The object returned can also be used without the `` with `` statement .. code-block : : pytb popped , the : meth : ` ~flask.Flask.teardown_request ` functions are called . initializing an extension , you can push a context manually since you handling a request . Use : meth : ` test_request_context ` to create setting the `` PRESERVE_CONTEXT_ON_EXCEPTION `` configuration variable . By with the old behavior but has some small , subtle differences . : param subdomain : subdomain to use for route matching Because the request context is internally maintained as a stack you can This is a proxy . See : ref : ` notes-on-proxies ` for more information . WSGI server . Because a * worker * ( thread , process , or coroutine depending way you would use them on a dictionary . block to push the context , which will make : data : ` current_app ` data being global * within a context * . The data on `` g `` is lost moves between threads and it will not be shared between requests . As such After the request is dispatched and a response is generated and sent , Do not enable : data : ` PRESERVE_CONTEXT_ON_EXCEPTION ` in production , as it return app object and handed over to the : meth : ` ~flask.Flask.after_request ` referring to an `` app `` directly , you use the the : data : ` current_app ` 4 . At the end of the request the : meth : ` ~flask.Flask.teardown_request ` within the modules in your project is prone to circular import issues . This is an example that connects to a database : : ctx.push ( ) context is automatically pushed by the : meth : ` wsgi_app ` when recommended passing applications around explicitly , but that caused issues ` g ` If no request context has been pushed and an application context has request context was not popped so that the interactive debugger can still it implicitly ends when the first request comes in . While the .. describe : : 'key ' in g `` `` '' Called right before the application context is popped . as it will cause your application to leak memory on exceptions . However , `` PREFERRED_URL_SCHEME `` or `` http `` . which may be delayed during testing to maintain access to needed an active HTTP request . Consult the documentation on testing `` X `` if it does not exist yet and otherwise returns the same resource , instead called by the contexts when they are popped . The functions are For information on how to use the request context from the interactive when handling a request , and when running a CLI command . Use a list of headers , and an optional exception context to When the : class : ` Flask ` application handles a request , it creates a : doc : ` extensiondev ` . context , which also pushes an : doc : ` /appcontext ` . When the request ends `` `` '' Shortcut for : attr : ` wsgi_app ` . '' '' '' Flask will also automatically push an app context when running CLI import at all . Return an iterator over the attribute names . : class : ` ~werkzeug.test.EnvironBuilder ` . to interface with the current application object in some way . To solve request context , so you can change the value of this proxy by : meth : ` ~werkzeug.local.LocalProxy._get_current_object ` method : : from flask import _request_ctx_stack not actually called by the : class : ` Flask ` object itself but is always `` `` '' Get and remove an attribute by name . Like : meth : ` dict.pop ` . available arguments . Flask-specific behavior is listed here . It 's easy to see the behavior from the command line : implicit : whenever a request context is pushed , an application context The proxy objects do not fake their inherited types , so if you want to Typically , an application context will have the same lifetime as a not executed yet or at all ( for example in test environments sometimes : data : ` request ` and : data : ` session ` proxies should be accessed A common workaround for that problem was to use the executed . If one of these functions return a response , the other The teardown callbacks are special callbacks in that they are executed at ` session ` : data : ` request ` , and : data : ` session ` proxies are available to the : data : ` SERVER_NAME ` , and : data : ` APPLICATION_ROOT ` . Points to the application handling the request . This is useful for : param exc : An unhandled exception raised while dispatching the perform actual instance checks , you have to do that on the instance proxies that depend on them are available and point at information from Manually Push a Context purpose . It is a simple namespace object that has the same lifetime as : meth : ` __call__ ` so that middlewares can be applied without Example usage : : : class : ` Request ` object based on the environment it received from the functions which have the chance to replace it or modify it in place . ` app ` ` flashes ` ends it pops the request context then the application context . : param json : If given , this is serialized as JSON and passed as exist : `` `` '' A plain object . '' '' '' ... def teardown_request ( exception=None ) : Added support for non-with statement usage and `` with `` statement Diving into Context Locals `` FLASK_ENV `` environment variable is set to `` 'development ' `` ) , the current exception information . to : data : ` current_app ` . : : attribute is defined and it yields all keys on iteration . > > > redirect_url ( ) request . Detected from the current exception information if if ctx is not None : for user code . ctx.pop ( ) no request handling happened so far 2 . If the : meth : ` ~flask.Flask.before_request ` functions did not return a If you see that error somewhere else in your code not related to : attr : ` Flask.app_ctx_globals_class ` , which defaults to As you can see , it accesses the request object . If you try to run this request will have access to the : data : ` request ` proxy , which points to this to manually create a context outside of these situations . If you 're writing an extension , : data : ` g ` should be reserved for user request ends , so that their data can be accessed in the test function . Teardown events for the request and app contexts are called RuntimeError : Working outside of request context . Bound to the application context instead of the request context . ` flashes ` redirected to . Imagine it would always redirect to the URL 's `` next `` Takes the same arguments as Werkzeug 's application , or a command line application . Check whether an attribute is present . The application context is a good place to store common data during a functions are no longer called . In any case however the return value sitting in an interactive Python shell and interacting with the There are two ways to make an application context . The first one is object being proxied . the application . See the linked Werkzeug docs for most of the Flask application begins handling a request , it pushes an application you might want to not execute before-request callbacks ) . It is recommended that you read the : ref : ` app-context ` chapter first . ~~~~~~~ This is called by If you look into how the Flask WSGI application internally works , you will : data : ` request ` can not be passed to another thread , the other thread generate_report ( ) If you need to access the underlying object that is proxied , use the # even though the response ended and you have the response context manually to avoid indentation . : : `` path `` is relative to . If not given , built from wrapped to applying middleware . '' '' '' proxy , which points to the application handling the current activity . environment . : : ctx = _request_ctx_stack.top db = getattr ( g , '_database ' , None ) called , and are passed the exception object . connection , and it will be closed automatically at the end of the init_db ( ) ` session ` find a piece of code that looks very much like this : : your teardown-request handlers in a way that they will never fail . .. describe : : iter ( g ) app = Flask ( __name__ ) an unnecessarily expensive operation in case there is no request around , create an : ref : ` application context < app-context > ` when it 's pushed and `` path `` is relative to . If not given , built from Added the ` exc ` argument . Previously this was always using the handler . .. autoclass : : flask.ctx._AppCtxGlobals on the server ) handles only one request at a time , the request data can # teardown functions are called after the context with block exits : meth : ` ~flask.ctx.RequestContext.push ` adds the context to the stack on # the contexts are popped and teardown functions are called after : class : ` ~flask.ctx.AppContext ` instances . Typically , the : param url_scheme : scheme for the request , default user = getattr ( flask.g , 'user ' , None ) : class : ` ~flask.ctx.RequestContext ` instances . Typically , the that was matched has the chance to return a response . # . After the response is returned , the contexts are popped , which calls other parts of the request dispatch have run first . Be sure to write `` 500 `` response and instead are propagated to the WSGI server . This Flask solves this issue with the * application context * . Rather than Another thing of note is that the request context will automatically also : data : ` ~flask.current_app ` proxy later on , which was bound to the current : data : ` request ` point at the request for the created with test_request_context ( ... ) : If you try to access : data : ` request ` , or anything that uses it , outside after the request context . See : meth : ` do_teardown_request ` . point to the unique object bound to each worker behind the scenes as # the client with block exists the `` with `` statement to bind the context . Everything that is called from For more information about that , see : ref : ` extension-dev ` . : data : ` current_app ` works . request 's application reference . Since creating such a request context is app = Flask ( __name__ ) testing , you can use the : ref : ` faking-resources ` pattern to the request context is popped , which then pops the application context . ` __call__ ` so that middlewares can be applied without losing a 1 . `` get_X ( ) `` creates resource `` X `` if it does not exist , caching it def teardown_db ( exception ) : > > > ctx.pop ( ) Certain parts of the test system might also temporarily create a request The proxy objects can not fake their type as the actual object types . ctx = app.test_request_context ( ... ) : param name : Name of attribute to pop . function in case a `` SERVER_NAME `` was configured . This allows you to Context locals are implemented in Werkzeug . See : doc : ` werkzeug : local ` return ctx.session ( : data : ` flask.request ` and others ) point to the current request . combination with the `` with `` statement because the request is only bound WSGI application . This calls : meth : ` wsgi_app ` which can be The : class : ` Flask ` application object has attributes , such as This should typically only happen when testing code that expects an generate URLs even in the absence of a request . request context is pushed if necessary . : param args : other positional arguments passed to An important change in 0.7 is that the internal server error is now no This is similar to the : doc : ` /reqcontext ` , which keeps track of Context Preservation on Error ... print 'this runs after request ' Works similar to the request context but only binds the application . functions are executed . This always happens , even in case of an `` `` '' Create a : class : ` ~werkzeug.test.EnvironBuilder ` , taking some request-level data during a request . A corresponding application context This calls all functions decorated with # the contexts are not popped even though the request ended it is the perfect place to store database connection information and other ` app ` resources . from flask import Flask , request `` `` '' A plain object . Used as a namespace for storing data during an `` with `` block , and everything that runs in the block will have access Accessing `` db `` will call `` get_db `` internally , in the same way that This context can be used in two ways . Either with the `` with `` statement active request . One option is to use the Keep in mind that teardown callbacks are always executed , even if : meth : ` ~Flask.teardown_appcontext ` functions . These functions are Because the contexts are stacks , other contexts may be pushed to change # . : data : ` request_tearing_down ` is sent after the : data : ` request_tearing_down ` signal is sent . : class : ` ~werkzeug.test.EnvironBuilder ` . ` url_adapter ` with app.app_context ( ) : def create_app ( ) : outside an application context , you 'll get this error message : 2 . `` teardown_X ( ) `` closes or otherwise deallocates the resource if it app = Flask ( __name__ ) The request context internally works like a stack : The topmost level on ... request.referrer or \ the programmer can modify the application object safely . owns the route that matches the request . WSGI environment . Use a `` with `` block to push the context , That way a user can directly access `` db `` which internally calls called . connection or the user that is currently logged in . from flask import request , url_for `` `` '' Get an attribute by name , or a default value . Like Flask 0.6 and earlier in debug mode , if an exception occurred , the 1. an implicit resource caching on the context . This typically means that you attempted to use functionality that These two usages are now equivalent : : instead of the stack . It may be useful to access the stack in If an error occurs or not , at the end of the request the request context : : The application context is created and destroyed as necessary . When a will cause your application to leak memory on exceptions . : param subdomain : Subdomain name to append to : data : ` SERVER_NAME ` . only the application context is bound and not yet a request . This ... except Exception as e : even if an unhandled error occurs . Other events may not be with self.request_context ( environ ) : : param start_response : a callable accepting a status code , with libraries that were not designed with that in mind . have direct access to the `` app `` . Use : meth : ` ~Flask.app_context ` in a : members : handler itself raises an exception , Flask returns a generic called depending on when an error occurs during dispatch . : data : ` _app_ctx_stack.top < _app_ctx_stack > ` . For more information see response , the regular request handling kicks in and the view function The internal : class : ` ~werkzeug.local.LocalStack ` that is used to implement the application object you 're currently creating or modifying . request . View functions , error handlers , and other functions that run modify it , there is no magic proxy that can give you a reference to > > > ctx = app.test_request_context ( ) print current_app.name understand what is actually happening . The new behavior is quite simple : 1 . The application setup state , in which the application implicitly is use is discouraged in general . The following attributes are always present on each layer of the statement will have access to the request globals ( : data : ` flask.request ` much the same as : meth : ` do_teardown_request ` but for the application Using the : meth : ` ~Flask.test_client ` as a `` with `` block to preserve the form keys and values . Typically you should not call this from your own code . A request the very top , : meth : ` ~flask.ctx.RequestContext.pop ` removes it from the unhandled exception down the road or if a before-request handler was During a request , every call to `` get_db ( ) `` will return the same functions are skipped . The return value is treated as the response : param start_response : A callable accepting a status code , by side . This is powered by the application context and not by the application around to each function , the : data : ` current_app ` and original thread handling the request . application context is pushed when a request context is pushed . present . Some of the objects provided by Flask are proxies to other objects . The generate_report ( ) .. versionchanged : : 0.3 how you interact with applications during request handling , but without : param : default : Value to set and return if the attribute is not application . An application context is automatically created when a : doc : ` extensions < /extensions > ` there wo n't be an `` app `` instance to Additionally as of 0.10 you can use the : meth : ` get ` method to the application context was introduced . are accessed instead . losing a reference to the app object . Instead of doing this : : .. code-block : : python if ctx is not None : try : As of 0.11 you can use : meth : ` pop ` and : meth : ` setdefault ` in the same The application context is also used by the : func : ` ~flask.url_for ` after the context ends , and it is not an appropriate place to store information around for a longer time in case an exception occurred . In `` data `` . Also defaults `` content_type `` to during testing , where you may want to run a function that uses exception and return a response . If no error handler is found , or the populated with your test data . : : When a Flask application begins handling a request , it pushes a request .. versionchanged : : 0.10 : param app : The Flask application to configure the environment from . proxies are accessed in the same way for each worker thread , but Lifetime of the Context Flask applications and extensions . The request context keeps track of the request-level data during a # . The return value of the view is converted into an actual response longer post processed by the after request callbacks and after request : class : ` ~flask.ctx.RequestContext ` object and uses it in combination with the stack is the current active request . response = self.full_dispatch_request ( ) request . sent : : data : ` appcontext_pushed ` , : data : ` appcontext_tearing_down ` , and assuming they pick a sufficiently unique name and should put their extension code . The application will call functions registered with ` request ` db = g.pop ( 'db ' , None ) destined to go there . When storing things on the application context no longer on the request context which means it becomes available if function accepts the same arguments plus two additional ) . past a bunch of functionality was attached to the request context for lack See : doc : ` /reqcontext ` . from a plain Python shell , this is the exception you will see : Use a `` with `` block to push the context , which will make which will make : data : ` request ` point at this request . : data : ` PREFERRED_URL_SCHEME ` , `` subdomain `` , This is important to know if the life of the request context is prolonged `` `` '' Create a : class : ` ~flask.ctx.RequestContext ` for a WSGI : meth : ` test client < Flask.test_client > ` to simulate a full request . Or `` `` '' Get the value of an attribute if it is present , otherwise configuring the application , it most likely indicates that you should : meth : ` RequestContext.push ( ) < flask.ctx.RequestContext.push > ` testing , it most likely indicates that you should move that code into a this , set up an application context with app.app_context ( ) . See the : param data : The request body , either as a string or a dict of Locality of the Context request . Rather than passing the request object to each function that term * context local * for this . File `` < stdin > '' , line 1 , in < module > while a request is active , the context local objects db = g._database = connect_to_database ( ) The application context is what powers the : data : ` ~flask.current_app ` with app.test_client ( ) : # the teardown functions are still not called at that point set and return a default value . Like : meth : ` dict.setdefault ` . these functions in a way that does not depend on other callbacks and only occurs under production settings . `` `` '' Called when an application context is popped . This works pretty response , the view function for the matched route is called and context . The : attr : ` ~flask.Flask.test_request_context ` method can create # request was triggered from the test client : ref : ` signals ` ) response = self.make_response ( self.handle_exception ( e ) ) you can have more than one application in the same Python process . : meth : ` ~flask.Flask.app_context ` method : : > > > @ app.teardown_request user = flask.g.get ( 'user ' , None ) scenes as necessary . If you want to perform instance checks , you have to do that on the manually pushed contexts . This means there is no guarantee that any ... with app.request_context ( environ ) : : param environ : a WSGI environment the top context on the stack . redirects or chain different applications together . point at this application . it is useful to delay destroying the data for debugging purposes . local from `` get_db ( ) `` : : def generate_report ( year ) : : param name : Name of attribute to get . From that point onwards you can work with the request object : # . Before each request , : meth : ` ~Flask.before_request ` functions are from flask import Flask , current_app things . The internal stack object is called : data : ` flask._app_ctx_stack ` . See : doc : ` /appcontext ` . exception context to start the response a request context , you 'll get this error message : error and data will be preserved and shown in the interactive debugger . request , response , and how errors are handled . The contexts are active : data : ` PREFERRED_URL_SCHEME ` . Flask dispatches a request in multiple stages which can affect the use a sufficiently unique name . The current context is accessed with Python shell , see : doc : ` /shell ` . called . If one of these functions return a value , the other return ctx.session which is useful for working in the shell . The example above is If an exception is raised before the teardown functions , Flask tries to It 's now also possible to use the `` in `` operator on it to see if an of the stack . Extensions can access the contexts on the stack as a This state starts when the : class : ` Flask ` object is instantiated , and context without calling the before-request handlers . Make sure to write `` get_db ( ) `` . client.get ( '/ ' ) pre-configure such resources . caught , the 500 internal server handler is called . In debug mode If debug mode is enabled , unhandled exceptions are not converted to a `` `` '' : param args : other positional arguments passed to Context Preservation on Error : param environ : A WSGI environment . is not preserved . : data : ` _app_ctx_stack ` . When contexts are pushed onto the stack , the triggered when the request context is popped . That way we have a `` `` '' If the specific object reference is important , for example for : attr : ` ~Flask.config ` , that are useful to access within views and internal redirects . request or CLI command . Flask provides the : data : ` g object < g > ` for this Creating an app context automatically creates this object , which is `` `` '' Create an : class : ` ~flask.ctx.AppContext ` . Use as a `` with `` print ( 'after with block ' ) The second way is the explicit way using the def get_session ( ) : this runs after request for more information on how this works internally . Added the `` exc `` argument . code . You may store internal data on the context itself , but be sure to dispatching code looks cleaner and is easier to customize and understand . environment created from the given values . This is mostly useful returned , right before the request context is popped . particular behavior changed in 0.7 because we wanted to make it easier to any code can get hold of these objects at any time . context . there being an active request . Consider , for instance , that you 're If you see that error while configuring your application , such as when : data : ` current_app ` and : data : ` g ` proxies should be accessed instead The first time `` get_db ( ) `` is called the connection will be established . debug information . and the full lifecycle of a request . ` request ` def teardown_db ( ) : sent : : meth : ` teardown_appcontext ` . Then the RuntimeError : Working outside of application context . The most common usage is to split resource management into two parts : What happens if an error occurs in Flask during request processing ? This .. versionadded : : 0.11 : param kwargs : other keyword arguments passed to : data : ` PREFERRED_URL_SCHEME ` , `` subdomain `` , Purpose of the Context Sometimes you are dealing with an application in a way that is similar to Extensions are free to store additional information on the topmost level , '/make_report/2017 ' , data= { 'format ' : 'short ' } ) : import sqlite3 can be used in advanced applications to , for example , do internal # only when the code reaches this point the teardown functions When using the shell , it may be easier to push and pop the Say you have a utility function that returns the URL the user should be : data : ` SERVER_NAME ` . `` `` '' Creates a new test builder with some application defaults thrown in . '' '' '' Just store on this whatever you want . For example a database def redirect_url ( ) : > > > app = Flask ( __name__ ) environment and binds it to the current context . This must be used in : doc : ` application context < /appcontext > ` . This is an instance of u'http : //example.com/ ' `` `` '' The actual WSGI application . This is not implemented in parameter or the HTTP referrer or the index page : : application is in this state , a few assumptions are true : : class : ` ~flask.ctx.RequestContext ` object . When the request context is extensions that want to support multiple applications running side During testing , it can be useful to defer popping the contexts after the for information about how to avoid this problem . not passed . Passed to each teardown function . will not fail . default it 's linked to the setting of `` DEBUG `` . If the application is in : meth : ` dict.get ` . pattern for testing . This is mainly there for extensions to store data . tighter control over certain resources under testing environments . with app.test_request_context ( When handling a request , the application context is popped The application context is created and destroyed as necessary . It never request handling as they are bound to the lifecycle of the To solve this , set up an application context with app.app_context ( ) . ` url_adapter ` The behavior of the before and after request callbacks was changed For example , you can manage a database connection using this pattern : : > > > ctx.push ( ) with app.app_context ( ) : server . That way things like the interactive debugger can provide helpful using the : meth : ` ~flask.Flask.app_context ` method . by using the test client in a with statement or when using the request : meth : ` ~Flask.teardown_appcontext ` when the application context is Signals will be created alongside if this is necessary . As a result , you can The context is unique to each thread ( or other worker type ) . : meth : ` ~flask.ctx.RequestContext.pop ` methods : application contexts work as stacks , : data : ` _request_ctx_stack ` and useful to access the application without needing to import it , or if .. versionadded : : 0.9 # . If the : meth : ` ~Flask.before_request ` functions did not return a you have to have a reference to the application object in order to def get_session ( ) : and a `` teardown_X ( ) `` function that is registered as teardown handler . : class : ` ~werkzeug.test.EnvironBuilder ` , with some defaults from The teardown callbacks are independent of the request dispatch , and are This is a proxy . See : ref : ` notes-on-proxies ` for more information . is pushed when a request context is pushed . # . : data : ` got_request_exception ` is sent when an exception begins to `` `` '' Binds the application only . For as long as the application is bound reference to the class . So instead of doing this : : .. versionadded : : 0.9 ctx = app.request_context ( environ ) or by calling the : meth : ` ~flask.ctx.RequestContext.push ` and : param json : If given , this is serialized as JSON and passed as data between requests . Use the : data : ` session ` or a database to Additional arguments ( only if `` base_url `` is not specified ) : One of the design ideas behind Flask is that there are at least two match it with an : meth : ` ~Flask.errorhandler ` function to handle the will have a different context stack and will not know about the request .. versionadded : : 0.9 to the current context the : data : ` flask.current_app ` points to that : param path : URL path being requested . RuntimeError : Working outside of application context . `` application/json `` . .. note : : So how does the code find the “ right ” application ? In the past we If you need to get access to the underlying object that is proxied , you def hello ( ) : ( see : class : ` werkzeug.test.EnvironBuilder ` for more information , this return response ( environ , start_response ) print ( 'during view ' ) call every as : meth : ` teardown_request ` decorated function . This is store data across requests . Example usage : : The context is typically used to cache resources that need to be created it can be useful during development to get the same error preserving namespace to store data . that is being proxied ( see ` _get_current_object ` below ) . : meth : ` teardown_request ` , and : meth : ` Blueprint.teardown_request ` if a blueprint handled the request . Finally , the : data : ` appcontext_popped ` . it pops the request context then the application context . : data : ` SERVER_NAME ` , and : data : ` APPLICATION_ROOT ` . 3 . There is also a third state somewhere in between 'module-level ' and start the response . 3 . The return value of the view is then converted into an actual response the parent thread was pointing to . an application context . is popped and all data associated with it is destroyed . During The new teardown functions are supposed to be used as a replacement for can use the : meth : ` ~werkzeug.local.LocalProxy._get_current_object ` method : : resp = client.get ( '/foo ' ) move that code into a view function or CLI command . : param url_scheme : Scheme to use instead of error occurred or not . See : ref : ` callbacks-and-errors ` . `` `` '' Creates a : class : ` ~flask.ctx.RequestContext ` from the given values `` `` '' Creates a : class : ` ~flask.ctx.RequestContext ` from the given they have to dispatch to the actual object bound to a thread behind the This behavior can be controlled with the Storing Data functions . Each function returns a modified or new response object . `` `` '' The actual WSGI application . This is not implemented in it ca n't be imported , such as when using the application factory ignore the existence of the application context unless you need it . The application context keeps track of the application-level data during 'request-handling ' : print ( request.path ) stack : : func : ` ~flask.Flask.teardown_request ` functions are also executed . : data : ` g ` proxies are accessed instead . request data without dispatching a full request . `` data `` . Also defaults `` content_type `` to unique names should be chosen as this is a place that is shared between automatically during requests and CLI commands . It can be controlled : meth : ` ~Flask.after_request ` functions are called . during all of these stages . there is no application context for that application so far . doing exactly the same as this code : : before-request callbacks were not executed yet but an exception happened . this set up an application context with app.app_context ( ) . See the Starting with Flask 0.7 you have finer control over that behavior by be considered global to that worker during that request . Flask uses the Immediately before they are popped , the : meth : ` ~Flask.teardown_request ` You can use : class : ` ~werkzeug.local.LocalProxy ` to make a new context : meth : ` RequestContext.pop ( ) < flask.ctx.RequestContext.pop > ` , When the development server is running in development mode ( the `` `` '' Create a : class : ` ~flask.ctx.RequestContext ` representing a A : class : ` Blueprint ` can add handlers for these events that are specific instance and can be used by extensions and application code but the : doc : ` CLI commands < /cli > ` . However , importing the `` app `` instance contexts until the with block exits . > > > callbacks are no longer guaranteed to be executed . This way the internal For more information of how to utilize the request context from the if 'db ' not in g : a request , CLI command , or other activity . Rather than passing the # . : data : ` request_finished ` is sent after the as `` g.X `` . 2. a context teardown based resource deallocation . That makes a lot of sense because we currently do not have a request we if the object reference is important ( so for example for sending : meth : ` AppContext.pop ( ) < flask.ctx.AppContext.pop > ` . : param base_url : Base URL where the app is being served , which view function . View functions , error handlers , and other functions that run during a Events and Signals the proxies during a request . While this is not a common pattern , it manually with : meth : ` ~flask.Flask.app_context ` . return g.db different “ states ” in which code is executed : At the end of a request , the request context is popped and all data : data : ` PRESERVE_CONTEXT_ON_EXCEPTION ` config . As described above , it The : meth : ` Flask.wsgi_app ` method is called to handle each request . It `` application/json `` . : doc : ` application context < /appcontext > ` is pushed . This happens context and a : doc : ` request context < /reqcontext > ` . When the request Traceback ( most recent call last ) : Purpose of the Application Context ... not been explicitly set , a `` RuntimeError `` will be raised . : : information there , instead of on the : data : ` flask.g ` object which is reserved get an attribute or `` None `` ( or the second argument ) if it 's not set . you can use : meth : ` ~Flask.test_request_context ` in a `` with `` block , and reason behind this is that these proxies are shared between threads and : data : ` appcontext_tearing_down ` signal is sent . The method : meth : ` ~Flask.request_context ` returns a new to the blueprint . The handlers for a blueprint will run if the blueprint under error conditions and a new callback was added that will and the view function is not called . application-level data independent of a request . A corresponding behavior as debug mode when attempting to debug an error that ~~~~~~~~~~~~~~~~~~ do_something_with ( request ) on a per-request or usage case . For instance , database connections are .. currentmodule : : flask be handled , but before an : meth : ` ~Flask.errorhandler ` is looked up or init_db ( ) g.db = connect_to_database ( ) the traceback . 1 . Before each request , : meth : ` ~flask.Flask.before_request ` functions are to the current context for the duration of the `` with `` block . Starting with Flask 0.10 this is stored on the application context and popped . exists . It is registered as a : meth : ` ~Flask.teardown_appcontext ` url_for ( 'index ' ) When using the : doc : ` app factory pattern < /patterns/appfactories > ` or the same thread from this point onwards until the end of the `` with `` The main reason for the application 's context existence is that in the","['docs/api.rst', 'docs/appcontext.rst', 'docs/reqcontext.rst', 'flask/app.py', 'flask/ctx.py', 'flask/globals.py', 'flask/testing.py']",Merge pull request # 2685 from davidism/app-context-docs
206,47a00864c35f3266fa098744c65496bec601977b,2018-03-22 12:06:05-07:00,"' Do `` pip install python-dotenv '' to use them ' , ' * Tip : There are .env files present . ' click.secho ( fg='yellow ' ) if path or os.path.exists ( '.env ' ) or os.path.exists ( '.flaskenv ' ) :",['flask/cli.py'],Merge pull request # 2668 from pallets/tip-dotenv
207,d72612d11e4f4e5d682c8986acb42ae5e8e97e4a,2018-02-28 08:03:04-08:00,"else : exist , instead you have to import from `` flaskext.foo `` or `` flask_foo `` .. versionadded : : 0.8 from flask import current_app extensions . extension called `` Flask-Foo `` or `` Foo-Flask `` it should be always FOO_BAR='baz ' , ctx = stack.top one . Extension Import Transition added in 0.8 as the canonical way to import Flask extensions and makes from the : data : ` flask.ext ` package . We provide you with a compatibility .. _Flask Extension Registry : http : //flask.pocoo.org/extensions/ download it from GitHub : ` flaskext_compat.py ` _ Strictly speaking the above code is wrong , because teardown functions are from flask.ext import foo Flask Before 0.8 if hasattr ( app , 'teardown_request ' ) : Consequently we have recommended to name extensions `` flask_foo `` over as dependency to your : file : ` requirements.txt ` or : file : ` setup.py ` file they are not find an extension that fits your need . If this is the case , you can If you want to use an extension named “ Flask-Foo ” you would import it complex name . Likewise if you are outside of a request you can use the database by Flask extensions are usually named `` Flask-Foo '' or `` Foo-Flask '' . Many # Find the stack on which we want to store the database connection . wants to continue to support older versions of Flask . The following And here is how you can use it : : exist and you can start importing from there . ctx = _app_ctx_stack.top def close_connection ( response ) : passed an application instance during initialization . For example , Building Extensions the `` teardown `` handler . It will try to use the newstyle app context `` flaskext.foo `` in that order . As of Flask 0.11 , most Flask extensions have transitioned to the new naming .. _Extension Registry : http : //flask.pocoo.org/extensions/ Extensions typically have documentation that goes along that shows how to foo.init_app ( app ) # otherwise fall back to the request context importable from `` flask_foo `` : : if hasattr ( app , 'teardown_appcontext ' ) : .. _flaskext_compat.py : https : //raw.githubusercontent.com/pallets/flask/master/scripts/flaskext_compat.py While ` Flask Extension Registry ` _ contains many Flask extensions , you may not find pattern is a good way to support both : : app.teardown_request ( self.teardown ) configuration from : attr : ` app.config < flask.Flask.config > ` and are use it . There are no general rules in how extensions are supposed to Extensions downloaded with : command : ` easy_install ` or : command : ` pip ` . If you add a Flask extension frameworks to help build certain types of applications , like a ReST API . app.teardown_request ( close_connection ) Flask extensions extend the functionality of Flask in various different later with the app context support , you can use the database in the same developers : Importing `` flask.ext.foo `` would try `` flask_foo `` and Flask 0.8 introduced a redirect import system as a compatibility aid for app FOO_SPAM='eggs ' , now deprecated -- you should use `` flask_foo `` . If the : data : ` ~flask._app_ctx_stack ` does not exist because the user uses from flask import current_app , _app_ctx_stack import flask_foo foo = Foo ( ) from : data : ` ~flask.ext ` as follows : : create your own . Read : ref : ` extension-dev ` to develop your own Flask behave but they are imported from common locations . If you have an If you are using Flask 0.7 or earlier the : data : ` flask.ext ` package will not .. _pypi : https : //pypi.python.org/pypi ? : action=browse & c=585 an extension caled `` Flask-Foo '' might be used like this : : except ImportError : from flask import _app_ctx_stack as stack flaskext_compat.activate ( ) application that supports Flask 0.7 or earlier you should still import by extension developers . You can also search PyPI for packages tagged try : import flaskext_compat extension . app.after_request ( close_connection ) Consult each extension 's documentation for installation , configuration , Likewise if you are outside of a request but you are using Flask 0.9 or # Use the newstyle teardown_appcontext if it 's available , way : : app.config.update ( `` _request_ctx_stack.top `` if the application is using an older an extension that fits your need . If this is the case , you can always create your own . it possible for us to have more flexibility in how we distribute Extensions are extra packages that add functionality to a Flask the return value is discarded this will just work assuming that the code else : * This is only relevant if you want to support Flask 0.6 and older * of the request your extension will have to be extra careful there if it # before that we need to use the _request_ctx_stack . Extensions usually installed with a simple command or when your application installs . in between does not touch the passed parameter . handler and if it does not exist , falls back to the request context version of Flask that does not support it . ) practice because it meant that multiple `` flaskext `` packages coexist . Once the `` flaskext_compat `` module is activated the : data : ` flask.ext ` will Building Extensions Flask Extensions # Starting with Flask 0.9 , the _app_ctx_stack is the correct one , email or connecting to a database . Some extensions add entire new Flask extensions are listed on the ` Flask Extension Registry ` _ and can be app = Flask ( __name__ ) return response complex name . Note that we 're falling back to the from flask.ext import foo extensions are listed in the ` Extension Registry ` _ , which can be updated an old version of Flask , it is recommended to fall back to application . For example , an extension might add support for sending from flask_foo import Foo This module acts as redirect import module to Flask extensions . It was depending on how the extension is distributed . If you want to develop an and usage instructions . Generally , extensions pull their own app.teardown_appcontext ( self.teardown ) `` flaskext.foo `` for a long time . While the ` Extension Registry ` _ contains many Flask extensions , you may Consider reading : ref : ` extension-dev ` to develop your own Flask extension . ctx = _request_ctx_stack.top .. data : : flask.ext passed the exception and typically do n't return anything . However because from flask import _request_ctx_stack as stack pushing an app context : : ctx.sqlite3_db.close ( ) Teardown Behavior : data : ` ~flask._request_ctx_stack ` which is bound to a request . module that provides this package for older versions of Flask . You can app.teardown_appcontext ( self.teardown ) ways . For instance they add support for databases and other common tasks . Due to the change in Flask 0.7 regarding functions that are run at the end schema . The `` flask.ext.foo `` compatibility alias is still in Flask 0.11 but is the `` teardown `` handler . extensions , of the form `` flaskext.foo `` . This turned out to be problematic in with ` Framework : : Flask < pypi_ > ` _ . ========== ================ In early versions of Flask we recommended using namespace packages for Flask","['docs/api.rst', 'docs/extensiondev.rst', 'docs/extensions.rst']",Merge pull request # 2647 from pallets/docs-extensions
208,cc6c618f4d8a0ba4bc648f5a6ec226df4f8b7529,2018-02-28 07:00:15-08:00,"assert called == [ 'flask_test ' , 'TEARDOWN ' ] app = Flask ( 'flask_test ' , root_path=os.path.dirname ( __file__ ) ) assert called == [ 'conftest ' , 'TEARDOWN ' ] app = Flask ( __name__ )","['tests/conftest.py', 'tests/test_appctx.py']",Merge pull request # 2646 from pallets/test-app-name
209,b0c1da1e7ee66084b429a413541e179299de31a2,2018-02-24 08:10:25-08:00,"trailing slash produces a 404 “ Not Found ” error . trailing slash produces a 404 `` Not Found '' error . This helps keep URLs 4 . The generated paths are always absolute , avoiding unexpected behavior Take these two rules : : The canonical URL for the `` projects `` endpoint has a trailing slash . same page twice . trailing slash . Though they look similar , they differ in their use of the trailing slash in The canonical URL for the `` about `` endpoint does not have a trailing the URLs will stay unique , which helps search engines avoid indexing the of relative paths in browsers . 4 . If your application is placed outside the URL root , for example , in slash . It 's similar to the pathname of a file . Accessing the URL with a The following two rules differ in their use of a trailing slash . : : It 's similar to a folder in a file system . If you access the URL without uses a trailing slash . It 's similar to a folder in a file system ; if you canonical URL with the trailing slash . a trailing slash , Flask redirects you to the canonical URL with the This behavior allows relative URLs to continue working even if the trailing slash is omitted , consistent with how Apache and other servers work . Also , unique for these resources , which helps search engines avoid indexing In the second case , however , the URL definition lacks a trailing slash , access the URL without a trailing slash , Flask redirects you to the the URL . In the first case , the canonical URL for the `` projects `` endpoint the same page twice . 5 . If your application is placed outside the URL root , for example , in like the pathname of a file on UNIX-like systems . Accessing the URL with a",['docs/quickstart.rst'],Merge pull request # 2637 from pallets/quickstart-unique-urls
210,b16592aba0e9c60c9b3329c884bd9236a35168c0,2018-02-23 16:00:30-08:00,"A single trailing slash is stripped from the blueprint `` url_prefix `` url_prefix = url_prefix [ : -1 ] when it is registered with the app . ( ` # 2629 ` _ ) def foo ( ) : return `` , 204 assert client.get ( '/spam/foo ' ) .status_code == 204 app.register_blueprint ( bp , url_prefix='/spam/ ' ) app.register_blueprint ( bp ) def test_blueprint_url_defaults ( app , client ) : def test_blueprint_prefix_slash ( app , client ) : def test_blueprint_url_definitions ( app , client ) : bp = flask.Blueprint ( 'test ' , __name__ , url_prefix='/bar/ ' ) if url_prefix and url_prefix [ -1 ] == '/ ' : .. _ # 2629 : https : //github.com/pallets/flask/pull/2629 assert client.get ( '/bar/foo ' ) .status_code == 204","['CHANGES.rst', 'flask/blueprints.py', 'tests/test_blueprints.py']",Merge pull request # 2629 from zcchen/master
211,f808c20139649b747f604492bc33b61a7dd3e13a,2018-02-23 08:47:20-08:00,"# ip address ca n't match name return `` , 204 app.config [ 'SERVER_NAME ' ] = 'localhost.localdomain:3000 ' set , the cookie will be valid for all subdomains of `` SERVER_NAME `` . If : data : ` SERVER_NAME ` no longer implicitly enables subdomain setting cookies for domains without a dot . To use a domain locally , Inform the application what host and port it is bound to . Required .. versionchanged : : 1.0 app = flask.Flask ( __name__ , subdomain_matching=True ) self.subdomain_matching = subdomain_matching : param static_host : the host to use when adding the static route . def test_subdomain_matching ( ) : : param static_host : the host to use when adding the static route . Defaults `` False `` , the cookie 's domain will not be set . request.environ , def test_test_app_proper_environ ( app , client ) : subdomain_matching=False , .. versionadded : : 1.0 def test_subdomain_matching ( app , client ) : Defaults to False . set , the cookie will be valid for all subdomains of : data : ` SERVER_NAME ` . is created at a point where the request context is not yet set up : data : ` SERVER_NAME ` does not implicily enable it . It can be enabled by if not self.subdomain_matching else None ) def test_subdomain_basic_support ( ) : def test_blueprint_with_subdomain ( app , client ) : # allow all subdomains if matching is disabled def test_subdomain_basic_support ( app , client ) : `` `` '' Creates a URL adapter for the given request . The URL adapter : data : ` SERVER_NAME ` when matching routes . Defaults to False . ( ` # 2635 ` _ ) passing `` subdomain_matching=True `` to the `` Flask `` constructor . Defaults to None . Required when using `` host_matching=True `` return self.url_map.bind_to_environ ( : data : ` SESSION_COOKIE_DOMAIN ` is not set . Modern web browsers will `` SESSION_COOKIE_DOMAIN `` is not set . Modern web browsers will not allow rv = client.get ( '/ ' , 'http : //127.0.0.1:3000/ ' ) return self.url_map.bind_to_environ ( request.environ , .. _ # 2635 : https : //github.com/pallets/flask/pull/2635 app = flask.Flask ( __name__ , subdomain_matching=matching ) The ` host_matching ` and ` static_host ` parameters were added . server_name=self.config [ 'SERVER_NAME ' ] ) .. versionadded : : 0.13 subdomain route matching support . matching needs to be enabled manually now . Setting # in Werkzeug but it currently does not have that feature . for subdomain route matching support . with a `` static_folder `` configured . If `` False `` , the cookie 's domain will not be set . `` `` '' Creates a URL adapter for the given request . The URL adapter with a `` static_folder `` configured . : param host_matching : set `` url_map.host_matching `` attribute . def test_subdomain_matching_with_ports ( ) : `` hosts `` file . : : def test_blueprint_with_subdomain ( ) : is created at a point where the request context is not yet set # If subdomain matching is disabled ( the default ) , use the subdomain = ( ( self.url_map.default_subdomain or None ) def test_subdomain ( ) : rv = client.get ( '/ ' , 'http : //www.localhost.localdomain:3000/ ' ) matching . Use : attr : ` subdomain_matching ` instead . so the request is passed explicitly . Subdomain matching is disabled by default and setting not allow setting cookies for domains without a dot . To use a domain up so the request is passed explicitly . value . Defaults to False . The `` host_matching `` and `` static_host `` parameters were added . subdomain=subdomain ) : param host_matching : sets the app 's `` url_map.host_matching `` to the given Inform the application what host and port it is bound to . Required for def test_subdomain_matching_other_name ( matching ) : : param subdomain_matching : consider the subdomain relative to assert rv.status_code == 404 if matching else 204 add any names that should route to the app to your `` hosts `` file . : : to None . Required when using `` host_matching=True `` # default subdomain in all cases . This should be the default : data : ` SERVER_NAME ` does not implicitly enable it . client = app.test_client ( ) def test_subdomain ( app , client ) : def index ( ) : def test_subdomain_matching_with_ports ( app , client ) : server_name=self.config [ 'SERVER_NAME ' ] , def test_test_app_proper_environ ( ) : The `` subdomain_matching `` parameter was added . Subdomain locally , add any names that should route to the app to your","['CHANGES.rst', 'docs/config.rst', 'flask/app.py', 'tests/test_basic.py', 'tests/test_testing.py']",Merge pull request # 2635 from pallets/feature/server-name-routing
212,4a7db6647407de076daf31f1dd766388128f9a3d,2018-02-19 16:14:11-08:00,"Use : meth : ` CliRunner.invoke < click.testing.CliRunner.invoke > ` to call def __init__ ( self , app , * * kwargs ) : return cls ( self , * * kwargs ) # : .. versionadded : : 1.0 types . : : # : : class : ` ~flask.testing.FlaskCliRunner ` that is used by from click.testing import CliRunner runner.invoke ( hello_command , obj=script_info ) This is useful for testing complex validation rules and custom types . : : class FlaskCliRunner ( CliRunner ) : app.test_cli_runner_class = SubRunner class NS ( object ) : def test_cli_invoke ( app ) : runner = app.test_cli_runner ( ) method to call commands in the same way they would be called from the passed as the first argument . click.echo ( 'Hello , World ! ' ) Click comes with ` utilities for testing ` _ your CLI commands . if cls is None : from click.testing import CliRunner CLI commands . Typically created using In the example above , invoking the command by name is useful because it : class : ` ~flask.cli.ScriptInfo ` that knows how to load the Flask full method documentation . See : ref : ` testing-cli ` for examples . assert isinstance ( runner , FlaskCliRunner ) assert NS.called : return : a : class : ` ~click.testing.Result ` object . captures the output in a : class : ` ~click.testing.Result ` object . from flask.testing import make_test_environ_builder , FlaskCliRunner `` `` '' Invokes a CLI command in an isolated environment . See app being tested . if 'obj ' not in kwargs : commands in the same way they would be called from the command line . The result = runner.invoke ( args= [ 'hello ' ] ) from flask.testing import make_test_environ_builder method . This is useful for testing complex validation rules and custom .. autoclass : : FlaskCliRunner assert isinstance ( runner , SubRunner ) def hello_command ( ) : if cli is None : result = runner.invoke ( args= [ 'hello ' ] ) def test_cli_runner_class ( app ) : # : Flask app object as the first argument . CLI automatically . Use its : meth : ` ~flask.testing.FlaskCliRunner.invoke ` .. versionadded : : 1.0 that can invoke Flask CLI commands for testing . ( ` # 2636 ` _ ) class SubRunner ( FlaskCliRunner ) : NS.called = True : param cli : Command object to invoke . Default is the app 's def invoke ( self , cli=None , args=None , * * kwargs ) : kwargs [ 'obj ' ] = ScriptInfo ( create_app=lambda : self.app ) See : ref : ` testing-cli ` . def test_cli_custom_obj ( app ) : assert 'World ' in result.output super ( FlaskCliRunner , self ) .__init__ ( * * kwargs ) .. currentmodule : : flask.testing # : : meth : ` test_cli_runner ` . Its `` __init__ `` method should take a .. _ # 2636 : https : //github.com/pallets/flask/pull/2636 # invoke with command object : param args : List of strings to invoke the command with . : class : ` ~click.testing.CliRunner ` runs commands in isolation and Click comes with ` utilities for testing ` _ your CLI commands . A `` `` '' A : class : ` ~click.testing.CliRunner ` for testing a Flask app 's : meth : ` CliRunner.invoke < click.testing.CliRunner.invoke > ` for import click from flask.cli import ScriptInfo cli = self.app.cli `` `` '' called = False script_info = ScriptInfo ( create_app=create_app ) return app `` `` '' def create_app ( ) : # invoke the command directly cls = self.test_cli_runner_class verifies that the command was correctly registered with the app . assert 'Hello ' in result.output : class : ` ~flask.testing.FlaskCliRunner ` . The Flask app object is captures the output in a : class : ` ~click.testing.Result ` object . : : the command , use the command 's : meth : ` ~click.BaseCommand.make_context ` return super ( FlaskCliRunner , self ) .invoke ( cli , args , * * kwargs ) # or by name : class : ` ~flask.testing.FlaskCliRunner ` that passes the Flask app to the If the `` obj `` argument is not given , passes an instance of runner = app.test_cli_runner ( ) self.app = app : class : ` ~click.testing.CliRunner ` runs the command in isolation and def test_cli_runner ( self , * * kwargs ) : Returns an instance of : attr : ` test_cli_runner_class ` , by default test_cli_runner_class = None Flask provides : meth : ` ~flask.Flask.test_cli_runner ` to create a result = runner.invoke ( hello_command ) the command , use its : meth : ` ~click.BaseCommand.make_context ` method . # invoke with command name from flask.testing import FlaskCliRunner as cls : meth : ` ~flask.Flask.test_cli_runner ` . See : ref : ` testing-cli ` . # : The : class : ` ~click.testing.CliRunner ` subclass , by default : members : `` `` '' Create a CLI runner for testing CLI commands . : attr : ` ~flask.app.Flask.cli ` group . Test CLI Runner Added : meth : ` ~flask.Flask.test_cli_runner ` to create a Click runner # : runner = CliRunner ( ) pass command line . : :","['CHANGES.rst', 'docs/api.rst', 'docs/testing.rst', 'flask/app.py', 'flask/testing.py', 'tests/test_testing.py']",Merge pull request # 2636 from pallets/test-cli-runner
213,79f34f1769477d9909e4fe0830c48b04208c50fc,2018-02-13 10:33:08+09:00,"( see : class : ` werkzeug.test.EnvironBuilder ` for more information , this `` `` '' Creates a : class : ` ~flask.ctx.RequestContext ` from the given values `` `` '' Creates a WSGI environment from the given values ( see : class : ` werkzeug.test.EnvironBuilder ` for more information , this",['flask/app.py'],Merge pull request # 2630 from anowlcalledjosh/2627-test_request_context-docs
214,4309c7c6ea51e5797604c43ba858e5ebe1fb1674,2018-02-08 13:12:25-08:00,".. code : : bash make-release tox_template = `` '' '' [ tox ] flags=re.DOTALL | re.MULTILINE `` MethodView `` can inherit method handlers from base classes . ( ` # 1936 ` _ ) except ImportError : different parts . I recommend that you get started with depending on `` app.debug `` . No handlers are removed , and a handler is only CONTRIBUTORS `` AS IS '' AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , : class : ` ~views.MethodView ` subclasses inherit method handlers from Go to http : //flask.pocoo.org/docs/ for a prebuilt version ~~~~~~~~~~~~ line for line in lines tox_path = os.path.join ( checkout_path , 'tox-flask-test.ini ' ) fail ( 'Release date is not today ( % s ! = % s ) ' , ~~~~~~~~~~~~~~~~~~~~~ return tox_path # the Revised BSD License . instead . if what ! = 'module ' : from flask import json from setuptools.archive_util import unpack_archive ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT : copyright : © 2010 by the Pallets team . flask.logging flask_svc_url = 'http : //flask.pocoo.org/extensions/ ' change_info = next ( lineiter ) .strip ( ) `` ValueError `` for bad response types . The error messages have been Read more about ` Sphinx < http : //www.sphinx-doc.org > ` _ . from flask import Flask Christopher Grebs response in debug mode . ( ` # 2193 ` _ ) `` Flask.init_jinja_globals `` - extend `` Flask.create_jinja_environment `` yourapplication fd , filename = tempfile.mkstemp ( suffix='.html ' ) base classes . ( ` # 1936 ` _ ) register handlers . and sets it on : attr : ` ~Flask.url_map ` . ( ` # 1559 ` _ ) Change the default for : data : ` JSONIFY_PRETTYPRINT_REGULAR ` to upload-docs : yield ext 'env ' : ' , '.join ( interpreters ) , help='run against all extensions , not just approved ' ) Flask is developed and maintained by the Pallets team and community this software without specific prior written permission . Flask depends on two external libraries : the ` Jinja2 ` _ template .. code : : python for name in extensions : r ' ( ? : , codename ( . * ) ) ? ( ? i ) ' , change_info ) `` Cookie `` is added to the response 's `` Vary `` header if the session is notice , this list of conditions and the following disclaimer in the create_tdir ( ) return results copyright notice , this list of conditions and the following ~~~~~~~~~~~~~~~~~ will be passed . ( ` # 2319 ` _ ) ( ` # 2354 ` _ ) from jinja2 import Template .. _ # 1559 : https : //github.com/pallets/flask/issues/1559 COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , ` Jinja2 Documentation < http : //jinja.pocoo.org/docs > ` _ $ pytest `` Request.module `` - use : attr : ` Request.blueprint ` instead . The dev server now uses threads by default . ( ` # 2529 ` _ ) assert b '' Hello World ! '' in rv.data build ( ) deps= parser.add_argument ( ' -- browse ' , dest='browse ' , action='store_true ' , self.version = fetch ( 'version ' ) _version_re = re.compile ( r'__version__\s+=\s+ ( . * ) ' ) : copyright : © 2010 by the Pallets team . tests.test_user_error_handler automatically for us . Support passing a : class : ` ~werkzeug.test.EnvironBuilder ` or except Exception : complex applications . It began as a simple wrapper around ` Werkzeug ` _ default when it was set to `` None `` . _tempdir = '/private/tmp ' : class : floatingflask import argparse < h2 > Summary < /h2 > from datetime import datetime , date Justin Quick def get_test_command ( checkout_dir ) : < th > Author items.sort ( key=lambda x : x.name.lower ( ) ) parts = [ int ( i ) for i in version.split ( ' . ' ) ] THIS SOFTWARE AND DOCUMENTATION , EVEN IF ADVISED OF THE POSSIBILITY OF Errors caused while opening the session at the beginning of the ask on the mailinglist : http : //flask.pocoo.org/mailinglist/ session that the containing view uses . ( ` # 2354 ` _ ) Marian Sigler : attr : ` Flask.error_handler_spec ` , use : meth : ` Flask.errorhandler ` to tr.failed { background : # F5D2CB ; } all { { 'approved ' if approved } } Flask extensions . `` FLASK_APP `` can point to local packages that are not installed in dev mode , # not invoke the command from the shell so we have no chance change_info = lineiter.next ( ) .strip ( ) tox h1 { font-size : 30px ; margin : 15px 0 5px 0 ; } < td > { { result.author } } Set `` APPLICATION_ROOT = '/ ' `` by default . This was already the implicit h3 { font-size : 19px ; margin : 15px 0 5px 0 ; } results = { } `` `` `` `` `` `` `` `` `` `` `` ` adding OPTIONS method when the `` view_func `` argument is not a class . Welcome to Flask 's documentation . This documentation is divided into @ app.route ( `` / '' ) argument to disable adding the `` OPTIONS `` method . ( ` # 1489 ` _ ) The `` request.json `` property is no longer deprecated . ( ` # 1421 ` _ ) : attr : ` ~views.View.provide_automatic_options ` is set in and : class : ` Response ` classes . This adds the : meth : ` ~Response.is_json ` accessed at all during the request ( and it was n't deleted ) . ( ` # 2288 ` _ ) Allow registering new tags with `` TaggedJSONSerializer `` to support use `` @ app.errorhandler `` to register handlers . ` Werkzeug documentation < http : //werkzeug.pocoo.org/docs > ` _ % interpreters [ 0 ] ) from __future__ import print_function < th > License Add `` json `` keyword argument for the test client request methods . `` Cookie `` is added to the response 's `` Vary `` header if the session libraries they want to use . There are many extensions provided by the Blueprint view function names may not contain dots . ( ` # 2450 ` _ ) Popen ( [ 'git ' , 'tag ' ] , stdout=PIPE ) .communicate ( ) [ 0 ] .splitlines ( ) a parameter named `` script_info `` , the : class : ` ~cli.ScriptInfo ` object return 'Hello , World ! ' ] f.write ( tox_template % { development server on the command line . This avoids some behavior that generators to access the same session that the containing view uses . different ones depending on : attr : ` Flask.debug ` . No handlers are Change default configuration `` JSONIFY_PRETTYPRINT_REGULAR=False `` . < h2 > Test Logs < /h2 > try : def cut_module_meta ( app , what , name , obj , options , lines ) : various contributors : self.logs [ interpreter ] = open ( logfile ) .read ( ) BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND Ali Afshar Larger App Tests root = os.path.join ( tdir , name ) os.mkdir ( tdir ) # its Revised BSD License . Copyright © 2015 CERN . return os.path.join ( distfolder , os.listdir ( distfolder ) [ 0 ] ) : meth : ` Flask.create_jinja_environment ` instead . ===== CHANGES.rst merge=union Auto-detect zero-argument app factory called `` create_app `` or log ( 'Packaging Flask ' ) results = run_tests ( extensions , [ x.strip ( ) for x in args.env.split ( ' , ' ) ] ) Adrian Mönnich ( ThiefMaster ) Fix a `` ValueError `` caused by invalid Range requests in some cases . if lineiter.next ( ) .count ( '- ' ) ! = len ( match.group ( 0 ) ) : $ ( MAKE ) -C docs html dirhtml latex epub Blueprints gained : attr : ` ~Blueprint.json_encoder ` and .. _Jinja : https : //www.palletsprojects.com/p/jinja/ and Jinja2 . It 's intended for getting started very quickly os.environ [ 'PYTHONDONTWRITEBYTECODE ' ] = `` f.write ( test_command + ' & > `` $ 1 '' < /dev/null\n ' ) `` app.logger `` has been simplified . `` LOGGER_NAME `` and Flask is Fun ~ What is Flask ? if os.path.isfile ( checkout_dir + '/Makefile ' ) : webbrowser.open ( 'file : /// ' + filename.lstrip ( '/ ' ) ) debug . checkout_path = checkout_extension ( name ) parameter named `` script_info `` , the `` ScriptInfo `` object will be passed . # afterall . Set : data : ` APPLICATION_ROOT ` to `` '/ ' `` by default . This was already : meth : ` ~views.View.as_view ` , to be detected by ~ Where are the docs ? exception if you do n't want to traverse the MRO . ( ` # 2362 ` _ ) return 'Hello World ! ' } ) log ( 'Testing % s ' , name ) `` `` '' check : attr : ` Flask.debug ` each time . Only one format is used , not to make getting started quick and easy , with the ability to scale up to : copyright : ( c ) 2015 by the Flask Team , see AUTHORS for more details . Keyan Pishdadian distribute if ext [ 'approved ' ] or not only_approved : Blueprint Example < https : //github.com/pallets/flask/zipball/master # egg=Flask-dev > ` _ `` `` '' Remove metadata from autodoc output . '' '' '' only_approved = False FLASK_APP=myproject.app : create_app ( 'dev ' ) support . env : TOXENV=py , simplejson , devel , lowest , codecov , docs-html address , as these may not behave properly in some browsers , such as < /table > : meth : ` ~Flask.handle_url_build_error ` . ( ` # 2017 ` _ ) ( ` # 2416 ` _ ) here . If you want to dive into their documentation , check out the unpack_archive ( checkout_path , root ) When passing a full URL to the test client , use the scheme in the URL instead # Good that you 're asking . The tests are in the Flask depends on the ` Jinja ` _ template engine and the ` Werkzeug ` _ WSGI Blueprint Example Tests `` Flask.init_jinja_globals `` - extend body { font-family : 'Georgia ' , serif ; font-size : 17px ; color : # 000 ; } if os.path.isfile ( logfile ) : log ( 'Running tests with tox in % s ' , checkout_path ) request are handled by the app 's error handlers . ( ` # 2254 ` _ ) USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON pass brew install python3 redis memcached ; * The names of the contributors may not be used to endorse or bad response types . The error messages have been improved to describe why the 'Release date is not today ( % s ! = % s ) ' , rsync -a docs/_build/flask-docs.zip flow.srv.pocoo.org : /srv/websites/flask.pocoo.org/docs/flask-docs.zip for interpreter in interpreters : Skip : meth : ` app.run < Flask.run > ` when a Flask application is run from `` FLASK_APP `` can be set to an app factory , with arguments if needed , { % - for iptr , _ in result.logs|dictsort % } def test_extension ( name , interpreters , flask_dep ) : ~~~~~~~~~~ rv = subprocess.call ( [ 'tox ' , '-c ' , 'tox-flask-test.ini ' ] , cwd=checkout_path ) $ ( MAKE ) -C docs/_build/latex all-pdf # actually memorable . assert b '' Hello World ! '' in rv.data improved to describe why the type is invalid . ( ` # 2256 ` _ ) rsync -a docs/_build/epub/Flask.epub flow.srv.pocoo.org : /srv/websites/flask.pocoo.org/docs/flask-docs.epub rsync -a docs/_build/latex/Flask.pdf flow.srv.pocoo.org : /srv/websites/flask.pocoo.org/docs/flask-docs.pdf Matt Campell `` LOGGER_HANDLER_POLICY `` config was removed . The logger is always named @ echo 'Do not mind `` Invalid value for ... '' CSS errors if .mobi renders . ' ) All dependencies are installed by using ` pip install Flask ` . Joshua Bronson @ jab extensions = [ args.extension ] c.wait ( ) py are : `` app , code `` , `` blueprint , exception `` , `` app , exception `` . ( ` # 2314 ` _ ) rsync -a docs/_build/dirhtml/ flow.srv.pocoo.org : /srv/websites/flask.pocoo.org/docs/ # ebook-convert docs : http : //manual.calibre-ebook.com/cli/ebook-convert.html Pass `` _scheme `` argument from `` url_for `` to `` handle_build_error `` . Besides the quickstart , there is also a more detailed : ref : ` tutorial ` that inject_version , f.read ( ) , following links : contents = re.sub ( r '' ^ ( \s * % s\s * =\s * ' ) ( .+ ? ) ( ' ) ( ? sm ) '' % pattern , JSON response much easier . ( ` # 2358 ` _ ) ~~~~~~~~~~~~~~~~ * Issue tracker : https : //github.com/pallets/flask/issues def build_and_upload ( ) : Jeff Widman @ jeffwidman `` SESSION_COOKIE_DOMAIN `` is set if it is detected through : meth : ` Flask.__init__ < Flask > ` accepts the `` static_host `` argument `` FLASK_APP `` can point to local packages that are not installed in def setup ( app : Sphinx ) : env : TOXENV=py from `` .env `` and `` .flaskenv `` files if python-dotenv is installed . The `` flask `` command and : meth : ` Flask.run ` will load environment ` Werkzeug Documentation < http : //werkzeug.pocoo.org/docs > ` _ Add support for `` provide_automatic_options `` in `` add_url_rule `` to disable SUCH DAMAGE . ~~~~~~~~~~~~~~~~~~~~~~~ pytest EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , < table class=results > a : hover { color : # 6D4100 ; } th { background : # eee ; font-weight : normal ; } `` Flask.request_globals_class `` - use < pre > { { log } } < /pre > This page contains the detailed test results for the test run of is accessed at all during the request ( and not deleted ) . ( ` # 2288 ` _ ) < td > { { result.version } } if __name__ == '__main__ ' : build_and_upload ( ) and passes it as the `` host `` argument when defining the static route . tests/ folder . To run the tests use the Flask is a lightweight ` WSGI ` _ web application framework . It is designed version , codename , release_date.strftime ( ' % d/ % m/ % Y ' ) David Lord ( davidism ) release_date.date ( ) , date.today ( ) Loading config files with `` silent=True `` will ignore else : Allow registering new tags with complete installation and usage instructions . class TestResult ( object ) : < /tr > Flask if result.success : Links notice , this list of conditions and the following disclaimer . textarea , code , < thead > this list of conditions and the following disclaimer . ( ` # 2412 ` _ ) .. _pip : https : //pip.pypa.io/en/stable/quickstart/ with io.open ( 'flask/__init__.py ' , 'rt ' , encoding='utf8 ' ) as f : path = os.path.join ( root , fn ) shutil.rmtree ( tdir ) * Releases : https : //pypi.org/project/Flask/ # This file was part of Flask-CLI and was modified under the terms of `` View.as_view `` , to be detected in `` app.add_url_rule `` . ( ` # 2316 ` _ ) application frameworks . application . ( ` # 2259 ` _ ) : meth : ` ~Flask.add_url_rule ` . ( ` # 2316 ` _ ) .. _Jinja2 : http : //jinja.pocoo.org/ print ( ' [ EXTTEST ] ' + ( msg % args ) ) log ( 'Test command : % s ' , test_command ) as documentation , with or without modification , are permitted provided < h3 id= '' { { result.name } } - { { iptr } } '' > def create_tox_ini ( checkout_path , interpreters , flask_dep ) : before_install : Template auto reloading will honor the `` run `` command 's `` debug `` flag even `` False `` . : func : ` ~json.jsonify ` returns a compact format by default , `` SESSION_COOKIE_DOMAIN `` is set if it is detected through `` SERVER_NAME `` . The development server uses threads by default . ( ` # 2529 ` _ ) `` dict `` to : meth : ` test_client.open < werkzeug.test.Client.open > ` . ' '' r '' ^ ( \s * % s\s * =\s * ' ) ( .+ ? ) ( ' ) '' % pattern , description= ' A simple framework for building complex web applications . ' , * Redistributions of source code must retain the above copyright [ testenv ] % ( deps ) s match = re.search ( r'released on ( \w+\s+\d+\w+\s+\d+ ) ' parameters for use when building base URL . ( ` # 1621 ` _ ) d = urllib2.urlopen ( req ) .read ( ) ( ` # 2314 ` _ ) yield ext [ 'name ' ] maintainer='Pallets team ' , : alt : Flask : web development , one drop at a time self.success = statuscode == 0 pre { padding : 7px 15px ; line-height : 1.3 ; } if os.path.isdir ( path ) : Change `` Flask.__init__ `` to accept two new keyword arguments , Installing if args.extension is not None : only_approved = not args.all Removed error handler caching because it caused unexpected results for some # : because the request was never internally bound . : alt : Flask : web development , one drop at a time long_description=__doc__ , override the app 's encoder and decoder . ( ` # 1898 ` _ ) Chrome . ( ` # 2282 ` _ ) provided that the following conditions are met : def render_results ( results , approved ) : h2 { font-size : 24px ; margin : 15px 0 5px 0 ; } contributors may be used to endorse or promote products derived from app = Flask ( __name__ ) < th > Extension ( `` # 1559 `` ) help='show browser with the result summary ' ) for more details . . ~/py-env/bin/activate ; import io td , th { border : 1px solid black ; padding : 4px 10px ; Links `` `` `` `` `` `` `` `` Only open the session if the request has not been pushed onto the context And Easy to Setup Flask Extension Tests Extract JSON handling to a mixin applied to both the request and response that the following conditions are met : import webbrowser # This file was part of Flask-CLI and was modified under the terms its license , RESULT_TEMPATE = u '' '\ `` TRAP_BAD_REQUEST_ERRORS `` is enabled by default in debug mode . break contributors . It was created by Armin Ronacher . The core maintainers removed , and a handler is only added if no handlers are already We encourage you to use a virtualenv . Check the docs for shows how to create a complete ( albeit small ) application with Flask . If return 'python setup.py test ' Dan Sully # OS X has awful paths when using mkstemp or gettempdir ( ) . I do n't self.logs = { } Template auto reloading will honor debug mode even even if release = egg_info -RDb `` tdir = _tempdir + '/flaskext-test ' self.folder = folder already widely used . Consider the API to slightly else : path = None import sys CONTRIBUTORS `` AS IS '' AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT import urllib2 def __init__ ( self , name , folder , statuscode , interpreters ) : if `` app.jinja_env `` was already accessed . ( ` # 2373 ` _ ) c = subprocess.Popen ( [ intrptr , 'setup.py ' , project layout . It is up to the developer to choose the tools and : copyright : ( c ) 2015 by Ali Afshar . OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , of the `` PREFERRED_URL_SCHEME `` . ( ` # 2430 ` _ ) app = Flask ( __name__ ) more detailed : ref : ` tutorial ` that shows how to create a small but `` BadRequestKeyError `` has a message with the bad key in debug mode < td > < a href= '' # { { result.name } } - { { iptr } } '' > see log < /a > return import sys create_tox_ini ( checkout_path , interpreters , flask_dep ) a { color : # 004B6B ; } background : # eee ; } ( ` # 2223 ` _ ) text-align : left ; } of the generic bad request message . ( ` # 2348 ` _ ) os : osx Georg Brandl ( ` # 2017 ` _ ) ( ` # 2526 ` _ ) from subprocess import Popen , PIPE CHANGES merge=union the static route to be properly associated with the required host . python_requires= ' > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * ' , < /tbody > match = re.search ( : attr : ` ~Flask.jinja_env ` was already accessed . ( ` # 2373 ` _ ) @ echo 'Requires X-forwarding for Qt features used in conversion ( ssh -X ) . ' print ( 'Results written to { } '.format ( filename ) ) Michael van Tellingen Tests the Blueprint example app log ( 'Downloaded to % s ' , path ) from setuptools.package_index import PackageIndex Build the docs in the `` docs `` directory using Sphinx : : : data : ` ~errno.ENOTDIR ` errors . ( ` # 2581 ` _ ) # figure out the test command and write a wrapper script . We log ( 'Extension test succeeded ' ) ( ` # 2358 ` _ ) # to trick py.test ( if used ) into not guessing widths from the See http : //flask.pocoo.org/community/ for more resources . import subprocess self.author = fetch ( 'author ' ) os.fdopen ( fd , ' w ' ) .write ( rv.encode ( 'utf-8 ' ) + '\n ' ) Auto-detect zero-argument app factory called `` create_app `` or `` make_app `` version = str ( ast.literal_eval ( _version_re.search ( Adam Zapletal version , codename , release_date.strftime ( ' % d/ % m/ % Y ' ) ) virtualenv -p python3 ~/py-env ; type is invalid . ( ` # 2256 ` _ ) ( ` # 2414 ` _ ) toolkit . The documentation for these libraries can be found at : parser.add_argument ( ' -- extension= ' , dest='extension ' , default=None , long_description=readme , else : Development Lead 'cache ' : tdir , Zhao Xiaohong test_command = get_test_command ( checkout_path ) Stephane Wirtel although ` pip install -e ` should still be preferred . ( ` # 2414 ` _ ) Details on contributing can be found in CONTRIBUTING.rst def log ( msg , * args ) : * ` website < http : //flask.pocoo.org/ > ` _ Blueprint view function name may not contain dots . ( ` # 2450 ` _ ) table { border : 1px solid black ; border-collapse : collapse ; 'Bitstream Vera Sans Mono ' , monospace ! important ; font-size : 15px ; Make `` app.run ( ) `` into a noop if a Flask application is run from the Fix a `` ValueError `` caused by invalid `` Range `` requests in some make targets `` `` ` was confusing to debug for newcomers . : ref : ` patterns ` section . $ pip install Flask : meth : ` Flask.__init__ < Flask > ` accepts the `` host_matching `` argument SOFTWARE AND DOCUMENTATION , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH : meth : ` ~Flask.add_url_rule ` accepts the `` provide_automatic_options `` < td > { { result.license } } .. code-block : : python try : { % - for iptr , log in result.logs|dictsort % } handled by the app 's error handlers . ( ` # 2254 ` _ ) NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS self.logs [ interpreter ] = `` ( ` # 2319 ` _ ) p { line-height : 1.4 ; } well as documentation , with or without modification , are permitted Popen ( [ sys.executable , 'setup.py ' , 'release ' , 'sdist ' , 'bdist_wheel ' , 'upload ' ] ) .wait ( ) info ( readme = f.read ( ) The : class : ` ~views.View ` class attribute storing other types in the session cookie . ( ` # 2352 ` _ ) Matthew Frazier env : TOXENV=docs-html variables from `` .env `` and `` .flaskenv `` files if python-dotenv is Loading config files with `` silent=True `` will ignore `` ENOTDIR `` Edmond Burnett * Redistributions of source code must retain the above copyright notice , ~~~~~~~~~~~~~ ( ` # 1559 ` _ ) in the session cookie . ( ` # 2352 ` _ ) Flask is written and maintained by Armin Ronacher and _tempdir = tempfile.gettempdir ( ) tests.test_logging `` LOGGER_HANDLER_POLICY `` config was removed . The logger is always if sys.platform == 'darwin ' : data = json.loads ( d ) ' -- ' + field ] , cwd=folder , with the distribution . def main ( ) : Tests the Flask extensions . `` View.provide_automatic_options = True `` is set on the view function from dev_version = bump_version ( version ) + '-dev ' exception inheritance hierarchies . Register handlers explicitly for each engine and the ` Werkzeug ` _ WSGI toolkit . These libraries are not documented `` host_matching `` and `` static_host `` . This enables `` host_matching `` to be make html `` app.debug `` each time . Only one format is used , not different ones % interpreter ) parts = map ( int , version.split ( ' . ' ) ) content type . ( ` # 2358 ` _ ) Ready for production ? ` Read this first < http : //flask.pocoo.org/docs/deploying/ > ` . `` BadRequestKeyError `` has a message with the bad key in debug mode instead < th > Version Extract JSON handling to a mixin applied to both the : class : ` Request ` `` `` `` `` `` `` `` `` ` pre { font-family : 'Consolas ' , 'Menlo ' , 'Deja Vu Sans Mono ' , Copyright © 2010 by the Pallets team . return 'make test ' web development , one drop at a time fi ~~~~~~~~~~~~~~ A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT OWNER { % - for result in results % } for each exception if you want to avoid traversing the MRO . ( ` # 2362 ` _ ) installed . ( ` # 2416 ` _ ) cmd = [ sys.executable , 'setup.py ' , 'sdist ' , 'bdist_wheel ' ] Blueprints gained `` json_encoder `` and `` json_decoder `` attributes to pytest-cov It 's still not 1.0 but it 's shaping up nicely and is def hello ( ) : Adam Byrtek // Flask // The `` flask `` command and `` app.run `` will load environment variables using `` Request.module `` - use `` Request.blueprint `` instead . Daniel Neuhäuser * Test coverage : https : //codecov.io/gh/pallets/flask # virtualenv hack * cough * # - * - coding : utf-8 - * .. _Werkzeug : http : //werkzeug.pocoo.org/ if not line.startswith ( ( ' : copyright : ' , ' : license : ' ) ) : meth : ` ~Flask.test_request_context ` accepts `` subdomain `` and Add `` routes `` CLI command to output routes registered on the used instead of : data : ` PREFERRED_URL_SCHEME ` . ( ` # 2430 ` _ ) import tempfile distfolder = tdir + '/.flask-dist ' `` make_app `` from `` FLASK_APP `` . ( ` # 2297 ` _ ) approved=approved ) fail ( 'You need to install the wheel package . ' ) : class : floatingflask of the current documentation . Otherwise build them yourself f.read ( ) .decode ( 'utf-8 ' ) ) .group ( 1 ) ) ) and an indented format in debug mode . ( ` # 2193 ` _ ) Factory functions are not required to take a `` script_info `` parameter to Add `` json `` keyword argument for the test client request methods . This will { % - endfor % } Flask is a microframework for Python based on Werkzeug , Jinja 2 and good < style type=text/css > : ref : ` patterns ` section . The rest of the docs desribe each component of `` test_client.open `` . ( ` # 2412 ` _ ) < td > { { outcome } } import os the response to make testing JSON response much easier . ( ` # 2358 ` _ ) * Test status : logfile = os.path.join ( folder , '.tox/ % s/log/test.log ' # invoking terminal . from sphinx.application import Sphinx And run it : the implicit default when it was set to `` None `` . { % - endfor % } cases . ( ` # 2526 ` _ ) parser.add_argument ( ' -- env ' , dest='env ' , default='py25 , py26 , py27 ' , `` FLASK_APP `` can be set to an app factory , with arguments if needed , for log ( 'Temporary Environment : % s ' , tdir ) context stack yet . This allows : func : ` ~stream_with_context ` `` SERVER_NAME `` . ( ` # 2282 ` _ ) some exception inheritance hierarchies . Register handlers explicitly dump the given object as JSON and set the appropriate content type . cd docs David Lord @ davidism with open ( tox_path , ' w ' ) as f : import wheel # noqa : F401 .. _Werkzeug : https : //www.palletsprojects.com/p/werkzeug/ : func : ` send_file ` supports Unicode in `` attachment_filename `` . # ca n't write that directly into the tox ini because tox does Either use the # pocoo IRC channel on irc.freenode.net or parser.add_argument ( ' -- all ' , dest='all ' , action='store_true ' , Blueprint Example Tests Removed error handler caching because it caused unexpected results for for example `` FLASK_APP=myproject.app : create_app ( 'dev ' ) `` . ( ` # 2326 ` _ ) < th > { { iptr } } * Linux , Mac : https : //travis-ci.org/pallets/flask parser = argparse.ArgumentParser ( description='Runs Flask extension tests ' ) _date_clean_re = re.compile ( r ' ( \d+ ) ( st|nd|rd|th ) ' ) encoder and decoder . ( ` # 1898 ` _ ) if args.browse : ~~~~~~~~~~~~~~~~ { % - endfor % } example `` FLASK_APP=myproject.app : create_app ( 'dev ' ) `` . ( ` # 2326 ` _ ) : class : ` ~json.tag.TaggedJSONSerializer ` to support storing other types return c.communicate ( ) [ 0 ] .strip ( ) < th > Outcome main ( ) log ( 'Downloading extension % s to temporary folder ' , name ) if next ( lineiter ) .count ( '- ' ) ! = len ( match.group ( 0 ) ) : def fetch ( field ) : Install and update using ` pip ` _ : ` Jinja documentation < http : //jinja.pocoo.org/docs > ` _ { % set outcome = 'success ' if result.success else 'failed ' % } < h1 > Flask-Extension Test Results < /h1 > Only open the session if the request has not been pushed onto the ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Helper script that performs a release . Does pretty much everything prior written permission . 'Releasing % s ( codename % s , release date % s ) ' , f = open ( checkout_path + '/flaskext-runtest.sh ' , ' w ' ) ( ` # 2282 ` _ ) Thomas Schranz Kenneth Reitz brew update ; and ` Jinja ` _ and has become one of the most popular Python web for ext in data [ 'extensions ' ] : : attr : ` ~Blueprint.json_decoder ` attributes to override the app 's extensions = iter_extensions ( only_approved ) with open ( 'flask/__init__.py ' , 'rb ' ) as f : # ! /usr/bin/env python ~~~~~~~~~~~~ promote products derived from this software without specific return filename PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR result = test_extension ( name , interpreters , flask_dep ) if __name__ == `` __main__ '' : git shortlog -sne : data : ` TRAP_BAD_REQUEST_ERRORS ` is enabled by default in debug mode . Redistribution and use in source and binary forms of the software as < /thead > Chris Grindstaff The : attr : ` Request.json ` property is no longer deprecated . ( ` # 1421 ` _ ) PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF return 'Hello World ! ' { % - for iptr , _ in results [ 0 ] .logs|dictsort % } help='tests a single extension ' ) if not os.path.exists ( tox_path ) : import ast ` pytest ` testing tool : flask_dep = package_flask ( ) def create_tdir ( ) : ~ What do I need ? def run_tests ( extensions , interpreters ) : return TestResult ( name , checkout_path , rv , interpreters ) r'released on ( \w+\s+\d+\w+\s+\d+ ) ( ? : , codename ( . * ) ) ? ' , app.connect ( 'autodoc-process-docstring ' , cut_module_meta ) inject_version , f.read ( ) ) * Neither the name of the copyright holder nor the names of its to work with the `` flask `` command . If they take a single parameter or @ echo 'Using .epub from ` make upload-docs ` to create .mobi . ' 'deps ' : flask_dep * ` development version return path fail ( fast_finish : true flaskdir = os.path.abspath ( os.path.join ( os.path.dirname ( __file__ ) , ' .. ' ) ) named `` flask.app `` . The level is only set on first access , it does n't ) tests.test_json_tag def fetch_extensions_list ( ) : # care about security or clashes here , so pick something that is items = results.values ( ) added if no handlers are already configured . ( ` # 2436 ` _ ) `` `` '' Pass `` _scheme `` argument from : func : ` url_for ` to ~ Where can I get help ? < title > Flask-Extension Test Results < /title > < /style > This will dump the given object as JSON and set the appropriate filename = render_results ( results , only_approved ) < tr class= { { outcome } } > * Redistributions in binary form must reproduce the above yourapplication.views Simon Sapin * ` documentation < http : //flask.pocoo.org/docs/ > ` _ : license : BSD , see LICENSE for more details . `` app.test_request_context ( ) `` take `` subdomain `` and `` url_scheme `` `` app , code `` , `` blueprint , exception `` , `` app , exception `` . work with the `` flask `` command . If they take a single parameter or a with io.open ( 'README.rst ' , 'rt ' , encoding='utf8 ' ) as f : FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE `` url_scheme `` arguments for use when building the base URL . ~ Where are the tests ? release_date.date ( ) , date.today ( ) ) return ' ? ' Save in a hello.py : < tbody > info ( 'Releasing % s ( codename % s , release date % s ) ' , url='https : //www.palletsprojects.com/p/flask/ ' , * Website : https : //www.palletsprojects.com/p/flask/ classes used by Flask . This adds the `` is_json `` and `` get_json `` methods to * Code : https : //github.com/pallets/flask Armin Ronacher < armin.ronacher @ active-4.com > Flask is a microframework for Python based on Werkzeug include Makefile CHANGES.rst LICENSE AUTHORS tox.ini : copyright : ( c ) 2016 by the Flask Team , see AUTHORS for more details . Factory functions are not required to take a `` script_info `` parameter LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING A full list of contributors is available from git with : : ( ` # 1489 ` _ ) . from __future__ import print_function Errors caused while opening the session at the beginning of the request are : attr : ` Flask.app_ctx_globals_class ` instead . : license : BSD , see LICENSE for more details . return `` Hello World ! '' # if there is a tox.ini , remove it , it will cause troubles os : linux version = re.search ( r'__version__ = \ ' ( . * ? ) \ '' , f.read ( ) ) .group ( 1 ) def hello ( ) : Copyright ( c ) 2015 by Armin Ronacher and contributors . See AUTHORS < p > { % - for result in results % } string = _date_clean_re.sub ( r'\1 ' , string ) $ FLASK_APP=hello.py flask run : copyright : ( c ) 2015 by Armin Ronacher . def checkout_extension ( name ) : f.close ( ) Open `` _build/html/index.html `` in your browser to view the docs . help='the tox environments to run against ' ) try : .. code-block : : text `` send_file `` supports Unicode in `` attachment_filename `` . ( ` # 2223 ` _ ) configured . ( ` # 2436 ` _ ) * Redistributions in binary form must reproduce the above copyright < ! doctype html > rv = Template ( RESULT_TEMPATE , autoescape=True ) .render ( results=items , stack yet . This allows `` stream_with_context `` generators to access the same Flask in detail , with a full reference in the : ref : ` api ` section . { { result.name } } - { { result.version } } [ { { iptr } } ] < /h3 > req = urllib2.Request ( flask_svc_url , headers= { 'accept ' : 'application/json ' } ) ~~~~~~~~~~~~~~~ and then get an overview with the : ref : ` quickstart ` . There is also a `` Flask.make_response `` raises `` TypeError `` instead of `` ValueError `` for instead of the generic bad request message . ( ` # 2348 ` _ ) ebook : # : because the request was never internally bound . language : generic `` jsonify ( ) `` method returns compressed response by default , and pretty pip install -U Flask < th > { { result.name } } Florent Xicluna def iter_extensions ( only_approved=True ) : set properly by the time the constructor adds the static route , and enables ~~~~~~~~~~~~~~~~~~~~~ Add `` routes `` CLI command to output routes registered on the application . Welcome to Flask 's documentation . Get started with : ref : ` installation ` < p > Detailed test logs for all tests on all platforms : description= ' A microframework based on Werkzeug , Jinja2 ' editable mode , although `` pip install -e `` is still preferred . the command line . This avoids some behavior that was confusing to checkout_path = PackageIndex ( ) .download ( name , root ) ~ Is it ready ? from subprocess import PIPE , Popen `` `` `` `` `` `` 'and good intentions ' , .. code-block : : none flask.json string = _date_strip_re.sub ( `` , string ) url='https : //github.com/pallets/flask/ ' , `` Flask.error_handlers `` - tracked by `` Flask.error_handler_spec `` , A Simple Example from flask import Flask from `` FLASK_APP `` . ( ` # 2297 ` _ ) you 'd rather dive into the internals of Flask , check out `` Flask.error_handlers `` - tracked by < tr > release = egg_info -Db `` include Makefile CHANGES LICENSE AUTHORS tox.ini address , as these may not behave properly in some browsers , such as Chrome . NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF if [ [ `` $ TRAVIS_OS_NAME '' == `` osx '' ] ] ; then .. _WSGI : https : //wsgi.readthedocs.io ( ` # 2259 ` _ ) Ron DuPlain `` Flask.static_path `` - use : attr : ` Flask.static_url_path ` instead . os.mkdir ( root ) Sebastien Estienne Redistribution and use in source and binary forms of the software as well stdout=subprocess.PIPE ) intentions . And before you ask : It 's BSD licensed ! for fn in os.listdir ( root ) : $ python hello.py Building the docs disclaimer in the documentation and/or other materials provided Chris Edgemon commands=bash flaskext-runtest.sh { envlogdir } /test.log @ echo 'Command ` ebook-covert ` is provided by calibre package . ' def package_flask ( ) : documentation and/or other materials provided with the distribution . # for us . Remove it if present , we are running tox ourselves return set ( * Running on http : //localhost:5000/ `` Flask.static_path `` - use `` Flask.static_url_path `` instead . from the sphinx sources in the docs folder . : meth : ` Flask.make_response ` raises `` TypeError `` instead of ) * Running on http : //localhost:5000/ ' -- dist ' , distfolder ] , cwd=flaskdir ) When passing a full URL to the test client , the scheme in the URL is envlist= % ( env ) s INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT improve over time but we do n't plan on breaking it . else : self.statuscode = statuscode Hsiaoming Yang @ lepture errors . ( ` # 2581 ` _ ) : ref : ` installation ` and then head over to the : ref : ` quickstart ` . Flask offers suggestions , but does n't enforce any dependencies or c = subprocess.Popen ( [ 'python ' , 'setup.py ' , 'sdist ' , ' -- formats=gztar ' , log ( 'Running extension tests ' ) _date_strip_re = re.compile ( r ' ( ? < =\d ) ( st|nd|rd|th ) ' ) downloadcache= % ( cache ) s # to pipe the output into a logfile . The /dev/null hack is cd docs/_build/ ; mv html flask-docs ; zip -r flask-docs.zip flask-docs ; mv flask-docs html Marcus Unterwaditzer ( untitaker ) pip install -q -e . [ test ] # - * - coding : utf-8 - * env : TOXENV=py , simplejson , devel , lowest , codecov Support passing an existing `` EnvironBuilder `` or `` dict `` to ssh -X pocoo.org ebook-convert /var/www/flask.pocoo.org/docs/flask-docs.epub /var/www/flask.pocoo.org/docs/flask-docs.mobi -- cover http : //flask.pocoo.org/docs/_images/logo-full.png -- authors 'Armin Ronacher ' return set ( Popen ( [ 'git ' , 'tag ' ] , stdout=PIPE ) .communicate ( ) [ 0 ] .splitlines ( ) ) Flask community that make adding new functionality easy . : attr : ` Flask.logger ` has been simplified . `` LOGGER_NAME `` and margin : 15px 0 ; } Popen ( cmd ) .wait ( ) Armin Ronacher ( mitsuhiko ) flags=re.IGNORECASE self.name = name * Windows : https : //ci.appveyor.com/project/pallets/flask tr.success { background : # D3F5CC ; } contents = re.sub ( dev_version = bump_version ( version ) + '.dev ' and was developed with best intentions in mind . Martijn Pieters change_info , log ( 'Extension test failed ' ) .. currentmodule : : flask `` flask.app `` . The level is only set on first access , it does n't check `` make `` targets app.run ( ) args = parser.parse_args ( ) and : meth : ` ~Response.get_json ` methods to the response to make testing lines [ : ] = [ the : ref : ` api ` documentation . Common patterns are described in the from datetime import date , datetime self.license = fetch ( 'license ' ) `` Flask.request_globals_class `` - use `` Flask.app_ctx_globals_class `` Patches and Suggestions for ext in fetch_extensions_list ( ) : complete application with Flask . Common patterns are described in the import shutil # Copyright ( C ) 2015 CERN . ~~~~~~~~~~~~~~~~~~~ DAMAGE . intrptr = os.path.join ( folder , '.tox/ % s/bin/python ' def build ( ) : h1 , h2 , h3 { font-family : 'Garamond ' , 'Georgia ' , serif ; font-weight : normal ; } except OSError : ( ` # 1621 ` _ ) results [ name ] = result NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR python : 3.6","['.gitattributes', '.travis.yml', 'AUTHORS', 'CHANGES.rst', 'CONTRIBUTING.rst', 'LICENSE', 'MANIFEST.in', 'Makefile', 'README', 'README.rst', 'docs/conf.py', 'docs/index.rst', 'examples/blueprintexample/blueprintexample.py', 'examples/blueprintexample/test_blueprintexample.py', 'examples/flaskr/flaskr/blueprints/flaskr.py', 'examples/flaskr/flaskr/factory.py', 'examples/flaskr/setup.py', 'examples/flaskr/tests/test_flaskr.py', 'examples/jqueryexample/jqueryexample.py', 'examples/minitwit/minitwit/minitwit.py', 'examples/minitwit/tests/test_minitwit.py', 'examples/patterns/largerapp/tests/test_largerapp.py', 'examples/patterns/largerapp/yourapplication/__init__.py', 'examples/patterns/largerapp/yourapplication/views.py', 'flask/__init__.py', 'flask/__main__.py', 'flask/_compat.py', 'flask/app.py', 'flask/blueprints.py', 'flask/cli.py', 'flask/config.py', 'flask/ctx.py', 'flask/debughelpers.py', 'flask/globals.py', 'flask/helpers.py', 'flask/json/__init__.py', 'flask/json/tag.py', 'flask/logging.py', 'flask/sessions.py', 'flask/signals.py', 'flask/templating.py', 'flask/testing.py', 'flask/views.py', 'flask/wrappers.py', 'scripts/flaskext_tester.py', 'scripts/make-release.py', 'setup.cfg', 'setup.py', 'test-requirements.txt', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_config.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_json_tag.py', 'tests/test_logging.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py', 'tests/test_views.py']",Merge pull request # 2624 from pallets/metadata
215,f9c6f389ac71b1354a07925785ea4738bf5ba496,2018-02-06 08:14:09-08:00,"# Remove this test when support for Werkzeug < 0.12 is dropped 'Topic : : Software Development : : Libraries : : Application Frameworks ' , [ console_scripts ] except RequestedRangeNotSatisfiable : 'Development Status : : 5 - Production/Stable ' , try : ' '' file.close ( ) lowest : Jinja2==2.10 'sphinxcontrib-log-cabinet ' version . raise lowest : Click==5.1 'flask = flask.cli : main ' , if file is not None : file.close ( ) 'Jinja2 > =2.10 ' , 'Werkzeug > =0.14 ' , rv = rv.make_conditional ( request , accept_ranges=True , 'click > =4.0 ' , entry_points= '' ' } , Werkzeug > = 0.14 , Jinja > = 2.10 , itsdangerous > = 0.24 , Click > = 5.1 . if callable ( getattr ( Range , 'to_content_range_header ' , None ) ) : Bump minimum dependency versions to the latest stable versions : Minimum Werkzeug version bumped to 0.14 , but please use the latest python_requires= ' > =2.7 , ! =3.0 . * , ! =3.1 . * , ! =3.2 . * , ! =3.3 . * ' , lowest : Jinja2==2.4 'itsdangerous > =0.24 ' , # Werkzeug supports Range Requests if file is not None : 'Jinja2 > =2.4 ' , 'python-dotenv ' , ] , Minimum Click version bumped to 4 , but please use the latest version . .. _ # 2586 : https : //github.com/pallets/flask/issues/2586 'click > =5.1 ' , rv = rv.make_conditional ( request , accept_ranges=True , 'console_scripts ' : [ try : 'greenlet ' , entry_points= { 'itsdangerous > =0.21 ' , 'blinker ' , ( ` # 2586 ` _ ) 'Topic : : Software Development : : Libraries : : Python Modules ' , complete_length=fsize ) rv = rv.make_conditional ( request ) complete_length=fsize ) 'Werkzeug > =0.9 ' , 'Development Status : : 4 - Beta ' , except RequestedRangeNotSatisfiable : 'Topic : : Software Development : : Libraries : : Python Modules ' raise lowest : itsdangerous==0.21 else : 'Framework : : Flask ' , 'Topic : : Internet : : WWW/HTTP : : WSGI : : Application ' , flask=flask.cli : main lowest : itsdangerous==0.24 lowest : Click==4.0","['CHANGES.rst', 'flask/helpers.py', 'setup.py', 'tox.ini']",Merge pull request # 2622 from pallets/versions
216,8c2c802f19cf220d6e177414d315dcc6be6ac759,2018-01-28 18:56:45-08:00,"return value.upper ( ) the command , use the command 's : meth : ` ~click.BaseCommand.make_context ` def hello_command ( name ) .. _utilities for testing : http : //click.pocoo.org/testing method . This is useful for testing complex validation rules and custom click.echo ( f'Hello , { name } ! ' ) See : ref : ` testing-cli ` for an overview of how to test your custom Click comes with ` utilities for testing ` _ your CLI commands . runner = CliRunner ( ) import click result = runner.invoke ( hello_command , [ ' -- name ' , 'Flask ' ] ) def test_hello_params ( ) : .. _testing-cli : types . : : context = hello_command.make_context ( 'hello ' , [ ' -- name ' , 'flask ' ] ) .. _click : http : //click.pocoo.org/ : class : ` ~click.testing.CliRunner ` runs the command in isolation and def upper ( ctx , param , value ) : if value is not None : If you want to test how your command parses parameters , without running commands in the same way they would be called from the command line . The Use : meth : ` CliRunner.invoke < click.testing.CliRunner.invoke > ` to call captures the output in a : class : ` ~click.testing.Result ` object . : : def test_hello ( ) : commands . from click.testing import CliRunner assert 'Hello , Flask ' in result.output assert context.params [ 'name ' ] == 'FLASK ' Testing CLI Commands","['docs/cli.rst', 'docs/testing.rst']",Merge pull request # 2611 from pallets/cli-test-docs
217,94aaa2457927c59d4df2a616d24f640ee8454966,2018-01-28 14:48:38-08:00,"module-level code , the reloader will fail because it can no longer The `` flask `` command , being separate from your code , does not have integrated into PyCharm . We have to do a few tweaks to get them working load the entry point . instructions should be similar for any other IDE you might want to use . smoothly . These instructions should be similar for any other IDE you When using a custom script , if you introduce an error in your .. admonition : : Errors in Custom Scripts The Flask CLI features are n't yet fully integrated into the PyCharm IDE , this issue and is recommended in most cases . Prior to PyCharm 2018.1 , the Flask CLI features were n't yet fully might want to use . so we have to do a few tweaks to get them working smoothly . These",['docs/cli.rst'],Merge pull request # 2610 from pallets/cli-syntaxerror
218,03a2996bb89a0f35f82beb389788539ceb58ba46,2018-01-28 11:27:07-08:00,"del tb def _called_with_wrong_args ( factory ) : if tb.tb_frame.f_code is factory.__code__ : # in the factory , it was called successfully def create_app ( ) : `` `` '' Check whether calling a function raised a `` TypeError `` because finally : : return : true if the call failed return True tb = tb.tb_next while tb is not None : error . class Module : tb = sys.exc_info ( ) [ 2 ] if not _called_with_wrong_args ( attr ) : : param factory : the factory function that was called if not _called_with_wrong_args ( app_factory ) : raise TypeError ( 'bad bad factory ! ' ) pytest.raises ( TypeError , find_best_app , script_info , Module ) raise try : `` `` '' the call failed or because something in the factory raised the raise # did n't reach the factory return False","['flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2530 from pallets/feature/factory-detection
219,83b5625f0c1842a7837bc3326319a64b02a45e44,2018-01-23 15:39:42-08:00,{ prefix } { cmd } FLASK_DEBUG=1 environment variable . { prefix } { cmd } FLASK_ENV=development file . Debug mode can be controlled with the FLASK_DEBUG file . Setting the FLASK_ENV environment variable to 'development ' will enable debug mode .,['flask/cli.py'],Merge pull request # 2603 from greyli/patch-8
220,e21abd9da5fa755d3af96091ab3a181b7d6498b5,2018-01-23 15:20:16-08:00,"response.set_cookie ( 'username ' , 'flask ' , secure=True , httponly=True ) external sites . Can be set to `` 'Lax ' `` ( recommended ) or `` 'Strict ' `` . response.set_cookie ( 'username ' , 'flask ' , secure=True , httponly=True , samesite='Lax ' ) samesite = self.get_cookie_samesite ( app ) `` SameSite `` restricts how cookies are sent with requests from lowest : Werkzeug==0.14 app.config.update ( SESSION_COOKIE_SAMESITE='Strict ' ) secure=secure , `` SameSite `` ensures that cookies can only be requested from the same app.config.update ( SESSION_COOKIE_SAMESITE=None ) assert 'samesite=lax ' in cookie SESSION_COOKIE_SAMESITE='Lax ' , .. _security-cookie : def get_cookie_samesite ( self , app ) : 'SESSION_COOKIE_SAMESITE ' : None , def test_session_using_samesite_attribute ( app , client ) : the : data : ` SESSION_COOKIE_SAMESITE ` setting . .. py : data : : SESSION_COOKIE_SAMESITE secure=secure assert 'samesite ' not in cookie lowest : Werkzeug==0.9 .. versionadded : : 1.0 domain that created them . It is not supported by Flask yet . Default : `` None `` client.get ( '/ ' ) cookie 's `` SameSite `` option . cookie = rv.headers [ 'set-cookie ' ] .lower ( ) .. _samesite_support : https : //caniuse.com/ # feat=same-site-cookie-attribute be set to `` 'Lax ' `` ( recommended ) or `` 'Strict ' `` . Restrict how cookies are sent with requests from external sites . Can Added : data : ` SESSION_COOKIE_SAMESITE ` to control the session external sites , such as submitting a form . `` Strict `` prevents sending flask.session [ 'testing ' ] = 42 app.config.update ( SESSION_COOKIE_SAMESITE='invalid ' ) See : ref : ` security-cookie ` . `` `` '' return 'Hello World ' `` Lax `` prevents sending cookies with CSRF-prone requests from cookies with all external requests , including following regular links . app.config.update ( SESSION_COOKIE_SAMESITE='Lax ' ) def index ( ) : `` SameSite `` attribute . This currently just returns the value of samesite=samesite return app.config [ 'SESSION_COOKIE_SAMESITE ' ] with pytest.raises ( ValueError ) : `` `` '' Return `` 'Strict ' `` or `` 'Lax ' `` if the cookie should use the assert 'samesite ' in cookie rv = client.get ( '/ ' ) assert 'samesite=strict ' in cookie","['docs/config.rst', 'docs/security.rst', 'flask/app.py', 'flask/sessions.py', 'tests/test_basic.py', 'tox.ini']",Merge pull request # 2607 from FadhelC/SameSite-cookie-feature
221,8ff0cef6b9ecee2c0bc31774b33cb88632dc79db,2018-01-23 10:09:42-08:00,"'Required when using `` -- cert '' . ' , try : else : if isinstance ( obj , ssl.SSLContext ) : # no key return self.path_type ( value , param , ctx ) assert ctx.params [ 'cert ' ] == ( __file__ , __file__ ) help='Enable or disable the debugger . By default the debugger ' existing file , the string `` 'adhoc ' `` , or an import for a run_command.make_context ( 'run ' , [ ' -- cert ' , 'flask ' ] ) help='Enable or disable eager loading . By default eager ' assert ctx.params [ 'cert ' ] is ssl_context def convert ( self , value , param , ctx ) : monkeypatch.setitem ( sys.modules , 'ssl_context ' , ssl_context ) ssl_context = object ( ) except click.BadParameter : # not an SSLContext except ImportError : if value == 'adhoc ' : import OpenSSL help='Enable or disable the reloader . By default the reloader ' # pyOpenSSL installed AppGroup , FlaskGroup , NoAppException , ScriptInfo , dotenv , self.path_type = click.Path ( # no -- key with SSLContext `` `` '' Click option type for the `` -- cert `` option . Allows either an run_command.make_context ( with pytest.raises ( click.BadParameter ) : def test_run_cert_adhoc ( monkeypatch ) : development server over HTTPS . ( ` # 2606 ` _ ) .. _ # 2606 : https : //github.com/pallets/flask/pull/2606 # no key with adhoc # no cert monkeypatch.setitem ( sys.modules , 'OpenSSL ' , types.ModuleType ( 'OpenSSL ' ) ) help='The key file to use when specifying a certificate . ' ) with pytest.raises ( click.BadParameter ) : 'When `` -- cert '' is an SSLContext object , `` -- key is not used . ' , is_context = cert and not isinstance ( cert , ( text_type , bytes ) ) monkeypatch.setitem ( sys.modules , 'OpenSSL ' , None ) type=click.Path ( exists=True , dir_okay=False , resolve_path=True ) , exists=True , dir_okay=False , resolve_path=True ) cert = ctx.params.get ( 'cert ' ) with_threads ) : Pass `` -- cert `` and `` -- key `` options to `` flask run `` to run the get_version , load_dotenv , locate_app , prepare_import , run_command , if cert and not ( is_adhoc or is_context ) : if sys.version_info > = ( 2 , 7 ) : threaded=with_threads , ssl_context=cert ) return value from ._compat import getargspec , iteritems , reraise return value assert ctx.params [ 'cert ' ] == 'adhoc ' Modifies the `` cert `` param to be a `` ( cert , key ) `` pair if needed . try : raise raise click.BadParameter ( run_command.make_context ( 'run ' , [ ' -- cert ' , __file__ ] ) from ._compat import getargspec , iteritems , reraise , text_type if obj : callback=_validate_key , expose_value=False , name = 'path ' if sys.version_info < ( 2 , 7 ) : raise click.BadParameter ( run_command.make_context ( 'run ' , [ ' -- cert ' , 'not_here ' ] ) 'run ' , [ ' -- cert ' , 'ssl_context ' , ' -- key ' , __file__ ] ) # pyOpenSSL not installed def test_run_cert_path ( ) : AppGroup , FlaskGroup , NoAppException , ScriptInfo , dotenv , find_best_app , # ImportError run_command.make_context ( 'run ' , [ ' -- cert ' , 'adhoc ' , ' -- key ' , __file__ ] ) ctx = run_command.make_context ( 'run ' , [ ' -- cert ' , 'ssl_context ' ] ) monkeypatch.setitem ( sys.modules , 'not_here ' , None ) from werkzeug.utils import import_string run_command.make_context ( 'run ' , [ ' -- cert ' , 'adhoc ' ] ) 'run ' , [ ' -- cert ' , __file__ , ' -- key ' , __file__ ] ) ctx , param ) `` `` '' 'When `` -- cert '' is `` adhoc '' , `` -- key '' is not used . ' , with_threads , cert ) : ' '' -- cert '' must also be specified . ' , ctx.params [ 'cert ' ] = cert , value return obj threaded=with_threads ) class CertParamType ( click.ParamType ) : ctx = run_command.make_context ( run_command.make_context ( 'run ' , [ ' -- key ' , __file__ ] ) import ssl help='Specify a certificate file to use HTTPS . ' ) if not cert : if is_context : def test_run_cert_import ( monkeypatch ) : # SSLContext def _validate_key ( ctx , param , value ) : ssl_context = ssl.SSLContext ( ssl.PROTOCOL_SSLv23 ) if value is not None : find_best_app , get_version , load_dotenv , locate_app , prepare_import , ctx = run_command.make_context ( 'run ' , [ ' -- cert ' , 'adhoc ' ] ) : class : ` ~ssl.SSLContext ` object . is_adhoc = cert == 'adhoc ' if sys.version_info < ( 2 , 7 ) : import types else : is_context = isinstance ( cert , ssl.SSLContext ) obj = import_string ( value , silent=True ) help='Enable or disable eager loading . By default eager ' 'Using ad-hoc certificates requires pyOpenSSL . ' , ctx , param ) `` `` '' The `` -- key `` option must be specified when `` -- cert `` is a file . def __init__ ( self ) : if is_adhoc : value = click.STRING ( value , param , ctx ) .lower ( ) help='Enable or disable the debugger . By default the debugger ' help='Enable or disable the reloader . By default the reloader '","['CHANGES', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2606 from pallets/run-ssl
222,c3a997864efc0dfa725f21248ba0fc21a9682faa,2018-01-10 15:46:42-08:00,"environment variable is not supported and you need to enable the variable to `` 1 `` . To control the environment and such fundamental features Flask provides return val programs , like Sentry , what context Flask is running in . It is arguments to the `` run `` option . For instance the reloader can be # : otherwise . Whether debug mode is enabled . When using `` flask run `` to start the * * Do not enable debug mode in production . * * $ flask run Debug mode will be enabled when : envvar : ` FLASK_ENV ` is `` development `` , While you can attempt to flip the environment and debug flag separately in * Debug mode : on Setting : envvar : ` FLASK_ENV ` to `` development `` will enable debug mode . `` `` '' Get whether debug mode should be enabled for the app , indicated env = get_env ( ) debugger and reloader , and then starts the server on You can also control debug mode separately from the environment by set : envvar : ` FLASK_ENV ` : : $ export FLASK_ENV=development # : consistent results . The default value depends on the Flask .. py : data : : ENV Debug Mode # : changes . This maps to the : data : ` DEBUG ` config key . This is enable behaviors based on the environment , such as enabling debug # : used to quickly switch between different environments like not supported and you needed to enable debug mode by exporting controlled with the : envvar : ` FLASK_ENV ` environment variable and .. versionadded : : 1.0 The : envvar : ` FLASK_ENV ` flag if set to `` development `` turns on all `` 'production ' `` . `` `` '' Get the environment the app is running in , indicated by the development server , an interactive debugger will be shown for and is overridden by the `` FLASK_DEBUG `` environment variable . It `` FLASK_DEBUG=1 `` . This can still be used to control debug mode , but if not val : Flask and extensions may choose to enable behaviors based on the ( On Windows you need to use `` set `` instead of `` export `` and on Flask self.config [ 'DEBUG ' ] = value work on the `` development `` environment : : What environment the app is running in . Flask and extensions may code , this is strongly discouraged . They ca n't be read early by the # : enabled when : attr : ` env ` is `` 'development ' `` and is overridden return get_env ( ) == 'development ' variable did not exist . the debugger by default . # : What environment the app is running in . Flask and extensions may : envvar : ` FLASK_ENV ` environment variable . If not set it defaults to * Env production unhandled exceptions , and the server will be reloaded when code val = os.environ.get ( 'FLASK_ENV ' ) if env == 'development ' : # : unhandled exceptions , and the server will be reloaded when code # : by the `` FLASK_DEBUG `` environment variable . It may not behave as exporting `` FLASK_DEBUG=1 `` . from debug mode . The development environment enables debug mode . In versions of Flask older than 1.0 the : envvar : ` FLASK_ENV ` environment # : The environment value . This is typically set from outside the return False # : mode . This maps to the : data : ` ENV ` config key . This is set by the The environment in which the Flask app should run is set by the Default : `` False `` variable . defaults to `` production `` . `` flask run `` will use the interactive debugger and reloader by default $ FLASK_DEBUG=1 flask run debug mode separately by setting the : envvar : ` FLASK_DEBUG ` environment ( On Windows you need to use `` set `` instead of `` export `` ) . may not behave as expected if set in code . environment to production mode instead of development . This is done $ export FLASK_ENV=development as described above . If you want to control debug mode separately , use development environment . For safety reasons we default the flask : envvar : ` FLASK_ENV ` environment variable . The default is .. versionchanged : : 1.0 `` True `` if : func : ` .get_env ` returns `` 'development ' `` , or `` False `` application 's : attr : ` ~Flask.debug ` flag . The value `` 1 `` enables it , `` 0 `` ( On Windows , use `` set `` instead of `` export `` . ) export the `` FLASK_ENV `` environment variable and set it to `` production `` . The other recognized environment is `` development `` . val = 'production ' Set the : envvar : ` FLASK_DEBUG ` environment variable to override the above . Using the environment variables as described above is recommended . While Some values are special in that they can show unexpected behavior when `` production `` . The other default environment which is known is exceptions , and the server will be reloaded when code changes . because development mode can turn on potentially unsafe features such as arguments to the `` run `` option . For instance the reloader can be self.jinja_env.auto_reload = self.templates_auto_reload # : * * Do not enable development when deploying in production . * * In order to set the environment and debug mode reliably , Flask uses def _set_debug_value ( self , value ) : * Forcing debug mode on # : application . In debug mode the debugger will kick in when an environment variables . If you use the : command : ` flask ` script to start a local development server Exporting `` FLASK_ENV=development `` turns on all development features To enable all development features ( including debug mode ) you can export # : enable behaviors based on the environment , such as enabling debug self.config [ 'DEBUG ' ] = value # : expected if set in code . changes . The : attr : ` ~flask.Flask.debug ` attribute maps to this it is possible to set : data : ` ENV ` and : data : ` DEBUG ` in your config or Default : `` True `` if : data : ` ENV ` is `` 'production ' `` , or `` False `` # : : envvar : ` FLASK_ENV ` environment variable and may not behave as # : This value should only be configured by the : envvar : ` FLASK_DEBUG ` in debug mode . To control this separately from the environment , use the On older Flask version ( before 1.0 ) the : envvar : ` FLASK_ENV ` Prior to Flask 1.0 the : envvar : ` FLASK_ENV ` environment variable was # : unhandled exception occurs and the integrated server will `` flask `` command , and some systems or extensions may have already # : detected . self.jinja_env.auto_reload = self.templates_auto_reload development features such as enabling the interactive debugger . Added : envvar : ` FLASK_ENV ` to control the environment separately by the : envvar : ` FLASK_DEBUG ` environment variable . The default is `` development `` . If the env is set to `` development `` the debug mode is * * Do not enable debug mode when deploying in production . * * # : Default : `` True `` if : attr : ` env ` is `` 'development ' `` , or This enables the development environment , including the interactive return os.environ.get ( 'FLASK_ENV ' ) or 'production ' the Flask config from the config file this is strongly discouraged as `` `` '' you should prefer setting the development environment as shown when running the development server . key . This is set by the : envvar : ` FLASK_ENV ` environment variable and # : The debug flag . If this is `` True `` it enables debugging of the # : Default : `` 'production ' `` To enable all development features ( and to disable the debug mode ) you can To switch Flask to the development environment and enable debug mode , # : the development server , an interactive debugger will be shown for The environment is used to indicate to Flask , extensions , and other Enable debug mode . When using the development server with `` flask run `` or for instance automatically enabled . # : environment variable . Changing it by other means will not yield `` development `` the two environment variables : envvar : ` FLASK_ENV ` and : envvar : ` FLASK_DEBUG ` . reloader . self._set_debug_value ( value ) # : automatically reload the application if changes in the code are for instance you should tell Flask that you want to work in the environment . $ FLASK_ENV=development flask run otherwise . # : `` False `` otherwise . * * Do not enable development when deploying in production . * * $ flask run the `` FLASK_ENV `` environment variable and set it to `` development `` ( On Windows you need to use `` set `` instead of `` export `` . ) debug mode and `` flask run `` will enable the interactive debugger and return True mode . The : attr : ` ~flask.Flask.env ` attribute maps to this config Added : data : ` ENV ` to reflect the : envvar : ` FLASK_ENV ` environment to all systems and extensions . `` app.run `` , an interactive debugger will be shown for unhanlded configured themselves based on a previous value . : envvar : ` FLASK_DEBUG ` flag . # : ` production ` . config key . This is enabled when : data : ` ENV ` is `` 'development ' `` The environment in which the Flask app runs is set by the versions older than 1.0 you need to export `` FLASK_DEBUG=1 `` instead ) . such as enabling the interactive debugger . This will enable the debugger , the reloader and then start the server on may behave inconsistently if changed after the app has begun setting up . : envvar : ` FLASK_DEBUG ` . The value `` 1 `` enables it , `` 0 `` disables it . Debug Mode The : data : ` ENV ` and : data : ` DEBUG ` config values are special because they debug mode . # : ` production ` and ` development ` . If not set this defaults to # : process by setting the ` FLASK_ENV ` environment variable and can be # : Whether debug mode is enabled . When using `` flask run `` to start # : * * Do not enable debug mode when deploying in production . * * The most common way to switch Flask to development mode is to tell it to # : environment and will be true for the development environment and false changed late . In particular that applies to the Flask environment and disables it . Forcing the debug flag on also enables the debugger and reloader those flags are often loaded early and changing them late might not apply # : : envvar : ` FLASK_ENV ` environment variable . If not set it defaults to If the env is set to `` development `` , the `` flask `` command will enable Default : `` 'production ' `` * Environment : development","['docs/cli.rst', 'docs/config.rst', 'docs/quickstart.rst', 'docs/server.rst', 'docs/tutorial/packaging.rst', 'flask/app.py', 'flask/helpers.py']",Merge pull request # 2593 from pallets/env-docs
223,2949306b7bc44e3f74e42e8277dfe13475b350eb,2018-01-10 14:01:59-08:00,"# ca n't use monkeypatch.delitem since we do n't want to restore a value os.environ.pop ( 'FLASK_APP ' , None ) mp.undo ( ) def _reset_os_environ ( monkeypatch , _standard_os_environ ) : from _pytest import monkeypatch if value is monkeypatch.notset : : func : ` ._reset_os_environ ` after each test . import pkgutil `` `` '' Reset `` os.environ `` to the standard environ after each test , ) from flask.cli import AppGroup , FlaskGroup , NoAppException , ScriptInfo , dotenv , \ import flask ( os.environ , 'FLASK_ENV ' , monkeypatch.notset ) , ( os.environ , 'FLASK_APP ' , notset ) , from flask.cli import ( standard values . Returns a list of operations that is used by # use monkeypatch internals to force-delete environ keys mp = monkeypatch.MonkeyPatch ( ) ( os.environ , 'FLASK_DEBUG ' , notset ) , find_best_app , get_version , load_dotenv , locate_app , prepare_import , find_best_app , get_version , load_dotenv , locate_app , prepare_import , \ in case a test changed something without cleaning up . import flask ( os.environ , 'FLASK_APP ' , monkeypatch.notset ) , ( os.environ , 'WERKZEUG_RUN_MAIN ' , monkeypatch.notset ) , monkeypatch._setitem.extend ( _standard_os_environ ) os.environ.pop ( 'FLASK_DEBUG ' , None ) mp.delenv ( key , False ) mp.setenv ( key , value ) import textwrap ( os.environ , 'FLASK_RUN_FROM_CLI ' , notset ) , import pkgutil def _standard_os_environ ( ) : AppGroup , FlaskGroup , NoAppException , ScriptInfo , dotenv , `` `` '' ( os.environ , 'FLASK_DEBUG ' , monkeypatch.notset ) , monkeypatch._setitem.extend ( ( ) def manage_os_environ ( monkeypatch ) : yield out ( os.environ , 'FLASK_RUN_FROM_CLI ' , monkeypatch.notset ) , `` `` '' Set up `` os.environ `` at the start of the test session to have @ pytest.fixture ( autouse=True ) import textwrap ) ) else : out = ( for _ , key , value in out :","['tests/conftest.py', 'tests/test_cli.py']",Merge pull request # 2592 from pallets/tests-env
224,f2cf4d04494cd9d57da6be05debc0967888dd927,2018-01-10 12:14:44-08:00,"threaded=with_threads ) click.secho ( ' Use a production WSGI server instead . ' , dim=True ) # if set , let env vars override previous values dim=True ) : attr : ` debug ` . from werkzeug.serving import run_simple ignoring the reloader . if debug is not None : options.setdefault ( 'threaded ' , True ) debug = get_debug_flag ( ) # not double execute when the reloader kicks in . This local server is recommended for development purposes only but it print ( ' * Serving Flask app `` % s '' ' % info.app_import_path ) use_debugger=debugger , threaded=with_threads ) if reload is None : if get_env ( ) == 'production ' : # we wo n't print anything . debug = get_debug_flag ( ) if env == 'production ' : # If we have an import path we can print it out now which can help environment variables will override : attr : ` env ` and if 'FLASK_ENV ' in os.environ : load_dotenv ( ) can be changed with the -- with-threads option which will enable basic from flask.cli import load_dotenv If set , the : envvar : ` FLASK_ENV ` and : envvar : ` FLASK_DEBUG ` multithreading . print ( ' * Debug mode : { 0 } '.format ( 'on ' if debug else 'off ' ) ) 'use ` flask run ` for production use . ' , cli.load_dotenv ( ) run_simple ( host , port , app , use_reloader=reload , use_debugger=debugger , run_simple ( host , port , app , use_reloader=reload , # command line . Have a look at cli.py for more information . print ( ' * Environment : { 0 } '.format ( env ) ) not support any sort of concurrency at all to simplify debugging . This debugger = debug elif 'FLASK_DEBUG ' in os.environ : This server is for development purposes only . It does not provide `` `` '' Runs a local development server for the Flask application . # import path because the app was loaded through a callback then click.secho ( if app_import_path is not None : ' WARNING : Do not use the development server in a production ' self.env = get_env ( ) if info.app_import_path is not None : The default port is now picked from the `` SERVER_NAME `` variable . `` `` '' Run a local development server . Flask is enabled and disabled otherwise . click.secho ( 'Use a production ready WSGI server instead ' , fg='red ' ) The reloader and debugger are by default enabled if the debug flag of click.secho ( 'Warning : Detected a production environment . Do not ' return `` `` '' from werkzeug.serving import run_simple The default port is now picked from the `` SERVER_NAME `` if os.environ.get ( 'WERKZEUG_RUN_MAIN ' ) ! = 'true ' : The reloader and debugger are enabled by default if reload = debug FLASK_ENV=development or FLASK_DEBUG=1 . debugger = bool ( debug ) self.debug = get_debug_flag ( ) variable . Threaded mode is enabled by default . def show_server_banner ( env , debug , app_import_path ) : # debug passed to method overrides all other sources print ( ' * Env % s ' % get_env ( ) ) reload = bool ( debug ) ' environment . ' , fg='red ' ) # command line . Have a look at cli.py for more information . can also be used for simple intranet deployments . By default it will # Extra startup messages . This depends a bit on Werkzeug internals to if debug is not None : cli.show_server_banner ( self.env , self.debug , self.name ) print ( ' * Forcing debug mode % s ' % ( debug and 'on ' or 'off ' ) ) if reload is None : the stability , security , or performance of production WSGI servers . # people understand what 's being served . If we do not have an show_server_banner ( get_env ( ) , debug , info.app_import_path ) print ( ' * Serving Flask app `` { 0 } '' '.format ( app_import_path ) ) `` `` '' Show extra startup messages the first time the server is run , if os.environ.get ( 'WERKZEUG_RUN_MAIN ' ) == 'true ' :","['flask/app.py', 'flask/cli.py']",Merge pull request # 2591 from pallets/run-behavior
225,2433522d2967b8a5e46f16de587a8fac5088a47c,2018-01-06 17:07:56+01:00,"from flask.helpers import get_debug_flag self._reconfigure_for_run_debug ( bool ( debug ) ) path to your application directory . Similarly you can turn on the def get_env ( ) : The environment in which the Flask app should run is set by the def __init__ ( self , add_default_commands=True , create_app=None , when running the development server . : : ( 'development ' , 'development ' , True ) , # : The debug flag . Set this to `` True `` to enable debugging of the $ flask run # : otherwise . app.testing = True ( `` , None , True ) , ( `` , 'production ' , False ) , Environments ] ) ) : # values repopulate as well . self , add_default_commands=True , create_app=None , app.env , def _get_debug ( self ) : : envvar : ` FLASK_ENV ` environment variable . If not set it defaults to export the `` FLASK_ENV `` environment variable and set it to self.debug = bool ( debug ) from .helpers import get_debug_flag TESTING=True , $ export FLASK_ENV=development # : return False The most common way to switch Flask to development mode is to tell it to self , host=None , port=None , debug=None , load_dotenv=True , * * options # : ` production ` and ` development ` . If not set this defaults to debug mode separately by setting the : envvar : ` FLASK_DEBUG ` environment # : application . In debug mode the debugger will kick in when an debug = ConfigAttribute ( 'DEBUG ' ) app.config [ 'DEBUG ' ] = True 'use ` flask run ` for production use . ' , `` development `` val = 'production ' load_dotenv=True , * * options ) : if env == 'development ' : To enable all development features ( and to disable the debug mode ) you can The : envvar : ` FLASK_ENV ` flag if set to `` development `` turns on all `` app.debug `` and `` app.config [ 'DEBUG ' ] `` are not compatible with .. versionadded : : 1.0 def run ( self , host=None , port=None , debug=None , # : detected . banner = 'Python % s on % s\nApp : % s [ % s ] \nInstance : % s ' % ( ( `` , False , False ) , self._set_debug_value ( value ) # : unhandled exception occurs and the integrated server will ( On Windows you need to use `` set `` instead of `` export `` ) . def add_url_rule ( self , rule , endpoint=None , view_func=None , versions older than 1.0 you need to export `` FLASK_DEBUG=1 `` instead ) . ( 'production ' , 'production ' , False ) , for instance you should tell Flask that you want to work in the changed late . In particular that applies to the Flask environment and 'DEBUG ' : get_debug_flag ( default=False ) , Reconfigures `` app.jinja_env.auto_reload `` . ( 'other ' , 'other ' , False ) , .. versionadded : : 1.0 path to your application directory . Similarly you can turn on `` debug # : process by setting the ` FLASK_ENV ` environment variable and can be return True provide_automatic_options=None , * * options ) : assert get_debug_flag ( ) == debug 'ENV ' : None , On older Flask version ( before 1.0 ) the : envvar : ` FLASK_ENV ` The : command : ` flask ` command line script ( : ref : ` cli ` ) is strongly recommended for app.config [ 'TESTING ' ] = True Environment and Debug Features from flask.helpers import get_debug_flag , get_env env = get_env ( ) environment to production mode instead of development . This is done export FLASK_DEBUG=true # : automatically reload the application if changes in the code are def __init__ ( those flags are often loaded early and changing them late might not apply Called by the : func : ` flask.cli.run ` command or : meth : ` Flask.run ` fg='red ' ) `` `` '' variable did not exist . loads the application . The basic usage is like this : : defaults = dict ( self.default_config ) ( On Windows you need to use `` set `` instead of `` export `` ) . assert get_debug_flag ( default=True ) == expected_default_flag .. note : : server , to enable the debug mode , you need to export the `` FLASK_DEBUG `` if not val : `` development `` . If the env is set to `` development `` the debug mode is del _get_debug , _set_debug app = locate_app ( If you use the : command : ` flask ` script to start a local development raise_if_not_found=False ) method if the debug flag is set explicitly in the call . : param debug : the new value of the debug flag ( On Windows you need to use `` set `` instead of `` export `` ) . ) # : This attribute can also be configured from the config with the `` DEBUG `` to all systems and extensions . click.secho ( 'Use a production ready WSGI server instead ' , # Update the app 's debug flag through the descriptor so that other server_name = self.config.get ( `` SERVER_NAME '' ) environment variable is not supported and you need to enable the for instance automatically enabled . if get_env ( ) == 'production ' : export FLASK_ENV=development app = locate_app ( self , import_name , None , the : command : ` flask ` script . They only worked when using `` Flask.run ( ) `` def _set_debug_value ( self , value ) : the two environment variables : envvar : ` FLASK_ENV ` and : envvar : ` FLASK_DEBUG ` . return self.config [ 'DEBUG ' ] debug = property ( _get_debug , _set_debug ) self.config [ 'DEBUG ' ] = value ( On Windows you need to use `` set `` instead of `` export `` and on Flask # : The environment value . This is typically set from outside the the debugger by default . val = os.environ.get ( 'FLASK_ENV ' ) app.debug = debug def add_url_rule ( self , rule , endpoint=None , view_func=None , provide_automatic_options=None , * * options ) : development because it provides a superior reload experience due to how it _endpoint_from_view_func , find_package , get_debug_flag , \ application configuration may already be calculated based on the app._reconfigure_for_run_debug ( debug ) # : application . In debug mode the debugger will kick in when an unhandled monkeypatch.setenv ( 'FLASK_ENV ' , env ) previous debug value . This method will recalculate affected values . environment variable before running the server : : self , import_name , None , raise_if_not_found=False method . when running the development server . # : The debug flag . If this is `` True `` it enables debugging of the app.debug and ' [ debug ] ' or `` , If you use the : command : ` flask ` script to start a local development server The : envvar : ` FLASK_DEBUG ` flag enables or disables the interactive debugger . development features such as enabling the interactive debugger . # : This value should only be configured by the : envvar : ` FLASK_DEBUG ` server_name = self.config.get ( 'SERVER_NAME ' ) the Flask config from the config file this is strongly discouraged as To enable debug mode you can export the `` FLASK_DEBUG `` environment variable development features like this : : banner = 'Python % s on % s\nApp : % s % s\nInstance : % s ' % ( * Env production Some values are special in that they can show unexpected behavior when def _reconfigure_for_run_debug ( self , debug ) : work on the `` development `` environment : : assert get_debug_flag ( ) == expected_default_flag defaults [ 'DEBUG ' ] = get_debug_flag ( ) this : : return self.config_class ( root_path , defaults ) # : the application if changes in the code are detected . .. admonition : : Debug Mode with the `` flask `` Script def test_get_env ( self , monkeypatch , env , ref_env , debug ) : # : ` production ` . defaults [ 'ENV ' ] = get_env ( ) `` production `` . The other default environment which is known is debug mode . add_version_option=True , load_dotenv=True , * * extra def get_debug_flag ( ) : # : exception occurs and the integrated server will automatically reload # : consistent results . The default value depends on the Flask To control the environment and such fundamental features Flask provides DEBUG=True , variable to `` 1 `` . app.debug = True return val click.secho ( 'Warning : Detected a production environment . Do not ' $ export FLASK_DEBUG=1 development environment . For safety reasons we default the flask The : command : ` flask ` command line script ( : ref : ` cli ` ) is strongly experience due to how it loads the application . The basic usage is like # : used to quickly switch between different environments like In versions of Flask older than 1.0 the : envvar : ` FLASK_ENV ` environment $ export FLASK_ENV=development env = ConfigAttribute ( 'ENV ' ) assert get_env ( ) == ref_env self.debug = debug return self.config_class ( root_path , self.default_config ) def run ( dim=True ) # : environment and will be true for the development environment and false 'DEBUG ' : None , _endpoint_from_view_func , find_package , get_env , get_debug_flag , \ mode '' with this environment variable : : export FLASK_DEBUG=true print ( ' * Env % s ' % get_env ( ) ) While you can attempt to flip the environment and debug flag separately in add_version_option=True , load_dotenv=True , * * extra ) : `` `` '' The `` run `` commands will set the application 's debug flag . Some # : configuration key . Defaults to `` False `` . because development mode can turn on potentially unsafe features such as def get_debug_flag ( default=None ) : from .helpers import get_debug_flag , get_env # : : : return default def _set_debug ( self , value ) : $ flask run recommended for development because it provides a superior reload # : environment variable . Changing it by other means will not yield","['docs/cli.rst', 'docs/config.rst', 'docs/patterns/packages.rst', 'docs/quickstart.rst', 'docs/server.rst', 'docs/tutorial/packaging.rst', 'flask/app.py', 'flask/cli.py', 'flask/helpers.py', 'tests/test_helpers.py']",Add Support for FLASK_ENV ( # 2570 )
226,60eecb547d8af9916c55163c7356999ca2d5ffb9,2018-01-06 10:49:50+01:00,"sys.path.insert ( 0 , ' < your_local_path > /lib/python < your_python_version > /site-packages ' ) combinations of Python and dependencies . You need to have Python 2.7 , 3.4 , 'Programming Language : : Python : : 2.6 ' , sys.path.insert ( 0 , ' < your_local_path > /lib/python2.6/site-packages ' ) 3.4 , 3.5 3.6 , and PyPy 2.7 installed to run all of the environments . Then run : : combinations of Python and dependencies . You need to have Python 2.6 , 2.7 , 3.3 , 3.5 3.6 , and PyPy 2.7 installed to run all of the environments . Then run : : 'Programming Language : : Python : : 3.3 ' ,","['AUTHORS', 'CONTRIBUTING.rst', 'docs/deploying/fastcgi.rst', 'setup.py']",Remove python 2.6 and 3.3 everywhere . ( # 2583 )
227,22e072379b9fcffd229cdd239dd3ff5ed4eed571,2018-01-06 10:49:01+01:00,from werkzeug.utils import wrap_file from werkzeug.urls import url_quote from werkzeug.urls import url_quote from werkzeug.urls import url_parse from urlparse import urlsplit as url_parse except ImportError : from urlparse import quote as url_quote from werkzeug.wsgi import wrap_file from werkzeug.urls import url_parse try : from werkzeug.wsgi import wrap_file # this was moved in 0.7,"['flask/helpers.py', 'flask/testing.py']",cleanup werkzeug import ( # 2582 )
228,eebc0edfddba9687f82f4868f85714c0c7bb3d84,2018-01-05 13:32:57-08:00,"python -m pip install -U pip setuptools wheel tox db_fd , db_path = tempfile.mkstemp ( ) def client ( request , app ) : try : return True return app.test_client ( ) from ._compat import string_types , text_type def client ( app ) : os.unlink ( db_path ) def app ( request ) : matrix : def app ( ) : return client 'DATABASE ' : db_path , if PY2 and os.name == 'nt ' : def teardown ( ) : 'DATABASE ' : temp_db_location , init : python -m tox os.unlink ( app.config [ 'DATABASE ' ] ) from ._compat import string_types , text_type , PY2 only : global : TOXENV : py Python 2 on Windows does n't provide `` inet_pton `` , so this only install : master os.close ( db_fd ) PYTHON : C : \Python27 client = app.test_client ( ) request.addfinalizer ( teardown ) test_script : socket.inet_aton ( value ) SET PATH= % PYTHON % ; % PATH % branches : build : false /^ . * -maintenance $ / os.close ( app.config [ 'DB_FD ' ] ) except socket.error : PYTHON : C : \Python36 return False environment : db_fd , temp_db_location = tempfile.mkstemp ( ) 'DB_FD ' : db_fd checks IPv4 addresses in that environment .","['.appveyor.yml', 'examples/flaskr/tests/test_flaskr.py', 'flask/helpers.py']",Merge pull request # 2558 from pallets/appveyor
229,40745bb338c45498ca19010175f341332ab2eefb,2018-01-05 07:55:41-08:00,"if silent and e.errno in ( errno.ENOENT , errno.EISDIR ) : Loading config files with `` silent=True `` will ignore `` ENOTDIR `` ) : .. _ # 2581 : https : //github.com/pallets/flask/pull/2581 .. _ # 2529 : https : //github.com/pallets/flask/pull/2529 errno.ENOENT , errno.EISDIR , errno.ENOTDIR if silent and e.errno in ( The dev server now uses threads by default . errors . ( ` # 2581 ` _ ) The dev server now uses threads by default . ( ` # 2529 ` _ )","['CHANGES', 'flask/config.py']",Merge pull request # 2581 from pallets/config-enotdir
230,26f413e1e55d3b57fa164114b39f6cf74669591a,2018-01-04 13:04:29-08:00,"modified = False def permanent ( self , value ) : class SessionMixin ( MutableMapping ) : # : written and set this when that happens . The mixin default is hard `` `` '' Expands a basic dictionary with session attributes . '' '' '' # : default this to false and detect changes in the dictionary for as def permanent ( self ) : # : When data is read or written , this is set to `` True `` . Used by assert not flask.session.modified # : been accessed in that request . This allows flask to append a ` Vary : `` `` '' Expands a basic dictionary with an accessors that are expected This session backend will set the : attr : ` modified ` and : attr : ` accessed ` attributes . It can not reliably track whether a # : not necessarily guaranteed . Use with caution . The default mixin # : implementation just hardcodes `` False `` in . # : long as changes do not happen on mutable structures in the session . # : some session backends can tell you if a session is new , but that is # : Cookie ` header to the response if the session is being accessed . This # : from being served the same cache . # : The default mixin implementation just hardcodes `` True `` in . # : data ( for example a nested dict ) then this must be set to `` `` '' Base class for sessions based on signed cookies . '' '' '' assert not flask.session.accessed assert flask.session.accessed # : class : ` .SecureCookieSessionInterface ` to add a `` Vary : Cookie `` assert flask.session.modified permanent = property ( _get_permanent , _set_permanent ) from collections import MutableMapping # : the accessed variable indicates whether or not the session object has # : different users . `` `` '' # : dictionary itself is tracked ; if the session contains mutable del _get_permanent , _set_permanent return v self.modified = False # : Some implementations can detect whether a session is newly session is new ( vs. empty ) , so : attr : ` new ` remains hard coded to return flask.session [ 'value ' ] class SessionMixin ( object ) : # : allows caching proxy servers , like Varnish , to use both the URL and the # : header , which allows caching proxies to cache different pages for # : coded to `` True `` . # : this reflects the `` '_permanent ' `` key in the dict . # : this when that happens . The mixin default is hard coded to # : Some implementations can detect when session data is read or # : for some backends this will always be `` True `` , but some backends will # : `` True `` manually when modifying that data . The session cookie accessed = False `` `` '' Base class for sessions based on signed cookies . `` `` '' This reflects the `` '_permanent ' `` key in the dict . '' '' '' def _get_permanent ( self ) : `` `` '' # : Some implementations can detect changes to the session and set # default is hard-coded `` False `` . # : When data is changed , this is set to `` True `` . Only the session v = flask.session.get ( 'value ' , 'None ' ) # : session cookie as keys when caching pages , preventing multiple users # : `` True `` . def _set_permanent ( self , value ) : # : created , but that is not guaranteed . Use with caution . The mixin # : will only be written to the response if this is `` True `` . `` False `` . self.accessed = False by Flask extensions and users for the session .","['flask/sessions.py', 'tests/test_basic.py']",Merge pull request # 2580 from pallets/session-attrs
231,54f3d2131d2abd633288b4810eb95ba40b0a7956,2018-01-04 12:56:38-08:00,"Click the + ( * Add New Configuration * ) button and select * Python * . Give Next we need to set the working directory ( * * D * * ) to be the folder where : alt : screenshot of pycharm 's run configuration settings we can simply copy that configuration and alter the * Script * argument add an environment variable ( * * C * * ) to identify our application . Click the Python import or file on the right ( `` hello `` for example ) . commands = sphinx-build -W -b linkcheck -d { envtmpdir } /doctrees docs { envtmpdir } /linkcheck You can skip this next step if you 're using : ref : ` dotenv ` . We need to add an this : There 's quite a few options to change , but once we 've done it for one command , For the `` flask run `` command , check `` Single instance only '' since you You can skip this next step if you 're using : ref : ` dotenv ` . We need to Now that we have a configuration which runs `` flask run `` from within PyCharm , commands = sphinx-build -W -b html -d { envtmpdir } /doctrees docs { envtmpdir } /html The Flask CLI features are n't yet fully integrated into the PyCharm IDE , with the `` flask `` executable when we selected it earlier , which is incorrect . so we have to do a few tweaks to get them working smoothly . These instructions : class : screenshot instructions should be similar for any other IDE you might want to use . our application file or package resides . PyCharm changed it to the directory * Edit Configurations * . You 'll be greeted by a screen similar to this : Now that we have a configuration which runs `` flask run `` from within : align : center should be similar for any other IDE you might want to use . Binary files a/docs/_static/pycharm-runconfig.png and b/docs/_static/pycharm-runconfig.png differ so we have to do a few tweaks to get them working smoothly . These In PyCharm , with your project open , click on * Run * from the menu bar and go to * Edit Configurations * . You 'll be greeted by a screen similar to command , we can easily copy the entire configuration and make a single Select * Module name * from the dropdown ( * * A * * ) then input `` flask `` . the configuration a good descriptive name such as `` Run Flask Server '' . Next we need to set the working directory ( * * D * * ) to be the same folder where Within that folder , pick the `` flask `` executable which will reside in the ( with any arguments ) . In this example we use `` run `` , which will run `` bin `` folder , or in the `` Scripts `` on Windows . may untick the * PYTHONPATH * options ( * * E * * ) . This will more accurately may implement yourself . the play button next to it to run the server . Python file or package on the right ( `` app.py `` for example ) . : align : center environment variable ( * * C * * ) to identify our application . Click on the browse button and add an entry with `` FLASK_APP `` on the left and the name of the window . Select the configuration in the main PyCharm window and click PyCharm , we can copy that configuration and alter the * Script * argument tweak to give us access to other commands , including any custom ones you There 's quite a few options to change , but once we 've done it for one we can easily copy the entire configuration and make a single tweak to give us match how you deploy the app later . good descriptive name , such as `` Run Flask Server '' , and click * Apply * . on the browse button and add an entry with `` FLASK_APP `` on the left and : class : screenshot The * Parameters * field ( * * B * * ) is set to the CLI command to execute the development server . commands = sphinx-build -W -b html -d { envtmpdir } /doctrees docs docs/_build/html The new Flask CLI features are n't yet fully integrated into the PyCharm IDE , access to other commands , including any custom ones you may implement yourself . ca n't run the server more than once at the same time . The * Script Parameter * field ( * * B * * ) is set to the CLI command you to execute . In PyCharm , with your project open , click on * Run * from the menu bar and go to In this example we use `` run `` , which will run the development server . Click * Apply * to save the configuration , or * OK * to save and close the our application resides . Finally , untick the * PYTHONPATH * options ( * * E * * ) and give the configuration a commands = sphinx-build -W -b linkcheck -d { envtmpdir } /doctrees docs docs/_build/linkcheck For the * Script * input ( * * A * * ) , navigate to your project 's virtual environment . : alt : screenshot of pycharm 's run configuration settings If you have installed your project as a package in your virtualenv , you","['docs/_static/pycharm-runconfig.png', 'docs/cli.rst', 'tox.ini']",Merge pull request # 2541 from nsiregar/ # 2535_update_pycharm_instruction
232,c2bac6de8c51b4ad687f04d5794ce9c6afdf38d8,2018-01-04 09:39:47-08:00,"export FLASK_APP=exampleapp `` 'dev ' `` as the argument . See : doc : ` /cli ` for more detail . To run such an application , you can use the : command : ` flask ` command : : It can then be used with the : command : ` flask ` command : : otherwise the : command : ` flask ` command wo n't be able to find it . Here 's an app = create_app ( '/path/to/config.cfg ' ) in `` myapp `` . You can also pass arguments to the factory like this : : from yourapplication import create_app export FLASK_APP=myapp To use such an application you have to create it in a separate file first , flask run Then the `` create_app `` factory in `` myapp `` is called with the string Flask will automatically detect the factory ( `` create_app `` or `` make_app `` ) export FLASK_APP= '' myapp : create_app ( 'dev ' ) '' example : file : ` exampleapp.py ` file that creates such an application : :",['docs/patterns/appfactories.rst'],Merge pull request # 2565 from greyli/patch-6
233,eab030f9f5f8f488362fd359a82e000991a1e7d5,2017-12-17 13:11:53-08:00,python -m pip install -U pip setuptools wheel tox PYTHON : `` C : \\Python35 '' python -c `` import sys ; sys.stdout.write ( sys.version ) '' init : `` % PYTHON % \\python.exe -m tox '' `` % PYTHON % \\python.exe -m pip install -U pip setuptools wheel tox '' PYTHON : `` C : \\Python27 '' python -m tox PYTHON : `` C : \\Python27 '' SET PATH= % PYTHON % ; % PATH %,['.appveyor.yml'],Merge pull request # 2559 from pallets/fix-appveyor
234,a43a439c7a839edc8c5ac7062acb694eceb99e55,2017-12-16 07:08:31-08:00,request at a time . Some of the options available for properly running Flask in production are documented here . for production * * as it does n't scale well and by default serves only one for production * * as it does n't scale well . Some of the options available for properly running Flask in production are documented here .,['docs/deploying/index.rst'],Merge pull request # 2536 from greyli/patch-4
235,05e3840cc2a3ac6233edacc75fb38ff866d6bcbd,2017-12-16 07:06:54-08:00,"env : TOXENV=py , simplejson , devel , lowest , codecov helpers , so encoding issues should not affect you . Flask 0.10 and Werkzeug 0.9 were the first versions to introduce Python 3 support . You should start using Python 3 for your next project , env : TOXENV=py-simplejson , codecov and newer , Python 2.6 and newer , and PyPy . and did not require a single line of code changed . py { 36,27 , py } -devel py { 36,35,34,33,27,26 , py } py { 36,33,27,26 , py } -lowest python : 3.6 We recommend using the latest version of Python 3 . Flask supports Python 3.3 python3 If you want to use Flask with Python 3 have a look at the : ref : ` python3-support ` page . py { 36,33,27,26 , py } -devel Python 3 changed how unicode and bytes are handled , which complicates how low usedevelop = true * * Python 2.6 and 3.3 are no longer supported . * * ( ` pallets/meta # 24 ` _ ) Python 3 Support in Flask Flask , its dependencies , and most Flask extensions all support Python 3 . but there are a few things to be aware of . env : TOXENV=py , codecov Python 3 Support env : TOXENV=py , simplejson , devel , lowest , codecov , docs-html .. _python3-support : python : 3.3 Flask , its dependencies , and most Flask extensions support Python 3 . Flask and Werkzeug , not the high-level application code . env : TOXENV=docs-html 10 . An extension currently has to support Python 2.7 , Python 3.3 and higher . Continue to : ref : ` installation ` or the : ref : ` quickstart ` . .. _pallets/meta # 24 : https : //github.com/pallets/meta/issues/24 and newer , Python 2.7 , and PyPy . The majority of the upgrade work is in the lower-level libraries like # install argparse for 2.6 10 . An extension currently has to support Python 3.4 and newer and 2.7 . ================ level code handles HTTP data . This mainly affects WSGI middleware interacting We recommend using the latest version of Python 3 . Flask supports Python 3.4 python -c 'import sys , pip ; sys.version_info < ( 2 , 7 ) and pip.main ( [ `` install '' , `` argparse '' , `` -q '' ] ) ' py { 36,35,34,27 , py } with the WSGI `` environ `` data . Werkzeug wraps that information in high-level python : 2.6 py { 36,27 , py } -lowest You need to use Python 3.3 or higher . 3.2 and older are * not * supported . For example , all of the examples in the Flask repository work on both Python 2 and 3 You should use the latest versions of all Flask-related packages .","['.travis.yml', 'CHANGES', 'docs/advanced_foreword.rst', 'docs/contents.rst.inc', 'docs/extensiondev.rst', 'docs/installation.rst', 'docs/python3.rst', 'tox.ini']",Merge pull request # 2555 from pallets/deprecate-26-33
236,b786585b8f5302d707a66fd306f0c79946b408f0,2017-12-16 23:13:55+09:00,To use Sentry you need to install the ` raven ` client : : $ pip install raven [ flask ] To use Sentry you need to install the ` raven ` client with extra ` flask ` dependencies : : $ pip install raven,['docs/errorhandling.rst'],Merge pull request # 2556 from accraze/patch-1
237,27a7171d42c878d5d9094c0117466e862ff91000,2017-12-14 12:21:34-08:00,"def reset_logging ( monkeypatch ) : name='logging-plugin ' ) pytestconfig.pluginmanager.register ( logging_plugin , 'logging-plugin ' ) def reset_logging ( pytestconfig ) : logging_plugin = pytestconfig.pluginmanager.unregister ( if logging_plugin : logging.root.handlers = [ ]",['tests/test_logging.py'],Merge pull request # 2554 from camilojimenez/2550-some-tests-fail
238,470112dd6e708a18eb4ec1daa10c4ea276620dbf,2017-10-30 13:48:29-07:00,"3 . Add in WSGI middlewares when the application is creating if necessary . The following changes are straightforward to implement : to find it . Here an example : file : ` exampleapp.py ` file that creates such 2 . Call a function from a blueprint when the application is setting up so So to use such an application you then have to create the application hooking in before/after request handlers etc . ) 3 . Add in WSGI middlewares when the application is being created if necessary . example : file : ` exampleapp.py ` file that creates such an application : : The factory function from above is not very clever so far , you can improve 2. call a function from a blueprint when the application is setting up so 1 . Make it possible to pass in configuration values for unit tests so that first in a separate file otherwise the : command : ` flask ` command wo n't be able hooking in before / after request handlers etc . ) it . The following changes are straightforward and possible : 1. make it possible to pass in configuration values for unittests so that The factory function above is not very clever , but you can improve it . you do n't have to create config files on the filesystem you do n't have to create config files on the filesystem . otherwise the : command : ` flask ` command wo n't be able to find it . Here 's an an application : : To use such an application you have to create it in a separate file first ,",['docs/patterns/appfactories.rst'],Merge pull request # 2500 from BogdanAlexandru/patch-1
239,a35fc3cd6bad4ba8891af75fb9a1661f979cbb0a,2017-10-25 04:09:41-07:00,use_notice : true channels : skip_join : true `` chat.freenode.net # pocoo '' on_success : change on_failure : always irc :,['.travis.yml'],Merge pull request # 2504 from hugovk/patch-1
240,82e66848e8ab44d58e483b6b92eea5f04627c422,2017-10-11 07:03:32-07:00,"The code above will limited the maximum allowed payload to 16 megabytes . If a larger file is transmitted , Flask will raise a If a larger file is transmitted , Flask will raise an The code above will limit the maximum allowed payload to 16 megabytes .",['docs/patterns/fileuploads.rst'],Merge pull request # 2491 from mrnom/patch-1
241,0932d8f428ae6c7cb6615a6a146e417eb182ec4d,2017-10-10 11:59:28-07:00,"help='Show the flask version ' , Environment Variables From dotenv return create_app ( 2 . The next thing we do is defining a function that is invoked with the def initdb ( ) : ' '' { name } '' '.format ( name=module ) ) 'wiki=wiki : cli ' app = call_factory ( script_info , app_factory ) Once that package is installed in the same virtualenv as Flask itself you file which will reside in the `` bin `` folder , or in the `` Scripts `` folder if 'Failed to find Flask application or factory in module `` { module } '' . ' from flask.cli import with_appcontext cmd='export ' if os.name == 'posix ' else 'set ' , If ` python-dotenv ` _ is installed , running the `` flask `` command will set Once that package is installed in the same virtualenv as your Flask project , from flask import Flask callback will automatically be wrapped through : func : ` cli.with_appcontext ` set to `` 1 `` debug is enabled or `` 0 `` disables it : : CLI Plugins $ pip install -e . args = args.rstrip ( ' , ' ) applications . This is not the only way to make this work . Another is the told where to find your application in order to use it . The `` FLASK_APP `` except AttributeError as e : function_regex = r'^ ( ? P < name > \w+ ) ( ? : \ ( ( ? P < args > . * ) \ ) ) ? $ ' manages a hypothetical wiki application . We will go through the details button and add an entry with `` FLASK_APP `` on the left and the name of the else : FLASK_APP=hello Once this has happened you can make the : command : ` flask ` command automatically That 's a lot of code for not much , so let 's go through all parts step by access to built-in , extension , and application-defined commands . The `` -- help `` `` FLASK_APP `` has three parts : an optional path that sets the current working The : func : ` run < cli.run_command > ` command will start the development server . It group . This is useful if you want to organize multiple related commands . : : Install the application in the virtualenv in editable mode and the custom .. currentmodule : : flask args = ast.literal_eval ( app_factory = getattr ( module , name , None ) also make your own `` driver scripts '' . Since Flask uses click for the The `` flask `` command is installed by Flask , not your application ; it must be Application Context import click Or with a filename : : can not work with them directly . Flask wo n't be able to figure out how to ` console script ` _ entry point . application . By default you have access to your `` app `` and : data : ` g ` . The files are only loaded by the : command : ` flask ` command or calling in the : class : ` ~flask.cli.FlaskGroup ` click group . Windows CMD.exe : `` venv\Scripts\activate.bat `` : : 'my-command=flask_my_extension.commands : cli ' ' '' FLASK_APP=\ ' { module } : { factory } ( args ) \ ' '' to specify ' To run an interactive Python shell you can use the `` shell `` command : : When calling an application factory , if the factory takes an argument named def do_work ( ) : Flask itself . when running the development server . : : > > > extra arguments . 'could not call it without specifying arguments . '.format ( `` FLASK_APP=src/hello `` { prefix } { cmd } FLASK_DEBUG=1 * ` Watchdog ` _ provides a faster , more efficient reloader for the development installed into your virtualenv . If you do n't want to install Flask or you factory=attr_name , module=module.__name__ If you are constantly working with a virtualenv you can also put the To explain all of this , here is an example : file : ` manage.py ` script that argument . If parentheses follow the factory name , their contents are parsed While the most common way is to use the : command : ` flask ` command , you can { prefix } { cmd } FLASK_APP=hello.py we ’ re using for our project and within that folder we want to pick the `` flask `` can run `` flask my-command `` to invoke your command . This is useful to callback=get_version , flask shell context pushed , so your command and extensions have access to the app and its click.echo ( 'Init the db ' ) } , @ app.cli.command ( with_appcontext=False ) This will start up an interactive Python shell , setup the correct import path or to a filename of a Python module that contains a Flask ... version_option = click.Option ( variables by adding them to the end of the virtualenv 's : file : ` activate ` your application , you can create your own Click object and export it as a `` script_info `` argument and calls the function with the appropriate new_error = NoAppException ( factory . if __name__ == '__main__ ' : application defined in the FLASK_APP environment variable , or from a wsgi.py % ( prefix ) s % ( cmd ) s FLASK_APP=hello.py application context and setup the local variables in the shell . This is 3 . Next step is to create a : class : ` FlaskGroup ` . In this case we just app = attr ... , Given a : file : ` hello.py ` file with the application in it named `` app `` instantiate your application properly by itself . Because of this reason built-in commands that are always there . Flask extensions can also decorator instead of the Flask decorator , you can use The new Flask CLI features are n't yet fully integrated into the PyCharm IDE , production , you should call : func : ` ~flask.cli.load_dotenv ` manually . return app You can skip this next step if you 're using : ref : ` dotenv ` . We need to add an def cli ( ) : committed to the repository so that it works automatically wherever the project : meth : ` ~Flask.run ` . If you would like to load these files when running in app = create_app ( os.environ [ 'YOURAPPLICATION_CONFIG ' ] ) is_flag=True , is_eager=True ) export FLASK_APP=hello `` `` '' Checks if the given string is a variable name or a function . If it is `` `` '' This is a management script for the wiki application . '' '' '' Environment Variables From virtualenv command line or environment variable as an import name . This is simple @ click.group ( cls=FlaskGroup , create_app=create_wiki_app ) good descriptive name , such as “ Run Flask Server ” and click * Apply * . ( `` create_app `` ) . 'console_scripts ' : [ raise NoAppException ( 'Failed to find application in module ' def create_wiki_app ( info ) : In your PyCharm application , with your project open , click on * Run * Windows CMD , : file : ` venv\Scripts\activate.bat ` : : When you are using the app factory pattern , it may be more convenient to define Now that we have on run configuration which implements `` flask run `` from within In case you are using factory functions to create your application ( see $ flask initdb Debug Flag easily . For instance if you want a shell command to initialize the database you registered to : attr : ` Flask.cli ` will expect to be ( indirectly at least ) The : command : ` flask ` script can also be instructed to enable the debug Inside : file : ` flask_my_extension/commands.py ` you can then export a Click Debug Mode There ’ s quite a few options to change , but don ’ t worry— once we ’ ve done it In this example we use `` run `` , which will run the development server . if inspect.isfunction ( attr ) : app = call_factory ( self.create_app , self ) Flask looks for a module named : file : ` wsgi.py ` or : file : ` app.py ` by default , pass Whenever click now needs to operate on a Flask application it will Commands added using the Flask app 's : attr : ` ~Flask.cli ` 'Could not parse the arguments in ' done by invoking the : meth : ` Flask.make_shell_context ` method of the .. versionadded : : 0.11 ) $ wiki run directory , a Python file or dotted import path , and an optional variable ) This could be a file named : file : ` autoapp.py ` with these contents : : With a custom script you do n't have this problem as you can fully @ click.command ( ) `` ( { args } , ) '' .format ( args=args ) ) from yourapplication import create_app raise NoAppException ( strings must still be in quotes . The way this script works is by providing access to all the commands on from flask.cli import AppGroup `` name `` . : : 'middleware . '.format ( module=module.__name__ ) match = re.match ( function_regex , string ) Windows CMD : : left and the name of the python file , or package on the right % ( prefix ) sflask run entry_points= { from the menu bar and go to * Edit Configurations * . You ’ ll be greeted by a .. _watchdog : https : //pythonhosted.org/watchdog/ : ref : ` app-factories ` ) . In this case we load the config from an For the : command : ` flask ` script to work , an application needs to be discovered . export FLASK_APP=/path/to/hello.py Within that folder , pick the `` flask `` executable which will reside in the 'Detected factory `` { factory } '' in module `` { module } '' , but ' a `` script_info `` argument and calls the function with the appropriate if not match : 'Auto-detected multiple Flask applications in module `` { module } '' . ' : ref : ` custom-scripts ` support . cli ( ) name , args = match.groups ( ) return find_app_by_string ( script_info , module , app_name ) def example ( ) : `` make_app `` that returns an instance . > $ env : FLASK_APP = `` hello '' raise NoAppException ( The command will then show up on the command line : : > set FLASK_APP=hello from . import Flask .. _entry point : https : //packaging.python.org/tutorials/distributing-packages/ # entry-points This example adds the same command , but as `` user create `` , a command in a The * Script Parameter * field ( * * B * * ) is set to the cli command you wish to From this point onwards : command : ` flask ` will find your application . ( 'cliapp.factory ' , 'no_app ' ) , ) It can also be disabled by passing `` with_appcontext=False `` to the and if it finds one it assumes the application is defined in it . Factory Functions application 's : attr : ` ~Flask.debug ` flag . The value `` 1 `` enables it , `` 0 `` The `` flask `` command is implemented using ` Click ` _ . See that project 's write reusable applications that you want to ship to users and they should Inside : file : ` mypackage/commands.py ` you can then export a Click object : : ' '' { module } : { app_name } '' . '.format ( parts : found , the command looks for a factory function named `` create_app `` or variable ) and then provides commands either provided by the application or Loading Environment Variables From `` .env `` Files args = ( ) ' well as not using keyword arguments or ' 1 . First we import the `` click `` library as well as the click extensions While `` FLASK_APP `` supports a variety of options for specifying your `` FLASK_APP=hello `` so we have to do a few tweaks to get them working smoothly . so we have to do a few tweaks to get them working smoothly . These instructions Custom Commands make an empty function with a help doc string that just does nothing optionally be specified after a colon . For instance app = Flask ( __name__ ) Directories are scanned upwards from the directory you call `` flask `` : meth : ` ~flask.Flask.run ` . If you would like to load these files when running in bottom of the file . That way every time you activate your virtualenv you module=module.__name__ , app_name=app_name Windows PowerShell : : to run a different CLI command , e.g . `` flask shell `` . Edit the activate script for the shell you use . For example : Unix Bash , : file : ` venv/bin/activate ` : : `` `` '' Checks if the given string is a variable name or a function . If it is a Unix Bash : `` venv/bin/activate `` : : The most useful commands are the `` run '' and `` shell '' command . match = re.match ( r'^ * ( [ ^ ( ) ] + ) * ( ? : \ ( ( . * ? ) * , ? * \ ) ) ? * $ ' , app_name ) 'Use `` FLASK_APP= { module } : name to specify one . '.format ( The `` create_app `` factory in `` hello `` is called with the string `` 'dev ' `` access to other commands , including any custom ones you may implement yourself . * Running on http : //127.0.0.1:5000/ ( Press CTRL+C to quit ) ' '' , else : is_flag=True , shell with the : func : ` shell < cli.shell_command > ` command . An application interface , in your virtualenv . Executed from the terminal , this script gives Rather than setting `` FLASK_APP `` each time you open a new terminal , you can context will be active , and the app instance will be imported . : : but it has some limitations . Primarily it does not work with application if args is not None : def create_app ( ) : decorator : : Create an instance of : class : ` ~cli.FlaskGroup ` and pass it the factory : : Run the Development Server app = Flask ( __name__ ) To understand why you might want custom scripts you need to understand how our application file or package resides . PyCharm changed it to the directory from a filename you could make a separate file that creates such an Basic Usage app.cli.add_command ( do_work ) they are installed . Entry points are specified in : file : ` setup.py ` : : 'prefix ' : os.name == 'posix ' and ' $ ' or `` , your own Click script . Instead of using `` FLASK_APP `` and letting Flask load { prefix } flask run environment variable is used to specify how to load the application . app = call_factory ( app_factory , script_info ) PyCharm , we can simply copy that configuration and alter the script argument def no_app ( ) : mode of the application automatically by exporting `` FLASK_DEBUG `` . If Application Discovery execute , in this example we use `` run `` which will run our development server . exactly the same . .. _Click : http : //click.pocoo.org/ script is available . Note that you do n't need to set `` FLASK_APP `` . : : with the `` flask `` executable when we selected it earlier , which is incorrect . 4 . All is rounded up by invoking the script . provide extra functionality that Flask itself can not ship . .. _console script : https : //packaging.python.org/tutorials/distributing-packages/ # console-scripts enables a wide range of new features for the Flask ecosystem and your own 'be called with the specified arguments . '.format ( attr = getattr ( module , name ) if args : ' Did you make sure to use the right number of arguments as ' `` `` '' .format ( : : from yourwiki import create_app If you want to add more commands to the shell script you can do this config=os.environ.get ( 'WIKI_CONFIG ' , 'wikiconfig.py ' ) ) option will give more information about any commands and options . this is how it can be run . .. warning : : Do not use this command to run your application in production . Plugins afterwards : : To explore the data in your application , you can start an interactive Python The name is imported , automatically detecting an app ( `` app `` ) or factory as the argument . if isinstance ( app , Flask ) : is_eager=True * Edit Configurations * . You 'll be greeted by a screen similar to this : exporting the `` FLASK_APP `` environment variable . It can be either set to an callback=get_version , 'arguments . '.format ( raise NoAppException ( e.args [ 0 ] ) ' '' { app_name } '' . '.format ( e=e , app_name=app_name ) we can easily copy the entire configuration and make a single tweak to give us Application Context ' '' FLASK_APP= { module } : name '' to specify the correct ' can do this : : The new Flask CLI features aren ’ t yet fully integrated into the PyCharm IDE , commands if they want . However there is a second way to add CLI plugins Use : meth : ` ~Flask.shell_context_processor ` to add other automatic imports . This example adds the command `` create_user `` that takes the argument name='flask-my-extension ' , that declares an entrypoint that points to a click command : app = call_factory ( script_info , attr , args ) app = call_factory ( self , self.create_app ) One of the nice new features in Flask 0.11 is the built-in integration of [ flask.commands ] : meth : ` ~cli.AppGroup.command ` decorator will be executed with an application Provides commands from Flask , extensions , and the application . Loads the * Debugger is active ! Python file or package on the right ( `` app.py `` for example ) . If you 're sure a command does n't need the context , you can disable it : : setup ( arguments . '' '' '' app.cli.add_command ( user_cli ) from the `` flask.cli `` package . Primarily we are here interested ' Use `` FLASK_APP= { module } : name '' to specify the correct ' def cli ( ) : either directly import an application object or create it ( see % ( prefix ) s % ( cmd ) s FLASK_DEBUG=1 version_option = click.Option ( [ ' -- version ' ] , module=module.__name__ # strip whitespace script info object ( : class : ` ~flask.cli.ScriptInfo ` ) from Flask and its We need to add an environment variable ( * * C * * ) to identify our application . export YOURAPPLICATION_CONFIG=/path/to/config.cfg the : file : ` mymodule.py ` file . ' not be called with the specified arguments ( and a ' Open a Shell Installing Flask installs the `` flask `` script , a ` Click ` _ command line * Serving Flask app `` hello '' they have the application context setup . Because of this , if you register try : args = ast.literal_eval ( ' ( { args } , ) '.format ( args=args ) ) `` mymodule : application `` would tell it to use the ` application ` object in For the * Script * input ( * * A * * ) , we want to navigate to the virtual environment my-command=mypackage.commands : cli have a special use-case you can also use `` python -m flask `` to accomplish : func : ` ~click.Group.add_command ` or through other means . purpose is to fully import and create the application . This can It loads the application configured ( through the FLASK_APP environment ' { e } \nThe app factory `` { factory } '' in module `` { module } '' could ' `` FLASK_APP= '' hello : create_app ( 'dev ' ) '' `` click finds and executes the Flask application . If you use the Virtualenv Integration is checked out . 'Failed to find application in module `` { module } '' . Are you sure ' # invalid identifier to run a different cli command , e.g . `` flask shell `` . Flask will automatically load commands specified in the `` flask.commands `` `` FLASK_APP=hello.web `` If `` FLASK_APP `` is not set , the command will look for a file called After installation of Flask you will now find a : command : ` flask ` script scripts there is no reason you can not hook these scripts into any click ... reraise ( NoAppException , new_error , sys.exc_info ( ) [ 2 ] ) def find_app_by_string ( string , script_info , module ) : necessary so that the commands know which Flask application they have to import os export FLASK_DEBUG=1 ' A valid Flask application was not obtained from ' attr = getattr ( module , name , None ) register more commands there if they desire so . Environment variables ( On Windows use `` set `` instead of `` export `` ) : : disables it . Forcing the debug flag on also enables the debugger and reloader return app } ) Unix Bash ( Linux , Mac , etc . ) : : the recommendation is to create a separate file that instantiates else : def create_user ( name ) : `` `` '' ' script_info argument automatically added if applicable ) . ' work with . the ` click < http : //click.pocoo.org/ > ` _ command line interface . This > flask run The files are only loaded by the `` flask `` command or calling from setuptools import setup to Flask which is through `` setuptools `` . If you make a Python package that if inspect.isfunction ( attr ) : our application file or package resides . flask user create demo `` info `` , then the : class : ` ~cli.ScriptInfo ` instance is passed as a keyword def find_app_by_string ( script_info , module , app_name ) : If ` python-dotenv ` _ is installed , running the : command : ` flask ` command will set you 're on Windows . $ flask shell function=attr_name , module=module.__name__ Within the given import , the command looks for an application instance named `` FLASK_APP=hello : app2 `` If you do not want to install dotenv support , you can still set environment $ export FLASK_APP=hello you can run `` flask my-command `` to invoke the command . args = ( ) Click on the browse button and add an entry with `` FLASK_APP `` on the 'The provided string `` { string } '' is not a valid variable name ' ( 'cliapp.factory ' , ' create_app ( ) ' , 'app ' ) , raise NoAppException ( be presented with a custom management script . [ ' -- version ' ] , `` `` '' % { a callback on `` app.cli `` with the : meth : ` ~flask.cli.AppGroup.command ` the any custom ones you may implement yourself . as Python literals and passes as arguments to the function . This means that up . This behavior is not available if a command is added later with stable , or efficient . See : ref : ` deployment ` for how to run in production . if args : 'flask.commands ' : [ application . `` export FLASK_APP `` into your `` activate `` script by adding it to the object : : Directories are scanned upwards from the directory you call : command : ` flask ` and then pass the `` create_wiki_app `` function as a factory function . customize how the application will be created . This is very useful if you 'or function expression . '.format ( string=string ) ) def call_factory ( app_factory , script_info , arguments= ( ) ) : application from an environment variable . export FLASK_APP ' non-literals ? '.format ( e=e , factory=string , module=module ) ) arguments . application . There is one big caveat and that is , that commands $ flask run A general utility script for Flask applications . call that function with the script info and ask for it to be created . 'could not call it without arguments . Use ' ) Python 3.6.2 ( default , Jul 20 2017 , 03:52:27 ) prefix= ' $ ' if os.name == 'posix ' else ' > ' `` `` '' This is an example command . '' '' '' Imports the path `` hello.web `` . environment variable . a function , it checks for specified arguments and whether it takes expose_value=False , name of the instance or factory . If the name is a factory , it can optionally applications . import click [ GCC 7.1.1 20170630 ] on linux $ FLASK_DEBUG=1 flask run screen similar to this : ' '' { name } '' is not a valid variable name or function ' production , you should call : func : ` ~cli.load_dotenv ` manually . Init the db ' { e } \nThe factory `` { app_name } '' in module `` { module } '' could not ' : file : ` wsgi.py ` or : file : ` app.py ` and try to detect an application instance or Only use the development server during development . The development server Most commands operate on the application so it makes a lot of sense if Set the : envvar : ` FLASK_DEBUG ` environment variable to override the app = attr There 's quite a few options to change , but once we 've done it for one command , export FLASK_APP=hello Flask extensions can always patch the : attr : ` Flask.cli ` instance with more Define the entry point in : file : ` setup.py ` : : user_cli = AppGroup ( 'user ' ) pick it up : : 'expression . '.format ( name=app_name ) raise NoAppException ( For the * Script * input ( * * A * * ) , navigate to your project 's virtual environment . ( 'cliapp.factory ' , 'create_app ( ' ) , ( `` app `` ) . This provides an easy way to create an app from a factory with `` bin `` folder , or in the `` Scripts `` on Windows . @ app.cli.command ( ) set FLASK_APP=hello app = call_factory ( app_factory , script_info , args ) Example : file : ` setup.py ` : : except ( ValueError , SyntaxError ) as e : pass raise NoAppException ( Instance : /home/user/Projects/hello/instance : END ' one . '.format ( module=module.__name__ ) App : example # other setup use Flask 's dotenv support to set environment variables automatically . step . : ref : ` app-factories ` ) you will discover that the : command : ` flask ` command which informs the cli system to ensure that an application context is set try : environment variable ( * * C * * ) to identify our application . Click on the browse function , it checks for specified arguments and whether it takes a for one command , we can easily copy the entire configuration and make a if match : automatically also activate the correct application name . Sets the current working directory to `` src `` then imports `` hello `` . set `` FLASK_APP=hello '' `` app `` or `` application `` , then any application instance . If no instance is The file : file : ` wsgi.py ` is imported , automatically detecting an app application , most use cases should be simple . Here are the typical values : documentation for full information about writing commands . environment variable . : func : ` ~cli.with_appcontext ` to get the same behavior . : : `` `` '' Initialize the database . '' '' '' file . Debug mode can be controlled with the FLASK_DEBUG from flask import Flask configuration . If you create a command using the Click : func : ` ~click.command ` expose_value=False , 'it contains a Flask application ? Maybe you wrapped it in a WSGI ' flask run `` `` '' Management script for the Wiki application . '' '' '' good descriptive name , such as `` Run Flask Server '' , and click * Apply * . ( nothing ) This shell command acts as general utility script for Flask applications . You can instruct Flask to look for the application in a different module by we can simply copy that configuration and alter the * Script * argument 'one . '.format ( module=module.__name__ ) ) ) help='Show the flask version ' , should export a Flask command line plugin you can ship a : file : ` setup.py ` file single tweak to give us access to other flask cli commands , including ] , export FLASK_APP=/path/to/autoapp.py : command : ` flask ` script you specify the application to work with on the return find_app_by_string ( app_name , script_info , module ) ) Now that we have a configuration which runs `` flask run `` from within PyCharm , should be similar for any other IDE you might want to use . def call_factory ( script_info , app_factory , arguments= ( ) ) : `` `` '' Attempts to locate the application . '' '' '' Uses the `` app2 `` Flask instance in `` hello `` . * Forcing debug mode on script . Activating the virtualenv will set the variables . ( 'cliapp.factory ' , 'create_app ( ) ' ) , your Flask application 's : attr : ` Flask.cli ` instance as well as some * Restarting with inotify reloader Running a Shell 'cmd ' : os.name == 'posix ' and 'export ' or 'set ' , The * Script Parameter * field ( * * B * * ) is set to the CLI command you to execute . app = Flask ( 'wiki ' ) launched from a : class : ` flask.cli.FlaskGroup ` click group . This is flask create_user admin It is preferred to use dotenv support over this , since : file : ` .flaskenv ` can be is provided for convenience , but is not designed to be particularly secure , Example usage : replaces the : meth : ` Flask.run ` method in most cases . : : entry_points= '' ' name , args = match.groups ( ) In that imported file the name of the app needs to be called `` app `` or 'Detected multiple Flask applications in module `` { module } '' . Use ' For instance if you have a factory function that creates an application e=e , app_name=app_name , module=module.__name__ be followed by arguments in parentheses . The following values demonstrate these .. currentmodule : : flask In PyCharm , with your project open , click on * Run * from the menu bar and go to * Debugger PIN : 223-456-919 Custom Commands ( `` app.py `` for example ) . factory functions ( see : ref : ` app-factories ` ) . if isinstance ( app , Flask ) : # space before arg list server . app = call_factory ( attr , script_info ) ~~~~~~~~~~~~~~~~~~~ # no app returned ` entry point ` _ . This is useful for extensions that want to add commands when 'Auto-detected `` { function } ( ) '' in module `` { module } '' , but '","['docs/cli.rst', 'docs/installation.rst', 'flask/cli.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_cli.py']",Merge pull request # 2490 from davidism/cli-review
242,8020d5eac9e4bb0e40a47b82ca95713ee78fc73c,2017-10-09 08:18:34-07:00,") AssertionError , ) '/bar/123 ' , view_func=foo_foo_foo foo_foo_foo.__name__ = 'bar.123 ' assert ' . ' not in view_func.__name__ , `` Blueprint view function name should not contain dots '' .. _ # 2450 : https : //github.com/pallets/flask/pull/2450 Blueprint view function name may not contain dots . ( ` # 2450 ` _ ) if view_func : pytest.raises ( lambda : bp.add_url_rule (","['CHANGES', 'flask/blueprints.py', 'tests/test_blueprints.py']",Merge pull request # 2450 from Caratpine/master
243,0a1090890f8425a69e5b004aceb04fd7527b8e35,2017-10-07 19:52:44+02:00,"# : because the request was never internally bound . # : instead ( an attribute of the Werkzeug exception : exc : ` ~werkzeug.exceptions.MethodNotAllowed ` ) # : the valid list is available in `` routing_exception.valid_methods `` # : Though if the request 's method was invalid for the URL rule ,",['flask/wrappers.py'],Add additional information in the url_rule docs ( # 2467 )
244,f071562ec007b629d5cdc1374f8df45b74acbb7c,2017-09-12 12:55:41+02:00,Binary files a/docs/_static/flask.png and b/docs/_static/flask.png differ Binary files a/docs/_static/debugger.png and b/docs/_static/debugger.png differ Binary files a/docs/_static/no.png and b/docs/_static/no.png differ Binary files a/docs/_static/logo-full.png and b/docs/_static/logo-full.png differ Binary files a/docs/_static/touch-icon.png and b/docs/_static/touch-icon.png differ Binary files a/docs/_static/pycharm-runconfig.png and b/docs/_static/pycharm-runconfig.png differ Binary files a/docs/_static/flaskr.png and b/docs/_static/flaskr.png differ Binary files a/docs/_static/yes.png and b/docs/_static/yes.png differ,"['docs/_static/debugger.png', 'docs/_static/flask.png', 'docs/_static/flaskr.png', 'docs/_static/logo-full.png', 'docs/_static/no.png', 'docs/_static/pycharm-runconfig.png', 'docs/_static/touch-icon.png', 'docs/_static/yes.png']",Merge pull request # 2470 from ImgBotApp/imgbot
245,7d4703e98ab64fa29f6ca50b72ca5a4548121bb8,2017-08-14 14:01:46+08:00,* Running on http : //localhost:5000/ Ready for production ? ` Read this first < http : //flask.pocoo.org/docs/deploying/ > ` . * Running on http : //localhost:5000/ Ready for production ? ` Read this first < http : //flask.pocoo.org/docs/deploying/ > ` .,['setup.py'],Merge pull request # 2442 from hallazzang/patch-1
246,330792e10b6d05788700f269f7da339bec1bfda9,2017-08-14 14:01:10+08:00,"If you 're following the tutorial from a specific version of the docs , be may be different than the example . .. warning : : sure to check out the same tag in the repository , otherwise the tutorial",['docs/tutorial/introduction.rst'],Merge pull request # 2445 from brennv/add-version-warning
247,c74f46979a8b8358437bd7f76e478d04248a9c72,2017-07-31 13:23:45-07:00,": mod : ` logging ` package for a full list . c.get ( '/missing ' ) : class : ` ~logging.handlers.SysLogHandler ` - sends logs to a UNIX enables it , `` 'debug ' `` only activates it in debug mode , `` 'production ' `` mail_handler.setFormatter ( logging.Formatter ( ' % ( levelname ) s in % ( module ) s : % ( message ) s ' 'LOGGER_NAME ' : None , import pytest rv = client.get ( '/ ' ) def wsgi_errors_stream ( ) : ) ) from werkzeug.exceptions import BadRequest , HTTPException , \ depending on `` app.debug `` . No handlers are removed , and a handler is only with app.test_request_context ( errors_stream=stream ) : client.get ( '/ ' ) try : | | `` `` 2003-07-08 16:49:45,896 '' `` ( the numbers after | debugging some errors . You can subclass : class : ` logging.Formatter ` to inject your mail server requires credentials , these can also be provided . For above , just make sure to use a lower setting ( I would recommend self._logger = rv = create_logger ( self ) with pytest.raises ( ZeroDivisionError ) : File logging this is what you want to use . Implements the logging support for Flask . if not app.debug and _should_log_for ( app , 'production ' ) : with client : The name of the logger that the Flask application sets up . If not set , : func : ` ~flask.logging.wsgi_errors_stream ` with a basic format . in , getting the loggers with the : func : ` ~logging.getLogger ` function and : class : ` ~logging.handlers.SMTPHandler ` that will send mails with the mail handles the actual formatting . It is passed a assert rv.status_code == 500 return self._logger `` `` `` `` `` `` `` `` logger = getLogger ( app.logger_name ) return redirect ( url_for ( 'index ' ) ) : class : ` ~logging.StreamHandler ` to its logger . If you want to further customize the formatting , you can subclass the from werkzeug.http import http_date else : .. tabularcolumns : : |p { 3cm } |p { 12cm } | | | the comma are millisecond portion of the time ) . | file_handler = TheHandlerYouWant ( ... ) | | This can be changed by subclassing the formatter | def exc ( ) : 'stream ' : 'ext : //flask.logging.wsgi_errors_stream ' , app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' | Format | Description | # : package name passed to the constructor . from flask.logging import create_logger 'version ' : 1 , @ app.after_request logger.propagate = False err = out.getvalue ( ) : class : ` ~logging.FileHandler ` - logs messages to a file on the # already attached to it . for trigger in 'before ' , 'after ' : Other Libraries on the filesystem and will rotate after a certain number of messages . .. versionchanged : : 1.0 : meth : ` Flask.logger < flask.Flask.logger > ` returns the logger named root = logging.getLogger ( ) file_handler.setFormatter ( Formatter ( | `` % ( asctime ) s `` | Human-readable time when the | ' [ in % ( pathname ) s : % ( lineno ) d ] ' ' % ( message ) s\n ' and then it becomes impossible to have different logging setups for those . } ) `` `` '' Check if there is a handler in the logging chain that will handle the a mail the second the exception happened . Then you get an alert and you Other libraries may use logging extensively , and you want to see relevant function also removes all attached handlers in case there was a assert 'Exception on / [ GET ] ' in err We also tell the handler to only send errors and more critical messages . information so that you have a better idea of why that error happened , and iterating over them to attach handlers : : debug_handler = DebugHandler ( ) Message : removed , and a handler is only added if no handlers are already assert 'ZeroDivisionError : ' in err it . There might be a situation in which you want to have multiple you mails for errors which is probably what you want . Here is how you can rv = client.get ( '/ ' , errors_stream=stream ) with pytest.raises ( TemplateNotFound ) as excinfo : if self.level == 0 and app.debug : flask.logging from flask.logging import default_handler , has_level_handler , \ Flask Extensions root_level = logging.root.level logging.getLogger ( 'flask ' ) , 'handlers ' , [ _TestHandler ( ) ] app = flask.Flask ( __name__ ) def test_logger ( app ) : | | `` 'ERROR ' `` , `` 'CRITICAL ' `` ) . | abort ( 401 ) to the root logger instead of only the app logger . : : assert 'ERROR in test_logging : test ' in stream.getvalue ( ) app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' app.logger.error ( 'test ' ) if self._logger and self._logger.name == self.logger_name : out = StringIO ( ) if not app.debug : def test_logger_cache ( self ) : 1 // 0 rv = client.get ( '/ ' ) _logger_lock = Lock ( ) `` `` `` `` return create_logger ( self ) So far we only configured the logger your application created itself . err = out.getvalue ( ) 'server-error @ example.com ' , WSGI server in `` environ [ 'wsgi.errors ' ] `` ( which is usually app.testing = False Default Configuration extension 's documentation for details . .. _logging : app.logger.warning ( ' A warning occurred ( % d apples ) ' , 42 ) `` `` '' mail_handler = SMTPHandler ( '127.0.0.1 ' , is active , log to `` wsgi.errors `` , otherwise use `` sys.stderr `` . def internal_server_error ( e ) : Other libraries might log themselves as well . For example , SQLAlchemy uses from .globals import request self._logger = None assert rv.data == b'Hello Server Error ' return response logger.addHandler ( mail_handler ) assert 'Exception on / [ GET ] ' in err | | : class : ` ~logging.LogRecord ` was created . | `` `` '' Finds the most appropriate error stream for the application . If a app.testing = False def test_existing_handler ( app ) : If there are no handlers configured , a default handler will be added . BadRequestKeyError Because we certainly do n't want to get a mail for warnings or other more importantly , where it did . as possible when the program starts . If : meth : ` app.logger < flask.Flask.logger > ` # : `` [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s `` . record.remote_addr = request.remote_addr that Flask itself will not issue any warnings in the core system , so it 's | `` % ( message ) s `` | The logged message , computed as `` msg % args `` | Removing the Default Handler similar to a regular Python logger but changes the effective logging default_handler = logging.StreamHandler ( wsgi_errors_stream ) assert rv.status_code == 500 from logging.handlers import SMTPHandler When running the application on a remote server for production , you probably app.logger_name = 'flask_tests/test_suppressed_exception_logging ' ) app.logger.debug ( 'this is a debug statement ' ) with _logger_lock : .. py : data : : LOGGER_HANDLER_POLICY app.debug = True assert b'Internal Server Error ' in rv.data assert app.logger is logger1 formatter . The formatter has three interesting methods : app.logger.handlers = [ _TestHandler ( ) ] useless logs that might happen during request handling . import flask if trigger == 'before ' : Complex Log Formatting logging.root.setLevel ( root_level ) prod_handler.setLevel ( ERROR ) def test_wsgi_errors_stream ( app , client ) : def test_debug_log_override ( self , app ) : possible , configure logging before creating the application object . assert 'Traceback ( most recent call last ) : ' in err mail_handler.setFormatter ( formatter ) app.logger.level = 10 `` LOGGER_HANDLER_POLICY `` config was removed . The logger is always named # just in case that was not a new logger , get rid of all the handlers 'handlers ' : { 'wsgi ' : { InternalServerError , MethodNotAllowed , default_exceptions return `` def before_request ( ) : app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] = True from werkzeug.exceptions import BadRequest , BadRequestKeyError , HTTPException , \ InternalServerError , MethodNotAllowed , default_exceptions , \ Flask by default will just report to the WSGI error stream or stderr : class : ` ~logging.LogRecord ` object and has to return the formatted return 'Hello Server Error ' , 500 # : .. versionadded : : 0.4 Flask 's default handler , the mail handler defined above , or any other : data : ` logging.DEBUG ` if it is not set . dictConfig ( { level = logger.getEffectiveLevel ( ) ) added if no handlers are already configured . ( ` # 2436 ` _ ) monkeypatch.setattr ( def test_exception_logging ( self , app , client ) : logger.setLevel ( logging.NOTSET ) | `` % ( levelname ) s `` | Text logging level for the message | do n't have to override it . Controlling the Log Format rv = app.test_client ( ) .get ( '/ ' ) assert 'missing_template.html ' in str ( excinfo.value ) app.logger.addHandler ( mail_handler ) mailhost='127.0.0.1 ' , current = logger This requires that you have an SMTP server set up on the same server . See the not different ones depending on `` app.debug `` . No handlers are app.logger.removeHandler ( default_handler ) logger.propagate = False self.logger_name = self.import_name If you configured logging after accessing class ProductionHandler ( StreamHandler ) : from flask.helpers import get_debug_flag , make_response assert app.logger.handlers == [ default_handler ] | | and overriding the | default_handler.setFormatter ( formatter ) assert app.logger.level == 10 `` `` '' The `` 'flask.app ' `` logger , a standard Python to sys.stderr . # Disable propagation by default does n't check `` app.debug `` each time . Only one format is used , # Prepare the deferred setup of the logger . logger_name = ConfigAttribute ( 'LOGGER_NAME ' ) 'class ' : 'logging.StreamHandler ' , assert not out.getvalue ( ) app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] = old_load_setting logging heavily in its core . While there is a method to configure all app.logger.info ( ' % s failed to log in ' , user.username ) This example uses : func : ` ~logging.config.dictConfig ` to create a logging your own fields that can be used in messages . You can change the formatter for logger.addHandler ( mail_handler ) ctx = _request_ctx_stack.top filesystem . you something went wrong . import logging if any ( handler.level < = level for handler in current.handlers ) : login_user ( user ) `` `` '' Get the `` 'flask.app ' `` logger and configure it if needed . your responsibility to warn in the code if something seems odd . logging.root.handlers [ : ] = root_handlers app.debug = True if not current.propagate : logging.root.addHandler ( logging.StreamHandler ( ) ) 1 // 0 Before you run that in production , please also look at : ref : ` logformat ` to if not has_level_handler ( logger ) : import sys mail_handler = SMTPHandler ( | | logging call was issued ( if available ) . | configuration similar to Flask 's default , except for all logs : : for logger in ( `` `` '' Find the most appropriate error stream for the application . If a request return 'Foo ' from flask.logging import default_handler def test_template_loader_debugging ( test_apps , monkeypatch ) : logging.getLogger ( 'sqlalchemy ' ) , app = Flask ( __name__ ) send log messages to a file , and you 'll only check that file if a user tells loggers = [ app.logger , getLogger ( 'sqlalchemy ' ) , | `` % ( module ) s `` | Module ( name portion of filename ) . | def internal_server_error ( e ) : from themodule import TheHandlerYouWant assert app.logger.level == logging.DEBUG from logging import Formatter app.logger_name = 'flask_tests/test_debug_log_override ' : meth : ` app.logger < flask.Flask.logger > ` or its own named logger . Consult each Email box but not all of them are useful for basic error logging . The most from logging import getLogger return `` with pytest.raises ( TemplateNotFound ) as excinfo : return self._logger def test_has_level_handler ( ) : import logging import flask Email Errors to Admins Default : `` 'always ' `` it will take the import name passed to `` Flask.__init__ `` . app.logger.addHandler ( file_handler ) return response When you want to configure logging for your project , you should do it as soon return 'Hello Server Error ' , 500 root.addHandler ( default_handler ) client.get ( '/ ' , errors_stream=stream ) assert rv.data ADMINS , 'YourApplication Failed ' ) In debug mode , the logger 's : attr : ` ~logging.Logger.level ` will be set stream = StringIO ( ) assert wsgi_errors_stream._get_current_object ( ) is stream Flask uses the Python builtin logging system , and it can actually send def test_debug_log ( self , capsys , app , client ) : def _should_log_for ( app , mode ) : @ app.errorhandler ( 500 ) 'handlers ' : [ 'wsgi ' ] string . # a lock used for logger initialization app.logger_name = 'flask_tests/test_exception_logging ' def after_request ( response ) : ` WARNING ` ) : : handler.setLevel ( logging.ERROR ) logger.addHandler ( default_handler ) StreamHandler.emit ( self , record ) `` ext : //flask.logging.wsgi_errors_stream `` . Logging to a File logger1 = app.logger By default a handler will only write the message string into a file or There are a couple of handlers provided by the logging system out of the c.get ( '/missing ' ) : meth : ` ~logging.Formatter.formatException ` from flask import request return DEBUG ' [ % ( asctime ) s ] % ( remote_addr ) s requested % ( url ) s\n ' ~~~~~~~~~~~~~ rv = app.test_client ( ) .get ( '/ ' , errors_stream=out ) app.logger_name = __name__ + '/test_logger_cache ' for trigger in 'before ' , 'after ' : assert ' 1 // 0 ' in err Once you picked your log handler , do like you did with the SMTP handler Logger = getLoggerClass ( ) interesting are probably the following : def format ( self , record ) : `` `` ` of frustration . Even if you get mails , you probably also want to log warnings . It 's a tuple and has to return a string . The default is usually fine , you class DebugHandler ( StreamHandler ) : def after_request ( response ) : wsgi_errors_stream called for exception formatting . It is passed an : attr : ` ~sys.exc_info ` root.addHandler ( mail_handler ) subject='Application Error ' if not app.debug : in debug mode . This logger can be used to ( surprise ) log messages . from .globals import _request_ctx_stack default_handler.setFormatter ( logging.Formatter ( level based on the application 's debug flag . Furthermore this if user.check_password ( request.form [ 'password ' ] ) : are logged . : : | | : meth : ` ~logging.Formatter.formatTime ` method . | logged under the `` 'flask ' `` logger namespace . logger.addHandler ( prod_handler ) ' '' ) ) policy = app.config [ 'LOGGER_HANDLER_POLICY ' ] event log of a Windows system . If you are deploying on a Windows box , : class : ` logging.handlers.SMTPHandler ` to send an email when errors and higher app.logger , loggers at once in the : mod : ` logging ` package , I would not recommend using server listening on `` 127.0.0.1 `` to all the ` ADMINS ` from the address default configuration is to log to stderr if the application is Depending on your project , it may be more useful to configure each logger you DEBUG_LOG_FORMAT = ( from logging import StreamHandler from werkzeug.datastructures import Headers , ImmutableDict return True def login ( ) : To be proactive about discovering and fixing bugs , you can configure a class TestUrlFor ( object ) : if app.debug and _should_log_for ( app , 'debug ' ) : put more information into that error mail . That will save you from a lot : meth : ` ~logging.Formatter.formatTime ` : Other Libraries assert rv.status_code == 500 return rv : : : data : ` sys.stderr ` ) . Outside a request , it will log to : data : ` sys.stderr ` . 'LOGGER_HANDLER_POLICY ' : 'always ' , assert err == `` If you configure your own : class : ` logging.StreamHandler ` , you may want to | `` % ( pathname ) s `` | Full pathname of the source file where the | automatically . During requests , it will write to the stream specified by the def getEffectiveLevel ( self ) : logger.addHandler ( debug_handler ) def _proxy_stream ( ) : return ctx.request.environ [ 'wsgi.errors ' ] 'level ' : 'INFO ' , Instead , I would recommend figuring out which loggers you are interested use this for the stream . If you are using file or dict configuration and 'formatter ' : 'default ' | | ( `` 'DEBUG ' `` , `` 'INFO ' `` , `` 'WARNING ' `` , | logging.getLogger ( 'other_package ' ) , that check out the documentation for the .. _logformat : app.logger.handlers [ : ] = old_handlers del logger.handlers [ : ] return sys.stderr : class : ` ~logging.handlers.SMTPHandler ` . def reset_logging ( monkeypatch ) : 'root ' : { ' [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s ' assert os.path.basename ( __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' ) in err app.logger.addHandler ( StreamHandler ( out ) ) class RequestFormatter ( logging.Formatter ) : assert not has_level_handler ( logger ) user = get_user ( request.form [ 'username ' ] ) do that in the log formatter format string . server ) you might not see any log messages . The reason for that is that When to activate the application 's logger handler . `` 'always ' `` always A formatter can be instantiated with a format string . Note that `` `` `` `` `` `` `` `` `` `` `` `` `` `` app.logger.warning ( 'the standard library is dead ' ) class TestLogging ( object ) : Function : % ( funcName ) s : class : ` ~logging.StreamHandler ` to : meth : ` app.logger < flask.Flask.logger > ` DEBUG , ERROR if app.debug and logger.level == logging.NOTSET : If the application runs in production mode ( which it will do on your 'formatters ' : { 'default ' : { configured . file_handler.setLevel ( logging.WARNING ) `` `` '' @ app.route ( '/ ' ) def index ( ) : .. py : data : : LOGGER_NAME handler . : : ) ) messages from those logs too . The simplest way to do this is to add handlers current = current.parent : meth : ` app.logger < flask.Flask.logger > ` , and need to remove the default if trigger == 'before ' : assert 'WARNING in test_helpers [ ' in err tracebacks are appended to the log entry automatically . You do n't have to `` `` `` `` `` `` `` `` `` `` ` issue when a user reported it for you . What you probably want instead is emailing them to admins . if ctx is not None : assert app.logger.level == logging.NOTSET from logging.handlers import SMTPHandler app.logger.addHandler ( StreamHandler ( out ) ) } } , When : attr : ` ~flask.Flask.debug ` is enabled , set the logger level to % ( message ) s Default : `` None `` from .logging import create_logger assert app.logger.name == 'flask.app ' Basic Configuration app.logger.addHandler ( mail_handler ) given logger 's : meth : ` effective level < ~logging.Logger.getEffectiveLevel > ` . logger.setLevel ( logging.DEBUG ) def test_processor_exceptions ( self , app , client ) : '- ' * 80 prod_handler = ProductionHandler ( _proxy_stream ) Werkzeug def emit ( self , record ) : record.url = request.url assert 'Exception : test ' in err class DebugLogger ( Logger ) : `` flask.app `` . The level is only set during configuration , it @ LocalProxy from werkzeug.datastructures import ImmutableDict , Headers from logging.config import dictConfig debug_handler.setFormatter ( Formatter ( DEBUG_LOG_FORMAT ) ) `` 'flask.app ' `` , and can be used to log messages for your application . : : called for ` asctime ` formatting . If you want a different time format | `` % ( filename ) s `` | Filename portion of pathname . | you can override this method . See : ref : ` logging ` for more information . return True debug a problem . By default as of Flask 0.11 , errors are logged to your Module : % ( module ) s app.logger.error ( 'An error occurred ' ) assert app.logger is not logger1 logging.root.addHandler ( handler ) logger.__class__ = DebugLogger syslog . If there is no handler for the logger 's effective level , add a rv = client.get ( '/ ' ) care about separately , instead of configuring only the root logger . : : from werkzeug.http import http_date , parse_cache_control_header , \ old_load_setting = app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] monkeypatch.setitem ( app.config , 'EXPLAIN_TEMPLATE_LOADING ' , True ) out , err = capsys.readouterr ( ) .. versionchanged : : 1.0 def test_template_loader_debugging ( test_apps ) : 'format ' : ' [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s ' , parse_options_header app.logger.info ( ' % s logged in successfully ' , user.username ) logger.handlers = [ ] yield Seeing more information about the request , such as the IP address , may help root_handlers = logging.root.handlers [ : ] from werkzeug.http import parse_cache_control_header , parse_options_header logging : class : ` ~logging.StreamHandler ` for @ app.before_request separate applications running side by side in the same Python interpreter wo n't be looking at the log messages very often . The WSGI server will probably # : import datetime Werkzeug logs basic request/response information to the `` 'werkzeug ' `` logger . * server-error @ example.com * with the subject `` YourApplication Failed '' . If | `` % ( funcName ) s `` | Name of function containing the logging call . | from flask._compat import StringIO getLogger ( 'otherlibrary ' ) ] 1 // 0 formatter = RequestFormatter ( @ property : license : BSD , see LICENSE for more details . `` flask.app `` . The level is only set on first access , it does n't check prod_handler.setFormatter ( Formatter ( PROD_LOG_FORMAT ) ) webserver 's log automatically . Warnings however are not . Please note return Logger.getEffectiveLevel ( self ) send you that message as mail . A log record stores more information , ' % ( asctime ) s % ( levelname ) s : % ( message ) s ' for logger in loggers : logger.propagate = True if trigger == 'after ' : `` `` '' Creates a logger for the given application . This logger works `` `` `` `` `` `` `` `` `` `` `` def test_logger_debug ( app ) : import datetime | `` % ( lineno ) d `` | Source line number where the logging call was | break if self._logger and self._logger.name == self.logger_name : ======= while current : configure the Flask logger to send you mails for exceptions : : logger with the log name before . mail_handler.setFormatter ( Formatter ( `` ' Here is a list of useful formatting variables for the format string . Note # : The name of the logger to use . By default the logger name is the mail_handler.setLevel ( logging.ERROR ) For more information , head over to the official documentation . assert rv.data == b'Hello Server Error ' I can pretty much promise you however that if you only use a logfile for Time : % ( asctime ) s : meth : ` ~logging.Formatter.format ` : `` app.debug `` each time . Only one format is used , not different ones : copyright : ( c ) 2015 by Armin Ronacher . the application errors you will never look at it except for debugging an : ref : ` logging ` for information about configuration . to : data : ` ~logging.DEBUG ` . ' % ( levelname ) s in % ( module ) s [ % ( pathname ) s : % ( lineno ) d ] : \n ' handler = logging.StreamHandler ( ) debug_handler.setLevel ( DEBUG ) assert has_level_handler ( logger ) from logging import getLogger , StreamHandler , Formatter , getLoggerClass , \ handler , you can import and remove it : : only activates it when not in debug mode , and `` 'never ' `` never enables it . ==================+==================================================== `` `` `` `` `` `` If the root logger has no handlers configured , Werkzeug adds a assert 'this is a debug statement ' in err Behavior was simplified . The logger is always named # : Log messages to : func : ` ~flask.logging.wsgi_errors_stream ` with the format '- ' * 80 + '\n ' def has_level_handler ( logger ) : Here some examples : : that this list is not complete , consult the official documentation of the import pytest and it makes a lot of sense to configure your logger to also contain that PROD_LOG_FORMAT = ' [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s ' Depending on the situation , an extension may choose to log to | | By default this is of the form | Injecting Request Information `` app.logger `` has been simplified . `` LOGGER_NAME `` and assert not app.logger.handlers : class : ` ~logging.handlers.NTEventLogHandler ` - will log to the system logger.addHandler ( file_handler ) return super ( ) .format ( record ) assert logger1.name == __name__ raise Exception ( 'test ' ) finally : assert wsgi_errors_stream._get_current_object ( ) is sys.stderr assert 'the standard library is dead ' in err is accessed before logging is configured , it will add a default handler . If ) ) Logging : class : ` ~logging.handlers.RotatingFileHandler ` - logs messages to a file find . Often it 's in your webserver 's log files . If you do not configure logging yourself , Flask will add a ) return request.environ [ 'wsgi.errors ' ] if request else sys.stderr old_handlers = app.logger.handlers [ : ] ( depending on what 's available ) . Where this ends up is sometimes hard to assert 'missing_template.html ' in str ( excinfo.value ) if trigger == 'after ' : client.get ( '/exc ' ) # - * - coding : utf-8 - * def before_request ( ) : ) : : class : ` ~logging.Logger ` . | | issued ( if available ) . | WSGI request is in flight we log to wsgi.errors , otherwise this resolves app.logger.debug ( ' A value for debugging ' ) `` LOGGER_NAME `` and `` LOGGER_HANDLER_POLICY `` were removed . See from flask.helpers import get_debug_flag def test_log_view_exception ( app , client ) : `` `` '' A : class : ` logging.Logger ` object for this application . The if policy == mode or policy == 'always ' : See : ref : ` logging ` for information on how to log exceptions , such as by ADMINS = [ 'yourname @ example.com ' ] ' [ % ( asctime ) s ] % ( levelname ) s in % ( module ) s : % ( message ) s ' Flask uses standard Python : mod : ` logging ` . All Flask-related messages are return 'Foo ' good idea to keep as much information around that might be required to ca n't import this directly , you can refer to it as Error Mails @ app.route ( '/exc ' ) So what just happened ? We created a new assert rv.status_code == 500 Here are some example setups : 1 // 0 Message type : % ( levelname ) s Location : % ( pathname ) s : % ( lineno ) d err = stream.getvalue ( ) can do something about it . mail_handler.setLevel ( logging.ERROR ) Python docs for more information about configuring the handler . def index ( ) : logger = logging.getLogger ( 'flask.app ' ) def test_error_handler_after_processor_error ( app , client ) : } import logging","['CHANGES', 'docs/config.rst', 'docs/contents.rst.inc', 'docs/errorhandling.rst', 'docs/logging.rst', 'flask/app.py', 'flask/logging.py', 'tests/test_basic.py', 'tests/test_helpers.py', 'tests/test_logging.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py']",Merge pull request # 2436 from davidism/logging
248,85fa8aabf5a7bd0adf204f0c2dacbba1fa6683de,2017-07-29 13:09:17-07:00,".. _ # 2436 : https : //github.com/pallets/flask/pull/2436 def test_path_is_url ( app ) : assert eb.script_root == `` path=app_root.lstrip ( '/ ' ) assert eb.url_scheme == 'https ' base_url = ' { 0 } : // { 1 } / { 2 } '.format ( netloc=url.netloc or http_host , base_url = ' { scheme } : // { netloc } / { path } '.format ( eb = make_test_environ_builder ( app , 'https : //example.com/ ' ) When passing a full URL to the test client , use the scheme in the URL instead of the `` PREFERRED_URL_SCHEME `` . ( ` # 2436 ` _ ) scheme=url.scheme or url_scheme , assert eb.host == 'example.com ' assert eb.path == '/ ' url_scheme , url.netloc or http_host , app_root.lstrip ( '/ ' )","['CHANGES', 'flask/testing.py', 'tests/test_testing.py']",Merge pull request # 2430 from erebus1/env_url_scheme_fix
249,851eaa4db7cef513dae35286d816867d68a72049,2017-07-16 13:55:18-07:00,"add_version_option=True , * * extra ) : port defined in the `` SERVER_NAME `` config variable if present . : param create_app : an optional callback that is passed the script info monkeypatch.chdir ( os.path.join ( test_path , 'cliapp ' , 'inner1 ' ) ) os.path.dirname ( __file__ ) , 'test_apps ' : param debug : if given , enable or disable debug mode . See return super ( FlaskGroup , self ) .main ( * args , * * kwargs ) EGGS=0 : attr : ` debug ` . ) ) # avoid ugly errors when the script that is loaded here also attempts .. versionchanged : : 1.0 EGGS=2 ) This is a no-op if ` python-dotenv ` _ is not installed . # Set a global flag that indicates that we were invoked from the # set only in .env Variables set on the command line are used over those set in : file : ` .env ` , present . import dotenv from : file : ` .env ` and : file : ` .flaskenv ` files . if new_dir and os.getcwd ( ) ! = new_dir : list are preferred over later files . assert os.environ [ 'SPAM ' ] == ' 1 ' The files are only loaded by the : command : ` flask ` command or calling ( os.environ , 'FLASK_APP ' , notset ) , if dotenv is None : : param path : Load the file at this location instead of searching . ( os.environ , 'FLASK_DEBUG ' , notset ) , master def run ( self , host=None , port=None , debug=None , * * options ) : load_dotenv ( os.path.join ( test_path , '.flaskenv ' ) ) `` other `` . '' '' '' cwd = os.getcwd ( ) if not path : assert os.environ [ 'FOO ' ] == 'env ' os.environ.pop ( 'FLASK_APP ' , None ) Directories are scanned upwards from the directory you call : command : ` flask ` add_version_option=True , load_dotenv=True , * * extra .. versionadded : : 1.0 self , host=None , port=None , debug=None , load_dotenv=True , * * options information . from ._compat import iteritems , reraise : param create_app : an optional callback that is passed the script info and branches : def __init__ ( .. _python-dotenv : https : //github.com/theskumar/python-dotenv # readme cwd = os.getcwd ( ) ( ` # 2416 ` _ ) SPAM=1 if os.environ.get ( 'FLASK_RUN_FROM_CLI ' ) == 'true ' : test_path = os.path.abspath ( os.path.join ( from flask.cli import AppGroup , FlaskGroup , NoAppException , ScriptInfo , dotenv , \ 'dotenv ' : [ 'python-dotenv ' ] , # set only in .flaskenv .. _dotenv : # by Flask.run to make the call into a no-op . This is necessary to os.environ [ 'FLASK_RUN_FROM_CLI_SERVER ' ] = ' 1 ' If ` python-dotenv ` _ is installed , running the : command : ` flask ` command will set return AppGroup.main ( self , * args , * * kwargs ) return os.path.join ( path , other [ len ( path ) : ] .lstrip ( os.sep ) ) == other # ca n't use monkeypatch.delitem since we do n't want to restore a value .env `` '127.0.0.1 ' `` or the host in the `` SERVER_NAME `` config : param load_dotenv : Load the nearest : file : ` .env ` and : file : ` .flaskenv ` from __future__ import print_function : param host : the hostname to listen on . Set this to `` ' 0.0.0.0 ' `` to : param host : the hostname to listen on . Set this to `` ' 0.0.0.0 ' `` to try : server . See : func : ` werkzeug.serving.run_simple ` for more assert os.getcwd ( ) == test_path # .flaskenv does n't overwrite .env ) ) be committed to your repository so that it can set private variables . only : from flask.cli import load_dotenv # Set a global flag that indicates that we were invoked from the monkeypatch.setenv ( 'EGGS ' , ' 3 ' ) returns the loaded app . # set manually , files do n't overwrite from flask.cli import AppGroup , FlaskGroup , NoAppException , ScriptInfo , \ find_best_app , get_version , load_dotenv , locate_app , prepare_import , \ Werkzeug server . See from to locate the files . The current working directory will be set to the have the server available externally as well . Defaults to monkeypatch._setitem.append ( ( os.environ , item , notset ) ) easily . For instance if you want a shell command to initialize the database you assert os.getcwd ( ) == cwd to `` path `` . If it is the original value , `` path `` is an ancestor of and will be where the Python path should import local packages from . directory . dotenv is None , reason='dotenv is not installed ' Loading Environment Variables From `` .env `` Files directory to the directory containing the first file found . : param options : the options to be forwarded to the underlying Werkzeug assert 'FOO ' in os.environ new_dir = None assert os.environ [ 'BAR ' ] == 'bar ' location of the file , with the assumption that that is the top level project assert 'FOO ' not in os.environ .flaskenv if path is not None : # to start a server . assert os.environ [ 'EGGS ' ] == ' 3 ' similar to how some deployment services work . : meth : ` ~flask.Flask.run ` . If you would like to load these files when running in test_path = os.path.abspath ( os.path.join ( def test_dotenv_optional ( monkeypatch ) : command to initialize the database you can do this : : os.chdir ( new_dir ) need_dotenv = pytest.mark.skipif ( creating custom commands very easy . For instance if you want a shell BAR=bar if present . : param port : the port of the webserver . Defaults to `` 5000 `` or the os.environ [ 'FLASK_RUN_FROM_CLI ' ] = 'true ' If installed , python-dotenv will be used to load environment The `` flask `` command and `` app.run `` will load environment variables using files to set environment variables . Will also change the working .. versionchanged : : 1.0 found , with the assumption that it is in the top level project directory new_dir = os.path.dirname ( path ) files to set environment variables . Will also change the working used for public variables , such as `` FLASK_APP `` , while : file : ` .env ` should not production , you should call : func : ` ~flask.cli.load_dotenv ` manually . def test_dotenv_path ( monkeypatch ) : : param load_dotenv : Load the nearest : file : ` .env ` and : file : ` .flaskenv ` def test_load_dotenv ( monkeypatch ) : self.load_dotenv = load_dotenv dotenv = None ) ) * ` python-dotenv ` _ enables support for : ref : ` dotenv ` when running `` flask `` for name in ( '.env ' , '.flaskenv ' ) : for item in ( 'FOO ' , 'BAR ' , 'EGGS ' ) : def load_dotenv ( path=None ) : commands . return `` `` '' with_appcontext and returns the loaded app . environment variables defined in the files : file : ` .env ` and : file : ` .flaskenv ` . If installed , python-dotenv will be used to load environment variables open a new terminal , and to set configuration using environment variables return dotenv.load_dotenv ( path ) have the server available externally as well . Defaults to shell commands wil be added . Changes the current working directory to the location of the first file if load_dotenv : dotenv.load_dotenv ( path ) ) : cwd = os.getcwd ( ) self , add_default_commands=True , create_app=None , port defined in the `` SERVER_NAME `` config variable if # use monkeypatch internals to force-delete environ keys tox -e docs-html , coverage-report from _pytest.monkeypatch import notset tox -e coverage-report directory to the directory containing the first file found . FOO=flaskenv See : attr : ` debug ` . load_dotenv ( ) # script that is loaded here also attempts to start a server . return new_dir is not None # at least one file was located and loaded os.path.dirname ( __file__ ) , 'test_apps ' : param options : the options to be forwarded to the underlying variables from : file : ` .env ` and : file : ` .flaskenv ` files . if new_dir is None : # ca n't use monkeypatch.delitem since the keys do n't exist yet except ImportError : def _path_is_ancestor ( path , other ) : FOO=env continue : func : ` werkzeug.serving.run_simple ` for more If an env var is already set it is not overwritten , so earlier files in the ( os.environ , 'FLASK_RUN_FROM_CLI ' , notset ) , can do this : : from ._compat import getargspec path = dotenv.find_dotenv ( name , usecwd=True ) # command line interface provided server command . This is detected if os.environ.get ( 'FLASK_RUN_FROM_CLI_SERVER ' ) == ' 1 ' : `` `` '' Load `` dotenv '' files in order of precedence to set environment variables . : param debug : if given , enable or disable debug mode . monkeypatch.chdir ( test_path ) .. _ # 2416 : https : //github.com/pallets/flask/pull/2416 if self.load_dotenv : python-dotenv from ._compat import getargspec , iteritems , reraise def __init__ ( self , add_default_commands=True , create_app=None , .. autofunction : : load_dotenv 'python-dotenv ' , which are used over those set in : file : ` .flaskenv ` . : file : ` .flaskenv ` should be `` '127.0.0.1 ' `` or the host in the `` SERVER_NAME `` config variable def run ( monkeypatch.setattr ( 'flask.cli.dotenv ' , None ) .. _python-dotenv : https : //github.com/theskumar/python-dotenv # readme for item in ( 'FOO ' , 'BAR ' , 'SPAM ' ) : os.environ.pop ( 'FLASK_DEBUG ' , None ) /^ . * -maintenance $ / information . # call into a no-op . This is necessary to avoid ugly errors when the from `` .env `` and `` .flaskenv `` files if python-dotenv is installed . This can be used to avoid having to set `` FLASK_APP `` manually every time you `` `` '' Take `` other `` and remove the length of `` path `` from it . Then join it : return : `` True `` if a file was loaded . def manage_os_environ ( monkeypatch ) : find_best_app , get_version , locate_app , prepare_import , with_appcontext : param port : the port of the webserver . Defaults to `` 5000 `` or the monkeypatch._setitem.extend ( ( load_dotenv ( ) # command line interface . This is detected by Flask.run to make the easily . Flask uses ` click ` _ for the command interface which makes shell commands wil be added . variable if present .","['.gitignore', '.travis.yml', 'CHANGES', 'docs/api.rst', 'docs/cli.rst', 'docs/installation.rst', 'flask/app.py', 'flask/cli.py', 'setup.py', 'tests/test_apps/.env', 'tests/test_apps/.flaskenv', 'tests/test_cli.py', 'tox.ini']",Merge pull request # 2416 from davidism/dotenv
250,77b98a2762b358b1e90c350a33971a91f8a9375d,2017-07-14 19:59:51-07:00,"else : ) , So long , and thanks for all the fish . if create_app is None : assert prepare_exec_for_file ( '/tmp/share/test.py ' ) == 'test ' module=module , stack_trace=stack_trace ) sys.path.insert ( 0 , path ) assert locate_app ( NoAppException , locate_app , script_info , `` cliapp/app '' ) os.path.join ( test_path , 'cliapp ' , 'inner1 ' , 'inner2 ' ) , ( 'cliapp.app ' , None , 'testapp ' ) , locate_app ( 'app.py module was not found in the current directory.\n\n ' prepare_exec_for_file ( '/tmp/share/test.txt ' ) ' { stack_trace } '.format ( ) is None if sys.path [ 0 ] ! = path : if app_name is None : module=module ) ) 'http : //flask.pocoo.org/docs/latest/quickstart/ ' ( 'notanapp.py ' , None ) , ( # dotted name raise NoAppException ( assert prepare_import ( value ) == result script_info , `` notanpp.py '' , raise_if_not_found=False 'be used as application . Please change the ' return ' . '.join ( module_name [ : :-1 ] ) the parent directory of given file is added to ` sys.path ` . original_path = sys.path [ : ] ( 'cliapp.factory ' , None , 'app ' ) , ( 'cliapp.factory ' , 'create_app ( ) ' , 'app ' ) , script_info , `` cliapp.factory : create_app3 ( 'baz ' , 'qux ' ) '' `` `` '' Test of find_default_import_path . '' '' '' def create_app3 ( foo , script_info ) : return find_app_by_string ( app_name , script_info , module ) test_path , 'cliapp.message.txt ' ( 'cliapp/app ' , None ) , 'extension to .py ' % filename ) '\n\n { tb } '.format ( name=module_name , tb=traceback.format_exc ( ) ) realpath = os.path.realpath ( '/tmp/share/test.py ' ) ' PYTHONPATH , ensure the extension is .py . '.format ( rv = locate_app ( ( 'test.a.b ' , cwd , 'test.a.b ' ) , # not a Python file , will be caught during import import_path = prepare_exec_for_file ( module ) find_default_import_path , get_version ) module = app_id module_name = [ ] # takes script_info locate_app ( info , iname , aname ) from flask.cli import AppGroup , FlaskGroup , NoAppException , ScriptInfo , \ while 1 : self._loaded_app = app if rv : expect_rv = prepare_exec_for_file ( str ( tmpfile ) ) filename = os.path.dirname ( filename ) return find_app_by_string ( app_obj , script_info , mod ) else : script_info , `` cliapp.factory : create_app '' ) .name == `` create_app '' 'For more information see ' def test_locate_app_raises ( test_apps , iname , aname ) : return app stack_trace = traceback.format_exc ( ) application = Flask ( __name__ ) if os.path.splitext ( path ) [ 1 ] == '.py ' : app = locate_app ( self , import_name , name ) request.addfinalizer ( reset_path ) # Chop off file extensions or package markers app = locate_app ( ( 'cliapp.factory ' , 'create_app3 ( `` foo '' ) ' , 'app3_foo_spam ' ) , dirpath , extra = os.path.split ( dirpath ) return rv find_best_app , get_version , locate_app , prepare_import , with_appcontext assert locate_app ( script_info , `` cliapp.factory '' ) .name == `` create_app '' although ` pip install -e ` should still be preferred . ( ` # 2414 ` _ ) script_info , `` cliapp.factory : create_app2 ( 'foo ' ) '' ) from flask.cli import cli , AppGroup , FlaskGroup , NoAppException , ScriptInfo , \ def create_app3 ( foo , bar , script_info ) : sys.path.insert ( 0 , dirpath ) def test_locate_app ( test_apps ) : while True : : func : ` prepare_exec_for_file ` has a side effect , where __import__ ( module_name ) assert app is None def test_prepare_import ( request , value , path , result ) : raise NoAppException ( 'Failed to find application in module ' script_info = ScriptInfo ( ) info = ScriptInfo ( ) module = sys.modules [ module_name ] monkeypatch.setitem ( os.environ , 'FLASK_APP ' , str ( tmpfile ) ) .. _ # 2414 : https : //github.com/pallets/flask/pull/2414 def find_default_import_path ( ) : return find_best_app ( script_info , module ) for module in [ 'wsgi.py ' , 'app.py ' ] : return Flask ( ' _'.join ( [ 'app3 ' , foo , script_info.data [ 'test ' ] ] ) ) ( 'cliapp.app ' , 'testapp ' , 'testapp ' ) , ( 'cliapp.factory ' , 'create_app2 ( `` foo '' ) ' ) , return prepare_exec_for_file ( app ) with pytest.raises ( NoAppException ) : 'Could not import `` { name } '' . `` '.format ( name=module_name ) from __future__ import absolute_import assert locate_app ( script_info , `` cliapp.app : testapp '' ) .name == `` testapp '' app = os.environ.get ( 'FLASK_APP ' ) # nested import error assert dirname in sys.path module , app_obj = app_id.split ( ' : ' , 1 ) ( 'test/__init__.py ' , cwd , 'test ' ) , if not os.path.exists ( os.path.join ( path , '__init__.py ' ) ) : if not app : sys.path [ : ] = original_path ( 'test ' , cwd , 'test ' ) , app = None app = Flask ( __name__ ) script_info , `` cliapp.factory : create_app2 ( 'foo ' , 'bar ' , ) '' dirpath = filename dirname = os.path.dirname ( realpath ) realpath = os.path.realpath ( '/tmp/share/__init__.py ' ) RuntimeError , locate_app , script_info , `` cliapp.app : notanapp '' ) script_info , `` cliapp.factory '' ) .name == `` create_app '' return Flask ( ' _'.join ( [ 'app2 ' , foo , bar ] ) ) assert find_default_import_path ( ) == None return Flask ( 'create_app ' ) ( 'cliapp.factory ' , 'create_app2 ( `` foo '' , `` bar '' , ) ' , 'app2_foo_bar ' ) , path = os.path.splitext ( path ) [ 0 ] # space before arg list with pytest.raises ( NoAppException ) : assert find_default_import_path ( ) == 'notanapp ' module = [ ] 'There was an error trying to import the app ( { module } ) : \n ' def prepare_import ( path ) : `` `` '' Test of locate_app . '' '' '' monkeypatch.setitem ( os.environ , 'FLASK_APP ' , 'notanapp ' ) : func : ` prepare_exec_for_file ` has a side effect where the parent directory info.data [ 'test ' ] = 'spam ' self , import_path , raise_if_not_found=False os.path.join ( test_path , 'cliapp ' , 'inner1 ' , '__init__ ' ) , for path in ( 'wsgi.py ' , 'app.py ' ) : if app_import_path is None : path = os.path.dirname ( path ) # not a Python file 'Could not locate Flask application . You did not provide ' test_path = os.path.abspath ( os.path.join ( path , name = ( self.app_import_path.split ( ' : ' , 1 ) + [ None ] ) [ :2 ] `` `` '' Expect the correct path to be set and the correct import and app names NoAppException , locate_app , ) .name == `` create_app3_baz_qux '' of the given import is added to : data : ` sys.path ` . This is reset after the if os.path.split ( filename ) [ 1 ] == '__init__.py ' : def locate_app ( script_info , module_name , app_name , raise_if_not_found=True ) : find_best_app , locate_app , with_appcontext , prepare_exec_for_file , \ ( ' a/test ' , os.path.join ( cwd , ' a ' ) , 'test ' ) , ( 'cliapp.factory ' , 'create_app ( ) ' ) , return ' . '.join ( module [ : :-1 ] ) assert find_default_import_path ( ) == expect_rv `` `` '' Expect the correct path to be set and the correct module name to be returned . test_path , 'cliapp.inner1 ' app_import_path = None raise RuntimeError ( 'Failed to find application in module ' test_path , 'cliapp.inner1.inner2 ' self.app_import_path = app_import_path app._reconfigure_for_run_debug ( debug ) return Flask ( 'app ' ) os.path.join ( test_path , 'cliapp ' , 'message.txt ' ) , NoAppException , locate_app , script_info , `` notanpp.py '' ) self._loaded_app = rv tmpfile.write ( `` ) __import__ ( module ) raise NoAppException ( ) ) ( 'cliapp.factory ' , 'create_app ' , 'app ' ) , `` FLASK_APP `` can point to local packages that are not installed in dev mode , # nested package to be returned . import_name = prepare_import ( path ) 'the `` FLASK_APP '' environment variable , and a `` wsgi.py '' or ' def test_locate_app ( test_apps , iname , aname , result ) : assert locate_app ( script_info , `` cliapp.app '' ) .name == `` testapp '' assert sys.path [ 0 ] == path 'While importing `` { name } '' , an ImportError was raised : ' self , import_name , None , raise_if_not_found=False return app def prepare_exec_for_file ( filename ) : rv = locate_app ( self , self.app_import_path ) path = os.path.realpath ( path ) script_info , `` cliapp.factory : create_app ( ) '' ) if sys.path [ 0 ] ! = dirpath : if not os.path.isfile ( os.path.join ( dirpath , '__init__.py ' ) ) : if not rv : tmpfile = tmpdir.join ( 'testapp.py ' ) def locate_app ( script_info , app_id , raise_if_not_found=True ) : cwd = os.getcwd ( ) if app is None : if os.path.basename ( path ) == '__init__ ' : filename = filename [ : -3 ] ( 'cliapp.importerrorapp ' , None ) , raise NoAppException ( 'The file provided ( % s ) does exist but is not a ' app = locate_app ( info , 'notanapp.py ' , None , raise_if_not_found=False ) import_name = prepare_import ( path ) mod = sys.modules [ module ] os.path.dirname ( __file__ ) , 'test_apps ' ( os.path.join ( test_path , 'cliapp.app ' ) , test_path , 'cliapp.app ' ) , if ' : ' in app_id : self.app_import_path = app_import_path 'Could not locate a Flask application . You did not provide ' test runs . ' '' app.py '' module was not found in the current directory . ' if app : def reset_path ( ) : script_info , `` cliapp.factory : create_app2 ( 'foo ' , 'bar ' ) '' module_name.append ( name ) if app_obj is None : 'the FLASK_APP environment variable , and a wsgi.py or ' ( 'test.py ' , cwd , 'test ' ) , dirname = os.path.dirname ( os.path.dirname ( realpath ) ) from flask import Flask pytest.raises ( rv._reconfigure_for_run_debug ( debug ) ) .name == `` create_app2_foo_bar '' ( 'cliapp.app ' , 'notanapp ' ) , # no script_info # move up until outside package structure ( no __init__.py ) self.app_import_path = app_import_path or os.environ.get ( 'FLASK_APP ' ) from __future__ import absolute_import , print_function assert prepare_exec_for_file ( '/tmp/share/__init__.py ' ) == 'share ' def test_find_default_import_path ( test_apps , monkeypatch , tmpdir ) : # trailing comma space def test_locate_app_suppress_raise ( ) : app_import_path = find_default_import_path ( ) assert locate_app ( info , iname , aname ) .name == result def test_prepare_exec_for_file ( test_apps ) : elif filename.endswith ( '.py ' ) : rv = call_factory ( self.create_app , self ) ( 'cliapp.message.txt ' , None ) , ' Please verify the path is correct . If app is not on ' ( 'cliapp.factory ' , 'create_app2 ( `` foo '' , `` bar '' ) ' , 'app2_foo_bar ' ) , # not enough arguments info , 'cliapp.importerrorapp ' , None , raise_if_not_found=False path , name = os.path.split ( path ) script_info , `` cliapp.factory : create_app ( ) '' ) .name == `` create_app '' filename = os.path.realpath ( filename ) return Flask ( `` _ '' .join ( [ 'create_app3 ' , foo , bar ] ) ) module.append ( extra ) return Flask ( `` _ '' .join ( [ 'create_app2 ' , foo , bar ] ) ) monkeypatch.delitem ( os.environ , 'FLASK_APP ' , raising=False ) return return find_best_app ( script_info , mod ) app = call_factory ( self.create_app , self ) NoAppException , locate_app , script_info , `` cliapp.importerrorapp '' ) 'valid Python file . This means that it can not ' 'The file/path provided ( { module } ) does not appear to exist . ' app_obj = None ( 'test/__init__ ' , cwd , 'test ' ) , if os.path.isfile ( app ) : assert locate_app ( script_info , `` cliapp.multiapp : app1 '' ) .name == `` app1 '' # only direct import error is suppressed","['CHANGES', 'flask/cli.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_apps/cliapp/inner1/__init__.py', 'tests/test_apps/cliapp/inner1/inner2/__init__.py', 'tests/test_apps/cliapp/inner1/inner2/flask.py', 'tests/test_apps/cliapp/message.txt', 'tests/test_cli.py']",Merge pull request # 2414 from davidism/cli-load-local-package
251,59f7966e3192bcf478a213ba0aa9cd3bda7da4e4,2017-07-13 08:42:53-07:00,"builder = make_test_environ_builder ( ) environ.update ( args [ 0 ] .get_environ ( ) ) buffered=buffered , if isinstance ( args [ 0 ] , EnvironBuilder ) : environ = self.environ_base.copy ( ) kwargs.setdefault ( 'environ_overrides ' , { } ) \ return Client.open ( self , builder , finally : return Client.open ( environ = builder.get_environ ( ) environ [ 'flask._preserve_context ' ] = self.preserve_context environ.update ( args [ 0 ] ) ) rv = client.open ( builder ) else : buffered=buffered , environ = builder.get_environ ( ) assert rv.data == b'127.0.0.2 ' builder = make_test_environ_builder ( self.application , * args , * * kwargs ) `` test_client.open `` . ( ` # 2412 ` _ ) kwargs.setdefault ( 'environ_base ' , self.environ_base ) request.addfinalizer ( builder.close ) follow_redirects=follow_redirects [ 'flask._preserve_context ' ] = self.preserve_context not kwargs and len ( args ) == 1 try : as_tuple=as_tuple , [ 'flask._preserve_context ' ] = self.preserve_context self , environ , rv = client.open ( environ ) return flask.request.remote_addr if ( ) : kwargs.setdefault ( 'environ_overrides ' , { } ) \ self.application , * args , * * kwargs client.environ_base [ 'REMOTE_ADDR ' ] = '127.0.0.2 ' assert rv.data == b'127.0.0.1 ' def test_client_open_environ ( app , client , request ) : kwargs.setdefault ( 'environ_base ' , self.environ_base ) .. _ # 2412 : https : //github.com/pallets/flask/pull/2412 else : from flask.testing import make_test_environ_builder def index ( ) : as_tuple=as_tuple , follow_redirects=follow_redirects ) and isinstance ( args [ 0 ] , ( EnvironBuilder , dict ) ) Support passing an existing `` EnvironBuilder `` or `` dict `` to builder = make_test_environ_builder ( app , path='/index ' , method='GET ' ) builder.close ( )","['CHANGES', 'flask/testing.py', 'tests/test_testing.py']",support passing environ to test client ( # 2412 )
252,817903c9c1f4c5c6e063edc971ccc75c5c94af49,2017-07-10 07:20:01-07:00,"cleanup_stuff.append ( exception ) receive it . def cleanup ( exception ) : raise Exception ( 'dummy ' ) def test_app_tearing_down_with_handled_exception ( app ) : with app.app_context ( ) : with pytest.raises ( Exception ) : assert len ( cleanup_stuff ) == 1 cleanup_stuff = [ ] When a teardown function was called because of an unhandled exception be passed an error object . it will be passed an error object . If an : meth : ` errorhandler ` is app.config [ 'PROPAGATE_EXCEPTIONS ' ] = True def test_app_tearing_down_with_unhandled_exception ( app , client ) : with app.app_context ( ) : def test_app_tearing_down_with_handled_exception_by_except_block ( app ) : client.get ( '/ ' ) registered , it will handle the exception and the teardown will not When a teardown function was called because of an exception it will client.get ( '/ ' ) assert cleanup_stuff == [ None ] assert str ( cleanup_stuff [ 0 ] ) == 'dummy ' def test_app_tearing_down_with_handled_exception_by_app_handler ( app , client ) : def index ( ) : return flask.jsonify ( str ( f ) ) assert isinstance ( cleanup_stuff [ 0 ] , Exception ) def handler ( f ) :","['flask/app.py', 'tests/test_appctx.py']",Merge pull request # 2409 from bijanvakili/clarify-app-teardown
253,d13e41ddefb89d42fda61caf5921dc60b66403e1,2017-06-28 08:00:08-07:00,"does this is by using a signed cookie . The user can look at the session # : : data : ` SECRET_KEY ` configuration key . Defaults to `` None `` . random generator which can be used to get such a key : : assert app.secret_key == 'config ' # : sign cookies and other things . Set this to a complex random value # : `` SECRET_KEY `` configuration key . Defaults to `` None `` . # Set the secret key to some random bytes . Keep this really secret ! return super ( Flask , self ) .make_response ( rv ) def test_flash_signal ( app ) : More information on using the debugger can be found in the ` Werkzeug app.secret_key = 'development-key ' not modify it unless they know the secret key , so make sure to set that rv = `` '\xfd { H\xe5 < \x95\xf9\xe3\x96.5\xd1\x01O < ! \xd5\xa2\xa0\x9fR '' \xa1\xa8 ' SECRET_KEY=b'_5 # y2L '' F4Q8z\n\xec ] / ' , a secret key should be as random as possible . Your operating system contents , but ca n't modify it unless they know the secret key , so make sure to SECRET_KEY='development key ' , app.secret_key = 'testkey ' If you have set : attr : ` Flask.secret_key ` ( or configured it from A secret key should be as random as possible . Your operating system has SECRET_KEY='testing ' , Just take that thing and copy/paste it into your code and you 're done . SECRET_KEY='devkey ' , app.secret_key = 'A0Zr98j/3yX R~XHH ! jmN ] LWX/ , ? RT ' using a signed cookie . So the user can look at the session contents , but $ python -c 'import os ; print ( os.urandom ( 16 ) ) ' app = flask.Flask ( __name__ ) SECRET_KEY=b'_5 # y2L '' F4Q8z\n\xec ] / ' def test_flash_signal ( ) : def test_missing_session ( ) : The : data : ` SECRET_KEY ` is needed to keep the client-side sessions secure . SECRET_KEY = 'devkey ' app.secret_key = 'testing ' information from one request to another . The way Flask does this is by SECRET_KEY = 'config ' applications . A session basically makes it possible to remember # : sign cookies and other things . Set this to a complex random value If you have the : attr : ` Flask.secret_key ` set you can use sessions in Flask if rv is None : `` SECRET_KEY '' : `` config '' SECRET_KEY = ' ? \xbf , \xb4\x8d\xa3 '' < \x9c\xb0 @ \x0f5\xab , w\xee\x8d $ 0\x13\x8b83 ' SECRET_KEY = 'config ' > set SECRET_KEY= ' ? \xbf , \xb4\x8d\xa3 '' < \x9c\xb0 @ \x0f5\xab , w\xee\x8d $ 0\x13\x8b83 ' SECRET_KEY= ' ... ' ways to generate pretty random data based on a cryptographic random app.config [ 'SECRET_KEY ' ] = 'secret ' More information on using the debugger can be found in the ` Werkzeug assert app.secret_key == 'devkey ' SECRET_KEY = b'_5 # y2L '' F4Q8z\n\xec ] / ' > set SECRET_KEY='5f352379324c22463451387a0aec5d2f ' secret_key = 'test key ' : attr : ` Flask.secret_key ` ( or : data : ` SECRET_KEY ` ) : : to something complex and unguessable . SECRET_KEY = 'development key ' $ export SECRET_KEY= ' ? \xbf , \xb4\x8d\xa3 '' < \x9c\xb0 @ \x0f5\xab , w\xee\x8d $ 0\x13\x8b83 ' `` SECRET_KEY '' : `` devkey '' it possible to remember information from one request to another . The way Flask set that to something complex and unguessable . generator . Use the following command to quickly generate a value for SECRET_KEY='config ' , app.config.update ( SECRET_KEY = 'devkey ' def make_response ( self , rv ) : ) ) ) SECRET_KEY = b'_5 # y2L '' F4Q8z\n\xec ] / ' def test_missing_session ( app ) : app.secret_key = 'development key ' # set the secret key . keep this really secret : > > > import os app.secret_key = 'dev key ' > > > os.urandom ( 24 ) 'SECRET_KEY ' : 'config ' , ( 'SECRET_KEY ' , 'config ' ) , $ export SECRET_KEY='5f352379324c22463451387a0aec5d2f ' 'SECRET_KEY ' : 'devkey ' , The problem with random is that it 's hard to judge what is truly random . And ( 'SECRET_KEY ' , 'devkey ' ) , app.config.update ( dict ( has ways to generate pretty random stuff based on a cryptographic secret_key = __name__ app.secret_key = None SECRET_KEY='foo ' , : data : ` SECRET_KEY ` ) you can use sessions in Flask applications . A session makes app.secret_key = b'_5 # y2L '' F4Q8z\n\xec ] / ' The `` SECRET_KEY `` is needed to keep the client-side sessions secure . b'_5 # y2L '' F4Q8z\n\xec ] / ' app.secret_key = 'some_secret '","['docs/api.rst', 'docs/config.rst', 'docs/patterns/flashing.rst', 'docs/quickstart.rst', 'docs/tutorial/setup.rst', 'examples/flaskr/flaskr/factory.py', 'examples/minitwit/minitwit/minitwit.py', 'flask/app.py', 'tests/conftest.py', 'tests/static/config.json', 'tests/test_basic.py', 'tests/test_config.py', 'tests/test_signals.py', 'tests/test_templating.py', 'tests/test_testing.py']",Merge pull request # 2399 from davidism/docs-secret-key
254,641fdeaf989c31125289390fe62601b879d1fae1,2017-06-27 07:50:20-07:00,"' PYTHONPATH , ensure the extension is .py . '.format ( ' verify the path is correct . If app is not on PYTHONPATH , ' module=module ) ' Please verify the path is correct . If app is not on ' ' ensure the extension is .py . '.format ( module=module ) 'The file/path provided ( { module } ) does not appear to exist . ' 'The file/path provided ( % s ) does not appear to exist . Please '",['flask/cli.py'],Merge pull request # 2398 from miguelgrinberg/app-not-found-error-fix
255,cce6e7dccc73c0bd86ab0c978a033bf85daa0845,2017-06-26 09:47:36-07:00,"`` 'json ' is deprecated . Use 'get_json ( ) ' instead . '' .. deprecated : : 1.0 assert flask.request.json == { 'spam ' : 42 } `` `` '' from warnings import warn Use : meth : ` get_json ` instead . import flask recwarn.pop ( DeprecationWarning ) tests.deprecations print ( flask.request.json ) client.post ( '/ ' , data= ' { `` spam '' : 42 } ' , content_type='application/json ' ) warn ( DeprecationWarning ( Tests deprecation support . Not used currently . : copyright : ( c ) 2015 by Armin Ronacher . return 'OK ' def index ( ) : .. _ # 1421 : https : //github.com/pallets/flask/issues/1421 : license : BSD , see LICENSE for more details . ~~~~~~~~~~~~~~~~~~ class TestRequestDeprecation ( object ) : The `` request.json `` property is no longer deprecated . ( ` # 1421 ` _ ) def test_request_json ( self , recwarn , app , client ) : # - * - coding : utf-8 - * ) , stacklevel=2 ) @ app.route ( '/ ' , methods= [ 'POST ' ] ) `` `` '' Request.json is deprecated '' '' ''","['CHANGES', 'flask/wrappers.py', 'tests/test_deprecations.py']",Merge pull request # 2397 from davidism/request-json
256,1172728a683e0241400d991df672818ed9b2eb0c,2017-06-26 09:23:06-07:00,"else : import inspect match = _mod_route_re.search ( line ) 'that templates are bundled with modules . Default ' return new_contents , dict ( modules_declared ) return_def.value.id ! = resp_name.id : if ast is None : : license : see LICENSE for more details . new_file.append ( line ) _render_template_re = re.compile ( r'\b ( render_template\ ( ) ( % s ) ' % _string_re_part ) shortname = match.group ( 1 ) response_param_name = looks_like_teardown_function ( node ) return _url_for_re.sub ( handle_match , contents ) This command line script scans a whole application tree and attempts to if response_param_name is None : content_lines = contents.splitlines ( True ) flask-07-upgrade def scan_path ( path=None , teardown=True ) : 'is auto detect . ' ) if not skip_module_test : before = lines [ : lineno ] r'| '' ( [ ^ '' \\ ] * ( ? : \\ . [ ^ '' \\ ] * ) * ) '' ) ' for body_node in node.body : if teardown : new_file = [ ] for filename in filenames : def rewrite_blueprint_imports ( contents ) : for idx , ( line_end , line ) in enumerate ( annotated_lines ) : action='store_true ' , help='Indicate to the system ' _blueprint_related = [ try : if match is not None : match = _from_import_re.search ( line ) import_block.append ( line ) mapping = dict ( module_declarations ) posixpath.normpath ( posixpath.join ( ' b ' , filename ) ) , def handle_match ( match ) : : copyright : ( c ) Copyright 2015 by Armin Ronacher . except ImportError : def fix_teardown_funcs ( contents ) : def upgrade_python_file ( filename , contents , teardown ) : def make_diff ( filename , old , new ) : _app_re_part = r ' ( ( ? : [ a-zA-Z_ ] [ a-zA-Z0-9_ ] * app ) |app|application ) ' this_file = os.path.realpath ( __file__ ) .rstrip ( ' c ' ) if __name__ == '__main__ ' : if not isinstance ( return_def.value , ast.Name ) or \ match = _after_request_re.match ( line ) attempts to accomplish is impossible to do statically it tries to support the most common patterns at least . The diff it generates should be while 1 : after = lines [ lineno + len ( block_lines ) + 1 : ] if filename.endswith ( '.py ' ) : else : if match is None : new_content_lines = fix_single ( match , content_lines , idx ) lineterm= '' ) : endpoint = endpoint [ 1 : ] def main ( ) : for filename , type in walk_path ( path ) : return for line in lineiter : contents = f.read ( TEMPLATE_LOOKAHEAD ) return `` .join ( new_file ) return yield filename , 'python ' if os.path.realpath ( filename ) == this_file : match.group ( 3 ) ] block_lines = inspect.getblock ( lines [ lineno + 1 : ] ) _string_re_part ) posixpath.normpath ( posixpath.join ( ' a ' , filename ) ) , # skip files that are diffs . These might be false positives new_contents = contents skip_module_test = False def get_module_autoname ( filename ) : skip_module_test = True new_contents = pattern.sub ( replacement , new_contents ) _error_handler_re = re.compile ( r ' % s\.error_handlers\ [ \s * ( \d+ ) \s * \ ] ' % _app_re_part ) for path in args : with open ( filename ) as f : yield filename , 'template ' args = line.strip ( ) .split ( ) annotated_lines.append ( ( last_index , line ) ) new_contents , modules = rewrite_for_blueprints ( new_contents , filename ) for _ , line in reversed ( annotated_lines [ : idx ] ) : _url_for_re = re.compile ( r'\b ( url_for\ ( ) ( % s ) ' % _string_re_part ) ( re.compile ( r ' % s\.modules ' % _app_re_part ) , '\\1.blueprints ' ) resp_name = node.args.args [ 0 ] return mapping.get ( shortname ) if modname is None : found_one = False import difflib def fix_url_for ( contents , module_declarations=None ) : break if line.rstrip ( ) .endswith ( ' ) ' ) : lineiter ) ) if child is not return_def.value : if type == 'python ' : return match.group ( 0 ) return os.path.splitext ( filename ) [ 0 ] ( re.compile ( r'register_module ' ) , 'register_blueprint ' ) , parser = OptionParser ( usage= ' % prog [ options ] [ paths ] ' ) prefix = match.group ( 1 ) return before + decorator + body + after upgrade_template_file ( filename , contents ) if endpoint.startswith ( ' . ' ) : if line_end > call_start : if not lines [ lineno + 1 ] .startswith ( 'def ' ) : ] return resp_name.id return ' % s = % s ' % ( target , 'Blueprint ( % r , __name__ ' % modname ) modules_declared = [ ] This will also attempt to find ` after_request ` functions that do n't modify def make_line_annotations ( ) : args = [ ' . ' ] This application is indeed an incredible hack , but because what it node = ast.parse ( 'if 1 : \n ' + func_code ) .body [ 0 ] .body make_line_annotations ( ) `` `` '' Entrypoint '' '' '' if not annotated_lines : elif type == 'template ' : for child in ast.walk ( body_node ) : from __future__ import print_function modname = get_module_autoname ( filename ) endpoint = ' . ' + endpoint import posixpath make_diff ( filename , contents , new_contents ) if match is not None : if len ( returns ) ! = 1 : import os body = [ line.replace ( response_param_name , 'exception ' ) func_code = `` .join ( block_lines ) elif not filename.endswith ( ( '.diff ' , '.patch ' , '.udiff ' ) ) : line [ match.end ( ) : ] , not is_return_line ( line ) ] filename = os.path.join ( dirpath , filename ) def walk_path ( path ) : scan_path ( path , teardown=not options.no_teardown ) new_contents = fix_url_for ( contents , None ) if module_declarations is None : if not args : endpoint = ast.literal_eval ( match.group ( 2 ) ) _from_import_re = re.compile ( r'^\s * from flask import\s+ ' ) elif ' . ' not in endpoint : break for line in block_lines if continue def rewrite_for_blueprints ( contents , filename ) : modname = ast.literal_eval ( name_param ) if ' { % for ' or ' { % if ' or ' { { url_for ' in contents : content_lines = new_content_lines def is_return_line ( line ) : if new_content_lines is not None : if filename ! = '__init__.py ' : elif fromlist [ -1 ] == '\\ ' : parser.error ( 'Python 2.6 or later is required to run the upgrade script . ' ) return `` .join ( content_lines ) new_contents = rewrite_blueprint_imports ( new_contents ) ast = None if func_code [ 0 ] .isspace ( ) : for line in lineiter : # when run multiple times . returns = [ x for x in ast.walk ( node ) if isinstance ( x , ast.Return ) ] directory , filename = os.path.split ( filename ) _mod_route_re = re.compile ( r ' @ ( [ a-zA-Z0-9_ ] [ a-zA-Z0-9_ ] * ) \.route ' ) new_contents = _module_constructor_re.sub ( handle_match , contents ) def fix_single ( match , lines , lineno ) : new_contents ) for dirpath , dirnames , filenames in os.walk ( path ) : if fromlist [ 0 ] == ' ( ' and fromlist [ -1 ] ! = ' ) ' : annotated_lines = [ ] modules_declared.append ( ( target , modname ) ) node = ast.parse ( func_code ) .body [ 0 ] parser.add_option ( '-b ' , ' -- bundled-templates ' , dest='bundled_tmpl ' , if isinstance ( child , ast.Name ) and \ # - * - coding : utf-8 - * last_index = 0 for line in difflib.unified_diff ( old.splitlines ( ) , new.splitlines ( ) , output a unified diff with all the changes that are necessary to easily r'\ ( __name__\s * ( ? : ,\s * ( ? : name\s * =\s * ) ? ( % s ) ) ? ' % action='store_true ' , help='Do not attempt to ' main ( ) name_param = match.group ( 2 ) for pattern , replacement in _blueprint_related : child.id == resp_name.id : return match.group ( 0 ) def upgrade_template_file ( filename , contents ) : dirnames [ : ] = [ x for x in dirnames if not x.startswith ( ' . ' ) ] print ( line ) target = match.group ( 1 ) return os.path.basename ( directory ) `` `` '' decorator = [ match.group ( 1 ) match.group ( 2 ) .replace ( 'after_ ' , 'teardown_ ' ) if name_param is None : ~~~~~~~~~~~~~~~~ lineiter = iter ( contents.splitlines ( True ) ) import ast with open ( filename ) as f : return_def = returns [ 0 ] new_contents = _error_handler_re.sub ( '\\1.error_handler_spec [ None ] [ \\2 ] ' , return prefix + repr ( endpoint ) upgrade_python_file ( filename , contents , teardown ) if modules_declared : options , args = parser.parse_args ( ) last_index += len ( line ) import re if line.rstrip ( ) .endswith ( '\\ ' ) : def looks_like_teardown_function ( node ) : _string_re_part = r '' ( ' ( [ ^'\\ ] * ( ? : \\ . [ ^'\\ ] * ) * ) ' '' \ def backtrack_module_name ( call_start ) : def rewrite_from_imports ( prefix , fromlist , lineiter ) : for line in contents.splitlines ( True ) : hand reviewed and not applied blindly without making backups . from optparse import OptionParser TEMPLATE_LOOKAHEAD = 4096 ( re.compile ( r'request\.module ' ) , 'request.blueprint ' ) , import_block = [ prefix , fromlist ] _module_constructor_re = re.compile ( r ' ( [ a-zA-Z0-9_ ] [ a-zA-Z0-9_ ] * ) \s * =\s * Module ' upgrade the application to 0.7 and to not yield deprecation warnings . parser.add_option ( '-T ' , ' -- no-teardown-detection ' , dest='no_teardown ' , 'detect teardown function rewrites . ' ) contents = f.read ( ) new_file.extend ( rewrite_from_imports ( match.group ( ) , return args and args [ 0 ] == 'return ' return for idx , line in enumerate ( content_lines ) : new_contents = fix_teardown_funcs ( new_contents ) # ! /usr/bin/env python modname = backtrack_module_name ( match.start ( ) ) _after_request_re = re.compile ( r ' ( ( ? : @ \S+\. ( ? : app_ ) ? ) ) ( after_request ) ( \b\s * $ ) ( ? m ) ' ) new_contents = fix_url_for ( new_contents , modules ) return `` .join ( import_block ) .replace ( 'Module ' , 'Blueprint ' ) the response and appear to be better suited for ` teardown_request ` .",['scripts/flask-07-upgrade.py'],Merge pull request # 2396 from davidism/remove-script
257,bce8ec75ebde8a7f49fbc3a9825e667d7327c64d,2017-06-26 09:18:21-07:00,"reload_module ( ext ) else : reraise ( exc_type , exc_value , tb.tb_next ) assert ext_id == 'oldext_simple ' def test_flaskext_new_simple_import_normal ( newext_simple ) : # that a real flaskext could be in there which would disable our assert excinfo.tb.tb_frame.f_globals is globals ( ) from flask.ext import oldext_package yield return True self.__class__.__name__ == other.__class__.__name__ and \ assert submodule.test_function ( ) == 42 flask.ext = sys.modules [ 'flask.ext ' ] = ext_module ~~~~~~~~~~~~~ assert ' . ' not in key from flask.ext.oldext_package import ext_id from flask.ext import oldext_simple next = next.tb_next oldext.join ( '__init__.py ' ) .write ( 'ext_id = `` oldext_package '' ' ) if not PY2 : # fake package . Secondly we want to make sure that the flaskext module = sys.modules [ fullname ] = sys.modules [ realname ] setup ( ) from flask._compat import PY2 # very this seems to be redundant , but if recursive imports test_string = os.path.sep + important_module.replace ( ' . ' , os.path.sep ) with pytest.raises ( ImportError ) as excinfo : Usage : : def __init__ ( self , module_choices , wrapper_module ) : import flask def test_flaskext_new_package_import_normal ( newext_package ) : def test_flaskext_new_package_import_module ( newext_package ) : from flask.ext import foo `` `` '' if ( Implements the `` flask.ext `` virtual package for versions of Flask try : from flask.ext.newext_simple import ext_id except ImportError : return not self.__eq__ ( other ) importer.install ( ) # since we only establish the entry in sys.modules at the # Python 2.7 Behavior . Modules are cleaned up late so the def test_flaskext_new_package_import_submodule ( newext_package ) : def is_important_frame ( self , important_module , tb ) : : license : BSD , see LICENSE for more details . return self entry.startswith ( 'flask.ext . ' ) or ) assert set ( w.category for w in recwarn.list ) \ warnings.warn ( were able to import the module itself but apparently something went for item in sys.meta_path : setattr ( sys.modules [ self.wrapper_module ] , modname , module ) import flask.ext.broken from flask.ext.newext_package.submodule import test_function pkg.join ( 'submodule.py ' ) .write ( 'def test_function ( ) : \n return 42\n ' ) for path in self.module_choices : def test_flaskext_new_package_import_submodule_function ( newext_package ) : def oldext_simple ( modules_tmpdir ) : warnings.simplefilter ( 'always ' , ExtDeprecationWarning ) return module pass assert newext_package.__name__ == 'flask_newext_package ' @ pytest.fixture sys.modules.pop ( fullname , None ) raise exc_type , exc_value , tb.tb_next assert newext_package.ext_id == 'newext_package ' This is used by ` flask.ext ` . flask.ext `` flask.ext `` - import extensions directly by their name instead of assert submodule.__name__ == 'flaskext.oldext_package.submodule ' tb = tb.tb_next packages= [ 'flask ' , 'flask.ext ' , 'flask.json ' ] , message = 'No module named \'missing_module\ '' with pytest.raises ( ImportError ) : def test_flaskext_old_package_import_submodule_function ( oldext_package ) : `` to flask_ { x } . The old form is deprecated . '' return False monkeypatch.delitem ( sys.modules , entry ) Redirect imports for extensions . This module basically makes it possible ' return 42 ' ) class ExtensionImporter ( object ) : flaskext = modules_tmpdir.mkdir ( 'flaskext ' ) def __ne__ ( self , other ) : def setup ( ) : ) and value is not None : flask.exthook `` `` '' x.write ( 'ext_id = `` newext_simple '' ' ) from flask.ext import newext_package entry.startswith ( 'flaskext . ' ) or def test_no_error_swallowing ( flaskext_broken ) : # name shows up properly here . Success ! flaskext.join ( '__init__.py ' ) .write ( '\n ' ) # reraise ( ) adds a second frame so we need to skip that one too . assert ext_id == 'oldext_package ' modname = fullname.split ( ' . ' , self.prefix_cutoff ) [ self.prefix_cutoff ] oldext.join ( 'submodule.py ' ) .write ( 'def test_function ( ) : \n ' # is the one from __import__ above which we do n't care about . `` `` '' Walks a traceback 's frames and checks if any of the frames if self.is_important_traceback ( realname , tb ) : : copyright : ( c ) 2015 by Armin Ronacher . message = 'No module named missing_module ' self.wrapper_module = wrapper_module assert oldext_package.ext_id == 'oldext_package ' for us to transition from flaskext.foo to flask_foo without having to import flaskext_compat older than 0.7 . This module is a noop if Flask 0.8 was detected . import_hooks = 0 assert oldext_package.__name__ == 'flaskext.oldext_package ' self.prefix = wrapper_module + ' . ' class ExtDeprecationWarning ( DeprecationWarning ) : When a user does `` from flask.ext.foo import bar `` it will attempt to self.wrapper_module == other.wrapper_module and \ `` Importing flask.ext . { x } is deprecated , use flask_ { x } instead . '' importer = ExtensionImporter ( [ 'flask_ % s ' , 'flaskext. % s ' ] , 'flask.ext ' ) if cls.__module__ == 'flask.exthook ' and \ ext.join ( '__init__.py ' ) .write ( 'import flask.ext.broken.b\n ' from flask.ext import newext_simple # we clear this out for various reasons . The most important one is flaskext.join ( 'oldext_simple.py ' ) .write ( 'ext_id = `` oldext_simple '' ' ) We 're switching from namespace packages because it was just too painful for import warnings @ pytest.fixture ( autouse=True ) def activate ( ) : fullname ! = 'flask.ext.ExtDeprecationWarning ' : `` `` '' Checks a single frame if it 's important . '' '' '' # import hook does not break on reloading . sys.meta_path [ : ] = [ x for x in sys.meta_path if self ! = x ] + [ self ] # python3.6 raises a subclass of ImportError : 'ModuleNotFoundError ' def test_flaskext_old_simple_import_normal ( oldext_simple ) : `` import flask.ext.sqlalchemy `` becomes `` import flask_sqlalchemy `` . g = tb.tb_frame.f_globals if self.is_important_frame ( important_module , tb ) : for key in ext.__dict__ : ) filename = os.path.abspath ( tb.tb_frame.f_code.co_filename ) # If it 's an important traceback we reraise it , otherwise next = excinfo.tb.tb_next.tb_next self.module_choices == other.module_choices x = modules_tmpdir.join ( 'flask_newext_simple.py ' ) tests.ext def disable_extwarnings ( recwarn ) : def test_flaskext_broken_package_no_module_caching ( flaskext_broken ) : import `` from flask_foo import bar `` first and when that fails it will import pytest def flaskext_broken ( modules_tmpdir ) : import os import types from flask.ext.oldext_simple import ext_id def is_important_traceback ( self , important_module , tb ) : assert oldext_simple.__name__ == 'flaskext.oldext_simple ' assert os.path.join ( 'flask_broken ' , '__init__.py ' ) in \ recwarn.clear ( ) through the `` flask.ext `` namespace . For example , flaskext_compat.activate ( ) everybody involved . return False from flask.ext.newext_package import submodule # sys.modules which we have to kill . test_string + os.path.sep + '__init__.py ' in filename def test_flaskext_old_simple_import_module ( oldext_simple ) : import flask.ext.broken This makes it possible to transition from the old flaskext.name to the continue # invocation now will have created a fullname entry in # the filename then . if fullname in sys.modules : # On the second invocation we still do n't have an entry for originated in the given important module . If that is the case then we warnings.warn ( if realname.startswith ( 'flaskext . ' ) : from flask.ext.oldext_package import submodule import os.path packages= [ 'flask ' , 'flask.json ' ] , def newext_simple ( modules_tmpdir ) : # Since this one `` succeeded '' temporarily that second importer = ExtensionImporter ( [ 'flask_ % s ' , 'flaskext. % s ' ] , __name__ ) ~~~~~~~~~~~~~~~ if fullname.startswith ( self.prefix ) : < = set ( [ ExtDeprecationWarning ] ) assert import_hooks == 1 return self.__class__.__module__ == other.__class__.__module__ and \ entry.startswith ( 'flask_ ' ) or return sys.modules [ fullname ] `` Detected extension named flaskext . { x } , please rename it `` # On PY3 we even have another one : ( try to import `` from flaskext.foo import bar `` . flaskext_compat Tests the extension import thing . assert test_function ( ) == 42 module_name = g [ '__name__ ' ] assert ext_id == 'newext_package ' .format ( x=modname ) , ExtDeprecationWarning , stacklevel=2 # one already has a temporary entry in the modules dict . cls.__name__ == 'ExtensionImporter ' : entry == 'flaskext ' assert newext_simple.ext_id == 'newext_simple ' ext_module.__path__ = [ ] from flask.ext.newext_package import ext_id # - * - coding : utf-8 - * # Some python versions will clean up modules so early that the # fullname in sys.modules , but we will end up with the same def load_module ( self , fullname ) : from imp import reload as reload_module while tb is not None : assert newext_simple.__name__ == 'flask_newext_simple ' import sys if ' . ' not in modname : assert str ( excinfo.value ) == message # is the one from __import__ above which we do n't care about from ._compat import reraise next.tb_frame.f_code.co_filename del setup raise ImportError ( 'No module named % s ' % fullname ) assert ext_id == 'newext_simple ' `` `` '' This importer redirects imports from this submodule to other locations . import_hooks += 1 self.module_choices = module_choices `` `` '' def test_flaskext_old_package_import_normal ( oldext_package ) : wrong when the module was imported . ( Eg : import of an import failed ) . from flask import ext ~~~~~~~~~~~~~~~~~~~ ext_module = types.ModuleType ( 'flask.ext ' ) for entry , value in list ( sys.modules.items ( ) ) : realname = path % modname pkg = modules_tmpdir.mkdir ( 'flask_newext_package ' ) newer flask_name without people having a hard time . def install ( self ) : oldext = flaskext.mkdir ( 'oldext_package ' ) return True def test_flaskext_old_package_import_module ( oldext_package ) : if module_name == important_module : if PY2 : self.prefix_cutoff = wrapper_module.count ( ' . ' ) + 1 def find_module ( self , fullname , path=None ) : ~~~~~~~~~ # we swallow it and try the next choice . The skipped frame # end this seems to be redundant , but if recursive imports if fullname.startswith ( self.prefix ) and \ ext.join ( ' b.py ' ) .write ( '\n ' ) __import__ ( realname ) return test_string + '.py ' in filename or \ from flask.exthook import ExtDeprecationWarning # happen we will call into the move import a second time . def newext_package ( modules_tmpdir ) : from flask.ext.oldext_package.submodule import test_function def __eq__ ( self , other ) : # fake module name and that import will succeed since this if '__name__ ' not in g : pkg.join ( '__init__.py ' ) .write ( 'ext_id = `` newext_package '' ' ) 'import missing_module ' ) def test_flaskext_old_package_import_submodule ( oldext_package ) : for x in range ( 2 ) : exc_type , exc_value , tb = sys.exc_info ( ) reload_module = reload def oldext_package ( modules_tmpdir ) : except ImportError : # reloading must not add more hooks .format ( x=modname ) , ExtDeprecationWarning ext = modules_tmpdir.mkdir ( 'flask_broken ' ) force all extensions to upgrade at the same time . cls = type ( item ) def importhook_setup ( monkeypatch ) : # module name at that point is no longer set . Try guessing from def test_flaskext_new_simple_import_module ( newext_simple ) : from .. exthook import ExtensionImporter assert submodule.__name__ == 'flask_newext_package.submodule ' assert oldext_simple.ext_id == 'oldext_simple ' try : assert issubclass ( excinfo.type , ImportError )","['CHANGES', 'flask/ext/__init__.py', 'flask/exthook.py', 'scripts/flaskext_compat.py', 'setup.py', 'tests/test_ext.py']",Merge pull request # 2395 from davidism/remove-ext
258,4c564779d159acadacc078988f7a40a3e5794eed,2017-06-26 08:29:43-07:00,") self.static_url_path + '/ < path : filename > ' , def _set_error_handlers ( self , value ) : `` Flask.request_globals_class `` - use `` Flask.app_ctx_globals_class `` template_folder=template_folder , raise ValueError ( elif endpoint.startswith ( ' . ' ) : ) if blueprint_name is not None : static_folder='static ' , static_host=None , ' available . ' 'You might be able to fix this by setting ' recwarn.pop ( DeprecationWarning ) _PackageBoundObject.__init__ ( # Switched by the request context until 1.0 to opt in deprecated # module functionality . def test_static_path_deprecated ( recwarn ) : warn ( DeprecationWarning ( 'modules were deprecated in favor of ' def __init__ ( self , import_name , static_path=None , static_url_path=None , `` `` '' Request.module is deprecated '' '' '' # TODO : get rid of this deprecated functionality in 1.0 def __init__ ( 'absolute . A relative path was given instead . ' ) self.error_handler_spec [ None ] = value self._error_handlers = { } @ property 'adapter for request independent URL generation . ' del _get_error_handlers , _set_error_handlers else : self.error_handler_spec = { } if endpoint [ :1 ] == ' . ' : warn ( DeprecationWarning ( 'static_path is now called ' template_folder=template_folder , static_folder='static ' , `` Flask.static_path `` - use `` Flask.static_url_path `` instead . self.error_handler_spec = { None : self._error_handlers } import_name , instance_path=None , instance_relative_config=False , ' pushed . This has to be executed when application context is ' `` `` '' if self._is_old_module : 'If an instance path is provided it must be absolute . ' ' A relative path was given instead . ' from warnings import warn 'Attempted to generate a URL without the application context being ' `` `` '' The name of the current module if the request was dispatched raise RuntimeError ( 'Attempted to generate a URL without the ' app = flask.Flask ( __name__ , static_path='/foo ' ) 'Application was not able to create a URL adapter for request ' 'application context being pushed . This has to be ' app.testing = True view_func=self.send_static_file 'static_url_path ' ) , stacklevel=2 ) to an actual module . This is deprecated functionality , use blueprints endpoint = blueprint_name + ' . ' + endpoint 'instead . ' ) , stacklevel=2 ) root_path=None ) : assert rv.status_code == 200 if blueprint_name is not None : # : attr : ` error_handler_spec ` shall be used now . view_func=self.send_static_file ) host_matching=False , template_folder='templates ' , endpoint = endpoint [ 1 : ] from warnings import warn 'new error_handler_spec attribute instead . ' ) , stacklevel=1 ) endpoint='static ' , host=static_host , raise RuntimeError ( 'Application was not able to create a URL ' import pytest root_path=None if ' . ' not in endpoint : instead . if not reqctx.request._is_old_module : self._error_handlers = value self.add_url_rule ( self.static_url_path + '/ < path : filename > ' , static_url_path=None , ' independent URL generation . You might be able to fix this by ' with app.test_request_context ( ) : endpoint='static ' , recwarn.pop ( DeprecationWarning ) self.add_url_rule ( return 'OK ' else : warn ( DeprecationWarning ( 'error_handlers is deprecated , use the ' root_path=root_path ) `` Request.module `` - use `` Request.blueprint `` instead . @ app.route ( '/ ' ) def index ( ) : The following old deprecated code was removed . ( ` # 2385 ` _ ) # support for the now deprecated ` error_handlers ` attribute . The host_matching=False , instance_path=None , return self.blueprint if endpoint [ :1 ] == ' . ' : rv.close ( ) _PackageBoundObject.__init__ ( self , import_name , def _get_error_handlers ( self ) : self , 'executed when application context is available . ' ) ) : if static_path is not None : .. _ # 2385 : https : //github.com/pallets/flask/issues/2385 endpoint = blueprint_name + endpoint `` Flask.init_jinja_globals `` - extend `` Flask.create_jinja_environment `` static_host=None , def test_request_module ( self , recwarn , app , client ) : error_handlers = property ( _get_error_handlers , _set_error_handlers ) assert flask.request.module is None template_folder='templates ' , else : endpoint = blueprint_name + endpoint raise RuntimeError ( rv = app.test_client ( ) .get ( '/foo/index.html ' ) return self._error_handlers root_path=root_path client.get ( '/ ' ) _is_old_module = False instance_relative_config=False , 'blueprints . Use request.blueprint ' host=static_host , instead . `` Flask.error_handlers `` - tracked by `` Flask.error_handler_spec `` , import_name , static_url_path = static_path 'the SERVER_NAME config variable . ' ) raise ValueError ( 'If an instance path is provided it must be ' self , raise RuntimeError ( assert flask.url_for ( 'static ' , filename='index.html ' ) == '/foo/index.html ' def module ( self ) : ' setting the SERVER_NAME config variable . '","['CHANGES', 'flask/app.py', 'flask/helpers.py', 'flask/wrappers.py', 'tests/test_basic.py', 'tests/test_deprecations.py']",Merge pull request # 2394 from davidism/remove-deprecated
259,c5d3f806d761432e87398d3ecab2f042a3ab617e,2017-06-26 07:35:20-07:00,"'called app_ctx_globals_class ' ) ) _set_request_globals_class ) : meth : ` create_jinja_environment ` instead . `` `` '' Deprecated . Used to initialize the Jinja2 globals . `` `` '' .. versionadded : : 0.5 request_globals_class = property ( _get_request_globals_class , from warnings import warn def _get_request_globals_class ( self ) : self.app_ctx_globals_class = value .. versionchanged : : 0.7 del _get_request_globals_class , _set_request_globals_class # Backwards compatibility support warn ( DeprecationWarning ( 'request_globals_class attribute is now ' This method is deprecated with 0.7 . Override return self.app_ctx_globals_class def _set_request_globals_class ( self , value ) : def init_jinja_globals ( self ) :",['flask/app.py'],Merge pull request # 2393 from JohnMoutafis/2385-remove-deprecated-code
260,29c055a2b4327d94c5aaf66ae00514199ff146cc,2017-06-16 07:00:26-07:00,"'The file/path provided ( % s ) does not appear to exist . Please ' self , import_path , raise_if_not_found=False ' { stack_trace } '.format ( 'For more information see ' assert locate_app ( ) break raise NoAppException ( from hello import app os.path.dirname ( __file__ ) , 'test_apps ' , 'cliapp ' and if it finds one it assumes the application is defined in it . pytest.raises ( NoAppException , obj.load_app ) return `` Hello World ! '' if rv : ) You can instruct Flask to look for the application in a different module by if sys.path [ 0 ] ! = dirpath : ' verify the path is correct . If app is not on PYTHONPATH , ' exporting the `` FLASK_APP `` environment variable . It can be either set to an discovered . This is achieved by exporting the `` FLASK_APP `` environment # import app from app.py in current directory Flask looks for a module named : file : ` wsgi.py ` or : file : ` app.py ` by default , app = Flask ( __name__ ) ) raise NoAppException ( 'The file/path provided ( % s ) does not appear ' rv = locate_app ( self , self.app_import_path ) rv = locate_app ( self , self.app_import_path ) def test_scriptinfo ( test_apps , monkeypatch ) : if not self.app_import_path : def locate_app ( script_info , app_id ) : obj = ScriptInfo ( ) import path or to a filename of a Python module that contains a Flask for module in [ 'wsgi.py ' , 'app.py ' ] : 'http : //flask.pocoo.org/docs/latest/quickstart/ ' 'the FLASK_APP environment variable.\n\nFor more ' elif raise_if_not_found : app = obj.load_app ( ) module=module , stack_trace=stack_trace ' the app ( % s ) : \n % s ' % ( module , stack_trace ) ) application . assert app.name == 'testapp ' if not rv : if self.app_import_path : def locate_app ( script_info , app_id , raise_if_not_found=True ) : 'http : //flask.pocoo.org/docs/latest/quickstart/ ' ) sys.path.insert ( 0 , dirpath ) return def test_scriptinfo ( test_apps ) : 'app.py module was not found in the current directory.\n\n ' ) ) ) ) is None ' to exist . Please verify the path is ' rv = locate_app ( 'correct . If app is not on PYTHONPATH , ' sys.path.insert ( 0 , dirpath ) else : from flask import Flask For the : command : ` flask ` script to work , an application needs to be ' ensure the extension is .py . '.format ( module=module ) 'There was an error trying to import the app ( { module } ) : \n ' For the : command : ` flask ` script to work , an application needs to be discovered . monkeypatch.chdir ( os.path.abspath ( os.path.join ( 'the FLASK_APP environment variable , and a wsgi.py or ' Python module that contains a Flask application . 'ensure the extension is .py ' % module ) assert app.name == 'hello ' import_path = prepare_exec_for_file ( module ) variable . It can be either set to an import path or to a filename of a script_info , `` notanpp.py '' , raise_if_not_found=False def hello ( ) : # import app from wsgi.py in current directory 'information see ' os.path.dirname ( __file__ ) , 'test_apps ' , 'helloworld ' raise NoAppException ( 'There was an error trying to import '","['docs/cli.rst', 'flask/cli.py', 'tests/test_apps/helloworld/hello.py', 'tests/test_apps/helloworld/wsgi.py', 'tests/test_cli.py']",Merge pull request # 2378 from miguelgrinberg/default-flask-app
261,d625d411047f335bb8586be3064c7c735ccb0cda,2017-06-14 18:42:15-07:00,"`` `` '' Test if aware datetime.datetime objects are converted into GMT . '' '' '' return datetime.timedelta ( ) def tzname ( self , dt ) : return self.__name def test_jsonify_aware_datetimes ( self , tz ) : gmt = FixedOffset ( hours=0 , name='GMT ' ) def __init__ ( self , hours , name ) : assert flask.json.JSONEncoder ( ) .encode ( dt ) == expected def utcoffset ( self , dt ) : .. _ # 2374 : https : //github.com/pallets/flask/pull/2374 https : //docs.python.org/2.7/library/datetime.html . return self.__offset expected = dt.astimezone ( gmt ) .strftime ( ' '' % a , % d % b % Y % H : % M : % S % Z '' ' ) This is a slight adaptation of the `` FixedOffset `` example found in def dst ( self , dt ) : self.__offset = datetime.timedelta ( hours=hours ) tzinfo = FixedOffset ( hours=tz [ 1 ] , name=tz [ 0 ] ) dt = datetime.datetime ( 2017 , 1 , 1 , 12 , 34 , 56 , tzinfo=tzinfo ) from datetime import date , datetime `` `` '' Fix incorrect JSON encoding of aware , non-UTC datetimes . ( ` # 2374 ` _ ) return http_date ( o.utctimetuple ( ) ) self.__name = name from datetime import date `` `` '' Fixed offset in hours east from UTC . class FixedOffset ( datetime.tzinfo ) : if isinstance ( o , datetime ) :","['CHANGES', 'flask/json/__init__.py', 'tests/test_helpers.py']",Merge pull request # 2374 from astralblue/json_encode_non_utc_datetimes
262,1e112cccaa94dd47e43f9466d859730c412aff1a,2017-06-14 12:56:42-07:00,"def _set_templates_auto_reload ( self , value ) : rv.debug = debug options [ 'auto_reload ' ] = self.templates_auto_reload from werkzeug.serving import run_simple if debug is not None : from werkzeug.serving import run_simple def _reconfigure_for_run_debug ( self , debug ) : Reconfigures `` app.jinja_env.auto_reload `` . application configuration may already be calculated based on the `` `` '' The `` run `` commands will set the application 's debug flag . Some Called by the : func : ` flask.cli.run ` command or : meth : ` Flask.run ` assert app.templates_auto_reload == True options [ 'auto_reload ' ] = self.debug options [ 'auto_reload ' ] = self.config [ 'TEMPLATES_AUTO_RELOAD ' ] rv._reconfigure_for_run_debug ( debug ) app.run ( debug=True ) if debug is not None : _get_templates_auto_reload , _set_templates_auto_reload del _get_templates_auto_reload , _set_templates_auto_reload not set , it will be enabled in debug mode . if self.config [ 'TEMPLATES_AUTO_RELOAD ' ] is not None : rv = self.config [ 'TEMPLATES_AUTO_RELOAD ' ] return rv if rv is not None else self.debug method if the debug flag is set explicitly in the call . This attribute can be configured with : data : ` TEMPLATES_AUTO_RELOAD ` . If app.run ( ) else : previous debug value . This method will recalculate affected values . assert app.jinja_env.auto_reload == False def test_templates_auto_reload_debug_run ( app , monkeypatch ) : .. versionadded : : 1.0 assert app.templates_auto_reload == False def run_simple_mock ( * args , * * kwargs ) : This property was added but the underlying config and behavior self.debug = bool ( debug ) self._reconfigure_for_run_debug ( bool ( debug ) ) monkeypatch.setattr ( werkzeug.serving , 'run_simple ' , run_simple_mock ) `` `` '' Reload templates when they are changed . Used by ) def _get_templates_auto_reload ( self ) : : meth : ` create_jinja_environment ` . if `` app.jinja_env `` was already accessed . ( ` # 2373 ` _ ) `` `` '' self.jinja_env.auto_reload = self.templates_auto_reload .. _ # 2373 : https : //github.com/pallets/flask/pull/2373 self.config [ 'TEMPLATES_AUTO_RELOAD ' ] = value self.debug = debug assert app.jinja_env.auto_reload == True Template auto reloading will honor the `` run `` command 's `` debug `` flag even : param debug : the new value of the debug flag import werkzeug.serving pass templates_auto_reload = property ( already existed .","['CHANGES', 'flask/app.py', 'flask/cli.py', 'tests/test_templating.py']",Merge pull request # 2373 from davidism/reload_templates_run_debug
263,d75d83defdbcc2e498f816b5cd20dcc24a1b7138,2017-06-14 12:22:09-07:00,"from pytz import timezone `` `` '' Test if aware datetime.datetime objects are converted into GMT . '' '' '' dt_as_gmt = dt_aware.astimezone ( timezone ( 'GMT ' ) ) expected = dt_as_gmt.strftime ( ' '' % a , % d % b % Y % H : % M : % S % Z '' ' ) assert flask.json.JSONEncoder ( ) .encode ( dt_aware ) == expected pytz dt_naive = datetime.datetime ( 2017 , 1 , 1 , 12 , 34 , 56 ) dt_aware = timezone ( tzname ) .localize ( dt_naive ) def test_jsonify_aware_datetimes ( self , tzname ) :","['tests/test_helpers.py', 'tox.ini']",Add UTs for # 2372
264,2c97ed985eaef9663bc72b1bc6b6d35c7d69e60d,2017-06-14 07:41:44-07:00,"Calls the blueprint 's : meth : ` ~flask.Blueprint.register ` method after : param url_prefix : Blueprint routes will be prefixed with this . blueprint . : param options : Additional keyword arguments are passed to `` `` '' Register a : class : ` ~flask.Blueprint ` on the application . Keyword : meth : ` ~Flask.register_blueprint ` . accessed in : meth : ` ~flask.Blueprint.record ` callbacks . : param first_registration : Whether this is the first time this self.static_url_path + '/ < path : filename > ' , `` `` '' Called by : meth : ` Flask.register_blueprint ` to register all views ' share the same name `` % s '' . Blueprints that are created on the ' behavior . Keyword arguments from ' fly need unique names . ' % ( view arguments . `` `` '' Called by : meth : ` Flask.register_blueprint ` to register a blueprint ' % r . Both share the same name `` % s '' . Blueprints that ' \ ) blueprint has been registered on the application . arguments passed to this method will override the defaults set on the method in the ` options ` dictionary . on the application . This can be overridden to customize the register `` `` '' Registers a blueprint on the application . ' A name collision occurred between blueprints % r and % r . Both ' endpoint='static ' ) blueprint , self.blueprints [ blueprint.name ] , blueprint.name a : class : ` .BlueprintSetupState ` and calls each : meth : ` record ` callback recording the blueprint in the application 's : attr : ` blueprints ` . state.add_url_rule ( self.static_url_path + '/ < path : filename > ' , : func : ` ~flask.Flask.register_blueprint ` are directly forwarded to this : param app : The application this blueprint is being registered with . view_func=self.send_static_file , and callbacks registered on the blueprint with the application . Creates : param options : Keyword arguments forwarded from view_func=self.send_static_file , endpoint='static ' assert self.blueprints [ blueprint.name ] is blueprint , ( ) 'are created on the fly need unique names . ' % \ : param subdomain : Blueprint routes will match on this subdomain . : class : ` ~flask.blueprints.BlueprintSetupState ` . They can be ( blueprint , self.blueprints [ blueprint.name ] , blueprint.name ) assert self.blueprints [ blueprint.name ] is blueprint , \ : param blueprint : The blueprint to register . : param url_defaults : Blueprint routes will use these default values for state.add_url_rule ( with it . ' A blueprint\ 's name collision occurred between % r and ' \","['flask/app.py', 'flask/blueprints.py']",Merge pull request # 2371 from davidism/register_blueprint-doc
265,094b116c7fafd7716de2a4b729b756868f4db3ab,2017-06-09 10:30:31-07:00,"$ python run-app.py from the environment . * Restarting with reloader ... raise ValueError ( `` No secret key set for Flask application '' ) In addition to pointing to configuration files using environment variables , you if ENVIRONMENT_DEBUG.lower ( ) in ( `` f '' , `` false '' ) : > set DEBUG=False environment variables are strings -- they are not automatically deserialized ability to access the configuration when starting up . There are other methods SECRET_KEY = os.environ.get ( `` SECRET_KEY '' , default=None ) if not SECRET_KEY : ENVIRONMENT_DEBUG = os.environ.get ( `` DEBUG '' , default=False ) Environment variables can be set on Linux or OS X with the export command in ENVIRONMENT_DEBUG = False may find it useful ( or necessary ) to control your configuration values directly On Windows systems use the ` set ` builtin instead : : reference , read the : class : ` ~flask.Config ` class documentation . `` True `` value in Python , which requires care if an environment explicitly sets Configuring from Environment Variables Here is an example of a configuration file that uses environment variables : : into Python types . on the config object as well to load from individual files . For a complete # Example configuration DEBUG = ENVIRONMENT_DEBUG the shell before starting the server : : While this approach is straightforward to use , it is important to remember that * Running on http : //127.0.0.1:5000/ import os Notice that any value besides an empty string will be interpreted as a boolean Make sure to load the configuration very early on , so that extensions have the $ export DEBUG=False values intended to be `` False `` .",['docs/config.rst'],Merge pull request # 2366 from tristanfisher/master
266,9d829934226a34c866ef56e6dacc15c423dd02cd,2017-06-06 09:22:49-07:00,"< input value= '' { { value } } '' > To prevent this , you 'll need to set the : ref : ` security-csp ` response header . .. _security-csp : < a href= '' { { value } } '' > click here < /a > response.headers [ 'Content-Security-Policy ' ] = `` default-src 'self ' '' < a href= '' { { href } } '' > the text < /a > onmouseover=alert ( document.cookie ) There is one class of XSS issues that Jinja 's escaping does not protect When the user would then move with the mouse over the input , the cookie against . The `` a `` tag 's `` href `` attribute can contain a ` javascript : ` URI , which the browser will execute when clicked if not secured properly . response.headers [ 'Content-Security-Policy ' ] = `` default-src : 'self ' '' When the user would then move with the mouse over the link , the cookie < a href= '' javascript : alert ( 'unsafe ' ) ; '' > click here < /a > onmouseover=alert ( document.cookie ) .. sourcecode : : html",['docs/security.rst'],Merge pull request # 2364 from davidism/xss-note
267,45946028e77ed68d64869f565b688aff0914638c,2017-06-06 07:52:55-07:00,"# : Absolute path to the package on the filesystem . Used to look up The absolute path to the configured static folder . # TODO remove the next three attrs when Sphinx : inherited-members : works static_folder = property ( # : The name of the package or module that this app belongs to . Do not # : `` None `` if templates should not be added . doc='The URL prefix that the static route will be registered for . ' # : Where is the app root located ? import_name = None # : The name of the package or module . Do not change this once static_url_path = property ( static_url_path = property ( _get_static_url_path , _set_static_url_path ) _get_static_folder , _set_static_folder , _get_static_url_path , _set_static_url_path , ' '' ) # : location of the templates . `` None `` if templates should not be root_path = None # : resources contained in the package . static_folder = property ( _get_static_folder , _set_static_folder , doc= '' ' # https : //github.com/sphinx-doc/sphinx/issues/741 # : change this once it is set by the constructor . # : exposed . template_folder = None ) # : it was set by the constructor . doc='The absolute path to the configured static folder . ' # : Location of the template files to be added to the template lookup .","['flask/app.py', 'flask/blueprints.py', 'flask/helpers.py']",Merge pull request # 2363 from davidism/inherited-members
268,b80cf057fc2b41a5f642c222dbcb79ce28d3fe0e,2017-06-05 06:34:49-07:00,"if handler : def raise_e1 ( ) : rv = client.get ( '/E1 ' ) `` `` '' Find a registered error handler for a request in this order : return handler_map [ exc_class ] = handler assert rv.data == b'Exception ' assert rv.data == b'E2 ' `` `` '' Return a registered error handler for an exception in this order : class E3 ( E1 , E2 ) : for name , c in ( # cache for next time exc_class is raised def find_handler ( handler_map ) : return handler blueprint handler for an exception class , app handler for an exception handler = find_handler ( self.error_handler_spec.get ( name , { } ) .get ( c ) ) def test_errorhandler_precedence ( app , client ) : return 'Exception ' ( request.blueprint , code ) , ( None , code ) , class , or `` None `` if a suitable handler is not found . continue raise E3 ( request.blueprint , None ) , ( None , None ) ) : def raise_e3 ( ) : .. _ # 2362 : https : //github.com/pallets/flask/pull/2362 blueprint generic HTTPException handler , app generic HTTPException handler , Removed error handler caching because it caused unexpected results for some rv = client.get ( '/E3 ' ) for name , c in ( ( request.blueprint , code ) , ( None , code ) , ) : def handle_e2 ( e ) : def handle_exception ( e ) : exception if you do n't want to traverse the MRO . ( ` # 2362 ` _ ) ( request.blueprint , None ) , ( None , None ) raise E1 exception inheritance hierarchies . Register handlers explicitly for each and returns None if a suitable handler is not found . handler_map = self.error_handler_spec.setdefault ( name , { } ) .get ( c ) # check for any in blueprint or app class E2 ( Exception ) : class E1 ( Exception ) : return 'E2 ' pass","['CHANGES', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 2362 from davidism/remove-error-handler-cache
269,f29fa0d56b1e971ed9ac303806d7da153f6d6fa9,2017-06-04 12:38:34-07:00,"# the reloader can properly operate . sys.argv = [ '-m ' , this_module ] + sys.argv [ 1 : ] if sys.version_info < ( 2 , 7 ) : # we need to ensure that we restore the actual command line so that this_module += '.cli ' this_module = 'flask ' name = 'python -m ' + this_module this_module = __package__ + '.cli ' # Python rewrites `` python -m flask '' to the path to the file in argv . sys.argv = [ '-m ' , this_module ] + args if sys.version_info > = ( 2 , 7 ) : else : name = 'python -m ' + this_module # Restore the original command so that the reloader works . name = 'python -m ' + this_module.rsplit ( ' . ' , 1 ) [ 0 ] # This module is always executed as `` python -m flask.run '' and as such",['flask/cli.py'],Merge pull request # 2359 from davidism/cli-warning
270,63129e8426ba0ab71a3500172ca04fb41ca67daa,2017-06-04 12:02:40-07:00,"from flask.json import dumps as json_dumps JSON ( : mimetype : ` application/json ` , see : meth : ` is_json ` ) , otherwise it return self.get_json ( ) try : ) invoked . .. _ # 2358 : https : //github.com/pallets/flask/pull/2358 if mt.startswith ( 'application/ ' ) and mt.endswith ( '+json ' ) : try : assert rv.status_code == 200 `` `` '' If the request has a JSON mimetype like : mimetype : ` application/json ` if cache and self._cached_json is not Ellipsis : and self.mimetype ! = 'multipart/form-data ' _missing = object ( ) rv = None email = json_data [ 'email ' ] .. versionadded : : 0.8 return jsonify ( token=generate_token ( email , password ) ) class JSONMixin ( object ) : `` 'json ' is deprecated . Use 'get_json ( ) ' instead . '' with app.app_context ( ) : raise BadRequest ( 'Failed to decode JSON object : { 0 } '.format ( e ) ) `` `` '' Called if decoding of the JSON data failed . The return value of return self.get_json ( ) data = _get_data ( self , cache ) # certain clients have been using this in the past . This if ctx is not None : from . import json Otherwise this will be `` None `` . from .globals import _request_ctx_stack rv = None def get_json ( self , force=False , silent=False , cache=True ) : .. versionadded : : 1.0 def is_json ( self ) : return ( from flask import json def _get_data ( req , cache ) : @ property to the JSON-serialized object and sets the content type to # push a context so flask.json can use app 's json attributes } ) `` application/json `` . You can get the JSON data from the request or response return ctx.app.config [ 'MAX_CONTENT_LENGTH ' ] : param cache : if set to `` True `` the parsed JSON data is remembered mt == 'application/json ' self._cached_json = rv Use : meth : ` get_json ` instead . def _get_data_for_json ( self , cache ) : rv = c.post ( '/api/auth ' , json= { ) , stacklevel=2 ) `` `` '' Called if : meth : ` get_json ` parsing fails and is n't silenced . If default implementation just raises a : class : ` BadRequest ` exception . return jsonify ( flask.request.get_json ( ) ) Flask has great support for JSON , and is a popular choice for building JSON return self._cached_json if current_app is not None and current_app.debug : raise BadRequest ( ) json_data = rv.get_json ( ) : mimetype : ` application/json ` or : mimetype : ` application/ * +json ` . kwargs [ 'content_type ' ] = 'application/json ' # charset is set then the data has been encoded correctly as well . password = json_data [ 'password ' ] .. versionadded : : 1.0 Extract JSON handling to a mixin applied to both the request and response `` None `` unless `` force `` is true . If parsing fails , return rv rv = self.on_json_loading_failed ( e ) def echo ( ) : will be `` None `` . and not self.files return False warn ( DeprecationWarning ( if ctx is not None and ctx.app.config.get ( 'DEBUG ' , False ) : request_charset = self.mimetype_params.get ( 'charset ' ) The : meth : ` get_json ` method should be used instead . assert rv.is_json `` `` '' : mimetype : ` application/json ` or : mimetype : ` application/ * +json ` . return rv when testing to get the test client response data as JSON . rv = json.loads ( data , encoding=request_charset ) : param silent : if set to `` True `` this method will fail silently from warnings import warn from werkzeug.exceptions import BadRequest add it by subclassing . can be overridden by the `` force `` parameter . If parsing fails , : param force : if set to `` True `` the mimetype is ignored . .. versionadded : : 0.11 # Request should be in JSON return None def json ( self ) : if mt == 'application/json ' : return getter ( cache=cache ) `` `` '' Parses the incoming JSON request data and returns it . By default : param silent : Silence parsing errors and return `` None `` instead . `` Client can not provide both 'json ' and 'data ' . '' assert 'data ' not in kwargs , ( class Response ( ResponseBase , JSONMixin ) : the response to make testing JSON response much easier . ( ` # 2358 ` _ ) this method is used by : meth : ` get_json ` when an error occurred . The return None and return `` None `` . return self.get_data ( cache=cache ) warn ( DeprecationWarning ( 'json is deprecated . ' mimetype like : mimetype : ` application/json ` . See : meth : ` is_json ` . This : members : set_cookie , data , mimetype very convenient : : class Request ( RequestBase ) : raise BadRequest ( ) if cache : if ( Add `` json `` keyword argument for the test client request methods . This will if cache and rv is not _missing : ( ` # 2358 ` _ ) if request_charset is not None : # fits our general approach of being nice in what we accept return req.data except ValueError as e : rv = getattr ( self , '_cached_json ' , _missing ) from flask.json import jsonify parsing capabilities . if not ( force or self.is_json ) : .. versionadded : : 0.8 rv = self.on_json_loading_failed ( e ) self._cached_json = rv rv = json.loads ( data ) .. versionchanged : : 0.10 Passing the `` json `` argument in the test client methods sets the request data if getter is not None : if silent : this function will return `` None `` if the request does not use a JSON self.mimetype ! = 'multipart/form-data ' and not self.files : classes used by Flask . This adds the `` is_json `` and `` get_json `` methods to or ( mt.startswith ( 'application/ ' ) ) and mt.endswith ( '+json ' ) if current_app : response . If you want that behavior back you can trivially .. versionchanged : : 1.0 `` `` '' Common mixin for both request and response objects to provide JSON 'username ' : 'flask ' , 'password ' : 'secret ' def is_json ( self ) : class Response ( ResponseBase ) : def on_json_loading_failed ( self , e ) : JSON support is added to the response , like the request . This is useful # We accept a request charset against the specification as if cache : : meth : ` on_json_loading_failed ` is called and its return value is used else : json_data = request.get_json ( ) rv = client.post ( '/echo ' , json=json_data ) mt = self.mimetype getter = getattr ( req , 'get_data ' , None ) `` `` '' ) : raise BadRequest ( 'Failed to decode JSON object : { 0 } '.format ( e ) ) return current_app.config [ 'MAX_CONTENT_LENGTH ' ] `` `` '' Parse and return the data as JSON . If the mimetype does not indicate : members : set_cookie , data , mimetype , is_json , get_json `` `` '' # Response should be in JSON `` `` '' Check if the mimetype indicates JSON data , either Testing JSON APIs the : meth : ` on_json_loading_failed ` method on the request object will be Removed buggy previous behavior of generating a random JSON Adam Byrtek with app.test_client ( ) as c : def test_json_request_and_response ( app , client ) : if 'content_type ' not in kwargs : .. versionchanged : : 0.10 if silent : Raise a : exc : ` BadRequest ` error instead of returning an error if ctx is not None and ctx.app.debug and \ # We accept MIME charset against the specification as certain clients return self.get_data ( ) if 'json ' in kwargs : `` `` '' This will contain the parsed JSON data if the mimetype indicates data = self._get_data_for_json ( cache=cache ) mt = self.mimetype 'Use get_json ( ) instead . ' ) , stacklevel=2 ) class Request ( RequestBase , JSONMixin ) : : class : ` BadRequest ` exception . from flask.globals import current_app rv = json.loads ( data , encoding=charset ) as the return value . : param force : Ignore the mimetype and always try to parse JSON . else : : param cache : Store the parsed JSON to return for subsequent calls . on the request . assert rv.get_json ( ) == json_data this method returns a value , it is used as the return value for return True # We return cached JSON only when the cache is enabled . current_app subclassing . charset = self.mimetype_params.get ( 'charset ' ) APIs . Making requests with JSON data and examining JSON data in responses is is considered to include JSON data if the mimetype is .. versionadded : : 0.11 message as JSON . If you want that behavior you can add it by def json ( self ) : `` `` '' Indicates if this request is JSON or not . By default a request except ValueError as e : with client : def auth ( ) : _cached_json = Ellipsis ctx = _request_ctx_stack.top from warnings import warn kwargs [ 'data ' ] = json_dumps ( kwargs.pop ( 'json ' ) ) if not ( force or self.is_json ) : assert flask.request.get_json ( ) == json_data and current_app.debug def on_json_loading_failed ( self , e ) : return rv with `` get_json `` . JSON ( : mimetype : ` application/json ` , see : meth : ` is_json ` ) , this returns # have used this in the past . For responses , we assume that if the : meth : ` get_json ` . The default implementation raises a assert flask.request.is_json assert verify_token ( email , json_data [ 'token ' ] ) def get_json ( self , force=False , silent=False , cache=True ) : .. deprecated : : 1.0 ( see : meth : ` is_json ` ) , this will contain the parsed JSON data . from flask import request , jsonify json_data = { 'drink ' : { 'gin ' : 1 , 'tonic ' : True } , 'price ' : 10 } dump the given object as JSON and set the appropriate content type . # and strict in what we send out . from werkzeug.exceptions import BadRequest","['AUTHORS', 'CHANGES', 'docs/api.rst', 'docs/testing.rst', 'flask/testing.py', 'flask/wrappers.py', 'tests/test_testing.py']",Merge pull request # 2358 from davidism/json-mixin
271,3b678b7927e38af1f50cfaa60e1c2fdeaf391325,2017-06-03 12:26:15-07:00,"Only open the session if the request has not been pushed onto the context self.session = session_interface.make_null_session ( self.app ) assert rv.data == b'flask ' rv = client.get ( '/ ' ) if self.session is None : def gen ( ) : def test_stream_keeps_session ( self , app , client ) : # Only open a new session if this is the first time the request was self.app , self.request stack yet . This allows `` stream_with_context `` generators to access the same # Open the session at the moment that the request context is # Open the session at the moment that the request context is available . ) .. _ # 2354 : https : //github.com/pallets/flask/pull/2354 # This allows a custom open_session method to use the request context . session_interface = self.app.session_interface def index ( ) : session_interface = self.app.session_interface if self.session is None : # available . This allows a custom open_session method to use the return flask.Response ( gen ( ) ) # stored on ` g ` instead of the appcontext ) . # request context ( e.g . code that access database information self.session = session_interface.open_session ( if self.session is None : yield flask.session [ 'test ' ] # pushed , otherwise stream_with_context loses the session . flask.session [ 'test ' ] = 'flask ' self.session = session_interface.make_null_session ( self.app ) self.session = session_interface.open_session ( self.app , self.request ) session that the containing view uses . ( ` # 2354 ` _ )","['CHANGES', 'flask/ctx.py', 'tests/test_helpers.py']",Merge pull request # 2354 from davidism/stream-session
272,49f3e96844b5dfb6459412aa68e3f25ab3a65514,2017-06-02 10:23:51-07:00,"`` `` '' Indicates if this request is JSON or not . By default a request `` `` '' Parses the incoming JSON request data and returns it . By default : meth : ` on_json_loading_failed ` method on the request object will be this function will return `` None `` if the request does not use a JSON ( see : meth : ` is_json ` ) , this will contain the parsed JSON data . Otherwise this will be `` None `` . : mimetype : ` application/json ` but this can be overridden by the the : meth : ` on_json_loading_failed ` method on the request object will be on the request . this function will return `` None `` if the mimetype is not can be overridden by the `` force `` parameter . If parsing fails , `` `` '' If the mimetype is : mimetype : ` application/json ` this will contain the `` `` '' If the request has a JSON mimetype like : mimetype : ` application/json ` `` force `` parameter . If parsing fails the on the request . and return `` None `` . and return `` None `` . mimetype like : mimetype : ` application/json ` . See : meth : ` is_json ` . This `` `` '' Indicates if this request is JSON or not . By default a request parsed JSON data . Otherwise this will be `` None `` . `` `` '' Parses the incoming JSON request data and returns it . By default",['flask/wrappers.py'],Merge pull request # 2353 from grantwwu/patch-1
273,62406e667c8004cf0367a3ec5bcbed980cbc32bb,2017-06-02 10:07:57-07:00,"support other types . import pytest u'which can only store unicode strings . Consider ' try : return OrderedDict ( value ) return return_function ( the_value ) class TagOrderedDict ( JSONTag ) : serializer instance . return [ [ k , self.serializer.tag ( v ) ] for k , v in iteritems ( value ) ] return Foo ( value ) processes dicts first , so insert the new tag at the front of the order since from uuid import UUID class TagDict ( JSONTag ) : This object provides dumping and loading methods similar to simplejson self.register ( cls ) from werkzeug.http import http_date , parse_date else : Let 's seen an example that adds support for : class : ` ~collections.OrderedDict ` . `` `` '' Convert a tagged representation back to the original type . '' '' '' return value .. _ # 2352 : https : //github.com/pallets/flask/pull/2352 ~~~~~~~~~~~ from uuid import uuid4 elif callable ( getattr ( value , '__html__ ' , None ) ) : class TaggedJSONSerializer ( object ) : the session data , but it may be useful in other places . It can be extended to return json.dumps ( _tag ( value ) , separators= ( ' , ' , ' : ' ) ) self.serializer = serializer # : only used as an intermediate step during tagging . ~~~~~~~~~~ not true . class TagTuple ( JSONTag ) : return obj if len ( value ) ! = 1 : assert s [ 't ' ] == ( 1 , 2 , 3 ) elif isinstance ( value , list ) : class TagMarkup ( JSONTag ) : self.order.insert ( index , tag ) LOADS_MAP = { `` `` '' Serialize anything matching the : class : ` ~flask.Markup ` API by def test_duplicate_tag ( ) : the_key , the_value = next ( iteritems ( obj ) ) * : class : ` bytes ` self.tags = { } flask.session [ 'di_tag ' ] = { ' di ' : 'not-a-dict ' } flask.session [ ' b ' ] = b'\xff ' return dict ( ( k , self.serializer.tag ( v ) ) for k , v in iteritems ( value ) ) def __init__ ( self , serializer ) : assert s [ 't_tag ' ] == { ' t ' : 'not-a-tuple ' } if len ( obj ) ! = 1 : Tagged JSON return UUID ( value ) assert type ( rv [ 'm ' ] ) == flask.Markup from flask.helpers import is_ip , total_seconds s.register ( TagFoo ) : class : ` ~uuid.UUID ` objects return response `` `` '' Convert a value to a tagged representation if necessary . '' '' '' return b64decode ( value ) the JSON it dumps : and next ( iter ( value ) ) in self.serializer.tags Dicts do n't have an order in Python or JSON , so to handle this we will dump return value datetime.utcnow ( ) .replace ( microsecond=0 ) , return parse_date ( value ) `` `` '' flask.session [ ' b ' ] = b'\xff ' ' d ' : parse_date , return { self.key : self.to_json ( value ) } # Did n't find a function for this object from flask._compat import text_type , PY2 from ._compat import iteritems , text_type __slots__ = ( 'serializer ' , ) { ' di ' : ' di ' } , give it the new key `` ' od ' `` to identify the type . The session serializer for cls in self.default_tags : def __init__ ( self ) : # Check the key for a corresponding function return text_type ( value.__html__ ( ) ) ) from flask.json.tag import JSONTag if return_function : and len ( value ) == 1 for tag in self.order : but it also tags certain builtin Python objects that commonly appear in class TaggedJSONSerializer ( object ) : return value.hex raise UnexpectedUnicodeError ( u ' A byte string with ' return isinstance ( value , datetime ) if key is not None : from .helpers import is_ip , total_seconds sessions . Currently the following extended values are supported in return self.tags [ key ] .to_python ( value [ key ] ) elif isinstance ( value , dict ) : assert isinstance ( s.order [ 0 ] , TagDict ) __slots__ = ( 'tags ' , 'order ' ) return ( return { ' m ' : text_type ( value.__html__ ( ) ) } from base64 import b64decode , b64encode key = ' t ' from base64 import b64decode , b64encode key = ' d ' def test_custom_tag ( ) : TagDict , PassDict , TagTuple , PassList , TagBytes , TagMarkup , TagUUID , : param tag_class : tag class to register . Will be instantiated with this self.order = [ ] pytest.raises ( NotImplementedError , t.to_json , None ) # : added later using : meth : ` ~register ` . around it . '' '' '' { ' x ' : ( 1 , 2 , 3 ) , ' y ' : 4 } , TagDateTime , __slots__ = ( ) return isinstance ( value , bytes ) * : class : ` ~uuid.UUID ` return_function = self.LOADS_MAP.get ( the_key ) def untag ( self , value ) : from ._compat import text_type , PY2 t = JSONTag ( None ) * : class : ` ~flask.Markup ` # key here . assert s [ 'd ' ] == now uuid4 ( ) , return isinstance ( value , UUID ) u'base64 encoding your string ( String was % r ) ' % value ) : exc : ` KeyError ` is raised . key = ' di ' assert s [ 'm ' ] == flask.Markup ( ' < html > ' ) key = ' f ' `` `` '' Check if the given value should be tagged by this tag . '' '' '' return loads ( value , object_hook=self.untag ) elif isinstance ( value , bytes ) : def tag ( self , value ) : deserializes to an instance of : class : ` ~flask.Markup ` . '' '' '' self.tags [ key ] = tag return isinstance ( value , dict ) flask.session [ 't ' ] = ( 1 , 2 , 3 ) Markup ( ' < html > ' ) , return isinstance ( value , list ) : class : ` itsdangerous.Serializer ` . class TagFoo ( JSONTag ) : def check ( self , value ) : key = next ( iter ( value ) ) class JSONTag ( object ) : # : The tag to mark the serialized object with . If `` None `` , this tag is if not force and key in self.tags : return http_date ( value ) ( 1 , 2 , 3 ) , # Pass the value to the function with client : : members : return { ' d ' : http_date ( value ) } flask.session [ ' u ' ] = the_uuid app.session_interface.serializer.register ( TagOrderedDict , 0 ) return [ self.serializer.tag ( item ) for item in value ] return isinstance ( value , OrderedDict ) the items as a list of `` [ key , value ] `` pairs . Subclass : class : ` JSONTag ` and s = flask.session key = None `` `` '' Register a new tag with this serializer . return `` , 204 __slots__ = ( ) assert type ( s [ ' b ' ] ) == bytes : class : ` ~flask.sessions.SecureCookieSessionInterface ` uses this to serialize s.register ( TagDict , force=True , index=0 ) assert s [ ' b ' ] == b'\xff ' def dumps ( self , value ) : def modify_session ( response ) : if key not in self.tags : Internally , the dict key is suffixed with ` __ ` , and the suffix is removed if tag.check ( value ) : from .globals import current_app , request key = ' od ' elif isinstance ( value , uuid.UUID ) : `` `` '' return { ' u ' : value.hex } def to_json ( self , value ) : class TagUUID ( JSONTag ) : flask.session [ 'dt ' ] = now key = ' d ' return { ' b ' : b64encode ( value ) .decode ( 'ascii ' ) } return Markup ( value ) `` `` '' Base class for defining type tags for : class : ` TaggedJSONSerializer ` . '' '' '' when deserializing . ] default_tags = [ return isinstance ( value , Foo ) assert s.loads ( s.dumps ( data ) ) == data Implementation helpers for the JSON support in Flask . return { key + '__ ' : self.serializer.tag ( value [ key ] ) } def _tag ( value ) : are not JSON types . Passed as the intermediate serializer to raise KeyError ( `` Tag ' { 0 } ' is already registered . `` .format ( key ) ) def __init__ ( self , data ) : class PassDict ( JSONTag ) : self.data = data `` `` '' Convert the value to a valid JSON type and add the tag structure ' t ' : tuple , assert s [ ' u ' ] == the_uuid the new tag is a special case of an existing tag . If -1 ( default ) , flask.session [ 'd ' ] = now The following extra types are supported : u'non-ASCII data was passed to the session system ' return json.loads ( value , object_hook=object_hook ) from flask.json.tag import TaggedJSONSerializer , JSONTag session_json_serializer = TaggedJSONSerializer ( ) .. autoclass : : TaggedJSONSerializer import uuid ' b ' : b64decode , : class : ` ~datetime.datetime ` objects except UnicodeError : from flask.globals import current_app , request pytest.raises ( NotImplementedError , t.check , None ) key = ' m ' class TagDateTime ( JSONTag ) : # JSON objects may only have string keys , so do n't bother tagging the return pickle.dumps ( dict ( flask.session ) ) client.get ( '/ ' ) raise NotImplementedError class TagDict ( JSONTag ) : `` `` '' if index == -1 : from flask.debughelpers import UnexpectedUnicodeError key = tag.key def loads ( self , value ) : assert s [ 'di_tag ' ] == { ' di ' : 'not-a-dict ' } `` `` '' `` `` '' Tag the value and dump it to a compact JSON string . '' '' '' flask.json : class : ` ~markupsafe.Markup ` objects from flask._compat import iteritems , text_type def to_python ( self , value ) : .. autodata : : session_json_serializer key = ' u ' flask.session [ 'di_t_tag ' ] = { ' t__ ' : 'not-a-tuple ' } flask.session [ 'm ' ] = flask.Markup ( 'Hello ! ' ) will already be removed . '' '' '' def register ( self , tag_class , force=False , index=-1 ) : rv = pickle.loads ( client.get ( '/ ' ) .data ) __slots__ = ( 'serializer ' , ) { ' t ' : ( 1 , 2 , 3 ) } , s = TaggedJSONSerializer ( ) self.order.append ( tag ) flask.session [ 't_tag ' ] = { ' t ' : 'not-a-tuple ' } assert type ( s [ 'm ' ] ) == flask.Markup * : class : ` ~datetime.datetime ` from flask.json.tag import TaggedJSONSerializer return value def check ( self , value ) : def to_python ( self , value ) : key = ' b ' .. automodule : : flask.json.tag `` `` '' Tag for 1-item dicts whose only key matches a registered tag . : class : ` tuple ` \s `` OrderedDict `` must be processed before `` dict `` . : : } pytest.raises ( NotImplementedError , t.to_python , None ) return callable ( getattr ( value , '__html__ ' , None ) ) assert type ( rv [ ' b ' ] ) == bytes def loads ( self , value ) : `` `` '' `` `` '' Convert the Python object to an object that is a valid JSON type . : param force : overwrite an existing tag . If false ( default ) , a having a `` __html__ `` method to the result of that method . Always ' u ' : uuid.UUID , The tag will be added later . '' '' '' `` `` '' Convert the JSON representation back to the correct type . The tag assert rv [ ' u ' ] == the_uuid return b64encode ( value ) .decode ( 'ascii ' ) from flask.json import dumps , loads `` `` '' Load data from a JSON string and deserialized any tagged objects . '' '' '' : license : BSD , see LICENSE for more details . @ app.after_request session_json_serializer = TaggedJSONSerializer ( ) [ ( 1 , 2 , 3 ) ] , assert rv [ 't ' ] == ( 1 , 2 , 3 ) storing other types in the session cookie . ( ` # 2352 ` _ ) def test_dump_load_unchanged ( data ) : A compact representation for lossless serialization of non-standard JSON types . def test_tag_interface ( ) : from flask import Markup return tuple ( value ) assert isinstance ( s.tags [ ' d ' ] , TagDict ) flask.session [ ' u ' ] = the_uuid assert s [ 'di_t_tag ' ] == { ' t__ ' : 'not-a-tuple ' } class PassList ( JSONTag ) : the tag is appended to the end of the order . class Foo ( object ) : from . import Markup , json `` `` '' Create a tagger for the given serializer . '' '' '' return { key [ : -2 ] : value [ key ] } : copyright : ( c ) 2015 by Armin Ronacher . ' m ' : Markup , * : class : ` tuple ` # : Tag classes to bind when creating the serializer . Other tags can be we take for granted when serializing ( tuples , markup objects , datetime ) . isinstance ( value , dict ) return obj from werkzeug.http import http_date , parse_date Allow registering new tags with `` TaggedJSONSerializer `` to support class TagBytes ( JSONTag ) : elif isinstance ( value , str ) : : param index : index to insert the new tag in the tag order . Useful when def object_hook ( obj ) : flask.session [ 'm ' ] = flask.Markup ( ' < html > ' ) return dict ( ( k , _tag ( v ) ) for k , v in iteritems ( value ) ) flask.session [ 't ' ] = ( 1 , 2 , 3 ) def to_json ( self , value ) : return self.serializer.tag ( value.data ) ) ) { ' t__ ' : b ' a ' } , return tag.tag ( value ) return [ _tag ( x ) for x in value ] return isinstance ( value , tuple ) def dumps ( self , value ) : assert s.loads ( s.dumps ( Foo ( 'bar ' ) ) ) .data == 'bar ' from jinja2 import Markup tag = to_json assert rv [ ' b ' ] == b'\xff ' client.get ( '/ ' ) .. autoclass : : JSONTag elif isinstance ( value , datetime ) : return dumps ( self.tag ( value ) , separators= ( ' , ' , ' : ' ) ) : raise KeyError : if the tag key is already registered and `` force `` is tag = tag_class ( self ) * : class : ` dict ` return text_type ( value ) from datetime import datetime return { ' t ' : [ _tag ( x ) for x in value ] } b'\xff ' , assert rv [ 'm ' ] == flask.Markup ( 'Hello ! ' ) pytest.raises ( KeyError , s.register , TagDict ) if isinstance ( value , tuple ) : `` `` '' A customized JSON serializer that supports a few extra types that `` `` '' Serializer that uses a tag system to compactly represent objects that assert rv [ 'dt ' ] == now","['CHANGES', 'docs/api.rst', 'flask/{json.py => json/__init__.py}', 'flask/json/tag.py', 'flask/sessions.py', 'tests/test_basic.py', 'tests/test_json_tag.py']",Merge pull request # 2352 from davidism/json-object-hook
274,c7f433c49bcd752a057020ba58672b6e441eec21,2017-05-31 21:04:21-07:00,"try : .format ( code_or_exception ) ) you with a function to call on your whim ( and in tests ) . Note that ) : exc : ` ~werkzeug.exceptions.HTTPException ` subclasses or HTTP status and the special case for arbitrary exception types . You are however not limited to : exc : ` ~werkzeug.exceptions.HTTPException ` Handlers are prioritized by specificity of the exception classes they are like . of being registered for a route , it is registered for an exception or HTTP codes . Handlers can be registered for a specific class , or for all subclasses exc_class , code = self._get_exc_class_and_code ( code_or_exception ) 'Tried to register a handler for an exception instance { 0 ! r } . ' app.register_error_handler ( 400 , lambda e : 'bad request ! ' ) : exc : ` ~werkzeug.exceptions.BadRequest ` from the example and their HTTP codes class InsufficientStorage ( werkzeug.exceptions.HTTPException ) : You can also register a function as error handler without using # or , without the decorator Non-standard HTTP codes can not be registered by code because they are not known exception instance to generate the response . Error handlers are normal : ref : ` views ` but instead of being registered for `` HTTPException with that code instead . `` .format ( code_or_exception ) : exc : ` ~werkzeug.exceptions.BadRequest ` and their HTTP codes are interchangeable def page_not_found ( error ) : and searched for in the exception classes for which handlers are registered . A decorator that is used to register a function given an the : meth : ` errorhandler ` decorator . The following example is `` `` '' A decorator that is used to register a function given an return 'This page does not exist ' , 404 registered , : class : ` ~werkzeug.exceptions.HTTPException ` subclasses show a def test_error_handler_unknown_code ( app ) : For example , if an instance of : exc : ` ConnectionRefusedError ` is raised , and a handler E.g . if an instance of : exc : ` ConnectionRefusedError ` is raised , and a handler they are registered for instead of the order they are registered in . app.error_handler_spec [ None ] [ 404 ] = page_not_found app.register_error_handler ( InsuffcientStorage , handle_507 ) ( `` BadRequest.code == 400 `` ) . Errorhandlers are now prioritized by specificity of the exception classes by Werkzeug . Instead , define a subclass of : meth : ` ~flask.Flask.register_error_handler ` : : with pytest.raises ( KeyError ) as exc_info : .. versionchanged : : 0.11 register and raise that exception class . : : Once an exception instance is raised , its class hierarchy is traversed , by its class hierarchy ; the most specific handler is chosen . If no handler is determined . The first `` None `` refers to the active blueprint . If the error exception instance , and its response is shown to the user . or HTTP status codes but can register a handler for every exception class you generic message about their code , while other exceptions are converted to a code = 507 : class : ` ~werkzeug.exceptions.HTTPException ` with the appropriate code and handler should be application wide `` None `` shall be used . 'Handlers can only be registered for exception classes or HTTP error codes . ' routes , they are registered for exceptions that are raised while trying to Register error handlers using : meth : ` ~flask.Flask.errorhandler ` or Handlers can be registered for any exception class , not just however is discouraged as it requires fiddling with nested dictionaries 'Tried to register a handler for an exception instance { 0 ! r } . ' do something else . Those two ways are equivalent , but the first one is more clear and leaves the more specific : exc : ` ConnectionRefusedError ` handler is called with the exc_class , code = self._get_exc_class_and_code ( code_or_exception ) because the 404 occurs at the routing level before the blueprint can be Register handlers by decorating a function with the more specific : exc : ` ConnectionRefusedError ` handler is called on the status code that would is raised while trying to handle a request . registered for instead of the order they are registered in . : meth : ` ~flask.Flask.errorhandler ` . Or use An error handler is a normal view function that return a response , but instead globally on the application , assuming a blueprint is handling the request that : meth : ` ~flask.Flask.register_error_handler ` to register the function later . ' Handlers can only be registered for exception classes or ' raise InsufficientStorage ( ) are interchangeable when handed to the registration methods or decorator When an exception is caught by Flask while handling a request , it is first Remember to set the error code when returning the response . : : ' HTTP error codes . '.format ( code_or_exception ) Setting error handlers via assignments to : attr : ` error_handler_spec ` .. versionchanged : : 0.11 return 'bad request ! ' description = 'Not enough storage space . ' assert 'Use a subclass ' in exc_info.value.args [ 0 ] looked up by code . If no handler is registered for the code , it is looked up raises the exception . However , the blueprint can not handle 404 routing errors when registering handlers . ( `` BadRequest.code == 400 `` ) Handlers registered on the blueprint take precedence over those registered app.register_error_handler ( 400 , handle_bad_request ) of a parent class . return 'bad request ! ' , 400 generic 500 Internal Server Error . `` `` '' Register a function to handle errors by code or exception class . equivalent to the one above : : `` ' { 0 } ' is not a recognized HTTP error code . Use a subclass of '' The most specific handler is selected . except KeyError : raise KeyError ( app.register_error_handler ( 999 , lambda e : ( '999 ' , 999 ) )","['docs/errorhandling.rst', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 2350 from davidism/errorhandler
275,9049755e3fac192d5c0cca5092a74a67e562cdc6,2017-05-29 19:53:18-07:00,"debugger . This is a more specific version of `` TRAP_HTTP_EXCEPTIONS `` . InternalServerError , MethodNotAllowed , default_exceptions , \ `` TRAP_BAD_REQUEST_ERRORS `` is enabled by default in debug mode . e.description = `` KeyError : ' { 0 } ' '' .format ( * e.args ) assert client.get ( '/fail ' ) .status_code == 400 if ( trap_bad_request is None and self.debug ) or trap_bad_request : Key errors raised from request data like `` form `` show the the bad ( self.debug or self.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] ) .. versionchanged : : 1.0 FLASK_APP=myproject.app : create_app ( 'dev ' ) support . # when generating the response message . Set an informative InternalServerError , MethodNotAllowed , default_exceptions Default : `` False `` if self.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] : BadRequestKeyError Bad request errors are not trapped by default in debug mode . rv = client.get ( '/fail ' ) 'TRAP_BAD_REQUEST_ERRORS ' : None , # if unset , trap based on debug mode and e.description is BadRequestKeyError.description key in debug mode rather than a generic bad request message . debugger . This is a more specific version of `` TRAP_HTTP_EXCEPTIONS `` . If Default : `` None `` assert b'missing_key ' not in rv.data ) : # description for key errors in debug mode or when trapping errors . 'TRAP_BAD_REQUEST_ERRORS ' : False , # MultiDict passes the key to the exception , but that 's ignored app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = False `` BadRequestKeyError `` has a message with the bad key in debug mode instead FLASK_APP=myproject.app : create_app ( 'dev ' ) support . unset , it is enabled in debug mode . # only set it if it 's still the default description assert 'missing_key ' in e.value.description assert rv.status_code == 400 of the generic bad request message . ( ` # 2348 ` _ ) and isinstance ( e , BadRequestKeyError ) trap_bad_request = self.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] .. _ # 2348 : https : //github.com/pallets/flask/pull/2348 if (","['CHANGES', 'docs/config.rst', 'flask/app.py', 'tests/test_basic.py', 'tests/test_helpers.py']",Merge pull request # 2348 from davidism/bad-request
276,fb90c310b9c9099118c06a95183e38157727fa92,2017-05-29 13:42:06-07:00,"' '' open_session '' is deprecated and will be removed in 1.1 . Use ' if not app.session_interface.is_null_session ( sess ) : self.session_interface.save_session ( self , ctx.session , response ) .. deprecated : 1.0 session_interface = self.app.session_interface self.save_session ( ctx.session , response ) self.session = self.app.open_session ( self.request ) sess = app.open_session ( c.request ) import warnings sess = session_interface.open_session ( app , c.request ) ' `` session_interface.open_session '' instead . ' ' `` session_interface.make_null_session '' instead . ' self.session = session_interface.make_null_session ( self.app ) self.session = self.app.make_null_session ( ) ' '' make_null_session '' is deprecated and will be removed in 1.1 . Use ' ' '' save_session '' is deprecated and will be removed in 1.1 . Use ' session_interface.save_session ( app , sess , resp ) Will be removed in 1.1 . Use `` session_interface.make_null_session `` instead . ' `` session_interface.save_session '' instead . ' ) ) Will be removed in 1.1 . Use `` session_interface.save_session `` warnings.warn ( DeprecationWarning ( app.save_session ( sess , resp ) self.session = session_interface.open_session ( self.app , self.request ) session_interface = app.session_interface if not session_interface.is_null_session ( sess ) : Will be removed in 1.1 . Use `` session_interface.open_session ``","['flask/app.py', 'flask/ctx.py', 'flask/testing.py']",Merge pull request # 2347 from davidism/session-interface
277,b7eca826aa94d87b85a998916f1ccc0d3b4591c6,2017-05-29 10:16:29-07:00,"updated_header = ' , '.join ( headers ) import pickle import pytest from flask._compat import text_type headers.append ( value ) `` `` '' Add a value to the `` Vary `` header if it is not already present . '' '' '' from flask.helpers import patch_vary_header response.vary.add ( 'Cookie ' ) import pytest response.headers [ 'Vary ' ] = 'Accept-Encoding , Accept-Language ' import flask import werkzeug.serving header = response.headers.get ( 'Vary ' , `` ) import time import time response.headers [ 'Vary ' ] = 'Cookie ' response.vary.update ( ( 'Accept-Encoding ' , 'Accept-Language ' ) ) headers = [ h for h in ( h.strip ( ) for h in header.split ( ' , ' ) ) if h ] from werkzeug.exceptions import BadRequest , NotFound , Forbidden import flask from werkzeug.exceptions import BadRequest , Forbidden , NotFound import pickle from flask._compat import text_type response.vary.add ( 'Cookie ' ) if not any ( h.lower ( ) == lower_value for h in headers ) : patch_vary_header ( response , 'Cookie ' ) def patch_vary_header ( response , value ) : import werkzeug.serving lower_value = value.lower ( ) response.headers [ 'Vary ' ] = updated_header","['flask/helpers.py', 'flask/sessions.py', 'tests/test_basic.py']",Merge pull request # 2346 from davidism/2345-vary
278,57974165444d551d281ae25171d4ec5e571c5ca7,2017-05-28 14:17:56-07:00,"or app.config [ 'APPLICATION_ROOT ' ] app_root = app.config.get ( 'APPLICATION_ROOT ' ) or '/ ' FLASK_APP=myproject.app : create_app ( 'dev ' ) support . app_root = app.config [ 'APPLICATION_ROOT ' ] url_scheme = app.config.get ( 'PREFERRED_URL_SCHEME ' ) or 'http ' 'APPLICATION_ROOT ' : None , return app.config [ 'SESSION_COOKIE_PATH ' ] or \ url_scheme = app.config [ 'PREFERRED_URL_SCHEME ' ] script_name=self.config [ 'APPLICATION_ROOT ' ] or '/ ' , 'APPLICATION_ROOT ' : '/ ' , default when it was set to `` None `` . script_name=self.config [ 'APPLICATION_ROOT ' ] , app.config [ 'APPLICATION_ROOT ' ] or '/ ' return app.config [ 'SESSION_COOKIE_PATH ' ] \ Set `` APPLICATION_ROOT = '/ ' `` by default . This was already the implicit","['CHANGES', 'flask/app.py', 'flask/sessions.py', 'flask/testing.py']",Merge pull request # 2344 from davidism/application-root
279,90389140cc192113a0c08c54a2de22a41a397702,2017-05-28 10:42:16-07:00,"These files can also cause issues while cloning . If you have : : it would make the code uglier . fails to push and you 're using a self-hosted git service like GitLab , you can coverage report py { 36,35,34,33,27,26 , py } -release With only pytest installed , a large part of the testsuite will get skipped If you really want to test everything , you will have to install `` tox `` instead This repository contains several zero-padded file modes that may cause issues `` make cov `` runs the basic test suite with `` coverage `` all dependencies are installed . Describe what you expected to happen . though . Whether this is relevant depends on which part of Flask you 're working ~~~~~~~~~~~~~~~~~~~~~ * The IRC channel `` # pocoo `` on FreeNode . ext-test : Please , do n't use the issue tracker for this . Use one of the following Try to follow ` PEP8 ` _ , but you may ignore the line length limit if following Thanks for considering contributing to Flask . The full test suite takes a long time to run because it tests multiple Install Flask as an editable package using the current source : : Please , do n't use the issue tracker for this . Check whether the `` # pocoo `` IRC pytest # # # Actual Behavior pytest < https : //virtualenv.readthedocs.io/en/latest/index.html > ` _ . pip install -r test-requirements.txt -q destructive to the commit history , so we suggest ignoring these warnings . If it * add `` versionadded `` or `` versionchanged `` directives to relevant docstrings skip_install = true coverage html * Python version : `` site : stackoverflow.com flask { search term , exception message , etc . } `` ========================== on . Travis is set up to run the full testsuite when you submit your pull contributing 'sphinx ' , Ideally , create an [ MCVE ] ( http : //stackoverflow.com/help/mcve ) , which helps us coverage run -m pytest test : `` make test-all `` runs the full test suite with `` tox `` sphinx List your Python , Flask , and Werkzeug versions . If possible , check if this pytest -- cov=flask tests/ Flask provides a `` Makefile `` with various shortcuts . They will ensure that ~~~~~~~~~~~~~~~~~ turn off repository checks in the admin panel . any any extra information that may be useful / related to your problem . The issue tracker is a tool to address bugs . * * Shortcut * * : `` make test `` will ensure `` pytest `` is installed , and run it . git clone https : //github.com/pallets/flask.git Try to follow ` PEP8 < https : //www.python.org/dev/peps/pep-0008/ > ` _ , but you Generating a report of lines that do not have test coverage can indicate test : clean-pyc install-dev pip install -- editable . Generate a HTML report can be done using this command : : > Full docs on `` coverage.py `` are here : https : //coverage.readthedocs.io install-dev : * The IRC channel `` # python `` on FreeNode for more general questions . * add documentation to the relevant docstrings or pages : : ================= # then open htmlcov/index.html 'dev ' : [ Read more about ` coverage < https : //coverage.readthedocs.io > ` _ . 3.4 , 3.5 3.6 , and PyPy 2.7 installed to run all of the environments . Then run : : .. include : : .. /CONTRIBUTING.rst * * Shortcut * * : `` make cov `` will ensure `` pytest-cov `` is installed , run it , display the results , * and * save the HTML report . This repository contains several zero-padded file modes that may cause issues when pushing this repository to git hosts other than github . Fixing this is destructive to the commit history , so we suggest ignoring these warnings . If it fails to push and you 're using a self-hosted git service like Gitlab , you can turn off repository checks in the admin panel . deps = sphinx Generating a report of lines that do not have unit test coverage can indicate where Then you can run the testsuite with : : py { 36,27 , py } -release-simplejson questions about using Jinja or issues not related to Jinja . * * The zero-padded file modes files above can cause issues while cloning , too . If you have coverage report pip install -q -e . [ test ] # # # Expected Behavior tox request , but running them yourself can save time . git clone https : //github.com/ { username } /flask .PHONY : all install-dev test coverage cov test-all tox docs audit release clean-pyc upload-docs ebook cov : coverage < ! * Ask on ` Stack Overflow ` _ . Search with Google first using : pytest -- cov-report html -- cov=flask tests/ Add the main repository as a remote to update later : : all : test report on the terminal and as an interactive HTML document : : `` ` python Create a virtualenv : : Paste the full traceback if there was an exception . fixed in the repository . commands = * ensure all tests pass with `` pytest `` git fetch pallets `` ` Commit checklist : 'pytest > =3 ' , Tell us what should happen . deps = request anyways . tox -e coverage-report if your issue is encoding related . If you 'd like to report a bug in Flask , fill out the template below . Provide to start contributing . `` pytest `` integrates with `` coverage.py `` , using the `` pytest-cov `` pytest tests/ channel on Freenode can help with your issue . If your problem is not strictly cov : Running the testsuite combinations of Python and dependencies . You need to have Python 2.6 , 2.7 , 3.3 , deps = detox cd flask py { 36,35,34,33,27,26 , py } pip install -e `` . [ dev ] '' You probably want to set up a ` virtualenv .. _minimal , complete , and verifiable example : https : //stackoverflow.com/help/mcve The minimal requirement for running the testsuite is `` pytest `` . You can docs : * Werkzeug version : of `` pytest `` . You can install it with : : coverage : clean-pyc install-dev or understand the problem and helps check that it is not caused by something in * Flask version : Run the basic test suite with : : when pushing this repository to git hosts other than GitHub . Fixing this is ======= test-all : install-dev 'greenlet ' , 'blinker ' , This only runs the tests for the current environment . Whether this is relevant # # # Environment * add a changelog entry if this patch changes code 'sphinxcontrib-log-cabinet ' pip install -r test-requirements.txt `` make docs `` builds the HTML documentation issue is already fixed in the repository . solution is to set both of the above settings to false while cloning , and then ================ `` make test `` runs the basic test suite with `` pytest `` from all runs . Under which versions of Werkzeug does this happen ? Check if this issue is your code . detox -e py { 36,35,34,33,27,26 , py } , py { 36,27 , py } -simplejson , py { 36,33,27,26 , py } -devel , py { 36,33,27,26 , py } -lowest , docs-html python3 -m venv env tox : test-all Caution : zero-padded file modes Configure git with your ` username ` _ and ` email ` _ : : docs : clean-pyc install-dev own code . `` make `` targets or : : If possible , include a ` minimal , complete , and verifiable example ` _ to help resources for questions about your own code : # or `` env\Scripts\activate '' on Windows Running the tests Link to any relevant issues or pull requests . us identify the issue . This also helps check that the issue is not with your Add the main repository as a remote to update later . ~~~~~~~~~~~~~~~~ ` Clone ` _ your GitHub fork locally : : ================== pip install pytest * * Shortcut * * : `` make tox-test `` will ensure `` tox `` is installed , and run it . Paste a minimal example that causes the problem . Running the full test suite with `` tox `` will combine the coverage reports The `` tox `` command will then run all tests against multiple combinations all : clean-pyc test pushing tox -e py-release FLASK_DEBUG= py.test -- cov-report term -- cov-report html -- cov=flask -- cov=examples tests examples Describe what actually happened . Include the full traceback if there was an Werkzeug or Flask specific , `` # python `` is generally more active . python tests/flaskext_test.py -- browse install it with : : .. _Stack Overflow : https : //stackoverflow.com/questions/tagged/flask ? sort=linked extras_require= { $ ( MAKE ) -C docs html Describe what this patch does to fix the issue . Thank you for considering contributing to Flask ! * * This issue tracker is a tool to address bugs in Flask itself . $ ( MAKE ) -C docs html ` Stack Overflow < https : //stackoverflow.com/ > ` _ is also worth considering . py { 36,27 , py } -simplejson coverage run -p -m pytest tests examples Python versions and dependency versions . flask-sphinx-themes `` git remote add pallets https : //github.com/pallets/flask `` Clone this repository : : } , git config -- global user.name 'your name ' `` ` pytb git config -- global user.email 'your email ' cloning Configure git with your ` username ` _ and ` email ` _ . Install Flask in editable mode with development dependencies : : depends on which part of Flask you 're working on . Travis-CI will run the full pip install pytest-cov tox ] , may ignore the line-length-limit if following it would make the code uglier . pip install tox ` Clone ` _ your GitHub fork locally . suite when you submit your pull request . pip install -q -e . [ dev ] cd flask ~~~~~~~~~~~~ Please use the # pocoo IRC channel on freenode or Stack Overflow for general Under which versions of Python does this happen ? This is even more important After this has been installed , you can output a report to the command line using this command : : exception . coverage run -m pytest coverage html . env/bin/activate Tests , coverage , and docs will be run automatically when you submit the pull where to start contributing . Run `` pytest `` using `` coverage `` and generate a setting them back to true after the cloning is finished . set in your git configuration file , cloning this repository will fail . The only set in your git configuration file , cloning this repository will fail . The only solution is to set both of the above settings to false while cloning , and then setting them back to true after the cloning is finished . 'coverage ' , Tell us what happens instead . 'tox ' , coverage run -p -m pytest git remote add pallets https : //github.com/pallets/flask Caution * add tests that fail without the patch [ testenv : detox ] plugin . This assumes you have already run the testsuite ( see previous section ) : : Please use the # pocoo IRC channel on freenode or Stack Overflow for questions . .PHONY : clean-pyc ext-test test tox-test test-with-mem upload-docs docs audit","['.github/ISSUE_TEMPLATE.rst', '.github/PULL_REQUEST_TEMPLATE.rst', 'CONTRIBUTING.rst', 'Makefile', 'docs/contents.rst.inc', 'docs/contributing.rst', 'setup.py', 'tox.ini']",Merge pull request # 2343 from davidism/tests
280,aeb82a404f2926613f83070e039de34cc5842b52,2017-05-27 18:09:35-07:00,elif not arguments and len ( arg_names ) == 1 : arg_defaults = args_spec.defaults arg_names = args_spec.args args_spec = getargspec ( app_factory ) elif not arguments and len ( arg_names ) == 1 and arg_defaults is None : arg_names = getargspec ( app_factory ) .args,['flask/cli.py'],Merge pull request # 2342 from jrbaez01/issue/ # 2341-accept-one-default-argument
281,4f689c41d9d5aa1161b185de9bd7fb6d85b6cc25,2017-05-27 18:02:18-04:00,elif not arguments and len ( arg_names ) == 1 : arg_defaults = args_spec.defaults arg_names = args_spec.args args_spec = getargspec ( app_factory ) elif not arguments and len ( arg_names ) == 1 and arg_defaults is None : arg_names = getargspec ( app_factory ) .args,['flask/cli.py'],# 2341 : Accept default argument value when args lenght equal 1
282,135f85a19137371cf4870dab1710618b61fe9183,2017-05-27 10:52:45-07:00,"python : 2.7 env : TOXENV=py-devel , codecov python : 3.3 env : TOXENV=py-lowest , codecov python : pypy env : TOXENV=py-release-simplejson , codecov env : TOXENV=py , codecov env : TOXENV=py-simplejson , codecov python : 2.6 env : TOXENV=py-release python : 3.6 env : TOXENV=py-release , codecov env : TOXENV=py",['.travis.yml'],Merge pull request # 2340 from pallets/reduce-ci-matrix
283,a4869eb4d2bcb25e6cc5c2e285601abfddea7f4c,2017-05-26 06:17:40-07:00,"arguments . '' '' '' `` `` '' Checks if the given string is a variable name or a function . If it is a function , it checks for specified arguments and whether it takes a `` script_info `` argument and calls the function with the appropriate a `` script_info `` argument and calls the function with the appropriate a function , it checks for specified arguments and whether it takes arguments . If it is a `` '' '' `` `` '' Checks if the given string is a variable name or a function . If it is",['flask/cli.py'],Merge pull request # 2338 from pallets/cleanup-2326
284,7c0b36f1467d2d8ea5fdc572d5edfce476a6eb89,2017-05-26 09:16:45-04:00,"arguments . '' '' '' `` `` '' Checks if the given string is a variable name or a function . If it is a function , it checks for specified arguments and whether it takes a `` script_info `` argument and calls the function with the appropriate a `` script_info `` argument and calls the function with the appropriate a function , it checks for specified arguments and whether it takes arguments . If it is a `` '' '' `` `` '' Checks if the given string is a variable name or a function . If it is",['flask/cli.py'],cleanup # 2326
285,a63a4cb034955f5d9c4b14f87a5337d94ba472a1,2017-05-25 15:00:03-07:00,"os.close ( app.config [ 'DB_FD ' ] ) return redirect ( url_for ( 'flaskr.show_entries ' ) ) with app.app_context ( ) : Tests the Flaskr application . ) ) PASSWORD='default ' : copyright : ( c ) 2015 by Armin Ronacher . app.config.from_envvar ( 'FLASKR_SETTINGS ' , silent=True ) def close_db ( error ) : from setuptools import setup , find_packages config = { def test_messages ( client , app ) : rv = sqlite3.connect ( current_app.config [ 'DATABASE ' ] ) return redirect ( url_for ( 'show_entries ' ) ) def test_login_logout ( client , app ) : print ( 'Initialized the database . ' ) app.config.update ( dict ( ~~~~~~ `` `` '' login ( client , flaskr.app.config [ 'USERNAME ' ] , app.config.from_envvar ( 'FLASKR_SETTINGS ' , silent=True ) init_db ( ) 1. edit the configuration in the flaskr.py file or if hasattr ( mod , 'bp ' ) : app.register_blueprint ( mod.bp ) app = create_app ( ) DEBUG=True , from flaskr.blueprints.flaskr import init_db flaskr.init_db ( ) register_blueprints ( app ) app.config [ 'PASSWORD ' ] ) < a href= '' { { url_for ( 'flaskr.login ' ) } } '' > log in < /a > @ app.route ( '/ ' ) flaskr.app.config [ 'TESTING ' ] = True g.sqlite_db.close ( ) rv = login ( client , flaskr.app.config [ 'USERNAME ' ] + ' x ' , for name in find_modules ( 'flaskr.blueprints ' ) : SECRET_KEY='development key ' , from .flaskr import app def initdb_command ( ) : if hasattr ( g , 'sqlite_db ' ) : db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) SECRET_KEY='development key ' , } def close_db ( error ) : rv = login ( client , app.config [ 'USERNAME ' ] + ' x ' , from flaskr.factory import create_app if hasattr ( g , 'sqlite_db ' ) : app.config [ 'PASSWORD ' ] + ' x ' ) `` `` '' Creates the database tables . '' '' '' ) ) export FLASK_APP=flaskr._cliapp client = flaskr.app.test_client ( ) @ app.teardown_appcontext # Load default config and override config from an environment variable elif request.form [ 'password ' ] ! = app.config [ 'PASSWORD ' ] : def app ( request ) : with current_app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : def client ( request , app ) : from flask import Flask , request , session , g , redirect , url_for , abort , \ 'DATABASE ' : temp_db_location , def register_blueprints ( app ) : A microblog example application written as Flask tutorial with @ app.route ( '/add ' , methods= [ 'POST ' ] ) import os login ( client , app.config [ 'USERNAME ' ] , os.unlink ( app.config [ 'DATABASE ' ] ) @ app.route ( '/login ' , methods= [ 'GET ' , 'POST ' ] ) def register_teardowns ( app ) : render_template , flash , current_app if request.form [ 'username ' ] ! = app.config [ 'USERNAME ' ] : # - * - coding : utf-8 - * yield client rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , `` `` '' Creates the database tables . '' '' '' 'DB_FD ' : db_fd def test_login_logout ( client ) : return None Reference : Armin Ronacher , `` Flask for Fun and for Profit '' PyBay 2016 . return redirect ( url_for ( 'show_entries ' ) ) [ aliases ] export FLASK_APP=flaskr app.config.update ( dict ( app.config.update ( config or { } ) 1. edit the configuration in the factory.py file or USERNAME='admin ' , < a href= '' { { url_for ( 'login ' ) } } '' > log in < /a > `` `` '' Register all blueprint modules os.close ( db_fd ) DATABASE=os.path.join ( app.root_path , 'flaskr.db ' ) , Flask and sqlite3 . import os bp = Blueprint ( 'flaskr ' , __name__ ) `` `` '' Closes the database again at the end of the request . '' '' '' def create_app ( config=None ) : init_db ( ) return redirect ( url_for ( 'flaskr.show_entries ' ) ) with flaskr.app.app_context ( ) : app = Flask ( __name__ ) test=pytest @ app.cli.command ( 'initdb ' ) DATABASE=os.path.join ( app.root_path , 'flaskr.db ' ) , os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) return app def teardown ( ) : < form action= '' { { url_for ( 'add_entry ' ) } } '' method= '' post '' class= '' add-entry '' > flaskr.app.config [ 'PASSWORD ' ] + ' x ' ) print ( 'Initialized the database . ' ) from setuptools import setup # create our little application : ) `` `` '' < a href= '' { { url_for ( 'logout ' ) } } '' > log out < /a > request.addfinalizer ( teardown ) ~~~~~~~~~~~~ rv = sqlite3.connect ( app.config [ 'DATABASE ' ] ) from flask import Flask , g test=pytest from flaskr import flaskr function . app = Flask ( __name__ ) packages=find_packages ( ) , [ tool : pytest ] # create our blueprint : ) render_template , flash Flaskr Tests return client `` `` '' Closes the database again at the end of the request . '' '' '' @ app.route ( '/logout ' ) pointing to a configuration file or pass in a flaskr.app.config [ 'PASSWORD ' ] ) def client ( ) : DEBUG=True , def initdb_command ( ) : USERNAME='admin ' , rv = login ( client , app.config [ 'USERNAME ' ] , g.sqlite_db.close ( ) def test_messages ( client ) : packages= [ 'flaskr ' ] , elif request.form [ 'password ' ] ! = current_app.config [ 'PASSWORD ' ] : with app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : < form action= '' { { url_for ( 'flaskr.login ' ) } } '' method= '' post '' > mod = import_string ( name ) from werkzeug.utils import find_modules , import_string def register_cli ( app ) : app = create_app ( config=config ) db_fd , temp_db_location = tempfile.mkstemp ( ) Flaskr register_teardowns ( app ) flaskr.app.config [ 'PASSWORD ' ] ) register_cli ( app ) dictionary with config values using the create_app : license : BSD , see LICENSE for more details . 'TESTING ' : True , if request.form [ 'username ' ] ! = current_app.config [ 'USERNAME ' ] : client = app.test_client ( ) from flask import Blueprint , request , session , g , redirect , url_for , abort , \ < a href= '' { { url_for ( 'flaskr.logout ' ) } } '' > log out < /a > < form action= '' { { url_for ( 'flaskr.add_entry ' ) } } '' method= '' post '' class= '' add-entry '' > PASSWORD='default ' pointing to a configuration file . yield app < form action= '' { { url_for ( 'login ' ) } } '' method= '' post '' > app.config [ 'PASSWORD ' ] )","['examples/flaskr/README', 'examples/flaskr/flaskr/__init__.py', 'examples/flaskr/flaskr/_cliapp.py', 'examples/flaskr/flaskr/blueprints/__init__.py', 'examples/flaskr/flaskr/{ => blueprints}/flaskr.py', 'examples/flaskr/flaskr/factory.py', 'examples/flaskr/flaskr/templates/layout.html', 'examples/flaskr/flaskr/templates/login.html', 'examples/flaskr/flaskr/templates/show_entries.html', 'examples/flaskr/setup.cfg', 'examples/flaskr/setup.py', 'examples/flaskr/tests/test_flaskr.py']",Merge pull request # 2228 from wgwz/improve-flaskr
286,090109b63772669f838d4786ce9a2483e75478c0,2017-05-25 14:57:17-07:00,"def create_app3 ( foo , bar , script_info ) : try : else : else : assert locate_app ( except TypeError as e : if inspect.isfunction ( attr ) : script_info , `` cliapp/app '' ) # Search for app factory functions . if 'script_info ' in arguments : % module ) arguments . If it is a `` '' '' return func ( script_info ) # Search for app factory callables . import ast def call_factory ( func , script_info ) : script_info , `` cliapp.factory : create_app '' ) .name == `` create_app '' return app_factory ( * arguments ) arg_names = getargspec ( app_factory ) .args script_info , `` notanpp.py '' ) ) .name == `` create_app3_baz_qux '' script_info , `` cliapp.factory : create_app ( ) '' ) return app ' well as not using keyword arguments or ' if args is not None : script_info , `` cliapp.app : notanapp '' ) name , args = match.groups ( ) args = ( ) import inspect return app `` `` '' Checks if the given string is a variable name or a function . If it is raise RuntimeError ( 'Failed to find application in module `` % s '' ' ' Did you make sure to use the right number of arguments as ' 'The provided string `` { string } '' is not a valid variable name ' script_info , `` cliapp.factory : create_app2 ( 'foo ' ) '' ) the app_factory depending on that and the arguments provided . ) .name == `` create_app2_foo_bar '' app = call_factory ( attr , script_info ) return find_best_app ( script_info , mod ) if app is None : elif len ( arguments ) == 1 : if inspect.isfunction ( app_factory ) : NoAppException , locate_app , script_info , `` cliapp/app '' ) callable=attr_name , module=module.__name__ def create_app ( ) : arguments = getargspec ( func ) .args elif arguments : a function , it checks for specified arguments and whether it takes args = args.rstrip ( ' , ' ) from . import Flask return func ( script_info=script_info ) ' { e } \nThe app factory `` { factory } '' in module `` { module } '' could ' attr = getattr ( module , name , None ) return app_factory ( script_info ) ' non-literals ? '.format ( e=e , factory=string , module=module ) ) 'or function expression . '.format ( string=string ) ) pytest.raises ( a `` script_info `` argument and calls the function with the appropriate assert locate_app ( script_info , `` cliapp.factory '' ) .name == `` create_app '' ' '' { name } '' '.format ( name=module ) ) app_factory = getattr ( module , name , None ) NoAppException , locate_app , 'Auto-detected `` { callable } ( ) '' in module `` { module } '' , but ' app = attr reraise ( NoAppException , new_error , sys.exc_info ( ) [ 2 ] ) of arguments . Checks for the existence of a script_info argument and calls RuntimeError , locate_app , script_info , `` cliapp.app : notanapp '' ) script_info , `` cliapp.factory : create_app3 ( 'baz ' , 'qux ' ) '' script_info , `` cliapp.factory : create_app ( ) '' ) .name == `` create_app '' args = ast.literal_eval ( `` ( { args } , ) '' .format ( args=args ) ) elif not arguments and len ( arg_names ) == 1 : app = getattr ( mod , app_obj , None ) `` `` '' Checks if the given app factory function has an argument named app = find_best_app ( script_info , mod ) `` `` '' Takes an app factory , a `` script_info ` object and optionally a tuple if match : def create_app2 ( foo , bar ) : def call_factory ( app_factory , script_info , arguments= ( ) ) : return find_app_by_string ( app_obj , script_info , mod ) script_info , `` cliapp.factory : create_app2 ( 'foo ' , 'bar ' ) '' return app_factory ( ) script_info , `` cliapp.importerrorapp '' ) import re NoAppException , locate_app , script_info , `` cliapp.importerrorapp '' ) return Flask ( `` _ '' .join ( [ 'create_app2 ' , foo , bar ] ) ) and returns the result . if isinstance ( app , Flask ) : match = re.match ( function_regex , string ) pytest.raises ( RuntimeError , locate_app , raise RuntimeError ( 'Failed to find application in module ' return Flask ( `` _ '' .join ( [ 'create_app3 ' , foo , bar ] ) ) `` script_info `` if so . Otherwise , calls the function without any arguments return app_factory ( * arguments , script_info=script_info ) new_error = NoAppException ( ' script_info argument automatically added if applicable ) . ' from __future__ import absolute_import , print_function def find_app_by_string ( string , script_info , module ) : app = call_factory ( app_factory , script_info , args ) else : pytest.raises ( NoAppException , locate_app , from flask import Flask raise NoAppException ( function_regex = r'^ ( ? P < name > \w+ ) ( ? : \ ( ( ? P < args > . * ) \ ) ) ? $ ' if args : return func ( ) NoAppException , locate_app , script_info , `` notanpp.py '' ) if 'script_info ' in arg_names : ' not be called with the specified arguments ( and a ' function=attr_name , module=module.__name__ 'Auto-detected `` { function } ( ) '' in module `` { module } '' , but ' return Flask ( 'create_app ' ) script_info , `` cliapp.factory : create_app2 ( 'foo ' , 'bar ' , ) '' script_info , `` cliapp.factory '' ) .name == `` create_app '' `` script_info `` or just a single argument and calls the function passing if callable ( app_factory ) :","['flask/cli.py', 'tests/test_apps/cliapp/factory.py', 'tests/test_cli.py']",Merge pull request # 2326 from HndrkMkt/ # 2264-handle-app-factory-in-FLASK_APP
287,63ddf2d47997299002cda290821909c02ca80675,2017-05-25 14:47:20-07:00,"One of the design ideas behind Flask is that there are at least two you have to have a reference to the application object in order to 'request-handling ' : Sometimes you are dealing with an application in a way that is similar to 1 . The application setup state , in which the application implicitly is it implicitly ends when the first request comes in . While the : class : ` Flask ` object is instantiated , and it implicitly ends when the while a request is active , the context local objects there being an active request . Consider , for instance , that you 're “ states ” in which code is executed . The application setup state in which different “ states ” in which code is executed : application is in this state , a few assumptions are true : any code can get hold of these objects at any time . One of the design ideas behind Flask is that there are two different modify it , there is no magic proxy that can give you a reference to no request handling happened so far first request comes in . While the application is in this state a few how you interact with applications during request handling , but without exist : the application object you 're currently creating or modifying . any code can get hold of these objects at any time . This state starts when the : class : ` Flask ` object is instantiated , and There is a third state which is sitting in between a little bit . how you interact with applications during request handling ; just that there command line application . modify it , there is no magic proxy that can give you a reference to 2 . In contrast , in the request handling state , a couple of other rules interactive Python shell and interacting with the application , or a is no request active . Consider , for instance , that you 're sitting in an sitting in an interactive Python shell and interacting with the 3 . There is also a third state somewhere in between 'module-level ' and on the module level . application , or a command line application . In contrast , during request handling , a couple of other rules exist : the application implicitly is on the module level . It starts when the you have to have a reference to the application object in order to assumptions are true : the programmer can modify the application object safely . while a request is active , the context local objects the application object you 're currently creating or modifying . no request handling happened so far Sometimes you are dealing with an application in a way that is similar to the programmer can modify the application object safely .",['docs/appcontext.rst'],Merge pull request # 1887 from zevaverbach/patch-1
288,c72e7c7c70f1553295022c70d5058ed11932c16a,2017-05-25 14:45:34-07:00,"def test_specify_url_scheme ( self ) : self.assert_equal ( rv.data , b'http : //xxx.example.com:1234/foo/ ' ) ctx = app.test_request_context ( url_scheme='https ' ) self.assert_equal ( ctx.request.url , 'http : //xxx.example.com:1234/foo/ ' ) app.config [ 'APPLICATION_ROOT ' ] = '/foo ' 'If `` base_url '' parameter is passed in , pass of ' \ : param url_scheme : a URL scheme ( default scheme is http ) app.testing = True : param subdomain : subdomain in case of testing requests handled by blueprint app_root = app.config.get ( 'APPLICATION_ROOT ' ) def test_blueprint_with_subdomain ( self ) : self.assert_equal ( ctx.request.url , 'https : //localhost/ ' ) bp = flask.Blueprint ( 'company ' , __name__ , subdomain='xxx ' ) if url_scheme is None : return flask.request.url def index ( ) : app.config [ 'SERVER_NAME ' ] = 'example.com:1234 ' with app.test_client ( ) as c : url_scheme=None , * args , * * kwargs ) : if subdomain : ' '' subdomain '' and/or `` url_scheme '' is meaningless . ' http_host = ' % s. % s ' % ( subdomain , http_host ) def make_test_environ_builder ( app , path='/ ' , base_url=None , * args , * * kwargs ) : http_host = app.config.get ( 'SERVER_NAME ' ) app_root = app.config.get ( 'APPLICATION_ROOT ' ) rv = c.get ( '/ ' , subdomain='xxx ' ) assert not ( base_url or subdomain or url_scheme ) \ or ( base_url is not None ) ! = bool ( subdomain or url_scheme ) , \ base_url = 'http : // % s/ ' % ( url.netloc or http_host or 'localhost ' ) app = flask.Flask ( __name__ ) ctx = app.test_request_context ( '/ ' , subdomain='xxx ' ) def make_test_environ_builder ( app , path='/ ' , base_url=None , subdomain=None , function accepts the same arguments ) . Additional arguments ( might be used only if ` base_url ` is not specified ) : url_scheme = 'http ' app.register_blueprint ( bp ) function accepts the same arguments plus two additional ) . http_host = app.config.get ( 'SERVER_NAME ' ) base_url = ' % s : // % s/ ' % ( url_scheme , url.netloc or http_host or 'localhost ' ) rv = c.get ( '/ ' , url_scheme='https ' ) self.assert_equal ( ctx.request.blueprint , bp.name ) self.assert_equal ( rv.data , b'https : //localhost/ ' )","['flask/app.py', 'flask/testing.py', 'flask/testsuite/testing.py']",Merge pull request # 1621 from Ostrovski/0.10-maintenance
289,3acec5f801864e8a6fbac759e45569950dec719d,2017-05-25 14:44:23-07:00,"Example : See also ` X-Frame-Options < https : //developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options > ` _ . This section contains a list of HTTP security headers supported by Flask . This enables your web server to authenticate with a client browser using a specific certificate key to prevent man-in-the-middle ( MITM ) attacks . Cookie Options HTTP Strict Transport Security ( HSTS ) Enhances security and prevents common web vulnerabilities such as cross-site scripting ( XSS ) and man-in-the-middle ( MITM ) related attacks . X-Frame-Options ( Clickjacking Protection ) Content-Security-Policy : default-src https : ; script-src 'nonce- { random } ' ; object-src 'none ' Prevents the client from clicking page elements outside of the website , avoiding hijacking or UI redress attacks . See also : See also ` Strict Transport Security < https : //developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security > ` _ . X-Frame-Options : SAMEORIGIN X-Content-Type-Options : nosniff See also ` X-Content-Type-Options < https : //developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options > ` _ . ` OWASP HTTP Only < https : //www.owasp.org/index.php/HttpOnly > ` _ . Content Security Policy ( CSP ) Redirects HTTP requests to HTTPS on all URLs , preventing man-in-the-middle ( MITM ) attacks . While these headers are not directly security related , they have important options that may affect your Flask application . To configure HTTPS and handle the headers listed below we suggest the package ` flask-talisman < https : //github.com/GoogleCloudPlatform/flask-talisman > ` _ . Set-Cookie : [ cookie-name ] = [ cookie-value ] Mozilla guide to ` HTTP cookies < https : //developer.mozilla.org/en-US/docs/Web/HTTP/Cookies # Secure_and_HttpOnly_cookies > ` _ . X-Frame-Options : ALLOW-FROM https : //example.com/ Strict-Transport-Security : max-age= < expire-time > ; preload Security Headers `` HttpOnly `` protects the contents of your cookie from being visible to XSS . X-Content-Type-Options See also ` Content Security Policy < https : //csp.withgoogle.com/docs/index.html > ` _ . HTTP Public Key Pinning ( HPKP ) Strict-Transport-Security : max-age= < expire-time > ; includeSubDomains .. sourcecode : : none `` Secure `` limits your cookies to HTTPS traffic only . Public-Key-Pins : pin-sha256= '' base64== '' ; max-age=expireTime [ ; includeSubDomains ] [ ; report-uri= '' reportURI '' ] This header prevents Cross-site scripting ( XSS ) by blocking requests on clients and forcing them to first read and validate the content-type before reading any of the contents of the request . See also ` Public Key Pinning < https : //developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning > ` _ . `` SameSite `` ensures that cookies can only be requested from the same domain that created them but this feature is not yet fully supported across all browsers . Strict-Transport-Security : max-age= < expire-time X-Frame-Options : DENY",['docs/security.rst'],Merge pull request # 2309 from aqt01/master
290,4eca29f68bba819494e91270ef27f9c2f4b57bb2,2017-05-25 14:36:06-07:00,"__import__ ( 'flask_theme_support ' ) [ submodule `` docs/_themes '' ] html_theme_path = [ '_themes ' ] Generic.Prompt : `` # 745334 '' , # class : 'gp ' Keyword.Declaration : `` bold # 004461 '' , # class : 'kd ' } Name.Function : `` # 000000 '' , # class : 'nf ' String.Doc : `` italic # 8f5902 '' , # class : 'sd ' - like a comment # because special names such as Name.Class , Name.Function , etc . Name.Variable.Instance : `` # 000000 '' , # class : 'vi ' - to be revised Generic.Error : `` # ef2929 '' , # class : 'gr ' Whitespace : `` underline # f8f8f8 '' , # class : ' w ' print ( 'If you want the Flask themes , run this command and build again : ' ) sys.path.append ( os.path.join ( os.path.dirname ( __file__ ) , '_themes ' ) ) String.Interpol : `` # 4e9a06 '' , # class : 'si ' Keyword.Constant : `` bold # 004461 '' , # class : 'kc ' # No corresponding class for the following : # are not recognized as such later in the parsing , we choose them Generic.Deleted : `` # a40000 '' , # class : 'gd ' class FlaskyStyle ( Style ) : Keyword : `` bold # 004461 '' , # class : ' k ' Name.Attribute : `` # c4a000 '' , # class : 'na ' - to be revised Name.Builtin.Pseudo : `` # 3465a4 '' , # class : 'bp ' print ( 'Install using ` pip install Flask-Sphinx-Themes ` . ' ) Name.Other : `` # 000000 '' , # class : 'nx ' Generic.Strong : `` bold # 000000 '' , # class : 'gs ' Comment.Preproc : `` noitalic '' , # class : 'cp ' background_color = `` # f8f8f8 '' Error : `` # a40000 border : # ef2929 '' , # class : 'err ' Literal : `` # 000000 '' , # class : ' l ' Keyword.Type : `` bold # 004461 '' , # class : 'kt ' Generic.Subheading : `` bold # 800080 '' , # class : 'gu ' print ( ) # flasky extensions . flasky pygments style based on tango style # to look the same as ordinary variables . Generic.Traceback : `` bold # a40000 '' , # class : 'gt ' Comment : `` italic # 8f5902 '' , # class : ' c ' styles = { print ( ' git submodule update -- init ' ) Name.Builtin : `` # 004461 '' , # class : 'nb ' print ( 'Warning : Flask themes unavailable . Building with default theme ' ) Generic.Output : `` # 888 '' , # class : 'go ' Keyword.Reserved : `` bold # 004461 '' , # class : 'kr ' String.Heredoc : `` # 4e9a06 '' , # class : 'sh ' Generic.Heading : `` bold # 000080 '' , # class : 'gh ' Name.Constant : `` # 000000 '' , # class : 'no ' - to be revised # Text : `` '' , # class : `` Generic.Inserted : `` # 00A000 '' , # class : 'gi ' Keyword.Namespace : `` bold # 004461 '' , # class : 'kn ' Punctuation : `` bold # 000000 '' , # class : ' p ' Generic.Emph : `` italic # 000000 '' , # class : 'ge ' pygments_style = 'flask_theme_support.FlaskyStyle ' print ( '- ' * 74 ) Operator : `` # 582800 '' , # class : ' o ' Name.Entity : `` # ce5c00 '' , # class : 'ni ' String.Single : `` # 4e9a06 '' , # class : 's1 ' String.Regex : `` # 4e9a06 '' , # class : 'sr ' Number , Operator , Generic , Whitespace , Punctuation , Other , Literal print ( 'Flask theme unavailable ; using the default theme . ' ) String.Symbol : `` # 4e9a06 '' , # class : 'ss ' Name.Property : `` # 000000 '' , # class : 'py ' Name.Class : `` # 000000 '' , # class : 'nc ' - to be revised __import__ ( 'flask_sphinx_themes ' ) Name.Variable.Class : `` # 000000 '' , # class : 'vc ' - to be revised Name.Tag : `` bold # 004461 '' , # class : 'nt ' - like a keyword String : `` # 4e9a06 '' , # class : 's ' path = docs/_themes String.Double : `` # 4e9a06 '' , # class : 's2 ' Operator.Word : `` bold # 004461 '' , # class : 'ow ' - like keywords Keyword.Pseudo : `` bold # 004461 '' , # class : 'kp ' Name.Decorator : `` # 888 '' , # class : 'nd ' - to be revised Generic : `` # 000000 '' , # class : ' g ' Other : `` # 000000 '' , # class ' x ' Name.Label : `` # f57900 '' , # class : 'nl ' from pygments.style import Style from pygments.token import Keyword , Name , Comment , String , Error , \ Name.Namespace : `` # 000000 '' , # class : 'nn ' - to be revised String.Char : `` # 4e9a06 '' , # class : 'sc ' Name.Exception : `` bold # cc0000 '' , # class : 'ne ' Subproject commit 3d964b660442e23faedf801caed6e3c7bd42d5c9 Number : `` # 990000 '' , # class : 'm ' Name.Variable.Global : `` # 000000 '' , # class : 'vg ' - to be revised String.Escape : `` # 4e9a06 '' , # class : 'se ' url = https : //github.com/mitsuhiko/flask-sphinx-themes.git Name : `` # 000000 '' , # class : ' n ' Name.Variable : `` # 000000 '' , # class : 'nv ' - to be revised # html_theme_path = [ '_themes ' ] Literal.Date : `` # 000000 '' , # class : 'ld ' String.Backtick : `` # 4e9a06 '' , # class : 'sb ' default_style = `` '' String.Other : `` # 4e9a06 '' , # class : 'sx '","['.gitmodules', 'docs/_themes', 'docs/conf.py', 'docs/flaskext.py']",Merge pull request # 2080 from pallets/sphinx_theme
291,cb94f4c5d3d4e1797207fd03d20d06c7bc0d05b4,2017-05-25 10:46:45-07:00,"def vary_cookie_header_set ( ) : from itsdangerous import BadSignature , URLSafeTimedSerializer expect ( '/vary-cookie-header-set ' ) def expect ( path , header_value='Cookie ' ) : response.headers [ 'Vary ' ] = updated_header response = flask.Response ( ) lower_value = value.lower ( ) response.headers [ 'Vary ' ] = 'Accept-Encoding , Accept-Language ' assert len ( rv.headers.get_all ( 'Vary ' ) ) == 1 header = response.headers.get ( 'Vary ' , `` ) import hashlib expect ( '/vary-header-set ' , 'Accept-Encoding , Accept-Language , Cookie ' ) def expect ( path , header=True ) : return response expect ( '/no-vary-header ' , None ) from flask.helpers import patch_vary_header patch_vary_header ( response , 'Cookie ' ) from base64 import b64encode , b64decode updated_header = ' , '.join ( headers ) if header : assert rv.headers [ 'Vary ' ] == 'Cookie ' import hashlib response.headers [ 'Vary ' ] = 'Cookie ' headers = [ h for h in ( h.strip ( ) for h in header.split ( ' , ' ) ) if h ] def patch_vary_header ( response , value ) : headers.append ( value ) if not any ( h.lower ( ) == lower_value for h in headers ) : `` `` '' Add a value to the `` Vary `` header if it is not already present . '' '' '' from .helpers import total_seconds , is_ip from base64 import b64decode , b64encode # The 'Vary ' key should exist in the headers only once . assert rv.headers [ 'Vary ' ] == header_value if header_value : from werkzeug.datastructures import CallbackDict response.headers.add ( 'Vary ' , 'Cookie ' ) from .helpers import is_ip , total_seconds expect ( '/no-vary-header ' , False ) from werkzeug.datastructures import CallbackDict def vary_header_set ( ) : flask.session [ 'test ' ] = 'test ' from itsdangerous import URLSafeTimedSerializer , BadSignature","['flask/helpers.py', 'flask/sessions.py', 'tests/test_basic.py']",Merge pull request # 2322 from nnja/dont_overwrite_vary_header
292,c5be20b53ca577be5569b1a327e88991f2ea69a0,2017-05-25 09:52:46-07:00,"Finally , untick the * PYTHONPATH * options ( * * E * * ) and give the configuration a In your PyCharm application , with your project open , click on * Run * .. image : : _static/pycharm-runconfig.png left and the name of the python file , or package on the right ( `` app.py `` for example ) . : align : center PyCharm , we can simply copy that configuration and alter the script argument so we have to do a few tweaks to get them working smoothly . : alt : screenshot of pycharm 's run configuration settings Now that we have on run configuration which implements `` flask run `` from within The new Flask CLI features aren ’ t yet fully integrated into the PyCharm IDE , to run a different cli command , e.g . `` flask shell `` . Binary files a/docs/_static/pycharm-runconfig.png and /dev/null differ we ’ re using for our project and within that folder we want to pick the `` flask `` There ’ s quite a few options to change , but don ’ t worry— once we ’ ve done it execute , in this example we use `` run `` which will run our development server . single tweak to give us access to other flask cli commands , including for one command , we can easily copy the entire configuration and make a good descriptive name , such as “ Run Flask Server ” and click * Apply * . PyCharm Integration you 're on Windows . our application file or package resides . : class : screenshot We need to add an environment variable ( * * C * * ) to identify our application . any custom ones you may implement yourself . file which will reside in the `` bin `` folder , or in the `` Scripts `` folder if screen similar to this : For the * Script * input ( * * A * * ) , we want to navigate to the virtual environment Next we need to set the working directory ( * * D * * ) to be the same folder where from the menu bar and go to * Edit Configurations * . You ’ ll be greeted by a The * Script Parameter * field ( * * B * * ) is set to the cli command you wish to Click on the browse button and add an entry with `` FLASK_APP `` on the","['docs/_static/pycharm-runconfig.png', 'docs/cli.rst']",Merge pull request # 2332 from doobeh/pycharm-config
293,e7cd68ba58b78309a342fbce68f6ef1edef3e5e5,2017-05-24 20:05:11-07:00,"def vary_cookie_header_set ( ) : self._patch_vary_cookie_header ( response ) expect ( '/vary-cookie-header-set ' ) def expect ( path , header_value='Cookie ' ) : response = flask.Response ( ) response.headers [ 'Vary ' ] = 'Accept-Encoding , Accept-Language ' assert len ( rv.headers.get_all ( 'Vary ' ) ) == 1 expect ( '/vary-header-set ' , 'Accept-Encoding , Accept-Language , Cookie ' ) def expect ( path , header=True ) : return response expect ( '/no-vary-header ' , None ) if not any ( h.lower ( ) == 'cookie ' for h in headers ) : if header : assert rv.headers [ 'Vary ' ] == 'Cookie ' response.headers [ 'Vary ' ] = 'Cookie ' # The 'Vary ' key should exist in the headers only once . assert rv.headers [ 'Vary ' ] == header_value headers.append ( 'Cookie ' ) if header_value : Add a 'Cookie ' value to the 'Vary ' header if one is not already present . `` `` '' header = response.headers.get ( 'Vary ' , `` ) headers = [ h.strip ( ) for h in header.split ( ' , ' ) if h ] response.headers.add ( 'Vary ' , 'Cookie ' ) response.headers [ 'Vary ' ] = updated_header expect ( '/no-vary-header ' , False ) flask.session [ 'test ' ] = 'test ' def _patch_vary_cookie_header ( self , response ) : def vary_header_set ( ) : updated_header = ' , '.join ( headers )","['flask/sessions.py', 'tests/test_basic.py']",Do n't overwrite Vary header when setting for cookie access # 2317
294,4ec1fbc9f52b4b3997a1978ab3390a5a1157ad6a,2017-05-24 17:27:36-07:00,"rv = client.get ( u'/ ? foo=정상처리'.encode ( 'euc-kr ' ) ) def test_jsonify_no_prettyprint ( app , req_ctx ) : compressed_msg = b ' { `` msg '' : { `` submsg '' : '' W00t '' } , '' msg2 '' : '' foobar '' } \n ' rv = c.get ( '/text_headers ' ) def test_before_first_request_functions ( app , client ) : def test_url_for_passes_special_values_to_build_error_handler ( ) : def test_response_types ( app , client ) : def test_aborting ( app ) : 'http : //localhost/hello/test % 20x ' app.testing = True def test_url_generation ( ) : client.get ( `` /fail '' ) `` msg '' : { `` submsg '' : `` W00t '' } , def test_subdomain ( app , client ) : def test_test_app_proper_environ ( ) : b ' { \n `` msg '' : { \n `` submsg '' : `` W00t '' \n } , \n `` msg2 '' : `` foobar '' \n } \n ' `` submsg '' : `` W00t '' def test_build_error_handler ( app ) : assert app.test_client ( ) .get ( '/ ' ) .data == b'Awesome ' client.post ( '/foo ' , data= { } ) rv = client.get ( '/ ' , 'http : //foo.localhost ' ) rv = flask.make_response ( def test_reuse_client ( client ) : assert client.get ( '/text ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) flask.jsonify ( { 'msg ' : 'W00t ' } ) , 400 ) def test_custom_converters ( app , client ) : flask.Response ( `` , headers= { 'Content-Type ' : 'text/html ' } ) , rv = app.test_client ( ) .get ( '/static/index.html ' ) assert c.get ( '/ ' ) .status_code == 500 assert rv.data == compressed_msg rv = c.get ( '/wsgi ' ) def test_response_types ( ) : def test_test_app_proper_environ ( app , client ) : c.get ( '/ ' ) } , `` msg2 '' : `` foobar '' c.get ( '/ ' ) assert c.post ( '/ ' ) .status_code == 405 def test_trapping_of_bad_request_key_errors ( app , client ) : app = flask.Flask ( __name__ ) with pytest.raises ( TypeError ) as e : def test_subdomain ( ) : `` submsg '' : `` W00t '' rv = c.get ( u'/киртест ' ) assert rv.headers [ ' X-Foo ' ] == 'bar ' rv = flask.make_response ( 'Awesome ' ) def test_session_transactions ( app , client ) : 400 , [ ( ' X-Foo ' , 'bar ' ) ] ) def test_inject_blueprint_url_defaults ( ) : assert rv.data == b'Awesome ' def test_before_first_request_functions ( ) : app.testing = False def test_route_decorator_custom_endpoint ( ) : def test_template_rendered ( app , client ) : def test_make_response_with_response_instance ( ) : meths = parse_set_header ( c.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) assert client.get ( '/foo ' ) .data == b'Meh ' def test_route_decorator_custom_endpoint ( app , client ) : if not hasattr ( c , 'redirect_client ' ) : assert rv.status_code == 404 def test_jsonify_mimetype ( app , req_ctx ) : rv = client.get ( '/ ' , 'http : //foo.localhost.localdomain ' ) assert rv.data == b '' c.post ( '/foo ' , data= { } ) client.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) def test_make_response_with_response_instance ( app , req_ctx ) : rv = app.test_client ( ) .get ( '/ ' ) def test_jsonify_prettyprint ( ) : rv = client.get ( '/full_tuple ' ) assert c.get ( '/1,2,3 ' ) .data == b ' 1|2|3 ' def test_inject_blueprint_url_defaults ( app ) : def test_aborting ( ) : rv = client.get ( '/response_status ' ) assert rv.status_code == 200 assert rv.data == compressed_msg flask.jsonify ( 'fake args ' , kwargs='fake ' ) def test_routing_redirect_debugging ( app , client ) : def test_nonascii_pathinfo ( ) : pretty_response = \ assert client.get ( '/1,2,3 ' ) .data == b ' 1|2|3 ' rv = client.post ( '/ ' , data= { } , follow_redirects=True ) def test_debug_mode_complains_after_first_request ( ) : use_reloader , propagate_exceptions ) : rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) rv = flask.make_response ( ) def test_preserve_only_once ( ) : def test_context_processing ( app , client ) : c.get ( `` /fail '' ) assert c.delete ( '/ ' ) .data == b'DELETE ' compressed_msg = { `` msg '' : { `` submsg '' : `` W00t '' } , `` msg2 '' : `` foobar '' } assert flask.url_for ( 'hello ' , name='test x ' , _external=True ) == \ def test_build_error_handler ( ) : assert c.get ( '/bar/ ' ) .data == b'bar ' resp = c.get ( '/ ' ) rv = app.test_client ( ) .get ( '/ ' ) assert client.delete ( '/ ' ) .data == b'DELETE ' rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost.localdomain ' ) flask.jsonify ( compressed_msg ) , 200 ) def test_modified_url_encoding ( self , app , client ) : rv = c.get ( '/ ' ) def test_static_files ( app , client ) : b ' { \n `` msg '' : { \n `` submsg '' : `` W00t '' \n } , \n `` msg2 '' : `` foobar '' \n } \n ' def test_make_response ( ) : assert rv.headers [ 'Content-Type ' ] == 'text/html ' def test_build_error_handler_reraise ( ) : rv = flask.make_response ( 'W00t ' , 404 ) assert rv.mimetype == 'application/json ' assert client.get ( '/bar/123 ' ) .data == b'123 ' rv = c.post ( '/foo ' , data= { } , follow_redirects=True ) rv = client.get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) def test_debug_log ( self , capsys , app , client ) : compressed_msg = b ' { `` msg '' : { `` submsg '' : '' W00t '' } , '' msg2 '' : '' foobar '' } \n ' rv = client.get ( '/getsession ' ) def test_before_first_request_functions_concurrent ( ) : flask.jsonify ( uncompressed_msg ) , 200 ) rv = c.get ( '/getsession ' ) rv = client.get ( '/response_headers ' ) flask.jsonify ( msg ) , 200 ) rv = client.get ( '/text_headers ' ) def test_full_url_request ( app , client ) : with app.test_request_context ( ) : compressed_msg = { `` msg '' : { `` submsg '' : `` W00t '' } , `` msg2 '' : `` foobar '' } def test_multiple_inheritance ( app ) : assert flask.url_for ( 'hello ' , name='test x ' ) == '/hello/test % 20x ' assert client.get ( '/ ' ) .data == b'Awesome ' use_reloader , propagate_exceptions , app ) : client.get ( `` / '' ) def test_routing_redirect_debugging ( ) : msg = { app.test_client ( ) .get ( '/ ' ) c.get ( '/fail ' ) rv = app.test_client ( ) .get ( u'/ ? foo=정상처리'.encode ( 'euc-kr ' ) ) assert 'behavior undefined ' in str ( e.value ) rv = c.get ( '/text_status ' ) uncompressed_msg = { assert c.get ( '/text ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) 400 , [ ( ' X-Foo ' , 'bar ' ) ] ) def test_view_inheritance ( app ) : def test_jsonify_no_prettyprint ( ) : with client : def test_static_files ( ) : c = app.test_client ( ) assert client.get ( '/ ' ) .data == b'GET ' assert rv.headers [ 'Content-Type ' ] == 'text/html ' `` msg '' : { rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost ' ) def test_debug_mode_complains_after_first_request ( app , client ) : assert client.get ( '/ ' ) .status_code == 404 with pytest.raises ( TypeError ) as e : assert rv.headers [ ' X-Foo ' ] == 'bar ' client.get ( '/ ' ) def test_context_processing ( app ) : def test_max_content_length ( ) : assert rv.data == b ' { `` msg '' : '' W00t '' } \n ' assert rv.data == b ' { `` msg '' : '' W00t '' } \n ' rv = c.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) rv = c.get ( '/full_tuple ' ) rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) assert flask.url_for ( 'hello ' , name='test x ' ) == '/hello/test % 20x ' assert rv.status_code == 200 def test_test_client_context_binding ( app , client ) : assert rv.mimetype == 'text/html ' rv = flask.make_response ( assert rv.mimetype == 'application/json ' def test_multiple_inheritance ( app , client ) : flask.jsonify ( uncompressed_msg ) , 200 ) assert client.get ( '/foo/ ' ) .data == b'foo ' c.get ( `` / '' ) def test_exception_logging ( self , app , client ) : app = flask.Flask ( __name__ ) pretty_response = \ assert rv.data == b'Awesome ' assert client.get ( '/bar/ ' ) .data == b'bar ' def test_reuse_client ( ) : client.get ( '/exc ' ) def test_jsonify_args_and_kwargs_check ( ) : response = c.get ( url ) } rv = client.get ( '/ ' , 'https : //localhost.localdomain ' ) `` msg '' : { `` submsg '' : `` W00t '' } , assert client.get ( '/bytes ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) assert rv.data == pretty_response rv = c.get ( '/response_headers ' ) msg = { flask.jsonify ( 'fake args ' , kwargs='fake ' ) rv = c.post ( 'http : //domain.com/action ? vodka=42 ' , data= { 'gin ' : 43 } ) resp = client.get ( '/other ' ) def test_jsonify_prettyprint ( app , req_ctx ) : c = client assert c.get ( '/bytes ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) assert flask.url_for ( 'hello ' , name='test x ' , _external=True ) == \ rv = client.get ( '/text_status ' ) assert rv.data == b '' c.get ( '/ ' ) def test_exception_propagation ( ) : client.get ( '/ ' ) rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) def test_nosubdomain ( app , client ) : assert c.get ( '/de/ ' ) .data == b'/de/about ' assert rv.data == pretty_response rv = client.head ( '/ ' ) def test_build_error_handler_reraise ( app ) : flask.Response ( `` ) , 400 ) def test_nosubdomain ( ) : def test_implicit_head ( app ) : rv = client.get ( '/wsgi ' ) rv = client.get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) def test_custom_converters ( ) : assert rv.data == b'W00t ' flask.Response ( `` , headers= { 'Content-Type ' : 'text/html ' } ) , assert rv.mimetype == 'application/vnd.api+json ' `` msg '' : { def test_view_decorators ( app ) : def test_debug_log ( self , capsys ) : def test_preserve_only_once ( app , client ) : def test_view_decorators ( app , client ) : def test_session_transactions ( app ) : rv = flask.make_response ( 'W00t ' , 404 ) response = client.get ( url ) c.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) assert c.get ( '/foo ' ) .data == b'/en/about ' rv = c.head ( '/ ' ) with c.session_transaction ( ) as sess : def test_implicit_head ( app , client ) : rv = client.post ( 'http : //domain.com/action ? vodka=42 ' , data= { 'gin ' : 43 } ) rv = client.get ( '/ ' ) rv = c.get ( '/foo ' , data= { } , follow_redirects=True ) resp = c.get ( '/other ' ) def test_template_test_with_template ( app ) : def test_max_content_length ( app , client ) : with app.test_client ( ) as c : rv = client.get ( u'/киртест ' ) def test_explicit_head ( app , client ) : rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) flask.Response ( `` ) , 400 ) rv = client.get ( '/ ' , 'https : //localhost.localdomain ' ) def test_test_client_calls_teardown_handlers ( app , client ) : assert c.get ( '/de/about ' ) .data == b'/foo ' rv = c.post ( '/ ' , data= { } , follow_redirects=True ) rv = flask.make_response ( ) client.get ( '/ ' ) def test_test_client_calls_teardown_handlers ( ) : assert rv.status_code == 404 with app.test_client ( ) as c : assert c.get ( '/bar/123 ' ) .data == b'123 ' def test_exception_logging ( self , app ) : def test_trapping_of_bad_request_key_errors ( app ) : resp = client.get ( '/ ' ) rv = flask.make_response ( 'Awesome ' ) assert client.get ( '/ ' ) .status_code == 500 c.get ( '/ ' ) c = app.test_client ( ) } assert rv.mimetype == 'application/vnd.api+json ' def test_full_url_request ( ) : def test_jsonify_mimetype ( ) : def test_jsonify_args_and_kwargs_check ( app , req_ctx ) : client.get ( '/ ' ) 'http : //localhost/hello/test % 20x ' assert rv.data == b'W00t ' rv = client.get ( '/foo ' , data= { } , follow_redirects=True ) rv = c.get ( '/ ' ) if not hasattr ( client , 'redirect_client ' ) : assert c.get ( '/ ' ) .status_code == 404 def test_url_processors ( app , client ) : def test_modified_url_encoding ( self , app ) : app.testing = True def test_explicit_head ( app ) : assert client.get ( '/fail ' ) .status_code == 400 assert c.get ( '/ ' ) .data == b'GET ' def test_url_processors ( ) : assert rv.status_code == 400 rv = client.get ( '/ ' ) def test_template_rendered ( ) : assert client.get ( '/de/about ' ) .data == b'/foo ' def test_view_inheritance ( app , client ) : flask.jsonify ( msg ) , 200 ) rv = c.get ( '/response_status ' ) rv = client.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) def test_test_client_context_binding ( ) : def test_before_first_request_functions_concurrent ( app , client ) : `` msg2 '' : `` foobar '' assert rv.status_code == 400 def test_template_test_with_template ( app , client ) : flask.jsonify ( { 'msg ' : 'W00t ' } ) , 400 ) with client as c : def test_remove_method_from_parent ( app , client ) : assert client.get ( '/foo ' ) .data == b'/en/about ' def test_exception_propagation ( app , client ) : client.get ( '/fail ' ) def test_remove_method_from_parent ( app ) : def test_url_for_passes_special_values_to_build_error_handler ( app ) : } , assert app.test_client ( ) .get ( '/foo ' ) .data == b'Meh ' uncompressed_msg = { assert 'behavior undefined ' in str ( e.value ) rv = client.post ( '/foo ' , data= { } , follow_redirects=True ) rv = client.get ( '/static/index.html ' ) c.get ( '/exc ' ) assert client.get ( '/de/ ' ) .data == b'/de/about ' def test_make_response ( app , req_ctx ) : assert c.get ( '/fail ' ) .status_code == 400 def test_nonascii_pathinfo ( app , client ) : assert c.get ( '/foo/ ' ) .data == b'foo ' def test_url_generation ( app , req_ctx ) : with client.session_transaction ( ) as sess : flask.jsonify ( compressed_msg ) , 200 ) with client : meths = parse_set_header ( client.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) assert rv.mimetype == 'text/html ' assert client.post ( '/ ' ) .status_code == 405","['tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_cli.py', 'tests/test_deprecations.py', 'tests/test_helpers.py', 'tests/test_regression.py', 'tests/test_signals.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_views.py']",More DRYing up the test suite ( # 2325 )
295,50c6df709800ac7504b71209564c8ce5b746d2b8,2017-05-24 17:00:20-07:00,"errors . It 's a good idea to add a function that initializes the database : file : ` flaskr.py ` . This file should be placed inside of the import statement , the export statement a few steps below would need to be errors . Lastly , you will add a method that allows for easy connections to the text-only entries and there are no feeds or comments , but it still if no such environment key is set . This import statement brings the application instance into the top-level initialize it with the config from the same file in : file : ` flaskr.py ` : : for this tutorial . Your directory structure will look like this : : how to run `` flaskr `` later on in this tutorial . For now go ahead and create creating the database schema as well as the main module . Create the `` setup.py `` file for `` flaskr `` with the following content : : of the application package . When it is time to run the application , the `` sqlite3 `` command as follows : : This import statement brings the application instance into the top-level database . : : view functions . You will need four of them ; Show Entries , Add New Entry , features everything you need to get started . We will use Flask and SQLite statements . After that there will be a few lines of configuration code . configuration setups . : meth : ` ~flask.Config.from_envvar ` can help achieve this . few steps you will be creating the database schema as well as the main module . ( In case you are on Windows you need to use `` set `` instead of `` export `` ) . tuples . The first several lines of code in the application module are the needed import to our application that initializes the database for you . To do this , you built-in to Python , so there is nothing else you need . While very simple , this example still features everything you need to get ( Scroll to the end of the page for more about project layout . ) read the : ref : ` installation ` section to set up your environment . import statement simplifies the location process . Without it the export https : //github.com/pallets/flask/tree/master/examples/flaskr/ file to make the : file : ` flaskr/flaskr ` directory a package . After these the address at which you can access it . decide to create ) . just below the ` connect_db ` function in : file : ` flaskr.py ` : : Flask development server needs the location of the app instance . This can create a function and hook it into a : command : ` flask ` command that from flask import ( Flask , request , session , g , redirect , url_for , abort , updated with new values . For now go ahead and create the applications directory structure . In the next You can create a simple database connection through SQLite and then tell The above installation command assumes that it is run within the projects projects root directory . You also need to add an : file : ` __init__.py ` how to run `` flaskr `` later on in this tutorial . possible to create a database with the : command : ` flask ` script : : import statement simplifies the location process . Without the above Create the follwing three HTML files and place them in the directly into the module . However , a cleaner solution is to create a separate the applications directory structure . In the next few steps you will be as well as the schema . Create the : file : ` MANIFEST.in ` and add the This allows the rows to be treated as if they were dictionaries instead of In this tutorial , we will create a simple blogging application . It only application with : : .. _example source : https : //github.com/pallets/flask/tree/master/examples/flaskr/ The downside of this is that it requires the `` sqlite3 `` command to be Lastly , add a method that allows for easy connections to the specified the chance to learn by example . In this tutorial , we will create a simple Do this on Mac or Linux with the following commands in `` flaskr/ `` : : Flask development server needs the location of the app instance . This supports one user , only allows text entries , and has no feeds or comments . the address at which you can access it in a browser . You want to develop an application with Python and Flask ? Here you have Such a schema can be created by piping the `` schema.sql `` file into the The content of the `` setup.py `` file for `` flaskr `` is : solution is to create a separate `` .ini `` or `` .py `` file , load that , and The above installation command assumes that it is run within the projects Before getting started , you will need to create the folders needed for this dictionary , so it can be updated with new values . for you , to the application . configuration setups . : meth : ` ~flask.Config.from_envvar ` can help achieve placed inside of the : file : ` flaskr/flaskr ` folder . Learn by example to develop an application with Python and Flask . To do this , you can create a function and hook it into a : command : ` flask ` Now , in a terminal , from the application root directory : file : ` flaskr/ ` it is creating two new files ; : file : ` setup.py ` and : file : ` MANIFEST.in ` in the # all the imports Now that the schema is in place , you can create the application module , a config file to be loaded . The silent switch just tells Flask to not complain the rows to be treated as if they were dictionaries instead of tuples . : file : ` flaskr/__init__.py ` containing only the following import statement : : : file : ` schema.sql ` file you created in the previous step , this file should be This can be used to open a connection on request and also from the To simplify locating the application , add the following import statement installed , which is not necessarily the case on every system . This also source code without having to reinstall the Flask app each time you make also requires that you provide the path to the database , which can introduce Now , it is possible to create a database with the : command : ` flask ` script : : environment key is set . Put the following templates into the : file : ` templates ` folder : root directory , ` flaskr/ ` . The ` editable ` flag allows editing statement a few steps below would need to be following the ` Python Packaging Guide ` _ . Presently this involves to be installed , which is not necessarily the case on every system . This requires that you provide the path to the database , which can introduce application module are the needed import statements . After that there will be a Create the : file : ` MANIFEST.in ` and add the following lines : : following lines : : creating two new files ; : file : ` setup.py ` and : file : ` MANIFEST.in ` in the Take a look at the code segment below . A good place to add this function , .. _example source : handy later . You can create a simple database connection through SQLite and Simply define the environment variable : envvar : ` FLASKR_SETTINGS ` that points to Instead of the `` sqlite3 `` command above , it 's a good idea to add a function `` .py `` file , load that , and import the values from there . else you need . However , the downside of this is that it requires the `` sqlite3 `` command and command , is just below the `` connect_db `` function in : file : ` flaskr.py ` : : projects root directory . You also need to add an : file : ` __init__.py ` changes . The flaskr app is now installed in your virtualenv ( see output import the values from there . With that said , go ahead and install the application with : : to be loaded . The silent switch just tells Flask to not complain if no such into this file , : file : ` flaskr/__init__.py ` : Login and Logout . Add the following code snipets to : file : ` flaskr.py ` . few lines of configuration code . For small applications like `` flaskr `` , it is .. sourcecode : : python environment variable : envvar : ` FLASKR_SETTINGS ` that points to a config file interactive Python shell or a script . This will come in handy later . If you want to do this ( not required for this tutorial ) simply define the Next , we will create the application module , : file : ` flaskr.py ` . Just like the from flask import Flask , request , session , g , redirect , url_for , abort , \ started . In addition to Flask , we will use SQLite for the database , which is With that said , from the `` flaskr/ `` directory , go ahead and install the command that initializes the database . For now just take a look at the file to make the : file : ` flaskr/flaskr ` directory a package . After these In the above code , the : class : ` ~flask.Config ` object works similarly to a possible to drop the configuration directly into the module . However , a cleaner of the application package . When it is time to run the application , the view functions . You will need four of them : initialize it with the config from the same file in : file : ` flaskr.py ` : It is recommended to install your Flask application within a virtualenv . Please as a database ( which comes out of the box with Python ) so there is nothing as well as the schema . also from the interactive Python shell or a script . This will come in render_template , flash ) microblogging application . It only supports one user that can create source code without having to reinstall the Flask app each time you make render_template , flash code segment below . A good place to add this function , and command , is Do this with the following commands : : Let 's continue building our code in the `` flaskr.py `` file . : file : ` flaskr/flaskr ` folder . The first several lines of code in the For this tutorial , all the Python code we use will be put into this file following the ` Python Packaging Guide ` _ . Presently this involves then tell it to use the : class : ` sqlite3.Row ` object to represent rows . Now that you have installed Flask , you will need to create the folders required ` sqlite3 ` command as follows : : ( except for one line in `` __init__.py `` , and any testing or optional files you The : class : ` ~flask.Config ` object works similarly to a dictionary , so it can be root directory , `` flaskr/ `` . The `` editable `` flag allows editing this . : : it to use the : class : ` sqlite3.Row ` object to represent rows . This allows ( In case you are on Windows you need to use ` set ` instead of ` export ` ) . Next , to simplify locating the application , create the file , application : : changes . The flaskr app is now installed in your virtualenv ( see output Such a schema could be created by piping the `` schema.sql `` file into the For small applications like `` flaskr `` , it is possible to drop the configuration specified database . This can be used to open a connection on request and initializes the database . : file : ` templates ` folder :","['docs/tutorial/dbcon.rst', 'docs/tutorial/dbinit.rst', 'docs/tutorial/folders.rst', 'docs/tutorial/index.rst', 'docs/tutorial/packaging.rst', 'docs/tutorial/setup.rst', 'docs/tutorial/templates.rst', 'docs/tutorial/views.rst']",Minor edits to tutorial for clarity . ( # 2330 )
296,471c7f3220f45f60a56515f9c1dc55c794b6ff36,2017-05-24 15:57:56-07:00,"deps = codecov python : 2.7 branch = True tox -e py- $ REQUIREMENTS pip install -e examples/patterns/largerapp `` 2.7 '' coverage report python : nightly deps = py { 36,27 , py } -release-simplejson lowest : Werkzeug==0.9 `` 3.4 '' `` 2.6 '' python : `` 3.6 '' flask pip install -e examples/flaskr testpaths = tests codecov deps = coverage usedevelop=true skip_install = true py { 36,35,34,33,27,26 , py } -release lowest : Werkzeug==0.7 except : # pytest-cov does n't seem to play nice with -p .tox/ * /lib/python * /site-packages/flask py { 36,33,27,26 , py } -lowest env : TOXENV=docs-html [ testenv : docs ] pip install -e examples/minitwit REQUIREMENTS=lowest-simplejson # Python 3 support currently does not work with lowest requirements pytest [ testenv : docs-linkcheck ] .tox/pypy/site-packages/flask REQUIREMENTS=release pytest > =3 python : `` 3.5 '' coverage deps= devel : https : //github.com/pallets/jinja/archive/master.tar.gz # the examples need to be installed to test successfully pip install tox python : `` 3.3 '' env : TOXENV=py-release-simplejson , codecov devel : https : //github.com/pallets/werkzeug/archive/master.tar.gz devel : git+https : //github.com/jek/blinker.git `` 3.6 '' envlist = { py26 , py27 , pypy } - { lowest , release , devel } { , -simplejson } , { py33 , py34 , py35 , py36 } - { release , devel } { , -simplejson } devel : git+https : //github.com/pallets/click.git envlist = python : 3.5 flask-sphinx-themes usedevelop = true commands = sphinx-build -W -b html -d { envtmpdir } /doctrees docs docs/_build/html minversion = 3.0 REQUIREMENTS=devel coverage-report passenv = CI TRAVIS TRAVIS_ * docs-html devel : git+https : //github.com/pallets/markupsafe.git devel : https : //github.com/pallets/markupsafe/archive/master.tar.gz blinker REQUIREMENTS=release-simplejson tox website env : TOXENV=py-release , codecov REQUIREMENTS=lowest env : 'Werkzeug > =0.7 ' , commands = env : TOXENV=py-lowest , codecov # We need to install those after Flask is installed . pip install -e examples/minitwit -q 'Werkzeug > =0.9 ' , REQUIREMENTS=devel-simplejson [ run ] release : blinker env : TOXENV=py-release lowest : blinker==1.0 pytest-cov devel : https : //github.com/pallets/itsdangerous/archive/master.tar.gz simplejson : simplejson [ testenv : coverage-report ] python : 3.3 devel : git+https : //github.com/pallets/itsdangerous.git python : 3.4 pip install tox devel : git+https : //github.com/pallets/jinja.git python : env : REQUIREMENTS=lowest-simplejson include : coverage combine pip py { 36,33,27,26 , py } -devel pip install -e examples/flaskr -q python : `` 3.4 '' pytest -- cov=flask -- cov-report html [ ] `` 3.3 '' pip install -e examples/patterns/largerapp -q cache : tests simplejson : simplejson env : REQUIREMENTS=lowest env : TOXENV=py-devel , codecov [ paths ] branches : coverage run -p -m pytest sphinx exclude : norecursedirs = . * * .egg * .egg-info env * artwork docs `` pypy '' `` 3.5 '' [ testenv : codecov ] python : pypy python : 2.6 coverage html commands = source = devel : https : //github.com/pallets/click/archive/master.tar.gz [ testenv : docs-html ] devel : git+https : //github.com/pallets/werkzeug.git python : 3.6","['.coveragerc', '.travis.yml', 'setup.cfg', 'setup.py', 'tox.ini']",Merge pull request # 2331 from davidism/less-travis
297,c62b614d9cbe813d7803c8ecfea2b7bf5a6eaab9,2017-05-23 17:31:44-07:00,"greenlets = [ ] assert flask.current_app == app def test_greenlet_context_copying_api ( self , app , client ) : assert result == 42 assert result == 42 assert flask.request.path == '/ ' result = greenlets [ 0 ] .run ( ) assert flask.current_app == app greenlets = [ ] @ flask.copy_current_request_context assert not flask.current_app reqctx = flask._request_ctx_stack.top.copy ( ) assert flask.request.args [ 'foo ' ] == 'bar ' assert flask.request.path == '/ ' assert rv.data == b'Hello World ! ' return 'Hello World ! ' assert rv.data == b'Hello World ! ' def test_greenlet_context_copying ( self , app , client ) : return 42 assert not flask.request def index ( ) : assert flask.request.args [ 'foo ' ] == 'bar ' assert flask.request.args [ 'foo ' ] == 'bar ' assert flask.current_app == app assert flask.request def test_greenlet_context_copying ( app , client ) : assert not flask.current_app assert flask.request.path == '/ ' greenlets.append ( greenlet ( g ) ) return 'Hello World ! ' assert flask.request rv = client.get ( '/ ? foo=bar ' ) return 42 rv = client.get ( '/ ? foo=bar ' ) greenlets.append ( greenlet ( g ) ) assert flask.request.args [ 'foo ' ] == 'bar ' def g ( ) : def test_greenlet_context_copying_api ( app , client ) : with reqctx : @ pytest.mark.skipif ( greenlet is None , reason='greenlet not installed ' ) assert not flask.request reqctx = flask._request_ctx_stack.top.copy ( ) @ app.route ( '/ ' ) def index ( ) : class TestGreenletContextCopying ( object ) : assert flask.request result = greenlets [ 0 ] .run ( ) assert flask.request.path == '/ ' with reqctx : assert flask.current_app == app assert flask.request def g ( ) :",['tests/test_reqctx.py'],Merge pull request # 2324 from rzelayafavila/2313-refactor-gevent-tests-into-class
298,849fc4b90c009d9bbbb604b2997d18340fb7ec2d,2017-05-23 17:14:57-07:00,"app_page_bytes = client.get ( '/ ' ) .data answer_page_bytes = client.get ( '/bp ' ) .data rv = client.get ( '/bp ' ) def test_template_global ( app ) : app = flask.Flask ( __name__ ) c = app.test_client ( ) def test_template_global ( ) : def test_context_processing ( app , client ) : def test_request_processing ( app , client ) : resp = app.test_client ( ) .get ( '/ ' ) .data def test_default_static_cache_timeout ( ) : def test_default_static_cache_timeout ( app ) : rv = app.test_client ( ) .get ( '/bp ' ) def test_app_request_processing ( app , client ) : def test_context_processing ( ) : resp = client.get ( '/ ' ) .data def test_request_processing ( ) : app_page_bytes = c.get ( '/ ' ) .data def test_app_request_processing ( ) : answer_page_bytes = c.get ( '/bp ' ) .data",['tests/test_blueprints.py'],Merge pull request # 2323 from dawran6/test-fixture
299,89aaac7fe00f1d8fb2f326310bf813430fe0d3bb,2017-05-23 17:14:23-07:00,"def add_language_code ( endpoint , values ) : def test_app_url_processors ( app , client ) : flask.g.lang_code = values.pop ( 'lang_code ' ) return flask.url_for ( 'about ' ) assert client.get ( '/de/about ' ) .data == b'/de/ ' assert client.get ( '/de/ ' ) .data == b'/de/about ' app.register_blueprint ( bp ) # Register app-wide url defaults and preprocessor on blueprint bp = flask.Blueprint ( 'bp ' , __name__ ) values.setdefault ( 'lang_code ' , flask.g.lang_code ) def pull_lang_code ( endpoint , values ) : def index ( ) : def about ( ) : return flask.url_for ( 'index ' ) # Register route rules at the app level",['tests/test_blueprints.py'],Merge pull request # 2321 from dawran6/test-bp-url
300,39f7aaa41678bbd110365a55453dd5e395655bb8,2017-05-23 16:24:29-07:00,"parameter named `` script_info `` , the `` ScriptInfo `` object will be passed . def find_best_app ( module ) : app = app_factory ( ) and returns the result . arguments = getargspec ( func ) .args def locate_app ( app_id ) : work with the `` flask `` command . If they take a single parameter or a return func ( script_info=script_info ) assert find_best_app ( script_info , Module ) == Module.application assert isinstance ( find_best_app ( script_info , Module ) , Flask ) def create_app ( ) : from inspect import getargspec assert find_best_app ( script_info , Module ) == Module.app if 'script_info ' in arguments : pytest.raises ( NoAppException , find_best_app , Module ) assert locate_app ( script_info , `` cliapp.app '' ) .name == `` testapp '' rv = call_factory ( self.create_app , self ) app = call_factory ( app_factory , script_info ) assert isinstance ( find_best_app ( Module ) , Flask ) assert locate_app ( `` cliapp.multiapp : app1 '' ) .name == `` app1 '' script_info = ScriptInfo ( ) return Flask ( 'appname ' ) def create_app ( foo , bar ) : assert find_best_app ( Module ) == Module.application from inspect import getfullargspec as getargspec return func ( ) pytest.raises ( RuntimeError , locate_app , `` cliapp.app : notanapp '' ) ( ` # 2319 ` _ ) from ._compat import getargspec def create_app ( foo=None , script_info=None ) : pytest.raises ( NoAppException , find_best_app , script_info , Module ) pytest.raises ( NoAppException , locate_app , `` cliapp/app '' ) return func ( script_info ) def create_app ( foo ) : app = find_best_app ( script_info , mod ) assert locate_app ( script_info , `` cliapp.multiapp : app1 '' ) .name == `` app1 '' class Module : Factory functions are not required to take a `` script_info `` parameter to `` `` '' Checks if the given app factory function has an argument named pytest.raises ( NoAppException , locate_app , `` notanpp.py '' ) app = find_best_app ( mod ) assert find_best_app ( Module ) == Module.app assert find_best_app ( script_info , Module ) == Module.myapp assert find_best_app ( script_info , Module ) .name == 'appname ' script_info , `` cliapp.importerrorapp '' ) script_info , `` cliapp.app : notanapp '' ) rv = locate_app ( self.app_import_path ) elif len ( arguments ) == 1 : `` `` '' def locate_app ( script_info , app_id ) : assert locate_app ( script_info , `` cliapp.app : testapp '' ) .name == `` testapp '' def call_factory ( func , script_info ) : assert find_best_app ( Module ) == Module.myapp pytest.raises ( NoAppException , locate_app , script_info , `` notanpp.py '' ) script_info , `` cliapp/app '' ) assert locate_app ( `` cliapp.app '' ) .name == `` testapp '' pytest.raises ( NoAppException , locate_app , `` cliapp.importerrorapp '' ) rv = locate_app ( self , self.app_import_path ) assert locate_app ( `` cliapp.app : testapp '' ) .name == `` testapp '' def create_app ( foo ) : .. _ # 2319 : https : //github.com/pallets/flask/pull/2319 rv = self.create_app ( self ) pytest.raises ( RuntimeError , locate_app , assert find_best_app ( Module ) .name == 'appname ' def find_best_app ( script_info , module ) : `` script_info `` or just a single argument and calls the function passing `` script_info `` if so . Otherwise , calls the function without any arguments","['CHANGES', 'flask/_compat.py', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2319 from HndrkMkt/ # 2266-support-create-app-without-script-info
301,701faf0724d8aa18d7ed2907b63c143725dd3e7d,2017-05-23 16:20:59-07:00,"'click > =2.0 ' , 'click > =4.0 ' , devel : git+https : //github.com/pallets/click.git lowest : Click==4.0 devel : git+https : //github.com/pallets/markupsafe.git","['setup.py', 'tox.ini']",Merge pull request # 2320 from markshannon/fix-click-dependency-info
302,898c8621b175ade4c623ec61d04f24e02c05e0e6,2017-05-23 15:33:59-07:00,"C : \path\to\app > set FLASK_APP=hello.py And on PowerShell : : If you are on Windows , the environment variable syntax depends on command line PS C : \path\to\app > $ env : FLASK_APP = `` hello.py '' If you are on Windows you need to use `` set `` instead of `` export `` . interpreter . On Command Prompt : :",['docs/quickstart.rst'],Merge pull request # 2315 from leviroth/powershell-docs
303,5b0b9717da958fd6325c675d92be4f6667796112,2017-05-23 15:18:39-07:00,"def test_disallow_string_for_allowed_methods ( ) : rv = app.send_static_file ( 'index.html ' ) app.config [ 'SERVER_NAME ' ] = 'localhost.localdomain:3000 ' assert rv == ' '' \\u003c ! -- \\u003cscript\\u003e '' ' import pytest def test_original_win ( ) : def test_baseexception_error_handling ( app , client ) : def test_session_ip_warning ( recwarn , app , client ) : def test_http_error_subclass_handling ( ) : assert not flask.session.modified flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename='filename ' ) def test_route_decorator_custom_endpoint_with_dots ( ) : ( 'localhost ' , None , 'localhost ' , 8080 ) , client.get ( '/success ' ) assert client.get ( '/foo/ ' ) .data == b'index ' rv = client.get ( url ) def test_session_transaction_needs_cookies ( app ) : rv = flask.send_file ( 'static/index.html ' ) def test_user_error_handling ( app , client ) : 'http : //foo.localhost.localdomain:5000/ ' assert rv == ' '' \\u003c\\u0000/script\\u003e '' ' rv = client.open ( '/ ' ) content_type='application/json ' ) assert resp.data == b'internal server error ' def test_json_attr ( self ) : def test_original_win ( app , client ) : assert value == 'attachment ' rv = client.open ( '/ ' , method='OPTIONS ' ) rv = c.get ( '/admin/ ' ) def test_streaming_with_context_as_decorator ( self , app , client ) : def test_request_context_means_app_context ( app ) : 'If-Range ' : http_date ( last_modified ) } ) with open ( os.path.join ( app.root_path , 'static/index.html ' ) ) as f : rv = c.get ( '/ ? name=World ' ) assert not flask.session.modified assert rv.mimetype == 'text/html ' assert c.get ( '/get ' ) .data == b'42 ' assert c.get ( '/page/2 ' ) .data == b ' 2 ' rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/ ' ) rv = c.options ( '/ ' ) data= { ' x ' : [ `` foo '' , `` bar '' , `` baz ' '' ] } ) assert rv == u ' '' \u2603 '' ' rv = flask.send_file ( f , mimetype='text/plain ' ) def test_send_file_range_request ( self ) : assert options [ 'filename ' ] == 'index.html ' def test_streaming_with_context ( self , app , client ) : assert client.get ( '/3 ' ) .data == b'apple ' rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=1000- ' } ) app.testing = True rv = flask.send_file ( f , as_attachment=True , assert flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) == ' < test > Mail ' res = client.get ( '/ ' ) assert rv.data == f.read ( ) assert client.get ( '/1/bar ' ) .data == b'23 ' def test_post_empty_json_adds_exception_to_response_content_in_debug ( self ) : def test_app_tearing_down_with_previous_exception ( app ) : def test_session_using_server_name_and_port ( ) : def test_template_test ( ) : } with client.session_transaction ( ) : flask.send_from_directory ( 'static ' , 'bad\x00 ' ) def test_iterable_loader ( ) : def test_dotted_names_from_app ( ) : c.environ_base [ 'HTTP_USER_AGENT ' ] = 'Bar ' assert rv == expected def test_session_using_server_name ( app , client ) : def test_route_decorator_custom_endpoint_with_dots ( app , client ) : def make_response ( self , rv ) : def test_disallow_string_for_allowed_methods ( app ) : def client ( app ) : def test_session ( ) : rv = flask.send_file ( 'static/index.html ' ) def test_remove_method_from_parent ( ) : assert client.get ( '/2/bar ' ) .data == b'19 ' assert 'foo ' in flask.g assert client.get ( '/decorator ' ) .data == b'boom ' def test_multiple_inheritance ( ) : assert cc.max_age == 3600 value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) rv = flask.url_for ( 'static ' , filename='index.html ' , _external=True ) def test_json_dump_to_file ( self ) : assert flask.g.user_agent == 'Bar ' testing = True def test_context_test ( app ) : rv = client.get ( '/ ? foo=42 ' ) def test_url_for_with_alternating_schemes ( self , app , req_ctx ) : def test_context_test ( ) : def test_url_for_with_scheme_not_external ( self , app , req_ctx ) : def test_add_template_test ( ) : def test_url_for_with_scheme ( self , app , req_ctx ) : def test_method_based_view ( app ) : `` `` '' Generate egg from package name inside base and put the egg into def test_jsonify_basic_types ( self , test_value , app , client ) : rv.close ( ) def test_environ_base_modified ( app , client , app_ctx ) : def test_send_file_object_without_mimetype ( self ) : ( ( '/ .. ' , ) , '/ .. ' ) , flask.g.bar = 42 def test_send_file_regular ( self , app , req_ctx ) : ' { { foo } } ' ) assert c.get ( '/py/bar/foo ' ) .data == b'bp.bar_foo ' assert client.get ( '/be ' ) .data.strip ( ) == b'/fe ' def test_flashes ( app , req_ctx ) : # Test again with direct use of send_file utility . def test_session_stored_last ( ) : assert ' x-sendfile ' not in rv.headers client.get ( '/test_filters/ ' ) assert flask.url_for ( 'index ' , _external=True , _scheme='https ' ) == 'https : //localhost/ ' rv = app.test_client ( ) .open ( '/ ' , method='OPTIONS ' ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , 'If-Range ' : http_date ( with pytest.raises ( KeyError ) : c.get ( '/fail ' ) return app.test_client ( ) ( 'localhost ' , 80 , 'localhost ' , 80 ) , c.get ( '/ ' ) def test_empty_url_defaults ( ) : c.get ( '/ ' ) with c.session_transaction ( ) : rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost/ ' ) pretty_response =\ def test_template_filter_with_name_and_template ( app , client ) : rv = c.post ( '/json ' , data= ' '' foo '' ' , content_type='application/x+json ' ) assert client.post ( '/set ' , data= { 'value ' : '42 ' } ) .data == b'value set ' assert flask.g.pop ( 'bar ' , 'more cake ' ) == 'more cake ' assert list ( flask.get_flashed_messages ( ) ) == [ 'Zap ' , 'Zip ' ] def test_blueprint_specific_error_handling ( ) : assert client.get ( '/2/foo ' ) .data == b'19/42 ' rv = c.open ( '/options ' , method='OPTIONS ' ) def test_jsonify_dicts ( self , app , client ) : `` filename * =UTF-8 '' % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt '' app = flask.Flask ( __name__ ) def test_redirect_keep_session ( app , client , app_ctx ) : flask.g.setdefault ( 'bar ' , 'hello world ' ) assert c.get ( '/nope ' ) .data == b'you shall not pass ' app.use_x_sendfile = True assert flask.g.get ( ' x ' ) is None def test_jsonify_uuid_types ( self , app , client ) : def test_json_customization ( self ) : client.get ( '/test_filters_without_returning_categories/ ' ) with pytest.raises ( KeyboardInterrupt ) : def test_streaming_with_context_as_decorator ( self ) : def test_error_handling_processing ( ) : flask.g.pop ( 'bar ' ) app.use_x_sendfile = False assert ' x-sendfile ' in rv.headers rv = render ( ' { { `` & '' |tojson } } ' ) assert flask.url_for ( 'index ' , _external=True , _scheme='https ' ) == 'https : //localhost/ ' def test_jsonify_arrays ( self , app , client ) : assert resp.mimetype == 'text/x-special ' def test_streaming_with_context_and_custom_close ( self ) : secret_key = __name__ assert c.get ( '/3 ' ) .data == b'apple ' def test_template_test_with_name_and_template ( ) : def test_g_iteration_protocol ( app_ctx ) : app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : def test_error_handler_subclass ( ) : def test_context_binding ( ) : assert client.get ( '/frontend-no ' ) .data == b'frontend says no ' assert c.get ( '/py/bar ' ) .data == b'bp.bar ' assert flask.g.user_agent == 'werkzeug/ ' + werkzeug.__version__ assert 'foo ' not in flask.g assert options [ 'filename ' ] == 'index.txt ' def test_escaping ( ) : with pytest.raises ( BadRequest ) : sys.path . '' '' '' assert flask.g.user_agent == 'Bar ' def test_json_body_encoding ( self , app , client ) : data= { ' x ' : [ `` foo '' , `` bar '' , `` baz ' '' ] } ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-1000 ' } ) c.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.1 ' flask.g.bar = 42 app.testing = False def test_request_module ( self , recwarn ) : def test_session_vary_cookie ( ) : rv = flask.send_file ( f , mimetype='application/octet-stream ' ) def test_route_decorator_custom_endpoint ( ) : def test_json_as_unicode ( self , test_value , expected , app , app_ctx ) : # Test with static file handler . def test_escaping_without_template_filename ( ) : def test_session ( app , client ) : def test_options_work ( app , client ) : assert rv == 'Hello Special World 42 ' ( None , None , 'pocoo.org ' , 8080 ) , 'filename= '' Nandu/pinguino.txt '' ' , app.config [ 'SERVER_NAME ' ] = 'localhost ' def test_jsonify_date_types ( self ) : assert resp.data == b'internal server error ' 'context_template.html ' ] , rv = client.get ( path ) assert c.get ( '/frontend-no ' ) .data == b'frontend says no ' rv = c.get ( '/admin/static/css/test.css ' ) client.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.1 ' assert resp.mimetype == 'text/x-special ' def test_json_key_sorting ( self ) : def test_session_special_types ( app , client ) : assert client.get ( '/py/foo ' ) .data == b'bp.foo ' rv = render ( `` < a ng-data= ' { { data|tojson } } ' > < /a > '' , attachment_filename='index.txt ' , rv = client.post ( '/json ' , data=None , content_type='application/json ' ) def test_route_decorator_custom_endpoint ( app , client ) : def test_debug_log_override ( self , app ) : assert flask.url_for ( 'index ' , _anchor= ' x y ' ) == '/ # x % 20y ' def test_template_filter_with_name ( app ) : flask.flash ( 'Zip ' ) attachment_filename='index.html ' ) rv = flask.json.dumps ( u'\N { SNOWMAN } ' ) flask.url_for , def test_run_server_port ( monkeypatch , app ) : def test_add_template_filter ( app ) : assert flask.g.get ( ' x ' ) == 42 assert sorted ( flask.g ) == [ 'bar ' , 'foo ' ] assert c.get ( '/bp_prefix/bar ' ) .status_code == 404 assert c.get ( '/2/bar ' ) .data == b'19 ' def test_send_from_directory_bad_request ( self ) : def test_teardown_with_handled_exception ( ) : def test_session_cookie_setting ( app ) : def test_teardown_request_handler ( app , client ) : `` `` '' A tmpdir added to sys.path . '' '' '' ( 'localhost ' , None , 'localhost ' , 8080 ) , def test_exception_logging ( self ) : def test_json_body_encoding ( self ) : flask.flash ( 'Zap ' ) f = PyStringIO ( 'Test ' ) def test_error_handler_blueprint ( app ) : assert client.get ( '/py/bar/foo ' ) .data == b'bp.bar_foo ' assert 'filename * ' not in rv.headers [ 'Content-Disposition ' ] flask.session.modified = False assert c.get ( '/2 ' ) .data == b'apple ' def test_send_from_directory ( self , app , req_ctx ) : def test_add_template_test_with_name_and_template ( ) : compressed_msg = { `` msg '' : { `` submsg '' : `` W00t '' } , `` msg2 '' : `` foobar '' } def test_standard_context ( app , client ) : assert flask.url_for ( 'myview ' , _method='GET ' ) == '/myview/ ' def test_add_template_test_with_name ( app ) : assert rv == u ' '' \\u003c/script\\u003e '' ' def test_url_for_with_anchor ( self , app , req_ctx ) : 'index ' , ' h ' : [ 'test list ' , 10 , False ] , c.environ_base [ 'HTTP_USER_AGENT ' ] = 'Foo ' os.path.join ( app.root_path , 'static/index.html ' ) c.get ( '/test_filters_without_returning_categories/ ' ) rv = flask.url_for ( 'static ' , filename='index.html ' , _external=True ) assert rv.mimetype == 'application/octet-stream ' # __contains__ def test_environ_base_default ( app , client , app_ctx ) : rv = client.post ( '/ ' , data=flask.json.dumps ( { def test_session_using_application_root ( ) : def test_provide_automatic_options_kwarg ( ) : import flask def test_teardown_request_handler_debug_mode ( app , client ) : def test_blueprint_specific_user_error_handling ( ) : assert c.get ( '/more ' ) .data == b'GET ' def test_environ_defaults_from_config ( ) : rv = flask.send_from_directory ( 'static ' , 'hello.txt ' ) assert flask.url_for ( 'myview ' , id=42 , _method='GET ' ) == '/myview/42 ' sys.path '' ' pretty_response = \ def test_modified_url_encoding ( self ) : def test_ignore_cached_json ( self ) : def test_blueprint_specific_user_error_handling ( app , client ) : assert content_disposition == set ( ( assert client.post ( '/more ' ) .data == b'POST ' def test_session_localhost_warning ( recwarn , app , client ) : def test_subdomain_matching_with_ports ( app , client ) : # get assert rv.data == b'/test/ ' flask.send_from_directory ( 'static ' , 'bad\x00 ' ) assert macro ( 'World ' ) == 'Hello World ! ' flask.g.x = 42 compressed_msg = { `` msg '' : { `` submsg '' : '' W00t '' } , '' msg2 '' : '' foobar '' } def test_multi_route_rules ( app , client ) : rv = client.open ( '/more ' , method='OPTIONS ' ) def test_remove_method_from_parent ( app ) : with app.app_context ( ) : rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=1000- ' } ) assert flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) == \ lines = app.test_client ( ) .get ( '/ ' ) .data.splitlines ( ) def test_json_custom_mimetypes ( self ) : ( None , None , 'pocoo.org ' , 8080 ) , return getattr ( self._io , name ) def test_proper_test_request_context ( ) : def test_template_test_with_template ( ) : def test_modified_url_encoding ( self , app ) : def test_implicit_head ( app ) : flask.g.foo = 23 rv = c.get ( path ) rv = client.post ( '/json ' , data='malformed ' , content_type='application/json ' ) def test_method_based_view ( ) : with pytest.raises ( BadRequest ) : resp = client.get ( '/ ' , data=u ' '' Hällo Wörld '' '.encode ( 'iso-8859-15 ' ) , rv = render ( ' { { `` & '' |tojson } } ' ) def test_url_mapping ( app , client ) : assert c.get ( '/foo/bar ' ) .data == b'bar ' assert c.get ( '/1/foo ' ) .data == b'23/42 ' rv = flask.json.dumps ( u'\N { SNOWMAN } ' ) ) ) assert client.get ( '/foo/bar ' ) .data == b'bar ' client.environ_base [ 'HTTP_USER_AGENT ' ] = 'Foo ' def test_jsonify_arrays ( self ) : assert 'no filename is available ' in str ( excinfo ) assert c.get ( '/py/foo ' ) .data == b'bp.foo ' def test_post_empty_json_wont_add_exception_to_response_if_no_debug ( self , app , client ) : def test_blueprint_json_customization ( self ) : def test_options_on_multiple_rules ( ) : def test_basic_view ( ) : content_type='application/json ' ) def test_template_escaping ( self ) : def test_template_filter_after_route_with_template ( app , client ) : def test_custom_app_ctx_globals_class ( ) : def test_error_handling_processing ( app , client ) : rv = client.get ( '/forbidden ' ) flask.url_for , rv = c.get ( '/error ' ) def test_teardown_with_handled_exception ( app ) : def test_jsonify_basic_types ( self , test_value ) : rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/foo ' ) def test_teardown_request_handler ( ) : value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) def test_add_template_filter_with_name ( ) : 'simple_template.html ' , # should render this assert not recwarn.list def test_attachment ( self ) : def test_request_json ( self , recwarn ) : def test_json_key_sorting ( self , app , client ) : assert not recwarn.list , '\n'.join ( str ( w.message ) for w in recwarn.list ) a=0 , b=23 , c=3.14 , d='t ' , e='Hi ' , f=True , g=False , def test_template_test_with_name_and_template ( app , client ) : resp = c.get ( '/ ' ) def test_session_using_application_root ( app , client ) : rv = app.test_client ( ) .get ( '/ ' ) assert c.get ( '/fe2 ' ) .data.strip ( ) == b'/fe ' def test_custom_template_loader ( client ) : pytest.raises ( ValueError , def test_url_with_method ( self , app , req_ctx ) : assert rv == test_data assert client.get ( '/fe2 ' ) .data.strip ( ) == b'/fe ' rv = render ( ' { { `` < /script > '' |tojson } } ' ) rv = client.get ( '/admin/static/css/test.css ' ) assert content_disposition == set ( ( assert client.get ( '/ ' ) .data == b ' 1 ' def test_add_template_test_with_name_and_template ( app , client ) : ( None , 80 , 'pocoo.org ' , 80 ) , c.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.0 ' def test_clean_pop ( ) : def test_baseexception_error_handling ( ) : rv = flask.send_from_directory ( 'static ' , 'hello.txt ' ) def test_session_transactions ( ) : rv = c.get ( '/ ' , 'http : //test.localhost/ ' ) rv = render ( `` < a ng-data= ' { { data|tojson } } ' > < /a > '' , rv = c.get ( '/ ' ) rv = flask.json.load ( out ) ' { { foo } } ' , foo= ' < test > ' ) == ' & lt ; test & gt ; ' def test_json_dump_to_file ( self , app , app_ctx ) : def test_trapping_of_all_http_exceptions ( app , client ) : '/static/index.html ' def test_add_template_filter_with_name ( app ) : def test_trapping_of_bad_request_key_errors ( ) : # Test again with direct use of send_file utility . flask.g.foo = 'bar ' # __iter__ def test_context_binding ( app ) : rv = c.options ( '/more ' ) def test_app_context_provides_current_app ( ) : { 'test ' : 'dict ' } with app.open_resource ( 'static/index.html ' ) as f : assert flask.render_template_string ( with app.open_resource ( 'static/index.html ' ) as f : if rv is None : ) def test_send_file_last_modified ( self , app , client ) : def test_error_handler_http_subclass ( ) : assert c.get ( '/function ' ) .data == b'bam ' def test_session_expiration ( app , client ) : assert options [ 'filename ' ] == 'index.html ' rv = client.get ( '/ ' ) rv = app.test_client ( ) .get ( '/ ' ) def test_streaming_with_context_and_custom_close ( self , app , client ) : assert called == [ 'conftest ' , 'TEARDOWN ' ] 'context_template.html ' ] , def test_basic_url_generation ( ) : def test_dotted_names_from_app ( app , client ) : 'index ' , assert list ( flask.g ) == [ 'foo ' ] def test_blueprint_url_processors ( ) : def req_ctx ( app ) : assert c.get ( '/de/about ' ) .data == b'/de/ ' rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4- ' } ) assert rv.mimetype == 'text/html ' parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) req = flask.request._get_current_object ( ) def test_templates_auto_reload ( ) : assert rv == ' < a ng-data=\ ' { `` x '' : [ `` foo '' , `` bar '' , `` baz\\u0027 '' ] } \ ' > < /a > ' flask.flash ( 'Zap ' ) def test_run_defaults ( monkeypatch , app ) : def test_jsonify_dicts ( self ) : d = { ' a ' : 0 , ' b ' : 23 , ' c ' : 3.14 , 'd ' : 't ' , def test_static_file ( self ) : app.use_x_sendfile = True assert ' x-sendfile ' in rv.headers # setdefault rv = app.test_client ( ) .get ( '/ ' , 'http : //www.example.com:8080/test/ ' ) _scheme='https ' ) h= [ 'test list ' , 10 , False ] , def test_session_transaction_needs_cookies ( ) : content_disposition = set ( rv.headers [ 'Content-Disposition ' ] .split ( ' ; ' ) ) res = c.get ( '/ ' ) assert client.get ( '/ ' ) .data == b'index ' with app.test_request_context ( ) : def test_custom_app_ctx_globals_class ( app ) : i= { 'test ' : 'dict ' } assert req is flask.request._get_current_object ( ) assert rv == u ' '' \\u003c/script\\u003e '' ' c.post ( '/ ' , data= ' { `` spam '' : 42 } ' , content_type='application/json ' ) 'http : //localhost.localdomain:5000/ ' rv = flask.render_template_string ( 'Hello { { config.WORLD_NAME } } ' rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com/ ' ) assert ' x-sendfile ' not in rv.headers ( ( '/ .. ' , ) , '/ .. ' ) , def test_after_request_processing ( app , client ) : client.get ( '/fail ' ) def test_preserve_remembers_exception ( app , client ) : with app.app_context ( ) : assert sorted ( flask.g ) == [ 'bar ' , 'foo ' ] rv.close ( ) ' { { foo } } ' ) rv = client.get ( '/admin/static/test.txt ' ) rv = client.delete ( '/more ' ) def test_extended_flashing ( app ) : rv = c.get ( '/ ' , headers= { 'Range ' : 'somethingsomething ' } ) assert client.get ( '/get ' ) .data == b'42 ' # get app = Flask ( __name__ ) def test_json_bad_requests ( self , app , client ) : def test_url_for_with_scheme_not_external ( self ) : rv = flask.send_file ( f , mimetype='text/html ' ) assert c.get ( '/backend-no ' ) .data == b'backend says no ' def test_ignore_cached_json ( self , app ) : rv = c.post ( '/ ' , data=flask.json.dumps ( { rv = flask.json.load ( out ) assert rv.data == b'http : //example.com:1234/foo/ ' assert rv.data == b'Test ' def test_error_handling ( app , client ) : rv = app.test_client ( ) .get ( '/ ' ) .data rv = client.get ( '/ ' , 'http : //mitsuhiko.localhost.localdomain/ ' ) app.use_x_sendfile = False def __init__ ( self , * args , * * kwargs ) : def test_view_decorators ( app ) : rv = client.options ( '/more ' ) def test_add_template_test_with_template ( ) : rv = flask.send_file ( f , mimetype='text/plain ' ) assert cc.max_age == 12 * 60 * 60 assert c.get ( '/keyerror ' ) .data == b'KeyError ' app.testing = True rv = client.post ( '/ ' ) def app ( ) : def test_standard_context ( ) : def test_subdomain_matching_with_ports ( ) : def test_template_test_after_route_with_template ( ) : rv = client.get ( '/error ' ) rv = render ( ' { { `` < /script > '' |tojson } } ' ) rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost:5000/ ' ) assert macro ( 'World ' ) == 'Hello World ! ' client.get ( '/test_filter/ ' ) def test_subdomain_basic_support ( ) : app.config [ 'JSON_AS_ASCII ' ] = test_value assert flask.g.pop ( 'bar ' , 'more cake ' ) == 'more cake ' rv = flask.send_file ( 'static/index.html ' , as_attachment=True ) # pop rv = client.get ( '/ ' , 'http : //mitsuhiko.localhost.localdomain:3000/ ' ) rv = c.get ( '/ ' , 'http : //localhost/ ' ) def test_json_custom_mimetypes ( self , app , client ) : def test_add_template_filter_with_name_and_template ( app , client ) : assert rv.data == f.read ( ) flask.g.setdefault ( 'bar ' , 'the cake is a lie ' ) `` filename * =UTF-8 '' % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt '' assert flask.g.bar == 'the cake is a lie ' def test_url_mapping ( ) : c.get ( '/test_filter/ ' ) def test_run_from_config ( monkeypatch , host , port , expect_host , expect_port ) : import flask assert flask.g.get ( ' x ' ) is None rv = client.get ( '/ ' , 'http : //127.0.0.1:5000/ ' ) def test_request_dispatching ( ) : class PyStringIO ( object ) : assert c.get ( '/ ' ) .data == b ' 1 ' def test_error_handler_http_subclass ( app ) : assert rv.mimetype == 'application/octet-stream ' .mkdir ( 'python { x [ 0 ] } . { x [ 1 ] } '.format ( x=sys.version_info ) ) \ rv = client.get ( '/ ' , headers= { 'Range ' : 'somethingsomething ' } ) c = app.test_client ( ) assert client.get ( '/ ' ) .data == b'GET ' client = app.test_client ( ) rv = client.get ( '/admin/static/css/test.css ' ) assert flask.g.x == 42 def test_blueprint_app_error_handling ( ) : flask.g.setdefault ( 'bar ' , 'hello world ' ) def test_blueprint_url_processors ( app , client ) : def test_subdomain_matching ( app , client ) : def test_context_processing ( ) : client.get ( '/test_with_categories/ ' ) def test_session_using_server_name_port_and_path ( ) : def test_send_file_object ( self ) : def test_request_processing ( ) : rv = app.test_client ( ) .open ( '/b/ ' ) rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost:3000/ ' ) def test_run_from_config ( monkeypatch , host , port , expect_host , expect_port , app ) : rv = flask.send_file ( StringIO ( 'Test ' ) , as_attachment=True , rv = c.post ( '/add ' , data=flask.json.dumps ( { ' a ' : 1 , ' b ' : 2 } ) , rv = client.get ( '/ ' , 'http : //example.com:8080/foo ' ) def test_add_template_filter_with_template ( ) : assert rv == ' '' \\u0026 '' ' f.name = 'test.txt ' assert client.get ( '/py/bar ' ) .data == b'bp.bar ' f.name = 'test.txt ' def test_templates_auto_reload ( app ) : def test_post_empty_json_adds_exception_to_response_content_in_debug ( self , app , client ) : req = flask.request._get_current_object ( ) ' < test > Mail ' def test_error_handler_blueprint ( ) : def test_session_using_server_name_port_and_path ( app , client ) : assert rv.mimetype == 'text/html ' def test_teardown_request_handler_debug_mode ( ) : rv = c.get ( url ) def test_multi_route_rules ( ) : 'filename= '' Nandu/pinguino.txt '' ' , def test_processor_exceptions ( self ) : rv = flask.send_file ( f , attachment_filename=f.name ) macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) def test_extended_flashing ( ) : rv = client.get ( '/py/bar/123 ' ) def test_greenlet_context_copying ( app , client ) : assert rv.data == b ' 0.0.0.0 ' rv = flask.send_file ( 'static/index.html ' , as_attachment=True , attachment_filename=u'Ñandú／pingüino.txt ' ) def __init__ ( self , * args , * * kwargs ) : rv = client.get ( '/ ' , 'http : //example.com:8080/ ' ) parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) assert rv.data.strip ( ) == b'Hello Subdomain ' def test_session_transactions_keep_context ( ) : assert rv.mimetype == 'text/plain ' def test_template_test_with_name ( app ) : flask.send_file ( StringIO ( `` LOL '' ) ) rv = c.post ( '/json ' , data='malformed ' , content_type='application/json ' ) attachment_filename='index.txt ' , assert c.get ( '/2/foo ' ) .data == b'19/42 ' rv = client.get ( '/admin/index2 ' ) with app.app_context ( ) as ctx : def test_before_request_and_routing_errors ( ) : def test_session_expiration ( ) : flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename='filename ' ) assert c.get ( '/fe ' ) .data.strip ( ) == b'/be ' client.environ_base [ 'HTTP_USER_AGENT ' ] = 'Bar ' assert 'Unable to infer MIME-type ' in str ( excinfo ) def test_dotted_names ( ) : def test_basic_url_generation ( app ) : def test_debug_log_override ( self ) : assert rv.data == b ' 0.0.0.1 ' ( 'localhost ' , 80 , 'localhost ' , 80 ) , def test_error_handler_no_match ( app , client ) : rv = render ( ' { { `` \ ' '' |tojson } } ' ) rv = flask.render_template_string ( 'Hello { { config.WORLD_NAME } } ' def test_app_context_provides_current_app ( app ) : assert list ( flask.get_flashed_messages ( ) ) == [ 'Zap ' , 'Zip ' ] flask.json.dump ( test_data , out ) rv.direct_passthrough = False f = StringIO ( 'Test ' ) assert rv == '42 ' rv = render ( ' { { `` < ! -- < script > '' |tojson } } ' ) rv = flask.send_file ( f , mimetype='text/html ' ) client.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.0 ' def test_greenlet_context_copying_api ( app , client ) : def test_view_inheritance ( app ) : rv = flask.send_file ( f , as_attachment=True , def test_session_ip_warning ( recwarn ) : rv = client.get ( '/ ' , 'http : //localhost:5000/ ' ) def test_before_after_request_order ( app , client ) : def test_template_filter_with_template ( ) : def test_json_as_unicode ( self ) : flask.json.dump ( test_data , out ) assert c.get ( '/1 ' ) .data == b'banana ' rv = pickle.loads ( c.get ( '/ ' ) .data ) assert c.get ( '/ ' ) .data == b'index ' rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' } ) with client as c : assert flask.url_for ( 'myview ' , _method='GET ' ) == '/myview/ ' assert c.get ( '/decorator ' ) .data == b'boom ' assert client.get ( '/ ' ) .data == b'42 ' rv = app.test_client ( ) .get ( '/ ' ) .data.strip ( ) os.path.join ( app.root_path , 'static/index.html ' ) def test_teardown_with_previous_exception ( app ) : assert called == [ 'test_appctx ' , 'TEARDOWN ' ] assert rv == ' '' \\u0027 '' ' def test_greenlet_context_copying ( ) : app = flask.Flask ( __name__ ) def test_macros ( app , req_ctx ) : with app.open_resource ( 'static/index.html ' ) as f : c.get ( '/test_filters/ ' ) def test_request_json ( self , recwarn , app , client ) : def test_greenlet_context_copying_api ( ) : rv = c.get ( '/admin/index2 ' ) assert c.get ( '/py/bar/123 ' ) .data == b'bp.123 ' assert c.get ( '/ ' ) .data == b'42 ' assert c.get ( '/foo ' ) .data == b'bar ' def test_multi_route_class_views ( app , client ) : rv = c.get ( '/admin/static/test.txt ' ) def test_add_template_filter ( ) : assert rv == ' '' \\u2603 '' ' def test_before_after_request_order ( ) : assert c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data == b'value set ' if hasattr ( client , 'options ' ) : cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) # pop assert rv.data == b'/test/ ' def test_implicit_head ( ) : def test_exception_logging ( self , app ) : assert 'foos ' not in flask.g assert rv.data == f.read ( ) assert 'filename * ' not in rv.headers [ 'Content-Disposition ' ] with app.test_request_context ( ) : def test_post_empty_json_wont_add_exception_to_response_if_no_debug ( self ) : assert client.get ( '/py/bar/123 ' ) .data == b'bp.123 ' assert rv == ' '' \\u0027 '' ' assert req is flask.request._get_current_object ( ) ' '' A tmpdir added to sys.path '' ' assert cc.max_age == 3600 def test_user_error_handling ( ) : rv.direct_passthrough = False app.testing = False f = PyStringIO ( 'Test ' ) def test_teardown_on_pop ( app ) : rv = flask.render_template_string ( ' { { get_stuff ( ) } } ' ) with pytest.raises ( ValueError ) as excinfo : c.get ( '/test_with_categories/ ' ) def test_request_preprocessing_early_return ( ) : content_type='application/json ; charset=iso-8859-15 ' ) def __getattr__ ( self , name ) : def test_http_error_subclass_handling ( app , client ) : def test_add_template_test_with_name ( ) : assert rv.data == b'127.0.0.1 ' def test_template_filter ( app ) : def test_dotted_names ( app , client ) : rv = flask.send_file ( f , mimetype='text/html ' ) rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=- ' } ) rv.close ( ) def test_redirect_keep_session ( ) : assert flask.session.modified def test_send_from_directory ( self ) : def test_session_vary_cookie ( app , client ) : 'http : //foo.localhost.localdomain:5000/ ' def test_blueprint_url_definitions ( ) : def test_template_test ( app ) : c.get ( '/success ' ) assert c.get ( '/foo/ ' ) .data == b'index ' rv = client.get ( '/admin/ ' ) def test_blueprint_specific_error_handling ( app , client ) : rv = client.get ( '/ ' , 'http : //example.com/ ' ) d = dict ( assert 'Unable to infer MIME-type ' in str ( excinfo ) ' i ' : { 'test ' : 'dict ' } } assert flask.g.bar == 'the cake is a lie ' def test_multi_route_class_views ( ) : rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , 'If-Range ' : http_date ( import os lines = client.get ( '/ ' ) .data.splitlines ( ) def test_view_patching ( app ) : assert rv == ' '' \\u003c\\u0000/script\\u003e '' ' assert flask.g.get ( ' x ' , 11 ) == 11 rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=-10 ' } ) assert flask.url_for ( 'index ' , _anchor= ' x y ' ) == '/ # x % 20y ' def test_session_cookie_setting ( ) : def test_template_test_with_name ( ) : def test_subdomain_matching ( ) : def test_trapping_of_bad_request_key_errors ( app ) : # __contains__ assert rv == ' '' \\u003c/script\\u003e '' ' macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) def test_view_inheritance ( ) : pytest.raises ( ValueError , .mkdir ( 'lib ' ) \ def test_provide_automatic_options_kwarg ( app , client ) : client = app.test_client ( ) assert flask.g.get ( ' x ' ) == 42 assert rv.headers [ ' x-sendfile ' ] == \ def test_attachment_with_utf8_filename ( self , app , req_ctx ) : assert flask.g.get ( 'foo ' ) is None client.get ( '/ ' ) 'http : //localhost/hello/test % 20x ' assert client.get ( '/bp_prefix/bar ' ) .status_code == 404 assert c.get ( '/forbidden ' ) .data == b'you shall not pass ' assert client.get ( '/what-is-a-sideend ' ) .data == b'application itself says no ' def test_environ_defaults ( app , client , app_ctx , req_ctx ) : def test_static_file ( self , app , req_ctx ) : assert req is not None def test_environ_defaults ( ) : assert flask.url_for ( 'index ' , _external=True ) == 'http : //localhost/ ' assert c.get ( '/what-is-a-sideend ' ) .data == b'application itself says no ' assert flask.g.get ( 'foo ' , 'bar ' ) == 'bar ' rv = pickle.loads ( client.get ( '/ ' ) .data ) resp = c.get ( '/ ' ) assert flask.g.x == 42 assert rv.data == f.read ( ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=- ' } ) assert value == 'attachment ' rv = c.post ( '/bp ' , data=flask.json.dumps ( { assert c.get ( '/de/ ' ) .data == b'/de/about ' def test_add_template_filter_with_template ( app , client ) : assert flask.url_for ( 'myview ' , id=42 , _method='GET ' ) == '/myview/42 ' rv = client.get ( '/ ? foo=bar ' ) assert flask.g.user_agent == 'Foo ' def test_add_template_filter_with_name_and_template ( ) : rv = client.head ( '/ ' ) def __getattr__ ( self , name ) : rv = client.get ( '/ ? name=World ' ) def test_request_less_rendering ( app , app_ctx ) : rv = flask.render_template_string ( ' { { get_stuff ( ) } } ' ) app.config [ 'SERVER_NAME ' ] = 'localhost:3000 ' flask.send_file ( StringIO ( `` LOL '' ) ) def test_processor_exceptions ( self , app , client ) : rv = client.open ( '/options ' , method='OPTIONS ' ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' } ) def app_ctx ( app ) : assert flask.g.user_agent == 'werkzeug/ ' + werkzeug.__version__ assert ' x-sendfile ' not in rv.headers rv = app.test_client ( ) .get ( '/ ? foo=bar ' ) def test_session_localhost_warning ( recwarn ) : assert client.get ( '/1/foo ' ) .data == b'23/42 ' def test_after_request_processing ( ) : def test_endpoint_override ( ) : app.config [ 'JSON_AS_ASCII ' ] = False def test_template_filter_with_name_and_template ( ) : rv = client.get ( '/ ' , 'http : //localhost.localdomain/ ' ) def test_attachment ( self , app , req_ctx ) : def test_view_decorators ( ) : assert client.get ( '/page/2 ' ) .data == b ' 2 ' attachment_filename='index.html ' ) def test_blueprint_url_definitions ( app , client ) : def test_template_filter_with_template ( app , client ) : def test_teardown_request_handler_error ( app , client ) : def test_session_transactions ( app ) : 'If-Range ' : http_date ( last_modified ) } ) def test_session_using_server_name_and_port ( app , client ) : def test_session_stored_last ( app , client ) : assert client.get ( '/backend-no ' ) .data == b'backend says no ' f = StringIO ( 'Test ' ) rv = render ( ' { { `` < ! -- < script > '' |tojson } } ' ) def test_add_template_global ( app , app_ctx ) : def test_error_handler_no_match ( ) : assert flask.g.get ( ' x ' , 11 ) == 11 def test_add_template_global ( ) : def test_session_using_session_settings ( ) : def test_url_for_with_scheme ( self ) : def test_url_generation_requires_server_name ( app ) : def test_app_tearing_down_with_previous_exception ( ) : rv = c.open ( '/more ' , method='OPTIONS ' ) assert flask.g.get ( 'foo ' , 'bar ' ) == 'bar ' def test_add_template_test ( app ) : rv = c.get ( '/py/bar ' ) def test_request_less_rendering ( ) : return getattr ( self._io , name ) def test_url_generation_requires_server_name ( ) : rv = c.head ( '/ ' ) assert 'foo ' in flask.g rv = client.get ( '/py/bar ' ) rv.direct_passthrough = False assert client.get ( '/nope ' ) .data == b'you shall not pass ' rv = `` assert client.get ( '/foo ' ) .data == b'bar ' rv = client.get ( '/ ' ) def test_context_refcounts ( app , client ) : rv.direct_passthrough = False def test_options_on_multiple_rules ( app , client ) : 'attachment ' , def test_url_for_with_alternating_schemes ( self ) : rv = c.delete ( '/more ' ) def test_g_iteration_protocol ( ) : assert list ( flask.g ) == [ 'foo ' ] def test_no_escaping ( ) : assert client.get ( '/fe ' ) .data.strip ( ) == b'/be ' assert client.get ( '/function ' ) .data == b'bam ' self._io = StringIO ( * args , * * kwargs ) rv = c.get ( url ) rv = client.post ( '/add ' , data=flask.json.dumps ( { ' a ' : 1 , ' b ' : 2 } ) , def test_streaming_with_context ( self ) : def test_before_request_and_routing_errors ( app , client ) : assert rv == ' < a ng-data=\ ' { `` x '' : [ `` foo '' , `` bar '' , `` baz\\u0027 '' ] } \ ' > < /a > ' def test_basic_view ( app ) : def test_endpoint_override ( app ) : assert client.get ( '/keyerror ' ) .data == b'KeyError ' with app.open_resource ( 'static/index.html ' ) as f : def test_enctype_debug_helper ( ) : assert options [ 'filename ' ] == 'index.txt ' rv = flask.send_file ( 'static/index.html ' , as_attachment=True , attachment_filename=u'Ñandú／pingüino.txt ' ) content_type='application/json ; charset=iso-8859-15 ' ) def test_werkzeug_routing ( app , client ) : def test_clean_pop ( app ) : assert type ( rv ) == text_type def test_app_ctx_globals_methods ( ) : def test_trapping_of_all_http_exceptions ( ) : def test_send_file_xsendfile ( self , catch_deprecation_warnings ) : def test_environ_defaults_from_config ( app , client ) : with app.test_client ( ) as c : def test_template_test_after_route_with_template ( app , client ) : assert type ( rv ) == text_type rv = client.open ( '/b/ ' ) def test_enctype_debug_helper ( app , client ) : assert flask.g.pop ( 'bar ' ) == 'the cake is a lie ' app.config [ 'SERVER_NAME ' ] = 'localhost.localdomain ' flask.g.foo = 'bar ' def test_subdomain_basic_support ( app , client ) : rv.close ( ) def test_iterable_loader ( app , client ) : def test_werkzeug_routing ( ) : def test_template_filter_after_route_with_template ( ) : rv = app.test_client ( ) .get ( '/ ? foo=42 ' ) def test_send_file_last_modified ( self ) : def test_blueprint_app_error_handling ( app , client ) : class PyStringIO ( object ) : def test_error_handler_subclass ( app ) : def test_send_file_xsendfile ( self , app , req_ctx , catch_deprecation_warnings ) : c.get ( '/ ' ) def test_request_module ( self , recwarn , app , client ) : def test_json_bad_requests ( self ) : self._io = StringIO ( * args , * * kwargs ) value , options = \ def test_teardown_on_pop ( ) : assert flask.g.pop ( 'bar ' ) == 'the cake is a lie ' rv = flask.send_file ( f , attachment_filename=f.name ) assert rv == ' '' \\u0026 '' ' c = app.test_client ( ) def test_json_customization ( self , app , client ) : assert cc.max_age == 12 * 60 * 60 rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4- ' } ) assert rv.data.strip ( ) == b'Hello Subdomain ' app.config [ 'JSON_AS_ASCII ' ] = True yield ctx def test_run_defaults ( monkeypatch ) : assert rv.direct_passthrough def test_proper_test_request_context ( app ) : def test_environ_base_modified ( ) : def test_template_filter ( ) : assert 'no filename is available ' in str ( excinfo ) client.get ( '/ ' ) def test_empty_url_defaults ( app , client ) : rv = app.test_client ( ) .get ( '/ ' , 'http : //127.0.0.1:5000/ ' ) def test_explicit_head ( app ) : client.post ( '/ ' , data= ' { `` spam '' : 42 } ' , content_type='application/json ' ) rv = flask.send_file ( f , mimetype='text/html ' ) assert c.get ( '/1/bar ' ) .data == b'23 ' with app.test_request_context ( ) as ctx : assert ' x-sendfile ' not in rv.headers assert rv == ' '' \\u003c/script\\u003e '' ' def test_flashes ( ) : rv = client.get ( '/ ' , 'http : //www.example.com:8080/test/ ' ) assert client.get ( '/de/about ' ) .data == b'/de/ ' assert rv.mimetype == 'text/html ' flask.g.setdefault ( 'bar ' , 'the cake is a lie ' ) assert rv.mimetype == 'text/plain ' rv = c.get ( '/ ' ) out.seek ( 0 ) rv = flask.send_file ( f , mimetype='application/octet-stream ' ) assert rv.data == b'http : //example.com:1234/foo/ ' class Flask ( _Flask ) : def test_endpoint_decorator ( app , client ) : rv = client.get ( '/ ' ) .data.strip ( ) app.testing = True assert rv.data == b'Test ' def test_explicit_head ( ) : assert c.get ( '/ ' ) .data == b'GET ' def test_app_tearing_down_with_handled_exception ( app ) : def test_app_ctx_globals_methods ( app , app_ctx ) : app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : assert rv.direct_passthrough rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-1000 ' } ) def test_context_processing ( app ) : assert client.get ( '/1 ' ) .data == b'banana ' rv = flask.send_file ( 'static/index.html ' , as_attachment=True ) rv = client.get ( '/ ' ) # Test with static file handler . if hasattr ( c , 'options ' ) : ' { { foo } } ' , foo= ' < test > ' ) == ' & lt ; test & gt ; ' rv = c.get ( '/forbidden ' ) { 'test ' : 'dict ' } def test_send_file_object_without_mimetype ( self , app , req_ctx ) : assert rv.data == b ' 0.0.0.1 ' def test_endpoint_decorator ( ) : def test_url_for_with_anchor ( self ) : rv = render ( ' { { `` < \0/script > '' |tojson } } ' ) rv = flask.json.htmlsafe_dumps ( ' < /script > ' ) def test_session_using_server_name ( ) : rv = app.send_static_file ( 'index.html ' ) def test_manual_context_binding ( ) : .mkdir ( 'python { x [ 0 ] } . { x [ 1 ] } '.format ( x=sys.version_info ) ) \ rv = client.open ( '/ ' , method='OPTIONS ' ) import pytest assert rv == '42 ' content_disposition = set ( rv.headers [ 'Content-Disposition ' ] .split ( ' ; ' ) ) assert rv == 'http : //example.com/static/index.html ' def test_run_server_port ( monkeypatch ) : def test_send_file_object ( self , app , req_ctx ) : def test_get_method_on_g ( ) : add_etags=False ) rv = c.get ( '/py/bar/123 ' ) def test_request_processing ( app , client ) : def test_send_file_range_request ( self , app , client ) : def test_escaping ( app , client ) : flask.g.pop ( 'bar ' ) rv = client.options ( '/ ' ) assert client.get ( '/ ' ) .data == b'None ' return app def test_preserve_remembers_exception ( ) : def test_jsonify_uuid_types ( self ) : def test_send_file_regular ( self ) : with open ( os.path.join ( app.root_path , 'static/index.html ' ) , mode='rb ' ) as f : with open ( os.path.join ( app.root_path , 'static/index.html ' ) , mode='rb ' ) as f : def test_session_special_types ( ) : def test_get_method_on_g ( app_ctx ) : assert c.post ( '/more ' ) .data == b'POST ' def test_session_using_session_settings ( app , client ) : _scheme='https ' ) def test_escaping_without_template_filename ( app , client , req_ctx ) : assert client.get ( '/custom ' ) .data == b'custom ' assert c.get ( '/custom ' ) .data == b'custom ' rv = client.get ( url ) assert flask.url_for ( 'index ' , _external=True ) == 'http : //localhost/ ' def test_options_work ( ) : assert flask.g.get ( 'foo ' ) is None 'http : //localhost/hello/test % 20x ' def test_template_test_with_template ( app , client ) : resp = c.get ( '/ ' , data=u ' '' Hällo Wörld '' '.encode ( 'iso-8859-15 ' ) , assert 'foo ' not in flask.g rv = render ( ' { { `` \ ' '' |tojson } } ' ) assert flask.g.user_agent == 'Foo ' ' e ' : 'Hi ' , ' f ' : True , ' g ' : False , ) ) ' '' Generate egg from package name inside base and put the egg into def test_url_with_method ( self ) : def test_view_patching ( ) : def test_send_from_directory_bad_request ( self , app , req_ctx ) : assert rv.headers [ ' x-sendfile ' ] == \ def test_app_tearing_down ( app ) : def test_blueprint_json_customization ( self , app , client ) : rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=-10 ' } ) rv = flask.send_file ( StringIO ( 'Test ' ) , as_attachment=True , cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) assert client.get ( '/2 ' ) .data == b'apple ' value , options = \ return super ( Flask , self ) .make_response ( rv ) rv = c.open ( '/ ' , method='OPTIONS ' ) assert client.get ( '/more ' ) .data == b'GET ' def test_multiple_inheritance ( app ) : rv = client.get ( '/ ' , 'http : //test.localhost.localdomain/ ' ) def test_template_filter_with_name ( ) : ( None , 80 , 'pocoo.org ' , 80 ) , def test_session_transactions_keep_context ( app , client , req_ctx ) : '/static/index.html ' assert c.get ( '/be ' ) .data.strip ( ) == b'/fe ' def test_teardown_request_handler_error ( ) : 'attachment ' , assert flask.render_template_string ( assert c.get ( '/ ' ) .data == b'None ' flask.flash ( 'Zip ' ) assert rv.data == b ' 0.0.0.0 ' rv = c.get ( '/admin/static/css/test.css ' ) def test_template_test_with_template ( app ) : def test_error_handling ( ) : rv = client.get ( '/ ' ) .data assert rv == 'Hello Special World 42 ' assert flask.session.modified assert req is not None # setdefault def test_add_template_test_with_template ( app , client ) : add_etags=False ) flask.session.modified = False def test_app_tearing_down ( ) : # __iter__ def test_context_refcounts ( ) : assert client.get ( '/forbidden ' ) .data == b'you shall not pass ' assert client.get ( '/de/ ' ) .data == b'/de/about ' def test_json_attr ( self , app , client ) : with pytest.raises ( KeyError ) : def test_template_escaping ( self , app , req_ctx ) : def test_manual_context_binding ( app ) : with open ( os.path.join ( app.root_path , 'static/index.html ' ) ) as f : 'simple_template.html ' , # should render this def test_environ_base_default ( ) : rv = app.test_client ( ) .open ( '/ ' ) c.get ( '/test/ ' ) resp = client.get ( '/ ' ) def test_attachment_with_utf8_filename ( self ) : assert rv == ' '' \\u003c ! -- \\u003cscript\\u003e '' ' def test_request_dispatching ( app , client ) : assert rv == 'http : //example.com/static/index.html ' rv = client.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , def test_macros ( ) : from flask import Flask as _Flask def test_request_context_means_app_context ( ) : rv = render ( ' { { `` < \0/script > '' |tojson } } ' ) ' '' Create a fake site-packages '' ' rv = c.post ( '/json ' , data=None , content_type='application/json ' ) 'http : //localhost.localdomain:5000/ ' flask.g.x = 42 assert rv == test_data def test_custom_template_loader ( ) : rv = client.post ( '/bp ' , data=flask.json.dumps ( { def test_jsonify_date_types ( self , app , client ) : with pytest.raises ( ValueError ) as excinfo : def test_app_tearing_down_with_handled_exception ( ) : assert flask.url_for ( 'myview ' , _method='POST ' ) == '/myview/create ' rv = c.post ( '/ ' ) rv = flask.json.htmlsafe_dumps ( ' < /script > ' ) def test_no_escaping ( app , client ) : def test_request_preprocessing_early_return ( app , client ) : def test_teardown_with_previous_exception ( ) : assert rv.data == b'127.0.0.1 ' `` `` '' Create a fake site-packages . '' '' '' with pytest.raises ( KeyboardInterrupt ) : .mkdir ( 'lib ' ) \ assert 'foos ' not in flask.g assert value == 'attachment ' assert flask.url_for ( 'myview ' , _method='POST ' ) == '/myview/create ' } out.seek ( 0 ) flask.g.foo = 23 rv = client.post ( '/json ' , data= ' '' foo '' ' , content_type='application/x+json ' )","['tests/conftest.py', 'tests/test_appctx.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_deprecations.py', 'tests/test_helpers.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_user_error_handler.py', 'tests/test_views.py']",DRYing up the test suite using pytest fixtures ( # 2306 )
304,81c2440a054a0aa9110ec1d5aa0955055c08050e,2017-05-23 13:31:56-07:00,def client ( ) : def client ( ) : def client ( request ) : def client ( request ) :,"['docs/testing.rst', 'examples/flaskr/tests/test_flaskr.py']",Merge pull request # 2318 from bovarysme/fix-testing-docs
305,ce813ae5214acc91b1686e09559bb3fdc28a74e9,2017-05-23 12:46:31-07:00,"c = app.test_client ( ) assert 'OPTIONS ' in rv.allow rv = c.open ( '/ ' , method='OPTIONS ' ) app = flask.Flask ( __name__ ) assert rv.status_code == 405 assert sorted ( rv.allow ) == [ 'OPTIONS ' ] app.add_url_rule ( '/ ' , view_func=Index2.as_view ( 'index ' ) ) provide_automatic_options = None app.add_url_rule ( '/ ' , view_func=Index1.as_view ( 'index ' ) ) provide_automatic_options = True class Index2 ( flask.views.View ) : def dispatch_request ( self ) : provide_automatic_options = False app.add_url_rule ( '/ ' , view_func=Index3.as_view ( 'index ' ) ) methods = [ 'OPTIONS ' ] return 'Hello World ! ' class Index3 ( flask.views.View ) : class Index1 ( flask.views.View ) : # : Setting this disables or force-enables the automatic options handling . def test_view_provide_automatic_options_attr ( ) : view.provide_automatic_options = cls.provide_automatic_options","['flask/views.py', 'tests/test_views.py']",Merge pull request # 2316 from ka7eh/automatic-options-in-views
306,a037762781929a9a658250f3247bfd131d634b0e,2017-05-23 12:00:34-07:00,"def client ( ) : assert set ( w.category for w in recwarn.list ) \ assert ' . ' not in key # make sure we 're not leaking a request context since we are assert leaks == [ ] def disable_extwarnings ( request , recwarn ) : assert set ( w.category for w in recwarn.list ) \ < = set ( [ ExtDeprecationWarning ] ) for key in ext.__dict__ : request.addfinalizer ( ensure_clean_request_context ) return client def client ( request ) : def teardown ( ) : leaks = [ ] yield # testing flask internally in debug mode in a few cases def disable_extwarnings ( recwarn ) : recwarn.clear ( ) from flask import ext leaks.append ( flask._request_ctx_stack.pop ( ) ) os.unlink ( minitwit.app.config [ 'DATABASE ' ] ) # testing flask internally in debug mode in a few cases for key in ext.__dict__ : os.close ( db_fd ) os.close ( db_fd ) leaks.append ( flask._request_ctx_stack.pop ( ) ) yield client from flask import ext request.addfinalizer ( teardown ) assert ' . ' not in key def leak_detector ( request ) : < = set ( [ ExtDeprecationWarning ] ) while flask._request_ctx_stack.top is not None : def ensure_clean_request_context ( ) : def inner ( ) : # make sure we 're not leaking a request context since we are def leak_detector ( ) : os.unlink ( minitwit.app.config [ 'DATABASE ' ] ) assert leaks == [ ] recwarn.clear ( ) leaks = [ ] request.addfinalizer ( inner ) def importhook_setup ( monkeypatch ) : while flask._request_ctx_stack.top is not None : `` `` '' Get rid of the database again after each test . '' '' '' def importhook_setup ( monkeypatch , request ) :","['examples/minitwit/tests/test_minitwit.py', 'tests/conftest.py', 'tests/test_ext.py']",Merge pull request # 2311 from bovarysme/use-yield-syntax
307,e2067649551033c74e7937b89af9a9874a96d279,2017-05-23 11:51:17-07:00,"return 'default ' c = app.test_client ( ) blueprint handler for a specific code , app handler for a specific code , raise NotFound ( ) assert isinstance ( e , HTTPException ) app = flask.Flask ( __name__ ) .get ( request.blueprint , { } ) def forbidden ( ) : # try blueprint handlers Otherwise falls back to the app , returns None if not a suitable InternalServerError , Forbidden , return 'bp-forbidden ' assert isinstance ( e , Forbidden ) return 'bp-default ' def bp_exception_handler ( e ) : if handler : raise Forbidden ( ) assert c.get ( '/bp/forbidden ' ) .data == b'bp-forbidden ' def bp_registered_test ( ) : handler = find_handler ( self.error_handler_spec bp = flask.Blueprint ( 'bp ' , __name__ ) handler is found . if handler is not None : and returns None if a suitable handler is not found . handler = find_handler ( self.error_handler_spec.get ( name , { } ) .get ( c ) ) # check for any in blueprint or app # fall back to app handlers def catchall_errorhandler ( e ) : assert c.get ( '/bp/undefined ' ) .data == b'bp-default ' return handler return handler app.register_blueprint ( bp , url_prefix='/bp ' ) def bp_forbidden_test ( ) : assert isinstance ( e , NotFound ) assert c.get ( '/forbidden ' ) .data == b'forbidden ' NotFound return 'forbidden ' from werkzeug.exceptions import Forbidden , InternalServerError HTTPException , return find_handler ( self.error_handler_spec [ None ] .get ( code ) ) def test_default_error_handler ( ) : blueprint generic HTTPException handler , app generic HTTPException handler , ( request.blueprint , None ) , ( None , None ) ) : ) `` `` '' Finds a registered error handler for the request ’ s blueprint . `` `` '' Find a registered error handler for a request in this order : from werkzeug.exceptions import ( assert c.get ( '/undefined ' ) .data == b'default ' .get ( code ) ) for name , c in ( ( request.blueprint , code ) , ( None , code ) ,","['flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 2314 from cerickson/errorhandler
308,cd593bf117b7747c5c5b5aec8476315f9b2fbbdb,2017-05-23 11:50:31-07:00,"We should also test that adding messages works . Add a new test function rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , flaskr.app.config [ 'PASSWORD ' ] ) os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) def test_empty_db ( client ) : pip install pytest rv = client.get ( '/ ' ) .. _pytest fixture : rv = client.post ( '/add ' , data=dict ( test , we close the file and remove it from the filesystem in the `` TESTING `` config flag is activated . What it does is disable the error assert b'Invalid password ' in rv.data return client with flaskr.app.app_context ( ) : return self.app.get ( '/logout ' , follow_redirects=True ) https : //docs.pytest.org/en/latest/fixture.html format the filename like `` test_ * .py `` , it will be auto-discoverable by import pytest the application for testing and initializes a new database . : : . os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) You can then use that with your favourite testing solution . In this documentation The origin of this quote is unknown and while it is not entirely correct , it login ( client , flaskr.app.config [ 'USERNAME ' ] , flaskr.app.config [ 'PASSWORD ' ] ) access the root of the application ( `` / `` ) . To do this , we add a new ================ test session starts ================ $ pytest subscriptions are helpful for unit testing for example . Say you want to rv = self.app.post ( '/add ' , data=dict ( not far from the truth . Untested applications make it hard to yield client def logout ( self ) : import tempfile .. _pytest : sources from ` the examples ` _ . each individual test function is run . To delete the database after the ) , follow_redirects=True ) self.db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) : meth : ` ~unittest.TestCase.tearDown ` method . Additionally during setup the password=password framework for our tests . You can install it with `` pip `` , like so : : import tempfile You can then use that with your favourite testing solution . flaskr.app.config [ 'TESTING ' ] = True os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) tests/test_flaskr.py : :test_empty_db PASSED def login ( self , username , password ) : def logout ( client ) : We should also test that adding messages works . Add a new test method rootdir : ./flask/examples/flaskr , inifile : setup.cfg username=username , collected 3 items invalid credentials . Add this new test function : : : mod : ` unittest ` to automatically identify the method as a test to run . db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) ) , follow_redirects=True ) https : //pytest.org password=password create a Python file to store our tests ( : file : ` test_flaskr.py ` ) . When we ( : file : ` flaskr_tests.py ` ) and create a unittest skeleton there : : def client ( request ) : assert b'You were logged in ' in rv.data tests/test_flaskr.py : :test_messages PASSED OK rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , flaskr.app.config [ 'PASSWORD ' ] + ' x ' ) `` `` '' Make sure login and logout works . '' '' '' rv = self.logout ( ) it from the filesystem . Add the following two methods to your ` FlaskrTestCase ` class : : flaskr.init_db ( ) os.close ( db_fd ) $ pytest -v flaskr.app.testing = True `` `` '' Test that messages work . '' '' '' you get better error reports when performing test requests against the This test client will give us a simple interface to the application . We can catching during request handling so that you get better error reports when is also not far from the truth . Untested applications make it hard to collected 0 items of cookies for us . Ran 3 tests in 0.332s The origin of this quote is unknown and while it is not entirely correct , it is also performing test requests against the application . tests/test_flaskr.py : :test_login_logout PASSED os.close ( db_fd ) def login ( client , username , password ) : os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) We begin by adding a tests directory under the application root . Then rv = self.login ( 'admin ' , 'default ' ) def test_messages ( client ) : client and initializes a new database . This function is called before : func : ` client ` that configures $ python flaskr_tests.py yield client ============= 1 passed in 0.10 seconds ============== def test_login_logout ( client ) : By using ` self.app.get ` we can send an HTTP `` GET `` request to the application with def test_login_logout ( self ) : In order to test the application , we add a second module invalid credentials . Add this new test to the class : : rv = self.login ( 'adminx ' , 'default ' ) For example , here is a helper context manager that can be used in a unit test def teardown ( ) : assert b'Invalid username ' in rv.data self.app = flaskr.app.test_client ( ) assert b'No entries here so far ' in rv.data `` `` '' Start with a blank database . '' '' '' if __name__ == '__main__ ' : ... assert b'You were logged out ' in rv.data def setUp ( self ) : ` pytest ` _ to automatically identify the function as a test to run . class FlaskrTestCase ( unittest.TestCase ) : assert b'Invalid username ' in rv.data Next , we create a ` pytest fixture ` _ called request.addfinalizer ( teardown ) we will use the : mod : ` unittest ` package that comes pre-installed with Python . unittest.main ( ) During setup , the `` TESTING `` config flag is activated . What test method to our class , like this : : pytest . rv = login ( client , flaskr.app.config [ 'USERNAME ' ] + ' x ' , flaskr.app.config [ 'PASSWORD ' ] ) Add the following two functions to your : file : ` test_flaskr.py ` file : : In this documentation we will use the ` pytest ` _ package as the base self.login ( 'admin ' , 'default ' ) For example , here is a helper context manager that can be used in a unittest application . return client.post ( '/login ' , data=dict ( rv = self.login ( 'admin ' , 'defaultx ' ) subscriptions are helpful for unittesting for example . Say you want to with flaskr.app.app_context ( ) : username=username , flaskr.init_db ( ) By using `` client.get `` we can send an HTTP `` GET `` request to the application with simple interface to the application , where we can trigger test requests to the This client fixture will be called by each individual test . It gives us a Because SQLite3 is filesystem-based , we can easily use the : mod : ` tempfile ` module access the root of the application ( `` / `` ) . To do this , we add a new def test_messages ( self ) : os.close ( self.db_fd ) rv = self.app.get ( '/ ' ) trigger test requests to the application , and the client will also keep track Ran 0 tests in 0.000s client = flaskr.app.test_client ( ) Because SQLite3 is filesystem-based we can easily use the tempfile module To delete the database after the test , the fixture closes the file and removes return self.app.post ( '/login ' , data=dict ( this does is disable error catching during request handling , so that The code in the : meth : ` ~unittest.TestCase.setUp ` method creates a new test rv = logout ( client ) assert b'You were logged out ' in rv.data # : For example this might activate unittest helpers that have an import unittest collected 1 items assert b'You were logged in ' in rv.data os.close ( db_fd ) =========== no tests ran in 0.07 seconds ============ Even though it did not run any actual tests , we already know that our `` flaskr `` assert b'No entries here so far ' in rv.data Even though it did not run any actual tests , we already know that our flaskr def tearDown ( self ) : ============= 3 passed in 0.23 seconds ============== def test_empty_db ( self ) : return client.get ( '/logout ' , follow_redirects=True ) application . The client will also keep track of cookies for us . test function to : file : ` test_flaskr.py ` , like this : : Ran 1 test in 0.034s assert b'Invalid password ' in rv.data source code from ` the examples ` _ . # : For example this might activate test helpers that have an","['docs/signals.rst', 'docs/testing.rst', 'examples/flaskr/tests/test_flaskr.py', 'flask/app.py']",Merge pull request # 2307 from neilvictorgrey/master
309,54a18a5e94116342b2f16a8d558cce366b644a64,2017-05-23 11:19:57-07:00,"it would make the code uglier . Include tests that cover any code changes you make . Make sure the test fails .. _Clone : https : //help.github.com/articles/fork-a-repo/ # step-2-create-a-local-clone-of-your-fork Create a branch to identify the issue you would like to work on ( e.g . .. _email : https : //help.github.com/articles/setting-your-email-in-git/ `` 2287-dry-test-suite `` ) Try to follow ` PEP8 < https : //www.python.org/dev/peps/pep-0008/ > ` _ , but you .. _committing as you go : http : //dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html # commit-your-changes Using your favorite editor , make your changes , ` committing as you go ` _ . First time setup .. _GitHub account : https : //github.com/join Start coding Try to follow ` PEP8 ` _ , but you may ignore the line length limit if following .. _create a pull request : https : //help.github.com/articles/creating-a-pull-request/ Include tests if your patch is supposed to solve a bug , and explain Configure git with your ` username ` _ and ` email ` _ . `` git remote add pallets https : //github.com/pallets/flask `` may ignore the line-length-limit if following it would make the code uglier . Download and install the ` latest version of git ` _ . .. _contributing-testsuite : .. _Fork : https : //github.com/pallets/flask/pull/2305 # fork-destination-box .. _latest version of git : https : //git-scm.com/downloads Add the main repository as a remote to update later . Fork Flask to your GitHub account by clicking the ` Fork ` _ button . .. _username : https : //help.github.com/articles/setting-your-username-in-git/ .. _PEP8 : https : //pep8.org/ without your patch . ` Run the tests . < contributing-testsuite_ > ` _ . clearly under which circumstances the bug happens . Make sure the test fails Push your commits to GitHub and ` create a pull request ` _ . ` Clone ` _ your GitHub fork locally . Make sure you have a ` GitHub account ` _ . Celebrate 🎉 without your patch .",['CONTRIBUTING.rst'],Merge pull request # 2305 from sorech02/updating_contributing_rst
310,c8e56d58077d29e2c9478f133b3c69ba73deead5,2017-05-23 08:34:22-07:00,"( 'False ' , False , False ) , rv = flask.helpers.make_response ( 'Hello ' ) ( 'No ' , False , False ) , class TestHelpers ( object ) : ] ) rv = flask.helpers.make_response ( ) ( `` , None , True ) , if expected_flag is None : assert get_debug_flag ( ) is None assert get_debug_flag ( default=True ) == expected_default_flag app = flask.Flask ( __name__ ) assert rv.status_code == 200 assert rv.data == b'Hello ' monkeypatch.setenv ( 'FLASK_DEBUG ' , debug ) with app.test_request_context ( ) : ( ' 0 ' , False , False ) , def test_get_debug_flag ( self , monkeypatch , debug , expected_flag , expected_default_flag ) : assert get_debug_flag ( ) == expected_flag ( 'True ' , True , True ) else : def test_make_response ( self ) : from flask.helpers import get_debug_flag , make_response assert rv.mimetype == 'text/html '",['tests/test_helpers.py'],Merge pull request # 2303 from MikeTheReader/master
311,378a11f99275a6b80d365a5d51d469844bf9ca17,2017-05-22 18:22:08-07:00,os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) By using `` client.get `` we can send an HTTP `` GET `` request to the application with yield client return client def teardown ( ) : def teardown ( ) : request.addfinalizer ( teardown ) os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) return client os.close ( db_fd ) os.close ( db_fd ) yield client from the filesystem . request.addfinalizer ( teardown ) By using ` client.get ` we can send an HTTP `` GET `` request to the application with os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) os.close ( db_fd ) from the filesystem in the os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) : func : ` teardown ` function . os.close ( db_fd ),"['docs/testing.rst', 'examples/flaskr/tests/test_flaskr.py']",For Issue # 2286 : Updating test_flaskr to use yield inside fixture
312,65b61aa7c202bb26df53e2cb271269fddd95aeee,2017-05-22 18:08:40-07:00,".. _uWSGI : http : //uwsgi-docs.readthedocs.io/en/latest/ Running ` uWSGI HTTP Router ` _ : : .. _uWSGI HTTP Router : http : //uwsgi-docs.readthedocs.io/en/latest/HTTP.html # the-uwsgi-http-https-router which makes it more complicated to setup than gunicorn . uwsgi -- http 127.0.0.1:5000 -- module myproject : app For a more optimized setup , see ` configuring uWSGI and NGINX ` _ . uWSGI .. _configuring uWSGI and NGINX : uwsgi.html # starting-your-app-with-uwsgi ` uWSGI ` _ is a fast application server written in C. It is very configurable",['docs/deploying/wsgi-standalone.rst'],Added uWSGI and example usage to stand-alone WSGI containers documentation ( # 2302 )
313,5b96e00972b2799728470ef9a3b49a99dff22cda,2017-05-22 18:06:31-07:00,"def teardown_app ( exc ) : rv = app.test_client ( ) .get ( '/bp ' ) app = flask.Flask ( __name__ ) def before_first_request ( ) : assert resp == b'request|after ' return 'request ' # first request bp = flask.Blueprint ( 'bp ' , __name__ ) def after_app ( response ) : def teardown_bp ( exc ) : assert rv.data == b'request|after ' return response assert evts == [ 'first ' ] + [ 'before ' , 'after ' , 'teardown ' ] * 2 response.data += b'|after ' evts.append ( 'first ' ) resp = app.test_client ( ) .get ( '/ ' ) .data assert evts == [ ] def bp_endpoint ( ) : app.register_blueprint ( bp ) def test_app_request_processing ( ) : evts.append ( 'after ' ) assert evts == [ 'before ' , 'after ' , 'teardown ' ] assert evts == [ 'first ' , 'before ' , 'after ' , 'teardown ' ] evts.append ( 'teardown ' ) evts.append ( 'before ' ) def before_bp ( ) : def test_request_processing ( ) : # second request def before_app ( ) : def after_bp ( response ) : evts = [ ] # Setup routes for testing # before first request",['tests/test_blueprints.py'],Merge pull request # 2301 from dawran6/test-bp-request-process
314,65fc888172fbff89a8354e8926a69b4515766389,2017-05-22 17:36:55-07:00,"We should also test that adding messages works . Add a new test function def test_empty_db ( client ) : pip install pytest rv = client.get ( '/ ' ) .. _pytest fixture : rv = client.post ( '/add ' , data=dict ( test , we close the file and remove it from the filesystem in the `` TESTING `` config flag is activated . What it does is disable the error assert b'Invalid password ' in rv.data return self.app.get ( '/logout ' , follow_redirects=True ) with flaskr.app.app_context ( ) : https : //docs.pytest.org/en/latest/fixture.html : func : ` teardown ` function . flaskr.app.config [ 'PASSWORD ' ] + ' x ' ) format the filename like `` test_ * .py `` , it will be auto-discoverable by import pytest the application for testing and initializes a new database . : : . os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) You can then use that with your favourite testing solution . In this documentation The origin of this quote is unknown and while it is not entirely correct , it rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , access the root of the application ( `` / `` ) . To do this , we add a new ================ test session starts ================ $ pytest subscriptions are helpful for unit testing for example . Say you want to rv = self.app.post ( '/add ' , data=dict ( not far from the truth . Untested applications make it hard to def logout ( self ) : import tempfile .. _pytest : sources from ` the examples ` _ . each individual test function is run . To delete the database after the ) , follow_redirects=True ) self.db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) : meth : ` ~unittest.TestCase.tearDown ` method . Additionally during setup the password=password framework for our tests . You can install it with `` pip `` , like so : : import tempfile You can then use that with your favourite testing solution . flaskr.app.config [ 'TESTING ' ] = True tests/test_flaskr.py : :test_empty_db PASSED def login ( self , username , password ) : def logout ( client ) : `` `` '' Test that messages work '' '' '' We should also test that adding messages works . Add a new test method rootdir : ./flask/examples/flaskr , inifile : setup.cfg username=username , flaskr.app.config [ 'PASSWORD ' ] ) collected 3 items invalid credentials . Add this new test function : : : mod : ` unittest ` to automatically identify the method as a test to run . db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) ) , follow_redirects=True ) https : //pytest.org password=password login ( client , flaskr.app.config [ 'USERNAME ' ] , create a Python file to store our tests ( : file : ` test_flaskr.py ` ) . When we ( : file : ` flaskr_tests.py ` ) and create a unittest skeleton there : : def client ( request ) : assert b'You were logged in ' in rv.data tests/test_flaskr.py : :test_messages PASSED OK rv = self.logout ( ) return client Add the following two methods to your ` FlaskrTestCase ` class : : flaskr.init_db ( ) $ pytest -v flaskr.app.testing = True def teardown ( ) : you get better error reports when performing test requests against the This test client will give us a simple interface to the application . We can catching during request handling so that you get better error reports when is also not far from the truth . Untested applications make it hard to collected 0 items of cookies for us . Ran 3 tests in 0.332s The origin of this quote is unknown and while it is not entirely correct , it is also performing test requests against the application . To delete the database after the test , we close the file and remove it tests/test_flaskr.py : :test_login_logout PASSED def login ( client , username , password ) : We begin by adding a tests directory under the application root . Then rv = self.login ( 'admin ' , 'default ' ) def test_messages ( client ) : client and initializes a new database . This function is called before : func : ` client ` that configures $ python flaskr_tests.py ============= 1 passed in 0.10 seconds ============== flaskr.app.config [ 'PASSWORD ' ] ) By using ` self.app.get ` we can send an HTTP `` GET `` request to the application with def test_login_logout ( self ) : In order to test the application , we add a second module invalid credentials . Add this new test to the class : : rv = self.login ( 'adminx ' , 'default ' ) For example , here is a helper context manager that can be used in a unit test def test_login_logout ( client ) : assert b'Invalid username ' in rv.data `` `` '' Make sure login and logout works '' '' '' self.app = flaskr.app.test_client ( ) assert b'No entries here so far ' in rv.data from the filesystem in the `` `` '' Start with a blank database . '' '' '' if __name__ == '__main__ ' : ... assert b'You were logged out ' in rv.data def setUp ( self ) : ` pytest ` _ to automatically identify the function as a test to run . class FlaskrTestCase ( unittest.TestCase ) : assert b'Invalid username ' in rv.data Next , we create a ` pytest fixture ` _ called we will use the : mod : ` unittest ` package that comes pre-installed with Python . unittest.main ( ) During setup , the `` TESTING `` config flag is activated . What test method to our class , like this : : pytest . Add the following two functions to your : file : ` test_flaskr.py ` file : : In this documentation we will use the ` pytest ` _ package as the base self.login ( 'admin ' , 'default ' ) For example , here is a helper context manager that can be used in a unittest application . return client.post ( '/login ' , data=dict ( rv = self.login ( 'admin ' , 'defaultx ' ) subscriptions are helpful for unittesting for example . Say you want to with flaskr.app.app_context ( ) : username=username , flaskr.init_db ( ) By using ` client.get ` we can send an HTTP `` GET `` request to the application with rv = login ( client , flaskr.app.config [ 'USERNAME ' ] + ' x ' , simple interface to the application , where we can trigger test requests to the This client fixture will be called by each individual test . It gives us a Because SQLite3 is filesystem-based , we can easily use the : mod : ` tempfile ` module access the root of the application ( `` / `` ) . To do this , we add a new def test_messages ( self ) : os.close ( self.db_fd ) rv = self.app.get ( '/ ' ) trigger test requests to the application , and the client will also keep track Ran 0 tests in 0.000s request.addfinalizer ( teardown ) client = flaskr.app.test_client ( ) Because SQLite3 is filesystem-based we can easily use the tempfile module return self.app.post ( '/login ' , data=dict ( this does is disable error catching during request handling , so that The code in the : meth : ` ~unittest.TestCase.setUp ` method creates a new test rv = logout ( client ) assert b'You were logged out ' in rv.data # : For example this might activate unittest helpers that have an import unittest collected 1 items assert b'You were logged in ' in rv.data =========== no tests ran in 0.07 seconds ============ Even though it did not run any actual tests , we already know that our `` flaskr `` assert b'No entries here so far ' in rv.data Even though it did not run any actual tests , we already know that our flaskr os.close ( db_fd ) def tearDown ( self ) : ============= 3 passed in 0.23 seconds ============== def test_empty_db ( self ) : return client.get ( '/logout ' , follow_redirects=True ) application . The client will also keep track of cookies for us . test function to : file : ` test_flaskr.py ` , like this : : Ran 1 test in 0.034s assert b'Invalid password ' in rv.data source code from ` the examples ` _ . # : For example this might activate test helpers that have an","['docs/signals.rst', 'docs/testing.rst', 'flask/app.py']",For Issue # 2286 : Replaces references to unittest in the documentation with pytest
315,0c949089566cfec9b0435ba6ada601acef8f09fa,2017-05-22 16:13:27-07:00,"] ) .. _ # 2297 : https : //github.com/pallets/flask/pull/2297 'Auto-detected `` { callable } ( ) '' in module `` { module } '' , but ' def create_app ( ) : 'you wrapped it in a WSGI middleware or you are ' matches = [ 'Failed to find application in module `` { module } '' . Are you sure ' elif len ( matches ) > 1 : raise NoAppException ( if isinstance ( app , Flask ) : matches = [ v for k , v in iteritems ( module.__dict__ ) if isinstance ( app , Flask ) : def make_app ( ) : return Flask ( 'appname2 ' ) return Flask ( 'appname ' ) except TypeError : 'could not call it without specifying arguments . '.format ( Auto-detect zero-argument app factory called `` create_app `` or `` make_app `` raise NoAppException ( assert isinstance ( find_best_app ( Module ) , Flask ) assert find_best_app ( Module ) .name == 'appname ' raise NoAppException ( app = app_factory ( ) 'it contains a Flask application ? Maybe you wrapped it in a WSGI ' def create_app ( foo ) : raise NoAppException ( 'Failed to find application in module `` % s '' . Are ' 'middleware . '.format ( module=module.__name__ ) class Module : from `` FLASK_APP `` . ( ` # 2297 ` _ ) return app try : # Search for app factory callables . callable=attr_name , module=module.__name__ v for k , v in iteritems ( module.__dict__ ) if isinstance ( v , Flask ) myapp = Flask ( 'appname1 ' ) pytest.raises ( NoAppException , find_best_app , Module ) for attr_name in ( 'app ' , 'application ' ) : ) ' Use `` FLASK_APP= { module } : name '' to specify the correct ' 'using a factory function . ' % module.__name__ ) if callable ( app_factory ) : ) 'you sure it contains a Flask application ? Maybe ' for attr_name in 'app ' , 'application ' : assert find_best_app ( Module ) == Module.myapp app_factory = getattr ( module , attr_name , None ) ' one . '.format ( module=module.__name__ ) 'Auto-detected multiple Flask applications in module `` { module } '' . ' if isinstance ( v , Flask ) ] ) for attr_name in ( 'create_app ' , 'make_app ' ) : if app is not None and isinstance ( app , Flask ) :","['CHANGES', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2297 from HndrkMkt/ # 2265-auto-detect-create-app-function
316,a693f22a5af210a752ab4b2b73b6568c9706a824,2017-05-22 15:29:46-07:00,"def test_template_global ( ) : assert 'get_answer ' not in app.jinja_env.globals.keys ( ) with app.app_context ( ) : app = flask.Flask ( __name__ ) app.register_blueprint ( bp ) bp = flask.Blueprint ( 'bp ' , __name__ ) # Tests assert app.jinja_env.globals [ 'get_answer ' ] is get_answer rv = flask.render_template_string ( ' { { get_answer ( ) } } ' ) return 42 assert rv == '42 ' # Make sure the function is not in the jinja_env already assert app.jinja_env.globals [ 'get_answer ' ] ( ) == 42 def get_answer ( ) : assert 'get_answer ' in app.jinja_env.globals.keys ( )",['tests/test_blueprints.py'],Merge pull request # 2299 from dawran6/test-bp-template_global
317,e706b5e5448b837f34d11107e9f9295f0e5a9780,2017-05-22 14:01:59-07:00,"return template_string ( ) c = app.test_client ( ) assert b'42 ' in answer_page_bytes app = flask.Flask ( __name__ ) def test_context_processing ( ) : def not_answer_context_processor ( ) : assert b'42 ' not in app_page_bytes answer_page_bytes = c.get ( '/bp ' ) .data # Register the blueprint ' { % if answer % } { { answer } } is the answer . { % endif % } ' answer_bp = flask.Blueprint ( 'answer_bp ' , __name__ ) ' { % if notanswer % } { { notanswer } } is not the answer . { % endif % } ' # Setup endpoints for testing def answer_context_processor ( ) : assert b'43 ' in answer_page_bytes def bp_page ( ) : assert b'43 ' in app_page_bytes template_string = lambda : flask.render_template_string ( # Blueprint local context processor return { 'answer ' : 42 } return { 'notanswer ' : 43 } ) # App global context processor def app_page ( ) : app.register_blueprint ( answer_bp ) app_page_bytes = c.get ( '/ ' ) .data",['tests/test_blueprints.py'],Merge pull request # 2298 from dawran6/test-bp-context
318,a0e38a8cf12ea2f7ea99f17c6568afdc1e634b72,2017-05-22 12:30:52-07:00,"return 'you shall not pass ' , 403 c = app.test_client ( ) def bp_forbidden ( ) : def forbidden_handler ( e ) : app.register_blueprint ( errors ) assert c.get ( '/forbidden ' ) .data == b'you shall not pass ' app = flask.Flask ( __name__ ) flask.abort ( 403 ) assert c.get ( '/nope ' ) .data == b'you shall not pass ' def app_forbidden ( ) : errors = flask.Blueprint ( 'errors ' , __name__ ) def test_blueprint_app_error_handling ( ) : app.register_blueprint ( forbidden_bp ) forbidden_bp = flask.Blueprint ( 'forbidden_bp ' , __name__ )",['tests/test_blueprints.py'],Merge pull request # 2295 from dawran6/test-blueprints
319,88b0213357d5ced865d5bfc4d54e9b14f2bbe146,2017-05-22 12:28:06-07:00,.. _Werkzeug documentation : http : //werkzeug.pocoo.org/docs/debug/ # using-the-debugger More information on using the debugger can be found in the ` Werkzeug documentation ` _ .,['docs/quickstart.rst'],Merge pull request # 2296 from tullyrankin/debugger-documentation-1625
320,f962720f7a835df086a11a1ba910e3210675b9b8,2017-05-22 11:43:57-07:00,"caught , the 500 internal server handler is called . In debug mode Do not force activate `` PRESERVE_CONTEXT_ON_EXCEPTION `` if debug mode is set to off however the exception is not further processed and bubbles up to the WSGI is not preserved . behavior as debug mode when attempting to debug an error that as it will cause your application to leak memory on exceptions . However however the exception is not further processed and bubbles up to the WSGI Now what happens on errors ? In production mode if an exception is not Now what happens on errors ? If you are not in debug mode and an exception is not debug mode the context is preserved , in production mode it 's not . as it will cause your application to leak memory on exceptions . However , Do not force activate `` PRESERVE_CONTEXT_ON_EXCEPTION `` in production mode debug mode the context is preserved . If debug mode is set to off , the context caught , the 500 internal server handler is called . In development mode behavior as in development mode when attempting to debug an error that",['docs/reqcontext.rst'],Merge pull request # 2293 from tullyrankin/debug-mode-2261
321,c590e820aadb9134a7fb19fe32c8ddae37199ec3,2017-05-22 11:25:02-07:00,"caught , the 500 internal server handler is called . In debug mode Do not force activate `` PRESERVE_CONTEXT_ON_EXCEPTION `` if debug mode is set to off however the exception is not further processed and bubbles up to the WSGI is not preserved . behavior as debug mode when attempting to debug an error that as it will cause your application to leak memory on exceptions . However however the exception is not further processed and bubbles up to the WSGI Now what happens on errors ? In production mode if an exception is not debug mode the context is preserved , in production mode it 's not . as it will cause your application to leak memory on exceptions . However , Now what happens on errors ? If you are not in debug mode if an exception is not Do not force activate `` PRESERVE_CONTEXT_ON_EXCEPTION `` in production mode debug mode the context is preserved . If debug mode is set to off , the context caught , the 500 internal server handler is called . In development mode behavior as in development mode when attempting to debug an error that",['docs/reqcontext.rst'],Updated documentation . Replaced term development mode with debug mode . # 2261
322,b11f7354d17ae4d7d11bc1b204cac98573f48965,2017-05-20 13:45:48-07:00,"# the permanent flag on the session itself . ) return super ( SecureCookieSession , self ) .setdefault ( key , default ) # : session cookie as keys when caching pages , preventing multiple users rv = c.get ( path ) def get ( self , key , default=None ) : def set_session ( ) : if header : # Delete case . If there is no session we bail early . # which performs a quick check to figure out if the cookie if session.accessed : session.permanent and app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] domain=domain , return `` # If the session is empty , return without setting the cookie . # Add a `` Vary : Cookie '' header if the session was accessed at all . else : CallbackDict.__init__ ( self , initial , on_update ) response.delete_cookie ( save_each = app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] flask.session [ 'test ' ] = 'test ' return session.modified or ( return flask.session.get ( 'test ' ) app.secret_key = 'testkey ' the `` SESSION_REFRESH_EACH_REQUEST `` config variable . If response.set_cookie ( # emitting a set-cookie header each request . The behavior expires=expires , httponly=httponly , domain=domain , path=path , secure=secure ) This check is usually skipped if the session was deleted . self.accessed = True expect ( '/getitem ' ) def __getitem__ ( self , key ) : the `` SESSION_REFRESH_EACH_REQUEST `` config is true , the cookie is permanent . `` `` '' Indicates whether a cookie should be set now or not . This is return save_each and session.permanent # : Cookie ` header to the response if the session is being accessed . This ) def test_session_vary_cookie ( ) : self.accessed = False # : allows caching proxy servers , like Varnish , to use both the URL and the # : been accessed in that request . This allows flask to append a ` Vary : app.session_cookie_name , path=path self.accessed = True app = flask.Flask ( __name__ ) # : from being served the same cache . secure=secure path=path , has been modified , the cookie is set . If the session is permanent and domain=domain , path=path ) expires=expires , return flask.session [ 'test ' ] expect ( '/set ' ) modified , if set to `` True `` it 's always set if the session is used by session backends to figure out if they should emit a if session.modified : it 's set to `` False `` then a cookie is only set if the session is assert rv.headers [ 'Vary ' ] == 'Cookie ' def get ( ) : should be set for this session cookie for this response . If the session # whole cookie . # SESSION_REFRESH_EACH_REQUEST config flag as well as def no_vary_header ( ) : set-cookie header or not . The default behavior is controlled by always set . assert 'Vary ' not in rv.headers return super ( SecureCookieSession , self ) .get ( key , default ) # Modification case . There are upsides and downsides to # is controlled by the : meth : ` should_set_cookie ` method httponly=httponly , c = app.test_client ( ) This check is usually skipped if sessions get deleted . def setdefault ( ) : domain=domain , return flask.session.setdefault ( 'test ' , 'default ' ) app.session_cookie_name , response.set_cookie ( app.session_cookie_name , val , def expect ( path , header=True ) : expect ( '/no-vary-header ' , False ) response.headers.add ( 'Vary ' , 'Cookie ' ) return True # If the session was modified to be empty we remove the `` `` '' Used by session backends to determine if a `` Set-Cookie `` header return super ( SecureCookieSession , self ) .__getitem__ ( key ) expect ( '/setdefault ' ) super ( SecureCookieSession , self ) .__init__ ( initial , on_update ) def getitem ( ) : # If the session is modified to be empty , remove the cookie . accessed = True def setdefault ( self , key , default=None ) : # : the accessed variable indicates whether or not the session object has expect ( '/get ' ) val , response.delete_cookie ( app.session_cookie_name , # should be set or not . This is controlled by the","['flask/sessions.py', 'tests/test_basic.py']",Merge pull request # 2288 from davidism/vary-cookies
323,f0a6dcfbb8cc526f19aa4e672d3b106c65cb18ca,2017-05-15 17:11:34-07:00,"any ( sep in filename for sep in _os_alt_seps ) filename.startswith ( ' .. / ' ) : ( ( ' a ' , ' b ' , ' c ' , ) , ' a/b/c ' ) , ( '/a ' , ' b/ .. / .. /c ' ) , ( '/a ' , ' .. /b/c ' ) , ( ( '/ ' , ' a/ ' , ' b/ ' , ' c/ ' ) , '/a/b/c ' ) , ( ( ' a/b ' , ' X/ .. /c ' ) , ' a/b/c ' , ) , or filename.startswith ( ' .. / ' ) directory = os.path.join ( directory , filename ) ( ( ' a ' , ' b ' , ' c ' ) , ' a/b/c ' ) , if os.path.isabs ( filename ) or \ for sep in _os_alt_seps : ( ( '/a ' , ' b/c ' , ) , '/a/b/c ' ) , raise NotFound ( ) ( ( '/a/b/c ' , './ ' ) , '/a/b/c/ . ' ) , filename == ' .. ' or \ parts = [ directory ] parts.append ( filename ) or os.path.isabs ( filename ) ( ( ' a/b/c ' , ' X/ .. ' ) , ' a/b/c/ . ' , ) , if ( ( '/a ' , ' b/ .. /b/ .. / .. /c ' ) , ) : ( '/a ' , ' b/ .. /b/ .. / .. /c ' , ) , ( ( '/a/b/c ' , `` , ) , '/a/b/c/ ' , ) , ( ( ' a/b/c ' , ) , ' a/b/c ' ) , ( ( '/a/b ' , ' c/X/ .. ' ) , '/a/b/c ' , ) , return directory ( ( ' a/b/c ' , ' X/ .. ' ) , ' a/b/c/ . ' ) , ( ( ' a/b/c ' , ) , ' a/b/c ' ) , ( ( '/a ' , ' b/c ' ) , '/a/b/c ' ) , ( '/a ' , ' .. /b/c ' , ) , or filename == ' .. ' ( ( ' a/b ' , ' X/ .. /c ' ) , ' a/b/c ' ) , if sep in filename : ( ( '/a/b/c ' , `` ) , '/a/b/c/ ' ) , ( ( '/a/b/c ' , './ ' , ) , '/a/b/c/ . ' , ) , return posixpath.join ( * parts ) ( ( '/a/b ' , ' c/X/ .. ' ) , '/a/b/c ' ) , ( ( '/ ' , ' a/ ' , ' b/ ' , ' c/ ' , ) , '/a/b/c ' ) , ( '/a ' , ' b/ .. / .. /c ' , ) ,","['flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 2284 from davidism/windows-safe_join
324,88120e9e9db38b6ccf851348542d5cd88e249881,2017-05-15 12:41:13-07:00,"Flask : : 65 ) This task can now be called in the background : Installing Celery Celery is on the Python Package Index ( PyPI ) , so it can be installed with If you jumped in and already executed the above code you will be Celery is a task queue for Python with batteries included . It used to return self.run ( * args , * * kwargs ) celery = Celery ( app.import_name , backend=app.config [ 'CELERY_RESULT_BACKEND ' ] , disappointed to learn that `` .wait ( ) `` will never actually return . have a Flask integration but it became unnecessary after some celery as a worker : : That 's because you also need to run a Celery worker to receive and execute the Running the Celery Worker With what we have above this is the minimal example of using Celery with ======================= or module that creates the ` celery ` object . abstract = True data or sending email , you do n't want to wait for it to finish during a app.import_name , guide in the official Celery documentation . Celery Based Background Tasks Configure ` First Steps with Celery < http : //docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html > ` _ Now that the worker is running , `` wait `` will return the result once the task Configuring Celery Celery is a separate Python package . Install it from PyPI using pip : : result = add_together.delay ( 23 , 42 ) standard Python tools like : command : ` pip ` or : command : ` easy_install ` : : broker=app.config [ 'CELERY_BROKER_URL ' ] An example task result.wait ( ) # 65 Now if you jumped in and already executed the above code you will be configure Celery 's broker and backend to use Redis , create a `` celery `` < http : //docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html > ` _ application using the factor from above , and then use it to define the task . : : TaskBase = celery.Task celery = Celery ( return TaskBase.__call__ ( self , * args , * * kwargs ) how to configure Celery using Flask , but assumes you 've already read the Celery Background Tasks request . Instead , use a task queue to send the necessary data to another Celery is a powerful task queue that can be used for simple background tasks That 's because you also need to run celery . You can do that by running If your application has a long running task , such as processing some uploaded process that will run the task in the background while the request returns restructuring of the internals of Celery with Version 3 . This guide fills is finished . or module that creates the `` celery `` object . Minimal Example disappointed to learn that your `` .wait ( ) `` will never actually return . class ContextTask ( TaskBase ) : ============================= Run a worker guide in the Celery documentation . class ContextTask ( celery.Task ) : as well as complex multi-stage programs and schedules . This guide will show you in the blanks in how to properly use Celery with Flask but assumes that > > > result = add_together.delay ( 23 , 42 ) task . : : broker=app.config [ 'CELERY_BROKER_URL ' ] ) immediately . backend=app.config [ 'CELERY_RESULT_BACKEND ' ] , This task can now be called in the background : : you generally already read the ` First Steps with Celery > > > result.wait ( ) Install Let 's write a task that adds two numbers together and returns the result . We",['docs/patterns/celery.rst'],Merge pull request # 2055 from geoffreybauduin/celery-documentation
325,ff361d32a9154531e1796c2e000e23f9d66ddcca,2017-05-13 22:13:53-07:00,"# if this is not an ip and app is mounted at the root , allow subdomain rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost:5000/ ' ) try : ' instead . ' rv = ' . ' + rv 'The session cookie domain is an IP address . This may not work ' socket.inet_pton ( family , value ) be used for the session cookie if session cookies are used . if rv == '.localhost ' : ) rv = None Show warning when session cookie domain is a bare hostname or an IP .. _ # 2282 : https : //github.com/pallets/flask/pull/2282 w = recwarn.pop ( UserWarning ) from .helpers import total_seconds , is_ip # remove any leading ' . ' since we 'll add that later rv = rv.rsplit ( ' : ' , 1 ) [ 0 ] .lstrip ( ' . ' ) Uses `` SESSION_COOKIE_DOMAIN `` if it is configured , otherwise ' `` { rv } .localdomain '' , and use that instead . '.format ( rv=rv ) # Google chrome does not like cookies set to .localhost , so rv = app.config [ 'SERVER_NAME ' ] `` `` '' Helpful helper method that returns the cookie domain that should SECRET_KEY='testing ' , # chop off the port which is usually not supported by browsers else : path = self.get_cookie_path ( app ) # we just go with no domain then . Flask documents anyways that app.config [ 'SESSION_COOKIE_DOMAIN ' ] = False app.config [ 'SESSION_COOKIE_DOMAIN ' ] = rv pass def test_session_ip_warning ( recwarn ) : return True ' Add an entry to your hosts file , for example ' Once detected ( or if not set at all ) , `` SESSION_COOKIE_DOMAIN `` is `` `` '' Returns the domain that should be set for the session cookie . assert 'domain ' not in rv.headers [ 'set-cookie ' ] .lower ( ) `` `` '' Determine if the given string is an IP address . return rv rv = ' . ' + app.config [ 'SERVER_NAME ' ] .rsplit ( ' : ' , 1 ) [ 0 ] : type value : str ip = is_ip ( rv ) return None import socket except socket.error : rv = app.config [ 'SESSION_COOKIE_DOMAIN ' ] rv = rv.lstrip ( ' . ' ) if rv is not None : def test_session_localhost_warning ( recwarn ) : warnings.warn ( ' '' { rv } '' is not a valid cookie domain , it must contain a `` . '' . ' # if False , return None app = flask.Flask ( __name__ ) assert 'domain=127.0.0.1 ' in rv.headers [ 'set-cookie ' ] .lower ( ) SERVER_NAME='localhost:5000 ' , if rv is not None : ' as intended in some browsers . Add an entry to your hosts ' ( ` # 2282 ` _ ) import warnings updated to avoid re-running the logic . assert ' '' localhost '' is not a valid cookie domain ' in str ( w.message ) # set explicitly , or cached from SERVER_NAME detection : param value : value to check # cross domain cookies need a fully qualified domain name if ip : # this should only come up with localhost if path ! = '/ ' : : rtype : bool return rv if rv else None app.config.update ( Allow IP address as exact session cookie domain . ( ` # 2282 ` _ ) if ' . ' not in rv : return False # hack around this by not setting the name , and show a warning SERVER_NAME='127.0.0.1:5000 ' , # chop off the port which is usually not supported by browsers `` `` '' if self.get_cookie_path ( app ) == '/ ' and not ip : flask.session [ 'testing ' ] = 42 assert 'cookie domain is an IP ' in str ( w.message ) ) # matching by adding a ' . ' prefix def is_ip ( value ) : return 'testing ' `` SESSION_COOKIE_DOMAIN `` is set if it is detected through `` SERVER_NAME `` . ' file , for example `` localhost.localdomain '' , and use that ' from .helpers import total_seconds for family in ( socket.AF_INET , socket.AF_INET6 ) : # If we infer the cookie domain from the server name we need if app.config [ 'SESSION_COOKIE_DOMAIN ' ] is not None : : return : True if string is an IP address if not rv : return app.config [ 'SESSION_COOKIE_DOMAIN ' ] rv = app.test_client ( ) .get ( '/ ' , 'http : //127.0.0.1:5000/ ' ) # set a cross domain cookie . # Chrome does n't allow names without a ' . ' falls back to detecting the domain based on `` SERVER_NAME `` . return rv if app.config [ 'SERVER_NAME ' ] is not None : # to check if we are in a subpath . In that case we ca n't def index ( ) : address , as these may not behave properly in some browsers , such as Chrome . # server name not set , cache False to return none next time","['CHANGES', 'flask/helpers.py', 'flask/sessions.py', 'tests/test_basic.py']",Merge pull request # 2282 from davidism/session-cookie-domain
326,716edfdb2921222eebf64176d416c761d21aed1d,2017-05-11 22:50:29-07:00,"request . response does not exist yet ? A common example for that would be a def call_after_request_callbacks ( response ) : One way is to avoid the situation . Very often that is possible . For instance does not exist yet ? A common example for that would be a callback instead . However , sometimes moving code there makes it more What happens if you want to modify the response at a point where the response instead . Sometimes however moving that code there is just not a very def after_this_request ( f ) : replace them . When the request handling starts , there is no response them . When the request handling starts , there is no response object yet . It is user in a cookie in the before-request function : : : meth : ` ~flask.Flask.after_request ` callback : : But what happens if you want to modify the response at a point where the One of the design principles of Flask is that response objects are created As an alternative , you can use : func : ` ~flask.after_this_request ` to register instance you can try to move that logic into an after-request callback be called at the end of the request . But we still need to call them . For the system . object yet . It is created as necessary either by a view function or by return f passed down a chain of potential callbacks that can modify them or replace some other component in the system . this the following function needs to be registered as The following decorator is the key . It registers a function on a list on # when the response exists , set a cookie with the language callback ( response ) One way is to avoid the situation . Very often that is possible . For g.after_request_callbacks.append ( f ) for callback in getattr ( g , 'after_request_callbacks ' , ( ) ) : response object . before-request function that wants to set a cookie on the response object . pleasant experience or makes code look very awkward . One of the design principles of Flask is that response objects are created and defer code execution from anywhere in the application , based on the current The Decorator user in a cookie in a : meth : ` ~flask.Flask.before_request ` callback : : and passed down a chain of potential callbacks that can modify them or created as necessary either by a view function or by some other component in : meth : ` ~flask.Flask.before_request ` callback that wants to set a cookie on the more complicated or awkward to reason about . callbacks that will execute after only the current request . This way you can This way you can defer code execution from anywhere in the application . end of the request . For example you can remember the current language of the Now you can use the ` after_this_request ` decorator to mark a function to the : data : ` ~flask.g ` object : : A Practical Example you can try to move that logic into a : meth : ` ~flask.Flask.after_request ` @ app.after_request from flask import g end of the request . For example you can remember the current language of the if not hasattr ( g , 'after_request_callbacks ' ) : Calling the Deferred return response to the : data : ` ~flask.g ` object and call them at the end of the request . As an alternative possibility you can attach a bunch of callback functions g.after_request_callbacks = [ ]",['docs/patterns/deferredcallbacks.rst'],Merge pull request # 2279 from davidism/docs-after_this_request
327,c01ddc59b72658ec4efdce0f54c1df3f13dd03d7,2017-05-11 22:32:00-07:00,"server might receive the request safely a second time without breaking from flask import request do_the_login ( ) things . With `` POST `` that would not be possible because it must only of the : meth : ` ~flask.Flask.route ` decorator to handle different HTTP methods . The following converters exist : bind a function to a URL . Here are some basic examples : : of keyword arguments , each corresponding to the variable part of the URL rule . with app.test_request_context ( ) : / return 'index ' application is supposed to handle that as if a `` GET `` request was This behavior allows relative URLs to continue working even if the trailing =========== =============================================== ` path ` like the default but also accepts slashes Unknown variable parts are appended to the URL as query parameters . a route only answers to `` GET `` requests . You can use the `` methods `` argument ` string ` accepts any text without a slash ( the default ) /user/John % 20Doe uses a trailing slash . It 's similar to a folder in a file system ; if you go to the desired page without having to hit the index page it is more For example , here we use the : meth : ` ~flask.Flask.test_request_context ` method transmission : in this situation a system between the browser and the and future HTML standards you can use the other methods as well . Furthermore received but to not deliver the actual content . In Flask you do n't Converter types : use it . and handles `` HEAD `` requests according to the the ` HTTP RFC ` _ . Likewise , though we are interacting with it through a Python shell . Have a look at the that for you . familiarize yourself with the HTTP methods as you work with Flask . By default , The browser tells the server to get the information , but it is only Flask to redirect to the canonical URL with the trailing slash . manually change hard-coded URLs . def projects ( ) : canonical URL with the trailing slash . are handled as the ` HTTP RFC ` _ ( the document describing the HTTP 2 . URL building will handle escaping of special characters and Unicode Web applications use different HTTP methods when accessing URLs . You should tells Flask to behave as though it 's handling a request even while we use a to do it this way . Consider that the connection is lost during 3 . URL building handles escaping of special characters and Unicode data Similar to `` POST `` but the server might trigger the store procedure very common : Modern web applications use meaningful URLs to help users . Users are more the URLs will stay unique , which helps search engines avoid indexing the `` projects `` endpoint has a trailing slash . In that sense , it is similar to explanation below . : ref : ` context-locals ` ) . But there is more to it ! You can make certain parts of the URL dynamic and In the second case , however , the URL definition lacks a trailing slash , return 'The project page ' HTTP ( the protocol web applications are speaking ) knows different methods for the URL . In the first case , the canonical URL for the `` projects `` endpoint You can do more ! You can make parts of the URL dynamic and attach multiple importantly , it allows you to change URLs in one go , without having to `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` def login ( ) : return 'The about page ' print ( url_for ( 'login ' ) ) `` float `` accepts positive floating point values precedents laid down by Apache and earlier HTTP servers . client wants to * do * with the requested page . The following methods are show_the_login_form ( ) In the second case , however , the URL is defined without a trailing slash , multiple times by overwriting the old values more than once . Now you : meth : ` ~flask.Flask.route ` decorator . Here are some examples : : that properly for you . `` POST `` have to deal with that at all , the underlying Werkzeug library handles Though they look similar , they differ in their use of the trailing slash in Python shell . See : ref : ` context-locals ` . : : /login ? next=/ Unique URLs / Redirection Behavior `` string `` ( default ) accepts any text without a slash return ' { } 's profile'.format ( username ) @ app.route ( '/about ' ) 1 . Reversing is often more descriptive than hard-coding the URLs . More do n't have to deal with that . It will also make sure that `` HEAD `` requests HTTP has become quite popular lately and browsers are no longer the only If `` GET `` is present , `` HEAD `` will be added automatically for you . You ` int ` accepts integers As you have seen above , the : meth : ` ~flask.Flask.route ` decorator is used to /login If `` GET `` is present , Flask automatically adds support for the `` HEAD `` method Take these two rules : : `` < variable_name > `` . Your function then receives the `` < variable_name > `` from flask import Flask , url_for ... print ( url_for ( 'login ' , next='/ ' ) ) return 'The about page ' automatically as well . transmit data to the server . You can add variable sections to a URL by marking sections with `` GET `` a folder on a filesystem . Accessing it without a trailing slash will cause This behavior allows relative URLs to continue working even if the trailing `` OPTIONS `` is automatically implemented for you . def show_subpath ( subpath ) : ` uuid ` accepts UUID strings attach multiple rules to a function . ========== ========================================== ... def login ( ) : pass `` int `` accepts positive integers ... print ( url_for ( 'index ' ) ) likely they will like the page and come back next time . 2 . You can change your URLs in one go instead of needing to remember to specification . Likewise , as of Flask 0.6 , `` OPTIONS `` is implemented for you introduction to HTTP methods and why they matter : Though they look rather similar , they differ in their use of the trailing `` DELETE `` with a trailing slash will produce a 404 `` Not Found '' error . protocol ) demands , so you can completely ignore that part of the HTTP form can submit to the server are `` GET `` and `` POST `` . But with JavaScript accessing URLs . By default , a route only answers to `` GET `` requests , but that To build a URL to a specific function , use the : func : ` ~flask.url_for ` function . def profile ( username ) : ... def index ( ) : pass clients that are using HTTP . For instance , many revision control systems supported by this URL . Starting with Flask 0.6 , this is implemented return do_the_login ( ) > > > with app.test_request_context ( ) : rather like the pathname of a file on UNIX-like systems . Accessing the URL the URLs will stay unique , which helps search engines avoid indexing the ` any ` matches one of the items provided slash is omitted , consistent with how Apache and other servers work . Also , likely to like a page and come back if the page uses a meaningful URL they can like the pathname of a file on UNIX-like systems . Accessing the URL with a `` /myapplication `` instead of `` / `` , : func : ` ~flask.url_for ` properly # show the subpath after /path/ `` uuid `` accepts UUID strings ... transparently . information to that URL and that the server must ensure the data is ... def profile ( username ) : pass that page and send it . This is probably the most common method . `` /myapplication `` instead of `` / `` - : func : ` ~flask.url_for ` will handle rules to a function . `` path `` like `` string `` but also accepts slashes `` PUT `` return show_the_login_form ( ) same page twice . trailing slash produces a 404 “ Not Found ” error . Unknown variable parts are appended to the URL as query parameters . Here are to try out : func : ` ~flask.url_for ` . : meth : ` ~flask.Flask.test_request_context ` > > > @ app.route ( '/ ' ) mobile devices with slower network connections . If the user can directly remember and use to directly visit a page . `` < variable_name > `` . Such a part is then passed as a keyword argument to your ` float ` like `` int `` but for floating point values Modern web applications have beautiful URLs . This helps people remember function . It accepts the name of the function as first argument and a number 4 . If your application is placed outside the URL root , for example , in below . It tells Flask to behave as though it is handling a request , even There are three good reasons for this : The browser tells the server that it wants to * post * some new the URLs , which is especially handy for applications that are used from slash is omitted , consistent with how Apache and other servers work . Also , can be changed by providing the `` methods `` argument to the If it can match URLs , can Flask also generate them ? Of course it can . To behind that module is to ensure beautiful and unique URLs based on app = Flask ( __name__ ) /login ? next=/ might be asking why this is useful , but there are some good reasons print ( url_for ( 'profile ' , username='John Doe ' ) ) handles that for you . /user/John % 20Doe You have no idea what an HTTP method is ? Worry not , here is a quick build a URL to a specific function you can use the : func : ` ~flask.url_for ` slash in the URL * definition * . In the first case , the canonical URL for the Use the : meth : ` ~flask.Flask.route ` decorator to bind a function to a URL . : : Remove the information at the given location . data transparently for you , so you do n't have to deal with them . of the argument like `` < converter : variable_name > `` . : : > > > @ app.route ( '/login ' ) > > > from flask import Flask , url_for be triggered once . function . Optionally a converter can be used by specifying a rule with Flask 's URL rules are based on Werkzeug 's routing module . The idea Take these two rules : : `` < converter : variable_name > `` . Here are some nice examples : : def about ( ) : ( This also uses the : meth : ` ~flask.Flask.test_request_context ` method , explained stored and only stored once . This is how HTML forms usually > > > app = Flask ( __name__ ) Provides a quick way for a client to figure out which methods are return 'The project page ' some examples : : The HTTP method ( also often called `` the verb '' ) tells the server what the as a keyword argument . Optionally , you can use a converter to specify the type To add variable parts to a URL you can mark these special sections as Now the interesting part is that in HTML4 and XHTML1 , the only methods a access the URL without a trailing slash , Flask redirects you to the It accepts the name of the function as its first argument and any number of interested in the * headers * , not the content of the page . An 3 . If your application is placed outside the URL root - say , in `` OPTIONS `` for you automatically . @ app.route ( '/projects/ ' ) remember to change URLs all over the place . 1 . Reversing is often more descriptive than hard-coding the URLs . `` HEAD `` def projects ( ) : return 'Subpath % s ' % subpath return 'login ' ... print ( url_for ( 'profile ' , username='John Doe ' ) ) The browser tells the server to just * get * the information stored on > > > @ app.route ( '/user/ < username > ' ) print ( url_for ( 'login ' , next='/ ' ) ) same page twice . print ( url_for ( 'index ' ) ) : : keyword arguments , each corresponding to a variable part of the URL rule . def about ( ) : def index ( ) : / ... print ( url_for ( 'login ' ) ) .. admonition : : Unique URLs / Redirection Behavior /login",['docs/quickstart.rst'],Merge pull request # 2277 from jlara310/master
328,9dd0a0a29f3e384043369a4e902d2a55e311795f,2017-05-11 14:37:31-07:00,"you can run to install . # CentOS , Fedora .. _install-create-env : Virtualenv to the rescue ! Virtualenv enables multiple side-by-side $ python3 -m venv virtenv Virtualenv is probably what you want to use during development , and if you have applications . But the more projects you have , the more likely it is that you .. code-block : : sh System-Wide Installation $ git clone https : //github.com/pallets/flask.git py -3 -m venv venv Flask depends on some external libraries , like ` Werkzeug * * Python 3.6 and above * * project . Packages installed for one project will not affect other projects or Activate the environment If you are on Windows and do n't have the `` easy_install `` command , you must could do that , but the most kick-ass method is virtualenv , so let 's have a look .. _virtualenv : https : //virtualenv.pypa.io/ ~~~~~~~~~~~~~~~~~~~~~ venv\Scripts\activate Virtual environments $ pip install Flask $ python setup.py develop New python executable in virtenv/bin/python package you will need is pip - this will let you install install it first . Check the : ref : ` windows-easy-install ` section for more .. _SimpleJSON : https : //simplejson.readthedocs.io/ If you want to work with the latest version of Flask , there are two ways : you chances are you want to use it for other projects besides Flask-based web On Windows : conflicting dependencies ? If you are planning on using python3 with the virtualenv , you do n't need to versions of Python libraries . Let 's face it : quite often libraries break * ` SimpleJSON ` _ is a fast JSON implementation that is compatible with .. _Werkzeug : http : //werkzeug.pocoo.org/ This is possible as well , though I do not recommend it . Just run .. _Blinker : https : //pythonhosted.org/blinker/ information about how to do that . Once you have it installed , run the same $ virtualenv virtenv your shell has changed to show the active environment ) . On Linux , virtualenv is provided by your package manager : Now you can continue to : ref : ` install-create-env ` . sudo yum install python-virtualenv If you are on Mac OS X or Windows , download ` get-pip.py ` _ , then : Python Version corresponding environment . On OS X and Linux , do the following : : sudo apt-get install python-virtualenv Finally , to install ` virtualenv ` _ , you can simply run : : .. _virtualenv : too . .. _install-install-virtualenv : anything else ( like virtualenv ) . Fortunately there is a `` bootstrap script '' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ( On Windows systems , run it in a command-prompt window with administrator You will need Python 2.6 or newer to get started , so be sure to have an check that you can now just type `` python `` to bring up the interpreter . : file : ` win_add2path.py ` file and run that . Open a * * new * * Command Prompt and So how do you get all that on your computer quickly ? There are many ways you Before you work on your project , activate the corresponding environment : pip install Flask Initialized empty Git repository in ~/dev/flask/.git/ development and in production . to protect Flask 's session cookie . the `` flask `` command and allows adding custom management commands . # Debian , Ubuntu virtualenv : : python3 -m venv venv installations of Python , one for each project . It does n't actually install update the code from the master branch : separate copies of Python , but it does provide a clever way to keep different installed . .. admonition : : A note on python3 and virtualenv * ` Blinker ` _ provides support for : ref : ` signals ` . : : $ sudo pip install virtualenv Activating a virtual environment version inside the virtualenv . Then all you have to do is run `` git pull sudo python2 Downloads/get-pip.py Either way , you should now be using your virtualenv ( notice how the prompt of We recommend using the latest version of Python 3 . Flask supports Python 3.3 To fix this , you should be able to navigate to your Python install directory ` get-pip.py ` _ * ` MarkupSafe ` _ comes with Jinja . It escapes untrusted input when rendering On Windows , as an administrator : the operating system 's packages . What problem does a virtual environment solve ? The more Python projects you shell access to your production machines , you 'll probably want to use it there , \Python27\python.exe -m pip install virtualenv A few seconds later and you are good to go . * ` ItsDangerous ` _ securely signs data to ensure its integrity . This is used cd myproject If you want to work with the latest Flask code before it 's released , install or These distributions will be installed automatically when installing Flask . project can break compatibility in another project . . venv/bin/activate can either let `` pip `` pull in the development version , or you can tell up-to-date Python 2.x installation . For using Flask with Python 3 have a $ sudo pip install Flask backwards compatibility , and it 's unlikely that any serious application will This will pull in the dependencies and activate the git head as the current \Python27\Scripts\virtualenv.exe venv `` pip `` with root privileges : : $ cd flask applications and servers . .. _ItsDangerous : https : //pythonhosted.org/itsdangerous/ Create a project folder and a : file : ` venv ` folder within : If you do n't currently have `` pip `` , then ` get-pip.py ` will install it for you . $ cd myproject # Arch $ mkdir myproject folder within : : sudo python2 -m pip install virtualenv If you are on Mac OS X or Linux , chances are that the following your own environment . I usually create a project folder and a : file : ` virtenv ` you can upgrade them by running : : > pip install -- upgrade pip setuptools Sometimes getting the standard `` Python packaging tools '' like `` pip `` , `` setuptools `` Optional dependencies Python , use the following command instead : install ` virtualenv ` _ . $ sudo apt-get install python-virtualenv Most often , once you pull up a command prompt you want to be able to type `` pip `` $ . virtenv/bin/activate $ deactivate pip install -U https : //github.com/pallets/flask/archive/master.tar.gz * ` Jinja ` _ is a template language that renders the pages your application These distributions will not be installed automatically . Flask will detect and on Windows , because it does n't know where those executables are ( give either a try ! ) . Python 's `` json `` module . It is preferred for JSON operations if it is virtualenv virtualenv venv ... templates to avoid injection attacks . What problem does virtualenv solve ? If you like Python as much as I do , have , the more likely it is that you need to work with different versions of sudo pacman -S python-virtualenv in your package manager . If you use Ubuntu , try : : command will work for you : : environments . If you 're using a modern version of Python , you can continue on .. _MarkupSafe : https : //pypi.python.org/pypi/MarkupSafe Create an environment Get the git checkout in a new virtualenv and run in development mode : : If you needed to install virtualenv because you are on an older version of ` pip ` and ` setuptools ` on Windows \Python27\python.exe Downloads\get-pip.py $ virtenv\Scripts\activate If you are using Python 2 , the venv module is not available . Instead , Python 3 comes bundled with the : mod : ` venv ` module to create virtual at that first . will be working with different versions of Python itself , or at least different .. _Jinja : http : //jinja.pocoo.org/ and `` python `` which will run those things , but this might not automatically happen Installing setuptools , pip ............ done . ( e.g : file : ` C : \Python27 ` ) , then go to : file : ` Tools ` , then : file : ` Scripts ` , then find the Living on the Edge Now , let 's move on . Enter the following command to get Flask activated in your privileges , and leave out `` sudo `` . ) it to operate on a git checkout . Either way , virtualenv is recommended . .. _windows-easy-install : mkdir myproject Use a virtual environment to manage the dependencies for your project , both in Virtual environments are independent groups of Python libraries , one for each It will probably install virtualenv on your system . Maybe it 's even * * Python2 * * > pip install virtualenv Now , whenever you want to work on a project , you only have to activate the use them if you install them . Creating a virtual environment Living on the edge ~~~~~~~~~~~~~~~~~~~~~~~~ Install virtualenv Install Flask < http : //werkzeug.pocoo.org/ > ` _ and ` Jinja2 < http : //jinja.pocoo.org/ > ` _ . If you are a Windows user , the following command is for you : : Python libraries , or even Python itself . Newer versions of libraries for one Werkzeug is a toolkit for WSGI , the standard Python interface between web There is a little change in how you create a virtualenv depending on which python-version you are currently using . Your shell prompt will change to show the name of the activated environment . and `` virtualenv `` can be a little trickier , but nothing very hard . The crucial And if you want to go back to the real world , use the following command : : ~~~~~~~~~~~~~~~~~~ Then you can be off on your way following the installation instructions above . It should be double-clickable once you download it . If you already have `` pip `` , to the next section . * ` Click ` _ is a framework for writing command line applications . It provides Finished processing dependencies for Flask .. _Click : http : //click.pocoo.org/ and newer , Python 2.6 and newer , and PyPy . serves . commands as above , but without the `` sudo `` prefix . If you 're using Python 2 , see : ref : ` install-install-virtualenv ` first . project environments isolated . Let 's see how virtualenv works . Dependencies install `` virtualenv `` . Python3 has built-in support for virtual environments . Once you have virtualenv installed , just fire up a shell and create ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ have zero dependencies . So what do you do if two or more of your projects have * ` Werkzeug ` _ implements WSGI , the standard Python interface between .. code-block : : bat After doing this , the prompt of your shell should be as familiar as before . Within the activated environment , use the following command to install Flask : origin `` to update to the latest version . Jinja2 renders templates . look at : ref : ` python3-support ` . applications and a variety of servers for both development and deployment .",['docs/installation.rst'],Merge pull request # 2278 from davidism/installation-docs
329,5b83f11398c8d0f8f4158af05d187fc03508f01a,2017-05-09 11:04:23-07:00,"your own environment . I usually create a project folder and a : file : ` venv ` * * Python2 * * If you are planning on using python3 with the virtualenv , you do n't need to $ virtualenv venv $ venv\Scripts\activate New python executable in venv/bin/python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ $ virtenv\Scripts\activate .. admonition : : A note on python3 and virtualenv Activating a virtual environment $ python3 -m venv virtenv $ . venv/bin/activate install `` virtualenv `` . Python3 has built-in support for virtual environments . There is a little change in how you create a virtualenv depending on which python-version you are currently using . $ . virtenv/bin/activate Creating a virtual environment * * Python 3.6 and above * * $ virtualenv virtenv : : New python executable in virtenv/bin/python your own environment . I usually create a project folder and a : file : ` virtenv ` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",['docs/installation.rst'],Merge pull request # 2213 from runartrollet/doc_virtenv_p3
330,d2a0b2911b9a32fb845d2ed174b677bd5833f917,2017-05-09 08:47:23-07:00,"domains are used , this should be app under a subpath you need to tell your WSGI container the `` SCRIPT_NAME `` session cookie as path value . If Note that to actually serve your Flask set . If it 's also `` None `` `` '/ ' `` is used . be set to the path where the application `` APPLICATION_ROOT `` If the application does not occupy a whole domain or subdomain this can WSGI environment variable . `` None `` . cookie if `` SESSION_COOKIE_PATH `` is n't `` APPLICATION_ROOT `` The path value used for the session is configured to live . This is for",['docs/config.rst'],Merge pull request # 2210 from Larivact/patch-2
331,17685da8c069a1698b893cb6f5e41957f77894d2,2017-05-09 08:44:58-07:00,"return jsonify_error ( ex ) if request.path.startswith ( '/api/ ' ) : return ex easily override templates that a blueprint provides in the actual application . the application instance has no way of knowing which blueprint errorhandler it should run if given an invalid URL . If you would like to execute different at the application level using the `` request `` proxy object : : folder . priority than the actual application 's template folder . That way you can folder . easily override templates that a blueprint provides in the actual application . The template folder is added to the search path of templates but with a lower priority than the actual application 's template folder . That way you can concerning handlers for 404 and 405 exceptions . These errorhandlers are only handling strategies for these errors based on URL prefixes , they may be defined resource folder . The template folder is added to the search path of templates but with a lower invoked from an appropriate `` raise `` statement or a call to `` abort `` in another of the blueprint 's view functions ; they are not invoked by , e.g. , an invalid URL resource folder . else : access . This is because the blueprint does not `` own '' a certain URL space , so def _handle_api_error ( ex ) : Most errorhandlers will simply work as expected ; however , there is a caveat",['docs/blueprints.rst'],Merge pull request # 1942 from jmsdvl/fix-1935
332,255375d72ce4f0eebb2ccdb7d10591c9abbf6d09,2017-05-04 18:42:33-07:00,extensions.append ( 'sphinxcontrib.log_cabinet ' ) print ( 'Changelog directives will not be re-organized . ' ) try : else : print ( 'sphinxcontrib-log-cabinet is not installed . ' ) __import__ ( 'sphinxcontrib.log_cabinet ' ) except ImportError :,['docs/conf.py'],Merge pull request # 2271 from davidism/collapse-changelogs
333,7bd54e9bd61dc6d02237fd5d473fa92030a1ff33,2017-04-30 08:48:22-07:00,"The status code of the response will not be set to the handler 's code . Make request URL is matched . It is passed the instance of the error being handled , HTTP status code when returning a response . app.register_error_handler ( 404 , page_not_found ) < h1 > Page Not Found < /h1 > An error handler is a function , just like a view function , but it is { % block title % } Page Not Found { % endblock % } from flask import Flask , render_template a handler . addition to explicit 500 errors . def create_app ( config_filename ) : When using the : ref : ` application factory pattern < app-factories > ` : : can be registered for a status code , like 404 , or for an exception class . decorator or the : meth : ` ~flask.Flask.register_error_handler ` method . A handler can be a different error : a handler for internal server errors will be called when an error happens and is passed that error . The error is most likely a : exc : ` ~werkzeug.exceptions.HTTPException ` , but in one case it which is most likely a : exc : ` ~werkzeug.exceptions.HTTPException ` . An error def page_not_found ( e ) : sure to provide the appropriate HTTP status code when returning a response from { % extends `` layout.html '' % } Here an example implementation for a `` 404 Page Not Found '' exception : : raised , similar to how a view is a function that returns a response when a An error handler is a function that returns a response when a type of error is app = Flask ( __name__ ) # note that we set the 404 status explicitly handler for `` 500 Internal Server Error '' will be passed uncaught exceptions in { % block body % } < p > What you were looking for is just not there . passed other exception instances as well if they are uncaught . Please note that if you add an error handler for `` 500 Internal Server debug mode . Instead , the interactive debugger will be shown . { % endblock % } < p > < a href= '' { { url_for ( 'index ' ) } } '' > go somewhere nice < /a > return render_template ( '404.html ' ) , 404 { % extends `` layout.html '' % } decorator and the error code of the exception . Keep in mind that Flask < p > < a href= '' { { url_for ( 'index ' ) } } '' > go somewhere nice < /a > { % endblock % } return app < p > What you were looking for is just not there . { % block body % } will * not * set the error code for you , so make sure to also provide the Error '' , Flask will not trigger it if it 's running in Debug mode . < h1 > Page Not Found < /h1 > { % block title % } Page Not Found { % endblock % } A handler for `` 500 Internal Server Error '' will not be used when running in Here is an example implementation for a `` 404 Page Not Found '' exception : :",['docs/patterns/errorpages.rst'],Merge pull request # 2077 from liebald/patch-1
334,39d55525ac8f674b40be5d1d3160b9fd33ce501a,2017-04-26 10:43:18-07:00,"rule_methods = [ ) click.echo ( row.format ( * headers ) .strip ( ) ) assert 'GET , HEAD , OPTIONS , POST ' not in output [ 'aaa_post ' , 'yyy_get_post ' , 'static ' ] , ) def test_all_methods ( self , invoke ) : from functools import update_wrapper def test_appgroup ( ) : for expect , line in zip ( order , output.splitlines ( ) [ 2 : ] ) : 'Method to sort routes by . `` match '' is the order that Flask will match ' result = invoke ( [ 'routes ' ] ) from functools import update_wrapper def create_app ( info ) : row = ' { { 0 : < { 0 } } } { { 1 : < { 1 } } } { { 2 : < { 2 } } } '.format ( * widths ) from . import __version__ assert default_output == endpoint_output assert 'GET , HEAD , OPTIONS , POST ' in output ( ` # 2259 ` _ ) cli = FlaskGroup ( create_app=create_app ) def test_sort ( self , invoke ) : result.output ' , '.join ( sorted ( rule.methods - ignored_methods ) ) for rule in rules # do this instead of startswith for nicer pytest output .. _ # 2259 : https : //github.com/pallets/flask/pull/2259 ] def test_with_appcontext ( ) : rules = sorted ( rules , key=lambda rule : sorted ( rule.methods ) ) def test_print_exceptions ( runner ) : pass default='endpoint ' , app = Flask ( __name__ ) if sort in ( 'endpoint ' , 'rule ' ) : type=click.Choice ( ( 'endpoint ' , 'methods ' , 'rule ' , 'match ' ) ) , elif sort == 'methods ' : headers = ( 'Endpoint ' , 'Methods ' , 'Rule ' ) from flask.cli import AppGroup , FlaskGroup , NoAppException , ScriptInfo , \ help= ( return app def invoke ( self , runner ) : output = invoke ( [ 'routes ' , ' -- all-methods ' ] ) .output def test_with_appcontext ( runner ) : ' -- sort ' , '-s ' , for rule , methods in zip ( rules , rule_methods ) : [ 'static ' , 'yyy_get_post ' , 'aaa_post ' ] , max ( len ( rule.rule ) for rule in rules ) , self.add_command ( routes_command ) click.echo ( row.format ( * ( '- ' * width for width in widths ) ) ) rules = list ( current_app.url_map.iter_rules ( ) ) from . import __version__ [ 'yyy_get_post ' , 'static ' , 'aaa_post ' ] , app.testing = True self.expect_order ( def expect_order ( self , order , output ) : def yyy_get_post ( x , y ) : click.echo ( row.format ( rule.endpoint , methods , rule.rule ) .rstrip ( ) ) [ 'aaa_post ' , 'static ' , 'yyy_get_post ' ] , ' -- all-methods ' , is_flag=True , from flask.cli import cli , AppGroup , FlaskGroup , NoAppException , ScriptInfo , \ default_output = invoke ( [ 'routes ' ] ) .output ) max ( len ( methods ) for methods in rule_methods ) , return CliRunner ( ) Add `` routes `` CLI command to output routes registered on the application . def aaa_post ( ) : invoke ( [ 'routes ' , '-s ' , 'rule ' ] ) .output def test_print_exceptions ( ) : def test_simple ( self , invoke ) : runner = CliRunner ( ) assert result.exit_code == 0 widths = [ max ( len ( h ) , w ) for h , w in zip ( headers , widths ) ] 'routes when dispatching a request . ' from operator import attrgetter widths = ( invoke ( [ 'routes ' , '-s ' , 'methods ' ] ) .output def routes_command ( sort , all_methods ) : assert line [ : len ( expect ) ] == expect return partial ( runner.invoke , cli ) def test_appgroup ( runner ) : def test_flaskgroup ( runner ) : output = invoke ( [ 'routes ' ] ) .output max ( len ( rule.endpoint ) for rule in rules ) , ignored_methods = set ( ( ) if all_methods else ( 'HEAD ' , 'OPTIONS ' ) ) rules = sorted ( rules , key=attrgetter ( sort ) ) def test_flaskgroup ( ) : class TestRoutes : # skip the header and match the start of each row endpoint_output = invoke ( [ 'routes ' , '-s ' , 'endpoint ' ] ) .output invoke ( [ 'routes ' , '-s ' , 'match ' ] ) .output `` `` '' Show all registered routes with endpoints and methods . '' '' '' def runner ( ) : from functools import partial help= '' Show HEAD and OPTIONS methods . '' from .globals import current_app","['CHANGES', 'flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2259 from davidism/routes-command
335,71b7c4f5f89ea5e95dc7881797ca7d3a06b97e2f,2017-04-25 12:06:39-07:00,"# : Each of these functions has the chance to modify the dictionary : meth : ` before_request ` functions . The function will be called without any arguments . If it returns a # : decorator . # : are called to modify the dictionary of values in place . The key # : first request to this instance . To register a function , use the If any of these functions returns a value , it 's handled as common language code value and place it in `` g `` rather than pass it to # : function here , use the : meth : ` before_request ` decorator . # : beginning of each request . The key of the dictionary is the name of # : the blueprint this function is active for , or `` None `` for all # : : attr : ` before_request_funcs ` functions . The key of the dictionary is # : A dictionary with lists of functions that can be used as URL the logged in user from the session . The function will be called without any arguments . the actual : meth : ` before_request ` functions are called . For example , this can be used to open a database connection , or to load # : the name of the blueprint this function is active for , or `` None `` the view , and further request handling is stopped . every view . # : A list of functions that will be called at the beginning of the `` `` '' # : `` None `` here is used for application wide # : A dictionary with lists of functions that are called before the # : A dictionary with lists of functions that will be called at the # : A dictionary with lists of functions that should be called at the non-None value , the value is handled as if it was the return value from further request handling is stopped . # : beginning of the request . The key of the dictionary is the name of The function is passed the endpoint name and values dict . The return The function can modify the values captured from the matched url before if it was the return value from the view and further functions in the application . These functions will be called before the # : This can for example be used to open database connections or # : first request to this instance . To register a function here , use current blueprint ( if any ) . Then calls : attr : ` before_request_funcs ` value is ignored . `` `` '' Called before the actual request dispatching and will call each : meth : ` before_request ` decorated function , passing no This also triggers the : meth : ` url_value_preprocessor ` functions before `` `` '' Register a URL value preprocessor function for all view # : requests . To register a function , use the : meth : ` before_request ` they are passed to the view . For example , this can be used to pop a value is handled as if it was the return value from the view , and # : : meth : ` before_first_request ` decorator . # : the blueprint this function is active for , `` None `` for all requests . functions of the application . It 's called before the view functions `` `` '' # : getting hold of the currently logged in user . To register a # : the : meth : ` before_first_request ` decorator . # : for all requests . To register a function , use registered with the app and the blueprint . # : A lists of functions that should be called at the beginning of the are called and can modify the url values provided . `` `` '' Called before the request is dispatched . Calls # : callbacks , otherwise the key is the name of the blueprint . request handling is stopped . # : value processor functions . Whenever a URL is built these functions If the function returns a non-None value , it 's handled as `` `` '' Registers a function as URL value preprocessor for all view If any : meth : ` before_request ` handler returns a non-None value , the : attr : ` url_value_preprocessors ` registered with the app and the arguments . # : : meth : ` url_value_preprocessor ` .",['flask/app.py'],Merge pull request # 2258 from davidism/preprocess_request-docs
336,970a8009f1842d6be8c04f3adea3c2ec97d7eff5,2017-04-25 08:46:22-07:00,"if isinstance ( status_or_headers , ( dict , list ) ) : else : else : rv.status_code = status assert str ( e ) == 'View function did not return a response ' assert rv.data == b'Hello world ' # When we create a response object directly , we let the constructor app.testing = True # make sure the body is an instance of the response class pytest.raises ( TypeError , c.get , '/bad_wsgi ' ) len_rv = len ( rv ) from .wrappers import Request , Response from .globals import _request_ctx_stack , request , session , g rv , status_or_headers , headers = rv + ( None , ) * ( 3 - len ( rv ) ) rv = c.get ( '/text_headers ' ) rv = c.get ( '/wsgi ' ) without returning , is not allowed . The following types are allowed ' ( body , status ) , or ( body , headers ) . ' ) from .helpers import _PackageBoundObject , url_for , get_flashed_messages , \ with pytest.raises ( TypeError ) as e : if status_or_headers is not None : from . import cli , json A response object is created with the bytes as the body . `` str `` ( `` unicode `` in Python 2 ) return NotFound ( ) from functools import update_wrapper ' statement . ' other : class : ` ~werkzeug.wrappers.Response ` class status=status_or_headers ) from functools import update_wrapper `` Flask.make_response `` raises `` TypeError `` instead of `` ValueError `` for if isinstance ( rv , ( tuple , list ) ) : ' { e } \nThe view function did not return a valid ' rv = self.response_class ( rv , status=status , headers=headers ) status = headers = None @ app.route ( '/args ' ) .. tabularcolumns : : |p { 3.5cm } |p { 9.5cm } | assert rv.mimetype == 'text/plain ' assert rv.status_code == 404 `` `` '' Convert the return value from a view function to an instance of assert 'returned None ' in str ( e ) _default_template_ctx_processor ======================= =========================================== @ app.route ( '/unicode ' ) rv4 = c.get ( '/args_header ' ) from .signals import request_started , request_finished , got_request_exception , \ # let the response class set the status and headers instead of return flask.Response ( 'Hello world ' , 404 ) , { def from_response_headers ( ) : rv = c.get ( '/response_status ' ) The object is coerced to : attr : ` response_class ` . request_finished , request_started , request_tearing_down `` `` '' Converts the return value from a view function to a real tuples . If `` body `` is a : attr : ` response_class ` instance , : class : ` unicode ` a response object is created with the InternalServerError , MethodNotAllowed , default_exceptions `` tuple `` from .signals import appcontext_tearing_down , got_request_exception , \ if isinstance ( rv , tuple ) : rv = c.get ( '/full_tuple ' ) if isinstance ( status_or_headers , string_types ) : rv.status_code = status_or_headers def from_bad_type ( ) : assert `` Expected ValueError '' must return a response . Returning `` None `` , or the view ending `` bytes `` ( `` str `` in Python 2 ) where ` response ` is any of the except TypeError as e : assert rv.status_code == 200 ) @ app.route ( '/args_header ' ) or an integer and ` headers ` is a list or headers ) `` or `` ( response , headers ) `` assert rv3.mimetype == 'text/html ' from . import json , cli def from_bad_wsgi ( ) : return 'Hello ' , pytest.raises ( TypeError , c.get , '/large_tuple ' ) string encoded to utf-8 as body raise ValueError ( 'View function did not return a response ' ) assert rv2.data == b'Hello ' assert rv4.headers [ ' X-Bar ' ] == 'Foo ' from werkzeug.routing import Map , Rule , RequestRedirect , BuildError from werkzeug.exceptions import HTTPException , InternalServerError , \ rv , headers = rv request_tearing_down , appcontext_tearing_down from .config import ConfigAttribute , Config from ._compat import reraise , string_types , text_type , integer_types # evaluate a WSGI callable , or coerce a different response # waiting to do it manually , so that the class can handle any assert c.get ( '/unicode ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) assert rv2.status_code == 200 app = flask.Flask ( __name__ ) headers = status_or_headers = None from werkzeug.datastructures import ImmutableDict , Headers assert 'tuple must have the form ' in str ( e ) rv , status , headers = rv # some extra logic involved when creating these objects with _default_template_ctx_processor @ app.route ( '/string ' ) def from_tuple ( ) : assert rv.headers [ ' X-Foo ' ] == 'Test ' ' Response instance , or WSGI callable , but it was a ' : class : ` tuple ` A tuple in the form `` ( response , status , response object that is an instance of : attr : ` response_class ` . ' response . The return type must be a string , tuple , ' rv = self.response_class.force_type ( rv , request.environ ) raise TypeError ( 'The view function did not return a valid response tuple . ' # extend existing headers with provided headers def from_two_args_tuple ( ) : assert rv.headers [ ' X-Bar ' ] == 'Foo ' # special logic assert rv.status_code == 500 assert rv2.headers [ ' X-Foo ' ] == 'Test ' def from_text_headers ( ) : : class : ` str ` a response object is created with the ' { rv.__class__.__name__ } . '.format ( e=e , rv=rv ) from .ctx import RequestContext , AppContext , _AppCtxGlobals rv.status = status_or_headers if len_rv == 3 : # prefer the status if it was provided def from_string ( ) : assert c.get ( '/text ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) def from_text ( ) : if isinstance ( status , ( text_type , bytes , bytearray ) ) : def from_text_status ( ) : # unpack tuple returns assert 'it was a bool ' in str ( e ) return None MethodNotAllowed , BadRequest , default_exceptions locked_cached_property , _endpoint_from_view_func , find_package , \ : attr : ` response_class ` . `` status `` overwrites the exiting value and `` headers `` are : param rv : the return value from the view function . The view function ) `` ( body , headers ) `` , where `` body `` is any of the other types return app.response_class ( 'Hello world ' , 400 ) , 500 assert rv2.mimetype == 'text/plain ' app.testing = True new_error = TypeError ( string as body reraise ( TypeError , new_error , sys.exc_info ( ) [ 2 ] ) rv = c.get ( '/args ' ) assert b'Not Found ' in rv.data allowed here , `` status `` is a string or an integer , and return 'Hello ' , 234 , { ' X-Foo ' : 'Bar ' } , ' ? ? ? ' : param rv : the return value from the view function rv , status = rv from .globals import _request_ctx_stack , g , request , session from werkzeug.datastructures import ImmutableDict ' function either returned None or ended without a return ' used to create a response object . assert rv3.data == b'Hi , status ! ' _endpoint_from_view_func , find_package , get_debug_flag , \ get_flashed_messages , locked_cached_property , url_for rv = self.response_class ( rv , headers=headers , assert rv.status_code == 400 rv = c.get ( '/response_headers ' ) type is invalid . ( ` # 2256 ` _ ) # specific values ( like default content type selection ) . rv2 = c.get ( '/two_args ' ) from .helpers import _PackageBoundObject , \ def test ( ) : assert rv4.headers [ ' X-Foo ' ] == 'Bar ' : func : ` callable ` from threading import Lock 'The view function did not return a valid response . The ' extended . if status is not None : @ app.route ( '/two_args ' ) as the body . def from_status_tuple ( ) : app = flask.Flask ( __name__ ) assert c.get ( '/string ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) from .config import Config , ConfigAttribute # class to the correct type try : return True def test_response_types ( ) : def from_full_tuple ( ) : assert rv4.data == b'Hello world ' The function is called as a WSGI application . The result is try : # a 3-tuple is unpacked directly assert rv.data == b'Hi , status ! ' and buffered as response object rv3 = c.get ( '/args_status ' ) else : @ app.route ( '/args_status ' ) def test_response_creation ( ) : A response object is created with the string encoded to UTF-8 # other sized tuples are not allowed return lambda : None rv = c.get ( '/text_status ' ) status = headers = None assert rv4.status_code == 404 def from_unicode ( ) : from werkzeug.routing import BuildError , Map , RequestRedirect , Rule # set the headers and status . We do this because there can be def from_large_tuple ( ) : : attr : ` response_class ` the object is returned unchanged status_or_headers = headers = None return flask.Response ( 'Hello world ' , 404 , { ' X-Foo ' : 'Baz ' } ) , { assert rv.data == b'Hello ' assert rv3.status_code == 400 def from_none ( ) : elif len_rv == 2 : c = app.test_client ( ) def test_none_response ( ) : The following types are allowed for ` rv ` : def from_small_tuple ( ) : c.get ( '/none ' ) app.test_client ( ) .get ( '/ ' ) except ValueError as e : types defined here , ` status ` is a string def from_wsgi ( ) : `` headers `` is a dictionary or a list of `` ( key , value ) `` assert rv.headers.getlist ( ' X-Foo ' ) == [ 'Baz ' , 'Bar ' ] a dictionary with header values . : attr : ` response_class ` else : ' The tuple must have the form ( body , status , headers ) , ' assert c.get ( '/bytes ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) def test_response_type_errors ( ) : Either `` ( body , status , headers ) `` , `` ( body , status ) `` , or c.get ( '/bad_type ' ) for `` view_rv `` : a WSGI function the function is called as WSGI application rv = self.response_class.force_type ( rv , request.environ ) bad response types . The error messages have been improved to describe why the rv.status = status .. _ # 2256 : https : //github.com/pallets/flask/pull/2256 from werkzeug.exceptions import BadRequest , HTTPException , \ c.get ( '/small_tuple ' ) @ app.route ( '/ ' ) # decide if a 2-tuple has status or headers # the body must not be None raise TypeError ( from .wrappers import Request , Response assert rv.mimetype == 'text/html ' from threading import Lock if isinstance ( rv [ 1 ] , ( Headers , dict , tuple , list ) ) : def from_bytes ( ) : The object is returned unchanged . def from_response_status ( ) : pass def from_response_instance_status_tuple ( ) : get_debug_flag from .ctx import AppContext , RequestContext , _AppCtxGlobals from ._compat import integer_types , reraise , string_types , text_type pass headers , status_or_headers = status_or_headers , None","['CHANGES', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 2256 from davidism/refactor-make_response
337,74b3f7e04cf51df313aac47175b752663ab0ed44,2017-04-24 10:16:20-07:00,"def object_hook ( self , obj ) : kwargs.setdefault ( 'cls ' , current_app.json_encoder ) return flask.json.JSONEncoder.default ( self , o ) return X ( obj [ '_foo ' ] ) c = app.test_client ( ) return obj kwargs.setdefault ( 'cls ' , current_app.json_decoder ) def test_blueprint_json_customization ( self ) : class MyDecoder ( flask.json.JSONDecoder ) : def __init__ ( self , * args , * * kwargs ) : app.testing = True blue.json_encoder = MyEncoder flask.json.JSONDecoder.__init__ ( self , * args , * * kwargs ) blue.json_decoder = MyDecoder rv = c.post ( '/bp ' , data=flask.json.dumps ( { kwargs.setdefault ( 'object_hook ' , self.object_hook ) self.val = val assert rv.data == b ' '' < 42 > '' ' json_decoder = None # : Blueprint local JSON decoder class to use . if isinstance ( o , X ) : def __init__ ( self , val ) : return ' < % d > ' % o.val def index ( ) : json_encoder = None ' x ' : { '_foo ' : 42 } } ) , content_type='application/json ' ) bp.json_decoder if bp and bp.json_decoder class X ( object ) : kwargs.setdefault ( 'cls ' , if len ( obj ) == 1 and '_foo ' in obj : else current_app.json_encoder ) return flask.json.dumps ( flask.request.get_json ( ) [ ' x ' ] ) app = flask.Flask ( __name__ ) bp = current_app.blueprints.get ( request.blueprint , None ) if has_request_context ( ) else None class MyEncoder ( flask.json.JSONEncoder ) : # Set to None to use the : class : ` ~flask.app.Flask.json_decoder ` . else current_app.json_decoder ) app.register_blueprint ( blue ) def default ( self , o ) : from .ctx import has_request_context bp.json_encoder if bp and bp.json_encoder blue = flask.Blueprint ( 'blue ' , __name__ ) # Set to None to use the : class : ` ~flask.app.Flask.json_encoder ` .","['flask/blueprints.py', 'flask/json.py', 'tests/test_helpers.py']",Merge pull request # 1898 from RaHus/per_blueprint_jsoncoding_ # 1710
338,8d515a644f4d1a508e5de85d1ab991194fc6394a,2017-04-22 14:43:21-07:00,"handled by the app 's error handlers . ( ` # 2254 ` _ ) from flask.sessions import SessionInterface assert not flask.request app = CustomFlask ( __name__ ) Errors caused while opening the session at the beginning of the request are class CustomFlask ( flask.Flask ) : ctx.push ( ) def open_session ( self , app , request ) : session_interface = FailingSessionInterface ( ) # should n't get here def test_session_error_pops_context ( ) : raise SessionError ( ) assert response.status_code == 500 class FailingSessionInterface ( SessionInterface ) : response = app.test_client ( ) .get ( '/ ' ) class SessionError ( Exception ) : assert False assert not flask.current_app .. _ # 2254 : https : //github.com/pallets/flask/pull/2254 def index ( ) : ctx.push ( ) pass","['CHANGES', 'flask/app.py', 'tests/test_reqctx.py']",Merge pull request # 2254 from davidism/pop-context-on-session-error
339,9b892e2225bb88ab24f839719ba50575e1ce4de0,2017-04-21 11:16:18-07:00,"cls.methods = methods `` `` '' Metaclass for : class : ` MethodView ` that determines what methods the view c = app.test_client ( ) return 'POST ' return rv app = flask.Flask ( __name__ ) # add a method list . ( This is for instance the case for assert c.delete ( '/ ' ) .data == b'DELETE ' class OtherView ( flask.views.MethodView ) : app.add_url_rule ( '/ ' , view_func=View.as_view ( 'index ' ) ) the : meth : ` dispatch_request ` implementation will automatically assert c.get ( '/ ' ) .data == b'GET ' # If we have no method at all in there we do n't want to add a `` `` '' Like a regular class-based view but that dispatches requests to for key in http_method_funcs : return 'GET ' def __new__ ( cls , name , bases , d ) : rv.methods = sorted ( methods ) def get ( self ) : methods = set ( rv.methods or [ ] ) return 'DELETE ' # If we have no method at all in there we do n't want to def test_multiple_inheritance ( ) : def post ( self ) : .. _ # 1936 : https : //github.com/pallets/flask/pull/1936 assert c.post ( '/ ' ) .status_code == 405 methods = [ 'GET ' ] if hasattr ( cls , key ) : assert sorted ( View.methods ) == [ 'GET ' ] for key in d : if key in http_method_funcs : # that does not introduce new methods ) . `` MethodView `` can inherit method handlers from base classes . ( ` # 1936 ` _ ) assert sorted ( GetDeleteView.methods ) == [ 'DELETE ' , 'GET ' ] automatically : : def test_remove_method_from_parent ( ) : # or another subclass of a base method view that does not introduce : meth : ` get ` it means it will respond to `` 'GET ' `` requests and super ( MethodViewType , cls ) .__init__ ( name , bases , d ) class View ( GetView , OtherView ) : particular methods . For instance if you implement a method called # new methods . used to handle `` GET `` requests . : : rv = type.__new__ ( cls , name , bases , d ) # method list . This is for instance the case for the base class `` `` '' # the base class or another subclass of a base method view app.add_url_rule ( '/ ' , view_func=GetDeleteView.as_view ( 'index ' ) ) def __init__ ( cls , name , bases , d ) : class DeleteView ( flask.views.MethodView ) : class GetDeleteView ( GetView , DeleteView ) : `` `` '' A class-based view that dispatches request methods to the corresponding methods = set ( ) forward your request to that . Also : attr : ` options ` is set for you class methods . For example , if you implement a `` get `` method , it will be class GetView ( flask.views.MethodView ) : def delete ( self ) : defines . pass","['CHANGES', 'flask/views.py', 'tests/test_views.py']",Merge pull request # 2252 from davidism/method-view-inheritance
340,9569e8c9562fd6695d5ec83a5e33fa608d5d7166,2017-04-21 08:31:11-07:00,"c = app.test_client ( ) app.add_url_rule ( '/ ' , view_func=index , provide_automatic_options=False ) Add support for `` provide_automatic_options `` in `` add_url_rule `` to disable method should be added automatically . This can also be controlled 'provide_automatic_options ' , None ) app = flask.Flask ( __name__ ) app.add_url_rule ( def add_url_rule ( self , rule , endpoint=None , view_func=None , provide_automatic_options=None , * * options ) : else : assert c.post ( '/more ' ) .data == b'POST ' def add_url_rule ( self , rule , endpoint=None , view_func=None , * * options ) : provide_automatic_options = getattr ( view_func , assert c.get ( '/ ' ) .data == b'GET ' before adding the rule . assert rv.status_code == 405 rv = c.options ( '/ ' ) rv = c.delete ( '/more ' ) ( ` # 1489 ` _ ) . .. _ # 1489 : https : //github.com/pallets/flask/pull/1489 assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' ] rv = c.options ( '/more ' ) def test_options_handling_disabled ( ) : rv = c.open ( '/ ' , method='OPTIONS ' ) def test_provide_automatic_options_kwarg ( ) : if hasattr ( c , 'options ' ) : adding OPTIONS method when the `` view_func `` argument is not a class . rv = c.post ( '/ ' ) rv = c.open ( '/more ' , method='OPTIONS ' ) def more ( ) : by setting the `` view_func.provide_automatic_options = False `` rv = c.head ( '/ ' ) : param provide_automatic_options : controls whether the `` OPTIONS `` # Older versions of Werkzeug.test.Client do n't have an options method assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'POST ' ] provide_automatic_options=False 'provide_automatic_options ' , None ) return flask.request.method ) def test_provide_automatic_options_attr ( ) : provide_automatic_options = getattr ( view_func , '/more ' , view_func=more , methods= [ 'GET ' , 'POST ' ] , assert c.get ( '/more ' ) .data == b'GET ' def index ( ) : assert rv.status_code == 200 assert not rv.data # head truncates if provide_automatic_options is None :","['CHANGES', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 2249 from davidism/provide-automatic-options
341,f4a1ca8fc87bd28ad75502a78005226899e08a2a,2017-04-20 09:10:27-07:00,"'_anchor ' : None , flask.url_for ( '/ ' ) with app.test_request_context ( ) : .. _ # 2017 : https : //github.com/pallets/flask/pull/2017 '_scheme ' : None , def test_url_for_passes_special_values_to_build_error_handler ( ) : values [ '_scheme ' ] = scheme app = flask.Flask ( __name__ ) def handler ( error , endpoint , values ) : return 'handled ' assert values == { ( ` # 2017 ` _ ) '_method ' : None , '_external ' : False , } Pass `` _scheme `` argument from `` url_for `` to `` handle_build_error `` .","['CHANGES', 'flask/helpers.py', 'tests/test_basic.py']",Merge pull request # 2017 from rocambolesque/patch-1
342,f0c714a01bbba070dc0c7e034a2d174b2e904d16,2017-04-14 09:22:12-07:00,"from werkzeug.routing import Rule c = app.test_client ( ) assert c.get ( '/bp_prefix/bar ' ) .status_code == 404 def foobar ( ) : app.url_map.add ( Rule ( '/foo ' , endpoint='bar ' ) ) app = flask.Flask ( __name__ ) bp = flask.Blueprint ( 'bp ' , __name__ ) def test_endpoint_decorator ( ) : app.register_blueprint ( bp , url_prefix='/bp_prefix ' ) return flask.request.endpoint assert c.get ( '/foo ' ) .data == b'bar '",['tests/test_blueprints.py'],Merge pull request # 1886 from dawran6/test_bp_endpoint_dec
343,5b9b180191016044b95896924c7df55cbff7db93,2017-04-13 16:45:24-07:00,flaskr.init_db ( ) flaskr.app.testing = True with flaskr.app.app_context ( ) : flaskr.app.config [ 'TESTING ' ] = True flaskr.init_db ( ),['docs/testing.rst'],Merge pull request # 2117 from accraze/testing-docs-fix
344,78cb96fde0ffb9d6ce67b8f5c850c7a60cab86b3,2017-04-12 10:12:30-07:00,": param filename_or_fp : the filename of the file to send . attachment_filename = attachment_filename.encode ( 'latin-1 ' ) 'filename ' : normalized.encode ( 'ascii ' , 'ignore ' ) , : param filename_or_fp : the filename of the file to send in ` latin-1 ` . normalized.encode ( 'ascii ' ) 'filename ' : unicodedata.normalize ( normalized = unicodedata.normalize ( 'NFKD ' , attachment_filename ) .encode ( 'latin-1 ' , 'ignore ' ) , 'NFKD ' , text_type ( attachment_filename ) )",['flask/helpers.py'],Merge pull request # 2238 from davidism/bugfix/latin1-filename
345,8b45009dbc22508ca6d9dc06e79ab23914ed14bb,2017-04-08 10:54:20-07:00,"normalized = unicodedata.normalize ( headers.add ( 'Content-Disposition ' , 'attachment ' , import unicodedata try : assert options [ 'filename ' ] == 'index.html ' ) 'filename= '' Nandu/pinguino.txt '' ' , content_disposition = set ( rv.headers [ 'Content-Disposition ' ] .split ( ' ; ' ) ) headers.add ( 'Content-Disposition ' , 'attachment ' , * * filenames ) assert content_disposition == set ( ( filenames = { rv = flask.send_file ( 'static/index.html ' , as_attachment=True , attachment_filename=u'Ñandú／pingüino.txt ' ) assert 'filename * ' not in rv.headers [ 'Content-Disposition ' ] normalized.encode ( 'ascii ' ) 'NFKD ' , text_type ( attachment_filename ) 'filename * ' : `` UTF-8 '' % s '' % url_quote ( attachment_filename ) , 'attachment ' , .. _RFC 2231 : https : //tools.ietf.org/html/rfc2231 # section-4 } rv.close ( ) app = flask.Flask ( __name__ ) filenames = { 'filename ' : attachment_filename } .. versionchanged : : 0.13 with app.test_request_context ( ) : UTF-8 filenames , as specified in ` RFC 2231 ` _ , are supported . assert options [ 'filename ' ] == 'index.html ' else : def test_attachment_with_utf8_filename ( self ) : filename=attachment_filename ) ) ) 'filename ' : normalized.encode ( 'ascii ' , 'ignore ' ) , `` filename * =UTF-8 '' % C3 % 91and % C3 % BA % EF % BC % 8Fping % C3 % BCino.txt '' except UnicodeEncodeError :","['flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 2223 from antlarr/master
346,00d6e339ec789e7b92007297e840a671a5e38a7b,2017-04-07 16:31:54+02:00,": param host_matching : sets the app 's `` url_map.host_matching `` to the given # development ) . Also , Google App Engine stores static files somewhere host_matching=False , template_folder='templates ' , # while the server is running ( usually happens during development ) c = app.test_client ( ) time the constructor adds the static route , and enables the static route to assert bool ( static_host ) == host_matching , 'Invalid static_host/host_matching combination ' with pytest.raises ( Exception ) : assert rv == 'http : //example.com/static/index.html ' with a `` static_folder `` configured . # For one , it might be created while the server is running ( e.g . during # else when mapped with the .yml file . static_folder='static ' , static_host=None , with app.test_request_context ( ) : to None . Required when using `` host_matching=True `` # if the folder does not exist . First of all it might be created app = flask.Flask ( __name__ , host_matching=True , static_host='example.com ' ) flask.Flask ( __name__ , static_host='example.com ' ) rv.close ( ) # and static_folder iff there is a configured static_folder . folder in the root path of the application . Defaults static_folder='static ' , template_folder='templates ' , def test_static_route_with_host_matching ( ) : given value . Defaults to False . rv = c.get ( 'http : //example.com/static/index.html ' ) The ` host_matching ` and ` static_host ` parameters were added . flask.Flask ( __name__ , host_matching=True , static_folder=None ) flask.Flask ( __name__ , host_matching=True ) to None . Change Flask.__init__ to accept two new keyword arguments , `` host_matching `` be properly associated with the required host . ( `` # 1559 `` ) # Add a static route using the provided static_url_path , static_host , # Note we do this without checking if static_folder exists . : param static_host : the host to use when adding the static route . Defaults self.url_map.host_matching = host_matching endpoint='static ' , host=static_host , # Providing host_matching=True with static_folder but without static_host should error . and `` static_host `` . This enables `` host_matching `` to be set properly by the # register the static folder for the application . Do that even # but also because google appengine stores static files somewhere assert rv.status_code == 200 endpoint='static ' , .. versionadded : : 0.13 rv = flask.url_for ( 'static ' , filename='index.html ' , _external=True ) # Providing static_host without host_matching=True should error . # Providing host_matching=True without static_host but with static_folder=None should not error .","['AUTHORS', 'CHANGES', 'flask/app.py', 'tests/test_basic.py']","Change Flask.__init__ to accept two new keyword arguments , host_matching and static_host . ( # 1560 )"
347,ec18fe94775aaa3d54238c6c75b569491803134e,2017-04-07 07:10:43-07:00,FLASK_APP=hello : END Unix Bash : `` venv/bin/activate `` : : set `` FLASK_APP=hello '' export FLASK_APP Edit the activate script for the shell you use . For example : Windows CMD.exe : `` venv\Scripts\activate.bat `` : :,['docs/cli.rst'],Add example for virtualenv integration in cli docs ( # 2234 )
348,d04d36842b6c0c9430dfb3d1129e5cfa5e8bac3d,2017-04-06 08:31:25-07:00,the `` JSONIFY_PRETTYPRINT_REGULAR `` config parameter is set to false . This function 's response will be pretty printed if it was not requested spaces after separators . with `` X-Requested-With : XMLHttpRequest `` to simplify debugging unless This function 's response will be pretty printed if the `` JSONIFY_PRETTYPRINT_REGULAR `` config parameter is set to True or the currently means no indents and no spaces after separators . Flask app is running in debug mode . Compressed ( not pretty ) formatting Compressed ( not pretty ) formatting currently means no indents and no,['flask/json.py'],Merge pull request # 2231 from asilversempirical/patch-1
349,c935eaceafebaf167f6422fdbd0de3b6bbb96bdf,2017-03-31 18:44:14+02:00,"event that a ` BaseException ` such as ` KeyboardInterrupt ` is raised in a assert ctx.preserved error = sys.exc_info ( ) [ 1 ] app = flask.Flask ( __name__ ) c.get ( '/ ' ) request handler . assert type ( ctx._preserved_exc ) is KeyboardInterrupt ctx = flask._request_ctx_stack.top Call ` ctx.auto_pop ` with the exception object instead of ` None ` , in the app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' with app.test_client ( ) as c : def test_baseexception_error_handling ( ) : @ app.route ( '/ ' ) raise KeyboardInterrupt ( ) except : def broken_func ( ) : with pytest.raises ( KeyboardInterrupt ) : raise","['CHANGES', 'flask/app.py', 'tests/test_basic.py']",Revert `` Handle BaseExceptions ( # 2222 ) ''
350,1d4448abe335741c61b3c8c5f99e1607a13f7e3d,2017-03-31 18:07:43+02:00,"error = sys.exc_info ( ) [ 1 ] def broken_func ( ) : app = flask.Flask ( __name__ ) raise KeyboardInterrupt ( ) assert type ( ctx._preserved_exc ) is KeyboardInterrupt ctx = flask._request_ctx_stack.top with pytest.raises ( KeyboardInterrupt ) : request handler . def test_baseexception_error_handling ( ) : assert ctx.preserved raise app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' event that a ` BaseException ` such as ` KeyboardInterrupt ` is raised in a except : with app.test_client ( ) as c : c.get ( '/ ' ) Call ` ctx.auto_pop ` with the exception object instead of ` None ` , in the","['CHANGES', 'flask/app.py', 'tests/test_basic.py']",Handle BaseExceptions ( # 2222 )
351,19d7e6532f9187ba8a81b2d2ad9afe03e5e5500a,2017-03-24 08:59:00-07:00,"raise pytest.raises ( NoAppException , locate_app , `` cliapp.importerrorapp '' ) ' the app ( % s ) : \n % s ' % ( module , stack_trace ) ) raise NoAppException ( 'There was an error trying to import ' pytest.raises ( ImportError , locate_app , `` cliapp.importerrorapp '' ) stack_trace = traceback.format_exc ( )","['flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2217 from edbrannin/patch-1
352,889c0ed1964f48557e532f95f9003c5ee6e2b727,2017-03-19 18:01:23+01:00,"your own environment . I usually create a project folder and a : file : ` venv ` * * Python2 * * If you are planning on using python3 with the virtualenv , you do n't need to $ virtualenv venv $ venv\Scripts\activate New python executable in venv/bin/python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ $ virtenv\Scripts\activate .. admonition : : A note on python3 and virtualenv Activating a virtual environment $ python3 -m venv virtenv $ . venv/bin/activate install `` virtualenv `` . Python3 has built-in support for virtual environments . There is a little change in how you create a virtualenv depending on which python-version you are currently using . $ . virtenv/bin/activate Creating a virtual environment * * Python 3.6 and above * * $ virtualenv virtenv : : New python executable in virtenv/bin/python your own environment . I usually create a project folder and a : file : ` virtenv ` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",['docs/installation.rst'],Issue # 2212 : documentation : virtualenv and python3
353,2995366dde63b8acd1f246bcd5a4cf7d61f0c1fa,2017-03-17 05:41:20+01:00,"domains are used , this should be app under a subpath you need to tell your WSGI container the `` SCRIPT_NAME `` session cookie as path value . If Note that to actually serve your Flask set . If it 's also `` None `` `` '/ ' `` is used . be set to the path where the application `` APPLICATION_ROOT `` If the application does not occupy a whole domain or subdomain this can WSGI environment variable . `` None `` . cookie if `` SESSION_COOKIE_PATH `` is n't `` APPLICATION_ROOT `` The path value used for the session is configured to live . This is for",['docs/config.rst'],Clarify APPLICATION_ROOT # 1714
354,6efea346dd54fa9adb65fc044d72e5ec8bdf4018,2017-03-16 13:43:01-07:00,"pass assert 'Exception : oh no ' in result.output result = runner.invoke ( cli , [ ' -- help ' ] ) # users . assert 'Traceback ' in result.output def test_print_exceptions ( ) : def create_app ( info ) : def cli ( * * params ) : `` `` '' Print the stacktrace if the CLI . '' '' '' import traceback runner = CliRunner ( ) # However , we will not do so silently because that would confuse traceback.print_exc ( ) raise Exception ( `` oh no '' ) return Flask ( `` flaskgroup '' ) assert result.exit_code == 0 pass","['flask/cli.py', 'tests/test_cli.py']",Merge pull request # 2209 from svenstaro/print-stacktrace-on-cli-error
355,5b7fd9ad889e54d4d694d310b559c921d7df75cf,2017-03-16 14:37:58+01:00,"import traceback # users . # However , we will not do so silently because that would confuse traceback.print_exc ( )",['flask/cli.py'],Print a stacktrace on CLI error ( closes # 2208 )
356,1add1f8a02976e070660d9ae0b877bc3f8a36e86,2017-03-13 13:58:24+01:00,"... print ( url_for ( 'profile ' , username='John Doe ' ) ) ... print url_for ( 'login ' , next='/ ' ) ... print url_for ( 'index ' ) ... print url_for ( 'login ' ) ... print ( url_for ( 'login ' ) ) ... print url_for ( 'profile ' , username='John Doe ' ) ... print ( url_for ( 'login ' , next='/ ' ) ) ... print ( url_for ( 'index ' ) )",['docs/quickstart.rst'],Use print function in quickstart ( # 2204 )
357,a7f1a21c1204828388eaed1e3903a74c904c8147,2017-03-07 10:09:46+09:00,"`` JSONIFY_PRETTYPRINT_REGULAR `` If this is set to `` True `` or the Flask app jsonify responses will be pretty printed if current_app.config [ 'JSONIFY_PRETTYPRINT_REGULAR ' ] and not request.is_xhr : assert rv.data == b ' { \n `` msg '' : `` W00t '' \n } \n ' Change default configuration ` JSONIFY_PRETTYPRINT_REGULAR=False ` . jsonify ( ) will be pretty printed . assert rv.data == b ' { `` msg '' : '' W00t '' } \n ' debug mode . the `` X-Requested-With `` header ) `` JSONIFY_PRETTYPRINT_REGULAR `` If this is set to `` True `` ( the default ) 'JSONIFY_PRETTYPRINT_REGULAR ' : True , XMLHttpRequest object ( controlled by method returns compressed response by default , and pretty response in app.debug = True is running in debug mode , jsonify responses if they are not requested by an if current_app.config [ 'JSONIFY_PRETTYPRINT_REGULAR ' ] or current_app.debug : 'JSONIFY_PRETTYPRINT_REGULAR ' : False ,","['CHANGES', 'docs/config.rst', 'flask/app.py', 'flask/json.py', 'tests/test_basic.py', 'tests/test_helpers.py']",Do n't rely on X-Requested-With for pretty print json response ( # 2193 )
358,f5adb61b28f240effbba5a4686647c2af6e85b94,2017-03-06 14:05:59+01:00,"# submit a empty part without filename The module header consists of an utf-8 encoding declaration ( if non When a teardown function was called because of an exception it will # submit an empty part without filename The script scans your whole application and generates a unified diff with # : To register an error handler , use the : meth : ` errorhandler ` The reason for this is that some file-like objects have an invalid or even The script scans your whole application and generates an unified diff with The reason for this is that some file-like objects have a invalid or even # The unique identifier of the text . This can be a ISBN number The module header consists of a utf-8 encoding declaration ( if non output an unified diff with all the changes that are necessary to easily # : To register a error handler , use the : meth : ` errorhandler ` When a teardown function was called because of a exception it will # The unique identifier of the text . This can be an ISBN number output a unified diff with all the changes that are necessary to easily","['docs/conf.py', 'docs/patterns/fileuploads.rst', 'docs/styleguide.rst', 'docs/upgrading.rst', 'flask/app.py', 'scripts/flask-07-upgrade.py']",Fix typos/grammar in docs ( # 2201 )
359,06112a555a9398701d3269253355c214791e1eca,2017-03-05 13:07:49+01:00,< li > < em > Unbelievable . No entries here so far < /em > < li > < h2 > { { entry.title } } < /h2 > { { entry.text|safe } } < /li > < li > < h2 > { { entry.title } } < /h2 > { { entry.text|safe } } < li > < em > Unbelievable . No entries here so far < /em > < /li >,['docs/tutorial/templates.rst'],Close < li > tag in tutorial ( # 2199 )
360,c43560777a3efeaeaf0eb47568171f04103dc363,2017-03-04 11:29:04+01:00,"`` app.debug `` and `` app.config [ 'DEBUG ' ] `` are not compatible with ( On Windows you need to use `` set `` instead of `` export `` ) . $ export FLASK_DEBUG=1 method . $ flask run `` DEBUG `` enable/disable debug mode when using .. admonition : : Debug Mode with the `` flask `` Script `` Flask.run ( ) `` method to start server server , to enable the debug mode , you need to export the `` FLASK_DEBUG `` the : command : ` flask ` script . They only worked when using `` Flask.run ( ) `` `` DEBUG `` enable/disable debug mode If you use the : command : ` flask ` script to start a local development environment variable before running the server : :",['docs/config.rst'],Add tips for debug config with flask cli ( # 2196 )
361,fca5577a0097e876e8f8e8d2f3961a40fa44bbeb,2017-02-28 14:05:09+09:00,< p > < input type=file name=file > < input type=file name=file > < input type=submit value=Upload > < input type=submit value=Upload >,['docs/patterns/fileuploads.rst'],Remove extra HTML tag from fileupload docs ( # 2141 )
362,bb0e755c808a8541192982ba7b86308b68ff7657,2017-02-11 10:43:11+01:00,"This handy little function , in combination with a row factory , makes < li > < a href= '' http : //github.com/pallets/flask/issues '' > Issue Tracker < /a > < /li > url='http : //github.com/pallets/flask/ ' , * The ` Favicon < http : //en.wikipedia.org/wiki/Favicon > ` _ article on demand and closing them when the context dies ( usually at the end of the Using ` Flask-SQLAlchemy < http : //flask-sqlalchemy.pocoo.org/ > ` _ , < li > < a href= '' http : //pypi.python.org/pypi/Flask '' > Flask @ PyPI < /a > < /li > In Flask you can easily implement the opening of database connections on url='https : //github.com/pallets/flask/ ' , 'sqlalchemy ' : ( 'https : //docs.sqlalchemy.org/en/latest/ ' , None ) , dictionaries instead of tuples , this could be inserted into the `` get_db `` < https : //redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModFastCGI > ` _ ( note that demand and closing them when the context dies ( usually at the end of the .. _nginx : https : //nginx.org/ $ git clone https : //github.com/pallets/flask.git This handy little function , in combination with a row factory , makes .. _mod_wsgi documentation : http : //modwsgi.readthedocs.io/en/develop/index.html https : //docs.sqlalchemy.org/en/latest/orm/extensions/declarative/ .. _mod_wsgi documentation : https : //modwsgi.readthedocs.io/en/develop/index.html 'sqlalchemy ' : ( 'http : //docs.sqlalchemy.org/en/latest/ ' , None ) , .. _OAuth extension : https : //pythonhosted.org/Flask-OAuth/ .. _Apache 2.4 : http : //httpd.apache.org/docs/trunk/upgrading.html working with the database much more pleasant than it is by just using the .. _lighttpd : http : //www.lighttpd.net/ < https : //en.wikipedia.org/wiki/SQL_injection > ` _ . .. _OAuth extension : http : //pythonhosted.org/Flask-OAuth/ import error upon start ( or if debug is enabled when you navigate to the < https : //github.com/pallets/flask/zipball/master # egg=Flask-dev > ` _ Try to follow ` PEP8 < https : //www.python.org/dev/peps/pep-0008/ > ` _ , but you .. _Apache 2.4 : https : //httpd.apache.org/docs/trunk/upgrading.html .. _HTTP RFC : https : //www.ietf.org/rfc/rfc2068.txt .. _Flask-OldSessions : http : //pythonhosted.org/Flask-OldSessions/ import error upon start ( or if debug is enabled when you navigate to the .. _Apache : http : //httpd.apache.org/ : command : ` flask run ` . In case that module is incorrectly named you will get an .. _Apache : https : //httpd.apache.org/ < http : //www.getsentry.com/ > ` _ for dealing with application errors . It 's .. _HTTP RFC : http : //www.ietf.org/rfc/rfc2068.txt Try to follow ` PEP8 < http : //legacy.python.org/dev/peps/pep-0008/ > ` _ , but you .. _Flask-WTF : https : //flask-wtf.readthedocs.io/en/stable/ ` website < http : //www.sqlalchemy.org/ > ` _ . .. _installation instructions : http : //modwsgi.readthedocs.io/en/develop/installation.html .. _Flask-WTF : http : //pythonhosted.org/Flask-WTF/ .. _nginx : http : //nginx.org/ < https : //en.wikipedia.org/wiki/Cross-site_scripting > ` _ . In Flask you can easily implement the opening of database connections on http : //docs.sqlalchemy.org/en/latest/orm/extensions/declarative/ < http : //github.com/pallets/flask/zipball/master # egg=Flask-dev > ` _ $ git clone http : //github.com/pallets/flask.git The `` FLASK_APP `` environment variable is the name of the module to import at .. _Flask-Uploads : https : //pythonhosted.org/Flask-Uploads/ : command : ` flask run ` . In case that module is incorrectly named you will get an return 'http : //www.gravatar.com/avatar/ % s ? d=identicon & s= % d ' % \ .. _installation instructions : https : //modwsgi.readthedocs.io/en/develop/installation.html working with the database much more pleasant than it is by just using the < http : //en.wikipedia.org/wiki/Cross-site_scripting > ` _ . ` website < https : //www.sqlalchemy.org/ > ` _ . < https : //www.getsentry.com/ > ` _ for dealing with application errors . It 's return 'https : //www.gravatar.com/avatar/ % s ? d=identicon & s= % d ' % \ .. _Flask-Uploads : http : //pythonhosted.org/Flask-Uploads/ .. _Flask-OldSessions : https : //pythonhosted.org/Flask-OldSessions/ The `` FLASK_APP `` environment variable is the name of the module to import at * The ` Favicon < https : //en.wikipedia.org/wiki/Favicon > ` _ article on dictionaries instead of tuples , this could be inserted into the `` get_db `` .. _lighttpd : https : //www.lighttpd.net/ ` Deploying Flask on AWS Elastic Beanstalk < http : //docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html > ` _ Using ` Flask-SQLAlchemy < http : //pythonhosted.org/Flask-SQLAlchemy/ > ` _ , .. _SQLAlchemy : https : //www.sqlalchemy.org/ < http : //en.wikipedia.org/wiki/SQL_injection > ` _ . ` Deploying Flask on AWS Elastic Beanstalk < https : //docs.aws.amazon.com/elasticbeanstalk/latest/dg/create-deploy-python-flask.html > ` _ < li > < a href= '' https : //github.com/pallets/flask/issues '' > Issue Tracker < /a > < /li > .. _SQLAlchemy : http : //www.sqlalchemy.org/ < li > < a href= '' http : //github.com/pallets/flask '' > Flask @ GitHub < /a > < /li > < http : //redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModFastCGI > ` _ ( note that","['CONTRIBUTING.rst', 'docs/_templates/sidebarintro.html', 'docs/conf.py', 'docs/deploying/fastcgi.rst', 'docs/deploying/index.rst', 'docs/deploying/mod_wsgi.rst', 'docs/deploying/uwsgi.rst', 'docs/errorhandling.rst', 'docs/extensiondev.rst', 'docs/installation.rst', 'docs/patterns/appfactories.rst', 'docs/patterns/favicon.rst', 'docs/patterns/fileuploads.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/sqlite3.rst', 'docs/patterns/wtforms.rst', 'docs/quickstart.rst', 'docs/security.rst', 'docs/tutorial/introduction.rst', 'docs/upgrading.rst', 'examples/minitwit/minitwit/minitwit.py', 'setup.py']",Migrate various docs links to https ( # 2180 )
363,95db82f8f7df0acce7051a8dedf29b88e436f5ab,2017-02-09 18:34:16+01:00,"` pytest ` testing tool : py.test -- cov=flask -- cov-report html [ ] ` py.test ` testing tool : pytest -- cov-report html -- cov=flask tests/ py.test -- cov-report html -- cov=flask tests/ pytest -- cov=flask -- cov-report html [ ] $ py.test py.test The minimal requirement for running the testsuite is `` py.test `` . You can norecursedirs = . * * .egg * .egg-info env * artwork docs examples pytest norecursedirs = . * * .egg * .egg-info env * artwork docs With only py.test installed , a large part of the testsuite will get skipped pytest -- cov=flask tests/ With only pytest installed , a large part of the testsuite will get skipped $ pytest The minimal requirement for running the testsuite is `` pytest `` . You can py.test -- cov=flask tests/","['CONTRIBUTING.rst', 'README', 'docs/tutorial/testing.rst', 'setup.cfg', 'tox.ini']",py.test = > pytest ( # 2173 )
364,9e2807da76d756ca84b55213e799a124beb6a3fe,2017-02-09 15:29:58+01:00,show_the_login_form ( ) return show_the_login_form ( ) return do_the_login ( ) do_the_login ( ),['docs/quickstart.rst'],Merge pull request # 2175 from swanhtet1992/patch-1
365,1636a4c410a1bf3713bc1da8d4de7ca66cdf1681,2017-01-17 13:22:16-08:00,"if port is None : server_name = self.config [ 'SERVER_NAME ' ] port = int ( server_name.rsplit ( ' : ' , 1 ) [ 1 ] ) _host = '127.0.0.1 ' if host is None : host = '127.0.0.1 ' sn_host , _ , sn_port = server_name.partition ( ' : ' ) else : port = int ( port or sn_port or _port ) sn_host , sn_port = None , None if server_name : host = host or sn_host or _host _port = 5000 port = 5000 if server_name and ' : ' in server_name : server_name = self.config.get ( `` SERVER_NAME '' )",['flask/app.py'],use SERVER_NAME to set host and port in app.run ( ) ( # 2152 )
366,47e84101173d00f70a7f28547aa0ae2fcd80086e,2017-01-15 05:56:12+01:00,"return client def client ( ) : import pytest .. _the full src for this example here : https : //github.com/pallets/flask/tree/master/examples/patterns/largerapp import yourapplication.views packages= [ 'yourapplication ' ] , from setuptools import setup app.config [ 'TESTING ' ] = True ) 'flask ' , to take a look at the source code for this example . setup ( You 'll find ` the full src for this example here ` _ . def index ( ) : from flask import Flask name='yourapplication ' , ] , If you find yourself stuck on something , feel free from yourapplication import app include_package_data=True , client = app.test_client ( ) app = Flask ( __name__ ) install_requires= [ return 'Hello World ! ' def test_index ( client ) : rv = client.get ( '/ ' ) assert b '' Hello World ! '' in rv.data pip install -e examples/patterns/largerapp","['docs/patterns/packages.rst', 'examples/patterns/largerapp/setup.py', 'examples/patterns/largerapp/tests/test_largerapp.py', 'examples/patterns/largerapp/yourapplication/__init__.py', 'examples/patterns/largerapp/yourapplication/static/style.css', 'examples/patterns/largerapp/yourapplication/templates/index.html', 'examples/patterns/largerapp/yourapplication/templates/layout.html', 'examples/patterns/largerapp/yourapplication/templates/login.html', 'examples/patterns/largerapp/yourapplication/views.py', 'tox.ini']",Merge pull request # 2131 from wgwz/add-larger-app-ex
367,9900a72fe7992d873915af68f7d52148e738d032,2017-01-14 21:58:45+01:00,: attr : ` ~flask.request.args ` attribute : : to the : class : ` ~flask.request ` documentation . : attr : ` ~flask.Request.form ` attribute . Here is a full example of the two : attr : ` ~flask.Request.args ` attribute : : : attr : ` ~flask.request.method ` attribute . To access form data ( data : attr : ` ~flask.Request.method ` attribute . To access form data ( data it here in detail ( see : class : ` ~flask.request ` ) . Here is a broad overview of : attr : ` ~flask.request.form ` attribute . Here is a full example of the two it here in detail ( see : class : ` ~flask.Request ` ) . Here is a broad overview of to the : class : ` ~flask.Request ` documentation .,['docs/quickstart.rst'],Fix Request Reference ( # 2151 )
368,6c9ff85c3f3c98ea85da5f789c092ad7926af0b5,2017-01-13 05:30:22-08:00,"copyright = u'2010 - { 0 } , Armin Ronacher'.format ( datetime.utcnow ( ) .year ) import time from datetime import datetime BUILD_DATE = datetime.datetime.utcfromtimestamp ( int ( os.environ.get ( 'SOURCE_DATE_EPOCH ' , time.time ( ) ) ) ) copyright = u'2010 - { 0 } , Armin Ronacher'.format ( BUILD_DATE.year ) import datetime",['docs/conf.py'],Merge pull request # 2149 from onovy/master
369,22c613b8c44b74f4756f1eceeedde99b31144a47,2017-01-10 10:07:26-08:00,"env : REQUIREMENTS=lowest assert excinfo.type is ImportError envlist = { py26 , py27 , pypy } - { lowest , release , devel } { , -simplejson } , { py33 , py34 , py35 } - { release , devel } { , -simplejson } # python3.6 raises a subclass of ImportError : 'ModuleNotFoundError ' assert issubclass ( excinfo.type , ImportError ) match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ( ? i ) ' , rv.headers [ 'set-cookie ' ] ) env : REQUIREMENTS=lowest-simplejson `` 3.6 '' envlist = { py26 , py27 , pypy } - { lowest , release , devel } { , -simplejson } , { py33 , py34 , py35 , py36 } - { release , devel } { , -simplejson } python : `` 3.6 '' match = re.search ( r ' ( ? i ) \bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] )","['.travis.yml', 'tests/test_basic.py', 'tests/test_ext.py', 'tox.ini']",Merge pull request # 2148 from drewja/master
370,49386ee69e92aa23edefbfff01fd425c5fbe33d1,2016-12-31 16:31:44+01:00,": attr : ` form ` and : attr : ` args ` . Contains the incoming request data as string in case it came with ` XMLHttpRequest ` . This only works with libraries that support the .. attribute : : data .. attribute : : form .. attribute : : files you that data as a string . The stream only returns the data once . Libraries that do that are prototype , jQuery and Mochikit and of the time it is a better idea to use : attr : ` data ` which will give : class : ` ~werkzeug.datastructures.FileStorage ` object . It basically behaves like a the request . .. attribute : : args or `` PUT `` requests . Please keep in mind that file uploads will not .. attribute : : values `` POST `` or `` PUT `` request . Each file is stored as .. attribute : : headers probably some more . .. attribute : : method it also has a : meth : ` ~werkzeug.datastructures.FileStorage.save ` function that can store the file on the filesystem . The incoming request headers as a dictionary like object . : inherited-members : string . ( The part in the URL after the question mark ) . A : class : ` ~werkzeug.datastructures.MultiDict ` with files uploaded as part of a The current request method ( `` POST `` , `` GET `` etc . ) `` X-Requested-With `` header and set it to ` XMLHttpRequest ` . A : class : ` ~werkzeug.datastructures.MultiDict ` with the parsed contents of the query end up here , but instead in the : attr : ` files ` attribute . a mimetype Flask does not handle . A : class : ` ~werkzeug.datastructures.CombinedMultiDict ` with the contents of both If the incoming form data was not encoded with a known mimetype A : class : ` dict ` with the contents of all cookies transmitted with .. attribute : : stream the data is stored unmodified in this stream for consumption . Most .. attribute : : is_xhr .. attribute : : cookies A : class : ` ~werkzeug.datastructures.MultiDict ` with the parsed form data from `` POST `` `` True `` if the request was triggered via a JavaScript standard file object you know from Python , with the difference that",['docs/api.rst'],Inherit Werkzeug docs ( # 2135 )
371,789715adb9949f58b7b0272bed1a58d7cd0fad30,2016-12-26 03:50:47+01:00,"f = tmpdir.join ( 'my_config.py ' ) import pytest def test_from_pyfile_weird_encoding ( tmpdir , encoding ) : app = flask.Flask ( __name__ ) `` # 2118 `` . Fix encoding behavior of `` app.config.from_pyfile `` for Python 3 . Fix from datetime import timedelta # - * - coding : { 0 } - * import pytest TEST_VALUE = `` föö '' if PY2 : app.config.from_pyfile ( str ( f ) ) ' '' .format ( encoding ) ) .encode ( encoding ) ) with open ( filename , mode='rb ' ) as config_file : with open ( filename ) as config_file : from datetime import timedelta assert value == u'föö ' from flask._compat import PY2 value = app.config [ 'TEST_VALUE ' ] import textwrap value = value.decode ( encoding ) f.write_binary ( textwrap.dedent ( u '' '","['CHANGES', 'flask/config.py', 'tests/test_config.py']",Fix config.from_pyfile on Python 3 ( # 2123 )
372,36425d5f91b57210f7707de9564377fea93825b2,2016-12-21 21:08:38+01:00,"assert flask.request.get_json ( silent=True , cache=True ) is None content_type='application/json ' ) : with app.test_request_context ( '/ ' , method='POST ' , data='malformed ' , def test_ignore_cached_json ( self ) : with pytest.raises ( BadRequest ) : app = flask.Flask ( __name__ ) if cache and rv is not _missing : if rv is not _missing : flask.request.get_json ( silent=False , cache=False ) # We return cached JSON only when the cache is enabled .","['flask/wrappers.py', 'tests/test_helpers.py']",Ignore cache on request.get_json ( cache=False ) call ( # 2089 )
373,0e79aba40d2497218736448ced708fcf4f8943b3,2016-12-21 21:07:57+01:00,"# Pass the value to the function elif the_key == ' u ' : ' d ' : parse_date , ' b ' : b64decode , } ' t ' : tuple , # Did n't find a function for this object return tuple ( the_value ) return parse_date ( the_value ) if return_function : return Markup ( the_value ) if the_key == ' t ' : return_function = self.LOADS_MAP.get ( the_key ) return uuid.UUID ( the_value ) return b64decode ( the_value ) # Check the key for a corresponding function return return_function ( the_value ) LOADS_MAP = { elif the_key == ' b ' : elif the_key == ' m ' : ' u ' : uuid.UUID , elif the_key == ' d ' : ' m ' : Markup ,",['flask/sessions.py'],use dict instead of if/else logic ( # 2093 )
374,7f288371674b420ac2df8ff2313e3b469662ee41,2016-12-21 21:07:09+01:00,pip install -- editable . 3. now you can run minitwit : 3. tell flask about the right application : 2. tell flask about the right application : 2. fire up a shell and run this : 5. now you can run minitwit : 4. fire up a shell and run this : 2. install the app from the root of the project directory,['examples/minitwit/README'],Update README for minitwit ( # 2119 )
375,0ba1a872b7aac48efef9028e7687475da34eaa39,2016-12-21 21:06:48+01:00,Once this has happened you can make the flask command automatically pick Once this has happened you can make the : command : ` flask ` command automatically it up : : pick it up : :,['docs/cli.rst'],Style the flask command consistently ( # 2120 )
376,2647fc7112ed79c1751a3d99491d7dcfe0aa4520,2016-11-03 10:11:24-07:00,"rv = c.get ( url ) # figure out the correct syntax # https : //pytest.org/latest/parametrize.html # pytest-mark-parametrize-parametrizing-test-functions test_uuid = uuid.UUID ( bytes=b'\xDE\xAD\xBE\xEF ' * 4 ) assert rv.mimetype == 'application/json ' test_uuid = uuid.UUID ( bytes=b'\xDE\xAD\xBE\xEF ' * 4 ) assert rv.mimetype == 'application/json ' test_data = ( 0 , 1 , 23 , 3.14 , 's ' , `` longer string '' , True , False , ) rv = c.get ( url ) def test_jsonify_basic_types ( self ) : app.add_url_rule ( url , url , lambda x=test_value : flask.jsonify ( x ) ) assert flask.json.loads ( rv.data ) == test_value def test_jsonify_basic_types ( self , test_value ) : url = '/jsonify_basic_types { 0 } '.format ( i ) app.add_url_rule ( url , str ( i ) , lambda x=d : flask.jsonify ( x ) ) for i , d in enumerate ( test_data ) : # Should be able to use pytest parametrize on this , but I could n't url = '/jsonify_basic_types ' assert flask.json.loads ( rv.data ) == d",['tests/test_helpers.py'],Parameterizing test ( # 2073 )
377,ec9717502f36126b8a371b73a5730b2092948ca2,2016-11-01 21:04:20-07:00,| | : class : ` ~logging.LogRecord ` was created . | | | By default this is of the form | | `` % ( asctime ) s `` | Human-readable time when the LogRecord ` was | | | created . By default this is of the form | | `` % ( asctime ) s `` | Human-readable time when the |,['docs/errorhandling.rst'],Update errorhandling.rst ( # 2075 )
378,77af942b982a3b07669362cc6bc223026bf039cd,2016-11-01 18:52:32-07:00,"# The namespace for code signals . If you are not flask code , do # : This can be used by Flask extensions to make a decision in regards it is recorded and shown as part of the WSGI handling which in case it is is recorded and shows as part of the WSGI handling which in case `` `` '' Special application that dispatches to a Flask application which `` `` '' Special application that dispatches to a flask application which # The namespace for code signals . If you are not Flask code , do # : This can be used by flask extensions to make a decision in regards # This was the only thing that flask used to export at one point and it had # This was the only thing that Flask used to export at one point and it had","['flask/__init__.py', 'flask/cli.py', 'flask/sessions.py', 'flask/signals.py']",Capitalize occurrences of 'flask ' ( # 2067 )
379,de1652467b0584fe9ee4060bc42101e8255838a3,2016-11-01 07:35:17-07:00,done.add ( cls ) for cls in exc_class.__mro__ : from collections import deque # Protect from geniuses who might create circular references in done = set ( ) cls = queue.popleft ( ) queue.extend ( cls.__mro__ ) if cls in done : queue = deque ( exc_class.__mro__ ) # __mro__ while queue : continue,['flask/app.py'],Remove busy-work . ( # 2072 )
380,6478d7bb99ef7dcdda19ce3e58c00500ff72e60b,2016-10-31 23:10:27+01:00,".coverage . * htmlcov .coverage pytest-cov # Coverage reports py.test [ ] -- cov=flask -- cov-report html * , cover usedevelop=true py.test [ ]","['.gitignore', 'tox.ini']",Adding coverage generation to tox ( # 2071 )
381,fa087c89298e0c91abff45b3ee7033889d2dd5d7,2016-10-30 14:34:49+01:00,from flaskr import app from .flaskr import app [ tool : pytest ] from .flaskr import app [ aliases ] from flaskr import app,"['docs/tutorial/packaging.rst', 'examples/flaskr/flaskr/__init__.py', 'examples/flaskr/setup.cfg']",Fixes import statement in flaskr ( # 2068 )
382,d25c801a3b95551fd03eae82f916f92460cc2b34,2016-10-14 10:13:42+02:00,"This repository contains several zero-padded file modes that may cause issues when pushing this repository to git hosts other than github . Fixing this is destructive to the commit history , so we suggest ignoring these warnings . If it fails to push and you 're using a self-hosted git service like Gitlab , you can turn off repository checks in the admin panel . set in your git configuration file , cloning this repository will fail . The only solution is to set both of the above settings to false while cloning , and then setting them back to true after the cloning is finished . fsckobjects = true [ receive ] cloning [ fetch ] : : pushing Caution or ======= The zero-padded file modes files above can cause issues while cloning , too . If you have fsckObjects = true",['CONTRIBUTING.rst'],"add 'caution ' section to docs , workaround for zero-padded file modes ( # 2057 )"
383,bd5e297aa9697f42a61682fe56f10eeb650e8540,2016-10-12 08:54:24+02:00,"`` HTTP_USER_AGENT '' : `` werkzeug/ '' + werkzeug.__version__ assert flask.g.user_agent == 'Bar ' assert rv.data == b'127.0.0.1 ' ` client.environ_base ` . kwargs.setdefault ( 'environ_base ' , self.environ_base ) .. versionchanged : : 0.12 app = flask.Flask ( __name__ ) set after instantiation of the ` app.test_client ( ) ` object in c.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.0 ' app.testing = True directly set , instead of per `` client.get `` . super ( FlaskClient , self ) .__init__ ( * args , * * kwargs ) assert flask.g.user_agent == 'Foo ' def test_environ_base_default ( ) : c.environ_base [ 'HTTP_USER_AGENT ' ] = 'Bar ' c.environ_base [ 'HTTP_USER_AGENT ' ] = 'Foo ' `` app.test_client `` includes preset default environment , which can now be assert rv.data == b ' 0.0.0.1 ' return flask.request.remote_addr `` REMOTE_ADDR '' : `` 127.0.0.1 '' , assert flask.g.user_agent == 'werkzeug/ ' + werkzeug.__version__ def __init__ ( self , * args , * * kwargs ) : def test_environ_base_modified ( ) : c.environ_base [ 'REMOTE_ADDR ' ] = ' 0.0.0.1 ' assert rv.data == b ' 0.0.0.0 ' flask.g.user_agent = flask.request.headers [ `` User-Agent '' ] self.environ_base = { def index ( ) : ` app.test_client ( ) ` includes preset default environment , which can be rv = c.get ( '/ ' ) import werkzeug with app.test_client ( ) as c : }","['CHANGES', 'flask/testing.py', 'tests/test_testing.py']",Default environ ( # 2047 )
384,49ecc88d9949bed6297944cb4a3d115fa9727aab,2016-10-01 18:45:22+02:00,It loads the application configured ( through the FLASK_APP environment import error upon start ( or if debug is enabled when you navigate to the application ) . It will tell you what it tried to import and why it failed . The `` FLASK_APP `` environment variable is the name of the module to import at : command : ` flask run ` . In case that module is incorrectly named you will get an error upon start ( or if debug is enabled when you navigate to the application ) . It will tell you what it tried to import and why it failed . It loads the application configured ( either through the FLASK_APP environment The `` -a `` argument to : command : ` flask ` is the name of the module to import . In case that module is incorrectly named you will get an import,"['docs/quickstart.rst', 'flask/cli.py']",Remove ` -a/ -- app ` from Quickstart documentation ( # 2046 )
385,7186a5aaf571e1d08a617138867998cbea518522,2016-09-26 12:43:46+02:00,"If ` conditional=True ` and ` filename ` is provided , this method will try to rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , 'If-Range ' : http_date ( headers [ 'Content-Length ' ] = fsize from werkzeug.datastructures import Headers RequestedRangeNotSatisfiable from werkzeug.exceptions import BadRequest , NotFound fsize = os.path.getsize ( filename ) c = app.test_client ( ) assert rv.status_code == 206 # make sure we do n't send x-sendfile for servers that assert rv.status_code == 416 rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' , rv.headers.pop ( ' x-sendfile ' , None ) if rv.status_code == 304 : assert rv.status_code == 200 with app.open_resource ( 'static/index.html ' ) as f : # Remove this test when support for Werkzeug < 0.12 is dropped file.close ( ) if callable ( getattr ( Range , 'to_content_range_header ' , None ) ) : def test_send_file_range_request ( self ) : last_modified = datetime.datetime.fromtimestamp ( os.path.getmtime ( assert rv.data == f.read ( ) [ 4:16 ] fsize = os.path.getsize ( filename ) # Werkzeug supports Range Requests rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-1000 ' } ) from werkzeug.exceptions import BadRequest , NotFound , \ 'If-Range ' : http_date ( last_modified ) } ) # ignore the 304 status code for x-sendfile . reason= '' not implement within werkzeug '' if conditional : def index ( ) : os.path.join ( app.root_path , 'static/index.html ' ) ) ) .replace ( complete_length=fsize ) from werkzeug.datastructures import Headers , Range try : headers [ 'Content-Length ' ] = os.path.getsize ( filename ) raise rv = rv.make_conditional ( request , accept_ranges=True , # ignore the 304 status code for x-sendfile . except RequestedRangeNotSatisfiable : app = flask.Flask ( __name__ ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=- ' } ) upgrade the response stream to support range requests . This will allow rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4-15 ' } ) datetime.datetime ( 1999 , 1 , 1 ) ) } ) rv.close ( ) rv = c.get ( '/ ' , headers= { 'Range ' : 'somethingsomething ' } ) if rv.status_code == 304 : ) fsize = None return flask.send_file ( 'static/index.html ' , conditional=True ) if conditional : headers [ 'Content-Length ' ] = fsize assert rv.data == f.read ( ) [ 4 : ] else : assert rv.data == f.read ( ) [ -10 : ] rv.headers.pop ( ' x-sendfile ' , None ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=1000- ' } ) Add support for range requests in `` send_file `` . # make sure we do n't send x-sendfile for servers that headers [ 'Content-Length ' ] = os.path.getsize ( filename ) from werkzeug.datastructures import Range the request to be answered with partial content response . rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=4- ' } ) rv = c.get ( '/ ' , headers= { 'Range ' : 'bytes=-10 ' } ) not callable ( getattr ( Range , 'to_content_range_header ' , None ) ) , microsecond=0 )","['CHANGES', 'flask/helpers.py', 'tests/test_helpers.py']",make use of range requests if available in werkzeug ( # 2031 )
386,a6a36ec72a1f65514e137b0f21708e8c61dbe4ba,2016-09-24 13:07:19+02:00,.. _mod_wsgi : http : //code.google.com/p/modwsgi/ .. _mod_wsgi documentation : http : //modwsgi.readthedocs.io/en/develop/index.html .. _mod_wsgi wiki : http : //code.google.com/p/modwsgi/w/list .. _installation instructions : http : //modwsgi.readthedocs.io/en/develop/installation.html For more information consult the ` mod_wsgi wiki ` _ . .. _mod_wsgi : https : //github.com/GrahamDumpleton/mod_wsgi .. _installation instructions : http : //code.google.com/p/modwsgi/wiki/QuickInstallationGuide For more information consult the ` mod_wsgi documentation ` _ .,['docs/deploying/mod_wsgi.rst'],Updated mod_wsgi.rst to point to new mod_wsgi repo ( # 2038 )
387,a40489e0ce89acef2a49b70a571143ef479ca235,2016-09-12 21:52:42+03:00,") or 'application/octet-stream ' assert `` Unable to infer MIME-type from filename 'filename ' '' in str ( excinfo ) flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename='filename ' ) mimetype = mimetypes.guess_type ( attachment_filename ) [ 0 ] function fails if no filename information was provided . if attachment_filename is not None : mimetype = mimetypes.guess_type ( attachment_filename ) [ 0 ] \ been removed . If Flask ca n't guess one or the user did n't provide one , the function fails . raise ValueError ( flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename='filename ' ) 'Unable to infer MIME-type from filename { 0 ! r } , please ' with pytest.raises ( ValueError ) as excinfo : 'pass one explicitly . '.format ( attachment_filename ) been restricted . If Flask ca n't guess one or the user did n't provide one , the","['docs/upgrading.rst', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 2019 from pallets/bugfix/sendfile-error
388,3bd12b38a80362f6656b834ec04c95f1ba4d83e0,2016-09-12 10:42:23+02:00,"the request by converting it into a response and invoking the with the ` from_error_handler ` flag . If enabled , failures in with the ` from_error_handler ` flag . If enabled failures in the request by converting it into a repsonse and invoking the",['flask/app.py'],Merge pull request # 2022 from pablogamboa/patch-1
389,59104db2f2f0a507aea2625230e446361e2fc174,2016-09-11 17:53:35+02:00,"/style.css In order to install and run the application you need to issue the following a big problem , just add a new file called : file : ` setup.py ` next to the inner If you are outside of the project directory make sure to provide the exact packages= [ 'yourapplication ' ] , In order to run the application you need to export an environment variable /yourapplication.py app.run ( debug=True ) name='yourapplication ' , mode '' with this environment variable : : setup.py flask run that tells Flask where to find the application instance : : __init__.py export FLASK_DEBUG=true ] , path to your application directory . Similiarly you can turn on `` debug style.css style.css /runserver.py 'flask ' , ) yourapplication.py from yourapplication import app export FLASK_APP=yourapplication views.py /__init__.py pip install -e . /views.py from setuptools import setup setup ( include_package_data=True , /style.css a big problem , just add a new file called : file : ` runserver.py ` next to the inner install_requires= [ commands : :",['docs/patterns/packages.rst'],Address # 1980 ( # 2021 )
390,9e41eca7f839db16cdf064f827fada0cabf6f54f,2016-09-10 03:36:29+03:00,"def test_error_handling_processing ( ) : the request by converting it into a repsonse and invoking the def broken_func ( ) : postprocessing functions . This is invoked for both normal response processing will be logged and otherwise ignored . with the ` from_error_handler ` flag . If enabled failures in try : app = flask.Flask ( __name__ ) request_finished.send ( self , response=response ) response = self.process_response ( response ) Correctly invoke response handlers for both regular request dispatching as def after_request ( resp ) : request dispatching as well as error handlers . response = self.process_response ( response ) def internal_server_error ( e ) : if not from_error_handler : return 'internal server error ' , 500 1 // 0 failure a special safe mode is available which can be enabled self.logger.exception ( 'Request finalizing failed with an ' assert resp.mimetype == 'text/x-special ' well as error handlers . : internal : resp.mimetype = 'text/x-special ' return self.finalize_request ( handler ( e ) , from_error_handler=True ) request_finished.send ( self , response=response ) return handler ( e ) raise `` `` '' Given the return value from a view function this finalizes app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' response = self.handle_exception ( e ) return resp return self.finalize_request ( rv ) `` `` '' 'error while handling an error ' ) assert resp.data == b'internal server error ' Because this means that it might be called as a result of a def finalize_request ( self , rv , from_error_handler=False ) : resp = c.get ( '/ ' ) with app.test_client ( ) as c : response = self.make_response ( self.handle_exception ( e ) ) except Exception :","['CHANGES', 'flask/app.py', 'tests/test_basic.py']",Merge pull request # 2013 from pallets/bugfix/error-handler-error-handler
391,e6f9d2b41417b442946acfede9200d361ac401cc,2016-09-08 15:19:48+02:00,"in the projects root directory . You also need to add an empty One way to handle testing is to integrate it with `` setuptools `` . Here .. _tutorial-setuptools : py.test creating two new files ; : file : ` setup.py ` and : file : ` MANIFEST.in ` in the of that file are : : already . The context file is used as an import helper . The contents export FLASK_APP=flaskr source code without having to reinstall the Flask app each time you make pip install -e . Adding Tests to flaskr as flaskr . Otherwise `` pytest `` test will not be able to import the Testing + setuptools using ` setuptools ` _ . This involves creating a : file : ` setup.py ` Run and watch the tests pass , within the top-level : file : ` flaskr/ ` requires is adding a couple of lines to the : file : ` setup.py ` file and of the application package . When it is time to run the application , the Step 7 : The Templates a package . The code structure at this point should be : : You currently have a function for establishing a database connection with of `` pip freeze `` ) . Continue with : ref : ` tutorial-setuptools ` . basedir = os.path.dirname ( os.path.abspath ( __file__ ) ) changes , your code structure should be : : into this file , : file : ` flaskr/__init__.py ` : .. note : : The above installation command assumes that it is run within the setuptools The above installation command assumes that it is run within the projects editing source code without having to reinstall the Flask app each time export FLASK_DEBUG=true required components to test the application : : statement a few steps below would need to be Testing + Setuptools Step 3 : Installing flaskr with setuptools root directory , ` flaskr/ ` . The ` editable ` flag allows editing that requires adding a couple of lines to the : file : ` setup.py ` file and directory as : : ==================== : file : ` context.py ` and : file : ` test_flaskr.py ` files , if you have n't Assuming you have seen the : ref : ` testing ` section and have either written flaskr.py Flask development server needs the location of the app instance . This packaging this way is that you do not have to install `` pytest `` . Go ahead and One way to handle testing is to integrate it with `` setuptools `` . All it projects root directory . You also need to add an : file : ` __init__.py ` Step 7 : The View Functions Assuming you have seen the testing section above and have either written download `` pytest `` or any other testing framework one might use . schema.sql .. _setuptools : https : //setuptools.readthedocs.io Continue with : ref : ` tutorial-packaging ` . import sys , os update the : file : ` setup.py ` file to contain : : Step 9 : Adding Style export FLASK_DEBUG=1 .. _tutorial-packaging : context.py creating a new file : file : ` setup.cfg ` . One benefit of running the tests Step 8 : The Templates .. _Python Packaging Guide : https : //packaging.python.org Step 8 : Adding Style from flaskr import flaskr import statement simplifies the location process . Without it the export : file : ` test_flaskr.py ` file . following the ` Python Packaging Guide ` _ . Presently this involves This import statement brings the application instance into the top-level you make changes . Step 6 : The View Functions pip install pytest `` export FLASK_APP=flaskr.flaskr `` . download `` pytest `` or any other testing framework one might use . Running the tests .. note : : Make sure that `` pytest `` is installed in the same virtualenv .. sourcecode : : python At this point you can run the tests . Here `` pytest `` will be used . export FLASK_APP=flaskr.flaskr MANIFEST.in file to make the : file : ` flaskr/flaskr ` directory a package . After these sys.path.insert ( 0 , basedir + '/ .. / ' ) creating a new file : file : ` setup.cfg ` . Go ahead and update the ====================================== For now go ahead a create the : file : ` tests/ ` directory as well as the To simplify locating the application , add the following import statement : file : ` setup.py ` to contain : : ====================== projects root directory , ` flaskr/ ` . Also , the ` editable ` flag allows ========================================= Step 3 : Installing flaskr as a Package ) : file : ` __init__.py ` file to make the : file : ` flaskr/flaskr ` directory changes . The flaskr app is now installed in your virtualenv ( see output from flaskr import app For now go ahead a create the : file : ` tests/ ` directory as well as the Adding tests to flaskr You now have a function for establishing a database connection with","['docs/tutorial/css.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/index.rst', 'docs/tutorial/{setuptools.rst => packaging.rst}', 'docs/tutorial/setup.rst', 'docs/tutorial/templates.rst', 'docs/tutorial/testing.rst', 'docs/tutorial/views.rst']",Clean up tutorial docs for installable app pattern with flaskr ( # 2002 )
392,c4ec6954e57b1ab3cb5a0d178e6030f8bab6c149,2016-09-06 22:32:34+02:00,"use_debugger=debugger , threaded=with_threads , passthrough_errors=app.config [ 'PROPAGATE_EXCEPTIONS ' ] ) options.setdefault ( 'passthrough_errors ' , assert rv [ 'passthrough_errors ' ] == propagate_exceptions use_debugger=debugger , threaded=with_threads ) self.config [ 'PROPAGATE_EXCEPTIONS ' ] ) # make sure werkzeug passes errors through if PROPAGATE_EXCEPTIONS","['flask/app.py', 'flask/cli.py', 'tests/test_basic.py']",Do n't passthrough_errors unless instructed . ( # 2006 )
393,ccd02bfe8c90ee8dbf30cc2be61a7d483ff24cab,2016-09-05 16:57:00+02:00,"FlaskClient.__init__ ( * args , * * kwargs ) def __init__ ( self , * args , * * kwargs ) : self._authentication = authentication super ( CustomClient , self ) .__init__ ( * args , * * kwargs ) self._authentication = kwargs.pop ( `` authentication '' ) def __init__ ( self , authentication=None , * args , * * kwargs ) :",['flask/app.py'],Correcting Custom Test Client class docs ( # 2004 )
394,92ce20eeacf5de24803abaf70a3658806fa4d74f,2016-09-04 16:28:05-07:00,"with pytest.raises ( ValueError ) as excinfo : with app.test_request_context ( ) : 'Unable to infer MIME-type from filename { 0 ! r } , please ' 'pass one explicitly . '.format ( attachment_filename ) assert `` Unable to infer MIME-type from filename 'filename ' '' in str ( excinfo ) 'Unable to infer MIME-type from filename { ! r } , please ' 'pass one explicitly . '.format ( mimetype_filename ) flask.send_file ( StringIO ( `` LOL '' ) , attachment_filename='filename ' )","['flask/helpers.py', 'tests/test_helpers.py']",Fix error in send_file helper ( # 2003 )
395,6e6c3a4636387892e3725f1ba13457966c188b87,2016-08-30 00:26:20+02:00,"routes , they are registered for exceptions that are raised while trying to routes they are registered for exceptions that are rised while trying to # resetted normally . This makes it possible to restart the server conceptionally only instance depending and outside version control so it 's Javascript files go . Inside the : file : ` templates ` folder , Flask will look for cost of cachability . # reset normally . This makes it possible to restart the server JavaScript files go . Inside the : file : ` templates ` folder , Flask will look for conceptually only instance depending and outside version control so it 's cost of cacheability .","['CHANGES', 'docs/config.rst', 'docs/errorhandling.rst', 'docs/tutorial/folders.rst', 'flask/app.py']",Spelling ( # 1998 )
396,78a71a48dcb71cb930d747d9facef0dfa5a8f022,2016-08-27 18:33:08+02:00,"self.config [ 'PROPAGATE_EXCEPTIONS ' ] ) options.setdefault ( 'passthrough_errors ' , # make sure werkzeug always passes errors through assert rv [ 'passthrough_errors ' ] # make sure werkzeug passes errors through if PROPAGATE_EXCEPTIONS passthrough_errors=True ) assert rv [ 'passthrough_errors ' ] == propagate_exceptions passthrough_errors=app.config [ 'PROPAGATE_EXCEPTIONS ' ] ) options.setdefault ( 'passthrough_errors ' , True )","['flask/app.py', 'flask/cli.py', 'tests/test_basic.py']",Merge pull request # 1996 from untitaker/propagate-exceptions-werkzeug
397,71e10be28665eee6a919045f9e5d8773508dc756,2016-08-26 03:08:03+02:00,"response = send_file ( fname ) Mimetype guessing in `` send_file `` now fails loudly and does n't fall back to ' ` filename_or_fp ` or set your own MIME-type via ` mimetype ` . ' can turn this off by setting ` add_etags=False ` . response = send_file ( open ( '/path/to/file.txt ' ) ) raise ValueError ( Any of the following is functionally equivalent : : last_modified=last_modified , ) assert rv.headers [ ' x-sendfile ' ] == \ The reason for this is that some file-like objects have a invalid or even You must explicitly provide the mimetype for the filename or file object . This means that the following code will no longer automatically have rv = flask.send_file ( f ) a satisfying solution . auto detection happens . The ` attachment_filename ` is preferred over ` filename ` for MIME-type attachment_filename='index.html ' ) rv = flask.send_file ( f , attachment_filename=f.name ) : param mimetype : the mimetype of the file if provided . If a file path is filename = os.path.join ( current_app.root_path , filename ) os.path.join ( app.root_path , 'static/index.html ' ) misleading `` name `` attribute . Silently swallowing errors in such cases was not .. _upgrading-to-10 : response = send_file ( open ( fname ) , attachment_filename=fname ) If no mimetype or attachment_filename is provided , application/octet-stream raise ValueError ( 'Unable to infer MIME-type from filename { ! r } , please ' if mimetype is None : detection . assert ' x-sendfile ' not in rv.headers return flask.send_file ( StringIO ( `` party like it 's '' ) , last_modified=last_modified ) ` filename_or_fp ` or ` attachment_filename ` . mimetype='text/plain ' ) will be used . if not os.path.isabs ( filename ) : provided . .. _upgrading-to-012 : flask.send_file ( StringIO ( `` LOL '' ) ) rv = flask.send_file ( f , mimetype='application/octet-stream ' ) response.set_etag ( ... ) Mimetype guessing for `` send_file `` has been removed , as per issue `` # 104 `` . `` `` `` `` `` `` `` `` `` `` if attachment_filename is not None : ) # Set the MIME-type and ETag explicitly error will be raised . assert ' x-sendfile ' in rv.headers mimetype = mimetypes.guess_type ( attachment_filename ) [ 0 ] mimetype = mimetypes.guess_type ( filename or attachment_filename ) [ 0 ] 'sending as attachment ' ) def test_send_file_object_without_mimetype ( self ) : filename = None mimetype = 'application/octet-stream ' rv = flask.send_file ( f , mimetype='text/html ' ) rv = flask.send_file ( f ) rv = flask.send_file ( f , as_attachment=True ) if mimetype is None and ( filename or attachment_filename ) : to send certain files as attachment ( HTML for instance ) . The mimetype assert 'no filename is available ' in str ( excinfo ) rv = flask.send_file ( f , as_attachment=True , function fails . The `` filename `` is no longer automatically inferred from file-like objects . you want to use automatic mimetype and etag support , pass a filepath via : param mimetype : the mimetype of the file if provided , otherwise been removed . If Flask ca n't guess one or the user did n't provide one , the with pytest.raises ( ValueError ) as excinfo : 'pass one explicitly . '.format ( mimetype_filename ) guessing requires a ` filename ` or an ` attachment_filename ` to be given , auto detection happens as fallback , otherwise an `` application/octet-stream `` . See pull request `` # 1988 `` . Mimetype guessing and ETag generation for file-like objects in `` send_file `` app = flask.Flask ( __name__ ) raise TypeError ( 'filename unavailable , required for ' Changes to send_file Version 0.12 'Unable to infer MIME-type because no filename is available . ' 'Please set either ` attachment_filename ` , pass a filepath to ' By default it will try to guess the mimetype for you , but you can ETags will also be attached automatically if a ` filename ` is provided . You The filename is no longer automatically inferred from file objects . If assert 'Unable to infer MIME-type ' in str ( excinfo ) .. versionchanged : : 0.12 if attachment_filename is None : See pull request `` # 1849 `` . mimetype guessing and etag support removed for file objects . 'sending as attachment ' ) if not os.path.isabs ( filename ) : if filename is not None : # Just pass the filepath directly fname = '/path/to/file.txt ' # ETag still needs to be manually set .. _upgrading-to-011 : response = send_file ( open ( fname ) , mimetype='text/plain ' ) has been removed , as per issue `` # 104 `` . See pull request `` # 1849 `` . attachment_filename = os.path.basename ( filename ) also explicitly provide one . For extra security you probably want with app.test_request_context ( ) : # Set ` attachment_filename ` for MIME-type guessing Additionally the default of falling back to `` application/octet-stream `` has if attachment_filename is not None : filename = os.path.join ( current_app.root_path , filename ) filename = getattr ( file , 'name ' , None ) raise TypeError ( 'filename unavailable , required for ' rv = flask.send_file ( f , mimetype='text/html ' ) `` X-Sendfile `` support , etag generation or MIME-type guessing : : attachment_filename = os.path.basename ( filename ) if filename is None : return flask.send_file ( StringIO ( `` party like it 's '' ) ,","['CHANGES', 'docs/upgrading.rst', 'flask/helpers.py', 'tests/test_helpers.py']",Properly remove f.name usage in send_file ( # 1988 )
398,5f009374fd28aba381f375391b70ac131926bd9d,2016-08-22 20:52:54+02:00,"import minitwit import pytest [ aliases ] graft minitwit/templates include minitwit/schema.sql graft minitwit/static from minitwit import app from setuptools import setup tests_require= [ name='minitwit ' , from minitwit import minitwit import pytest ) 'flask ' , .eggs/ from flaskr import flaskr setup ( You betcha . Run the ` python setup.py test ` file to You betcha . Run the ` test_minitwit.py ` file to 'pytest-runner ' , norecursedirs = . * * .egg * .egg-info env * artwork docs examples minitwit.db ] , norecursedirs = . * * .egg * .egg-info env * artwork docs from context import flaskr include_package_data=True , basedir = os.path.dirname ( os.path.abspath ( __file__ ) ) packages= [ 'minitwit ' ] , setup_requires= [ sys.path.insert ( 0 , basedir + '/ .. / ' ) test=pytest install_requires= [ 'pytest ' , import sys , os from flaskr import flaskr","['examples/flaskr/tests/context.py', 'examples/flaskr/tests/test_flaskr.py', 'examples/minitwit/.gitignore', 'examples/minitwit/MANIFEST.in', 'examples/minitwit/README', 'examples/minitwit/minitwit/__init__.py', 'examples/minitwit/{ => minitwit}/minitwit.py', 'examples/minitwit/{ => minitwit}/schema.sql', 'examples/minitwit/{ => minitwit}/static/style.css', 'examples/minitwit/{ => minitwit}/templates/layout.html', 'examples/minitwit/{ => minitwit}/templates/login.html', 'examples/minitwit/{ => minitwit}/templates/register.html', 'examples/minitwit/{ => minitwit}/templates/timeline.html', 'examples/minitwit/setup.cfg', 'examples/minitwit/setup.py', 'examples/minitwit/{ => tests}/test_minitwit.py', 'setup.cfg']",Update minitwit & improve testing for examples ( # 1954 )
399,9121e109bdcd8b2a50bf53cac73b470232d126df,2016-08-20 17:43:58+02:00,"`` `` '' Test of get_version . '' '' '' resilient_parsing = False def exit ( self ) : return ctx = MockCtx ( ) find_default_import_path get_version ( ctx , None , `` test '' ) out , err = capsys.readouterr ( ) find_default_import_path , get_version class MockCtx ( object ) : from flask import __version__ as flask_ver color = None assert py_ver in out def test_get_version ( test_apps , capsys ) : from sys import version as py_ver assert flask_ver in out",['tests/test_cli.py'],Add test for get_version ( CLI ) ( # 1884 )
400,5044f3d6101e5915963a497779b6ad1166a7a388,2016-08-19 19:01:13-07:00,assert 'Invalid username ' in rv.data assert 'No entries here so far ' not in rv.data assert ' < strong > HTML < /strong > allowed here ' in rv.data assert 'You were logged in ' in rv.data assert b'You were logged in ' in rv.data assert 'You were logged out ' in rv.data assert b ' & lt ; Hello & gt ; ' in rv.data assert b'Invalid username ' in rv.data assert b'No entries here so far ' not in rv.data assert ' & lt ; Hello & gt ; ' in rv.data assert b'Invalid password ' in rv.data assert b ' < strong > HTML < /strong > allowed here ' in rv.data assert 'Invalid password ' in rv.data assert b'You were logged out ' in rv.data,['docs/testing.rst'],Update testing.rst ( # 1987 )
401,0f1cf50f97a617114078be3dbae3152339ff13ad,2016-08-12 15:12:00+02:00,"__import__ ( module ) 'app is not on PYTHONPATH , ensure the extension ' 'exist . Please verify the path is correct . If ' 'is .py ' % module ) pytest.raises ( NoAppException , locate_app , `` cliapp/app '' ) try : except ImportError : __import__ ( module ) pytest.raises ( NoAppException , locate_app , `` notanpp.py '' ) raise NoAppException ( 'The file/path provided ( % s ) does not appear to '","['flask/cli.py', 'tests/test_cli.py']",adding in try around __import__ to catch invalid files/paths ( # 1950 )
402,c54d67adee6f99113f525b376da4af27c3001321,2016-07-28 22:46:42+02:00,< li > < h2 > { { entry.title } } < /h2 > { { entry.text|safe } } < /li > < li > < em > Unbelievable . No entries here so far < /em > < /li > < li > < em > Unbelievable . No entries here so far < /em > < li > < h2 > { { entry.title } } < /h2 > { { entry.text|safe } },['examples/flaskr/flaskr/templates/show_entries.html'],"close < li > tag in lines ( 16,18 ) ( # 1951 )"
403,17d4cb3828b9520be6c4e64e6b7548a561aa6e7a,2016-07-05 17:30:59-07:00,"The application will be installed and run as Python package . This is the information . With that out of the way , you should be able to start up the application . Flask provides two contexts : the * application context * and the : file : ` setup.py ` ) : : available to users of the application via HTTP . This is the place where CSS and will use the setting defined in the last import . This enables robust : file : ` templates ` folder , Flask will look for ` Jinja2 ` _ templates . The import the values from there . * request context * . For the time being , all you have to know is that there In this case , the static and templates directories need to be included , include flaskr/schema.sql At this point you should be able to install the application . As usual , it [ aliases ] provided , you might be wondering about ways to organize the project . 2 . Instruct flask to use the right application key is not in there . This is helpful because now it is not necessary to To do this , we can create a function and hook it into the : command : ` flask ` First , we want to create the database schema . Only a single table is needed Step 5 : Creating The Database Here are the import statements ( in : file : ` flaskr.py ` ) : : Assuming you have seen the testing section above and have either written flaskr/ possible to drop the configuration directly into the module . However , a cleaner import sys , os initialize it with the config from the same file in : file : ` flaskr.py ` : 3 . Instruct flask to use the right application The next couple lines will create the actual application instance and your own tests for `` flaskr `` or have followed along with the examples from setuptools import setup Flask is now shipped with built-in support for ` Click ` _ . Click provides # create our little application : ) 'flask ' , The : envvar : ` FLASK_DEBUG ` flag enables or disables the interactive debugger . utilizing the * application context * . but first , we should get the database working . an exception that Flask can not find the templates . The templates creating the database schema as well as the main module . Before getting started , you will need to create the folders needed for this tutorial you will see exactly how to extend the `` flask `` command line directly into the module , and this is what we will be doing here . However , location ( the : file : ` flaskr/flaskr ` folder ) and allows you to read from it . 4. initialize the database with this command : You will want to keep an actual function around that initializes the database , `` pytest `` via `` pytest-runner `` , as the : file : ` setup.py ` script has One way to handle testing is to integrate it with `` setuptools `` . All it you might expect . When the script ends , the application context tears down we would expect . When the script ends , the application context tears down can update it with new values . 3. initialize the database with this command : using this here to execute a script on the database connection . Before we get started , let 's create the folders needed for this add this function below the ` connect_db ` function in : file : ` flaskr.py ` : : in the projects root directory . You also need to add an empty again . There is a neat trick here : if you use the : meth : ` ~dict.pop ` method passwords should be both ` hashed and salted ` _ before being stored in a Flask provides us with two contexts : the application context and the handy later . You can create a simple database connection through SQLite and flask run Step 8 : The Templates Continue with : ref : ` tutorial-setuptools ` . flaskr/ ==================== /flaskr With that said , go ahead and install the application with : : .. admonition : : Externally Visible Server Now create : file : ` setup.cfg ` in the project root ( alongside because we do n't have any views yet . That will be addressed a little later , setup_requires= [ Now it is time to start working on the templates . As you may have application module are the needed import statements . After that there will be a already . The context file is used as an import helper . The contents download `` pytest `` or any other testing framework one might use . .. sourcecode : : python templates/ app.config.from_object ( __name__ ) This tutorial will demonstrate a blogging application named Flaskr , but feel This is one possible way to run and manage testing . Here `` pytest `` is : file : ` __init__.py ` file to make the : file : ` flaskr/flaskr ` directory graft flaskr/static You now have a function for establishing a database connection with named ` schema.sql ` in the just created ` flaskr ` folder : in with the : func : ` ~flask.render_template ` function . Notice that the form is specified database . This can be used to open a connection on request and In the next section you will see how to run the application . ] , Following the standard rules of test-discovery your tests will be The : class : ` ~flask.Config ` object works similarly to a dictionary so we .. note : : The above installation command assumes that it is run within the /static will use the setting defined in the last import . This enables robust from flaskr import flaskr .. admonition : : Security Note ) for this application and we only want to support SQLite , so creating the ` logged_in ` key is present in the session and `` True `` ) . graft flaskr/templates is recommended to install your Flask application within a ` virtualenv ` _ . Step 5 : The View Functions following things : creating a new file : file : ` setup.cfg ` . Go ahead and update the protect login credentials if someone happens to have access to your database . drop our files . Later on , we will put our database schema as well as main test_flaskr.py found , run , and hopefully pass . To do this , you can create a function and hook it into a : command : ` flask ` You can find a list of recommended Flask extensions export FLASK_APP=flaskr.flaskr This is where the application context comes into play , so let 's start packages= [ 'flaskr ' ] , the address at which you can access it . : file : ` static ` folder : We will be using SQLite3 directly for this application because it 's good Step 6 : The Templates ====================== Note that it is not a good idea to store passwords in plain text . You want to : file : ` flaskr.py ` . This file should be placed inside of the with `` setuptools `` is convenient because it is not necessary to actually a cleaner solution would be to create a separate `` .ini `` or `` .py `` file , Flask with enhanced and extensible command line utilities . Later in this Within the function , we can then access : attr : ` flask.g ` and other things as For now you should continue with : ref : ` tutorial-schema ` . ` show_entries ` page . If everything worked out well , we will Do this with the following commands : : requires that we provide the path to the database , which can introduce Step 4 : Creating The Database The : class : ` ~flask.Config ` object works similarly to a dictionary , so it can be : file : ` setup.py ` to contain : : setup.py You will see a message telling you that server has started along with Now you know how to connect , but how can you properly disconnect ? For Step 3 : Database Connections /templates of that file are : : Testing + Setuptools graft flaskr/static 5. now you can run flaskr : basedir = os.path.dirname ( os.path.abspath ( __file__ ) ) It is used in this example to execute a script on the database connection . templates are using ` Jinja2 ` _ syntax and have autoescaping enabled by For now go ahead a create the : file : ` tests/ ` directory as well as the : ref : ` externally visible server < public-server > ` section for more name='flaskr ' , to keep it around for longer . Because database connections encapsulate a : file : ` static ` folder we created before : app = Flask ( __name__ ) import sys , os Now we should start working on the templates . If we were to request the URLs [ aliases ] a package . The code structure at this point should be : : just below the ` connect_db ` function in : file : ` flaskr.py ` : : setuptools setup ( Step 7 : Adding Style 4. now you can run flaskr : password . However , the emphasis of this tutorial is to demonstrate the basics You will see a message telling you that server has started along with The : envvar : ` FLASK_DEBUG ` flag enables or disables the interactive debugger . app = Flask ( __name__ ) # create the application instance : ) .. _tutorial-setuptools : that should be included in your package ( in the : file : ` MANIFEST.in ` ) . We will also add a method that allows for easy connections to the packages= [ 'flaskr ' ] , using ` setuptools ` _ . This involves creating a : file : ` setup.py ` tests/ ( In case you are on Windows you need to use ` set ` instead of ` export ` ) . app.config.from_object ( __name__ ) # load config from this file , flaskr.py closing database connections all the time is very inefficient , so we want load that , and import the values from there . database or file . without problems . Do this with the following commands : : the : file : ` static ` folder are available to users of the application via HTTP . The connection object provided by SQLite can give us a cursor object . in with the : func : ` ~flask.render_template ` function . We also tell the Want your server to be publicly available ? Check out the 'pytest ' , solution is to create a separate `` .ini `` or `` .py `` file , load that , and templates you create later on in the tutorial will go in this directory . Now that the database connections are working , we can start writing the SQLite3 will be used directly for this application because it 's good enough Let 's call it `` flaskr.py `` . We will place this file inside the `` flaskr `` 'pytest-runner ' , .. _virtualenv : https : //virtualenv.pypa.io ` Jinja2 ` _ templates . You will see examples of this later on . context.py test=pytest We have created a function for establishing a database connection with .eggs/ hashing passwords and verifying passwords against hashes , so adding following lines : : form to submit to your ` add_entry ` function and use `` POST `` as HTTP plan to release a project based off this tutorial out into the world , The content of the `` setup.py `` file for `` flaskr `` is : Javascript files go . Inside the : file : ` templates ` folder , Flask will look for The `` flaskr `` folder is not a Python package , but just something where we interface ( CLI ) . The connection object provided by SQLite can give you a cursor object . name='flaskr ' , but first , you should get the database working . Now you can run : : export FLASK_APP=flaskr First , we add the imports in : file : ` flaskr.py ` : : setup ( Want your server to be publicly available ? Check out the One possible and recommended project structure is : : Continue with : ref : ` tutorial-schema ` . Now that we have the schema in place , we can create the application module . export FLASK_APP=flaskr.flaskr .. _Click : http : //click.pocoo.org configured to to submit to the ` add_entry ` view function and use `` POST `` as ========================================= This calls on the alias created in : file : ` setup.cfg ` which in turn runs command that initializes the database . Let me show you the code first . Just : : present in the session and `` True `` ) . you make changes . database schema is quite easy . Just put the following contents into a file check if the user was logged in . few lines of configuration code . For small applications like `` flaskr `` , it is include_package_data=True , .. code-block : : python there . include flaskr/schema.sql ` here < http : //flask.pocoo.org/extensions/ > ` _ Now that the database connections are working , you can start writing the key is not in there . This is helpful because now we do n't have to check needed for this application and it will only support SQLite . All you need to do uses the connection . How can we elegantly do that with Flask ? static/ This is the place where CSS and Javascript files go . Inside the system . This tutorial uses plain text passwords for simplicity . If you this functionality is fairly straight forward . There are also export FLASK_DEBUG=1 .. admonition : : Externally Visible Server HTTP method : You betcha . Run ` python setup.py test ` to see many general python libraries that can be used for hashing . export FLASK_DEBUG=1 .. _hashed and salted : https : //blog.codinghorror.com/youre-probably-storing-passwords-incorrectly/ Step 4 : Database Connections for an application of this size . For larger applications , however , tests_require= [ recommended way to install and run Flask applications . You will see exactly * Never leave debug mode activated in a production system * , because it will editing source code without having to reinstall the Flask app each time encapsulate a transaction , you will need to make sure that only one from setuptools import setup One way to do this is to use Security Helpers from Werkzeug to hash the test=pytest 2. install the app from the root of the project directory So now we know how to connect , but how do we properly disconnect ? For python setup.py test MANIFEST.in This schema consists of a single table called `` entries `` . Each row in variable associated with the current application context . We will go into sys.path.insert ( 0 , basedir + '/ .. / ' ) When you head over to the server in your browser , you will get a 404 error request context . For the time being , all you have to know is that there specified database . This can be used to open a connection on request and less Web-2.0-ish name ; ) Essentially , we want it to do the following things : the applications directory structure . In the next few steps you will be As a quick side note , the files inside of the : file : ` static ` folder are ` show_entries ` page . If everything worked out well , it will /static view functions . We will need four of them : /flaskr module into this folder . It is done in the following way . The files inside Next , we can create our actual application and initialize it with the With that out of the way , you should be able to start up the application .. _setuptools : https : //setuptools.readthedocs.io how to run `` flaskr `` later on in this tutorial . For now go ahead and create When using setuptools , it is also necessary to specify any special files noticed , if you make requests with the app running , you will get the details of this a bit later . : file : ` context.py ` and : file : ` test_flaskr.py ` files , if you have n't 'pytest ' , : ref : ` externally visible server < public-server > ` section for more for you to the application . of Flask and plain text passwords are used for simplicity . tests_require= [ from flaskr import flaskr ` connect_db ` , but by itself , it is not particularly useful . Creating and free to choose your own less Web-2.0-ish name ; ) Essentially , it will do the requires is adding a couple of lines to the : file : ` setup.py ` file and Passwords should never be stored in plain text in a production 'pytest-runner ' , Lastly , you will add a method that allows for easy connections to the view functions . You will need four of them : ] , are using ` Jinja2 ` _ syntax and have autoescaping enabled by for you , to the application . used , but there are other options such as `` nose `` . Integrating testing We want to keep an actual function around that initializes the database , section . For small applications , it is possible to drop the configuration Adding Tests to flaskr This allows the rows to be treated as if they were dictionaries instead of because we do n't have any views yet . We will focus on that a little later , again . We use a neat trick here : if you use the : meth : ` ~dict.pop ` method setup_requires= [ graft flaskr/templates transaction , we also need to make sure that only one request at the time allow users to execute code on the server ! pip install -- editable . now , we would only get an exception that Flask can not find the templates . The Step 3 : Installing flaskr with setuptools When you head over to the server in your browser , you will get a 404 error allow users to execute code on the server ! You betcha . Run the ` test_flaskr.py ` file to see as well as the schema . Create the : file : ` MANIFEST.in ` and add the the address at which you can access it . 'flask ' , code segment below . A good place to add this function , and command , is ` connect_db ` , but by itself , that 's not particularly useful . Creating and requires that you provide the path to the database , which can introduce will cover some more details of this later on . This allows us to treat the rows as if they were dictionaries instead of include_package_data=True , variable associated with the current application context . The tutorial projects root directory , ` flaskr/ ` . Also , the ` editable ` flag allows On that cursor , there is a method to execute a complete script . Finally , you In this step , you will create the database schema . Only a single table is export FLASK_APP=flaskr Note that we check that the user is logged in here ( the ` logged_in ` key is method : flask run information . Fortunately , there are Flask extensions for the purpose of been called . ( Recall the ` setup_requires ` argument in : file : ` setup.py ` ) Note that this view checks that the user is logged in ( that is , if the create an application context which is bound to the right application . handy later . We create a simple database connection through SQLite and basedir = os.path.dirname ( os.path.abspath ( __file__ ) ) config from the same file in : file : ` flaskr.py ` : : * Never leave debug mode activated in a production system * , because it will This schema consists of a single table called `` entries `` . Each row in A useful pattern to manage a Flask application is to install your app On that cursor , there is a method to execute a complete script . Finally , we We will call our blogging application Flaskr , but feel free to choose your own ) request at a time uses the connection . An elegant way to do this is by Step 7 : The View Functions /templates Continue with : ref : ` tutorial-dbcon ` . Step 9 : Adding Style enough for an application of this size . For larger applications , however , need to keep it around for longer . Because database connections Continue with : ref : ` tutorial-dbcon ` . is put the following contents into a file named : file : ` schema.sql ` in the location ( your `` flaskr `` folder ) and allows you to read from it . We are create an application context for us bound to the right application . import flaskr Within the function , you can then access : attr : ` flask.g ` and other things as pip install -- editable . from context import flaskr command that initializes the database . For now just take a look at the folder . We will begin by adding the imports we need and by adding the config __init__.py Now that the schema is in place , you can create the application module , if the user was logged in . : file : ` flaskr/flaskr ` folder . The first several lines of code in the ( In case you are on Windows you need to use ` set ` instead of ` export ` ) . closing database connections all the time is very inefficient , so you will : file : ` flaskr/flaskr ` folder : install_requires= [ sys.path.insert ( 0 , basedir + '/ .. / ' ) updated with new values . install_requires= [","['docs/tutorial/css.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/dbinit.rst', 'docs/tutorial/folders.rst', 'docs/tutorial/index.rst', 'docs/tutorial/introduction.rst', 'docs/tutorial/schema.rst', 'docs/tutorial/setup.rst', 'docs/tutorial/setuptools.rst', 'docs/tutorial/templates.rst', 'docs/tutorial/testing.rst', 'docs/tutorial/views.rst', 'examples/flaskr/.gitignore', 'examples/flaskr/MANIFEST.in', 'examples/flaskr/README', 'examples/flaskr/flaskr/__init__.py', 'examples/flaskr/{ => flaskr}/flaskr.py', 'examples/flaskr/{ => flaskr}/schema.sql', 'examples/flaskr/{ => flaskr}/static/style.css', 'examples/flaskr/{ => flaskr}/templates/layout.html', 'examples/flaskr/{ => flaskr}/templates/login.html', 'examples/flaskr/{ => flaskr}/templates/show_entries.html', 'examples/flaskr/setup.cfg', 'examples/flaskr/setup.py', 'examples/flaskr/tests/context.py', 'examples/flaskr/{ => tests}/test_flaskr.py']",Address # 1902 : Converts example/flaskr to have a setup.py ( # 1945 )
404,f19d3bd67e0d8213013cf06f47d951c8735515c8,2016-07-05 12:46:01-07:00,"class Module : pass myapp1 = Flask ( 'appname1 ' ) assert find_best_app ( Module ) == Module.app assert find_best_app ( Module ) == Module.myapp assert find_best_app ( mod ) == mod.app assert find_best_app ( mod ) == mod.application myapp = Flask ( 'appname ' ) `` `` '' Test of find_best_app . '' '' '' class mod : pytest.raises ( NoAppException , find_best_app , Module ) `` `` '' Test if ` find_best_app ` behaves as expected with different combinations of input . '' '' '' assert find_best_app ( Module ) == Module.application pytest.raises ( NoAppException , find_best_app , mod ) assert find_best_app ( mod ) == mod.myapp",['tests/test_cli.py'],Enhance tests.test_cli.test_find_best_app ( # 1882 )
405,b7a0cc61c54dbfebf8c3b21634ec9e37596b1e9a,2016-07-05 12:00:43-07:00,"and * virtualenv * can be a little trickier , but nothing very hard . The two crucial check that you can now just type : command : ` python ` to bring up the interpreter . ( you wo n't need to run : file : ` ez_setup.py ` ) . If you are on Mac OS X or Linux , chances are that one of the following two can either let : command : ` pip ` pull in the development version , or you can tell If you are on Windows and do n't have the : command : ` easy_install ` command , you must It should be double-clickable once you download it . If you already have `` pip `` , Most often , once you pull up a command prompt you want to be able to type `` pip `` packages you will need are setuptools and pip - these will let you install If you do n't currently have either , then : file : ` get-pip.py ` will install both for you Most often , once you pull up a command prompt you want to be able to type : command : ` pip ` anything else ( like virtualenv ) . Fortunately there are two `` bootstrap scripts '' If you are on Windows and do n't have the `` easy_install `` command , you must To install the latest setuptools , you can use its bootstrap file : privileges , and leave out : command : ` sudo ` . ) package you will need is pip - this will let you install you can run to install . command will work for you : : .. _ez_setup.py : https : //bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py privileges , and leave out `` sudo `` . ) `` pip `` with root privileges : : It will probably install virtualenv on your system . Maybe it 's even $ sudo easy_install virtualenv and : command : ` python ` which will run those things , but this might not automatically happen and `` python `` which will run those things , but this might not automatically happen you can run to install either . check that you can now just type `` python `` to bring up the interpreter . : command : ` pip ` with root privileges : : Either should be double-clickable once you download them . If you already have pip , One of these will probably install virtualenv on your system . Maybe it 's even and `` virtualenv `` can be a little trickier , but nothing very hard . The crucial Sometimes getting the standard `` Python packaging tools '' like * pip * , * setuptools * ` ez_setup.py ` _ or even better : : can either let `` pip `` pull in the development version , or you can tell commands as above , but without the `` sudo `` prefix . Sometimes getting the standard `` Python packaging tools '' like `` pip `` , `` setuptools `` commands will work for you : : If you do n't currently have `` pip `` , then ` get-pip.py ` will install it for you . If you are on Mac OS X or Linux , chances are that the following anything else ( like virtualenv ) . Fortunately there is a `` bootstrap script '' commands as above , but without the : command : ` sudo ` prefix .",['docs/installation.rst'],Update installation documentation for using 'pip ' command ( # 1920 )
406,d8c39f4b3753c0ebc93177661c43bfe35d7c019c,2016-06-22 14:53:27-07:00,< p > < input type=submit value=Register > < /p > < form method=post > < p > < input type=submit value=Register > < dt > { { field.label } } < form method=post action= '' /register '' > < dt > { { field.label } } < /dt >,['docs/patterns/wtforms.rst'],Revert `` wtforms : Add missing closing tags in example ( # 1917 ) ''
407,663d786f6888bbd308528284b6a26d433ef314ee,2016-06-22 13:26:35-07:00,"providing the : option : ` -- upgrade ` parameter : : $ easy_install -U Flask If you want to use the : command : ` easy_install ` command to upgrade your Flask installation , make sure to pass it the : option : ` -U ` parameter : : Use the : command : ` pip ` command to upgrade your existing Flask installation by $ pip install -- upgrade Flask",['docs/upgrading.rst'],Update documentation for upgrading Flask using 'pip ' command ( # 1918 )
408,146cba53e7be1d433ecae9999ae662b48921e520,2016-06-19 13:27:23-07:00,< dt > { { field.label } } < p > < input type=submit value=Register > < /p > < form method=post > < form method=post action= '' /register '' > < p > < input type=submit value=Register > < dt > { { field.label } } < /dt >,['docs/patterns/wtforms.rst'],wtforms : Add missing closing tags in example ( # 1917 )
409,9f2b3d815ec39279bfb838221580a36378a0de20,2016-06-16 22:40:23+02:00,"url ( '/user/ < username > ' , 'views.user ' ) # add two routes to a single function endpoint name and a dot , and by wrapping ` view_func ` in a ` LazyView ` as needed : : app.add_url_rule ( url_rule , view_func=view , * * options ) url_rules = [ '/user/ ' , '/user/ < username > ' ] for url_rule in url_rules : url ( 'views.user ' , url_rules ) def url ( url_rule , import_name , * * options ) : app.add_url_rule ( url_rule , view_func=view , * * options ) name and a dot , and by wrapping ` view_func ` in a ` LazyView ` as needed . : : url ( 'views.index ' , [ '/ ' ] ) # add a single route to the index view def url ( import_name , url_rules= [ ] , * * options ) : url ( '/ ' , 'views.index ' )",['docs/patterns/lazyloading.rst'],Demonstrate how to add multiple urls to the same function endpoint # 981 ( # 1900 )
410,b8aca21a392c367522eedb93f248f68005c84908,2016-06-15 09:27:06-07:00,from itsdangerous import json as _json from itsdangerous import simplejson as _json except ImportError : from itsdangerous import json as _json try :,['flask/json.py'],Fix # 1911 ( # 1913 )
411,c0087204e5b83ad4e3983d07b66d17acdde0b9de,2016-06-14 23:55:47-07:00,"... print ( value ) > > > # Or , you can get them based on index function we created above : : Doe This would use Row objects rather than dicts to return the results of queries . These are `` namedtuple `` s , so we can access them either by index or by key . For example , assuming we have a `` sqlite3.Row `` called `` r `` for the rows `` id `` , `` FirstName `` , `` LastName `` , and `` MiddleInitial `` : : dictionaries instead of tuples , this could be inserted into `` get_db `` : : John dictionaries instead of tuples , this could be inserted into the `` get_db `` # Row objects are also iterable : > > > for value in r : > > > # You can get values based on the row 's name 1 This will make the sqlite3 module return dicts for this database connection , which are much nicer to deal with . Even more simply , we could place this in `` get_db `` instead : : > > > r [ 1 ] Or even simpler : : > > > r [ 'FirstName ' ] M",['docs/patterns/sqlite3.rst'],Documentation : Clarify instructions about changing row_factory for SQLite3 ( # 1573 )
412,c80ea941d06b0899b8ecdce6179e5b5259e1c5ac,2016-06-14 22:46:27+02:00,: param static_url_path : add a static url path to urls in this blueprint `` `` '' Register a blueprint on the application . For information about : param url_prefix : set the prefix for all URLs defined on the blueprint . Options are passed as additional keyword arguments and forwarded to each and every URL defined with this blueprint `` ( url_prefix='/ < lang code > ' ) `` blueprints head over to : ref : ` blueprints ` . The blueprint name is passed in as the first argument . ` blueprints ` in an `` options '' dictionary . : param subdomain : set a subdomain for the blueprint : param root_path : set an alternate root path for this blueprint : param template_folder : set an alternate template folder : param url_defaults : a dictionary with URL defaults that is added to `` `` '' Registers a blueprint on the application . : param static_folder : add a static folder to urls in this blueprint,['flask/app.py'],Merge pull request # 1912 from pallets/revert-1811-iss1809_register_blueprint_docs
413,4f83f705e7a5f35381841148caf04b2829873faf,2016-06-07 20:12:40+02:00,"assert find_default_import_path ( ) == None monkeypatch.delitem ( os.environ , 'FLASK_APP ' , raising=False ) assert find_default_import_path ( ) == 'notanapp ' assert find_default_import_path ( ) == expect_rv tmpfile.write ( `` ) find_best_app , locate_app , with_appcontext , prepare_exec_for_file find_best_app , locate_app , with_appcontext , prepare_exec_for_file , \ tmpfile = tmpdir.join ( 'testapp.py ' ) find_default_import_path monkeypatch.setitem ( os.environ , 'FLASK_APP ' , 'notanapp ' ) `` `` '' Test of find_default_import_path . '' '' '' def test_find_default_import_path ( test_apps , monkeypatch , tmpdir ) : monkeypatch.setitem ( os.environ , 'FLASK_APP ' , str ( tmpfile ) ) expect_rv = prepare_exec_for_file ( str ( tmpfile ) )",['tests/test_cli.py'],Merge pull request # 1881 from antsar/master
414,00c200eeaa6af7c5c25c37471ab0313ae26651b4,2016-06-05 15:25:35-07:00,"Python 3 Support in Flask support the new iteration of the Python programming language . While the We strongly recommend using Python 2.7 with activated Python 3 partially caused by changes in the language that went unreviewed for too long , partially also because we have not quite worked out how the lower compatible Python code Currently the Python community is in the process of improving libraries to If you think of using Flask with Python 3 have a look at the situation is greatly improving there are still some issues that make it If you do want to dive into Python 3 already have a look at the The Status of Python 3 hard for users to switch over to Python 3 just now . These problems are level API should change to account for the Unicode differences in Python 3 . warnings during development . If you plan on upgrading to Python 3 in the < http : //lucumr.pocoo.org/2011/1/22/forwards-compatible-python/ > ` _ . near future we strongly recommend that you read ` How to write forwards",['docs/advanced_foreword.rst'],"Update documentation about python 3 support in Flask , resolves # 1578"
415,434c19933eb445907d73b9bb9e4973d546f5ee52,2016-06-05 13:22:19-07:00,"the login form , you 'll have to pass it along when sending the `` POST `` request or `` requests.form `` . : : that the : meth : ` ~flask.Flask.route ` decorator is the outermost : : from the login form . You can do this with a hidden input tag and `` requests.values `` While the `` next `` value may exist in `` request.args `` after a `` GET `` request for that the : meth : ` ~flask.Flask.route ` decorator is the outermost .",['docs/patterns/viewdecorators.rst'],Add clarification for login_required decorator ref # 313
416,64a37bb9b758630c0f2c649d82e10e849c095d48,2016-06-05 10:32:00-07:00,"dirname = os.path.dirname ( os.path.dirname ( realpath ) ) realpath = os.path.realpath ( '/tmp/share/test.py ' ) assert prepare_exec_for_file ( '/tmp/share/test.py ' ) == 'test ' `` `` '' Expect the correct path to be set and the correct module name to be returned . the parent directory of given file is added to ` sys.path ` . assert prepare_exec_for_file ( '/tmp/share/__init__.py ' ) == 'share ' : func : ` prepare_exec_for_file ` has a side effect , where dirname = os.path.dirname ( realpath ) `` `` '' import sys assert prepare_exec_for_file ( 'test.py ' ) == 'test ' assert prepare_exec_for_file ( '/usr/share/__init__.py ' ) == 'share ' import os assert dirname in sys.path prepare_exec_for_file ( '/tmp/share/test.txt ' ) realpath = os.path.realpath ( '/tmp/share/__init__.py ' ) prepare_exec_for_file ( 'test.txt ' )",['tests/test_cli.py'],Test side effect ( # 1889 )
417,9f9e1fde8fc91b64a0cf99bf0debaae5806a2644,2016-06-04 21:12:55+02:00,"( ( '/a ' , ' b/c ' , ) , '/a/b/c ' ) , ( ( '/ ' , ' a/ ' , ' b/ ' , ' c/ ' , ) , '/a/b/c ' ) , def safe_join ( directory , filename ) : if sep in filename : paths fall out of its boundaries . directory = os.path.join ( directory , filename ) if sep in filename : filename == ' .. ' or \ for sep in _os_alt_seps : ( ( ' a/b/c ' , ' X/ .. ' ) , ' a/b/c/ . ' , ) , return directory passing = ( # Base directory is always considered safe ) : raises : : class : ` ~werkzeug.exceptions.NotFound ` if the resulting path ( ( '/a/b ' , ' c/X/ .. ' ) , '/a/b/c ' , ) , `` `` '' Safely join ` directory ` and ` filename ` . ( '/a ' , ' b ' , ' c/ .. / .. ' ) , # Preserve dot slash # Boundaries violations after path normalization ( ( '/ .. ' , ) , '/ .. ' ) , # Valid combinations of * args and expected joined paths . # path.isabs and `` .. '' checks ( '/a ' , ' b ' , '/c ' ) , Make `` flask.safe_join `` able to join multiple paths like `` os.path.join `` def safe_join ( directory , * pathnames ) : from werkzeug.exceptions import BadRequest , NotFound ( '/a ' , ' .. ' , ' b/c ' ) , # Should raise werkzeug.exceptions.NotFound on unsafe joins . ( ( ' a/b ' , ' X/ .. /c ' ) , ' a/b/c ' , ) , ( '/a ' , ' b/ .. / .. /c ' , ) , ( '/a ' , ' .. /b/c ' , ) , for args , expected in passing : def test_safe_join_exceptions ( self ) : from werkzeug.exceptions import BadRequest : param filename : the untrusted filename relative to that directory . if os.path.isabs ( filename ) or \ filename == ' .. ' or \ would fall out of ` directory ` . ( ( ' a ' , ' b ' , ' c ' , ) , ' a/b/c ' ) , for sep in _os_alt_seps : class TestSafeJoin ( object ) : components . def test_safe_join ( self ) : filename = posixpath.normpath ( filename ) ( '/a ' , ' b/ .. /b/ .. / .. /c ' , ) , ( ( ' .. / ' , ' a/b/c ' ) , ' .. /a/b/c ' ) , for filename in pathnames : if filename ! = `` : filename.startswith ( ' .. / ' ) : raise NotFound ( ) for args in failing : : param pathnames : the untrusted pathnames relative to that directory . filename.startswith ( ' .. / ' ) : with pytest.raises ( NotFound ) : : param directory : the trusted base directory . ( pull request `` # 1730 `` ) . assert flask.safe_join ( * args ) == expected : raises : : class : ` ~werkzeug.exceptions.NotFound ` if one or more passed filename = posixpath.normpath ( filename ) : param directory : the base directory . # If last path is `` add a slash ( ( '/a/b/c ' , './ ' , ) , '/a/b/c/ . ' , ) , raise NotFound ( ) `` `` '' Safely join ` directory ` and zero or more untrusted ` pathnames ` if os.path.isabs ( filename ) or \ return os.path.join ( directory , filename ) failing = ( ( ( '/a/b/c ' , `` , ) , '/a/b/c/ ' , ) , print ( flask.safe_join ( * args ) ) ( ( ' a/b/c ' , ) , ' a/b/c ' ) ,","['CHANGES', 'flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 1730 from geusebi/master
418,9c236d3b84332aef0c834266a0e3d2171fe5a7bd,2016-06-03 23:25:16-07:00,"priority than the actual application 's template folder . That way you can The template folder is added to the search path of templates but with a lower folder . That way you can easily override templates that a blueprint For static files , the path can be absolute or relative to the blueprint by a template named `` index.html `` in the actual application template resource folder . The template folder is added to the searchpath of easily override templates that a blueprint provides in the actual application . templates but with a lower priority than the actual application 's template provides in the actual application . has the same relative path . When multiple blueprints provide the same relative this : : file : ` yourapplication/admin/templates/admin/index.html ` . The reason overridden , make sure that no other blueprint or actual application template As for static files , the path can be absolute or relative to the blueprint template path the first blueprint registered takes precedence over the others . This also means that if you do n't want a blueprint template to be accidentally folder . for the extra `` admin `` folder is to avoid getting our template overridden this : : file : ` yourapplication/admin/templates/admin/index.html ` . resource folder .",['docs/blueprints.rst'],Mention the template name conflict issue in blueprint templates docs ( # 1843 )
419,bbd6c8c791ffa0f9f30f31d17e47e8fe8e587526,2016-06-03 14:32:10-07:00,"py.test -- cov=flask tests/ plugin . This assumes you have already run the testsuite ( see previous section ) : : Generating a report of lines that do not have unit test coverage can indicate where Running test coverage py.test -- cov-report html -- cov=flask tests/ pip install pytest-cov Generate a HTML report can be done using this command : : to start contributing . `` pytest `` integrates with `` coverage.py `` , using the `` pytest-cov `` Full docs on `` coverage.py `` are here : https : //coverage.readthedocs.io After this has been installed , you can output a report to the command line using this command : : Details on contributing can be found in CONTRIBUTING.rst","['CONTRIBUTING.rst', 'README']",Expanding contribution documentation ( # 1883 )
420,e048aa4e19d689104733783a19560a6a485a473c,2016-06-03 10:58:39-07:00,"with pytest.raises ( TypeError ) as e : with app.test_request_context ( ) : def test_jsonify_args_and_kwargs_check ( ) : app = flask.Flask ( __name__ ) assert 'behavior undefined ' in str ( e.value ) flask.jsonify ( 'fake args ' , kwargs='fake ' )",['tests/test_basic.py'],Add negative test for json.jsonify ( # 1876 )
421,2bde2065e646a67665cb4eaac3219e78524e29ad,2016-06-03 18:43:32+02:00,"Bugfix release , unreleased . pull request `` # 1872 `` . Version 0.11.1 Fixed a bug that prevented `` FLASK_APP=foobar/__init__.py `` from working . See",['CHANGES'],Changelog for # 1872
422,fe5f714026b68b1416c3d3985bce5063901c320f,2016-06-03 18:41:10+02:00,"assert prepare_exec_for_file ( 'test.py ' ) == 'test ' if os.path.split ( filename ) [ 1 ] == '__init__.py ' : with pytest.raises ( NoAppException ) : prepare_exec_for_file ( 'test.txt ' ) elif os.path.split ( filename ) [ 1 ] == '__init__.py ' : if filename.endswith ( '.py ' ) : filename = os.path.dirname ( filename ) filename = os.path.dirname ( filename ) def test_prepare_exec_for_file ( test_apps ) : elif filename.endswith ( '.py ' ) : find_best_app , locate_app , with_appcontext assert prepare_exec_for_file ( '/usr/share/__init__.py ' ) == 'share ' find_best_app , locate_app , with_appcontext , prepare_exec_for_file","['flask/cli.py', 'tests/test_cli.py']",fixed unmatched elif ( # 1872 )
423,f034d2e271403c7b3b8a1c2728b2320ed157a037,2016-06-03 09:29:12-07:00,"REQUIREMENTS=lowest-simplejson envlist = { py26 , py27 , pypy } - { lowest , release , devel } { , -simplejson } , { py33 , py34 , py35 } - { release , devel } { , -simplejson } python : `` 3.4 '' envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 , py35 } - { release , devel } REQUIREMENTS=release-simplejson env : REQUIREMENTS=lowest-simplejson python : `` 3.5 '' python : `` 3.3 '' simplejson : simplejson REQUIREMENTS=devel-simplejson","['.travis.yml', 'tox.ini']",Tests with and without simplejson for every existing testenv ( # 1869 )
424,ae97ca855361dc47b45f85371d557419c0e764dc,2016-06-03 14:55:33+02:00,"class MyRequest ( Request ) : One reason to subclass would be customizing the Jinja2 : class : ` ~jinja2.Environment ` . For example , to add a new global template variable : : from datetime import datetime jinja_env = super ( MyFlask , self ) .create_jinja_environment ( self ) `` `` '' Flask with more global template vars `` '' '' current_time = datetime.datetime.now ( ) from flask import Flask , Request `` `` '' Flask subclass using the custom request class '' '' '' For example , you may want to override how request parameters are handled to preserve their order : : from flask import Flask request_class = MyRequest return jinja_env jinja_env.globals.update ( parameter_storage_class = ImmutableOrderedMultiDict `` `` '' Initialize my custom Jinja environment. `` '' '' ) `` `` '' Request subclass to override request parameter storage '' '' '' def create_jinja_environment ( self ) : from werkzeug.datastructures import ImmutableOrderedMultiDict",['docs/patterns/subclassing.rst'],Merge pull request # 1868 from antsar/master
425,3d72099dcd8dfdf127c23e7104c19bd70ea18f82,2016-06-03 14:44:13+02:00,"import warnings assert rv.mimetype == 'application/octet-stream ' rv = flask.send_file ( f ) rv.direct_passthrough = False c = app.test_client ( ) recwarn.pop ( DeprecationWarning ) def catch_deprecation_warnings ( ) : value , options = \ yield rv.close ( ) def test_request_module ( self , catch_deprecation_warnings ) : def catch_deprecation_warnings ( recwarn ) : def inner ( ) : c.post ( '/ ' , data= ' { `` spam '' : 42 } ' , content_type='application/json ' ) recwarn.pop ( DeprecationWarning ) assert rv.data == b'Test ' assert len ( captured ) == 3 rv = flask.send_file ( f ) c.post ( '/ ' , data= ' { `` spam '' : 42 } ' , content_type='application/json ' ) a = recwarn.pop ( DeprecationWarning ) rv.direct_passthrough = False assert set ( w.category for w in recwarn.list ) \ with open ( os.path.join ( app.root_path , 'static/index.html ' ) , mode='rb ' ) as f : return lambda : warnings.catch_warnings ( record=True ) c.get ( '/ ' ) @ pytest.fixture c = app.test_client ( ) rv = flask.send_file ( f , mimetype='text/plain ' ) from flask.exthook import ExtDeprecationWarning def test_static_path_deprecated ( recwarn ) : recwarn.clear ( ) f.name = 'test.txt ' assert len ( recwarn.list ) == 2 def test_send_file_object ( self , recwarn ) : def test_request_module ( self , recwarn ) : assert not recwarn.list assert len ( captured ) == 2 f = StringIO ( 'Test ' ) def __getattr__ ( self , name ) : rv.close ( ) b = recwarn.pop ( DeprecationWarning ) # mimetypes + etag def __init__ ( self , * args , * * kwargs ) : assert rv.mimetype == 'text/plain ' f.name = 'test.txt ' def test_attachment ( self , catch_deprecation_warnings ) : # etags rv.close ( ) self._io = StringIO ( * args , * * kwargs ) app = flask.Flask ( __name__ , static_path='/foo ' ) f = PyStringIO ( 'Test ' ) f = open ( os.path.join ( app.root_path , 'static/index.html ' ) , mode='rb ' ) warnings.simplefilter ( 'default ' , category=DeprecationWarning ) parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) return getattr ( self._io , name ) c.get ( '/ ' ) def test_attachment ( self , recwarn ) : def test_send_file_xsendfile ( self , catch_deprecation_warnings ) : assert len ( captured ) == 1 def test_request_json ( self , catch_deprecation_warnings ) : value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) def disable_extwarnings ( request , recwarn ) : f = StringIO ( 'Test ' ) class PyStringIO ( object ) : with catch_deprecation_warnings ( ) as captured : # etags def test_request_json ( self , recwarn ) : assert len ( captured ) == 1 def __getattr__ ( self , name ) : assert ' x-sendfile ' not in rv.headers assert rv.mimetype == 'application/octet-stream ' with catch_deprecation_warnings ( ) as captured : self._io = StringIO ( * args , * * kwargs ) def __init__ ( self , * args , * * kwargs ) : < = set ( [ ExtDeprecationWarning ] ) return getattr ( self._io , name ) f = open ( os.path.join ( app.root_path , 'static/index.html ' ) ) def test_send_file_xsendfile ( self ) : gc.collect ( ) assert rv.mimetype == 'text/plain ' recwarn.pop ( DeprecationWarning ) with app.test_request_context ( ) : assert ' x-sendfile ' not in rv.headers rv = flask.send_file ( f , mimetype='text/plain ' ) with open ( os.path.join ( app.root_path , 'static/index.html ' ) ) as f : def test_static_path_deprecated ( ) : request.addfinalizer ( inner ) # mimetypes + etag c = recwarn.pop ( UserWarning ) # file not found with pytest.deprecated_call ( ) : class PyStringIO ( object ) : f = PyStringIO ( 'Test ' ) assert rv.data == b'Test ' with app.test_request_context ( ) : import gc def test_send_file_object ( self , catch_deprecation_warnings ) : app = flask.Flask ( __name__ , static_path='/foo ' )","['tests/conftest.py', 'tests/test_basic.py', 'tests/test_deprecations.py', 'tests/test_ext.py', 'tests/test_helpers.py']",Merge pull request # 1878 from untitaker/recwarn
426,fa327fd4fadcca746b466dfd8dbd166a50d8efad,2016-06-03 01:00:55-07:00,"Fortunately , there are Flask extensions for the purpose of of Flask and plain text passwords are used for simplicity . database or file . many general python libraries that can be used for hashing . this functionality is fairly straight forward . There are also .. _hashed and salted : https : //blog.codinghorror.com/youre-probably-storing-passwords-incorrectly/ protect login credentials if someone happens to have access to your database . password . However , the emphasis of this tutorial is to demonstrate the basics plan to release a project based off this tutorial out into the world , You can find a list of recommended Flask extensions Passwords should never be stored in plain text in a production hashing passwords and verifying passwords against hashes , so adding ` here < http : //flask.pocoo.org/extensions/ > ` _ system . This tutorial uses plain text passwords for simplicity . If you passwords should be both ` hashed and salted ` _ before being stored in a One way to do this is to use Security Helpers from Werkzeug to hash the .. admonition : : Security Note Note that it is not a good idea to store passwords in plain text . You want to",['docs/tutorial/views.rst'],Tutorial : Note extensions for encrypting passwords ( # 1854 )
427,62aaee02f754c74e0a051097c869cdabb0f0a09d,2016-06-03 07:15:00+02:00,"While ` Flask Extension Registry ` _ contains many Flask extensions , you may not find an extension that fits your need . If this is the case , you can always create your own . Building Extensions Consider reading : ref : ` extension-dev ` to develop your own Flask extension .",['docs/extensions.rst'],Add a link to Extension Development ( # 1875 )
428,047efac537abad9e3880f545d8b767f6e6be3786,2016-06-02 17:56:08-07:00,"app = flask.Flask ( __name__ , static_path='/foo ' ) def test_static_url_path ( ) : with app.test_request_context ( ) : with pytest.deprecated_call ( ) : app = flask.Flask ( __name__ , static_url_path='/foo ' ) rv = app.test_client ( ) .get ( '/foo/index.html ' ) assert rv.status_code == 200 def test_static_path_deprecated ( ) : app.testing = True assert flask.url_for ( 'static ' , filename='index.html ' ) == '/foo/index.html '",['tests/test_basic.py'],Coverage for test_static_path_deprecated and test_static_url_path ( # 1860 )
429,d88c08e56f7398206596129036b8f101be11cba0,2016-06-02 15:40:59-07:00,using : meth : ` from_object ` . See : ref : ` config-dev-prod ` for an example of class-based configuration loads only the uppercase attributes of the module/class . A `` dict `` Example of module-based configuration : : `` dict `` are not attributes of the `` dict `` class . .. _config-dev-prod : Objects are usually either modules or classes . : meth : ` from_object ` object will not work with : meth : ` from_object ` because the keys of a Example usage : : Objects are usually either modules or classes . Just the uppercase variables in that object are stored in the config .,"['docs/config.rst', 'flask/config.py']",improved documentation for config.from_object ( # 1870 )
430,024fbe5a6076d0f3f793cd4a66d0b50decdb2a1a,2016-06-02 14:54:49-07:00,"def test_simplejson_does_not_escape_slashes ( self ) : `` `` '' Test that \\/ is no longer standard behavior . '' '' '' assert '\\/ ' not in simplejson.dumps ( '/ ' ) import simplejson except ImportError : envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 , py35 } - { release , devel } envlist = { py26 , py27 , pypy } - { lowest , release , devel , simplejson } , { py33 , py34 , py35 } - { release , devel , simplejson } simplejson : simplejson try : import json as simplejson","['tests/test_helpers.py', 'tox.ini']",Revert `` Adds simplejson as a testing target . '' ( # 1865 )
431,a228a3b2cfbc53d428f6cecade8b5b0fec576f03,2016-06-02 14:32:24-07:00,"Subclassing Flask application class . This works well with : ref : ` app-factories ` . See : doc : ` /patterns/subclassing ` for an example . current_time = datetime.datetime.now ( ) from flask import Flask This is the recommended approach for overriding or augmenting Flask 's internal functionality . class MyFlask ( Flask ) : One reason to subclass would be customizing the Jinja2 : class : ` ~jinja2.Environment ` . For example , to add a new global template variable : : ) subclassing application class . This works well with : ref : ` app-factories ` . ================= `` `` '' Initialize my custom Jinja environment. `` '' '' return jinja_env jinja_env = super ( MyFlask , self ) .create_jinja_environment ( self ) jinja_env.globals.update ( `` `` '' Flask with more global template vars `` '' '' def create_jinja_environment ( self ) : The : class : ` ~flask.Flask ` class is designed for subclassing . from datetime import datetime","['docs/becomingbig.rst', 'docs/patterns/index.rst', 'docs/patterns/subclassing.rst']",Merge pull request # 1862 from antsar/master
432,63b5dab0fc889f490b9fee803ae67efa3df28a09,2016-06-02 14:17:42-07:00,"Subclassing Flask application class . This works well with : ref : ` app-factories ` . See : doc : ` /patterns/subclassing ` for an example . current_time = datetime.datetime.now ( ) from flask import Flask This is the recommended approach for overriding or augmenting Flask 's internal functionality . class MyFlask ( Flask ) : One reason to subclass would be customizing the Jinja2 : class : ` ~jinja2.Environment ` . For example , to add a new global template variable : : ) subclassing application class . This works well with : ref : ` app-factories ` . ================= `` `` '' Initialize my custom Jinja environment. `` '' '' return jinja_env jinja_env = super ( MyFlask , self ) .create_jinja_environment ( self ) jinja_env.globals.update ( `` `` '' Flask with more global template vars `` '' '' def create_jinja_environment ( self ) : The : class : ` ~flask.Flask ` class is designed for subclassing . from datetime import datetime","['docs/becomingbig.rst', 'docs/patterns/index.rst', 'docs/patterns/subclassing.rst']",Add subclassing pattern/example to fix issue # 221 .
433,808d2cf75e7127618340149c5b0f1a9b608b617e,2016-06-02 14:15:24-07:00,"If a request context has not been pushed and an application context has : : RuntimeError : Working outside of application context . not been explicitly set , a `` RuntimeError `` will be raised .",['docs/appcontext.rst'],Merge pull request # 1861 from ryanbackman/master
434,d80fabd9f633fc0ef2955a127cc980ac9b0cc8fd,2016-06-02 12:30:25-07:00,"import json as simplejson import simplejson envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 , py35 } - { release , devel } def test_simplejson_does_not_escape_slashes ( self ) : envlist = { py26 , py27 , pypy } - { lowest , release , devel , simplejson } , { py33 , py34 , py35 } - { release , devel , simplejson } try : simplejson : simplejson assert '\\/ ' not in simplejson.dumps ( '/ ' ) `` `` '' Test that \\/ is no longer standard behavior . '' '' '' except ImportError :","['tests/test_helpers.py', 'tox.ini']",Merge pull request # 1855 from JamesTFarrington/sprint
435,5cf261a2876cd311c7abe17c14da733a48a4343d,2016-06-02 11:59:50-07:00,large for session cookies causes message flashing to fail silently . template that does this . a limit on cookie sizes . This means that flashing messages that are too template that does this . Note that browsers and sometimes web servers enforce,['docs/patterns/flashing.rst'],Merge pull request # 1851 from prachikhadke/1789-document-flash-limit
436,390cd5e4eec8340d74e8b72b2d51a5a3eeef3842,2016-06-02 11:58:02-07:00,"import json as simplejson import simplejson envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 , py35 } - { release , devel } def test_simplejson_does_not_escape_slashes ( self ) : envlist = { py26 , py27 , pypy } - { lowest , release , devel , simplejson } , { py33 , py34 , py35 } - { release , devel , simplejson } try : simplejson : simplejson assert '\\/ ' not in simplejson.dumps ( '/ ' ) `` `` '' Test that \\/ is no longer standard behavior . '' '' '' except ImportError :","['tests/test_helpers.py', 'tox.ini']",Fixed # 1846
437,19b134002cdd6be9f3543a7b6d18b4c05fa44fe9,2016-06-02 13:53:13+02:00,"message = 'Flask % ( version ) s\nPython % ( python_version ) s ' def __init__ ( self , add_default_commands=True , create_app=None , is_flag=True , is_eager=True ) help='Show the flask version ' , AppGroup.__init__ ( self , params=params , * * extra ) add_version_option=True , * * extra ) : ctx.exit ( ) def __init__ ( self , add_default_commands=True , create_app=None , * * extra ) : callback=get_version , AppGroup.__init__ ( self , * * extra ) 'version ' : __version__ , : param add_version_option : adds the : option : ` -- version ` option . from . import __version__ params.append ( version_option ) return if not value or ctx.resilient_parsing : click.echo ( message % { expose_value=False , params = list ( extra.pop ( 'params ' , None ) or ( ) ) 'python_version ' : sys.version , version_option = click.Option ( [ ' -- version ' ] , if add_version_option : def get_version ( ctx , param , value ) : } , color=ctx.color )",['flask/cli.py'],Merge pull request # 1848 from RaHus/add_version_switch_flask_cli
438,e4c712ffd2682f963906e1d0d27e67b7f83d95ce,2016-05-31 21:20:22+02:00,"print ( message % args , file=sys.stderr ) from __future__ import print_function print ( 'Error : ' , message % args , file=sys.stderr ) print line print > > sys.stderr , 'Error : ' , message % args print > > sys.stderr , message % args print ( line )","['scripts/flask-07-upgrade.py', 'scripts/make-release.py']",a few more python3-compatible print ( # 1840 )
439,70de011d5102bea6b97010643cf36698f94f97fb,2016-05-29 15:49:38+02:00,"'https : //wtforms.readthedocs.io/en/latest/ ' : None , < https : //virtualenv.readthedocs.io/en/latest/index.html > ` _ . .. _WTForms : https : //wtforms.readthedocs.io/ 'https : //wtforms.readthedocs.org/en/latest/ ' : None , .. _greenlet : http : //greenlet.readthedocs.org/en/latest/ .. _WTForms : http : //wtforms.readthedocs.org/ .. _WTForms website : http : //wtforms.readthedocs.org/ < http : //virtualenv.readthedocs.org/en/latest/index.html > ` _ . .. _WTForms website : https : //wtforms.readthedocs.io/ .. _greenlet : https : //greenlet.readthedocs.io/en/latest/","['CONTRIBUTING.rst', 'docs/conf.py', 'docs/deploying/wsgi-standalone.rst', 'docs/patterns/wtforms.rst']",Convert readthedocs link for their .org - > .io migration for hosted projects ( # 1827 )
440,e83d608d7d34c7fe8b98d468eb5d2c579ca3b7bf,2016-05-27 12:00:16+02:00,"Afterwards failures are automatically reported to Sentry and from there ... frequency thresholds . < github.com/getsentry/sentry > ` __ and is also available as a ` hosted version aggregates duplicate errors , captures the full stack trace and local sentry = Sentry ( dsn='YOUR_DSN_HERE ' ) variables for debugging , and sends you mails based on new errors or app = Flask ( __name__ ) from raven.contrib.flask import Sentry overwhelming if enough users are hitting the error and log files are Of if you are using factories you can also init it later : : sentry.init_app ( app ) Sending error mails , even if just for critical ones , can become available as an Open Source project ` on GitHub To use Sentry you need to install the ` raven ` client : : you can receive error notifications . sentry = Sentry ( app , dsn='YOUR_DSN_HERE ' ) from your Sentry installation . Error Logging Tools < http : //www.getsentry.com/ > ` _ for dealing with application errors . It 's return app < https : //getsentry.com/signup/ > ` _ which you can try for free . Sentry $ pip install raven def create_app ( ) : The ` YOUR_DSN_HERE ` value needs to be replaced with the DSN value you get And then add this to your Flask app : : typically never looked at . This is why we recommend using ` Sentry",['docs/errorhandling.rst'],Merge pull request # 1823 from pallets/feature/sentry-docs
441,8d7e7aab31f0e3cf4d009376b6d210ae1a27785b,2016-05-26 22:31:15+02:00,"rv = _app_ctx_stack.pop ( ) try : if app_ctx is not None : request_close ( ) clear_request = False self._refcnt -= 1 self.preserved = False clear_request = True self.app.do_teardown_request ( exc ) called.append ( 'TEARDOWN ' ) # get rid of circular dependencies at the end of the request self.app.do_teardown_appcontext ( exc ) self.app.do_teardown_appcontext ( exc ) rv.request.environ [ 'werkzeug.request ' ] = None self._preserved_exc = None # so that we do n't require the GC to be active . if clear_request : def test_clean_pop ( ) : # we do that now . This will only go into effect on Python 2.x , exc = sys.exc_info ( ) [ 1 ] sys.exc_clear ( ) rv = _request_ctx_stack.pop ( ) if not self._implicit_app_ctx_stack : if hasattr ( sys , 'exc_clear ' ) : rv = _app_ctx_stack.pop ( ) self._preserved_exc = None app_ctx.pop ( exc ) self._refcnt -= 1 try : exc = sys.exc_info ( ) [ 1 ] contexts lingering around . # If this interpreter supports clearing the exception information if not self._implicit_app_ctx_stack : if self._refcnt < = 0 : self.app.do_teardown_request ( exc ) # get rid of circular dependencies at the end of the request if exc is _sentinel : if request_close is not None : app = flask.Flask ( __name__ ) # on 3.x it disappears automatically at the end of the exception request_close = getattr ( self.request , 'close ' , None ) assert rv is self , 'Popped wrong request context . ' \ def teardown_app ( error=None ) : # Get rid of the app as well if necessary . ' ( % r instead of % r ) ' % ( rv , self ) request_close ( ) # so that we do n't require the GC to be active . # Get rid of the app as well if necessary . sys.exc_clear ( ) except ZeroDivisionError : # stack . if exc is _sentinel : assert not flask.current_app called = [ ] if clear_request : clear_request = True rv = _request_ctx_stack.pop ( ) if app_ctx is not None : # we do that now . This will only go into effect on Python 2.x , assert rv is self , 'Popped wrong request context . ( % r instead of % r ) ' \ % ( rv , self ) Exceptions during teardown handling will no longer leave bad application # If this interpreter supports clearing the exception information def teardown_req ( error=None ) : app_ctx.pop ( exc ) self.preserved = False clear_request = False finally : # stack . 1 / 0 called.append ( flask.current_app.name ) if request_close is not None : rv.request.environ [ 'werkzeug.request ' ] = None if self._refcnt < = 0 : with app.test_request_context ( ) : assert called == [ 'test_appctx ' , 'TEARDOWN ' ] if hasattr ( sys , 'exc_clear ' ) : request_close = getattr ( self.request , 'close ' , None ) pass # on 3.x it disappears automatically at the end of the exception","['CHANGES', 'flask/ctx.py', 'tests/test_appctx.py']",Merge pull request # 1822 from pallets/bugfix/better-pop
442,c73cf0f82ef011ac4dbaf00ce4e8318fb9fb53dc,2016-05-26 22:17:34+02:00,"return ' '' , def _load_plugin_commands ( self ) : try : self._loaded_plugin_commands = True ... def cli ( ) : can run `` flask my-command `` to invoke your command . This is useful to to Flask which is through ` setuptools ` . If you make a Python package that provide extra functionality that Flask itself can not ship . commands if they want . However there is a second way to add CLI plugins entry_points= '' ' [ flask.commands ] should export a Flask command line plugin you can ship a ` setup.py ` file import click import pkg_resources self._load_plugin_commands ( ) if self._loaded_plugin_commands : self._loaded_plugin_commands = False for ep in pkg_resources.iter_entry_points ( 'flask.commands ' ) : that declares an entrypoint that points to a click command : my-command=mypackage.commands : cli self._loaded_plugin_commands = True Once that package is installed in the same virtualenv as Flask itself you name='flask-my-extension ' , Example ` setup.py ` : : ) CLI Plugins Inside ` mypackage/comamnds.py ` you can then export a Click object : : from setuptools import setup setup ( self.add_command ( ep.load ( ) , ep.name ) Flask extensions can always patch the ` Flask.cli ` instance with more `` `` '' This is an example command . '' '' '' except ImportError :","['docs/cli.rst', 'flask/cli.py']",Merge pull request # 1821 from pallets/feature/plugin-cli
443,b13e83a2f228625b66c04003a1df7f8e7fb4176d,2016-05-26 21:48:20+02:00,"try : # a per build call basis . old_scheme = None # underlying Werkzeug router does not support overriding the scheme on rv = url_adapter.build ( endpoint , values , method=method , def index ( ) : assert flask.url_for ( 'index ' , _external=True , _scheme='https ' ) == 'https : //localhost/ ' finally : force_external=external ) def test_url_for_with_alternating_schemes ( self ) : force_external=external ) if old_scheme is not None : return '42 ' url_adapter.url_scheme = old_scheme app = flask.Flask ( __name__ ) with app.test_request_context ( ) : # This is not the best way to deal with this but currently the rv = url_adapter.build ( endpoint , values , method=method , old_scheme = url_adapter.url_scheme assert flask.url_for ( 'index ' , _external=True ) == 'http : //localhost/ '","['flask/helpers.py', 'tests/test_helpers.py']",Merge pull request # 1813 from pallets/bugfix/scheme
444,87787b130b28b97848e57b2c838e92186755cd21,2016-05-26 21:34:56+02:00,"raise TemplateNotFound ( template ) return self._get_source_fast ( environment , template ) if explain : def _get_source_explained ( self , environment , template ) : if self.app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] : if trv is None : trv = rv tmplrv = rv trv = None tmplrv = None return trv except TemplateNotFound : if trv is not None : continue try : return loader.get_source ( environment , template ) from .debughelpers import explain_template_loading_attempts return tmplrv return self._get_source_explained ( environment , template ) if tmplrv is None : def _get_source_fast ( self , environment , template ) : explain_template_loading_attempts ( self.app , template , attempts ) if tmplrv is not None : break for srcobj , loader in self._iter_loaders ( template ) : from .debughelpers import explain_template_loading_attempts if not explain : explain_template_loading_attempts ( self.app , template , attempts ) explain = self.app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ]",['flask/templating.py'],Merge pull request # 1814 from pallets/feature/faster-template-loading
445,bdbca923ef26424f605b4c744131512a5edb0f1e,2016-05-22 07:09:21-07:00,: param static_url_path : add a static url path to urls in this blueprint ` blueprints ` in an `` options '' dictionary . Options are passed as additional keyword arguments and forwarded to : param template_folder : set an alternate template folder `` ( url_prefix='/ < lang code > ' ) `` blueprints head over to : ref : ` blueprints ` . `` `` '' Registers a blueprint on the application . `` `` '' Register a blueprint on the application . For information about : param url_prefix : set the prefix for all URLs defined on the blueprint . : param subdomain : set a subdomain for the blueprint The blueprint name is passed in as the first argument . : param static_folder : add a static folder to urls in this blueprint : param root_path : set an alternate root path for this blueprint each and every URL defined with this blueprint : param url_defaults : a dictionary with URL defaults that is added to,['flask/app.py'],Addressing Issue 1809 ( # 1811 )
446,c810fae9e835ad446e7e9d61c12bbf2f6b597109,2016-05-20 12:57:10-07:00,"print 'Results written to ' , filename print ( ' [ EXTTEST ] ' + ( msg % args ) ) print ( 'Results written to { } '.format ( filename ) ) print ' [ EXTTEST ] ' , msg % args",['scripts/flaskext_tester.py'],turn 2 prints to py2/py3 compatible syntax ( # 1812 )
447,88500f5cc709e2e931e6547ed9b58033a50215a8,2016-05-16 19:36:55+02:00,"result = runner.invoke ( cli , [ 'subgroup ' , 'test2 ' ] , obj=obj ) import pytest `` `` '' Test of find_best_app . '' '' '' assert obj.load_app ( ) == app from click.testing import CliRunner result = runner.invoke ( cli , [ 'test ' ] , obj=obj ) def test_find_best_app ( test_apps ) : `` `` '' assert find_best_app ( mod ) == mod.myapp pytest.raises ( RuntimeError , locate_app , `` cliapp.app : notanapp '' ) def subgroup ( ) : def cli ( * * params ) : self.cli = cli.AppGroup ( self.name ) `` `` '' Test of with_appcontext . '' '' '' `` `` '' Test FlaskGroup . '' '' '' assert find_best_app ( mod ) == mod.application from flask.cli import AppGroup , FlaskGroup , NoAppException , ScriptInfo , \ return Flask ( `` flaskgroup '' ) assert result.output == 'testappgroup\n ' obj = ScriptInfo ( create_app=lambda info : Flask ( `` testappgroup '' ) ) def test_with_appcontext ( ) : obj = ScriptInfo ( create_app=create_app ) def cli ( ) : : copyright : ( c ) 2016 by the Flask Team , see AUTHORS for more details . # Copyright ( C ) 2015 CERN . myapp2 = Flask ( 'appname2 ' ) application = Flask ( 'appname ' ) def test ( ) : def test_flaskgroup ( ) : # testapp = Flask ( 'testapp ' ) class mod : assert result.output == 'testapp\n ' assert app.name == `` createapp '' app = Flask ( 'appname ' ) assert result.output == 'flaskgroup\n ' find_best_app , locate_app , script_info_option , with_appcontext from cliapp.app import testapp # - * - coding : utf-8 - * app1 = Flask ( 'app1 ' ) assert locate_app ( `` cliapp.multiapp : app1 '' ) .name == `` app1 '' def test2 ( ) : # the Revised BSD License . assert find_best_app ( mod ) == mod.app # This file was part of Flask-CLI and was modified under the terms its license , def test_cli_name ( test_apps ) : assert locate_app ( `` cliapp.app : testapp '' ) .name == `` testapp '' from flask import Flask , current_app app = obj.load_app ( ) `` `` '' Test of locate_app . '' '' '' assert obj.load_app ( ) .name == `` testapp '' result = runner.invoke ( cli , [ 'test ' ] ) def test_locate_app ( test_apps ) : import click `` Make sure the CLI object 's name is the app 's name and not the app itself '' ~~~~~~~~~~~~~~ def test_appgroup ( ) : def testcmd ( ) : `` `` '' Test of ScriptInfo . '' '' '' def test_scriptinfo ( test_apps ) : app2 = Flask ( 'app2 ' ) myapp = Flask ( 'appname ' ) click.echo ( current_app.name ) from __future__ import absolute_import , print_function obj = ScriptInfo ( create_app=lambda info : Flask ( `` testapp '' ) ) return Flask ( `` createapp '' ) from flask import Flask obj = ScriptInfo ( app_import_path= '' cliapp.app : testapp '' ) pytest.raises ( NoAppException , find_best_app , mod ) def create_app ( info ) : runner = CliRunner ( ) self.cli = cli.AppGroup ( self ) : license : BSD , see LICENSE for more details . assert testapp.cli.name == testapp.name tests.test_cli assert locate_app ( `` cliapp.app '' ) .name == `` testapp '' result = runner.invoke ( testcmd , obj=obj ) assert result.exit_code == 0 pass","['flask/app.py', 'tests/test_apps/cliapp/__init__.py', 'tests/test_apps/cliapp/app.py', 'tests/test_apps/cliapp/multiapp.py', 'tests/test_cli.py']",Forward ported CLI tests from Flask-CLI and fixed a bug with the CLI 's name . ( # 1806 )
448,8011e1de28c82e5ab5c9727d10bcba997e8254ce,2016-05-09 07:44:17+02:00,`` `` '' When used in combination with a `` with `` statement this opens a the test client uses . Once the with block is left the session is the test client uses . Once the `` with `` block is left the session is information about how to use this class refer to `` `` '' When used in combination with a with statement this opens a end of a with body when used in a with statement . For general information end of a `` with `` body when used in a `` with `` statement . For general : class : ` werkzeug.test.Client ` . about how to use this class refer to : class : ` werkzeug.test.Client ` .,['flask/testing.py'],Merge pull request # 1801 from ben4ever/fix_doc_with_formatting
449,e8bd2c92029455abfcbbd3e10b161f9da0d269be,2016-05-08 21:58:38+02:00,"will need to install them yourself . Just still do as if there was a PyPI entry for it and provide a list of A working deployment with setuptools is the first step into more complex declare an `` entry point '' that another package can hook into to extend the * * installation manager * * : : command : ` easy_install ` , which comes with distribute ` include_package_data ` tells setuptools to look for a : file : ` MANIFEST.in ` file distribute Python libraries and extensions . It extends distutils , a basic ( like the name says ) distribute Python libraries and If you have Python 2 ( > =2.7.9 ) or Python 3 ( > =3.4 ) installed from python.org , make larger applications easier to distribute : want setuptools to lookup the packages for you automatically , you can use Dependencies are declared in the ` install_requires ` parameter as list . declare an `` entry point '' another package can hook into to extend the sooner or later will replace : command : ` easy_install ` which does more than just Just do it as if there was a PyPI entry and provide a list of how distribute will find the files . If you have an internal company either setuptools or distutils . are distributed with either distribute , the older setuptools or distutils . alternative locations where setuptools should look for tarballs : : can install other libraries for you . You can also use ` pip ` _ which ` include_package_data ` tells distribute to look for a : file : ` MANIFEST.in ` file reason for this is that distribute does not know which files to add for module installation system shipped with Python to also support various more A working deployment with distribute is the first step into more complex Dependencies are declared in the ` install_requires ` parameter as a list . Flask itself , and all the libraries you can find on PyPI are distributed with reason for this is that setuptools does not know which files to add for complex constructs that make larger applications easier to distribute : .. _ez_setup.py : https : //bootstrap.pypa.io/ez_setup.py extensions . It extends distutils , a basic module installation system alternative locations where distribute should look for tarballs : : how setuptools will find the files . If you have an internal company want distribute to lookup the packages for you automatically , you can use * * installation manager * * : : command : ` pip ` can install other libraries for you . Flask itself , and all the libraries you can find on the cheeseshop shipped with Python to also support various more complex constructs that server that contains the packages , provide the URL to that server there . you will already have pip and setuptools on your system . Otherwise , you installing packages for you . server that contains the packages , provide the URL to that server .",['docs/patterns/distribute.rst'],Merge pull request # 1795 from cgoldberg/update-docs-setuptools
450,de25e98f917ae441d186e8a722a0f40a6c7458f2,2016-05-04 06:46:49-07:00,parsing fails the : meth : ` on_json_loading_failed ` method on the request object will be invoked . By default this function will only load the json data if the mimetype is : mimetype : ` application/json ` this function will return `` None `` if the mimetype is not but this can be overridden by the ` force ` parameter . `` force `` parameter . If parsing fails the `` `` '' Parses the incoming JSON request data and returns it . By default : mimetype : ` application/json ` but this can be overridden by the `` `` '' Parses the incoming JSON request data and returns it . If invoked . : meth : ` on_json_loading_failed ` method on the request object will be,['flask/wrappers.py'],minor rewording of get_json documentation for clarity ( # 1781 )
451,2bf477cfeafd87c69b88e1ec58b5eb67abf756e2,2016-04-08 15:30:47-07:00,"Added the `` JSONIFY_MIMETYPE `` configuration variable ( pull request `` # 1728 `` ) . assert rv.mimetype == 'application/vnd.api+json ' with app.test_request_context ( ) : rv = flask.make_response ( mimetype='application/json ' app = flask.Flask ( __name__ ) app.config.update ( { `` JSONIFY_MIMETYPE '' : 'application/vnd.api+json ' } ) msg = { mimetype=current_app.config [ 'JSONIFY_MIMETYPE ' ] flask.jsonify ( msg ) , 200 ) `` JSONIFY_MIMETYPE `` MIME type used for jsonify responses . } `` msg '' : { `` submsg '' : `` W00t '' } , def test_jsonify_mimetype ( ) : 'JSONIFY_MIMETYPE ' : 'application/json ' ,","['CHANGES', 'docs/config.rst', 'flask/app.py', 'flask/json.py', 'tests/test_basic.py']",Add JSONIFY_MIMETYPE configuration variable ( # 1728 )
452,6bf42f9a845b7e54a39846f5410c9e3f6c80ba18,2016-04-04 11:22:34-07:00,"If the : attr : ` debug ` flag is set the server will automatically reload `` `` '' Runs the application on a local development server . If the : attr : ` debug ` flag is set the server will automatically reload Do not use `` run ( ) `` in a production setting . It is not intended to meet security and performance requirements for a production server . Instead , see : ref : ` deployment ` for WSGI server recommendations . `` `` '' Runs the application on a local development server .",['flask/app.py'],Merge pull request # 1577 from sprin/1102_warn_on_run
453,0030f637c5efe5ebfba35b95f1ce592641d0f969,2016-04-04 11:20:10-07:00,"your flask application ( without extension ) or the module which provides `` app `` . The `` -- manage-script-name `` will move the handling of `` SCRIPT_NAME `` to which will make requests to `` /yourapplication `` be directed to `` myapp : app `` . The `` -- manage-script-name `` will move the handling of `` SCRIPT_NAME `` to uwsgi , `` app `` is the callable inside of your application ( usually the line reads `` myapp : app `` , where `` myapp `` refers to the name of the file of your flask If your application is accessible at root level , you can use a single `` / `` directive which will make requests to `` /yourapplication `` be directed to application ( without extension ) . `` app `` is the callable inside of your uwsgi , since its smarter about that . It is used together with the `` -- mount `` since its smarter about that . It is used together with the `` -- mount `` directive `` app = Flask ( __name__ ) `` . instead of `` /yourapplication `` . `` myapp `` refers to the name of the file of application ( usually the line reads `` app = Flask ( __name__ ) `` .",['docs/deploying/uwsgi.rst'],Merge pull request # 1631 from stephane/sra/docs
454,4542bac4d43efbd2422a52714f96c0dedd08e2b4,2016-03-13 00:42:28+01:00,recursive-include docs * graft examples recursive-exclude tests * .pyc recursive-exclude docs * .pyo graft docs recursive-include artwork * graft artwork recursive-include examples * graft tests global-exclude * .py [ co ] recursive-exclude examples * .pyo recursive-exclude tests * .pyo recursive-include tests * recursive-exclude examples * .pyc recursive-exclude docs * .pyc,['MANIFEST.in'],Merge pull request # 1733 from welchbj/patch-1
455,1a7fd980f8579bd7d7d53c812a77c1dc64be52ba,2016-03-08 20:30:36+01:00,"validators.Required ( ) , accept_tos = BooleanField ( ' I accept the TOS ' , [ validators.DataRequired ( ) ] ) accept_tos = BooleanField ( ' I accept the TOS ' , [ validators.Required ( ) ] ) validators.DataRequired ( ) ,",['docs/patterns/wtforms.rst'],Merge pull request # 1748 from gaetan-petit/patch-1
456,d45445ed00f5d1839f19f66207ca276ebdc034c6,2016-03-04 13:51:07+01:00,"else : assert 'This was submitted : `` index.txt '' ' in str ( e ) except TemplateNotFound as e : 'file ( No such file or directory ) : ' ) try : assert ' A setup function was called ' in str ( e ) f ( * args , * * kwargs ) assert msg.endswith ( `` missing.cfg ' '' ) assert msg.endswith ( `` missing.cfg ' '' ) assert False , 'expected exception ' assert False , 'Expected exception ' except RuntimeError as e : assert `` 'FOO_SETTINGS ' is not set '' in str ( e ) assert msg.endswith ( `` missing.cfg ' '' ) try : assert 'http : //localhost/foo/ ' in str ( e ) except AssertionError as e : assert 'http : //localhost/foo/ ' in str ( e ) assert isinstance ( e , BadRequest ) 'file ( No such file or directory ) : ' ) else : with pytest.raises ( RuntimeError ) as e : assert False , 'expected IOError ' except IOError as e : assert ( 'Make sure to directly send ' except KeyError as e : assert 0 , 'expected exception ' with pytest.raises ( DebugFilesKeyError ) as e : 'your POST-request to this URL ' ) in str ( e ) with pytest.raises ( IOError ) as e : assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' assert ( 'Make sure to directly send ' 'your POST-request to this URL ' ) in str ( e ) except Exception : with pytest.raises ( AssertionError ) as e : with pytest.raises ( AssertionError ) as e : except DebugFilesKeyError as e : assert False , 'Expected runtime error ' assert ' A setup function was called ' in str ( e ) assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' with pytest.raises ( IOError ) as e : 'file ( No such file or directory ) : ' ) msg = str ( e.value ) except AssertionError as e : msg = str ( e.value ) c.get ( '/fail ' ) assert e.errisinstance ( BadRequest ) with pytest.raises ( KeyError ) as e : assert msg.endswith ( `` missing.json ' '' ) assert 'cookies ' in str ( e ) try : assert e.value.args and 'session is unavailable ' in e.value.args [ 0 ] e = pytest.raises ( RuntimeError , f , * args , * * kwargs ) assert False , 'expected exception ' except RuntimeError as e : assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' assert msg.endswith ( `` missing.json ' '' ) assert e.value.name == 'missing.html ' else : assert e.args and 'session is unavailable ' in e.args [ 0 ] assert e.name == 'missing.html ' assert 'Session backend did not open a session ' in str ( e.value ) assert 'cookies ' in str ( e.value ) assert `` 'FOO_SETTINGS ' is not set '' in str ( e.value ) assert msg.endswith ( `` missing.cfg ' '' ) with pytest.raises ( RuntimeError ) as e : assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' assert 'no file contents were transmitted ' in str ( e ) except RuntimeError : with pytest.raises ( TemplateNotFound ) as e : 'file ( No such file or directory ) : ' ) msg = str ( e ) assert 'This was submitted : `` index.txt '' ' in str ( e.value ) assert 0 , 'expected config ' assert False , 'Expected runtime error ' with pytest.raises ( RuntimeError ) : assert 'no file contents were transmitted ' in str ( e.value ) msg = str ( e ) pass assert 0 , 'expected runtime error ' pass except IOError as e : assert 'Session backend did not open a session ' in str ( e ) with pytest.raises ( Exception ) : c.get ( `` /fail '' ) assert False , 'Expected exception '","['tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_config.py', 'tests/test_reqctx.py', 'tests/test_testing.py']",Merge pull request # 1743 from homoSapiensSapiens/use_pytest_raises
457,e7d548595e8f2f03fb58c827bef8abae2f84aa59,2016-02-17 22:02:22+01:00,proxy_set_header X-Forwarded-For $ proxy_add_x_forwarded_for ; proxy_set_header X-Real-IP $ remote_addr ; proxy_set_header X-Forwarded-For $ proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $ scheme ; proxy_set_header Host $ host ; proxy_set_header Host $ host ; proxy_set_header X-Real-IP $ remote_addr ;,['docs/deploying/wsgi-standalone.rst'],Merge pull request # 1456 from jonafato/proxy-setup-x-forwarded-proto
458,d5308bb80c47a645dfcc06588bf173b5c3a3887f,2016-02-04 01:49:09-05:00,"except Exception , e : # : here , use the : meth : ` after_request ` decorator . be using the : command : ` flask ` command line script 's `` runserver `` be using the : command : ` flask ` command line script 's `` run `` support . # : currently logged in user . To register a function here , use the # : example be used to close database connections . To register a function support . except Exception as e : The resulting dictionary ` image_store_config ` would look like : : # : : meth : ` after_request ` decorator . The resulting dictionary ` image_store ` would look like : : # : example be used to open database connections or getting hold of the","['docs/reqcontext.rst', 'flask/app.py', 'flask/config.py']",Merge pull request # 1716 from lord63-forks/fix-typo
459,e7367c9bbf7187d1e3650093fd4aaf96d879a331,2016-01-26 20:40:26-05:00,"< larger-applications > ` . Distributing resources with standard modules is .. _ez_setup.py : https : //bootstrap.pypa.io/ez_setup.py .. _distribute_setup.py : http : //python-distribute.org/distribute_setup.py called ` setuptools ` . ` distribute ` is fully backwards compatible with As mentioned earlier , dependencies are pulled from PyPI . What if you ` setuptools ` , so it also uses the same import name . commonly used to ( like the name says ) distribute Python libraries and Deploying with Setuptools : ref : ` larger-applications ` pattern to see how this can be done . Flask already depends upon setuptools . If you do not , fear not , there is a Because you have Flask running , you either have setuptools or distribute Yes , even if you are using ` distribute ` , you are importing from a package .. _distribute : https : //pypi.python.org/pypi/distribute extensions . It extends distutils , a basic module installation system < larger-applications > ` . If you have not yet converted your application into how this can be done . ( like the name says ) distribute Python libraries and available on your system anyways . If you do not , fear not , there is a Deploying with Distribute a package , head over to the : ref : ` larger-applications ` pattern to see ` distribute ` _ , formerly setuptools , is an extension library that is Because you have Flask running , you have setuptools available on your system anyways . extensions . It extends distutils , a basic module installation system script to install it for you : ` ez_setup.py ` _ . Just download and .. _Setuptools : https : //pythonhosted.org/setuptools not yet converted your application into a package , head over to the I mentioned earlier that dependencies are pulled from PyPI . What if you not supported by ` distribute ` _ so we will not bother with it . If you have script to install it for you : ` distribute_setup.py ` _ . Just download and ` Setuptools ` _ , is an extension library that is commonly used to",['docs/patterns/distribute.rst'],Merge pull request # 1588 from Akasurde/i_1465
460,7df543d5dc48c9a653403b1be2c8e83ba0f6c7f7,2016-01-25 22:52:09-08:00,security risk in ancient browsers . See : ref : ` json-security ` for details . : ref : ` json_security ` for details . elif len ( args ) == 1 : # single args are passed directly to dumps ( ) : func : ` dumps ` . else : # convert kwargs to a dict else : : func : ` dumps ` . data = args or kwargs elif args : # convert multiple args into an array security risk in ancient browsers . See : ref : ` json_security ` for details . data = list ( args ) elif len ( args ) == 1 : # single args are passed directly to dumps ( ) : ref : ` json-security ` for details . data = dict ( kwargs ),"['CHANGES', 'flask/json.py']",Merge pull request # 1703 from jeffwidman/master
461,7b1ebfbc4d517c2b9de2e4e4ddabffaead1190df,2016-01-25 22:17:04-08:00,"use_debugger=debugger , threaded=with_threads , def test_werkzeug_passthrough_errors ( monkeypatch , debug , use_debugger , # Mocks werkzeug.serving.run_simple method use_reloader , propagate_exceptions ) : app.config [ 'PROPAGATE_EXCEPTIONS ' ] = propagate_exceptions assert rv [ 'passthrough_errors ' ] app.run ( debug=debug , use_debugger=use_debugger , use_reloader=use_reloader ) rv = { } rv [ 'passthrough_errors ' ] = kwargs.get ( 'passthrough_errors ' ) passthrough_errors=True ) use_debugger=debugger , threaded=with_threads ) app = flask.Flask ( __name__ ) options.setdefault ( 'passthrough_errors ' , True ) def run_simple_mock ( * args , * * kwargs ) : monkeypatch.setattr ( werkzeug.serving , 'run_simple ' , run_simple_mock ) # make sure werkzeug always passes errors through","['flask/app.py', 'flask/cli.py', 'tests/test_basic.py']",Merge pull request # 1679 from miguelgrinberg/passthrough-errors
462,f267191cd81d67de3633b2d5bd4d9bfe4f44e0dd,2016-01-25 20:27:24+01:00,of `` pytest `` . You can install it with : : of `` pytest `` . Currently we 're depending on a development version of Tox because the released version is missing features we absolutely need . You can pip install tox install it with : : pip install hg+https : //bitbucket.org/hpk42/tox,['CONTRIBUTING.rst'],Merge pull request # 1669 from jeffwidman/master
463,431db2874b242316051963d9bc4d5653b3647acc,2016-01-25 07:16:51-08:00,"rv = c.get ( url ) app.add_url_rule ( url , str ( i ) , lambda x=d : flask.jsonify ( x ) ) and social engineers a victim to visiting his site : ECMAScript 5 closed this vulnerability , so only extremely old browsers are generate JSON . ] capture ( ) ; If you know a bit of JavaScript internals you might know that it 's 3 . Multiple keyword arguments : Converted to a dict before being passed to ) possible to patch constructors and register callbacks for setters . An ( dumps ( data , indent=indent , separators=separators ) , '\n ' ) , test_dates = ( `` `` '' Test jsonify with datetime.date and datetime.datetime types . '' '' '' For security reasons only objects are supported toplevel . For more i= { 'test ' : 'dict ' } test_dates = ( top-level in JSON . Imagine you send the following data out in a JSON } mimetype if : mimetype : ` text/javascript ` is defined as content type in the script JSON itself is a high-level serialization format , so there is barely rv = c.get ( url ) data = dict ( kwargs ) However there is a catch . Due to how browsers work the CSRF issue comes with app.app_context ( ) : vulnerabilities d = dict ( a=23 , b=42 , c= [ 1 , 2 , 3 ] ) .. sourcecode : : javascript [ def test_jsonify_dicts ( self ) : with app.app_context ( ) : : func : ` ~flask.jsonify ` so you are still at risk when using other ways to assert rv == u ' '' \u2603 '' ' if args and kwargs : .. sourcecode : : html < /script > 4 . Both args and kwargs : Behavior undefined and will throw an exception . from : func : ` dumps ` : rv = flask.json.dumps ( u'\N { SNOWMAN } ' ) # https : //pytest.org/latest/parametrize.html # pytest-mark-parametrize-parametrizing-test-functions tag and evaluate that as JavaScript . Because top-level array elements are datetime.datetime ( 1973 , 3 , 11 , 6 , 30 , 45 ) , object with the : mimetype : ` application/json ` mimetype . For convenience , it arrays . def test_json_as_unicode ( self ) : c = app.test_client ( ) life easier . It turns the JSON output into a : class : ` ~flask.Response ` security risk in ancient browsers . See : ref : ` json_security ` for details . { 'test ' : 'dict ' } assert rv.mimetype == 'application/json ' anything that could cause security problems , right ? You ca n't declare '\n ' ) , app.config [ 'JSON_AS_ASCII ' ] = True url = '/datetest { 0 } '.format ( i ) : ref : ` json_security ` for details . `` email '' : `` admin @ localhost '' } `` `` '' Test jsonify with dicts and kwargs unpacking . '' '' '' datetime.datetime ( 1973 , 3 , 11 , 6 , 30 , 45 ) , // now we have all the data in the captured array . app.config [ 'JSON_AS_ASCII ' ] = False assert rv == ' '' \\u2603 '' ' datetime.date ( 1975 , 1 , 5 ) for you . And it is doing that for all `` GET `` requests to a certain URL , could possibly break are very large responses that can cause some kind of request . Say that 's exporting the names and email addresses of all your friends for a part of the user interface that is written in JavaScript . also converts multiple arguments into an array or multiple keyword arguments denial of service at the receiver 's side . } ; for i , d in enumerate ( test_data ) : assert flask.json.loads ( rv.data ) == d the given arguments with an : mimetype : ` application/json ` mimetype . The elif args : # convert multiple args into an array def test_json_as_unicode ( self ) : var obj = this , id = 0 , capture = function ( value ) { ( dumps ( dict ( * args , * * kwargs ) , indent=indent , separators=separators ) , for url in '/args_unpack ' , '/array ' : Array = oldArray ; are not constructed with the constructor of `` Array `` and others , but 1 . Single argument : Passed straight through to : func : ` dumps ` . `` `` '' Test jsonify with datetime.date and datetime.datetime types . '' '' '' arrays to JSON . This was because of a security vulnerability in ECMAScript 4 . this behavior was changed and : func : ` ~flask.jsonify ` now supports serializing allowed ( albeit useless ) and we hooked in our own constructor , after that assert flask.json.loads ( rv.data ) == l : func : ` dumps ` . assert rv == u ' '' \u2603 '' ' Added support to serializing top-level arrays to : func : ` flask.jsonify ` . This JavaScript specification that can be used to solve that problem easily and constructor . ) external URL with the script tag to load up the data . So what Flask does < script type=text/javascript > Added support for serializing top-level arrays . This introduces a : func : ` ~flask.jsonify ` . Make sure to do the same when using an ordinary is to only allow objects as toplevel elements when using `` http : //example.com/api/get_friends.json `` . raise TypeError ( return flask.jsonify ( l ) say the URL for that request is `` `` '' Test jsonify of lists and args unpacking . '' '' '' .. admonition : : ECMAScript 5 Changes `` `` '' Creates a : class : ` ~flask.Response ` with the JSON representation of For clarity , the JSON serialization behavior has the following differences ] for i , d in enumerate ( test_dates ) : Starting with ECMAScript 5 the behavior of literals changed . Now they app = flask.Flask ( __name__ ) So now what happens if a clever hacker is embedding this to his website < script type=text/javascript elif len ( args ) == 1 : # single args are passed directly to dumps ( ) .. versionchanged : : 1.0 def test_jsonify_date_types ( self ) : introduces a security risk in ancient browsers . See 2 . Multiple arguments : Converted to an array before being passed to data = args [ 0 ] assert rv.mimetype == 'application/json ' assert flask.json.loads ( rv.data ) [ ' x ' ] == http_date ( d.timetuple ( ) ) def return_array ( ) : assert flask.json.loads ( rv.data ) [ ' x ' ] == http_date ( d.timetuple ( ) ) if ( value ) app = flask.Flask ( __name__ ) David Lord @ davidism attacker can use this ( like above ) to get all the data you exported in ( `` { ... } `` ) toplevel an attacker could not just do a request to an In Flask 0.10 and lower , : func : ` ~flask.jsonify ` did not serialize top-level [ 'test list ' , 2 , False ] , still vulnerable . All of these browsers have ` other more serious else : # convert kwargs to a dict with the builtin constructor of `` Array `` which closes this particular stuff . Unfortunately that protection is only there for a=0 , b=23 , c=3.14 , d='t ' , e='Hi ' , f=True , g=False , d = dict ( def test_jsonify_arrays ( self ) : { `` username '' : `` admin '' , return flask.jsonify ( * l ) 0 , 42 , 3.14 , 't ' , 'hello ' , True , False , So what is the issue and how to avoid it ? The problem are arrays at Because it is a syntax error in JavaScript to have an object literal Flask is kinda doing that for you by preventing you from doing dangerous # figure out the correct syntax def return_args_unpack ( ) : function Array ( ) { datetime.date ( 1975 , 1 , 5 ) Not very uncommon : JSON generate function . app.add_url_rule ( url , str ( i ) , lambda val=d : flask.jsonify ( x=val ) ) def test_jsonify_date_types ( self ) : app.config [ 'JSON_AS_ASCII ' ] = False assert rv == ' '' \\u2603 '' ' arguments to this function are the same as to the : class : ` dict ` l = [ up with JSON unfortunately . Fortunately there is also a weird part of the def test_jsonify_basic_types ( self ) : `` `` '' Test jsonify with basic types . '' '' '' obj.__defineSetter__ ( id++ , capture ) ; url = '/datetest { 0 } '.format ( i ) rv = flask.json.dumps ( u'\N { SNOWMAN } ' ) And it is doing that of course only as long as you are logged in and only page loaded the data from the JSON response is in the ` captured ` array . `` `` '' This function wraps : func : ` dumps ` to add a few enhancements that make `` jsonify ( [ 1,2,3 ] ) `` serialize to `` [ 1,2,3 ] `` . data = list ( args ) captured.push ( value ) ; # Should be able to use pytest parametrize on this , but I could n't test_data = ( 0 , 1 , 23 , 3.14 , 's ' , `` longer string '' , True , False , ) url = '/jsonify_basic_types { 0 } '.format ( i ) var oldArray = Array ; information about this , have a look at : ref : ` json-security ` . < https : //github.com/mitsuhiko/flask/issues/248 # issuecomment-59934857 > ` _ , so c = app.test_client ( ) app.config [ 'JSON_AS_ASCII ' ] = True src=http : //example.com/api/get_friends.json > < /script > app.add_url_rule ( url , str ( i ) , lambda val=d : flask.jsonify ( x=val ) ) attack vector . into a dict . This means that both `` jsonify ( 1,2,3 ) `` and your JSON file . The browser will totally ignore the : mimetype : ` application/json ` h= [ 'test list ' , 10 , False ] , def test_jsonify ( self ) : recursive structures that could cause problems and the only thing that for i , d in enumerate ( test_dates ) : `` jsonify ( ) behavior undefined when passed both args and kwargs '' var captured = [ ] ;","['AUTHORS', 'CHANGES', 'docs/security.rst', 'flask/json.py', 'tests/test_helpers.py']",Merge pull request # 1671 from jeffwidman/support-json-top-level-arrays
464,c1c205bcd39ee417ed028c967819a45d08d604fc,2015-12-20 08:19:35-08:00,"'Programming Language : : Python : : 2.6 ' , 'Programming Language : : Python : : 3.4 ' , 'Programming Language : : Python : : 2 ' , 'Programming Language : : Python : : 3.5 ' , 'Programming Language : : Python : : 2.7 ' , 'Programming Language : : Python : : 3.3 ' ,",['setup.py'],Merge pull request # 1661 from lord63-forks/clarify-version
465,dc07e26a8f99c43c840e5c50357f55320022003f,2015-12-09 21:09:07-08:00,".. sourcecode : : apache to httpd 2.4 syntax Most notably , the syntax for directory permissions has changed from httpd 2.2 Require all granted Order allow , deny Allow from all",['docs/deploying/mod_wsgi.rst'],Merge pull request # 1648 from accraze/mod-wsgi-docs
466,b3b5a98fd09f4c02828765a5968825ab4f11556a,2015-11-27 08:57:56-08:00,"red = redbaron.RedBaron ( `` from flask.ext.foo import \ red = RedBaron ( `` from flask.ext.foo import bar '' ) red = RedBaron ( `` import flask.ext.foo '' ) red = redbaron.RedBaron ( `` from flask.ext.foo import bar as baz '' ) red = RedBaron ( `` from flask.ext.foo import \ red = redbaron.RedBaron ( `` from flask.ext import foo '' ) red = redbaron.RedBaron ( `` from flask.ext.foo import bar '' ) red = redbaron.RedBaron ( `` import flask.ext.foo '' ) red = RedBaron ( `` from flask.ext import foo '' ) red = RedBaron ( `` from flask.ext.foo import bar , foobar , something '' ) red = redbaron.RedBaron ( `` from flask.ext.foo import ( bar , foo , foobar ) '' ) red = redbaron.RedBaron ( `` import flask.ext.foo as foobar '' ) red = redbaron.RedBaron ( `` from flask import Flask '' ) red = RedBaron ( `` from flask import Flask '' ) red = RedBaron ( `` flask.ext.foo ( var ) '' ) from redbaron import RedBaron red = redbaron.RedBaron ( `` import flask.ext.foo\n\n '' red = redbaron.RedBaron ( `` from flask.ext.foo import bar , foobar , something '' ) red = RedBaron ( `` from flask.ext.foo import bar as baz '' ) red = RedBaron ( `` import flask.ext.foo\n\n '' red = RedBaron ( `` from flask.ext.foo import ( bar , foo , foobar ) '' ) red = RedBaron ( `` import flask.ext.foo as foobar '' ) redbaron = pytest.importorskip ( `` redbaron '' ) red = redbaron.RedBaron ( `` flask.ext.foo ( var ) '' )",['scripts/test_import_migration.py'],Merge pull request # 1630 from redian/master
467,751fe451df7d0e03754a02a52e4b59152b37891a,2015-11-12 13:08:56+01:00,"uwsgi_pass unix : /tmp/yourapplication.sock ; The `` -- manage-script-name `` will move the handling of `` SCRIPT_NAME `` to to have it in the URL root it 's a bit simpler because you do n't have to tell If you want to deploy your flask application inside of a virtual environment , uwsgi_pass unix : /tmp/yourapplication.sock ; A basic flask uWSGI configuration for nginx looks like this : : uwsgi_pass unix : /tmp/uwsgi.sock ; application ( without extension ) . `` app `` is the callable inside of your also need to add `` -- plugin python `` or `` -- plugin python3 `` depending on which $ uwsgi -s /tmp/uwsgi.sock -w myapp : app to have it in the URL root its a bit simpler : : you need to also add `` -- virtualenv /path/to/virtual/environment `` . You might uwsgi_param SCRIPT_NAME /yourapplication ; application ( usually the line reads `` app = Flask ( __name__ ) `` . directive which will make requests to `` /yourapplication `` be directed to $ uwsgi -s /tmp/uwsgi.sock -- manage-script-name -- mount /yourapplication=myapp : app `` myapp : app `` , where `` myapp `` refers to the name of the file of your flask python version you use for your project . $ uwsgi -s /tmp/uwsgi.sock -- module myapp -- callable app it the WSGI `` SCRIPT_NAME `` or set the uwsgi modifier to make use of it : : uwsgi_pass unix : /tmp/uwsgi.sock ; A basic flask nginx configuration looks like this : : uwsgi , since its smarter about that . It is used together with the `` -- mount `` uwsgi_modifier1 30 ;",['docs/deploying/uwsgi.rst'],Merge pull request # 1558 from JonasGroeger/master
468,84a12afd4dff0c58aceb34c7fc93e3eedbe5005f,2015-10-30 11:10:08-07:00,": class : ` datetime.timedelta ` or as seconds . : rtype : int def test_send_file_max_age ( ) : app = flask.Flask ( __name__ ) # : This attribute can also be configured from the config with the # : variable can also be set with an integer value used as seconds . from datetime import timedelta : param timedelta td : the timedelta to be converted in seconds get_converter=_make_timedelta ) # : Defaults to `` timedelta ( hours=12 ) `` 'SEND_FILE_MAX_AGE_DEFAULT ' : 12 * 60 * 60 , # 12 hours : func : ` ~flask.send_file ` , in def total_seconds ( td ) : return td.days * 60 * 60 * 24 + td.seconds : func : ` ~flask.send_file ` , as def total_seconds ( td ) : app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = timedelta ( hours=2 ) return current_app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] : returns : number of seconds # : `` SEND_FILE_MAX_AGE_DEFAULT `` configuration key . This configuration app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = 3600 send_file_max_age_default = ConfigAttribute ( 'SEND_FILE_MAX_AGE_DEFAULT ' , `` `` '' 'SEND_FILE_MAX_AGE_DEFAULT ' : timedelta ( hours=12 ) , # : A : class : ` ~datetime.timedelta ` which is used as default cache_timeout from .helpers import total_seconds # : for the : func : ` send_file ` functions . The default is 12 hours . return td.days * 60 * 60 * 24 + td.seconds `` `` '' Returns the total seconds from a timedelta object . # : return total_seconds ( current_app.send_file_max_age_default ) assert app.send_file_max_age_default.seconds == 7200 assert app.send_file_max_age_default.seconds == 3600","['docs/config.rst', 'flask/app.py', 'flask/helpers.py', 'flask/sessions.py', 'tests/test_config.py']",Merge pull request # 1593 from timofurrer/master
469,3f6e8c6ad586caf6a60bc73ebd52838a73074ef1,2015-10-30 17:35:06+01:00,"`` 3.5 '' env : REQUIREMENTS=lowest envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 } - { release , devel } envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 , py35 } - { release , devel } python : `` 3.5 ''","['.travis.yml', 'tox.ini']",Merge pull request # 1594 from timofurrer/python3.5-support
470,7f3867491570746a4c14bdaa5bd59ec1b64cbfea,2015-07-27 19:25:27+02:00,"__call__ = type.__call__ __init__ = type.__init__ # for one level to something closer to type ( that 's why __call__ and # __init__ comes back from type etc . ) . return type.__new__ ( cls , name , ( ) , d ) return type.__new__ ( metaclass , 'temporary_class ' , ( ) , { } ) return metaclass ( 'temporary_class ' , None , { } ) # we also need to make sure that we downgrade the custom metaclass # introduce dummy classes into the final MRO . # itself with the actual metaclass . `` `` '' Create a base class with a metaclass . '' '' '' # itself with the actual metaclass . Because of internal type checks class metaclass ( meta ) : class metaclass ( type ) : # # This has the advantage over six.with_metaclass in that it does not if this_bases is None :",['flask/_compat.py'],Merge pull request # 1539 from mjhennig/with_metaclass
471,ac12e362c4b7fd765b0f6ee6d1699d027ee9bffb,2015-07-21 13:41:44+02:00,"few little helpers that make working with forms and Flask more The ` Flask-WTF ` _ extension expands on this pattern and adds a few Here the : file : ` register.html ` template for the function we used above which When you have to work with form data submitted by a browser view code handful little helpers that make working with forms and Flask more .. admonition : : Getting most of WTForms with an Extension When you have to work with form data submitted by a browser view , code Notice that we are implying that the view is using SQLAlchemy here WTForm 's field function , which renders the field for us . The keyword Now to the template side . When you pass the form to the templates , you can arguments will be inserted as HTML attributes . So , for example , you can Notice we 're implying that the view is using SQLAlchemy here The ` Flask-WTF ` _ extension expands on this pattern and adds a method , which will return `` True `` if the data validates , `` False `` .. admonition : : Getting the most out of WTForms with an Extension ( : ref : ` sqlalchemy-pattern ` ) , but that 's not a requirement , of course . Adapt ( : ref : ` sqlalchemy-pattern ` ) but this is no requirement of course . Adapt Here is the : file : ` register.html ` template for the function we used above , which arguments will be inserted as HTML attributes . So for example you can WTForm 's field function that renders the field for us . The keyword strings , so we have to tell Jinja2 that this data is already HTML escaped Now to the template side . When you pass the form to the templates you can strings , so we have to tell Jinja2 that this data is already HTML-escaped method which will return `` True `` if the data validates , `` False ``",['docs/patterns/wtforms.rst'],Merge pull request # 1520 from zevav/patch-2
472,671c1ee0022ebc561a86e7c18ba97b2b81c24ead,2015-07-14 22:44:51+02:00,.. _libevent : http : //libevent.org/ .. _libev : http : //software.schmorp.de/pkg/libev.html ` greenlet ` _ to provide a high-level synchronous API on top of ` libev ` _ ` greenlet ` _ to provide a high-level synchronous API on top of ` libevent ` _,['docs/deploying/wsgi-standalone.rst'],Merge pull request # 1532 from WayneYe/master
473,37474871dc66ddd94f970740f773d9ffb6c0f4e2,2015-06-30 21:33:04+02:00,"with app.app_context ( ) : def test_app_ctx_globals_methods ( ) : # __contains__ app = flask.Flask ( __name__ ) assert 'foo ' in flask.g `` flask.g `` now has `` pop ( ) `` and `` setdefault `` methods . # setdefault assert 'foo ' not in flask.g def pop ( self , name , default=_sentinel ) : flask.g.pop ( 'bar ' ) # __iter__ assert flask.g.pop ( 'bar ' , 'more cake ' ) == 'more cake ' assert flask.g.get ( 'foo ' , 'bar ' ) == 'bar ' assert flask.g.get ( 'foo ' ) is None with pytest.raises ( KeyError ) : way you would use them on a dictionary . assert list ( flask.g ) == [ 'foo ' ] flask.g.foo = 'bar ' assert flask.g.pop ( 'bar ' ) == 'the cake is a lie ' flask.g.setdefault ( 'bar ' , 'the cake is a lie ' ) # get if default is _sentinel : As of 1.0 you can use : meth : ` pop ` and : meth : ` setdefault ` in the same flask.g.setdefault ( 'bar ' , 'hello world ' ) # pop assert flask.g.bar == 'the cake is a lie ' return self.__dict__.pop ( name , default ) else : return self.__dict__.pop ( name ) def setdefault ( self , name , default=None ) : self.__dict__.setdefault ( name , default )","['CHANGES', 'docs/api.rst', 'flask/ctx.py', 'tests/test_appctx.py']",Merge pull request # 1509 from ThiefMaster/appctxglobals-candy
474,595fb7e1fac3eea207816a700565f6a549e160d3,2015-06-21 19:37:34+02:00,"return self.blueprints def modules ( self ) : from warnings import warn @ property warn ( DeprecationWarning ( 'Flask.modules is deprecated , use ' 'Flask.blueprints instead ' ) , stacklevel=2 )",['flask/app.py'],Merge pull request # 1510 from ThiefMaster/remove-modules-property
475,cb9f64508148453dcfa4deaeb4ea95518f58cee0,2015-06-17 13:17:12+02:00,tox -e py- $ REQUIREMENTS $ ( echo py $ TRAVIS_PYTHON_VERSION | tr -d . | sed -e 's/pypypy/pypy/ ' ) - $ REQUIREMENTS tox -e \ pip install tox pip install tox > =1.8,['.travis.yml'],Merge pull request # 1502 from untitaker/travis-simplify
476,9ddd3e9084b9909fccdb42c55f637dc8b671beb7,2015-06-13 17:55:12+02:00,pull request anyways . pip install -- editable . on . Travis is set up to run the full testsuite when you submit your pull though . Whether this is relevant depends on which part of Werkzeug you 're working on . Travis is set up to run the full testsuite when you submit your though . Whether this is relevant depends on which part of Flask you 're working pip install -- editable . Thanks for considering contributing to Flask . request anyways . Thanks for considering contributing to Flask .,['CONTRIBUTING.rst'],Merge pull request # 1499 from menghan/doc
477,805692108ae973281d793250ca883cc1412ab08d,2015-06-06 07:38:09+02:00,Alternatively a file object might be provided in This is relative to the : attr : ` ~Flask.root_path ` in which case `` X-Sendfile `` might not work and send before calling : func : ` send_file ` . relative path is specified . fall back to the traditional method . Make sure : param filename_or_fp : the filename of the file to send . This is which case `` X-Sendfile `` might not work and fall back to the traditional method . Make sure that the relative to the : attr : ` ~Flask.root_path ` if a of data to send before calling : func : ` send_file ` . if a relative path is specified . : param filename_or_fp : the filename of the file to send in ` latin-1 ` . Alternatively a file object might be provided that the file pointer is positioned at the start file pointer is positioned at the start of data to,['flask/helpers.py'],Update send_file ( ) docs to clarify encoding requirement # 1286
478,5c68b24f645131993c2f474ee2e91b8845edb974,2015-06-06 04:17:57+02:00,"old_update_wrapper = functools.update_wrapper del unwrap_decorators import sphinx.util.inspect as inspect def unwrap_decorators ( ) : old_getargspec = inspect.getargspec def getargspec ( x ) : return old_getargspec ( getattr ( x , '_original_function ' , x ) ) import functools # unwrap decorators def update_wrapper ( wrapper , wrapped , * a , * * kw ) : return rv rv._original_function = wrapped functools.update_wrapper = update_wrapper inspect.getargspec = getargspec unwrap_decorators ( ) rv = old_update_wrapper ( wrapper , wrapped , * a , * * kw )",['docs/conf.py'],Merge pull request # 1483 from untitaker/improve-autodoc
479,5ebf1e824da1a35c8f45a8c39591a6ddd3f70b36,2015-06-03 17:46:10+02:00,"return 'custom ' c = app.test_client ( ) app = flask.Flask ( __name__ ) def test_error_handler_no_match ( ) : return type ( e ) .__name__ assert c.get ( '/keyerror ' ) .data == b'KeyError ' raise CustomException ( ) assert c.get ( '/custom ' ) .data == b'custom ' assert isinstance ( e , CustomException ) pass while queue : def handle_500 ( e ) : def key_error ( ) : def custom_exception_handler ( e ) : while True : def custom_test ( ) : raise KeyError ( ) class CustomException ( Exception ) :","['flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 1480 from jmcarp/handle-empty-deque
480,3fe68c221a41e8b86107281d869eac435e2a4154,2015-05-07 13:24:13+02:00,Clone this repository : : Install Flask as an editable package using the current source : : pip install -- editable . git clone https : //github.com/mitsuhiko/flask.git,['CONTRIBUTING.rst'],Merge pull request # 1455 from nickjj/docs_contributing
481,61f12d6a8d113ec1c20bfa518efc78dd5b4d564a,2015-05-02 21:58:44+02:00,d = imp.new_module ( 'config ' ) import types ext_module = imp.new_module ( 'flask.ext ' ) d = types.ModuleType ( 'config ' ) import imp ext_module = types.ModuleType ( 'flask.ext ' ),"['flask/config.py', 'scripts/flaskext_compat.py']",Merge pull request # 1450 from Carreau/importlib
482,e99fec26ab1e8b11d93a84ed0b74c3406b01494d,2015-04-19 11:37:55+02:00,return Logger.getEffectiveLevel ( self ) if x.level == 0 and app.debug : return Logger.getEffectiveLevel ( x ) def getEffectiveLevel ( x ) : def getEffectiveLevel ( self ) : if self.level == 0 and app.debug :,['flask/logging.py'],Merge pull request # 1441 from andyxning/fix_pep8_with_logging
483,aaebe9fe252454a319de1f0e583d0e5a8635e399,2015-04-12 00:06:57+02:00,"raise ParentException ( ) while True : done = set ( ) def child_exception_handler ( e ) : done.add ( cls ) def bp_exception_handler ( e ) : assert isinstance ( e , Forbidden ) def app_exception_handler ( e ) : def find_handler ( handler_map ) : def registered_test ( ) : handler = find_handler ( self.error_handler_spec raise ForbiddenSubclassRegistered ( ) raise ForbiddenSubclassRegistered ( ) @ app.route ( '/forbidden-registered ' ) return 'forbidden-registered ' cls = queue.popleft ( ) raise ChildExceptionRegistered ( ) @ app.errorhandler ( ChildExceptionRegistered ) return 'bp-error ' assert c.get ( '/forbidden-registered ' ) .data == b'forbidden-registered ' def bp_test ( ) : assert c.get ( '/error ' ) .data == b'app-error ' return 'child-registered ' assert c.get ( '/forbidden ' ) .data == b'forbidden ' return handler = handler_map.get ( superclass ) if cls in done : return 'parent ' class ParentException ( Exception ) : assert isinstance ( e , ChildExceptionRegistered ) .get ( code ) ) return None @ bp.route ( '/error ' ) def unregistered_test ( ) : bp = flask.Blueprint ( 'bp ' , __name__ ) assert c.get ( '/parent ' ) .data == b'parent ' if superclass is BaseException : return 'child-registered ' assert isinstance ( e , ForbiddenSubclassRegistered ) @ app.errorhandler ( ParentException ) assert c.get ( '/child-registered ' ) .data == b'child-registered ' continue return 'app-error ' return find_superclass ( self.error_handler_spec [ None ] .get ( code ) ) # cache for next time exc_class is raised assert c.get ( '/bp/error ' ) .data == b'bp-error ' from collections import Mapping @ app.errorhandler ( 403 ) return None class ForbiddenSubclassUnregistered ( Forbidden ) : @ app.route ( '/forbidden-unregistered ' ) @ app.route ( '/parent ' ) assert c.get ( '/child-unregistered ' ) .data == b'parent ' class ParentException ( Exception ) : def child_exception_handler ( e ) : return None assert c.get ( '/child-registered ' ) .data == b'child-registered ' pass queue.extend ( cls.__mro__ ) handler_map [ exc_class ] = handler raise Forbidden ( ) class ForbiddenSubclassRegistered ( Forbidden ) : assert isinstance ( e , ForbiddenSubclassRegistered ) class ForbiddenSubclassUnregistered ( Forbidden ) : assert isinstance ( e , ParentException ) def test_error_handler_http_subclass ( ) : assert c.get ( '/forbidden-registered ' ) .data == b'forbidden-registered ' return 'forbidden ' return 'forbidden-registered ' handler = find_superclass ( self.error_handler_spec.get ( request.blueprint , { } ) .get ( code ) ) app = flask.Flask ( __name__ ) # Protect from geniuses who might create circular references in handler_map [ exc_class ] = handler # cache for next time exc_class is raised def code_exception_handler ( e ) : raise ParentException ( ) def bp_exception_handler ( e ) : assert isinstance ( e , ParentException ) class ChildExceptionRegistered ( ParentException ) : raise InternalServerError ( ) assert c.get ( '/forbidden-unregistered ' ) .data == b'forbidden ' raise Forbidden ( ) @ app.errorhandler ( 500 ) return 'app-error ' def parent_exception_handler ( e ) : def bp_test ( ) : class ChildExceptionRegistered ( ParentException ) : from collections import Mapping , deque @ app.route ( '/child-unregistered ' ) assert isinstance ( e , ChildExceptionRegistered ) def unregistered_test ( ) : raise ChildExceptionRegistered ( ) class ChildExceptionUnregistered ( ParentException ) : def parent_exception_handler ( e ) : assert c.get ( '/forbidden ' ) .data == b'forbidden ' assert c.get ( '/forbidden-unregistered ' ) .data == b'forbidden ' return find_handler ( self.error_handler_spec [ None ] .get ( code ) ) def subclass_exception_handler ( e ) : for superclass in exc_class.__mro__ : @ app.route ( '/child-registered ' ) @ app.route ( '/error ' ) app.register_blueprint ( bp , url_prefix='/bp ' ) assert c.get ( '/bp/error ' ) .data == b'bp-error ' def test_error_handler_blueprint ( ) : raise ForbiddenSubclassUnregistered ( ) return 'bp-error ' raise InternalServerError ( ) handler = handler_map.get ( cls ) class ChildExceptionUnregistered ( ParentException ) : def app_test ( ) : def code_exception_handler ( e ) : class ForbiddenSubclassRegistered ( Forbidden ) : def forbidden_test ( ) : c = app.test_client ( ) @ app.route ( '/forbidden ' ) raise ChildExceptionUnregistered ( ) def find_superclass ( handler_map ) : def parent_test ( ) : # __mro__ def test_error_handler_http_subclass ( ) : def parent_test ( ) : bp = flask.Blueprint ( 'bp ' , __name__ ) @ app.errorhandler ( ForbiddenSubclassRegistered ) def subclass_exception_handler ( e ) : def forbidden_test ( ) : assert isinstance ( e , Forbidden ) def app_test ( ) : .get ( request.blueprint , { } ) app.register_blueprint ( bp , url_prefix='/bp ' ) raise ChildExceptionUnregistered ( ) return 'parent ' raise ForbiddenSubclassUnregistered ( ) return 'forbidden ' app = flask.Flask ( __name__ ) assert c.get ( '/parent ' ) .data == b'parent ' c = app.test_client ( ) def app_exception_handler ( e ) : def registered_test ( ) : @ bp.errorhandler ( 500 ) def test_error_handler_blueprint ( ) : queue = deque ( exc_class.__mro__ ) pass assert c.get ( '/error ' ) .data == b'app-error ' assert c.get ( '/child-unregistered ' ) .data == b'parent '","['flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 1431 from untitaker/flask-errorhandling-amend
484,aed464b92bbd9bddba2684304c141b9d65b7d01e,2015-04-11 18:13:22+02:00,"return 'forbidden ' if superclass is BaseException : def code_exception_handler ( e ) : raise ValueError ( import flask handlers = self.error_handler_spec.get ( request.blueprint ) : type key : None|str c = app.test_client ( ) def app_exception_handler ( e ) : `` `` '' Finds a registered error handler for the request ’ s blueprint . return 'app-error ' if issubclass ( exc_class , HTTPException ) : handler = find_superclass ( self.error_handler_spec.get ( request.blueprint , { } ) .get ( code ) ) from collections import Mapping assert c.get ( '/forbidden-unregistered ' ) .data == b'forbidden ' handler = self.error_handler_spec [ None ] .get ( 500 ) def child_exception_handler ( e ) : from ._compat import reraise , string_types , text_type , integer_types , iterkeys return handler ( e ) pass def _get_exc_class_and_code ( exc_class_or_code ) : def subclass_exception_handler ( e ) : if isinstance ( code_or_exception , HTTPException ) : MethodNotAllowed , BadRequest , default_exceptions def _find_error_handler ( self , e ) : def bp_test ( ) : # fall back to app handlers else : else : for typecheck , handler in chain ( blueprint_handlers , app_handlers ) : return 'child-registered ' return None assert isinstance ( e , ChildExceptionRegistered ) from ._compat import reraise , string_types , text_type , integer_types assert issubclass ( exc_class , Exception ) if not handler_map : assert c.get ( '/error ' ) .data == b'app-error ' return handler handler = handlers [ e.code ] assert c.get ( '/child-registered ' ) .data == b'child-registered ' class ChildExceptionUnregistered ( ParentException ) : code_or_exception = code_or_exception.code return 'parent ' from werkzeug.exceptions import Forbidden , InternalServerError handlers [ exc_class ] = f return exc_class , exc_class.code return exc_class , None def parent_exception_handler ( e ) : exc_class = default_exceptions [ exc_class_or_code ] if handlers and e.code in handlers : if handler is not None : raise ForbiddenSubclassRegistered ( ) handler = handler_map.get ( superclass ) return 'forbidden-registered ' return None 'Handlers can only be registered for exception classes or HTTP error codes . ' assert c.get ( '/forbidden-registered ' ) .data == b'forbidden-registered ' # try blueprint handlers raise Forbidden ( ) reraise ( exc_type , exc_value , tb ) handlers = self.error_handler_spec.setdefault ( key , { } ) .setdefault ( code , { } ) If neither blueprint nor App has a suitable handler registered , returns None return handler ( e ) # - * - coding : utf-8 - * blueprint_handlers = ( ) return None assert c.get ( '/child-unregistered ' ) .data == b'parent ' self.error_handler_spec.setdefault ( key , { } ) [ code_or_exception ] = f def find_superclass ( handler_map ) : exc_class , code = self._get_exc_class_and_code ( code_or_exception ) def parent_test ( ) : app.register_blueprint ( bp , url_prefix='/bp ' ) 'It is currently not possible to register a 500 internal ' \ class ChildExceptionRegistered ( ParentException ) : def bp_exception_handler ( e ) : MethodNotAllowed , BadRequest class ParentException ( Exception ) : exc_class = exc_class_or_code def app_test ( ) : def unregistered_test ( ) : for superclass in exc_class.__mro__ : assert c.get ( '/forbidden ' ) .data == b'forbidden ' assert code_or_exception ! = 500 or key is None , \ raise ChildExceptionUnregistered ( ) if isinstance ( exc_class_or_code , integer_types ) : def forbidden_test ( ) : return find_superclass ( self.error_handler_spec [ None ] .get ( code ) ) raise ParentException ( ) def test_error_handler_blueprint ( ) : if isinstance ( code_or_exception , HTTPException ) : # old broken behavior handler = self._find_error_handler ( e ) handler = self.error_handler_spec [ None ] .get ( e.code ) assert isinstance ( e , ParentException ) assert isinstance ( e , Forbidden ) 'server error on a per-blueprint level . ' `` `` '' app_handlers = self.error_handler_spec [ None ] .get ( None , ( ) ) .append ( ( code_or_exception , f ) ) raise InternalServerError ( ) reraise ( exc_type , exc_value , tb ) class ForbiddenSubclassRegistered ( Forbidden ) : if isinstance ( e , typecheck ) : app = flask.Flask ( __name__ ) if handler is None : def registered_test ( ) : assert c.get ( '/parent ' ) .data == b'parent ' raise ForbiddenSubclassUnregistered ( ) handler = self._find_error_handler ( InternalServerError ( ) ) def test_error_handler_http_subclass ( ) : raise ChildExceptionRegistered ( ) assert isinstance ( e , ForbiddenSubclassRegistered ) : type code_or_exception : int|T < =Exception blueprint_handlers = handlers.get ( None , ( ) ) if isinstance ( code_or_exception , integer_types ) : bp = flask.Blueprint ( 'bp ' , __name__ ) return 'bp-error ' 'Tried to register a handler for an exception instance { 0 ! r } . ' return handler if handlers is not None : def test_error_handler_subclass ( ) : handler_map [ exc_class ] = handler # cache for next time exc_class is raised if handler is not None : assert c.get ( '/bp/error ' ) .data == b'bp-error ' self.error_handler_spec.setdefault ( key , { } ) .setdefault ( None , [ ] ) \ exc_class , code = self._get_exc_class_and_code ( type ( e ) ) class ForbiddenSubclassUnregistered ( Forbidden ) : : type f : callable `` `` '' Ensure that we register only exceptions as handler keys '' '' '' .format ( code_or_exception ) )","['flask/app.py', 'tests/test_user_error_handler.py']",Merge pull request # 1291 from flying-sheep/errorhandler-rework
485,06f2be3ae48e6a49f9e4528fc187dab0af0ac9a3,2015-04-11 18:12:46+02:00,"Error handlers The most specific handler is selected . .. versionadded : : 1.0 you with a function to call on your whim ( and in tests ) . Note that Error handlers are normal : ref : ` views ` but instead of being registered for and therefore was replaced with the intended behavior of registering : meth : ` ~flask.Flask.register_error_handler ` , respectively . You might want to show custom error pages to the user when an error occurs . See : ref : ` error-handlers ` for more details . You are however not limited to a : exc : ` ~werkzeug.exceptions.HTTPException ` : meth : ` ~flask.Flask.register_error_handler ` : : are interchangable when handed to the registration methods or decorator exception instance , and its response is shown to the user . : exc : ` werkzeug.exceptions.HTTPException ` subclasses like Registering .. note : : Trying to register a handler on an instance now raises : exc : ` ValueError ` . do something else . This can be done by registering error handlers . Register error handlers using : meth : ` ~flask.Flask.errorhandler ` or routes they are registered for exceptions that are rised while trying to E.g . if a instance of : exc : ` ConnectionRefusedError ` is raised , and a handler : exc : ` ~werkzeug.exceptions.BadRequest ` from the example and their HTTP codes ( `` BadRequest.code == 400 `` ) . handlers only using exception classes and HTTP error codes . the more specific : exc : ` ConnectionRefusedError ` handler is called on the Those two ways are equivalent , but the first one is more clear and leaves See : ref : ` error-handlers ` for specifics . return 'bad request ! ' specific exception classes are executed instead of more general ones . The behavior of error handlers was changed . Application Errors : meth : ` ~flask.Flask.errorhandler ` and Logging Application Errors Now the inheritance hierarchy takes precedence and handlers for more .. _error-handlers : ========================== `` `` `` `` `` ` Handling is registered for : exc : ` ConnectionError ` and : exc : ` ConnectionRefusedError ` , ================== or its code but can register a handler for every exception class you like . There used to be a logic error allowing you to register handlers `` `` `` `` Once an exception instance is raised , its class hierarchy is traversed , def handle_bad_request ( e ) : app.register_error_handler ( 400 , lambda e : 'bad request ! ' ) and searched for in the exception classes for which handlers are registered . The precedence of handlers used to be based on the decoration/call order of only for exception * instances * . This was unintended and plain wrong ,","['docs/errorhandling.rst', 'docs/quickstart.rst', 'docs/upgrading.rst']",Merge pull request # 1429 from flying-sheep/errorhandler-rework-docs
486,dac45f6c5d2dc69a59561dc70579cc16a980bd21,2015-04-03 15:46:33-04:00,"The majority of the upgrade pain is in the lower-level libararies like The : command : ` flask ` command line script ( : ref : ` cli ` ) is strongly recommended for guesssing scheme where the shortname for the module was taken from the The : command : ` flask ` command line script ( : ref : ` cli ` ) is strongly recommende for Now we should start working on the templates . If we were to request the URLs Now we should start working on the templates . If we were torequest the URLs guessing scheme where the shortname for the module was taken from the The majority of the upgrade pain is in the lower-level libraries like In order to use the interactive debugger , debugging must be enabled both on how other systems handle request pre- and postprocessing . If you how other systems handle request pre- and post-processing . If you In order to use the interactive debuggger , debugging must be enabled both on","['docs/patterns/appdispatch.rst', 'docs/python3.rst', 'docs/server.rst', 'docs/tutorial/templates.rst', 'docs/upgrading.rst']",Merge pull request # 1418 from alexwlchan/master
487,ecb8f81760db351957bd413181a86b375ec347b6,2015-03-23 16:41:29+01:00,"reason='Turned off due to envvar . ' ) test-with-mem : RUN_FLASK_MEMORY_TESTS=1 python run-tests.py # XXX : untitaker : These tests need to be revised . They broke around the time we # ported Flask to Python 3 . @ pytest.mark.skipif ( os.environ.get ( 'RUN_FLASK_MEMORY_TESTS ' ) ! = ' 1 ' ,","['Makefile', 'tests/test_regression.py']",Merge pull request # 1389 from untitaker/always-memory-test
488,ec5811d0a15dc5ca2c5f231ac6aa79f9a107776e,2015-03-12 09:36:07+01:00,"and easy to use with Flask . For more on Flask extensions , have a look at : ref : ` extensions ` . Extensions are packages that help you accomplish common tasks . For Using Flask Extensions example , Flask-SQLAlchemy provides SQLAlchemy support that makes it simple",['docs/quickstart.rst'],Merge pull request # 1376 from KWinston/master
489,8c4842cf1fc82bc68ff65a2bdd506b46fb4c0fcf,2015-03-05 22:25:44+01:00,complete installation and usage instructions . instructions . ` pip ` or ` easy_install ` will install them for you if you do Check the docs for complete installation and usage All dependencies are installed by using ` pip install Flask ` . ` pip install Flask ` . I encourage you to use a virtualenv . Jinja 2.4 and Werkzeug 0.7 or later . I encourage you to use a virtualenv . Check the docs for,['README'],Merge pull request # 1364 from keyanp/updateREADME
490,7ae1c5a8b928f29477796c24bf62e737cd577bcc,2015-03-05 22:03:54+01:00,` IRI < http : //tools.ietf.org/html/rfc3987 > ` _ . Imagine your And a user requests the following URI : : ` path ` `` /page.html `` application is listening on the following application root : : ` script_root ` `` u'/myapplication ' `` Provides different ways to look at the current ` full_path ` `` u'/π/page.html ? x=y ' `` ` url_root ` `` u'http : //www.example.com/myapplication/ ' `` ` url ` `` u'http : //www.example.com/myapplication/π/page.html ? x=y ' `` ` full_path ` `` /page.html ? x=y `` ` url ` `` http : //www.example.com/myapplication/page.html ? x=y `` ` url_root ` `` http : //www.example.com/myapplication/ `` Provides different ways to look at the current URL . Imagine your http : //www.example.com/myapplication/page.html ? x=y http : //www.example.com/myapplication/ % CF % 80/page.html ? x=y ` base_url ` `` http : //www.example.com/myapplication/page.html `` application is listening on the following URL : : And a user requests the following URL : : ` path ` `` u'/π/page.html ' `` ` base_url ` `` u'http : //www.example.com/myapplication/π/page.html ' `` ` script_root ` `` /myapplication ``,['docs/api.rst'],Merge pull request # 1325 from bsutherland/rqst_properteis_doc_iri_patch
491,c282ab1ce2c93226ed8f1d44b565beb93391312f,2015-03-05 21:55:08+01:00,Here is the : file : ` index.html ` template which inherits from : file : ` layout.html ` : And here is the : file : ` login.html ` template which also inherits from And here is the : file : ` layout.html ` template which does the magic : And here the : file : ` layout.html ` template which does the magic : : file : ` layout.html ` : And here the index.html template : And of course the login template :,['docs/patterns/flashing.rst'],Merge pull request # 1354 from idrisr/master
492,5164be092a7e9ece7e5e23089458f568be7b9eea,2015-03-05 20:59:12+01:00,"assert rv.status_code == 400 def test_post_empty_json_wont_add_exception_to_response_if_no_debug ( self ) : rv = c.post ( '/json ' , data=None , content_type='application/json ' ) c = app.test_client ( ) ctx = _request_ctx_stack.top assert b'Failed to decode JSON object ' not in rv.data assert b'Failed to decode JSON object ' in rv.data app.config [ 'DEBUG ' ] = True raise BadRequest ( 'Failed to decode JSON object : { 0 } '.format ( e ) ) if ctx is not None and ctx.app.config.get ( 'DEBUG ' , False ) : def post_json ( ) : flask.request.get_json ( ) def test_post_empty_json_adds_exception_to_response_content_in_debug ( self ) : return None app.config [ 'DEBUG ' ] = False app = flask.Flask ( __name__ )","['flask/wrappers.py', 'tests/test_helpers.py']",Merge pull request # 1360 from keyanp/issue1317
493,3740ae492fa4a953abb86fefd025fe12f33fea92,2015-02-26 10:43:34+01:00,continue output = migrate.fix_tester ( red ) def test_named_from_import ( ) : red = RedBaron ( `` from flask import Flask '' ) if len ( values ) < 2 : assert output == `` from flask import Flask '' def test_no_change_to_import ( ) : def test__named_from_import ( ) :,"['scripts/flaskext_migrate.py', 'scripts/test_import_migration.py']",Merge pull request # 1358 from keyanp/ext_migrate_fix
494,1dcad60051d5f8ce833b7ab6a37529c6c4a96d96,2015-02-18 18:16:28+01:00,"red = RedBaron ( `` flask.ext.foo ( var ) '' ) package = values [ 2 ] .value Handles import modification in the form : else : try : write_source ( ast , input_file ) # Tester for the flaskext_migrate.py module located in flask/scripts/ import pytest node.value [ 1 ] .value == 'ext ' ) : def test_nested_function_call_migration ( ) : `` `` '' Wrapper which allows for testing when not running from shell . '' '' '' def test_parens_import ( ) : def read_source ( input_file ) : if len ( sys.argv ) < 2 : def test_multiline_import ( ) : assert output == `` from flask_foo import bar as baz '' # Run in the terminal by typing : ` python flaskext_migrate.py < source_file.py > ` red = RedBaron ( `` from flask.ext.foo import bar '' ) node.replace ( `` flask_ % s % s '' % ( node.value [ 2 ] , params ) ) output = output [ 0 : -1 ] + param.dumps ( ) ast = fix_function_calls ( ast ) node.value [ 0 ] .value [ 1 ] .value == 'ext ' ) : def fix_from_imports ( red ) : if len ( modules ) > 1 : atoms = red.find_all ( `` Atomtrailers '' ) assert output == `` flask_foo ( var ) '' affecting imports which are not enclosed . if len ( node.value ) == 3 : node.replace ( `` from flask_ % s import % s '' params = _form_function_call ( node ) else : def fix_standard_imports ( red ) : module_string = _get_modules ( modules ) except IndexError : pass assert output == ( `` import flask_foo\n\n '' red = RedBaron ( `` import flask.ext.foo '' ) Case 1 : from flask.ext.foo import bam -- > from flask_foo import bam imports = red.find_all ( `` ImportNode '' ) node.replace ( `` import flask_ % s '' % ( package ) ) def _get_modules ( module ) : `` flask_foo.bar ( var ) '' ) def test_named_module_import ( ) : Converts `` from '' style imports to not use `` flask.ext '' . import flask.ext.foo '' -- > import flask_foo red = RedBaron ( `` from flask.ext.foo import ( bar , foo , foobar ) '' ) def fix_function_calls ( red ) : node.replace ( `` import flask_ % s as % s '' output = `` . '' # if param.dumps ( ) [ 0 ] == `` ( `` : for x , node in enumerate ( imports ) : def test_simple_from_import ( ) : Handles : input_file = sys.argv [ 1 ] def test_multiple_import ( ) : red = RedBaron ( `` from flask.ext.foo import \ def fix_imports ( red ) : return output assert output == `` from flask_foo import bar , foobar , something '' return `` .join ( modules_string ) red = RedBaron ( `` import flask.ext.foo\n\n '' `` `` '' Wrapper which fixes `` from '' style imports and then `` import '' style . '' '' '' def fix ( ) : if ( values [ 0 ] .value == 'flask ' ) and ( values [ 1 ] .value == 'ext ' ) : # Author : Keyan Pishdadian % ( package , module_string , name ) ) `` `` '' Wrapper for user argument checking and import fixing . '' '' '' assert output == `` import flask_foo as foobar '' red = fix_standard_imports ( red ) imports which are multi-line and/or occur within parens . While also not for x , node in enumerate ( atoms ) : the list , if there is a paren then it does not add a comma before the next def _form_function_call ( node ) : redbaron node.replace ( `` import flask_ % s as % s '' % ( package , name ) ) something '' ) Case 2 : from flask.ext import foo -- > import flask_foo as foo from redbaron import RedBaron # Author : Keyan Pishdadian 2015 values = node.value modules = node.modules ( ) def test_from_to_from_import ( ) : name = node.names ( ) [ 0 ] output += param.dumps ( ) + `` . '' `` `` '' Parses the input_file into a RedBaron FST . '' '' '' def test_function_call_migration ( ) : Reconstructs function call strings when making attribute access calls . `` `` '' `` `` '' Overwrites the input_file once the FST has been modified . '' '' '' foobar , \ The module list can include parens , this function checks each element in import sys import flaskext_migrate as migrate with open ( input_file , `` w '' ) as source_code : red = RedBaron ( `` import flask.ext.foo as foobar '' ) return red assert output == `` from flask_foo import bar as bar '' def write_source ( red , input_file ) : with open ( input_file , `` r '' ) as source_code : % ( package , module_string ) ) red = RedBaron ( source_code.read ( ) ) output = migrate.fix_tester ( red ) assert output == `` import flask_foo '' source_code.write ( red.dumps ( ) ) check_user_input ( ) fix ( ) assert output == `` from flask_foo import ( bar , foo , foobar ) '' if __name__ == `` __main__ '' : for x , node in enumerate ( from_imports ) : ast = read_source ( input_file ) red = RedBaron ( `` from flask.ext import foo '' ) def test_module_import ( ) : red = RedBaron ( `` from flask.ext.foo import bar as baz '' ) `` `` '' Exits and gives error message if no argument is passed in the shell . '' '' '' ast = fix_imports ( ast ) % ( module , module ) ) package = node.value [ 0 ] .value [ 2 ] .value # Case 2 else : red = fix_from_imports ( red ) `` flask.ext.foo.bar ( var ) '' ) if name == package : def check_user_input ( ) : red = RedBaron ( `` from flask.ext.foo import bar , foobar , something '' ) bar , \ name = node.names ( ) [ 0 ] .split ( ' . ' ) [ -1 ] # format . for ( cur , next ) in zip ( module , module [ 1 : ] + [ `` ] ) ] else cur if ( node.value [ 0 ] .value == 'flask ' and from_imports = red.find_all ( `` FromImport '' ) if ( node.value [ 0 ] .value [ 0 ] .value == 'flask ' and def test__named_from_import ( ) : node_vals = node.value module = node.modules ( ) [ 0 ] Takes a list of modules and converts into a string . Searches the AST for AtomtrailerNodes and replaces them . # Script which modifies source code away from the deprecated `` flask.ext '' modules_string = [ cur + ' , ' if cur.isalnum ( ) and next.isalnum ( ) Modifies function calls in the source to reflect import changes . # Case 1 def fix_tester ( ast ) : sys.exit ( `` No filename was included , please try again . '' ) element . Otherwise a comma and space is added . This is to preserve module return ast.dumps ( ) node.replace ( `` from flask_ % s import % s as % s '' assert output == `` import flask_foo as foo '' for x , param in enumerate ( node_vals [ 3 : : ] ) :","['scripts/flaskext_migrate.py', 'scripts/test_import_migration.py', 'tox.ini']",Merge pull request # 1342 from keyanp/issue1135
495,0cf5881312a2256607cebe36938405a6fe5a820e,2015-02-11 15:06:53-05:00,"# Author : Keyan Pishdadian old_file = open ( sys.arv [ 1 ] ) import pytest import sys # Tester for the flaskext_migrate.py module located in flask/scripts/ red = RedBaron ( `` from flask.ext import foo '' ) def test_module_import ( ) : red = RedBaron ( `` import flask.ext.foo '' ) import flask.ext.foo for line in old_file : ) if line [ 0 , 15 ] is `` from flask.ext '' : from flask.ext.foo import ( bam , new_file = open ( `` temp.py '' , `` w '' ) something '' ) line = line . replace ( `` flask.ext . '' + extension , red = RedBaron ( `` from flask.ext.foo import bar , foobar , something '' ) from flask.ext.foo import \ bar , \ new_file.write ( line ) from redbaron import RedBaron if __name__ == `` __main__ '' : def test_multiline_import ( ) : bam , \ # import_statement = line [ 16 : : ] .split ( ' ' ) def test_from_to_from_import ( ) : extension = import_statement [ 0 ] a , from flask.ext import foo else : `` flask_ '' + extension ) def test_simple_from_import ( ) : red = RedBaron ( `` from flask.ext.foo import bar '' ) output = migrate.fix ( red ) def migrate ( old_file ) : foobar , \ crackle def test_multiple_import ( ) : import flaskext_migrate as migrate assert output == `` from flask_foo import bar '' red = RedBaron ( `` from flask.ext.foo import \ assert output == `` import flask_foo '' if line [ 15 ] == ' . ' : pass assert output == `` from flask_foo import bar , foobar , something '' assert output == `` import flask_foo as foo '' b","['scripts/test.py', 'tests/test_import_migration.py']","Add tests , remove manual testing file # 1135"
496,4082fe65f3ea553ef954b1cab0202259809e27e0,2015-02-09 13:42:06+01:00,"This signal is sent before any request processing started but when the specified that way one has to pass the list in as argument : : ( : meth : ` ~blinker.base.Signal.connected_to ` ) that allows you to in a unittest which templates were rendered and what variables were passed request context was set up . Because the request context is already unless you really want to listen for signals of all applications . This is subscribe to them for just a split second . These temporary specified that way , you have to pass the list in as an argument : : any request processing happens . Because the request context is already unless you really want to listen for signals from all applications . This is subscribe to them for the split of a second . These temporary This signal is sent when the request context is set up , before Here for example a helper context manager that can be used to figure out ( : meth : ` ~blinker.base.Signal.connected_to ` ) . that allows you to to determine which templates were rendered and what variables were passed For example , here is a helper context manager that can be used in a unittest",['docs/signals.rst'],Merge pull request # 1349 from jeffwidman/patch-1
497,6521c36c681500d94ff3b624b6c633be98844adc,2015-02-08 13:42:37+01:00,checking them first . Something like this is usually sufficient to Please never pass filenames to this function from user sources ; Please never pass filenames to this function from user sources without if ' .. ' in filename or filename.startswith ( '/ ' ) : abort ( 404 ) you should use : func : ` send_from_directory ` instead . avoid security problems : :,['flask/helpers.py'],Merge pull request # 1346 from ezyang/master
498,f0b4b99930595f164c42f53ad9968071ad99c220,2015-02-06 23:34:52+01:00,"evts.append ( 1 ) assert evts == [ 1 , 2 ] def before_request3 ( ) : evts.append ( 2 ) evts.append ( 3 ) def before_request ( ) : def before_request1 ( ) : def before_request2 ( ) : return `` bye '' assert not evts",['tests/test_basic.py'],Merge pull request # 1343 from cvrebert/test_request_preprocessing_early_return
499,9d64ff420fdde3c6eaa6d573d41da3b2f587422c,2015-02-06 14:38:33-05:00,"# import flask.ext.foo = > import flask_foo def migrate ( old_file ) : if line [ 0:14 ] == `` from flask.ext '' : if line [ 15 ] == ' . ' : import_statement ) import_statement = line [ 15 : : ] .split ( ' ' ) from flask.ext import foo new_file = open ( `` temp.py '' , `` w '' ) extension = import_statement [ 0 ] old_file = open ( sys.arv [ 1 ] ) pass import_statement = line [ 15 : : ] .split ( ' ' ) [ 1 ] import_statement = line [ 16 : : ] .split ( ' ' ) else : line = line.replace ( `` flask.ext . '' + extension , # from flask.ext import foo = > import flask_foo as foo import flask_foo as foo import_statement migrate ( old_file ) `` flask_ '' + extension ) new_file.close ( ) for line in old_file : elif line [ 14 ] == `` `` : import sys `` as `` old_file = open ( sys.argv [ 1 ] ) from flask_foo import bam new_file.write ( line ) if line [ 14 ] == ' . ' : # from flask.ext.foo import bam = > from flask_foo import bam if line [ 0 , 15 ] is `` from flask.ext '' : from flask.ext.foo import bam line = ( `` import flask_ '' line = line . replace ( `` flask.ext . '' + extension , import_statement = import_statement.strip ( '\n ' ) if __name__ == `` __main__ '' : `` flask_ '' + extension )","['scripts/flaskext_migrate.py', 'scripts/temp.py', 'scripts/test.txt']",Early commit for issue # 1135
500,eb2a4521ff838ceb291f6f30f41ea70e3f552032,2015-02-06 18:03:41+01:00,"__version__ = ' 0.11.dev0 ' version= ' 0.11.dev0 ' , __version__ = ' 0.11-dev ' version= ' 0.11-dev ' ,","['flask/__init__.py', 'setup.py']",Merge pull request # 1341 from ThiefMaster/pep-440-dev-version
501,5fa76f6800fb81a621b63c42725c5502e2520302,2015-02-05 22:13:19+01:00,evts.append ( 'index ' ) rv = app.test_client ( ) .get ( '/ ' ) .data.strip ( ) app = flask.Flask ( __name__ ) return `` damnit '' def before_request ( ) : def index ( ) : evts = [ ] assert rv == 'hello ' def test_request_preprocessing_early_return ( ) : return `` hello '' assert not evts,['tests/test_basic.py'],Add testcase for behavior described in # 1338
502,6e6a3e8cfb5c8c6b6bcddeb0a045a8441a35ad0a,2015-02-05 22:11:07+01:00,"call each : meth : ` before_request ` decorated function , passing no The function will be called without any arguments . The return values of teardown functions are ignored . `` `` '' `` `` '' Registers a function to run before each request . value is ignored . If the function returns a non-None value , it 's handled as request handling is stopped . If any of these functions returns a value , it 's handled as If any of these function returns a value it 's handled as The function will be called without any arguments and its return call every as : meth : ` before_request ` decorated function . `` `` '' Registers a function to run before each request . '' '' '' if it was the return value from the view and further arguments .",['flask/app.py'],Merge pull request # 1338 from cvrebert/middleware-docs
503,e3ba459abb026c536e60a3ba2dec3e30b53003f6,2015-01-16 15:06:08+01:00,"return 'Hello World ' return 'Hello , World ' return 'Hello World ! ' < h1 > Hello World ! < /h1 > < h1 > Hello , World ! < /h1 > return 'Hello , World ! '",['docs/quickstart.rst'],Merge pull request # 1318 from cerivera/master
504,dfeabb7089e989040d0169df4c7df6892e45422d,2015-01-13 23:55:53+01:00,"from wtforms import Form , BooleanField , TextField , PasswordField , validators email = TextField ( 'Email Address ' , [ validators.Length ( min=6 , max=35 ) ] ) username = StringField ( 'Username ' , [ validators.Length ( min=4 , max=25 ) ] ) email = StringField ( 'Email Address ' , [ validators.Length ( min=6 , max=35 ) ] ) username = TextField ( 'Username ' , [ validators.Length ( min=4 , max=25 ) ] ) from wtforms import Form , BooleanField , StringField , PasswordField , validators",['docs/patterns/wtforms.rst'],Merge pull request # 1315 from brettgerry/deprecate-textfield
505,5b9826615267fd75a954db40c1decc2a9dc40a99,2015-01-03 14:00:39+01:00,": copyright : ( c ) Copyright 2014 by Armin Ronacher . : copyright : ( c ) 2015 by Ali Afshar . : copyright : ( c ) 2014 by Ali Afshar . : copyright : ( c ) Copyright 2015 by Armin Ronacher . copyright = u'2015 , Armin Ronacher ' Copyright ( c ) 2014 by Armin Ronacher and contributors . See AUTHORS : copyright : ( c ) 2014 by the Flask Team , see AUTHORS for more details . Copyright ( c ) 2015 by Armin Ronacher and contributors . See AUTHORS : copyright : ( c ) 2015 by Armin Ronacher . copyright = u'2014 , Armin Ronacher ' : copyright : ( c ) 2014 by Armin Ronacher . : copyright : ( c ) 2015 by the Flask Team , see AUTHORS for more details .","['LICENSE', 'docs/conf.py', 'examples/flaskr/flaskr.py', 'examples/flaskr/test_flaskr.py', 'examples/jqueryexample/jqueryexample.py', 'examples/minitwit/minitwit.py', 'examples/minitwit/test_minitwit.py', 'flask/__init__.py', 'flask/__main__.py', 'flask/_compat.py', 'flask/app.py', 'flask/blueprints.py', 'flask/cli.py', 'flask/config.py', 'flask/ctx.py', 'flask/debughelpers.py', 'flask/ext/__init__.py', 'flask/exthook.py', 'flask/globals.py', 'flask/helpers.py', 'flask/json.py', 'flask/logging.py', 'flask/sessions.py', 'flask/signals.py', 'flask/templating.py', 'flask/testing.py', 'flask/views.py', 'flask/wrappers.py', 'scripts/flask-07-upgrade.py', 'scripts/flaskext_compat.py', 'scripts/flaskext_tester.py', 'scripts/make-release.py', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_config.py', 'tests/test_deprecations.py', 'tests/test_ext.py', 'tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_views.py']",Merge pull request # 1303 from Parkayun/master
506,45e901fbf828addfcd0984edfa495d99d7155d9d,2014-12-26 20:14:01+01:00,"methods = set ( methods ) rv = c.open ( '/options ' , method='OPTIONS ' ) # Issue 1288 : Test that automatic options are not added when non-uppercase 'options ' in methods assert rv.status_code == 200 random_uuid4 = `` 7eb41166-9ebf-4d26-b771-ea3f54f8b383 '' assert random_uuid4 in rv.data.decode ( `` utf-8 '' ) return random_uuid4 def options ( ) : methods = set ( item.upper ( ) for item in methods ) app.add_url_rule ( '/options ' , 'options ' , options , methods= [ 'options ' ] )","['flask/app.py', 'tests/test_basic.py']",Merge pull request # 1290 from mhall1/ticket_1288
507,98b155c65da62077dc5f277a3ec15d3af78333af,2014-12-26 08:58:35-05:00,"methods = set ( methods ) rv = c.open ( '/options ' , method='OPTIONS ' ) # Issue 1288 : Test that automatic options are not added when non-uppercase 'options ' in methods assert rv.status_code == 200 random_uuid4 = `` 7eb41166-9ebf-4d26-b771-ea3f54f8b383 '' assert random_uuid4 in rv.data.decode ( `` utf-8 '' ) return random_uuid4 def options ( ) : methods = set ( item.upper ( ) for item in methods ) app.add_url_rule ( '/options ' , 'options ' , options , methods= [ 'options ' ] )","['flask/app.py', 'tests/test_basic.py']",Fixed # 1288 : app.add_url_rule ( ) should look for OPTIONS methods in a case-insensitive manner
508,b7dfa6c363aec171bdca04ce0f49ac5f2a0ac35c,2014-12-17 13:28:24+01:00,raise Exception ( ' % s must be at most % s characters long ' % length ) from mongokit import ValidationError # must have % s in error format string to have mongokit place key in there raise ValidationError ( ' % s must be at most { } characters long'.format ( length ) ),['docs/patterns/mongokit.rst'],Merge pull request # 1280 from jcomo/mongokit-doc-update
509,82d7c49d005f419b2f7b5e70fd34a42fb18a1a7e,2014-12-16 20:30:51+01:00,"` logged_in ` key for the session . If the user logged in successfully , that Before starting the server for the first time , it 's important to create This is where the application context comes into play . So let 's start 3. the page shows all entries so far in reverse order ( newest on top ) and Essentially , the app context is created before the request comes in and is Within the function , we can then access : attr : ` flask.g ` and other things as This is the place where CSS and Javascript files go . Inside the ` logged_in ` key in the session . If the user logged in successfully , that ` show_entries ` page . If everything worked out well we will This schema consists of a single table called `` entries `` . Each row in download it from GitHub : ` flaskext_compat.py ` _ load that , and import the values from there . conventions when getting started . By convention , templates and static files are config from the same file , in : file : ` flaskr.py ` : : as a database ( which comes out of the box with Python ) so there is nothing page not found error because we do n't have any views yet . But we will requires that we provide the path to the database which can introduce add this function below the ` connect_db ` function in : file : ` flaskr.py ` : : To do this , we can create a function and hook it into the : command : ` flask ` drop our files . Later on , we will put our database schema as well as main The : class : ` ~flask.Config ` object works similar to a dictionary so we only have to commit the changes . SQLite 3 and other transactional less Web-2.0-ish name ; ) Essentially , we want it to do the following things : load that or import the values from there . .. code-block : : python that flask provides us with the : meth : ` ~flask.Flask.teardown_appcontext ` every time the app context tears down . So what does this mean ? request context . For the time being , all you have to know is that there folder . We will begin by adding the imports we need and by adding the config it makes a lot of sense to use ` SQLAlchemy ` _ , as it handles database are special variables that use these . For instance , the directly into the module , and this is what we will be doing here . However , uses the connection . How can we elegantly do that with Flask ? 2 . When the user is logged in , they can add new entries to the page directly into the module , and this is what we will be doing here . However This is the login template , which basically just displays a form to allow Now that the database connections are working we can start writing the : command : ` flask ` script . When the command executes Flask will automatically Now , it is possible to create a database with the : command : ` flask ` script : : each process . Unfortunately , you can not depend on this in web Python file ( although it certainly can ) , nor does it mean that Flask is lacking For the time being , all you have to know is that you can store information parameter will be `` None `` ) or an exception happened , in which case the error We will begin by adding the imports we need and by adding the config systems need a schema that tells them how to store that information . are special variables that use these . For instance the Such a schema can be created by piping the ` schema.sql ` file into the this function below the ` connect_db ` function in : file : ` flaskr.py ` : : that in all cases only variable names that are uppercase are considered . now , we would only get an exception that Flask can not find the templates . The that initializes the database . Let me show you the code first . Just add for this application and we only want to support SQLite so creating the When you head over to the server in your browser , you will get a 404 error enough for an application of this size . For larger applications , however , If you get an exception later on stating that a table can not be found , check files can then easily be found . In this example we place the the user can add new ones from there if logged in . Let 's call it `` flaskr.py `` . We will place this file inside the `` flaskr `` but first , we should get the database working . connections in a more intelligent way , allows you to target different < li > < a href= '' http : //github.com/mitsuhiko/flask '' > Flask @ github < /a > < /li > specified database . This can be used to open a connection on request and When you head over to the server in your browser you will get an 404 Within the function we can then access : attr : ` flask.g ` and other things as only have to commit the changes . SQLite3 and other transactional a cleaner solution would be to create a separate `` .ini `` or `` .py `` file , app.config.from_envvar ( 'FLASKR_SETTINGS ' , silent=True ) from GitHub . Now that we have the schema in place we can create the application module . download it from github : ` flaskext_compat.py ` _ Let 's call it flaskr.py . We will place this file inside the flaskr folder . Next we can create our actual application and initialize it with the First we add the imports in : file : ` flaskr.py ` : : transaction , we also need to make sure that only one request at the time If you get an exception later that a table can not be found check that systems need a schema that tells them how to store that information . So parameter will be `` None `` ) or an exception happened in which case the error application . Just create a stylesheet called : file : ` style.css ` in the First , we add the imports in : file : ` flaskr.py ` : : For the time being all you have to know is that you can store information templates you create later in the tutorial will go in this directory . First we want to create the database schema . Only a single table is needed installed which is not necessarily the case on every system . This also location ( your ` flaskr ` folder ) and allows you to read from it . We are config from the same file in : file : ` flaskr.py ` : : command that initializes the database . Let me show you the code first . Just function . The first time the function is called , it will create a database files can then easily be found . In this example , we place the The ` logout ` function , on the other hand , removes that key from the session conventions when getting started . By convention templates and static files are This is where the application context comes into play , so let 's start though , so that we can easily create databases in unit tests later on . ( For : file : ` templates ` folder , Flask will look for ` Jinja2 ` _ templates . The 2. when the user is logged in they can add new entries to the page We will be using SQLite3 directly for that application because it 's good First , we want to create the database schema . Only a single table is needed for this application and we only want to support SQLite , so creating the With that out of the way you should be able to start up the application 1 . Let the user sign in and out with credentials specified in the module into this folder . It is done in the following way . The files inside The downside of this is that it requires the sqlite3 command to be names : file : ` templates ` and : file : ` static ` respectively . While this can be changed , you correct ( singular vs. plural for example ) . Now that we have the schema in place , we can create the application module . transaction we also need to make sure that only one request at the time We will also add a method that allows for easy connections to the we would only get an exception that Flask can not find the templates . The Now that the database connections are working , we can start writing the We will also add a method that allows for easily connecting to the Finally the login template which basically just displays a form to allow ( newest on top ) and the user can add new ones from there if logged in . With that out of the way , you should be able to start up the application less web-2.0-ish name ; ) Basically we want it to do the following things : The ` flaskr ` folder is not a python package , but just something where we simple microblog application . It only supports one user that can create because we do n't have any views yet . We will focus on that a little later , example of how to perform unittesting in the : ref : ` testing ` section of the We will call our blogging application flaskr here , feel free to choose a On that cursor , there is a method to execute a complete script . Finally , we ` connect_db ` , but by itself , that 's not particularly useful . Creating and responds to `` POST `` requests ; the actual form is shown on the folder we created before : : file : ` static ` folder we created before : Now we should start working on the templates . If we request the URLs now Here a screenshot of the final application : Now we should start working on the templates . If we were torequest the URLs you did execute the ` initdb ` command and that your table names are focus on that a little later . First we should get the database working . Essentially the app context is created before the request comes in and is We want to keep an actual functions around that initializes the database , 3 . The index page shows all entries so far in reverse chronological order though so that we can easily create databases in unittests later . ( For correct ( singular vs. plural , for example ) . Here a screenshot from the final application : names : file : ` templates ` and : file : ` static ` respectively . While this can be changed you uses the connection . So how can we elegantly do that with Flask ? responds to `` POST `` requests , the actual form is shown on the that you did execute the `` initdb `` command and that your table names are from github . application . Just create a stylesheet called : file : ` style.css ` in the : file : ` static ` 1. let the user sign in and out with credentials specified in the connections in a more intelligent way , allowing you to target different this table has an `` id `` , a `` title `` , and a `` text `` . The `` id `` is an Next , we can create our actual application and initialize it with the every time the app context tears down . What does this mean ? the chance to learn that by example . In this tutorial we will create a We will be using SQLite3 directly for this application because it 's good installed , which is not necessarily the case on every system . This also Python file , although it certainly can . Nor does it mean that Flask is lacking Such a schema can be created by piping the `` schema.sql `` file into the it makes a lot of sense to use ` SQLAlchemy ` _ that handles database as database which comes out of the box with Python , so there is nothing get the path to the application . Together with the `` os.path `` module : file : ` templates ` folder Flask will look for ` Jinja2 ` _ templates . The ` connect_db ` but by itself that 's not particularly useful . Creating and into this folder . It is done in the following way . The files inside Usually , it is a good idea to load a separate , environment specific The logout function , on the other hand , removes that key from the session enough for an application of that size . For larger applications however example of how to perform unit testing in the : ref : ` testing ` section of the This is the place where css and javascript files go . Inside the On that cursor there is a method to execute a complete script . Finally we the chance to learn by example . In this tutorial , we will create a simple drop our files . We will then put our database schema as well as main module connection for the current context , and successive calls will return the this table has an ` id ` , a ` title ` and a ` text ` . The ` id ` is an The view function will pass the entries as dictionaries to the To do this we can create a function and hook it into the : command : ` flask ` command function . The first time the function is called it will create a database Usually , it is a good idea to load a separate , environment-specific connection for the current context and successive calls will return the Now it is possible to create a database with the : command : ` flask ` script : : In addition to that , you can use the : meth : ` ~flask.Config.from_object ` requires that we provide the path to the database , which can introduce that in all cases , only variable names that are uppercase are considered . We want to keep an actual functions around that initializes the database microblogging application . It only supports one user that can create The downside of this is that it requires the `` sqlite3 `` command to be request context . For the time being all you have to know is that there For a real-work application it 's recommended to use : command : ` flask ` script . When the command executes , Flask will automatically a cleaner solution would be to create a separate `` .ini `` or `` .py `` file and app.config.from_envvar ( 'FLASKR_SETTINGS ' , silent=True ) This schema consists of a single table called ` entries ` and each row in get the path to the application . Together with the `` os.path `` module , before starting the server for the first time it 's important to create For a real-world application , it 's recommended to use location ( your `` flaskr `` folder ) and allows you to read from it . We are each process . Unfortunately you can not depend on this in web The view function will pass the entries as dicts to the In addition to that you can use the : meth : ` ~flask.Config.from_object ` ` show_entries ` page . If everything worked out well , we will The : class : ` ~flask.Config ` object works similarly to a dictionary so we We will call our blogging application flaskr , but feel free to choose your own that , Flask provides us with the : meth : ` ~flask.Flask.teardown_appcontext ` templates you create later on in the tutorial will go in this directory . specified database . This can be used to open a connection on request and The `` flaskr `` folder is not a Python package , but just something where we","['docs/_templates/sidebarintro.html', 'docs/extensions.rst', 'docs/foreword.rst', 'docs/patterns/jquery.rst', 'docs/tutorial/css.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/dbinit.rst', 'docs/tutorial/folders.rst', 'docs/tutorial/index.rst', 'docs/tutorial/introduction.rst', 'docs/tutorial/schema.rst', 'docs/tutorial/setup.rst', 'docs/tutorial/templates.rst', 'docs/tutorial/testing.rst', 'docs/tutorial/views.rst']",Merge pull request # 1277 from iKevinY/doc-fixes
510,eca53063862fd487dbce6e36fc42fae80f1494c3,2014-12-07 23:53:07+01:00,"constructor . the given arguments with an : mimetype : ` application/json ` mimetype . The arguments indent=indent , separators=separators ) , the given arguments with an : mimetype : ` application/json ` mimetype . The return rv b ' { \n `` msg '' : { \n `` submsg '' : `` W00t '' \n } , \n `` msg2 '' : `` foobar '' \n } \n ' JSON responses are now terminated with a newline character , because it is a rv = current_app.response_class ( assert rv.data == b ' { \n `` msg '' : `` W00t '' \n } \n ' b ' { \n `` msg '' : { \n `` submsg '' : `` W00t '' \n } , \n `` msg2 '' : `` foobar '' \n } ' # ( see https : //github.com/mitsuhiko/flask/pull/1262 ) '\n ' ) , arguments to this function are the same as to the : class : ` dict ` return current_app.response_class ( dumps ( dict ( * args , * * kwargs ) , convention that UNIX text files end with a newline and some clients do n't to this function are the same as to the : class : ` dict ` constructor . # Note that we add '\n ' to end of response assert rv.data == b ' { \n `` msg '' : `` W00t '' \n } ' part of https : //github.com/kennethreitz/httpbin/issues/168 ( dumps ( dict ( * args , * * kwargs ) , indent=indent , separators=separators ) , https : //github.com/mitsuhiko/flask/pull/1262 -- this came up originally as a compressed_msg = b ' { `` msg '' : { `` submsg '' : '' W00t '' } , '' msg2 '' : '' foobar '' } ' deal well when this newline is missing . See compressed_msg = b ' { `` msg '' : { `` submsg '' : '' W00t '' } , '' msg2 '' : '' foobar '' } \n '","['CHANGES', 'flask/json.py', 'tests/test_basic.py']",Merge pull request # 1262 from msabramo/JSONIFY_END_WITH_NEWLINE
511,86525d9b374efd00a97a9c3e9586425a356a6bcc,2014-12-04 22:36:31+01:00,"usually encoding-related . Few Users details as it was written before WSGI was updated to Python 3 . While the But if you are familiar with Python 3 and Flask extension , you can start Although moving to Python 3 should be done someday , most people still use the first versions to introduce Python 3 support . caught up . using Flask with Python 3 is generally a smooth ride . However , keep in mind guarantee that this wo n't happen on Python 3 . Unless you are already familiar with the differences in the versions we ` itsdangerous ` , ` Jinja2 ` and ` Werkzeug ` . Python 2 for now . As a result many of the problems you will encounter are Small Ecosystem Some Flask extensions , documentation and PyPI provided libraries do not probably hard to search for on the internet if they are Python 3 specific . ` itsdangerous ` , ` Jinja2 ` and ` Werkzeug ` . Flask 0.10 and Werkzeug 0.9 were that most libraries ( including Werkzeug and Flask ) might not quite as stable Even if you start your project with knowing that all you will need is Requirements supported by Python 3 you do n't know what happens six months from now . recommend sticking to current versions of Python until the ecosystem API Stability Unless you require absolute compatibility , you should be fine with Python 3 A lot of the documentation out there on using WSGI leaves out those on Python 3 yet . You might therefore sometimes run into bugs that are support Python 3 yet . Recommendations API for Werkzeug and Flask on Python 2.x should not change much we can not nowadays . Most libraries and Flask extensions have been ported by now and porting libraries on your own .",['docs/python3.rst'],Merge pull request # 1264 from svenstaro/patch-1
512,b24438b2c9df81db294d3c15681f7faf9a135970,2014-11-12 14:17:31+01:00,"loaded upfront . The trick is to actually load the view function as needed . loaded upfront . The trick to actually load the view function as needed . Then , with the centralized approach you would have one file with the views Then the centralized approach you would have one file with the views",['docs/patterns/lazyloading.rst'],Merge pull request # 1247 from Winnetou/patch-8
513,eea93424142ede248d9febee6be11b37faf9fbb1,2014-11-09 00:05:00+01:00,"You can then create such a database from the python shell : You can then create such a database from the Python shell : demand and closing them when the context dies ( usually at the end of the Additionally , it is a good idea to provide a query function that combines Additionally it is a good idea to provide a query function that combines demand , closing them when the context dies ( usually at the end of the",['docs/patterns/sqlite3.rst'],Merge pull request # 1245 from Winnetou/patch-7
514,13bd8586e997bccc7d106006aaf82eca0c4c6d6d,2014-11-07 10:24:52+01:00,"A common question is how to add a favicon to a Flask application . First , of A common question is how to add a favicon to a flask application . First , of web server 's documentation . the root path of the domain you either need to configure the web server to webserver 's documentation . the root path of the domain you either need to configure the webserver to",['docs/patterns/favicon.rst'],Merge pull request # 1244 from Winnetou/patch-6
515,e9160473093ce7b2a4e867de414a90a9094943fc,2014-11-06 14:11:47+01:00,# chop of the port which is usually not supported by browsers raise RuntimeError ( 'the session is unavailable because no secret ' # chop off the port which is usually not supported by browsers raise RuntimeError ( 'The session is unavailable because no secret ',['flask/sessions.py'],Merge pull request # 1242 from Winnetou/patch-4
516,6fcc2ae3f4536e4d2651c1a00abe2306212a5bfd,2014-11-05 09:47:28+01:00,"form to submit to your ` add_entry ` function and use `` POST `` as HTTP `` .cgi `` into a : file : ` cgi-bin ` ( and use ` mod_rewrite ` or something similar to the current user is stored as ` g.user ` and `` None `` if there is no-one was linked to ` DEBUG ` alone and is now linked to either ` DEBUG ` or HTTP ` OPTIONS ` response . This can be useful when working with # : ` TESTING ` configuration key . Defaults to ` False ` . to a view function . This is possible with this decorator . For example : : added ` TESTING ` switch that can activate unittesting helpers . `` SEND_FILE_MAX_AGE_DEFAULT `` : Default cache control max age to use with : attr : ` ~flask.request.args ` if the data is submitted as ` GET ` . status code and a : mimetype : ` text/html ` mimetype . The logic that Flask applies to : file : ` yourapplication ` inside the existing one and move everything below it . : param with_categories : set to `` True `` to also receive categories . From this point onwards `` flask `` will find your application . # : The subdomain that the blueprint should be active for , ` None ` Here 's the HTML code needed for our little application ( : file : ` index.html ` ) . : ref : ` app-factories ` ) you will discover that the `` flask `` command can not Most importantly the extension must be shipped with a ` setup.py ` file and a config file to be loaded . The silent switch just tells Flask to not complain your app to be available , works too but the `` ScriptAlias `` directive wo n't set-cookie behavior . If set to ` True ` a permanent session will be location where it 's expected ( eg : `` /var/www/yourapplication `` ) . need to map the endpoint as defined in the : class : ` ~werkzeug.routing.Rule ` At the end of the `` with `` block the teardown handles will be executed A basic : file : ` setup.py ` file for a Flask application looks like this : : be using the `` flask `` command line script 's `` runserver `` requires support of the underlying webserver for `` X-Sendfile `` . `` `` '' If the mimetype is ` application/json ` this will contain the # : this function is active for , `` None `` for all requests . This can for click finds and executes the Flask application . If you use the `` flask `` If you want to open the ` schema.sql ` file you would do the In this case , a file called `` .htaccess `` , sitting in the public directory you want : file : ` yourapplication.cgi ` : : And here the : file : ` layout.html ` template which does the magic : Just save it as : file : ` hello.py ` ( or something similar ) and run it with your Python : file : ` setup.py ` file ( : ref : ` distribute-deployment ` ) . Using ` Flask-SQLAlchemy < http : //pythonhosted.org/Flask-SQLAlchemy/ > ` _ , for you . And it is doing that for all `` GET `` requests to a certain URL , is ` None ` , the whole pair is skipped . In case blueprints are active method which will return `` True `` if the data validates , `` False `` # : The subdomain that the blueprint should be active for , `` None `` Simply define the environment variable : envvar : ` FLASKR_SETTINGS ` that points to the `` UPLOAD_FOLDER `` the user might have the ability to modify a file on parameter must be set to ` True ` or a ` ValueError ` is raised . The default it 's set to ` False ` then a cookie is only set if the session is the ` with ` statement to bind the context . Everything that is called from this will return `` False `` for all exceptions except for a bad request 3 . Create a new Apache config for `` yourapplication `` and activate it . This template extends the ` layout.html ` template from above to display the # : The testing flag . Set this to `` True `` to enable the test mode of key error if `` TRAP_BAD_REQUEST_ERRORS `` is set to `` True `` . It ` KeyError ` because users might change the URL and presenting them a 400 ` False ` . # : implementation just hardcodes `` False `` in . test `` , test dependencies can be specified in the : file : ` setup.py ` file . The # : name of the blueprint this function is active for , `` None `` for all the logger switches to ` DEBUG ` mode now if debug is enabled . ( `` FLASK_APP `` ) or the : option : ` -- app ` / : option : ` -a ` parameter . It should be the Put the following templates into the ` templates ` folder : requires support of the underlying webserver for ` X-Sendfile ` . ` templates ` folder Flask will look for ` Jinja2 ` _ templates . The # : returns ` None ` or raises a ` BuildError ` the next function is into a separate : file : ` run.py ` file or put it into such an if block . : file : ` /var/www/yourapplication ` folder created and with the `` |safe `` filter . # : happened when matching , this will be ` None ` . A : class : ` ~werkzeug.datastructures.MultiDict ` with the parsed form data from ` POST ` app.url_map.add ( Rule ( '/ ' , endpoint='index ' ) ) will use the setting defined in the last import . This enables robust If `` GET `` is present , `` HEAD `` will be added automatically for you . You # : `` None `` here is used for application wide ` pip ` with root privileges : : responds to ` POST ` requests , the actual form is shown on the : param force : if set to ` True ` the mimetype is ignored . in the ` __init__.py ` file of your package like this : : And this is what : file : ` views.py ` would look like : : # : implementation just hardcodes ` False ` in . `` `` '' This method has to be implemented and must either return ` None ` If you want to use the ` easy_install ` command to upgrade your Flask `` text/html `` they are emitting is not very useful for API consumers . names : file : ` templates ` and : file : ` static ` respectively . While this can be changed you Here is an example model ( put this into ` models.py ` , e.g . ) : : host being set from `` X-Forwarded-Host `` and the remote address from and ` HTTP_HOST ` . You can configure your httpd to pass these headers , or you Here 's an example : file : ` __init__.py ` : : It makes sense to have that in : file : ` /var/www/yourapplication ` or something # : `` USE_X_SENDFILE `` configuration key . Defaults to `` False `` . you . What you should do , is to create a ` MANIFEST.in ` file next to your The `` -- debug `` flag enables or disables the interactive debugger . * Never : param conditional : set to `` True `` to enable conditional responses . Here is an example table and model ( put this into : file : ` models.py ` ) : : It is strongly recommended to activate either ` X-Sendfile ` support in app = Flask ( __name__ ) modified , if set to `` True `` it 's always set if the session is Here is an example ` database.py ` module for your application : : text ( ` True ` gives a tuple , where ` False ` gives just the message text ) . `` 'flask._preserve_context ' `` to ` True ` on the WSGI environment the To explain all of this , here is an example `` manage.py `` script that will return `` None `` : : Added : command : ` flask ` and the `` flask.cli `` module to start the local specification . Likewise , as of Flask 0.6 , ` OPTIONS ` is implemented for you Add the following lines to the top of your `` .wsgi `` file : : in the : file : ` __init__.py ` file of your package like this : : attribute to ` True ` yourself . Here an example : : the given arguments with an ` application/json ` mimetype . The arguments Here is an example document ( put this also into ` app.py ` , e.g . ) : : into a separate ` run.py ` file or put it into such an if block . etc. ) . By default a rule just listens for `` GET `` ( and the ` SERVER_NAME ` config key . This key is now also used to set This configuration binds the application to ` /yourapplication ` . If you want `` DELETE `` automatically was : file : ` admin/index.html ` for a template file called templates around . Previously if you had a folder named : file : ` templates ` ` True ` if the request was triggered via a JavaScript ` None ` is returned , an empty dictionary is assumed , if something else than first in a separate file otherwise the : command : ` flask ` command wo n't be able downloaded with `` easy_install `` or `` pip `` . If you add a Flask extension Do n't forget that even if you enlist them in your ` MANIFEST.in ` file , they sooner or later will replace ` easy_install ` which does more than just : attr : ` ~flask.request.args ` if the data is submitted as `` GET `` . `` `` '' Returns the value of the ` PRESERVE_CONTEXT_ON_EXCEPTION ` : file : ` setup.py ` file unless a dependency can not be met because it is not : param silent : set to ` True ` if you want silent failure for missing # : configuration key . Defaults to `` False `` . For example if your application is defined in : file : ` yourapplication/app.py ` parameter must be set to `` True `` or a : exc : ` ValueError ` is raised . The default And then when you want to render the template , use `` admin/index.html `` as # : returns `` None `` or raises a : exc : ` BuildError ` the next function is : param add_app_option : adds the default : option : ` -- app ` option . This gets template named : file : ` _cider.html ` with the following contents : 2 . Upload a new ` application.wsgi ` file to the server and the of the context until the end of the ` with ` block . This is useful if This configuration binds the application to `` /yourapplication `` . If you By using ` self.app.get ` we can send an HTTP `` GET `` request to the application with And here the `` layout.html `` template which does the magic : After installation of Flask you will now find a `` flask `` script installed it is not ` None ` , which can return a string to use as the result of Here is an example : file : ` database.py ` module for your application : : as well . Just create a folder called ` static ` in your package or next to the given arguments with an : mimetype : ` application/json ` mimetype . The arguments `` HEAD `` If you are on Windows and do n't have the ` easy_install ` command , you must be ` None ` . default is 31 days . If set to `` False `` ( which is the default ) the : ref : ` app-factories ` ) you will discover that the : command : ` flask ` command can not : file : ` templates ` folder Flask will look for ` Jinja2 ` _ templates . The form can submit to the server are ` GET ` and ` POST ` . But with JavaScript present in the session and `` True `` ) . development which is why from Flask 1.0 onwards the : command : ` flask ` method is Here the ` register.html ` template for the function we used above which This configuration binds the application to ` /yourapplication ` . If you as ` ValueError ` you will need to change this . test `` , test dependencies can be specified in the ` setup.py ` file . The things . With `` POST `` that would not be possible because it must only as dependency to your `` requirements.rst `` or `` setup.py `` file they are : file : ` application.cfg ` files come from ? for you . And it is doing that for all ` GET ` requests to a certain URL , This will enable the debugger , the reloader and then start the server on Here the example ` database.py ` module for your application : : as : exc : ` ValueError ` you will need to change this . Save the : file : ` yourapplication.fcgi ` file somewhere you will find it again . an : file : ` __init__.py ` file inside ) or a standard module ( just a `` .py `` file ) . # : name of the blueprint this function is active for , ` None ` for all The object returned can also be used without the ` with ` statement have to figure out how to calculate `` PATH_INFO `` and `` SCRIPT_NAME `` : : templates around . Previously if you had a folder named `` templates `` For the `` flask `` script to work , an application needs to be discovered . automatically was `` admin/index.html `` for a template file called The first `` None `` refers to the active blueprint . If the error # : registered here show up in the `` flask `` command once the Now it is possible to create a database with the `` flask `` script : : config from the same file , in ` flaskr.py ` : : `` SEND_FILE_MAX_AGE_DEFAULT `` Default cache control max age to use with By using ` self.app.get ` we can send an HTTP ` GET ` request to the application with Then you just have to add a separate : file : ` config.py ` file and export extension object , so one extension object can be used for multiple apps . ( e.g `` C : \Python27 `` ) , then go to `` Tools `` , then `` Scripts `` ; then find the If it returns ` True ` for any exception the error handler for this : param cache : if set to ` True ` the parsed JSON data is remembered Your index.html template either has to extend a : file : ` layout.html ` template with def my_index ( ) : to all servers and install it there . Thanks to the : file : ` setup.py ` file we or `` PUT `` requests . Please keep in mind that file uploads will not If ` GET ` is present , ` HEAD ` will be added automatically for you . You Here the example : file : ` database.py ` module for your application : : : meth : ` ~flask.Flask.test_client ` with a `` with `` block : : `` UPLOAD_FOLDER `` is where we will store the uploaded files and the ` /var/www/yourapplication ` ) and make sure that ` yourapplication ` and all The two problematic values in the WSGI environment usually are `` REMOTE_ADDR `` # : this function is active for , ` None ` for all requests . This can for check that you can now just type : command : ` python ` to bring up the interpreter . a cleaner solution would be to create a separate `` .ini `` or `` .py `` file and # : ` SESSION_COOKIE_NAME ` configuration key . Defaults to `` 'session ' `` To do this we can create a function and hook it into the `` flask `` command ( : file : ` flaskr_tests.py ` ) and create a unittest skeleton there : : it 's set to `` False `` then a cookie is only set if the session is : meth : ` ~flask.Flask.test_client ` with a ` with ` block : : `` example.com/yourapplication.fcgi/news/ `` . There are few ways to configure parameter of the ` setup ` function to ` True ` ! application . Just create a stylesheet called : file : ` style.css ` in the : file : ` static ` This template , which we 'll call : file : ` layout.html ` , defines a simple HTML skeleton : file : ` /var/www/yourapplication/env ` to be a virtual environment . Furthermore in the body of the `` with `` block will now be recorded in the ` templates ` 4 . `` $ .getJSON ( url , data , func ) `` sends a `` GET `` request to ` url ` and will ` .cgi ` into a ` cgi-bin ` ( and use ` mod_rewrite ` or something similar to The first ` None ` refers to the active blueprint . If the error parameter of the ` setup ` function to `` True `` ! `` win_add2path.py `` file and run that . Open a * * new * * Command Prompt and application . In short , the `` flask `` command did not exist , and this : `` yourapplication/admin/templates/admin/index.html `` . ` setup.py ` script with the ` install ` parameter . It will install your The : option : ` -a ` argument to : command : ` flask ` is the name of the module to import . In From this point onwards : command : ` flask ` will find your application . configuration file for the application ( eg : : file : ` application.cfg ` ) application is supposed to handle that as if a ` GET ` request was ` Content-Disposition : attachment ` header to prevent that problem . the test request context leaves the `` with `` block . If you do want the `` `` '' If the mimetype is : mimetype : ` application/json ` this will contain the # : ` PERMANENT_SESSION_LIFETIME ` configuration key . Defaults to with the ` |safe ` filter . falls back to another application if the creator function returns ` None ` : : : param with_categories : set to ` True ` to also receive categories . # : The debug flag . Set this to `` True `` to enable debugging of the Simply define the environment variable : envvar : ` FLASKR_SETTINGS ` that points to reloading . Whenever something changes the ` .wsgi ` file , ` mod_wsgi ` will behavior for `` OPTIONS `` responses . necessary , but we are inside a ` script ` block here where different rules Make sure to activate watching for changes of the `` .wsgi `` file so modified , if set to ` True ` it 's always set if the session is a config file to be loaded . The silent switch just tells Flask to not complain all `` .pyc `` files first , otherwise things would most likely break ) Your index.html template either has to extend a ` layout.html ` template with backend interface on ` /backend ` : : the question comes up what `` self `` points to . The way this works is that # : preprocessors . The key `` None `` here is used for application wide uses `` / `` if it 's `` None `` . your JSON file . The browser will totally ignore the `` application/json `` ` include_package_data ` tells distribute to look for a ` MANIFEST.in ` file you have to modify your ` .wsgi ` file slightly . While the most common way is to use the : command : ` flask ` command , you can also Here is an example table and model ( put this into ` models.py ` ) : : are we not creating the configuration or `` .wsgi `` file on the server . So ` HEAD ` name into that folder if you want `` blueprintname/template.html `` as explicitly set to ` None ` this is key error if `` TRAP_BAD_REQUEST_ERRORS `` is set to ` True ` . It address can be changed via ` SERVER_NAME ` configuration variable which Here an example : file : ` app.py ` module for your application : : ` POST ` or ` PUT ` request . Each file is stored as ` TESTING ` . absence of an application the `` flask `` script is still operational on a To run your application you need a : file : ` yourapplication.wsgi ` file . This file the `` Host `` header to figure out the subdomain one simply looks at the `` `` '' This is ` True ` if the package bound object 's container has a type : mimetype : ` application/xhtml+xml ` , but Internet Explorer refuses to read files want to render a template called : file : ` index.html ` which is specific to this Just save it as ` hello.py ` ( or something similar ) and run it with your Python configuration file for the application ( eg : ` application.cfg ` ) to use it inside ` script ` tags : A fabfile is what controls what Fabric executes . It is named : file : ` fabfile.py ` privileges , and leave out : command : ` sudo ` . ) `` False `` it will only be modified if the session actually modifies . The : meth : ` flask.Flask.run ` method now accepts ` None ` for ` host ` and ` port ` delete a user 's profile ( say ` http : //example.com/user/delete ` ) . If an name into that folder if you want : file : ` blueprintname/template.html ` as : file : ` win_add2path.py ` file and run that . Open a * * new * * Command Prompt and in which case `` X-Sendfile `` might not work and : param as_attachment : set to `` True `` if you want to send this file with decorators that want to customize the ` OPTIONS ` response on a per-view `` X-Forwarded-For `` : : `` /var/www/yourapplication `` folder created and ` setup.py ` file unless a dependency can not be met because it is not the same thread from this point onwards until the end of the ` with ` ` DELETE ` # : `` TESTING `` configuration key . Defaults to `` False `` . or `` None `` if the session is linked to the browser session . The Note that inside `` script `` tags no escaping must take place , so make exactly the same way the `` flask `` script does . does not want the application to be loaded yet . After installation of Flask you will now find a : command : ` flask ` script installed takes advantage of the : file : ` _formhelpers.html ` template : messages . Note that the `` for `` loop iterates over the messages we passed It is strongly recommended to activate either `` X-Sendfile `` support in : param as_attachment : set to ` True ` if you want to send this file with the current user is stored as ` g.user ` and ` None ` if there is no-one `` `` '' This is `` True `` if the package bound object 's container has a # : special key `` None `` points to a list of tuples where the first item Here 's an example ` __init__.py ` : : context manager . In combination with the `` with `` statement it will bind a extension object , so one extension object can be used for multiple apps . Add the following lines to the top of your ` .wsgi ` file : : the logger switches to `` DEBUG `` mode now if debug is enabled . : file : ` templates/index.html ` . This no longer is the case . Now you need to name the template `` templates/admin/index.html `` . The tool will The two problematic values in the WSGI environment usually are ` REMOTE_ADDR ` To do this we can create a function and hook it into the : command : ` flask ` command # : This attribute can also be configured from the config with the `` DEBUG `` a big problem , just add a new file called ` runserver.py ` next to the inner `` Content-Disposition : attachment `` header to prevent that problem . Here is an example document ( put this also into : file : ` app.py ` , e.g . ) : : # : ` None ` for all requests . These functions are not allowed to modify The next file that is absolutely required is the : file : ` setup.py ` file which is only load the json data if the mimetype is : mimetype : ` application/json ` `` True `` . this will return ` False ` for all exceptions except for a bad request responds to `` POST `` requests , the actual form is shown on the Save the ` yourapplication.fcgi ` file somewhere you will find it again . This template extends the : file : ` layout.html ` template from above to display the # : registered here show up in the : command : ` flask ` command once the Say you have a specific URL that , when you sent `` POST `` requests to will For example you could have your main application run on `` / `` and your A fabfile is what controls what Fabric executes . It is named ` fabfile.py ` configuration file by looking up the ` YOURAPPLICATION_CONFIG ` environment The test client can be used in a ` with ` block to defer the closing down application is supposed to handle that as if a `` GET `` request was Most often , once you pull up a command prompt you want to be able to type : command : ` pip ` app = Flask ( __name__ ) that we are not actually using the views in : file : ` __init__.py ` and just it the WSGI ` SCRIPT_NAME ` or set the uwsgi modifier to make use of it : : `` /var/www/yourapplication/env `` to be a virtual environment . Furthermore necessary , but we are inside a `` script `` block here where different rules Then rename : file : ` yourapplication.py ` to : file : ` __init__.py ` . ( Make sure to delete `` `` '' Returns the value of the `` PROPAGATE_EXCEPTIONS `` configuration that did not fail and outside of `` DEBUG `` mode . By setting The `` flask `` script is nice to start a local development server , but ` ALLOWED_EXTENSIONS ` is the set of allowed file extensions . Then we add a privileges , and leave out ` sudo ` . ) ` True ` . : param silent : if set to ` True ` this method will fail silently `` OPTIONS `` is added automatically as method . can either let ` pip ` pull in the development version , or you can tell accessing URLs . By default , a route only answers to `` GET `` requests , but that implicitly true if either ` TESTING ` or # : location of the templates . `` None `` if templates should not be : param add_etags : set to `` False `` to disable attaching of etags . the same thread from this point onwards until the end of the `` with `` ` __init__.py ` file . That way each module can import it safely and the ` templates ` next to their location however but it can be enabled from ` OPTIONS ` handler should be application wide `` None `` shall be used . uses `` / `` if it 's ` None ` . does not want the application to be loaded yet . added a `` PROPAGATE_EXCEPTIONS `` configuration variable that can be Flask will look for templates in the ` templates ` folder . So if your but when ` with_categories ` is set to `` True `` , the return value will commands as above , but without the ` sudo ` prefix . arguments , using default values when `` None `` . This allows for calling run : ref : ` xss ` ) . Also make sure to disallow ` .php ` files if the server form to submit to your ` add_entry ` function and use ` POST ` as ` HTTP ` : param cache_timeout : the timeout in seconds for the headers . When ` None ` return `` Hello world '' # : preprocessors . The key ` None ` here is used for application wide decorators that want to customize the `` OPTIONS `` response on a per-view in combination with the `` with `` statement . # : This attribute can also be configured from the config with the ` DEBUG ` option to just patch the path in the `` .wsgi `` file before the import : : the `` with `` block , the `` assert `` would fail with an error because ` request ` can either let : command : ` pip ` pull in the development version , or you can tell `` DEBUG `` is true . key is set to `` True `` , and the user is redirected back to the ` show_entries ` does not work . You can either use : command : ` flask ` or `` python -m The object returned can also be used without the `` with `` statement your own environment . I usually create a project folder and a : file : ` venv ` be `` None `` . : data : ` ~flask.current_app ` when the given cache_timeout is ` None ` . If a `` `` '' This method has to be implemented and must either return `` None `` The `` flask `` script can be run with `` -- debug `` or `` -- no-debug `` to to add a script statement to the bottom of your `` < body > `` to load jQuery : this function below the ` connect_db ` function in : file : ` flaskr.py ` : : In case the `` python -m flask `` fails or `` flask `` does not exist , the `` SERVER_NAME `` config key . This key is now also used to set # : `` None `` for all requests . These functions are not allowed to modify downloaded with : command : ` easy_install ` or : command : ` pip ` . If you add a Flask extension the ` with ` block , the ` assert ` would fail with an error because ` request ` Normally you would use the `` with `` statement to make this request object case : file : ` views.py ` depends on : file : ` __init__.py ` ) . Be advised that this is a not exposing all valid methods in the `` Allow `` header . : exc : ` KeyError ` because users might change the URL and presenting them a 400 : param force : if set to `` True `` the mimetype is ignored . an ` __init__.py ` file inside ) or a standard module ( just a ` .py ` file ) . : file : ` yourapplication.py ` and you are not using a module , but a : ref : ` package ` setup.py ` file ( : ref : ` distribute-deployment ` ) . This context can be used in two ways . Either with the `` with `` statement This could be a file named `` autoapp.py `` with these contents : : Given a : file : ` hello.py ` file with the application in it named `` app `` this is decorator on top ) have to be imported in the : file : ` __init__.py ` file . : param instance_relative_config : if set to ` True ` relative filenames the ` static ` folder are available to users of the application via ` HTTP ` . Normally you would use the ` with ` statement to make this request object ` True ` if the signaling system is available . This is the case : return : bool . ` True ` if able to load config , ` False ` otherwise . If : meth : ` open_session ` returns `` None `` Flask will call into implicitly true if either `` TESTING `` or do n't have to deal with that . It will also make sure that ` HEAD ` requests your module and it will be available at `` /static `` on the application . method which will return ` True ` if the data validates , ` False ` mimetype if : mimetype : ` text/javascript ` is defined as content type in the script `` POST `` or `` PUT `` request . Each file is stored as the data is submitted via the HTTP `` POST `` method and The file has to be stored on the filesystem as : file : ` static/style.css ` . never compare something with `` True `` or `` False `` ( for example never signal , pass `` self `` as sender . If you are emitting a signal from a random the data is submitted via the HTTP ` POST ` method and just listens for `` GET `` ( and implicitly `` HEAD `` ) . In case the `` python -m flask `` fails or : command : ` flask ` does not exist , This context can be used in two ways . Either with the ` with ` statement this : : file : ` yourapplication/admin/templates/admin/index.html ` . of methods this rule should be limited to ( ` GET ` , ` POST ` # : the blueprint this function is active for , `` None `` for all requests . Setting `` use_debugger `` to `` True `` without being in debug mode : param add_debug_option : adds the default `` -- debug `` option . set-cookie behavior . If set to `` True `` a permanent session will be To run the application you can either use the : command : ` flask ` command or function returns ` True ` then the teardown handlers will not be configuration setups . : meth : ` ~flask.Config.from_envvar ` can help achieve this . decorator for the main script . It accepts a : option : ` -- config ` option and ` DEBUG ` is true . interpreter . Make sure to not call your application : file : ` flask.py ` because this their : file : ` setup.py ` files . # a tuple of only `` GET `` as default . `` `` '' Returns ` True ` if autoescaping should be active for the given The : option : ` -- debug ` flag enables or disables the interactive debugger . * Never : file : ` show_entries.html ` template and return the rendered one : : configuration file . Flask allows you to import multiple configurations and it : return : bool . `` True `` if able to load config , `` False `` otherwise . ` True ` if the session object detected a modification . Be advised and : command : ` python ` which will run those things , but this might not automatically happen delete a user 's profile ( say `` http : //example.com/user/delete `` ) . If an dictionary but with ` use_dot_notation ` set to ` True ` you can use your in combination with the ` with ` statement to activate a request context folders like : file : ` static ` or : file : ` templates ` are not installed for you . The `` POST `` transmitted in a `` POST `` or `` PUT `` request ) you can use the `` GET `` address can be changed via `` SERVER_NAME `` configuration variable which If : meth : ` open_session ` returns ` None ` Flask will call into takes advantage of the ` _formhelpers.html ` template : development server . The best one is the : command : ` flask ` command line utility `` `` '' Returns the value of the `` PRESERVE_CONTEXT_ON_EXCEPTION `` # : for some backends this will always be `` True `` , but some backends will Here is an example model ( put this into : file : ` models.py ` , e.g . ) : : to the current context for the duration of the ` with ` block . combination with the ` with ` statement because the request is only bound def my_index ( ) : # : A dictionary of all registered error handlers . The key is ` None ` sessions are refreshed . If set to `` True `` web . Because the folder is called : file : ` static ` here it will be available at # : `` SESSION_COOKIE_NAME `` configuration key . Defaults to `` 'session ' `` in combination with the ` with ` statement . : file : ` yourapplication ` folder with the following contents : : For example if your application is defined in ` yourapplication/app.py ` in which case ` X-Sendfile ` might not work and Do n't forget that even if you enlist them in your : file : ` MANIFEST.in ` file , they added support for ` with ` block usage for the client . : param instance_relative_config : if set to `` True `` relative filenames are we not creating the configuration or ` .wsgi ` file on the server . So Setting `` use_debugger `` to ` True ` without being in debug mode added support for `` with `` block usage for the client . python 's `` -m `` switch with Flask : : Now it is possible to create a database with the : command : ` flask ` script : : python 's : option : ` -m ` switch with Flask : : The test client can be used in a `` with `` block to defer the closing down `` `` '' This method is called to create the default ` OPTIONS ` response . Similar to ` POST ` but the server might trigger the store procedure ( ` flaskr_tests.py ` ) and create a unittest skeleton there : : `` application/json `` or `` application/ * +json `` . Here 's the HTML code needed for our little application ( ` index.html ` ) . The next file that is absolutely required is the ` setup.py ` file which is `` True `` if the session object detected a modification . Be advised just listens for ` GET ` ( and implicitly ` HEAD ` ) . raise a : exc : ` TypeError ` ) . # : ` None ` here is used for application wide and return ` None ` . # : the blueprint this function is active for , ` None ` for all requests . And then when you want to render the template , use : file : ` admin/index.html ` as decorator on top ) have to be imported in the ` __init__.py ` file . parameter will be `` None `` ) or an exception happened in which case the error signal , pass ` self ` as sender . If you are emitting a signal from a random : command : ` pip ` with root privileges : : development server . The best one is the `` flask `` command line utility it is not `` None `` , which can return a string to use as the result of not exposing all valid methods in the ` Allow ` header . : param cache_timeout : the timeout in seconds for the headers . When `` None `` web . Because the folder is called `` static `` here it will be available at Most often , once you pull up a command prompt you want to be able to type `` pip `` the `` with `` statement to bind the context . Everything that is called from To run your application you need a ` yourapplication.wsgi ` file . This file standard Python tools like `` pip `` or `` easy_install `` : : A basic ` setup.py ` file for a Flask application looks like this : : : file : ` setup.py ` file . This file lists all the files that should be added to you have to modify your `` .wsgi `` file slightly . get an attribute or `` None `` ( or the second argument ) if it 's not set . To run the application you can either use the `` flask `` command or example.com/yourapplication.fcgi/news/ . There are few ways to configure : param silent : if set to `` True `` this method will fail silently # : The testing flag . Set this to ` True ` to enable the test mode of ` yourapplication.py ` and you are not using a module , but a : ref : ` package click finds and executes the Flask application . If you use the : command : ` flask ` and return `` None `` . with the contents of the file the : envvar : `` YOURAPPLICATION_SETTINGS `` app.url_map.add ( Rule ( '/ ' , endpoint='index ' ) ) have to figure out how to calculate ` PATH_INFO ` and ` SCRIPT_NAME ` : : and `` HTTP_HOST `` . You can configure your httpd to pass these headers , or you to find it . Here an example ` exampleapp.py ` file that creates such If you are on Windows and do n't have the : command : ` easy_install ` command , you must with `` |safe `` if you intend to use it inside `` script `` tags unless and `` python `` which will run those things , but this might not automatically happen your app to be available , works too but the ` ScriptAlias ` directive wo n't : param add_etags : set to ` False ` to disable attaching of etags . Most importantly the extension must be shipped with a : file : ` setup.py ` file and this function below the ` connect_db ` function in ` flaskr.py ` : : transmitted in a ` POST ` or ` PUT ` request ) you can use the function returns `` True `` then the teardown handlers will not be `` True `` if the signaling system is available . This is the case to `` True `` to directly emit an `` X-Sendfile `` header . This however also returns ` True ` if `` TRAP_HTTP_EXCEPTIONS `` is set to ` True ` . parsed JSON data . Otherwise this will be ` None ` . was linked to `` DEBUG `` alone and is now linked to either `` DEBUG `` or So now the question is , where do the ` application.wsgi ` and development which is why from Flask 1.0 onwards the `` flask `` method is ` yourapplication ` folder with the following contents : : present in the session and ` True ` ) . Added support for non-with statement usage and `` with `` statement parsed JSON data . Otherwise this will be `` None `` . of methods this rule should be limited to ( `` GET `` , `` POST `` you . What you should do , is to create a : file : ` MANIFEST.in ` file next to your parameter will be ` None ` ) or an exception happened in which case the error `` ALLOWED_EXTENSIONS `` is the set of allowed file extensions . Then we add a or ` PUT ` requests . Please keep in mind that file uploads will not environ `` werkzeug.request `` will be `` None `` after the response was It can then be used with the : command : ` flask ` command : : * * installation manager * * : ` easy_install ` , which comes with distribute 4 . `` $ .getJSON ( url , data , func ) `` sends a ` GET ` request to ` url ` and will form can submit to the server are `` GET `` and `` POST `` . But with JavaScript environ `` werkzeug.request `` will be ` None ` after the response was names ` templates ` and ` static ` respectively . While this can be changed you configuration file . Flask allows you to import multiple configurations and it type ` application/xhtml+xml ` , but Internet Explorer refuses to read files Given a `` hello.py `` file with the application in it named `` app `` this is is the `` -- debug `` parameter to the `` flask `` command : : For the : command : ` flask ` script to work , an application needs to be discovered . configuration setups . : meth : ` ~flask.Config.from_envvar ` can help achieve this . key is set to ` True ` , and the user is redirected back to the ` show_entries ` `` True `` if the request was triggered via a JavaScript The : command : ` flask ` script can be run with : option : ` -- debug ` or : option : ` -- no-debug ` to `` 'flask._preserve_context ' `` to `` True `` on the WSGI environment the added `` TESTING `` switch that can activate unittesting helpers . to ( ` GET ` , ` POST ` etc. ) . By default a rule Here 's an example ` _formhelpers.html ` template with such a macro : Then you just have to add a separate ` config.py ` file and export The : command : ` flask ` script is nice to start a local development server , but etc. ) . By default a rule just listens for ` GET ` ( and ` PUT ` # : happened when matching , this will be `` None `` . is `` None `` , the whole pair is skipped . In case blueprints are active : param _external : if set to `` True `` , an absolute URL is generated . Server the question comes up what ` self ` points to . The way this works is that `` `` '' Returns the value of the ` PROPAGATE_EXCEPTIONS ` configuration as filter called `` |tojson `` in Jinja2 . Note that inside ` script ` configuration file by looking up the `` YOURAPPLICATION_CONFIG `` environment absence of an application the : command : ` flask ` script is still operational on a specification . Likewise , as of Flask 0.6 , `` OPTIONS `` is implemented for you or ` None ` if the session is linked to the browser session . The ` yourapplication.cgi ` : : `` `` '' This attribute is set to ` True ` if the application started At the end of the ` with ` block the teardown handles will be executed host being set from ` X-Forwarded-Host ` and the remote address from 2 . Upload a new : file : ` application.wsgi ` file to the server and the ` show_entries.html ` template and return the rendered one : : Here an example ` app.py ` module for your application : : `` `` '' This attribute is set to `` True `` if the application started : param add_app_option : adds the default `` -- app `` option . This gets ( `` FLASK_APP `` ) or the `` -- app `` / `` -a `` parameter . It should be the A : class : ` ~werkzeug.datastructures.MultiDict ` with the parsed form data from `` POST `` is the : option : ` -- debug ` parameter to the : command : ` flask ` command : : 1 . Create the directory structure in `` /var/www `` : : that we are not actually using the views in ` __init__.py ` and just in the body of the ` with ` block will now be recorded in the ` templates ` # : The default mixin implementation just hardcodes `` True `` in . a cleaner solution would be to create a separate ` .ini ` or ` .py ` file and : param cache : if set to `` True `` the parsed JSON data is remembered If you want to open the : file : ` schema.sql ` file you would do the but when ` with_categories ` is set to ` True ` , the return value will : param conditional : set to ` True ` to enable conditional responses . # : ` SECRET_KEY ` configuration key . Defaults to ` None ` . If you want to use the : command : ` easy_install ` command to upgrade your Flask ( e.g : file : ` C : \Python27 ` ) , then go to : file : ` Tools ` , then : file : ` Scripts ` ; then find the do n't have to deal with that . It will also make sure that `` HEAD `` requests # : A dictionary of all registered error handlers . The key is `` None `` Using ` Flask-SQLAlchemy < http : //pythonhosted.org/Flask-SQLAlchemy/ > ` _ , : param silent : set to `` True `` if you want silent failure for missing : data : ` ~flask.current_app ` when the given cache_timeout is `` None `` . If a ` include_package_data ` tells distribute to look for a : file : ` MANIFEST.in ` file : param _external : if set to ` True ` , an absolute URL is generated . Server commands as above , but without the : command : ` sudo ` prefix . While the most common way is to use the `` flask `` command , you can also need to map the endpoint as defined in the : class : ` ~werkzeug.routing.Rule ` your module and it will be available at ` /static ` on the application . location where it 's expected ( eg : : file : ` /var/www/yourapplication ` ) . ` True ` if the session is new , ` False ` otherwise . application . In short , the : command : ` flask ` command did not exist , and : file : ` setup.py ` script with the ` install ` parameter . It will install your Fixed an issue where the default ` OPTIONS ` response was binds the application to `` /yourapplication `` . If you want the application to sooner or later will replace : command : ` easy_install ` which does more than just # : The debug flag . Set this to ` True ` to enable debugging of the In HTML the ` script ` tag is declared ` CDATA ` which means that entities ` yourapplication ` inside the existing one and move everything below it . ` X-Forwarded-For ` : : behavior of `` OPTIONS `` responses . # : ` USE_X_SENDFILE ` configuration key . Defaults to ` False ` . check that you can now just type `` python `` to bring up the interpreter . `` TESTING `` . to all servers and install it there . Thanks to the ` setup.py ` file we This configuration binds the application to `` /yourapplication `` . If you want Starting with Flask 0.6 , ` OPTIONS ` is implicitly folders like ` static ` or ` templates ` are not installed for you . The `` `` '' Read-only view of the ` MAX_CONTENT_LENGTH ` config key . '' '' '' decorator for the main script . It accepts a `` -- config `` option and the ` UPLOAD_FOLDER ` the user might have the ability to modify a file on First we add the imports in ` flaskr.py ` : : first in a separate file otherwise the `` flask `` command wo n't be able Put the following templates into the : file : ` templates ` folder : set to `` False `` a ` set-cookie ` header is : file : ` templates ` next to their location however but it can be enabled from to ( `` GET `` , `` POST `` etc. ) . By default a rule template named ` _cider.html ` with the following contents : added a ` PROPAGATE_EXCEPTIONS ` configuration variable that can be `` True `` if the session is new , `` False `` otherwise . return `` Hello world '' installation , make sure to pass it the `` -U `` parameter : : # : The default mixin implementation just hardcodes ` True ` in . Say you have a specific URL that , when you sent ` POST ` requests to will This template , which we 'll call `` layout.html `` , defines a simple HTML skeleton the : file : ` static ` folder are available to users of the application via HTTP . of the context until the end of the `` with `` block . This is useful if only load the json data if the mimetype is `` application/json `` The `` -a `` argument to `` flask `` is the name of the module to import . In : mimetype : ` application/json ` or : mimetype : ` application/ * +json ` . to use it inside `` script `` tags : This could be a file named : file : ` autoapp.py ` with these contents : : Added `` flask `` and the `` flask.cli `` module to start the local as well . Just create a folder called : file : ` static ` in your package or next to Starting with Flask 0.6 , `` OPTIONS `` is implicitly their ` setup.py ` files . standard Python tools like : command : ` pip ` or : command : ` easy_install ` : : ` application.cfg ` files come from ? context manager . In combination with the ` with ` statement it will bind a To explain all of this , here is an example : file : ` manage.py ` script that Flask will look for templates in the : file : ` templates ` folder . So if your It makes sense to have that in ` /var/www/yourapplication ` or something # : `` SECRET_KEY `` configuration key . Defaults to `` None `` . application . Just create a stylesheet called ` style.css ` in the ` static ` It can then be used with the `` flask `` command : : ` POST ` want to render a template called `` index.html `` which is specific to this as dependency to your : file : ` requirements.txt ` or : file : ` setup.py ` file they are option to just patch the path in the ` .wsgi ` file before the import : : In HTML the `` script `` tag is declared `` CDATA `` which means that entities things . With ` POST ` that would not be possible because it must only ( ` views.py ` ) but without any decorator : : Fixed an issue where the default `` OPTIONS `` response was text ( `` True `` gives a tuple , where `` False `` gives just the message text ) . For example you could have your main application run on ` / ` and your First we add the imports in : file : ` flaskr.py ` : : ` OPTIONS ` is added automatically as method . `` templates/index.html `` . This no longer is the case . Now you need Your setup code always goes into a file named : file : ` setup.py ` next to your will return ` None ` : : # : location of the templates . ` None ` if templates should not be If it returns `` True `` for any exception the error handler for this : ref : ` xss ` ) . Also make sure to disallow `` .php `` files if the server ` GET ` implicitly `` HEAD `` ) . Starting with Flask 0.6 , `` OPTIONS `` is `` None `` is returned , an empty dictionary is assumed , if something else than to `` True `` to directly emit an ` X-Sendfile ` header . This however Your setup code always goes into a file named ` setup.py ` next to your accessing URLs . By default , a route only answers to ` GET ` requests , but that attribute to `` True `` yourself . Here an example : : reloading . Whenever something changes the `` .wsgi `` file , ` mod_wsgi ` will `` `` '' Returns `` True `` if autoescaping should be active for the given ( : file : ` views.py ` ) but without any decorator : : # : configuration key . Defaults to ` False ` . installation , make sure to pass it the : option : ` -U ` parameter : : falls back to another application if the creator function returns `` None `` : : your JSON file . The browser will totally ignore the : mimetype : ` application/json ` interpreter . Make sure to not call your application ` flask.py ` because this the ` Host ` header to figure out the subdomain one simply looks at the : command : ` flask ` script . When the command executes Flask will automatically the test request context leaves the ` with ` block . If you do want the `` `` '' Read-only view of the `` MAX_CONTENT_LENGTH `` config key . '' '' '' The file has to be stored on the filesystem as `` static/style.css `` . @ app.endpoint ( 'index ' ) sessions are refreshed . If set to ` True ` And this is what ` views.py ` would look like : : messages . Note that the ` for ` loop iterates over the messages we passed also returns `` True `` if `` TRAP_HTTP_EXCEPTIONS `` is set to `` True `` . that did not fail and outside of ` DEBUG ` mode . By setting explicitly set to `` None `` this is Then rename ` yourapplication.py ` to ` __init__.py ` . ( Make sure to delete The : command : ` flask ` command line script ( : ref : ` cli ` ) is strongly recommende for `` `` '' This method is called to create the default `` OPTIONS `` response . # : `` PERMANENT_SESSION_LIFETIME `` configuration key . Defaults to : mimetype : ` text/html ` they are emitting is not very useful for API consumers . a big problem , just add a new file called : file : ` runserver.py ` next to the inner status code and a `` text/html `` mimetype . The logic that Flask applies to `` False `` . be using the : command : ` flask ` command line script 's `` runserver `` Note that inside ` script ` tags no escaping must take place , so make In this case , a file called ` .htaccess ` , sitting in the public directory you want # : special key ` None ` points to a list of tuples where the first item ` UPLOAD_FOLDER ` is where we will store the uploaded files and the handler should be application wide ` None ` shall be used . `` OPTIONS `` to a view function . This is possible with this decorator . For example : : raise a `` TypeError `` ) . in combination with the `` with `` statement to activate a request context mimetype if `` text/javascript `` is defined as content type in the script does not work . You can either use `` flask `` or `` python -m The `` flask `` command line script ( : ref : ` cli ` ) is strongly recommende for behavior of ` OPTIONS ` responses . So now the question is , where do the : file : ` application.wsgi ` and will use the setting defined in the last import . This enables robust # a tuple of only ` GET ` as default . to the current context for the duration of the `` with `` block . If set to ` True ` the session lives for 3 . Create a new Apache config for ` yourapplication ` and activate it . dictionary but with ` use_dot_notation ` set to `` True `` you can use your with the contents of the file the : envvar : ` YOURAPPLICATION_SETTINGS ` The : meth : ` flask.Flask.run ` method now accepts `` None `` for ` host ` and ` port ` case ` views.py ` depends on ` __init__.py ` ) . Be advised that this is a ` False ` it will only be modified if the session actually modifies . Added support for non-with statement usage and ` with ` statement If set to `` True `` the session lives for implicitly ` HEAD ` ) . Starting with Flask 0.6 , ` OPTIONS ` is : param add_debug_option : adds the default : option : ` -- debug ` option . HTTP `` OPTIONS `` response . This can be useful when working with `` flask `` script . When the command executes Flask will automatically 1 . Create the directory structure in : file : ` /var/www ` : : `` PUT `` : file : ` __init__.py ` file . That way each module can import it safely and the backend interface on `` /backend `` : : to add a script statement to the bottom of your ` < body > ` to load jQuery : config from the same file , in : file : ` flaskr.py ` : : behavior for ` OPTIONS ` responses . as filter called `` |tojson `` in Jinja2 . Note that inside `` script `` with `` |safe `` if you intend to use it inside ` script ` tags unless default is 31 days . If set to ` False ` ( which is the default ) the ` setup.py ` file . This file lists all the files that should be added to : file : ` /var/www/yourapplication ` ) and make sure that ` yourapplication ` and all to find it . Here an example : file : ` exampleapp.py ` file that creates such Make sure to activate watching for changes of the ` .wsgi ` file so Here the : file : ` register.html ` template for the function we used above which to name the template : file : ` templates/admin/index.html ` . The tool will This will enable the debugger , the reloader and then start the server on your own environment . I usually create a project folder and a ` venv ` never compare something with ` True ` or ` False ` ( for example never Here 's an example : file : ` _formhelpers.html ` template with such a macro : arguments , using default values when ` None ` . This allows for calling run exactly the same way the : command : ` flask ` script does . * * installation manager * * : : command : ` easy_install ` , which comes with distribute it the WSGI `` SCRIPT_NAME `` or set the uwsgi modifier to make use of it : : Similar to `` POST `` but the server might trigger the store procedure get an attribute or ` None ` ( or the second argument ) if it 's not set . all ` .pyc ` files first , otherwise things would most likely break ) set to ` False ` a ` set-cookie ` header is binds the application to ` /yourapplication ` . If you want the application to # : for some backends this will always be ` True ` , but some backends will combination with the `` with `` statement because the request is only bound","['CHANGES', 'docs/api.rst', 'docs/blueprints.rst', 'docs/cli.rst', 'docs/config.rst', 'docs/deploying/cgi.rst', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/deploying/uwsgi.rst', 'docs/deploying/wsgi-standalone.rst', 'docs/extensiondev.rst', 'docs/extensions.rst', 'docs/foreword.rst', 'docs/htmlfaq.rst', 'docs/installation.rst', 'docs/patterns/apierrors.rst', 'docs/patterns/appdispatch.rst', 'docs/patterns/appfactories.rst', 'docs/patterns/caching.rst', 'docs/patterns/celery.rst', 'docs/patterns/distribute.rst', 'docs/patterns/fabric.rst', 'docs/patterns/fileuploads.rst', 'docs/patterns/flashing.rst', 'docs/patterns/jquery.rst', 'docs/patterns/lazyloading.rst', 'docs/patterns/mongokit.rst', 'docs/patterns/packages.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/templateinheritance.rst', 'docs/patterns/viewdecorators.rst', 'docs/patterns/wtforms.rst', 'docs/quickstart.rst', 'docs/reqcontext.rst', 'docs/security.rst', 'docs/server.rst', 'docs/shell.rst', 'docs/signals.rst', 'docs/styleguide.rst', 'docs/templating.rst', 'docs/testing.rst', 'docs/tutorial/css.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/dbinit.rst', 'docs/tutorial/folders.rst', 'docs/tutorial/setup.rst', 'docs/tutorial/templates.rst', 'docs/tutorial/views.rst', 'docs/upgrading.rst', 'docs/views.rst', 'examples/flaskr/README', 'examples/minitwit/README', 'flask/app.py', 'flask/blueprints.py', 'flask/cli.py', 'flask/config.py', 'flask/ctx.py', 'flask/helpers.py', 'flask/json.py', 'flask/sessions.py', 'flask/wrappers.py']",Merge pull request # 1240 from defuz/docs-style-fix-2
517,70a33ed49bdc47cdb8e3af923ae315d63f406f0c,2014-11-03 18:48:31+01:00,"Whenever the context is destroyed the database connection will be application context ( which is always true if there is a request in flight ) context is destroyed the database connection will be terminated . or create an application context itself . At that point the `` get_db `` Now , to use the database , the application must either have an active `` get_db `` function can be used to get the current database connection . in flight ) or to create an application context itself . At that point the an active application context ( which is always true if there is a request terminated . function can be used to get the current database connection . Whenever the All the application needs to do in order to now use the database is have",['docs/patterns/sqlite3.rst'],Merge pull request # 1235 from flowerhack/master
518,54def6265767f1ab134c75b18bd7c7a67a176a1d,2014-11-03 11:00:38+01:00,"If you can not set ScriptAlias , for example on an shared web host , you can use If you can not set ScriptAlias , for example on a shared web host , you can use These processes will be managed by Apache . If you 're using an standalone that your webserver user is ` www-data ` : : Since Nginx and others do not load FastCGI apps , you have to do it by A basic Flask FastCGI configuration for nginx looks like this : : that your web server user is ` www-data ` : : Since nginx and others do not load FastCGI apps , you have to do it by FastCGI deployments tend to be hard to debug on most webservers . Very Relative paths being used . Do n't rely on the current working directory . A basic flask FastCGI configuration for nginx looks like this : : These processes will be managed by Apache . If you 're using a standalone FastCGI deployments tend to be hard to debug on most web servers . Very Relative paths being used . Do n't rely on the current working directory",['docs/deploying/fastcgi.rst'],Merge pull request # 1234 from Winnetou/patch-2
519,a1b273658da6b8ec1d8106d30dfc05e1c9542406,2014-11-02 20:46:48+01:00,"can be configured with the new `` TEMPLATES_AUTO_RELOAD `` config key . app.config [ 'DEBUG ' ] = True original file only in debug mode . the template source and reload it # debug is True , config option is None app = flask.Flask ( __name__ ) assert app.debug is False or self.config [ 'TEMPLATES_AUTO_RELOAD ' ] # debug is False , config option is True assert app.jinja_env.auto_reload options [ 'auto_reload ' ] = self.debug this key to `` False `` . This option does not templates will be reloaded only if the application is running in else : assert app.config [ 'TEMPLATES_AUTO_RELOAD ' ] is None # debug is False , config option is None time it is requested and reloads it if 'TEMPLATES_AUTO_RELOAD ' : None , assert not app.jinja_env.auto_reload Templates are no longer automatically reloaded outside of debug mode . This assert app.jinja_env.auto_reload is True affect debug mode . assert app.config [ 'TEMPLATES_AUTO_RELOAD ' ] assert app.jinja_env.auto_reload is False app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = True necessary . But disk I/O is costly and it may `` TEMPLATES_AUTO_RELOAD `` Whether to check for modifications of debug mode . For higher performance it ’ s possible to disable that . `` TEMPLATES_AUTO_RELOAD `` Flask checks if template was modified each be viable to disable this feature by setting `` None `` which means that Flask checks options [ 'auto_reload ' ] = self.debug \ # debug is True , config option is False # debug is False , config option is False # debug is True , config option is True automatically . By default the value is Added `` TEMPLATES_AUTO_RELOAD `` config key . If disabled the if self.config [ 'TEMPLATES_AUTO_RELOAD ' ] is not None : 'TEMPLATES_AUTO_RELOAD ' : True , app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = False options [ 'auto_reload ' ] = self.config [ 'TEMPLATES_AUTO_RELOAD ' ]","['CHANGES', 'docs/config.rst', 'flask/app.py', 'tests/test_templating.py']",Merge pull request # 1222 from defuz/templates_auto_reload-eq-none
520,84efebd6be3809388160e8654d0fccc9ce0b2395,2014-10-27 18:31:33+01:00,"since fixed but might require some changes in your test suites if you you can access it using this URLs : # memory . This is usually only a problem in test suite since this : param source : the source code of the template to be `` `` '' Special subclass of the : class : ` AppGroup ` group that supports 'simple_template.html ' , # should render this content = fd.read ( ) # Read and process the file content ... falls silently back to a noop # features that support `` relative '' URLs . assert flask._app_ctx_stack.top is None [ 'no_template.xml ' , # should skip this one a folder on a filesystem . Accessing it without a trailing slash will cause falls silently back to a noop . you can access it using this urls : assert flask._app_ctx_stack.top == None `` `` '' Baseclass for sessions based on signed cookies . '' '' '' on the filesystem , can be used by extensions to improve debugging # Core signals . For usage examples grep the source code or consult # Core signals . For usage examples grep the sourcecode or consult The `` : ref : ` flask-license ` `` applies to all the source code shipped as content = fd.read ( ) # Read and process the file content ... : param source : the sourcecode of the template to be since fixed but might require some changes in your testsuites if you some very advanced usecases for which it makes sense to create an # features that support `` relative '' urls . [ 'no_template.xml ' , # should skip this one If you want the full source code in advance or for comparison , check out # the baseclass or another subclass of a base method view # if we know the file modification date , we can store it as the If you want the full sourcecode in advance or for comparison , check out some very advanced use cases for which it makes sense to create an # the base class or another subclass of a base method view The `` : ref : ` flask-license ` `` applies to all the sourcecode shipped as # the URLs external by default . on the file system , can be used by extensions to improve debugging a folder on a file system . Accessing it without a trailing slash will cause server and run the test suite . Ported testsuite to py.test . 'SEND_FILE_MAX_AGE_DEFAULT ' : 12 * 60 * 60 , # 12 hours Ported test suite to py.test . 'SEND_FILE_MAX_AGE_DEFAULT ' : 12 * 60 * 60 , # 12 hours `` `` '' Special subclass of the the : class : ` AppGroup ` group that supports sourcecode to the server and install it into a pre-existing # memory . This is usually only a problem in testsuite since this 'simple_template.html ' , # should render this # the urls external by default . server and run the testsuite . # if we know the file modification date , we can store it as `` `` '' Base class for sessions based on signed cookies . '' '' '' source code to the server and install it into a pre-existing","['CHANGES', 'docs/license.rst', 'docs/patterns/fabric.rst', 'docs/quickstart.rst', 'docs/tutorial/index.rst', 'docs/upgrading.rst', 'examples/blueprintexample/simple_page/templates/pages/layout.html', 'flask/app.py', 'flask/cli.py', 'flask/ctx.py', 'flask/helpers.py', 'flask/sessions.py', 'flask/signals.py', 'flask/templating.py', 'flask/views.py', 'tests/conftest.py', 'tests/test_appctx.py', 'tests/test_signals.py', 'tests/test_templating.py']",Merge pull request # 1225 from s3rvac/typo-and-cosmetic-fixes
521,fe2d75e1f41efb49472d625ec7c366e7c242a2c2,2014-10-25 12:54:59+02:00,"assert 'foo option 1 ' == foo_options [ 'foo_option_1 ' ] key = k dictionary should not include the namespace assert 'foo option 2 ' == foo_options [ 'foo_option_2 ' ] else : key = k [ len ( namespace ) : ] def get_namespace ( self , namespace , lowercase=True , trim_namespace=True ) : foo_options = app.config.get_namespace ( 'FOO_ ' , trim_namespace=False ) bar_options = app.config.get_namespace ( 'BAR_ ' , lowercase=False , trim_namespace=False ) assert 'bar stuff 1 ' == bar_options [ 'BAR_STUFF_1 ' ] if trim_namespace : def get_namespace ( self , namespace , lowercase=True ) : key = k [ len ( namespace ) : ] assert 2 == len ( foo_options ) assert 2 == len ( bar_options ) assert 'bar stuff 2 ' == bar_options [ 'BAR_STUFF_2 ' ] : param trim_namespace : a flag indicating if the keys of the resulting","['flask/config.py', 'tests/test_config.py']",Merge pull request # 1213 from defuz/config-patch
522,46918d3cebceb611e21bec3b13412f3d18b6509f,2014-10-19 19:53:26+02:00,"class TestRequestDeprecation ( object ) : assert len ( captured ) == 1 import pytest assert flask.request.module is None return 'OK ' app.testing = True import flask def test_request_module ( self , catch_deprecation_warnings ) : # XXX : deprecate property warn ( DeprecationWarning ( 'json is deprecated . ' from warnings import warn def test_request_json ( self , catch_deprecation_warnings ) : def index ( ) : `` `` '' Request.module is deprecated '' '' '' with catch_deprecation_warnings ( ) as captured : `` `` '' Request.json is deprecated '' '' '' 'Use get_json ( ) instead . ' ) , stacklevel=2 ) print ( flask.request.json ) c.post ( '/ ' , data= ' { `` spam '' : 42 } ' , content_type='application/json ' ) app = flask.Flask ( __name__ ) assert flask.request.json == { 'spam ' : 42 } c.get ( '/ ' ) c = app.test_client ( )","['flask/wrappers.py', 'tests/test_deprecations.py']",Merge pull request # 1206 from methane/deprecate-request.json
523,fa610a24ec326bbca01d6453548a1129178273ae,2014-10-18 16:20:50+02:00,and return ` None ` . and return ` False ` . : param silent : if set to ` False ` this method will fail silently : param silent : if set to ` True ` this method will fail silently,['flask/wrappers.py'],Merge pull request # 1208 from augiwan/patch-2
524,d76ca43a583cddec91e8cdd32a8210e6bfb1bd05,2014-10-07 13:09:13+02:00,"with app.test_client ( ) as c : rv = c.get ( '/ ' ) def record_teardown ( sender , * * kwargs ) : def test_appcontext_tearing_down_signal ( ) : app = flask.Flask ( __name__ ) 1 // 0 assert recorded == [ ( 'tear_down ' , { 'exc ' : None } ) ] try : flask.appcontext_tearing_down.disconnect ( record_teardown , app ) def index ( ) : assert rv.status_code == 500 flask.appcontext_tearing_down.connect ( record_teardown , app ) recorded.append ( ( 'tear_down ' , kwargs ) ) finally : recorded = [ ] assert recorded == [ ]",['tests/test_signals.py'],Merge pull request # 1196 from davide-ceretti/add-tearing-down-signal-unittest
525,60fcc05c4705ccafa80fb997dd4e908e56894030,2014-09-28 07:10:27+02:00,"This handy little function in combination with a row factory makes working easily . request ) . In Flask you can easily implement the opening of database connections on working with the database much more pleasant than it is by just using the an active application context ( which is always true if there is a request from the database to convert the result . For instance , in order to get raw cursor and connection objects . cursor and connection objects . dictionaries instead of tuples , this could be inserted into `` get_db `` : : demand , closing them when the context dies ( usually at the end of the In Flask you can implement the opening of database connections on demand All the application needs to do in order to now use the database is having dictionaries instead of tuples this could be inserted into `` get_db `` : : with the database much more pleasant than it is by just using the raw This handy little function , in combination with a row factory , makes and closing it when the context dies ( usually at the end of the request ) All the application needs to do in order to now use the database is have only opening the connection if truly necessary . If you want to use this an active application context ( which is always true if there is an request only open the connection if truly necessary . If you want to use this from the database to convert the result . For instance in order to get",['docs/patterns/sqlite3.rst'],Merge pull request # 1192 from nluchs/patch-3
526,a25ee7e060ba449f36daa1ba903ddd116b6422e3,2014-09-26 19:22:41+02:00,"will be created alongside if this is necessary . As a result , you can of a better solution . Since one of the pillar 's of Flask 's design is that The context is typically used to cache resources that need to be created ignore the existence of the application context unless you need it . context is an unnecessarily expensive operation in case there is no will be created alongside if this is necessary . As a result of that , you There are two ways to make an application context . The first one is implicit : whenever a request context is pushed , an application context request around , the application context was introduced . past a bunch of functionality was attached to the request context for lack past a bunch of functionality was attached to the request context in lack the application context was introduced . The context is typically used to cache resources on there that need to be on a per-request or usage case . For instance , database connections are request 's application reference . Since however creating such a request To make an application context there are two ways . The first one is the request 's application reference . Since creating such a request context is of a better solution . Since one of the pillars of Flask 's design is that an unnecessarily expensive operation in case there is no request around , implicit one : whenever a request context is pushed , an application context are destined to go there . When storing things on the application context destined to go there . When storing things on the application context can ignore the existence of the application context unless you need it . created on a per-request or usage case . For instance database connects",['docs/appcontext.rst'],Merge pull request # 1186 from llimllib/master
527,11fa387748314193e87c863c181f32c19dc3139a,2014-09-25 17:21:44+02:00,"uses epoll , it can handle thousands of simultaneous standing connections , .. _FriendFeed : http : //friendfeed.com/ http_server.listen ( 5000 ) from yourapplication import app server and tools that power ` FriendFeed ` _ . Because it is non-blocking and ` Tornado ` _ is an open source version of the scalable , non-blocking web from tornado.httpserver import HTTPServer Tornado http_server = HTTPServer ( WSGIContainer ( app ) ) IOLoop.instance ( ) .start ( ) from tornado.wsgi import WSGIContainer .. _Tornado : http : //www.tornadoweb.org/ from tornado.ioloop import IOLoop which means it is ideal for real-time web services . Integrating this service with Flask is straightforward : :",['docs/deploying/wsgi-standalone.rst'],Merge pull request # 1187 from bdarnell/patch-1
528,67bee6153396954d7c17d3a90dfd132bba157c36,2014-09-20 09:00:03+02:00,"# Mocks werkzeug.serving.run_simple method rv [ 'result ' ] = 'running on % s : % s ... ' % ( hostname , port ) def test_run_server_port ( monkeypatch ) : def run_simple_mock ( hostname , port , application , * args , * * kwargs ) : def test_run_defaults ( monkeypatch ) : rv = { } app = flask.Flask ( __name__ ) app.run ( ) hostname , port = 'localhost ' , 8000 app.run ( hostname , port , debug=True ) assert rv [ 'result ' ] == 'running on % s : % s ... ' % ( hostname , port ) rv [ 'result ' ] = 'running ... ' def run_simple_mock ( * args , * * kwargs ) : assert rv [ 'result ' ] == 'running ... ' import werkzeug.serving monkeypatch.setattr ( werkzeug.serving , 'run_simple ' , run_simple_mock )",['tests/test_basic.py'],Merge pull request # 1164 from pbu88/run_tests
529,4f5d3eab067f8821b2a69bfaa9be5ab1b04669b7,2014-09-18 15:37:43+02:00,You betcha . Run the ` test_flaskr.py ` file to see You betcha . Run the ` flaskr_tests.py ` file to see You betcha . Run the ` minitwit_tests.py ` file to You betcha . Run the ` test_minitwit.py ` file to,"['examples/flaskr/README', 'examples/minitwit/README']",Merge pull request # 1181 from kelvintaywl/examples/fix_readme
530,80283d6c590a5e54ee877813f33fb7bf3e02123d,2014-09-13 11:47:42+02:00,"If you just want one particular testcase to run you can flask/testsuite package . To run the tests use the ` -- verbose ` flag : tests/ folder . To run the tests use the ` run-tests.py ` file : $ python run-tests.py ` py.test ` testing tool : $ py.test provide it on the command line : $ python run-tests.py test_to_run If it 's not enough output for you , you can use the $ python run-tests.py -- verbose",['README'],Merge pull request # 1175 from pbu88/update_readme
531,bb94a612fddc66f8af8553b5ca5197b3a529b6e3,2014-09-12 21:54:59+02:00,"def test_flaskext_old_simple_import_module ( self ) : def test_basic_url_generation ( self ) : def index3 ( ) : assert res.status_code == 200 assert rv.data == b'True ' yield log rv = client.get ( '/ ' ) app.config [ 'TRAP_HTTP_EXCEPTIONS ' ] = True rv3 = c.get ( '/args_status ' ) def test_config_from_json ( self ) : assert rv.data == b ' < missing > ' url = flask.url_for ( 'foo.bar.baz.view ' ) def fire ( ) : rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) def test_uninstalled_package_paths ( modules_tmpdir , purge_module ) : self.assert_equal ( app.test_client ( ) .get ( '/ ' ) .data , b'Awesome ' ) return 'request ' if flask.request.method == 'POST ' : assert b'the message by foo ' in rv.data buffer.append ( exception ) msg = str ( e ) ~~~~~~~~~~~~ assert index ( ) == 'Hello World ! ' expected_max_age = 3600 assert macro ( 'World ' ) == 'Hello World ! ' frontend = flask.Blueprint ( 'frontend ' , __name__ ) TEST_KEY='foo ' @ app.route ( '/test_filters/ ' ) assert isinstance ( app.config , Config ) flask.session [ 'dt ' ] = now b'and can login now ' in rv.data # bar 's timeline should just show bar 's message from werkzeug.routing import Submount , Rule if x == y : self.assert_equal ( rv2.mimetype , 'text/plain ' ) self.assert_equal ( 2 , len ( foo_options ) ) def from_unicode ( ) : fire ( ) self.add_message ( 'the message by bar ' ) raise LookupError ( 'could not find test case for `` % s '' ' % name ) def test_make_response_with_response_instance ( self ) : sideend = flask.Blueprint ( 'sideend ' , __name__ ) def from_status_tuple ( ) : resp.headers [ ' X-Parachute ' ] = 'awesome ' app.config.update ( SERVER_NAME='localhost.localdomain:443 ' ) def test_custom_config_class ( self ) : if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == unexpected_max_age : env = flask._request_ctx_stack.top.request.environ flask.session.permanent = permanent assert called == [ None ] return 'Hello World ! ' self.assert_in ( 'path=/bar ' , rv.headers [ 'set-cookie ' ] .lower ( ) ) class Flask ( flask.Flask ) : return client.post ( '/login ' , data=dict ( import unimportable self.assert_equal ( leaks , [ ] ) as part of Werkzeug . def test_custom_app_ctx_globals_class ( ) : else : def test_config_missing_json ( self ) : return all_tests [ 0 ] assert 2 == len ( foo_options ) assert app.instance_path == \ assert flask.url_for ( 'foo ' ) == '/foo/ ' with pytest.raises ( TemplateNotFound ) as excinfo : `` `` '' Make sure login and logout works '' '' '' self.assert_equal ( str ( e ) , `` the server name provided `` + \ def handle_my_exception ( e ) : `` `` '' Test that messages work '' '' '' app.secret_key = 'testkey ' password=password @ app.route ( '/other ' ) 'context_template.html ' ] , testname.startswith ( name + ' . ' ) : message , category = recorded [ 0 ] c.get ( '/test_filters/ ' ) called.append ( 1 ) class BetterLoader ( unittest.TestLoader ) : suite.addTest ( unittest.makeSuite ( TemplatingTestCase ) ) assert 'This was submitted : `` index.txt '' ' in str ( e ) assert app.got_first_request modules_tmpdir_prefix , purge_module , app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = unexpected_max_age return flask.render_template ( 'template_test.html ' , value=False ) return { 'whiskey ' : 'Jameson ' } self.assert_equal ( flask._app_ctx_stack.top , None ) 'https : //localhost/ ' ) app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' self.assert_equal ( ctx.request.url , 'http : //example.com:1234/foo/ ' ) return flask.url_for ( '.index ' ) self.assert_equal ( lines , sorted_by_int ) def from_response_instance_status_tuple ( ) : # On PY3 we even have another one : ( self.assert_equal ( rv.data , b'dcba ' ) flask.url_for ( 'spam ' ) ' '' blueprintapp '' ' in text ) @ app.route ( '/forbidden ' ) '/bar/123 ' , endpoint='bar.123 ' , view_func=foo_foo_foo message = 'No module named \'missing_module\ '' if new_objects > self.old_objects : SECRET_KEY='foo ' , return 'Awesome ' rv = register ( client , 'meh ' , `` ) self.assert_equal ( rv [ 'm ' ] , flask.Markup ( 'Hello ! ' ) ) here = os.path.abspath ( os.path.dirname ( __file__ ) ) self.assert_true ( isinstance ( recorded [ 0 ] , ZeroDivisionError ) ) with self.assert_no_leak ( ) : assert category == 'notice ' buffer = [ ] return 'Hello % s ! ' % flask.request.args [ 'name ' ] assert b'Your message was recorded ' in rv.data self.ensure_clean_request_context ( ) return 42 app = flask.Flask ( __name__ ) @ bp.route ( '/foo ' , defaults= { 'baz ' : 42 } ) assert logger1.name == __name__ for x in range ( 10 ) : def finish1 ( exc ) : flask.Response ( `` ) , 400 ) def test_view_decorators ( self ) : app.register_blueprint ( blue ) } ) # to not negatively affect other tests . self.assert_equal ( rv , '42 ' ) self.assert_equal ( called , [ 1 , 2 , 3 , 4 , 5 , 6 ] ) 'context_template.html ' ] , pkgutil.get_loader = old_get_loader app.register_blueprint ( test ) assert oldext_simple.ext_id == 'oldext_simple ' flask.g.x = 42 'email ' : email , self.assert_equal ( rv.data , b'Foo ' ) self.assert_in ( os.path.join ( 'flask_broken ' , '__init__.py ' ) , next.tb_frame.f_code.co_filename ) class MiniTwitTestCase ( unittest.TestCase ) : title= ' < Hello > ' , assert c.get ( '/de/about ' ) .data == b'/de/ ' assert app.instance_path == str ( modules_tmpdir ) def test_before_first_request_functions ( self ) : def test_view_inheritance ( ) : def test_nosubdomain ( ) : assert 'gin ' in flask.request.form def test_blueprint_specific_user_error_handling ( self ) : def test_register ( self ) : client = app.test_client ( ) rv = c.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) return self.login ( username , password ) def test_message_recording ( self ) : rv = flask.url_for ( 'index ' ) except AssertionError as e : value=23 ) $ ( echo py $ TRAVIS_PYTHON_VERSION | tr -d . | sed -e 's/pypypy/pypy/ ' ) - $ REQUIREMENTS return getattr ( self.loader , name ) gc.collect ( ) self.assertFalse ( flask.g ) assert resp.headers [ ' X-Foo ' ] == ' a header ' @ self.app.route ( '/ ' , subdomain= ' < company_id > ' ) def test_nonascii_pathinfo ( self ) : def end_of_request ( exception ) : u'Hello World ' , with app.test_request_context ( '/ ' ) : def delete ( self ) : methods = [ 'GET ' , 'POST ' ] app.inject_url_defaults ( 'foo.bar.baz.view ' , values ) ] assert c.get ( '/1/bar ' ) .data == b'23 ' finally : assert resp.status_code == 500 def view ( company_id ) : return 'GET ' if PY2 : def test_add_template_global ( ) : print ( `` No problems found in sourcecode . '' ) reqctx = flask._request_ctx_stack.top.copy ( ) from main_app import app from flask.ext.oldext_simple import ext_id assert flask.url_for ( 'index ' , _external=True ) == \ bp.add_app_template_filter ( my_reverse , 'strrev ' ) self.assert_in ( 'path=/foo ' , rv.headers [ 'set-cookie ' ] .lower ( ) ) req = flask.request._get_current_object ( ) return flask.url_for ( 'myapp.frontend.frontend_index ' ) def get ( ) : def get ( self ) : with pytest.raises ( ZeroDivisionError ) : with app.test_request_context ( '/ ' , environ_overrides= { 'HTTP_HOST ' : 'localhost ' } ) : return dict ( foo=42 ) assert c.get ( '/ ' ) .data == b ' 1 ' rv = c.get ( '/forbidden ' ) self.assert_equal ( ext_id , 'newext_simple ' ) c.get ( '/exc ' ) self.assertIn ( x , y ) from flask.ext.newext_package import submodule @ app.route ( '/bar/123 ' , endpoint='123 ' ) assert 'after ' not in evts assert rv.mimetype == 'application/json ' 'email ' : email , return 'index for % s ' % user self.assert_equal ( type ( rv [ 'm ' ] ) , flask.Markup ) def test_index ( ) : def test_filters ( ) : app = flask.Flask ( __name__ ) def test_custom_config_class ( ) : out = StringIO ( ) self.assert_equal ( c.get ( '/foo ' ) .data , b'/en/about ' ) self.assert_equal ( c.get ( '/decorator ' ) .data , b'boom ' ) '/myview/create ' ) self.assert_equal ( options [ 'filename ' ] , 'index.txt ' ) def app_index ( ) : message = 'No module named missing_module ' add_to_path ( os.path.abspath ( os.path.join ( self.assert_false ( flask.has_request_context ( ) ) # we have to run this test in an isolated thread because if the def teardown_app ( error=None ) : frontend = flask.Blueprint ( 'myapp.frontend ' , __name__ ) def from_status_tuple ( ) : def test_url_generation ( ) : flask.flash ( u'Hello World ' ) request.addfinalizer ( sys.meta_path.pop ) # make sure we 're not leaking a request context since we are class LoggingTestCase ( FlaskTestCase ) : app.config.update ( got = [ ] return client `` `` '' Audits source code using PyFlakes for following issues : blinker = None raise Exception ( 'dummy ' ) assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' self.assert_false ( flask.current_app ) flask.request_finished.connect ( after_request_signal , app ) return '/test_handler/ ' new_objects = len ( gc.get_objects ( ) ) expected = '/login ' return flask.g.something , 404 # reloading must not add more hooks def test_no_escaping ( self ) : def backend_no ( ) : from werkzeug.routing import BuildError import flask.ext.broken return 42 assert rv.data.strip ( ) == b ' < h1 > Hello World ! < /h1 > ' assert not app.config.from_json ( 'missing.json ' , silent=True ) entry.startswith ( 'flaskext . ' ) or gc.disable ( ) assert rv2.headers [ ' X-Foo ' ] == 'Test ' def test_template_filter_with_template ( ) : def test_make_response ( ) : whatever = 42 self.assert_equal ( rv3.status_code , 400 ) for dir in dirs : self.assert_true ( exc_type is ImportError ) sys.path [ : ] = [ x for x in sys.path if not _samefile ( path , x ) ] return True rv = app.test_client ( ) .open ( '/ ' , method='OPTIONS ' ) self.assert_equal ( rv [ 't ' ] , ( 1 , 2 , 3 ) ) class MyFunctionException ( Exception ) : flaskr.app.config [ 'TESTING ' ] = True expected = dict ( page='login ' ) class FlaskTestCase ( unittest.TestCase ) : with app.test_client ( ) as c : def test_context_test ( self ) : from flask.testsuite import FlaskTestCase , catch_warnings flask.testsuite.helpers self.assert_equal ( submodule.__name__ , 'flaskext.oldext_package.submodule ' ) now = datetime.utcnow ( ) .replace ( microsecond=0 ) index2.provide_automatic_options = True app.url_map.converters [ 'list ' ] = ListConverter assert 'path=/ ' in cookie app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' `` server name from the WSGI environment ( 'foo.localhost ' ) '' ) t = Thread ( target=apprunner , args= ( config_key , ) ) def test_options_handling_disabled ( self ) : assert msg.endswith ( `` missing.json ' '' ) c.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) text = ' < p > Hello World ! ' return company_id @ app.url_value_preprocessor # helper functions app.config [ 'PERMANENT_SESSION_LIFETIME ' ] = 42 assert flask.url_for ( '123 ' ) == '/bar/123 ' self.assert_equal ( rv.data , b ' < h1 > Jameson < /h1 > ' ) @ app.route ( '/foo/ ' ) print ( 'Error : % s ' % e ) from flask.ext import newext_package sys.prefix = real_prefix def test_session_using_server_name_and_port ( ) : setup_path ( ) del sys.modules [ 'main_app ' ] Template functionality for entry in log : flask.session.permanent = is_permanent from flask.ext.newext_simple import ext_id monkeypatch.syspath_prepend ( installed_path ) self.assert_equal ( submodule.__name__ , 'flask_newext_package.submodule ' ) assert site_package.app.instance_path == \ rv = app.test_client ( ) .get ( '/ ' ) Tests the Flaskr application . blinker sys.modules.pop ( entry , None ) def test_session_special_types ( self ) : assert 'foo ' in flask.g { { session.test } } app.debug = True def test_template_test_with_name_and_template ( self ) : assert buffer == [ None ] 'password ' : password def index ( self , test= ' a ' ) : flask.got_request_exception.disconnect ( record , app ) @ app.route ( '/meh ' ) lowest : Werkzeug==0.7 def from_tuple ( ) : backend = flask.Blueprint ( 'backend ' , __name__ ) flask.g.bar = 42 return login ( client , username , password ) from threading import Thread def test_function ( ) : t.start ( ) os.path.join ( expected_prefix , 'var ' , import site_package modules_tmpdir.join ( 'var ' ) .join ( 'site_app-instance ' ) def index2 ( ) : run_test ( expect_header=False ) app.config [ 'SERVER_NAME ' ] = 'localhost:3000 ' rv = flask.make_response ( 'Awesome ' ) suite.addTest ( unittest.makeSuite ( JSONTestCase ) ) app.register_blueprint ( sideend ) sys.meta_path.pop ( ) self.assert_in ( 'Traceback ( most recent call last ) : ' , err ) return flask.url_for ( 'about ' ) return 'boom ' app.app_ctx_globals_class = CustomRequestGlobals with flask._request_ctx_stack.top : rv.addTest ( test ) app.secret_key = 'development-key ' self.assert_equal ( logger1.name , __name__ ) except DebugFilesKeyError as e : self.assert_equal ( flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) , def iter_suites ( ) : t.join ( ) def test_flaskext_old_package_import_submodule_function ( self ) : def assert_raises ( self , exc_type , callable=None , * args , * * kwargs ) : with app.app_context ( ) : self.assert_in ( 'http : //localhost/foo/ ' , str ( e ) ) assert flask.url_for ( 'foo ' ) == '/foo/ ' class MyFunctionException ( Exception ) : def test_add_template_global ( self ) : import threading rv = self.app.get ( '/foo/follow ' , follow_redirects=True ) environ [ 'SCRIPT_NAME ' ] = self.prefix class MyException ( Exception ) : def test_flaskext_old_package_import_submodule_function ( oldext_package ) : unexpected_max_age = 7200 message , category = recorded [ 0 ] self.assert_false ( app.got_first_request ) @ bp.app_template_filter ( 'strrev ' ) # Test Flask initialization with main module . def test_flaskext_old_package_import_normal ( oldext_package ) : return flask.request.files [ 'foo ' ] .filename def before_request ( ) : try : return 'Hello ' flask.session [ 'data ' ] = 'foo ' if 'installed_package ' in sys.modules : # After this failure we did not yet call the teardown handler foo_options = app.config.get_namespace ( 'FOO_ ' ) self.assert_false ( app.config.from_json ( 'missing.json ' , silent=True ) ) from flask.ext.newext_package import ext_id cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) rv = blueprint.send_static_file ( 'index.html ' ) app.config.from_mapping ( recorded = [ ] def test_template_test ( ) : def root ( ) : register_and_login ( client , 'foo ' , 'default ' ) assert b ' & lt ; test message 2 & gt ; ' in rv.data # fake package . Secondly we want to make sure that the flaskext self.testcase.fail ( 'Example code leaked ' ) def test_session_stored_last ( ) : class MyFlask ( flask.Flask ) : def test_reuse_client ( ) : def test_environ_defaults ( self ) : self.assert_equal ( messages [ 0 ] , ( 'message ' , u'Hello World ' ) ) return value.split ( ' , ' ) self.assert_equal ( flask.url_for ( 'sub ' , _external=True ) , 'http : //foo.localhost.localdomain:5000/ ' ) assert 'after ' not in evts assert 'http : //localhost/foo/ ' in str ( e ) def test_request_processing ( self ) : from flask._compat import StringIO `` 3.4 '' def test_session_using_server_name ( ) : run_test ( expect_header=False ) self.assert_equal ( rv.data , b '' ) self.assert_equal ( c.get ( '/de/about ' ) .data , b'/foo ' ) assert newext_package.__name__ == 'flask_newext_package ' Jinja2==2.4 def get ( self ) : rv = app.test_client ( ) .get ( '/ ' , 'http : //www.example.com:8080/test/ ' ) def teardown_request ( exc ) : app.config.from_object ( __name__ ) include Makefile CHANGES LICENSE AUTHORS flask.session [ 'data ' ] = 'foo ' def record ( sender , message , category ) : rv = c.get ( '/admin/index2 ' ) rv = client.get ( '/public ' ) def test_app_context_provides_current_app ( self ) : import tempfile resp = c.get ( '/ ' ) return resp self.assert_equal ( app.instance_path , here ) def index ( ) : permanent = False { { request.args.foo } } with pytest.raises ( ImportError ) : def test_url_processors ( ) : self.assert_equal ( repr ( flask.g ) , ' < LocalProxy unbound > ' ) def teardown_request1 ( exc ) : return 'backend says no ' , 403 def test_context_refcounts ( ) : class SignalsTestCase ( FlaskTestCase ) : pkg.join ( '__init__.py ' ) .write ( 'ext_id = `` newext_package '' ' ) self.assert_equal ( buffer , [ ] ) if name in ( 'archive ' , 'get_filename ' ) : bp = flask.Blueprint ( 'test ' , __name__ ) pytest.raises ( rv = c.get ( '/ ' ) class run_audit ( Command ) : bp.add_app_template_test ( is_boolean , 'boolean ' ) import os assert rv.data == b'test index ' messages = flask.get_flashed_messages ( ) assert flask.request rv = self.login ( 'user2 ' , 'wrongpassword ' ) from werkzeug.http import parse_set_header self.assert_equal ( rv.mimetype , 'application/json ' ) def test_installed_module_paths ( self ) : class Foo ( Exception ) : self.assert_equal ( calls , [ 'before-signal ' , 'before-handler ' , self.assert_equal ( rv.status_code , 403 ) resp = c.get ( '/ ' ) app.debug = False assert c.put ( '/ ' ) .status_code == 405 assert not rv.data # head truncates app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = False def new_function ( * args , * * kwargs ) : self.assert_equal ( c.get ( '/1/bar ' ) .data , b'23 ' ) flask.g.something = 'value ' `` X-Foo '' : `` Bar '' , def test_meta_path_loader_without_is_package ( self ) : return 'test index ' suite.addTest ( unittest.makeSuite ( FlaskSubclassingTestCase ) ) assert c.get ( '/bar/ ' ) .data == b'bar ' self.assert_equal ( rv [ ' b ' ] , b'\xff ' ) self.assert_equal ( app.test_client ( ) .get ( '/foo ' ) .data , b'Meh ' ) def foo_bar ( ) : self.assert_true ( 'vodka ' in flask.request.args ) assert not flask.request def common_object_test ( app ) : from flask.testsuite import FlaskTestCase def add_message ( client , text ) : def test_main_module_paths ( self ) : app.url_build_error_handlers.append ( handler ) flaskr.app.config [ 'TESTING ' ] = True import uuid import warnings def test_add_template_filter_with_name ( self ) : from config_package_app import app def test_flaskext_old_simple_import_normal ( self ) : 1 // 0 return False with app.test_client ( ) as c : resp.headers [ ' X-Parachute ' ] = 'awesome ' def test_full_url_request ( ) : assert 'must be absolute ' in str ( excinfo.value ) `` `` '' Helper function to logout '' '' '' foo_options = app.config.get_namespace ( 'FOO_ ' ) def assert_in ( self , x , y ) : @ app.route ( '/string ' ) ) , follow_redirects=True ) app.debug = True app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] = True return flask.render_template ( 'template_filter.html ' , value='abcd ' ) self.assert_in ( 'Session backend did not open a session ' , str ( e ) ) rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost:3000/ ' ) self.assert_equal ( cc.max_age , 10 ) assert rv.data == b'Blub ' @ app.route ( '/test/ ' ) # reraise ( ) adds a second frame so we need to skip that one too . rv = self.app.get ( '/foo ' ) nor the ` archive ` attribute . 'password ' : password def test_blueprint_specific_user_error_handling ( ) : def test_request_less_rendering ( self ) : self.assert_true ( req is flask.request._get_current_object ( ) ) def before2 ( ) : flask.appcontext_popped.disconnect ( record_pop , app ) assert value == 'attachment ' called.append ( 'request ' ) def foo_bar ( ) : def test_iterable_loader ( ) : self.assert_equal ( options [ 'filename ' ] , 'index.html ' ) assert b'test message 1 ' in rv.data assert newext_simple.__name__ == 'flask_newext_simple ' app = Flask ( __name__ ) def test_explicit_instance_paths ( modules_tmpdir ) : unittest.main ( ) templates = sorted ( app.jinja_env.list_templates ( ) ) `` server name from the WSGI environment ( 'localhost.localdomain ' ) '' Flaskr Tests os.path.join ( app.root_path , 'static/index.html ' ) ) register ( client , username , password ) self.assertIsInstance ( obj , cls ) return client.post ( '/register ' , data= { self.assert_equal ( got , [ 42 ] ) os.environ = env return '|'.join ( args ) flask.request_started.disconnect ( before_request_signal , app ) self.assert_equal ( len ( errors ) , 2 ) return flask.render_template ( 'simple_template.html ' , whiskey=42 ) assert len ( recorded ) == 1 self.assert_equal ( rv , ' '' \\u003c/script\\u003e '' ' ) flask.session [ 'value ' ] = flask.request.form [ 'value ' ] c.get ( '/fail ' ) templates = sorted ( app.jinja_env.list_templates ( ) ) { { config.DEBUG } } # Create new test client on each test to clean flashed messages . self.assert_equal ( len ( called ) , 1 ) assert rv.data == b ' < h1 > Jameson < /h1 > ' return 'internal server error ' , 500 '/static/index.html ' ) assert isinstance ( x , y ) , `` not isinstance ( % r , % r ) '' % ( x , y ) return 'test index ' assert calls == [ 'before-signal ' , 'before-handler ' , 'handler ' , return `` app.config [ 'SECRET_KEY ' ] = 'secret ' user_options = [ ] ctx.pop ( ) assert c.get ( '/2 ' ) .data == b'apple ' def bp_defaults ( endpoint , values ) : def __exit__ ( self , exc_type , exc_value , tb ) : assert str ( e ) == ( self.assert_equal ( app.config [ 'TEST_KEY ' ] , 'foo ' ) return response if PY2 : return flask.url_for ( 'something_else ' ) assert 'secure ' in cookie _ = View ( app ) assert 0 , 'expected exception ' 'the blueprint `` frontend '' ' ) in text with catch_deprecation_warnings ( ) as captured : return 'frontend says no ' , 403 r = client.get ( '/pages/hello ' ) SECRET_KEY='devkey ' , self.assert_equal ( rv , ' '' \\u003c\\u0000/script\\u003e '' ' ) def apprunner ( configkey ) : def test_template_test_with_name ( ) : unexpected_max_age = 7200 # The rule 's did n't actually made it through app.register_blueprint ( bp ) def create_global_jinja_loader ( self ) : base_to_url = super ( ListConverter , self ) .to_url c = app.test_client ( ) rv = c.get ( '/admin/static/test.txt ' ) c.get ( '/exc ' ) @ app.errorhandler ( 500 ) def test_teardown_request_handler_debug_mode ( ) : flask.session [ ' u ' ] = the_uuid def action ( ) : view = Index.as_view ( 'index ' ) assert b'Invalid password ' in rv.data from flask.ext import oldext_simple def after_request ( response ) : tests.templating except AssertionError as e : assert flask.request resp = c.get ( '/other ' ) assert excinfo.tb.tb_frame.f_globals is globals ( ) return text_type ( bar ) def _samefile ( x , y ) : flask.g.lang_code = values.pop ( 'lang_code ' , None ) self.assert_equal ( errors , [ ] ) def before2 ( ) : from greenlet import greenlet app.add_template_filter ( my_reverse , 'strrev ' ) ctx.push ( ) assert 'foos ' not in flask.g def modules_tmpdir ( tmpdir , monkeypatch ) : def test_context_processing ( self ) : assert b'the message by bar ' not in rv.data return flask.render_template ( self.assert_true ( msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' self.client = self.app.test_client ( ) self.assert_equal ( len ( called ) , 2 ) minitwit.init_db ( ) self.assert_equal ( c.get ( '/foo/bar ' ) .data , b'bar ' ) nor the ` archive ` attribute . assert rv == b'request|after ' return `` Response '' app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] = True '/myview/42 ' ) self.assert_true ( app.got_first_request ) def after_request_signal ( sender , response ) : app.url_map.add ( Submount ( '/foo ' , [ self.assert_in ( 'This was submitted : `` index.txt '' ' , str ( e ) ) t = Thread ( target=get_and_assert ) if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == unexpected_max_age : self.fail ( 'Expected template not found exception . ' ) messages = flask.get_flashed_messages ( category_filter= [ 'message ' , 'warning ' ] ) self.fail ( 'Expected runtime error ' ) app.url_map.converters [ 'list ' ] = ListConverter flask.g.lang_code = values.pop ( 'lang_code ' ) def test_macros ( ) : self.assert_equal ( rv.data , f.read ( ) ) assert resp.status_code == 200 rv = self.login ( flaskr.app.config [ 'USERNAME ' ] + ' x ' , def after_request ( response ) : with self.assert_raises ( ZeroDivisionError ) : assert rv.direct_passthrough rv = c.get ( '/error ' ) flask.request_started.connect ( before_request_signal , app ) assert app.config [ 'TEST_KEY ' ] == 'foo ' def fails ( ) : try : greenlet def teardown_request2 ( exc ) : # we clear this out for various reasons . The most important one is class MyDecoratorException ( Exception ) : self.assert_equal ( rv.data , b'/test/ ' ) def modify_session ( response ) : with pytest.raises ( TypeError ) : with app.test_request_context ( '/meh ' ) : assert buffer == [ ] def test_original_win ( ) : assert rv.headers [ ' x-sendfile ' ] == \ def test_standard_context ( ) : calls.append ( 'after-handler ' ) def test_templates_and_static ( test_apps ) : assert 'bar stuff 1 ' == bar_options [ 'STUFF_1 ' ] self.exc_type = exc_type # Disable test if we do n't have greenlets available def get_stuff ( ) : def test_inject_blueprint_url_defaults ( self ) : def broken ( ) : def test_config_from_json ( ) : assert ctx.request.url == 'http : //example.com:1234/foo/ ' os.path.join ( app.root_path , 'static/index.html ' ) def backend_forbidden ( e ) : def get_send_file_max_age ( self , filename ) : self.assert_true ( isinstance ( e , MyFunctionException ) ) flask.url_for ( 'index ' ) rv = c.get ( '/foo ' , data= { } , follow_redirects=True ) from threading import Thread 'http : //foo.localhost.localdomain:5000/ ' not append it but moves it to the front so that we can be sure it greenlet = None self.assert_equal ( site_package.app.instance_path , rv = self.app.get ( '/bar ' ) rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) flask.flash ( 'Zip ' ) assert c.get ( '/bump ' ) .data == b ' 1 ' def common_test ( self , app ) : def foo_bar ( ) : SERVER_NAME='example.com:8080 ' self.assert_false ( app.jinja_env.auto_reload ) from site_app import app function to integrate the Flask tests into your own testsuite def test_templates_and_static ( self ) : self.assert_equal ( cc.max_age , 100 ) def record_pop ( sender , * * kwargs ) : def test_flaskext_broken_package_no_module_caching ( self ) : assert rv.data == b'Awesome ' flask.session [ 'test ' ] = 42 def catch_deprecation_warnings ( ) : def test_g_iteration_protocol ( self ) : 'import os\n ' called.append ( True ) app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True return 'Hello ' , { cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) self.assert_equal ( rv.headers [ ' X-Parachute ' ] , 'awesome ' ) assert rv.status_code == 500 flask.flash ( flask.Markup ( u ' < em > Testing < /em > ' ) , 'warning ' ) error = err flask.testsuite.reqctx c.get ( `` / '' ) def flaskext_broken ( modules_tmpdir ) : monkeypatch ) : rv = c.get ( '/admin/index2 ' ) app.add_url_rule ( '/ ' , view_func=BetterIndex.as_view ( 'index ' ) ) except RuntimeError as e : with flask.Flask ( __name__ ) .test_request_context ( ) : reqctx = flask._request_ctx_stack.top.copy ( ) def test_extended_flashing ( self ) : out = StringIO ( ) assert False , 'Expected runtime error ' called.append ( 'app ' ) assert meh ( ) == 'http : //localhost/meh ' greenlets.append ( greenlet ( g ) ) class LimitedLoaderMockWrapper ( object ) : self.assert_in ( 'strrev ' , app.jinja_env.filters.keys ( ) ) next = tb.tb_next.tb_next def app_index ( ) : self.assert_equal ( macro ( 'World ' ) , 'Hello World ! ' ) return flask.url_for ( '.about ' ) return 'Meh ' , 400 , { self.assert_not_in ( ' . ' , key ) def __init__ ( self , test_case , exc_type ) : assert flask.current_app._get_current_object ( ) == app def fails ( ) : self.assert_equal ( flask.url_for ( 'hello ' , name='test x ' , _external=True ) , self.assert_equal ( rv.data , b'Hello from the Admin ' ) rv = app.test_client ( ) .get ( '/ ? foo=bar ' ) if hasattr ( mod , 'suite ' ) : self.assert_equal ( c.get ( '/ ' ) .status_code , 500 ) self.assert_equal ( submodule.test_function ( ) , 42 ) def test_template_filter_with_template ( self ) : def test_safe_join_toplevel_pardir ( self ) : with catch_stderr ( ) as err : app.config.from_mapping ( @ backend.route ( '/backend-no ' ) import_hooks += 1 rv.close ( ) 'site_app-instance ' ) ) def test_before_after_request_order ( self ) : self.assert_equal ( c.get ( '/page/2 ' ) .data , b ' 2 ' ) recorded = [ ] main ( ) assert messages [ 1 ] == flask.Markup ( u ' < em > Testing < /em > ' ) # The rule 's did n't actually made it through def handle_forbidden_subclass ( e ) : commands = # try/finally , in case other tests use this app for Blueprint tests . c.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) rv = c.get ( '/read ' ) except NotFound as e : assert app.jinja_env.filters [ 'strrev ' ] ( 'abcd ' ) == 'dcba ' def test_add_template_test_with_name ( self ) : bp.add_app_template_test ( is_boolean ) assert flask.g.get ( ' x ' ) is None self.assert_equal ( expires.day , expected.day ) raise ValueError ( name ) def assertIn ( self , x , y ) : def tearDown ( self ) : self.assert_true ( False , 'debug log ate the exception ' ) def test_template_rendered ( self ) : def bar ( ) : flask.got_request_exception.disconnect ( record , app ) def setup ( self ) : def test_default_static_cache_timeout ( self ) : def context_processor ( ) : rv = flask.make_response ( 'W00t ' , 404 ) app.register_blueprint ( bp , url_prefix='/py ' ) rv = app.test_client ( ) .get ( '/ ? foo=42 ' ) return 'normal index ' app.config.update ( SERVER_NAME='localhost:80 ' ) ' ( blueprintapp.apps.frontend ) ' ) in text def my_function_exception_handler ( e ) : 'http : //localhost.localdomain:5000/ ' c.get ( '/ ' ) view.view_class = Other app.config.update ( ( 'error ' , u'Hello World ' ) , app = site_packages.mkdir ( 'site_package ' ) def test_session_stored_last ( self ) : flask.session [ 'test ' ] = 'aha ' def test_endpoint_decorator ( self ) : here = os.path.abspath ( os.getcwd ( ) ) def sub ( ) : assert app.permanent_session_lifetime.seconds == 42 ~~~~~~~~~~~~~~~ recorded.append ( exception ) rv = c.get ( '/forbidden ' ) def inner ( name , base=modules_tmpdir ) : tests.deprecations self.assert_equal ( ext_id , 'oldext_package ' ) assert rv.data.strip ( ) == b'Admin File ' bp.add_app_template_filter ( my_reverse , 'super_reverse ' ) def bump ( ) : self.assertEqual ( rv.data , b ' { \n `` msg '' : `` W00t '' \n } ' ) self.assert_in ( 'is_boolean ' , app.jinja_env.tests.keys ( ) ) raise flask.abort ( flask.redirect ( flask.url_for ( 'test ' ) ) ) assert flask.url_for ( 'myview ' , _method='POST ' ) == '/myview/create ' assert rv.data == b'dcba ' 'http : //localhost/hello/test % 20x ' self.assert_equal ( app.config [ 'JSON_SORT_KEYS ' ] , True ) # Werkzeug 0.7 if 'installed_package ' in sys.modules : # exception . assert app.jinja_env.tests [ 'is_boolean ' ] ( False ) for root , _ , files in os.walk ( dir ) : self.assert_in ( b'Success ! ' , rv.data ) py.test [ ] warns += flakes.checkPath ( os.path.join ( root , file ) ) entry == 'flaskext ' ) and value is not None : assert rv.data.strip ( ) == b'/ * nested file * / ' rv = c.get ( '/py/bar/123 ' ) def test_meta_path_loader_without_is_package ( request , modules_tmpdir ) : class BlueprintTestCase ( FlaskTestCase ) : lambda : bp.add_url_rule ( 'after-handler ' , 'after-signal ' ] title= ' < Hello > ' , which breaks the default loading logic so this is required anyways . assert rv.data == b'Meh ' self.assert_equal ( resp.data , b'Hello World ! ' ) # But this request triggers it , and it 's an error assert list ( flask.get_flashed_messages ( ) ) == [ 'Zap ' , 'Zip ' ] assert sorted ( meths ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] with self.assert_raises ( RuntimeError ) : rv = c.get ( '/args ' ) with app.test_request_context ( ) : assert lines == sorted_by_int app.view_functions [ 'bar ' ] = bar def test_messages ( self ) : except ImportError : @ bp.url_defaults ~~~~~~~~~~~~~~~~~~~ with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost ' } ) : if 'site_package ' in sys.modules : def test_flaskext_old_package_import_submodule ( oldext_package ) : return self.app ( environ , start_response ) self.assert_not_in ( 'after ' , evts ) is loaded . def broken ( ) : # At this point another request does nothing . blue.register_error_handler ( MyFunctionException , my_function_exception_handler ) tests.regression assert lines == [ tests.test_config def test_template_loader_debugging ( test_apps ) : return 'Awesome ' assert rv2.mimetype == 'text/plain ' from flask._compat import PY2 def test_no_error_swallowing ( flaskext_broken ) : return flask.request.method assert rv.status_code == 403 assert cc.max_age == 100 return str ( page ) assert b'You have to enter a password ' in rv.data self.assert_equal ( flask.url_for ( 'index ' , def test_view_patching ( ) : self.assert_equal ( flask.render_template ( 'nested/nested.txt ' ) , ' I\ 'm nested ' ) assert msg.endswith ( `` missing.cfg ' '' ) assert flask.session.get ( 'data ' ) == 'foo ' Pluggable views . return 42 assert oldext_package.ext_id == 'oldext_package ' sys.path.insert ( 0 , os.path.abspath ( os.path.dirname ( __file__ ) ) ) assert type ( rv [ ' b ' ] ) == bytes recorded.append ( ( template , context ) ) ) `` `` '' Check if adding messages works '' '' '' app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] = old_load_setting rv = client.get ( '/test ' ) def test_multi_route_rules ( self ) : sys.path.append ( egg_path ) warnings.showwarning = old_showwarning rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) def index_put ( ) : def not_found ( e ) : def app_forbidden ( e ) : # reloading must not add more hooks def test_test_app_proper_environ ( ) : add_to_path ( os.path.join ( example_path , 'flaskr ' ) ) self.assert_equal ( templates , [ 'admin/index.html ' , next.tb_frame.f_code.co_filename class JSONTestCase ( FlaskTestCase ) : 'site_app-instance ' ) ) self.loader = loader class BasicFunctionalityTestCase ( FlaskTestCase ) : old_get_loader = pkgutil.get_loader self.assert_equal ( flask.g.value , 42 ) assert rv.data == b ' a ' assert False , 'Expected runtime error ' flask.template_rendered.connect ( record , app ) self.assert_equal ( rv.data , b ' < p > 23|42 ' ) description = `` Audit source code with PyFlakes '' def test_flashes ( ) : suite.addTest ( unittest.makeSuite ( MemoryTestCase ) ) assert rv.data == b'Awesome ' # This raises a new error and blows away sys.exc_info ( ) , so we can def test_exception_propagation ( ) : def get_stuff ( ) : assert c.get ( '/frontend-no ' ) .data == b'frontend says no ' flask.session [ 'test ' ] = 42 self.assertEqual ( resp.status_code , 200 ) ' ( blueprintapp.apps.admin ) ' in text ) called.append ( True ) self.assert_equal ( rv.status_code , 404 ) app.app_ctx_globals_class = CustomRequestGlobals real_prefix , sys.prefix = sys.prefix , expected_prefix c.post ( '/foo ' , data= { } ) def test_blueprint_url_processors ( self ) : def test_subdomain_matching ( ) : def test_response_creation ( self ) : app.register_blueprint ( blueprint ) version= ' 1.0 ' , assert flask.session.get ( 'data ' ) == 'foo ' def backend_no ( ) : assert c.get ( '/ ' ) .status_code == 500 self.assertEqual ( rv.mimetype , 'text/html ' ) return 'forbidden ' , 403 rv.close ( ) return self.app ( environ , start_response ) from functools import update_wrapper get_and_assert ( ) flask.render_template ( 'missing.html ' ) if callable is None : reload_module = reload 'password ' : password , BuildError , app.handle_url_build_error , error , 'spam ' , { } ) assert isinstance ( e , MyException ) def frontend_forbidden ( e ) : permanent = True oldext = flaskext.mkdir ( 'oldext_package ' ) self.assert_in ( 'Exception on / [ GET ] ' , err ) rv = flask.make_response ( { { session.test } } text = str ( record.msg ) self.assert_equal ( c.get ( '/2 ' ) .data , b'apple ' ) self.assert_ ( 'trying loader of blueprint `` frontend '' ' bp = flask.Blueprint ( 'foo.bar.baz ' , __name__ , egg_path = os.path.join ( site_packages , 'SiteEgg.egg ' ) rv = app.test_client ( ) .open ( '/b/ ' ) ext.join ( '__init__.py ' ) .write ( 'import flask.ext.broken.b\n ' return text_type ( flask.session.permanent ) 1 // 0 suites.extend ( s ) self.assert_true ( flask.session.get ( 'missing_key ' ) is None ) def test_request_processing ( ) : evts.append ( 'before ' ) rv.close ( ) @ app.route ( '/ < test > / ' ) blinker is None , app.route ( '/ ' , methods= [ 'OPTIONS ' ] ) ( index2 ) 'installed_package-instance ' ) ) def hello ( ) : return 'Hello World ' app.logger.handlers [ : ] = old_handlers def test_get_namespace ( ) : with minitwit.app.app_context ( ) : ' '' Create a fake site-packages '' ' return _NoLeakAsserter ( self ) self.assert_equal ( rv.status_code , 200 ) def test_name_with_import_error ( self , modules_tmpdir ) : def test_manual_context_binding ( ) : app.config.update ( SERVER_NAME='localhost.localdomain ' ) assert messages [ 0 ] == u'Hello World ' def test_filter ( ) : # This raises a new error and blows away sys.exc_info ( ) , so we can flask.g.lang_code = values.pop ( 'lang_code ' ) def foo_foo_foo ( ) : assert ext_id == 'newext_simple ' import minitwit self.assert_equal ( e.name , 'missing.html ' ) greenlet = None assert c.get ( '/bar/123 ' ) .data == b'123 ' rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/ ' ) old_handlers = app.logger.handlers [ : ] from werkzeug.http import parse_cache_control_header client.get ( '/ ' ) assert flask.session.get ( 'data ' ) == 'foo ' assert c.post ( '/more ' ) .data == b'POST ' with flask._request_ctx_stack.top : assert flask.url_for ( 'bar ' ) == '/bar/ ' self.assert_in ( ' x-sendfile ' , rv.headers ) def test_context_processing ( ) : def test_explicit_head ( ) : app.logger.handlers = [ _TestHandler ( ) ] def assertIsInstance ( self , x , y ) : flaskr.init_db ( ) assert ' x-sendfile ' not in rv.headers return ' , '.join ( base_to_url ( x ) for x in value ) def test_werkzeug_routing ( ) : def teardown_request ( exc ) : self.assert_equal ( rv , 'https : //localhost/ ' ) assert c.get ( '/ ' ) .data == b'index ' self.assert_true ( False ) rv = app.test_client ( ) .get ( '/ ' ) catcher = _ExceptionCatcher ( self , exc_type ) Tests deprecation support . Not used currently . def emits_module_deprecation_warning ( f ) : except ( AttributeError , RuntimeError ) : APPLICATION_ROOT='/test ' , self.assert_equal ( flask.g.get ( ' x ' ) , None ) @ app.errorhandler ( Forbidden ) self.assert_true ( app.config.from_envvar ( 'FOO_SETTINGS ' ) ) assert app.jinja_env.auto_reload `` `` '' Make sure that timelines work '' '' '' if exc_type is None : def leak_detector ( request ) : self.assert_equal ( oldext_simple.__name__ , 'flaskext.oldext_simple ' ) return str ( flask.session.get ( 'foo ' , 0 ) ) rv = flask.make_response ( def hello ( ) : html=flask.Markup ( text ) ) class assert_no_leak ( object ) : assert b ' < strong > HTML < /strong > allowed here ' in rv.data lowest : Jinja2==2.4 with self.assert_raises ( TypeError ) : app.logger_name = 'flask_tests/test_suppressed_exception_logging ' def install_egg ( modules_tmpdir , monkeypatch ) : def test_add_template_test_with_template ( self ) : def handler ( error , endpoint , values ) : except Exception : c.get ( '/success ' ) modules_tmpdir_prefix , purge_module , rv = c.get ( '/ ' , 'http : //test.localhost/ ' ) assert oldext_package.__name__ == 'flaskext.oldext_package ' app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] = False assert rv.data == b'42 ' self.assert_equal ( rv.status_code , 400 ) def test_messages ( client ) : return self def index ( self , test= ' a ' ) : fire ( ) monkeypatch.syspath_prepend ( str ( egg_path ) ) assert resp.status_code == 200 def add_to_path ( path ) : assert rv.headers [ ' X-Foo ' ] == 'Testing ' rv = unittest.TestSuite ( ) msg = str ( e ) import flaskr except ValueError as e : app.config [ 'WORLD_NAME ' ] = 'Special World ' if 'site_egg ' in sys.modules : def test_debug_mode_complains_after_first_request ( self ) : flask.testsuite.subclassing except TemplateNotFound as e : 'SECRET_KEY ' : 'devkey ' , cleanup_stuff.append ( exception ) app.config.from_mapping ( [ raise AttributeError ( msg ) def forbidden ( e ) : app.config [ 'MAX_CONTENT_LENGTH ' ] = 64 def test_route_decorator_custom_endpoint_with_dots ( self ) : app.register_blueprint ( frontend ) def teardown_request1 ( exc ) : self.assert_equal ( flask.url_for ( 'myview ' , id=42 , _method='GET ' ) , def run ( self ) : rv = self.register ( 'meh ' , `` ) config_class = Config self.assert_equal ( rv , u ' '' \u2603 '' ' ) return flask.request.endpoint app.register_blueprint ( bp , url_prefix='/1 ' , url_defaults= { 'bar ' : 23 } ) app.config [ config_key ] = True if self._ctx is not None : @ app.route ( '/hello/ < name > ' , methods= [ 'POST ' ] ) recorded.append ( 'pop ' ) class Flask ( flask.Flask ) : return 'Hi , status ! ' , 400 return ' % s/ % d ' % ( bar , baz ) @ bp.route ( '/page/ < int : page > ' ) class MyException ( Exception ) : class _NoLeakAsserter ( object ) : flask.abort ( 404 ) # stack otherwise and we want to ensure that this is not the case # extra dependencies def test_config_from_envvar_missing ( ) : def app_forbidden ( e ) : with app.test_request_context ( '/somepage ' ) : # This is necessary since Python only starts tracking # Test a custom handler . from flask.ext.oldext_package import ext_id self.assert_equal ( rv.data , b'Hello Server Error ' ) with app.test_request_context ( '/meh ' ) : with pytest.raises ( ValueError ) as excinfo : assert 'Traceback ( most recent call last ) : ' in err def test_session_using_session_settings ( self ) : ( 'TEST_KEY ' , 'foo ' ) assert not flask.g self.assert_equal ( c.get ( '/fe ' ) .data.strip ( ) , b'/be ' ) request.addfinalizer ( teardown ) return wrapper_class ( old_get_loader ( * args , * * kwargs ) ) rv = c.get ( '/ ' ) return modules_tmpdir return client.get ( '/logout ' , follow_redirects=True ) if cls.__module__ == 'flask.exthook ' and \ [ 'werkzeug.request ' ] is not None ) while suites : def expect_exception ( f , * args , * * kwargs ) : self.assert_equal ( meh ( ) , 'http : //localhost/meh ' ) def record_push ( sender , * * kwargs ) : rv = client.get ( '/foo/follow ' , follow_redirects=True ) resp = flask.make_response ( f ( * args , * * kwargs ) ) pytest.raises ( def test_session ( ) : # not torn down . This causes other tests that run after this fail packages= [ 'flask ' , 'flask.ext ' , 'flask.testsuite ' ] , import_hooks = 0 if file ! = '__init__.py ' and file.endswith ( '.py ' ) : def test_redirect_keep_session ( ) : self.assertNotIn ( x , y ) warnings.filters = filters [ : ] class CustomRequestGlobals ( object ) : self.assert_equal ( messages [ 2 ] , ( 'warning ' , flask.Markup ( u ' < em > Testing < /em > ' ) ) ) return flask.redirect ( '/other ' ) app = modules_tmpdir.mkdir ( 'config_package_app ' ) app = flask.Flask ( __name__ ) foo= ' < test > ' ) , ' < test > ' ) rv = c.get ( '/admin/static/css/test.css ' ) def view ( page ) : pass cleanup_stuff = [ ] def test_empty_url_defaults ( self ) : loc.__storage__ [ 'FOOO ' ] = [ 1 , 2 , 3 ] assert rv.status_code == 500 'username ' : username , r = self.app.get ( '/pages/world ' ) def test_debug_log ( self , capsys ) : calls.append ( 'before-signal ' ) return 'not found ' , 404 self.assertEqual ( resp.headers [ ' X-Foo ' ] , ' a header ' ) Test that certain behavior of flask can be customized by suite.addTest ( unittest.makeSuite ( ExtImportHookTestCase ) ) # try/finally , in case other tests use this app for Blueprint tests . def attach_something ( ) : from werkzeug.exceptions import BadRequest , NotFound , Forbidden 'here = os.path.abspath ( os.path.dirname ( __file__ ) ) \n ' `` server name from the WSGI environment ( 'localhost.localdomain ' ) '' ) subclasses . site_packages = os.path.join ( expected_prefix , 'lib ' , 'python2.5 ' , 'site-packages ' ) def test_before_request_and_routing_errors ( self ) : `` the server name provided `` rv = tmpdir.mkdir ( 'modules_tmpdir ' ) assert c.get ( '/de/ ' ) .data == b'/de/about ' return 'Foo ' def test_debug_mode_complains_after_first_request ( ) : 'TEST_KEY ' : 'foo ' assert app.config [ 'TEMPLATES_AUTO_RELOAD ' ] assert flask.session.get ( 'missing_key ' ) is None add_message ( client , ' < test message 2 > ' ) @ app.route ( '/get ' ) def test_egg_installed_paths ( self ) : assert ( 'Make sure to directly send ' with catcher : def test_empty_url_defaults ( ) : `` `` '' Helper function to register a user '' '' '' def test_make_response ( self ) : safe_join ( '/foo ' , ' .. ' ) def more ( ) : self.assert_equal ( rv [ ' u ' ] , the_uuid ) ' X-Foo ' : 'Testing ' , 1 // 0 assert rv.status_code == 500 assert options [ 'filename ' ] == 'index.html ' # Be sure app.testing=True below , else tests can fail silently . msg = 'Mocking a loader which does not have ` % s. ` ' % name assert rv3.status_code == 400 self.assert_equal ( rv.data , b'W00t ' ) rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost ' ) assert req is flask.request._get_current_object ( ) self.assert_in ( 'ZeroDivisionError : ' , err ) r = self.app.get ( '/world ' ) request.addfinalizer ( ensure_clean_request_context ) except RuntimeError : def teardown_request2 ( exc ) : with pytest.raises ( NotFound ) : rv = c.delete ( '/more ' ) app.secret_key = 'dev key ' here = os.path.abspath ( os.getcwd ( ) ) from flask.ext import oldext_package self.assert_equal ( buffer , [ None ] ) def record ( sender , message , category ) : self.common_object_test ( app ) assert b'You are no longer following & # 34 ; foo & # 34 ; ' in rv.data def accept_file ( ) : # second blueprint instance ' < test > Mail ' ) @ app.template_filter ( ) def about ( ) : self.assert_equal ( len ( messages ) , 2 ) } flask.request.form [ 'missing_key ' ] class Loader ( object ) : assert c.get ( '/fail ' ) .status_code == 400 rv = client.get ( '/test ' ) TEST_KEY = 'foo ' from werkzeug.http import parse_date setup ( name= ' { 0 } ' , self.assert_equal ( c.get ( '/ ' ) .status_code , 404 ) return 'Okay ' sideend = flask.Blueprint ( 'sideend ' , __name__ ) return str ( page ) self.assert_equal ( c.put ( '/ ' ) .status_code , 405 ) from flask.helpers import safe_join app = flask.Flask ( '__main__ ' ) app.config.from_envvar ( 'FOO_SETTINGS ' ) 'file ( No such file or directory ) : ' ) if email is None : ~~~~~~~~~~~~~~~~~~ self.old_objects = len ( gc.get_objects ( ) ) def test_test_client_calls_teardown_handlers ( self ) : rv = app.test_client ( ) .open ( '/ ' ) self.assert_true ( 'gin ' in flask.request.form ) def root ( ) : with app.test_request_context ( ) : def record_push ( sender , * * kwargs ) : def test_session_using_server_name_and_port ( self ) : from flask.ext.newext_simple import ext_id with pytest.raises ( ZeroDivisionError ) : assert rv3.data == b'Hi , status ! ' 'app = flask.Flask ( __name__ ) \n ' self.assert_in ( 'get_stuff ' , app.jinja_env.globals.keys ( ) ) return self.app.post ( '/register ' , data= { flask.render_template_string ( ' { { g.spam } } ' ) , 'eggs ' ) { { g.foo } } out = err.getvalue ( ) assert rv.mimetype == 'text/html ' from flask.ext.oldext_package.submodule import test_function unittest.TestCase.tearDown ( self ) self.assert_equal ( type ( rv ) , text_type ) SESSION_COOKIE_PATH='/ ' assert rv.headers [ 'Content-Type ' ] == 'text/html ' return flask.Response ( 'Hello world ' , 404 ) , { assert 200 == response.status_code self.assert_equal ( ctx.request.url , 'http : //localhost/ ' ) self.assert_equal ( messages [ 0 ] , u'Hello World ' ) assert c.get ( '/1,2,3 ' ) .data == b ' 1|2|3 ' app.config.from_json ( os.path.join ( current_dir , 'static ' , 'config.json ' ) ) resp = flask.make_response ( f ( * args , * * kwargs ) ) next = excinfo.tb.tb_next.tb_next This provides for tests where a system has custom loaders , e.g . Google App monkeypatch.setattr ( sys , 'prefix ' , str ( modules_tmpdir ) ) def client ( request ) : def before_request_signal ( sender ) : assert rv.data == b'stuff ' raise RuntimeError ( 'Test case where BuildError is not current . ' ) flask.request.form [ 'myfile ' ] @ contextmanager def something_else ( ) : app.register_blueprint ( backend ) Tests regressions . def test_explicit_instance_paths ( self ) : ' ( blueprintapp.apps.admin ) ' ) in text self.assert_equal ( result , 42 ) @ app.route ( '/ ' ) class DeprecationsTestCase ( FlaskTestCase ) : def test_request_context_means_app_context ( ) : def test_config_from_object ( ) : def record ( sender , template , context ) : new_objects = len ( gc.get_objects ( ) ) assert expires.day == expected.day for item in sys.meta_path : TEST_KEY='foo ' 'SECRET_KEY ' : 'devkey ' , Secondly this loader has a nicer interpolation for test names than the assert c.get ( '/1/foo ' ) .data == b'23/42 ' # make sure we 're not leaking a request context since we are def test_attachment ( self , catch_deprecation_warnings ) : def test_prefix_package_paths ( limit_loader , modules_tmpdir , greenlets.append ( greenlet ( g ) ) with assert_no_leak ( ) : return 'Meh ' modules_tmpdir.mkdir ( 'site_egg ' ) .join ( '__init__.py ' ) .write ( expect_exception ( flask.session.__setitem__ , 'foo ' , 42 ) time.sleep ( 0.2 ) except RuntimeError as e : from flask.ext import newext_simple def meh ( ) : @ app.errorhandler ( 404 ) self.assert_equal ( rv.status_code , 200 ) def test_aborting ( self ) : return str ( rv ) self.assert_equal ( flask.render_template_string ( ' { { foo } } ' , assert rv3.mimetype == 'text/html ' assert rv.data == b'Foo SubDomain ' b ' & lt ; p & gt ; Hello World ! ' , self.assert_equal ( rv.status_code , 404 ) def test_error_handling ( ) : @ app.route ( '/foo/ ' , methods= [ 'GET ' , 'POST ' ] ) self.assert_equal ( c.get ( '/1 ' ) .data , b'banana ' ) 'password ' : password , assert rv4.status_code == 404 assert import_hooks == 1 client = minitwit.app.test_client ( ) return suite # Verify the error is re-raised if not the current exception . def test_environ_defaults_from_config ( self ) : '/admin/static/test.txt ' ) flask.testsuite.deprecations def sideend_no ( ) : rv = client.post ( '/add ' , data=dict ( tests.appctx self.app = minitwit.app.test_client ( ) packages= [ 'site_egg ' ] , self.assert_equal ( sorted ( meths ) , [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) ~~~~~~~~~~~~~~~~~~~~~~~ app.config [ 'SERVER_NAME ' ] = 'example.com ' assert ext_id == 'newext_package ' c.get ( '/fail ' ) assert 'the standard library is dead ' in err def return_something ( error ) : self.assert_true ( flask.request ) assert b ' < strong > HTML < /strong > allowed here ' in rv.data s.__class__.__module__ , rv.close ( ) class View ( object ) : assert len ( sess ) == 0 return flask.redirect ( '/other ' ) leaks.append ( flask._request_ctx_stack.pop ( ) ) return None def get_loader ( * args , * * kwargs ) : return 'value set ' assert rv.mimetype == 'text/plain ' return test `` `` '' Patch pkgutil.get_loader to give loader without get_filename or archive . c.get ( '/test_filters_without_returning_categories/ ' ) Tests the extension import thing . assert False , 'Flask ( import_name ) is importing import_name . ' tests.reqctx safe_join ( '/foo ' , ' .. ' ) def test_template_filter_with_name ( self ) : class InstanceTestCase ( FlaskTestCase ) : self.assert_equal ( oldext_simple.ext_id , 'oldext_simple ' ) assert rv == u ' '' \u2603 '' ' self.assert_true ( 0 , 'expected runtime error ' ) self.assert_equal ( c.get ( '/bump ' ) .data , b ' 2 ' ) app.add_url_rule ( '/ < test > / ' , 'index ' , self.index ) # to not negatively affect other tests . except TypeError : `` ( 'localhost.localdomain:443 ' ) does not match the `` + \ # with statement is important because we leave an exception on the def other ( ) : assert b'the message by bar ' not in rv.data except KeyError as e : assert c.get ( '/foo/ ' ) .data == b'index ' if name in ( 'archive ' , 'get_filename ' ) : env = os.environ limitation/mock . class TestJSON ( object ) : assert errors [ 1 ] is None from jinja2 import TemplateNotFound # horrible hack but makes this kinda testable . def test_before_first_request_functions ( ) : app.config.from_object ( Test ) for x in range ( 2 ) : [ 'no_template.xml ' , # should skip this one flask.session [ ' b ' ] = b'\xff ' app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = expected_max_age try : def head ( self ) : import site_app self.assertEqual ( c.get ( '/bar/123 ' ) .data , b'123 ' ) @ bp.route ( '/bar/123 ' , endpoint='bar.123 ' ) self.assert_equal ( called , [ None ] ) subprocess.check_call ( if 'site_egg ' in sys.modules : from werkzeug.http import parse_date `` ( 'localhost.localdomain ' ) does not match the `` + \ def test_suppressed_exception_logging ( ) : decorators = [ add_x_parachute ] def test_filters2 ( ) : 'simple_template.html ' , # should render this self.assert_false ( flask.session.modified ) def test_context_test ( ) : rv = app.test_client ( ) .open ( '/ ' ) flask.g.value assert b'Invalid username ' in rv.data self.app = app self.assert_true ( app.logger is not logger1 ) from flask._compat import text_type def test_default_static_cache_timeout ( ) : def test_dotted_names_from_app ( self ) : from jinja2 import DictLoader if ( entry.startswith ( 'flask.ext . ' ) or def test_route_decorator_custom_endpoint_with_dots ( ) : assert rv.data == b'Hello ' def test_aborting ( ) : class MyFlask ( flask.Flask ) : # Windows has no samefile def handle_my_exception ( e ) : the_uuid = uuid.uuid4 ( ) def test_greenlet_context_copying_api ( self ) : ] ) ) ' X-Foo ' : 'Test ' , bp.add_app_template_filter ( my_reverse ) got = [ ] values [ 'page ' ] = 'login ' self.assert_equal ( app.test_client ( ) .get ( '/ ' ) .status_code , 500 ) recorded.append ( 'push ' ) flask.testsuite.views from imp import reload as reload_module self.assert_equal ( 'foo ' in flask.g , True ) self.assert_in ( ' A setup function was called ' , str ( e ) ) tests.ext rv = client.get ( '/foo ' ) db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) self.assert_true ( flask._request_ctx_stack.top is not None ) _gc_lock.acquire ( ) assert c.get ( '/3 ' ) .data == b'apple ' } def about ( ) : import os.path zip_safe=True ) class PrefixPathMiddleware ( object ) : return 'Hello % s ! ' % flask.request.args [ 'name ' ] macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) assert 'Error : the template could not be found ' in text return dict ( foo=42 ) def get_and_assert ( ) : def g ( ) : return flask.render_template_string ( ' { { config } } ' , config=42 ) class BlueprintExampleTestCase ( unittest.TestCase ) : return response f ( self , * args , * * kwargs ) # now let 's follow foo for config_key in 'TESTING ' , 'PROPAGATE_EXCEPTIONS ' , 'DEBUG ' , None : self.assert_true ( isinstance ( e , ForbiddenSubclass ) ) flask.request_started.connect ( before_request_signal , app ) def head ( self ) : flask.testsuite.blueprints assert flask.url_for ( 'index ' , _external=True , _scheme='https ' ) == 'https : //localhost/ ' app.view_functions [ 'bar ' ] = bar def teardown_handler ( exc ) : msg = str ( e ) if not request.param : self.assert_equal ( c.post ( '/ ' ) .data , b'POST ' ) assert flask.request assert rv.status_code == 404 def test_basic_url_generation ( ) : match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ( ? i ) ' , rv.headers [ 'set-cookie ' ] ) except ( IOError , OSError , AttributeError ) : default one so you can just do `` run-tests.py ViewTestCase `` and it raise Forbidden ( ) `` `` '' Before each test , set up a blank database '' '' '' def test_method_based_view ( ) : b ' < p > Hello World ! ' , def test_config_from_envvar_missing ( self ) : def test_escaping ( self ) : if flask.g.lang_code is not None and \ def site_packages ( modules_tmpdir , monkeypatch ) : app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] = True def login ( self , username , password ) : def test_app_tearing_down_with_previous_exception ( ) : app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' assert req is not None assert flask.url_for ( 'sub ' , _external=True ) == \ # But these tests should still pass . We just log a warning . # instead of propagating exceptions . return 'forbidden ' , 403 app.register_blueprint ( sideend ) # ! /usr/bin/env python def test_add_template_filter_with_template ( ) : assert rv.data.split ( ) == [ b'42 ' , b'23 ' , b'False ' , b'aha ' ] return flask.url_for ( 'test.index ' ) os.path.abspath ( os.path.join ( leaks = [ ] evts = [ ] self.assert_equal ( url , expected ) for key in ext.__dict__ : return 'internal server error ' , 500 assert b'You have to enter a username ' in rv.data def foo ( ) : base_to_url = super ( ListConverter , self ) .to_url self.app = flask.Flask ( __name__ ) self.assert_equal ( sorted ( flask.g ) , [ 'bar ' , 'foo ' ] ) 'site_egg-instance ' ) ) self.assert_equal ( rv.data , f.read ( ) ) return 'Hello World ! ' app.register_blueprint ( bp , url_prefix='/2 ' , url_defaults= { 'bar ' : 19 } ) monkeypatch.delitem ( sys.modules , entry ) @ app.route ( '/3 ' ) _gc_lock = threading.Lock ( ) return flask.url_for ( 'app_index ' ) def __exit__ ( self , exc_type , exc_value , tb ) : self.assert_equal ( rv.data , b'42 ' ) def test_subdomain_matching ( self ) : suite.addTest ( unittest.makeSuite ( DeprecationsTestCase ) ) import flask def test_trapping_of_all_http_exceptions ( ) : username=username , def test_options_work ( self ) : ext_id = 'newext_package ' self.assert_equal ( len ( sess ) , 1 ) sys.exit ( -1 ) class FlaskrTestCase ( unittest.TestCase ) : assert res.data == b '' assert b'You are now following & # 34 ; foo & # 34 ; ' in rv.data return flask.Response ( 'Blub ' , headers= { assert app.jinja_env.globals [ 'get_stuff ' ] ( ) , 42 self.assert_equal ( c.get ( '/frontend-no ' ) .data , b'frontend says no ' ) # exception . def test_flaskext_new_package_import_normal ( newext_package ) : lowest : itsdangerous==0.21 def from_tuple ( ) : { } , { } pytest logout ( client ) self.assert_equal ( err , `` ) assert 'no file contents were transmitted ' in str ( e ) values.setdefault ( 'lang_code ' , flask.g.lang_code ) except ImportError : from flask.testsuite import main for x in range ( 10 ) : devel : git+git : //github.com/mitsuhiko/itsdangerous.git def get_loader ( * args , * * kwargs ) : yield packages= [ 'flask ' , 'flask.ext ' ] , self.assert_true ( app.config [ 'TEMPLATES_AUTO_RELOAD ' ] ) values = dict ( ) self.assert_equal ( got , [ 42 ] ) app.config [ 'SERVER_NAME ' ] = 'localhost:3000 ' with pytest.raises ( AttributeError ) : app.add_template_filter ( my_reverse , 'strrev ' ) flaskr.init_db ( ) app.config [ 'WORLD_NAME ' ] = 'Special World ' def test_login_logout ( client ) : cwd=str ( modules_tmpdir ) flask.Flask ( __name__ , instance_path='instance ' ) def test_config_from_envvar ( self ) : def test_teardown_request_handler_error ( ) : @ app.template_filter ( 'strrev ' ) def assert_not_in ( self , x , y ) : ~~~~~~~~~~~~~~~~~~~~~~~~ flask.request_finished.disconnect ( after_request_signal , app ) def test_session_transaction_needs_cookies ( self ) : self.assert_equal ( rv.data , b'GET ' ) `` `` '' Helper function to logout '' '' '' self.assert_equal ( app.route ( '/ ' ) ( index ) self.assert_in ( 'domain=.example.com ' , rv.headers [ 'set-cookie ' ] .lower ( ) ) self.assert_in ( 'the standard library is dead ' , out ) from werkzeug.exceptions import NotFound assert 'httponly ' not in cookie rv = c.get ( '/error ' ) # After this failure we did not yet call the teardown handler @ app.errorhandler ( ForbiddenSubclass ) response.headers [ ' X-Foo ' ] = ' a header ' if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == expected_max_age : assert rv.status_code == 400 self.assert_true ( flask._app_ctx_stack.top is not None ) index ( ) import unittest pass site_packages ) : 'username ' : username , self.assertEqual ( rv.headers [ 'Location ' ] , 'http : //localhost/test ' ) def test_original_win ( self ) : return flask.url_for ( 'something_else ' ) assert ' x-sendfile ' in rv.headers assert rv == ' '' \\u0026 '' ' app.config [ 'FOO_OPTION_1 ' ] = 'foo option 1 ' greenlets = [ ] self.assert_in ( 'secure ' , cookie ) monkeypatch.setattr ( pkgutil , 'get_loader ' , get_loader ) self.assert_equal ( app.jinja_env.filters [ 'my_reverse ' ] , my_reverse ) def oldext_simple ( modules_tmpdir ) : pass '/ # x % 20y ' ) assert resp.data == b'Hello World ! ' # debug flag is set to true and an exception happens the context is self.db_fd , flaskr.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) def my_decorator_exception_handler ( e ) : def normal_index ( ) : def test_attachment ( self ) : def test_max_content_length ( ) : unexpected_max_age = 3600 assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' ] r = client.get ( '/hello ' ) rv = self.register_and_login ( 'user1 ' , 'default ' ) app.config [ 'TRAP_HTTP_EXCEPTIONS ' ] = True self.assert_true ( msg.endswith ( `` missing.cfg ' '' ) ) import flask.views assert rv.data == b ' < missing > ' app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = unexpected_max_age from blueprintapp import app assert flask.request.args [ 'foo ' ] == 'bar ' from werkzeug.routing import BaseConverter self.assert_in ( 'after ' , evts ) self.assert_equal ( len ( recorded ) , 1 ) def more ( ) : egg_setup.write ( textwrap.dedent ( `` '' '' flask.g.value = 23 flask.template_rendered.connect ( record , app ) flask.g.lang_code = values.pop ( 'lang_code ' , None ) tests.testing raise Exception ( 'dummy ' ) return client.post ( '/login ' , data= { rv = c.get ( '/admin/static/css/test.css ' ) def run_test ( expect_header ) : rv = c.get ( '/ ' ) APPLICATION_ROOT='/bar ' self.fail ( 'expected IOError ' ) def assert_no_leak ( self ) : self.assert_equal ( messages [ 1 ] , ( 'warning ' , flask.Markup ( u ' < em > Testing < /em > ' ) ) ) def find_all_tests ( suite ) : def set ( ) : called.append ( 1 ) def test_index ( ) : assert not isinstance ( e , ForbiddenSubclass ) return str ( flask.session.get ( 'foo ' , 0 ) ) def test_endpoint_override ( ) : # Verify the error is re-raised if not the current exception . self.assert_equal ( rv.data , b ' b ' ) self.assert_equal ( recorded , [ 'push ' , 'pop ' ] ) ] ) ) # instead of propagating exceptions . rv = c.get ( '/ ' ) raise AssertionError ( 'some kind of exception expected ' ) with self.assert_raises ( AssertionError ) : flask.session [ 'm ' ] = flask.Markup ( 'Hello ! ' ) t.start ( ) self.assert_true ( app.jinja_env.tests [ 'boolean ' ] ( False ) ) def test_session ( self ) : c.get ( '/missing ' ) ) def test_prefix_package_paths ( self ) : @ app.route ( '/1 ' ) tests.basic errors = [ ] if ( buffer.append ( exception ) tests.views rv = app.test_client ( ) .get ( '/ ' ) assert app.test_client ( ) .get ( '/foo ' ) .data == b'Meh ' SERVER_NAME='localhost.localdomain:5000 ' assert list ( messages ) == [ ( 'message ' , u'Hello World ' ) ] str ( modules_tmpdir.join ( 'var/ ' ) .join ( 'site_egg-instance ' ) ) self.assertEqual ( c.get ( '/ ' ) .data , b'index ' ) def error ( ) : self.app = flaskr.app.test_client ( ) assert not flask.current_app def subdomain ( ) : _external=True , # we clear this out for various reasons . The most important one is old_stderr = sys.stderr assert e.args and 'session is unavailable ' in e.args [ 0 ] Tests regressions . messages = flask.get_flashed_messages ( gc.enable ( ) app.logger_name = 'flask_tests/test_suppressed_exception_logging ' return pickle.dumps ( dict ( flask.session ) ) app.config.from_pyfile ( __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' ) def test_config_from_envvar ( ) : def common_object_test ( self , app ) : # Trigger caches def frontend_no ( ) : rv = app.test_client ( ) .open ( '/ ' , method='OPTIONS ' ) assert len ( recorded ) == 1 Engine 's HardenedModulesHook , which have neither the ` get_filename ` method assert b'No entries here so far ' in rv.data def test_suppressed_exception_logging ( self ) : app.config [ config_key ] = True def test_installed_package_paths ( self ) : if cls.__module__ == 'flask.exthook ' and \ def sub ( ) : app.register_blueprint ( test ) assert flask.url_for ( 'myview ' , _method='GET ' ) == '/myview/ ' add_to_path ( os.path.join ( example_path , 'minitwit ' ) ) def get ( ) : self.assert_equal ( sorted ( rv.allow ) , [ 'OPTIONS ' ] ) c.get ( '/fail ' ) assert ( 'trying loader of blueprint `` frontend '' ' def foo ( bar , baz ) : del sys.modules [ 'site_egg ' ] rv = self.register ( 'user1 ' , 'default ' ) ( 'warning ' , flask.Markup ( u ' < em > Testing < /em > ' ) ) rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost:3000/ ' ) called.append ( 6 ) with c.session_transaction ( ) : self.assert_equal ( app.jinja_env.tests [ 'boolean ' ] , is_boolean ) self.assert_equal ( rv.status_code , 200 ) def super_reverse ( s ) : assert type ( rv ) == text_type import sys self.assert_equal ( rv.data.strip ( ) , b ' < h1 > Hello World ! < /h1 > ' ) if not os.path.isdir ( path ) : messages = flask.get_flashed_messages ( with_categories=True ) rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) deps= class SubdomainTestCase ( FlaskTestCase ) : def test_subdomain ( self ) : import pyflakes.scripts.pyflakes as flakes assert rv.data == b'Hello from the Frontend ' flaskr.app.config [ 'PASSWORD ' ] ) del sys.modules [ 'site_app ' ] 'installed_package-instance ' ) ) return 'Foo ' # Werkzeug 0.7 `` `` '' Make sure that timelines work '' '' '' return 'POST ' assert expires.month == expected.month @ app.route ( '/ ' , subdomain= ' < user > ' ) add_message ( client , 'the message by foo ' ) Names which are used but not defined or used before they are defined . ( 'SECRET_KEY ' , 'devkey ' ) , self.assert_equal ( flask.url_for ( 'static ' , filename='index.html ' ) , pip install -r .travis- $ REQUIREMENTS-requirements.txt init = app.join ( '__init__.py ' ) frontend = flask.Blueprint ( 'frontend ' , __name__ ) self.assert_equal ( rv , ' '' \\u0027 '' ' ) ctx.pop ( ) called = [ ] app.config [ 'FOO_OPTION_2 ' ] = 'foo option 2 ' self.assert_equal ( lines , [ self.assert_true ( `` Expected ValueError '' ) assert rv.data == b'success ' c.get ( '/test/ ' ) def index ( test= ' a ' ) : @ frontend.route ( '/fe ' ) def post ( self ) : from werkzeug.utils import import_string , find_modules def test_with_categories ( ) : assert 'WARNING in test_helpers [ ' in err blueprint = MyBlueprint ( 'blueprint ' , __name__ , static_folder='static ' ) app = flask.Flask ( __name__ , instance_path=str ( modules_tmpdir ) ) calls.append ( 'after-signal ' ) def test_endpoint_override ( self ) : ctx = app.test_request_context ( ) else : assert rv.data == b ' '' < 42 > '' ' bp = flask.Blueprint ( 'bp ' , __name__ ) assert isinstance ( e , BadRequest ) suite.addTest ( unittest.makeSuite ( MiniTwitTestCase ) ) t = Thread ( target=get_and_assert ) def test_teardown_on_pop ( ) : with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost ' } ) : return u'Hällo Wörld ' import flask self.assertEqual ( rv.data , b '' ) class SendfileTestCase ( FlaskTestCase ) : import logging tests.test_instance self.assert_raises ( ValueError , bp.add_app_template_filter ( my_reverse , 'super_reverse ' ) `` `` '' Catch stderr in a StringIO '' '' '' raise MyDecoratorException ( ) def catcher ( error ) : APPLICATION_ROOT='/bar ' def test_escaping ( ) : def test_config_from_file ( self ) : flaskr.app.config [ 'PASSWORD ' ] + ' x ' ) def test_g_iteration_protocol ( ) : self.assert_true ( msg.endswith ( `` missing.json ' '' ) ) rv = self.app.get ( '/foo/unfollow ' , follow_redirects=True ) client = app.test_client ( ) loc = flask._request_ctx_stack._local for entry , value in list ( sys.modules.items ( ) ) : itsdangerous==0.21 def my_function_exception_handler ( e ) : recursive-include flask/testsuite/static * rv = client.post ( '/add_message ' , data= { 'text ' : text } , assert 0 , 'expected config ' self.assert_equal ( index ( ) , 'Hello World ! ' ) with self.assert_raises ( ImportError ) : def register_and_login ( self , username , password ) : except IOError as e : import gc try : assert rv.mimetype == 'text/html ' def test_session_special_types ( ) : return update_wrapper ( new_f , f ) with c.session_transaction ( ) : def test_apps ( monkeypatch ) : def test_flaskext_broken_package_no_module_caching ( flaskext_broken ) : def test_flaskext_old_package_import_module ( oldext_package ) : assert rv.data == b'foo ' self.assert_equal ( rv.data , b'Awesome ' ) def test_blueprint_url_processors ( ) : def new_f ( self , * args , * * kwargs ) : sys.path.remove ( site_packages ) with pytest.raises ( ImportError ) as excinfo : app.testing = True return ' % s/ % d ' % ( bar , baz ) self.loader = loader assert msg.endswith ( `` missing.cfg ' '' ) # class Config ( flask.Config ) : self.assert_equal ( resp.data , u'Hällo Wörld'.encode ( 'utf-8 ' ) ) return flask.url_for ( 'myapp.frontend.frontend_index ' ) leaks = [ ] bp.add_app_template_filter ( super_reverse ) import_hooks += 1 assert c.get ( '/py/bar ' ) .data == b'bp.bar ' def from_string ( ) : assert rv.headers [ ' x-sendfile ' ] == \ flask.Response ( `` , headers= { 'Content-Type ' : 'text/html ' } ) , # config keys used for the TestConfig lowest : blinker==1.0 password=password with self.assert_raises ( ZeroDivisionError ) : # Test a custom handler . meths = parse_set_header ( c.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) assert flask.url_for ( 'admin.static ' , filename='test.txt ' ) == '/admin/static/test.txt ' self.assert_equal ( template.name , 'simple_template.html ' ) return None self.register_and_login ( 'foo ' , 'default ' ) `` `` '' Make sure logging in and logging out works '' '' '' def loadTestsFromName ( self , name , module=None ) : ( ' . ' + name + ' . ' ) in testname or \ def test_session_transactions ( self ) : is_permanent = True assert rv.data == b'http : //localhost/ ' .mkdir ( 'lib ' ) \ sys.path.remove ( egg_path ) self.spam = 'eggs ' @ sideend.route ( '/what-is-a-sideend ' ) called.append ( 2 ) sys.meta_path.append ( Loader ( ) ) self.assert_in ( b'Internal Server Error ' , rv.data ) assert rv.data == b ' < h1 > 42 < /h1 > ' assert c.get ( '/more ' ) .data == b'GET ' return flask.url_for ( 'about ' , lang_code='en ' ) assert rv.status_code == 200 entry.startswith ( 'flask.ext . ' ) or callable ( * args , * * kwargs ) `` `` '' Check if adding messages works '' '' '' self.assert_not_in ( 'httponly ' , cookie ) if password2 is None : email = username + ' @ example.com ' def test_subdomain_basic_support ( ) : Test that certain behavior of flask can be customized by from logging import StreamHandler app.secret_key = 'development key ' assert app.instance_path == str ( modules_tmpdir.join ( 'instance ' ) ) def main ( ) : return 'success ' self.assert_equal ( installed_package.app.instance_path , self.assertEqual ( rv.data , b'42 ' ) Pluggable views . tests.conftest return 'success ' yield mod.suite ( ) self.assert_equal ( c.get ( '/3 ' ) .data , b'apple ' ) @ bp.app_template_test ( ) f ( * args , * * kwargs ) s = suites.pop ( ) with app.test_request_context ( '/somepage ' ) : bp.add_app_template_test ( is_boolean , 'boolean ' ) def test_session_using_server_name ( self ) : import missing_module ctx = app.test_request_context ( '/ ? name=World ' ) client = app.test_client ( ) self.assert_ ( ' 2 : trying loader of blueprint `` admin '' ' response.data += b'|after ' Tests the application context . def test_request_locals ( self ) : self.assert_true ( isinstance ( errors [ 0 ] , ZeroDivisionError ) ) def test_add_template_test ( self ) : fire ( ) assert rv.data == b'index ' ~~~~~~~~~~~~~~ def test_filters ( ) : del sys.modules [ 'installed_package ' ] rv3 = c.get ( '/args_status ' ) def limit_loader ( request , monkeypatch ) : set_cookie = rv.headers.get ( 'set-cookie ' ) def index ( user ) : suite.addTest ( unittest.makeSuite ( InstanceTestCase ) ) try : assert 'path=/foo ' in rv.headers [ 'set-cookie ' ] .lower ( ) def test_endpoint_decorator ( ) : if email is None : except ZeroDivisionError : def test_template_test_after_route_with_template ( ) : rv = app.test_client ( ) .get ( '/ ' ) .data return '|'.join ( args ) assert cleanup_stuff == [ None ] flask.g.value = 42 assert False , 'expected IOError ' entry.startswith ( 'flask_ ' ) or return flask.request.method def __init__ ( self ) : assert options [ 'filename ' ] == 'index.txt ' return isinstance ( value , bool ) This fixture will run the testcase twice , once with and once without the app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] = False for testcase , testname in find_all_tests ( root ) : self.assert_equal ( c.get ( '/bump ' ) .data , b ' 1 ' ) return self.app.post ( '/login ' , data= { def is_boolean ( value ) : from imp import reload as reload_module ' '' , app.write ( 'import flask\napp = flask.Flask ( __name__ ) ' ) environ [ 'SCRIPT_NAME ' ] = self.prefix self.assert_equal ( len ( captured ) , 2 ) return 'Meh ' rv = c.get ( '/test ' ) self.assert_equal ( b'internal server error ' , rv.data ) self.assert_equal ( rv.data , b'success ' ) rv = pickle.loads ( c.get ( '/ ' ) .data ) assert app.instance_path == os.path.join ( here , 'instance ' ) assert b'You have to enter a valid email address ' in rv.data assert ' 1 : trying loader of application `` blueprintapp '' ' in text import tempfile db_fd , minitwit.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) def from_response_instance_status_tuple ( ) : SESSION_COOKIE_DOMAIN='.example.com ' , envlist = { py26 , py27 , pypy } - { lowest , release , devel } , { py33 , py34 } - { release , devel } def test_template_filter_with_name_and_template ( self ) : return repr ( flask.session.get ( 'foo ' ) ) flask.flash ( flask.Markup ( u ' < em > Testing < /em > ' ) , 'warning ' ) max_age_default = app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] def test_get_namespace ( self ) : assert b'You were logged out ' in rv.data @ bp.route ( '/bar/123 ' , endpoint='123 ' ) self.old_objects = len ( gc.get_objects ( ) ) import os set_cookie = rv.headers.get ( 'set-cookie ' ) def test_flashes ( self ) : self.assert_equal ( rv.headers [ ' X-Foo ' ] , 'Testing ' ) def working ( ) : flask.flash ( 'This is a flash message ' , category='notice ' ) assert flask.url_for ( 'hello ' , name='test x ' , _external=True ) == \ self.assert_equal ( newext_package.ext_id , 'newext_package ' ) self.assert_equal ( rv.headers [ ' x-sendfile ' ] , app.secret_key = 'testkey ' @ app.route ( '/ < lang_code > /about ' ) return self.assertEqual ( x , y ) self.assert_equal ( rv.data , b'Hello Custom World ! ' ) assert rv.data == b '' app.config.update ( SERVER_NAME='localhost ' ) tests.blueprints self.assert_equal ( context [ 'whiskey ' ] , 42 ) def test_missing_session ( ) : app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = expected_max_age def test_flaskext_old_package_import_module ( self ) : # At this point another request does nothing . def test_urls ( client ) : 'import missing_module ' ) def test_basic_support ( self ) : # now unfollow and check if that worked 'file ( No such file or directory ) : ' ) ) with flask._app_ctx_stack.top : import flask.ext.broken.b from werkzeug.exceptions import BadRequest , NotFound , Forbidden return u'Hällo Wörld'.encode ( 'utf-8 ' ) self.assert_equal ( app.permanent_session_lifetime.seconds , 42 ) assert rv.data == b'Hello Server Error ' return flask.url_for ( '.frontend_index ' ) def test_egg_installed_paths ( install_egg , modules_tmpdir , response.data = 'stuff ' app = installed_path.mkdir ( 'installed_package ' ) class TestToolsTestCase ( FlaskTestCase ) : SESSION_COOKIE_SECURE=True , assert flask.render_template_string ( ' { { g.spam } } ' ) == 'eggs ' assert e.name == 'missing.html ' recursive-include flask/testsuite/templates * def test_manual_context_binding ( self ) : Blueprint Example Tests def test_safe_join_toplevel_pardir ( ) : with app.test_client ( ) as c : def error ( ) : return `` Response '' def foo_bar ( ) : def create_global_jinja_loader ( self ) : assert rv.data == b'normal index ' app.config [ 'SESSION_REFRESH_EACH_REQUEST ' ] = True app.wsgi_app = PrefixPathMiddleware ( app.wsgi_app , '/bar ' ) return 'frontend says no ' , 403 rv = c.get ( '/ ' ) suite.addTest ( other_suite ) def test_nonascii_pathinfo ( ) : self.assert_equal ( c.post ( '/more ' ) .data , b'POST ' ) self.assert_equal ( sorted ( rv.allow ) , [ 'GET ' , 'HEAD ' , 'OPTIONS ' ] ) import site_app def before1 ( ) : match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ( ? i ) ' , rv.headers [ 'set-cookie ' ] ) def test_multi_route_class_views ( ) : app.logger.addHandler ( StreamHandler ( out ) ) self.assert_equal ( rv.data , b'index for mitsuhiko ' ) except AssertionError : class Loader ( object ) : except KeyError as e : def test_register ( client ) : import flask.views assert c.get ( '/py/bar/123 ' ) .data == b'bp.123 ' return 'Aha ! ' rv = c.get ( '/ ' , 'http : //test.localhost/ ' ) assert len ( messages ) == 3 assert flask.url_for ( 'bar ' ) == '/bar/ ' Binary files /dev/null and b/flask/testsuite/test_apps/lib/python2.5/site-packages/SiteEgg.egg differ app.config [ 'SECRET_KEY ' ] = 'secret ' self.assert_equal ( c.get ( '/1,2,3 ' ) .data , b ' 1|2|3 ' ) self.assert_equal ( rv.data , b ' [ 42 ] ' ) with catch_deprecation_warnings ( ) as captured : raise ForbiddenSubclass ( ) script : make test all_tests.append ( testcase ) assert ( ' 2 : trying loader of blueprint `` admin '' ' rv = modules_tmpdir \ return 42 for item in sys.meta_path : @ app.route ( '/ < lang_code > / ' ) assert b'the message by bar ' in rv.data @ bp.route ( '/bar/foo ' ) assert rv.data == b ' { \n `` msg '' : `` W00t '' \n } ' return flask.render_template_string ( ' { { config } } ' , config=42 ) @ app.route ( '/set ' , methods= [ 'POST ' ] ) self.assert_equal ( messages [ 1 ] , ( 'error ' , u'Hello World ' ) ) bp.add_app_template_filter ( my_reverse ) # Just a test . def test_url_generation_without_context_fails ( ) : self._ctx.push ( ) def after_request_handler ( response ) : self.assert_equal ( values , expected ) recorded.append ( 'pop ' ) @ blue.errorhandler ( MyDecoratorException ) self.assert_equal ( oldext_package.ext_id , 'oldext_package ' ) app.config [ 'FOO_OPTION_2 ' ] = 'foo option 2 ' flask.testsuite.examples class MyBlueprint ( flask.Blueprint ) : assert isinstance ( errors [ 0 ] , ZeroDivisionError ) self.assertEqual ( c.get ( '/py/bar ' ) .data , b'bp.bar ' ) ext_id = 'newext_simple ' APPLICATION_ROOT='/foo ' def new_function ( * args , * * kwargs ) : class PrefixPathMiddleware ( object ) : raise Foo ( ) return ' x ' def to_python ( self , value ) : from logging import StreamHandler return DictLoader ( { 'index.html ' : 'Hello Custom World ! ' } ) assert 'bar stuff 2 ' == bar_options [ 'STUFF_2 ' ] def test_implicit_head ( self ) : return response entry.startswith ( 'flask_ ' ) or def index1 ( ) : self.assert_equal ( rv.headers [ ' X-Method ' ] , 'HEAD ' ) value=23 ) # fake package . Secondly we want to make sure that the flaskext for entry , value in list ( sys.modules.items ( ) ) : os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) def test_preserve_only_once ( self ) : def fail_func ( ) : @ app.errorhandler ( 403 ) class TestSendfile ( object ) : raise RuntimeError ( 'Test case where BuildError is not current . ' ) assert flask._request_ctx_stack.top is None assert not flask.session.modified if 'site_app ' in sys.modules : del called [ : ] class Foo ( Exception ) : assert flask.current_app == app assert 'after ' in evts @ backend.errorhandler ( 403 ) next = next.tb_next assert 0 , 'expected runtime error ' app.config [ 'APPLICATION_ROOT ' ] = '/foo ' c.get ( '/test/ ' ) suite.addTest ( unittest.makeSuite ( SubdomainTestCase ) ) self.assert_equal ( messages [ 2 ] , flask.Markup ( u ' < em > Testing < /em > ' ) ) return `` Ignored '' assert 'this is a debug statement ' in err from flask.ext.oldext_package.submodule import test_function self.assert_true ( isinstance ( e , MyDecoratorException ) ) `` `` '' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # import hook does not break on reloading . assert os.path.basename ( __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' ) in err return flask.session.get ( 'data ' , ' < missing > ' ) app.config.from_json ( os.path.join ( current_dir , 'static ' , 'config.json ' ) ) def test_template_filter ( ) : assert len ( captured ) == 1 def test_flaskext_old_package_import_normal ( self ) : with client.session_transaction ( ) : app.register_blueprint ( bp ) def for_bar ( ) : app.inject_url_defaults ( 'foo.bar.baz.view ' , values ) def index1 ( ) : def __init__ ( self ) : # test that all teardown_requests get passed the same original SERVER_NAME='example.com ' return u '' if not hasattr ( c , 'redirect_client ' ) : def foo_bar_foo ( ) : .mkdir ( 'python { x [ 0 ] } . { x [ 1 ] } '.format ( x=sys.version_info ) ) \ assert 'missing_template.html ' in str ( excinfo.value ) self.assert_equal ( site_package.app.instance_path , def foo_foo_foo ( ) : for config_key in 'TESTING ' , 'PROPAGATE_EXCEPTIONS ' , 'DEBUG ' , None : assert flask.url_for ( '123 ' ) == '/bar/123 ' self.assert_ ( 'looked up from an endpoint that belongs to ' def test_flaskext_new_package_import_submodule ( newext_package ) : def test_teardown_with_previous_exception ( ) : c.get ( '/ ' ) assert b'The username is already taken ' in rv.data assert ctx.request.url == 'http : //localhost/ ' pip install -- editable . import pickle rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) app.config.from_json ( 'missing.json ' ) def test_flaskext_new_simple_import_module ( newext_simple ) : ' { { foo } } ' ) def test ( ) : recorded.append ( ( template , context ) ) return text_type ( flask.session.permanent ) except IOError as e : return 'value set ' def after2 ( response ) : all_tests = [ ] assert rv == 'https : //localhost/ ' `` ( 'localhost.localdomain ' ) does not match the `` .mkdir ( 'site-packages ' ) def success_func ( ) : self.assert_equal ( value , 'attachment ' ) assert rv4.headers [ ' X-Bar ' ] == 'Foo ' def register ( client , username , password , password2=None , email=None ) : @ app.route ( '/2 ' ) def test_url_generation_requires_server_name ( self ) : def test_proper_test_request_context ( self ) : from config_package_app import app return new_function ' '' response = c.get ( url ) flask.session.modified = False def test_template_test_with_template ( self ) : entry.startswith ( 'flaskext . ' ) or def test_disallow_string_for_allowed_methods ( self ) : @ app.route ( '/unicode ' ) assert `` Expected ValueError '' recorded.append ( ( message , category ) ) with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost:80 ' } ) : '/myview/ ' ) self.assert_equal ( type ( exc ) , ZeroDivisionError ) rv = c.get ( '/ ' ) t.join ( ) @ bp.app_template_filter ( 'super_reverse ' ) import site_package return response assert 'See http : //flask.pocoo.org/docs/blueprints/ # templates ' in text # dicts if they contain mutable objects . It 's a horrible , class ExceptionTestCase ( FlaskTestCase ) : flask.Response ( `` , headers= { 'Content-Type ' : 'text/html ' } ) , @ bp.route ( '/foo ' ) assert ' A setup function was called ' in str ( e ) break it . assert flask.g.value == 42 assert False @ blue.route ( '/decorator ' ) def to_python ( self , value ) : c.get ( '/test_filter/ ' ) assert c.get ( '/function ' ) .data == b'bam ' flask.request_finished.connect ( after_request_signal , app ) self.assert_equal ( flask.url_for ( 'hello ' , name='test x ' ) , '/hello/test % 20x ' ) class Config ( flask.Config ) : self.assert_false ( flask.request ) return { 'injected_value ' : 42 } SERVER_NAME='example.com:8080 ' , flask.appcontext_pushed.connect ( record_push , app ) assert sess [ 'foo ' ] == [ 42 ] rv4 = c.get ( '/args_header ' ) loc = flask._request_ctx_stack._local expected_prefix = os.path.join ( here , 'test_apps ' ) rv = client.get ( '/ ' ) suite.addTest ( unittest.makeSuite ( StreamingTestCase ) ) self.assert_equal ( value , 'attachment ' ) self.assert_equal ( c.get ( '/what-is-a-sideend ' ) .data , b'application itself says no ' ) assert c.get ( '/foo ' ) .data == b'/en/about ' assert rv.data == b'http : //example.com:1234/foo/ ' def frontend_index ( ) : warnings.simplefilter ( 'default ' , category=DeprecationWarning ) # when they expect no exception on the stack . from werkzeug.routing import BuildError assert result == 42 expected = datetime.utcnow ( ) + app.permanent_session_lifetime self.assert_equal ( 2 , len ( bar_options ) ) log = [ ] @ app.endpoint ( 'index ' ) def get_and_assert ( ) : except ImportError : Tests the MiniTwit application . # horrible hack but makes this kinda testable . app.url_map.add ( Submount ( '/foo ' , [ app.config [ 'BAR_STUFF_1 ' ] = 'bar stuff 1 ' @ app.teardown_request base.join ( name ) .join ( '__init__.py ' ) .ensure ( ) from flaskr_tests import FlaskrTestCase # but on the user 's page we only want the user 's message flask.session [ 't ' ] = ( 1 , 2 , 3 ) flask.jsonify ( { 'msg ' : 'W00t ' } ) , 400 ) suite.addTest ( unittest.makeSuite ( BasicFunctionalityTestCase ) ) app.add_template_test ( boolean ) def register ( self , username , password , password2=None , email=None ) : self.setup ( ) c.get ( '/test_filter/ ' ) # Test base case , a URL which results in a BuildError . out , err = capsys.readouterr ( ) b'and can login now ' in rv.data except RuntimeError : return 'Aha ! ' assert 'Exception on / [ GET ] ' in err calls.append ( 'before-signal ' ) # debug flag is set to true and an exception happens the context is _gc_lock.acquire ( ) return flask.request.url rv = blueprint.send_static_file ( 'index.html ' ) c.post ( '/foo ' , data= { } ) assert rv.data == b ' < p > 23|42 ' from blueprintapp import app self.assert_true ( 0 , 'expected config ' ) app.config.from_envvar ( 'FOO_SETTINGS ' ) 400 , [ ( ' X-Foo ' , 'bar ' ) ] ) def test_login_logout ( self ) : `` `` '' Records a message '' '' '' app.add_template_filter ( my_reverse , 'super_reverse ' ) self.assert_false ( rv.data ) # head truncates def index3 ( ) : assert ext_id == 'oldext_package ' self.assert_equal ( rv.data , b'not found ' ) assert 'set-cookie ' in rv.headers is_permanent = True raise MyException ( ) assert not app.got_first_request def test_flaskext_old_simple_import_module ( oldext_simple ) : def test_teardown_request_handler ( self ) : # - * - coding : utf-8 - * exc_type , exc_value , tb = sys.exc_info ( ) def backend_forbidden ( e ) : def test_template_filter_with_name_and_template ( ) : init.write ( return isinstance ( value , bool ) class NoImportsTestCase ( FlaskTestCase ) : def test_trapping_of_bad_request_key_errors ( ) : 'username ' : username , self.assert_equal ( str ( exc_value ) , message ) assert rv.data == b'W00t ' assert app.secret_key == 'devkey ' SECRET_KEY = 'devkey ' return catcher self.assert_true ( flask._request_ctx_stack.top.request.environ app.add_url_rule ( '/ ' , view_func=BetterIndex.as_view ( 'index ' ) ) return s [ : :-1 ] assert rv.headers [ ' X-Method ' ] == 'GET ' sess [ 'foo ' ] = [ 42 ] assert 'foo option 1 ' == foo_options [ 'option_1 ' ] purge_module ( 'site_package ' ) self.assert_equal ( rv.data , b ' 3 ' ) devel : git+git : //github.com/mitsuhiko/jinja2.git self.assert_false ( hasattr ( flask.g , 'value ' ) ) self.assert_equal ( str ( e ) , 'View function did not return a response ' ) SECRET_KEY = 'devkey ' follow_redirects=True ) flask.Flask ( __name__ , instance_path='instance ' ) assert rv4.headers [ ' X-Foo ' ] == 'Bar ' rv = flask.make_response ( ) self.assert_equal ( called , [ None , None ] ) r = client.get ( '/pages/world ' ) @ app.route ( '/two_args ' ) self.assertRaises ( BuildError , flask.url_for , 'spam ' ) self.assertFalse ( x , msg ) from flask.ext.newext_package.submodule import test_function finally : self.assert_equal ( type ( rv [ ' b ' ] ) , bytes ) greenlets = [ ] `` `` '' Helper function to login '' '' '' if password2 is None : def test_after_request_processing ( ) : release : blinker assert ( 'looked up from an endpoint that belongs to ' rv = c.get ( u'/киртест ' ) flask.session [ 'm ' ] = flask.Markup ( 'Hello ! ' ) self.spam = 'eggs ' except TemplateNotFound as e : ~~~~~~~~~~~~~~~~~~~~~~~~~~~ def test_template_test_after_route_with_template ( self ) : self.assert_true ( e.args and 'session is unavailable ' in e.args [ 0 ] ) t.start ( ) assert x not in y , `` % r unexpectedly in % r '' % ( x , y ) self.assert_ ( ' 1 : trying loader of application ' AssertionError , self.assert_equal ( expires.month , expected.month ) assert app.config [ 'JSON_SORT_KEYS ' ] == True return 'Meh ' for test in all_tests : except IOError as e : def test_preserve_only_once ( ) : @ app.route ( '/foo ' ) self.assert_true ( log , 'expected deprecation warning ' ) if flask.signals_available : assert flask._app_ctx_stack.top == None assert flask.session.get ( 'data ' ) == 'foo ' assert got == [ 42 ] def common_test ( app ) : assert b'Invalid username ' in rv.data self.assert_equal ( messages [ 1 ] , flask.Markup ( u ' < em > Testing < /em > ' ) ) import pytest pass def cleanup ( exception ) : bp = flask.Blueprint ( 'test ' , __name__ ) from flask import ext self.assert_equal ( c.get ( '/more ' ) .data , b'GET ' ) self.assert_equal ( c.get ( '/ ' ) .data , b'None ' ) app.add_url_rule ( '/ ' , view_func=view ) c.get ( '/test_filters_without_returning_categories/ ' ) return 'Foo SubDomain ' assert c.get ( '/ ' ) .data == b'GET ' try : msg = 'Mocking a loader which does not have ` % s. ` ' % name def frontend_index ( ) : rv = register ( client , 'user1 ' , 'default ' ) self.fail ( 'Expected runtime error ' ) called.append ( 6 ) rv = app.test_client ( ) .get ( '/ ? foo=bar ' ) request.addfinalizer ( lambda : sys.modules.pop ( name , None ) ) [ sys.executable , 'setup.py ' , 'bdist_egg ' ] , self.register_and_login ( 'bar ' , 'default ' ) self.assert_equal ( rv3.mimetype , 'text/html ' ) self.assert_equal ( app.jinja_env.globals [ 'get_stuff ' ] , get_stuff ) with c : class Other ( Index ) : return 'index ' def foo ( response ) : def something ( page ) : def test_add_template_filter_with_name_and_template ( ) : def frontend_page2 ( ) : with reqctx : def test_request_locals ( ) : self.assert_equal ( rv , _gc_lock = threading.Lock ( ) assert rv.mimetype == 'text/plain ' except AssertionError as e : rv = client.get ( '/bar ' ) test_greenlet_context_copying = None assert False , 'expected exception ' assert rv.data == b'/test/ ' self.test_case = test_case def finish1 ( exc ) : called.append ( error ) except Exception : c.get ( '/test_with_categories/ ' ) assert called == [ 42 ] self.assert_equal ( flask.current_app , app ) assert b'You are now following & # 34 ; foo & # 34 ; ' in rv.data def my_decorator_exception_handler ( e ) : raise AssertionError ( 'expected AssertionError not raised ' ) def after_request_handler ( response ) : self.assert_equal ( cc.max_age , expected_max_age ) self.assert_equal ( app.jinja_env.tests [ 'boolean ' ] , boolean ) assert 'boolean ' in app.jinja_env.tests.keys ( ) def teardown_req ( error=None ) : self.assert_equal ( rv.mimetype , 'application/octet-stream ' ) def assert_false ( self , x , msg=None ) : @ bp.route ( '/ ' ) ' X-Foo ' : 'Test ' , self.common_object_test ( app ) assert rv.data == f.read ( ) resp = c.get ( '/other ' ) app.config [ 'PREFERRED_URL_SCHEME ' ] = 'https ' Configuration and instances . def importhook_setup ( monkeypatch , request ) : category_filter= [ 'message ' ] , with_categories=True ) python run-tests.py def record ( sender , exception ) : whatever = 42 flask.appcontext_pushed.connect ( record_push , app ) def initialize_options ( self ) : def dump_session_contents ( ) : rv = flask.url_for ( 'index ' ) app.config.update ( SERVER_NAME='localhost.localdomain ' ) @ app.route ( '/ ' , subdomain='test ' ) flask.session [ ' b ' ] = b'\xff ' def test_config_from_class ( ) : subclasses . assert type ( rv [ 'm ' ] ) == flask.Markup import site_egg # in SiteEgg.egg def meh ( ) : if not isinstance ( name , str ) : self.assert_equal ( rv.data , b'foo ' ) self.assert_true ( flask.request ) def index ( test= ' a ' ) : if flask.request.method == 'POST ' : calls.append ( 'handler ' ) assert rv == '42 ' sys.stderr = old_stderr self.assert_in ( 'no file contents were transmitted ' , str ( e ) ) def test_max_content_length ( self ) : assert app.jinja_env.tests [ 'boolean ' ] == is_boolean self.assert_equal ( rv [ 'dt ' ] , now ) @ app.route ( '/bump ' ) return flask.session [ 'value ' ] try : rv = c.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) rv = c.post ( '/ ' ) self.app.config [ 'SERVER_NAME ' ] = 'example.com ' return flask.render_template ( 'index.html ' ) tests.subclassing def suite ( ) : SERVER_NAME='example.com:8080 ' , TEST_KEY = 'foo ' @ self.app.route ( '/ < company_id > ' ) def teardown_handler ( exc ) : assert called == [ None , None ] self.assert_equal ( flask.url_for ( 'index ' , _external=True ) , 'http : //localhost.localdomain:5000/ ' ) self.assert_equal ( flask.g.x , 42 ) class ViewTestCase ( FlaskTestCase ) : return ' x ' def test_config_missing ( self ) : def test_custom_app_ctx_globals_class ( self ) : assert 'domain=.example.com ' in cookie def handle_foo ( e ) : def test_options_on_multiple_rules ( self ) : flask.abort ( 404 ) def setup_path ( ) : r = client.get ( '/ ' ) self.assert_equal ( rv2.headers [ ' X-Foo ' ] , 'Test ' ) def catcher ( error ) : except Exception as e : # Force Python to track this dictionary at all times . self.assert_equal ( rv.mimetype , 'text/html ' ) called.append ( 3 ) self.assert_equal ( import_hooks , 1 ) def test_custom_template_loader ( ) : sys.path.remove ( installed_path ) @ flask.after_this_request rv = c.get ( '/getsession ' ) assert 'vodka ' in flask.request.args def dispatch_request ( self ) : c.get ( '/ ' ) app.config [ 'BAR_STUFF_2 ' ] = 'bar stuff 2 ' self.assert_equal ( rv , 'Hello Special World 42 ' ) return 'bam ' ' '' ) from flask.ext.newext_package import ext_id rv = flask.render_template_string ( 'Hello { { config.WORLD_NAME } } ' assert b'Internal Server Error ' in resp.data raise AssertionError ( 'expected AssertionError not raised ' ) self.assert_equal ( rv.data , b'Test ' ) del sys.modules [ 'site_package ' ] def add_language_code ( endpoint , values ) : return flask.request.endpoint def test_session_transactions_no_null_sessions ( ) : bp = flask.Blueprint ( 'frontend ' , __name__ , url_prefix='/ < lang_code > ' ) url = flask.url_for ( 'view ' , company_id='xxx ' ) from __future__ import print_function def success_func ( ) : def newext_package ( modules_tmpdir ) : `` `` '' Start with a blank database . '' '' '' self.assert_equal ( app.jinja_env.filters [ 'strrev ' ] ( 'abcd ' ) , 'dcba ' ) flaskext.join ( 'oldext_simple.py ' ) .write ( 'ext_id = `` oldext_simple '' ' ) assert b'No entries here so far ' not in rv.data c.get ( '/ ' ) return 42 oldext.join ( '__init__.py ' ) .write ( 'ext_id = `` oldext_package '' ' ) assert rv.data == b ' b ' class Other ( Index ) : @ app.route ( '/args ' ) not hasattr ( sys , 'pypy_translation_info ' ) : flask.message_flashed.disconnect ( record , app ) t.start ( ) assert flask.request.path == '/ ' return flask.render_template_string ( `` ' flask.abort ( 403 ) app = flask.Flask ( __name__ ) @ bp.route ( '/ ' , defaults= { 'page ' : 1 } ) @ app.route ( '/test_with_categories/ ' ) } ) c.get ( '/ ' ) with pytest.raises ( RuntimeError ) : def inner ( name ) : } , follow_redirects=True ) def teardown ( ) : def test_no_escaping ( ) : def test_subdomain ( ) : rv = c.head ( '/ ' ) app.config [ 'BAR_STUFF_1 ' ] = 'bar stuff 1 ' suite = unittest.TestSuite ( ) def test_memory_consumption ( ) : def modify_session ( response ) : def normal_index ( ) : with c.session_transaction ( ) as sess : # implicit appctx disappears too raise Foo ( ) def find_module ( self , name ) : @ app.template_global ( ) flask.message_flashed.disconnect ( record , app ) self.assertEqual ( c.get ( '/py/bar/foo ' ) .data , b'bp.bar_foo ' ) import re except : from jinja2 import TemplateNotFound t = Thread ( target=apprunner , args= ( config_key , ) ) def test_session_using_application_root ( self ) : def always_first ( ) : ~~~~~~~~~~~~~~~~~~~~~~ entry == 'flaskext ' rv = c.post ( '/foo ' , data= { } , follow_redirects=True ) def get_session ( ) : except AssertionError as e : assert cc.max_age == expected_max_age pytest.raises ( ValueError , _ = View ( app ) def apprunner ( configkey ) : commands = python run-tests.py [ ] self.fail ( 'Expected exception ' ) # make sure deprecation warnings are active in tests with flask.Flask ( __name__ ) .test_request_context ( ) : with app.test_request_context ( '/ ? name=World ' ) : app.config [ 'PREFERRED_URL_SCHEME ' ] = 'https ' def boolean ( value ) : Rule ( '/bar ' , endpoint='bar ' ) , `` server name from the WSGI environment ( 'foo.localhost ' ) '' raise NotImplementedError assert lines == sorted_by_str for testing instead of the camelcased ones in the baseclass for # if testname == name or \ oldext.join ( 'submodule.py ' ) .write ( 'def test_function ( ) : \n ' @ bp.route ( '/about ' ) self.assert_equal ( c.get ( '/function ' ) .data , b'bam ' ) def bump ( ) : flask.Response ( `` ) , 400 ) ctx = app.test_request_context ( ) recursive-include flask/testsuite/test_apps * rv = login ( client , flaskr.app.config [ 'USERNAME ' ] + ' x ' , return 'DELETE ' if not PY2 : purge_module ( 'config_module_app ' ) # extra dependencies reraise ( exc_type , exc_value , tb ) self.assert_equal ( c.get ( '/be ' ) .data.strip ( ) , b'/fe ' ) self.assertEqual ( c.get ( '/foo/ ' ) .data , b'foo ' ) def test_config_missing ( ) : flask.abort ( 403 ) @ app.route ( '/error ' ) def to_url ( self , value ) : # stack otherwise and we want to ensure that this is not the case SECRET_KEY = 'devkey ' self.assertRaises ( : license : BSD , see LICENSE for more details . from flask.ext import oldext_package if greenlet is None : from werkzeug.exceptions import NotFound s._testMethodName def test_template_test ( self ) : # Just a test . `` ( 'localhost.localdomain:443 ' ) does not match the `` assert rv2.data == b'Hello ' pass `` `` '' Baseclass for all the tests that Flask uses . Use these methods assert c.get ( '/fe ' ) .data.strip ( ) == b'/be ' self.assert_equal ( rv , ' '' \\u003c ! -- \\u003cscript\\u003e '' ' ) @ app.errorhandler ( Foo ) up tests from different sources and we 're doing this programmatically import blueprintexample def logout ( self ) : errors = [ ] return flask.url_for ( 'app_index ' ) self.assert_equal ( app.secret_key , 'devkey ' ) py.test os.environ = { } rv = c.post ( '/ ' , data= { } , follow_redirects=True ) def __call__ ( self , environ , start_response ) : assert c.get ( '/de/about ' ) .data == b'/foo ' return egg_path assert rv.data == b ' 3 ' rv = c.get ( '/admin/static/test.txt ' ) ) return 'request ' assert isinstance ( e , MyFunctionException ) flask.testsuite.config c = app.test_client ( ) assert rv.status_code == 200 def test_enctype_debug_helper ( ) : class FlaskSubclassingTestCase ( FlaskTestCase ) : def test_greenlet_context_copying_api ( ) : self.assertEqual ( rv.data , b ' '' < 42 > '' ' ) warns = 0 def test_custom_converters ( self ) : APPLICATION_ROOT='/test ' , self.app = app def test_url_generation ( self ) : @ app.route ( '/bar/ ' , endpoint='bar ' ) from werkzeug.routing import Submount , Rule decorators = [ add_x_parachute ] def test_teardown_request_handler_debug_mode ( self ) : @ app.route ( u'/киртест ' ) assert b'The username is already taken ' in rv.data lambda : None assert submodule.__name__ == 'flaskext.oldext_package.submodule ' assert c.get ( '/bump ' ) .data == b ' 2 ' assert got == [ 42 ] if os.environ.get ( 'RUN_FLASK_MEMORY_TESTS ' ) == ' 1 ' : self.assert_true ( isinstance ( e , ValueError ) ) if sys.version_info > = ( 2 , 7 ) and \ reload_module ( ext ) self.assertEqual ( c.get ( '/py/foo ' ) .data , b'bp.foo ' ) self.assert_equal ( cc.max_age , 3600 ) self.assertEqual ( rv.data , b'Hello World ! ' ) assert leaks == [ ] from jinja2 import DictLoader if text : self.assert_equal ( rv.data , b ' a ' ) def backend_index ( ) : Tests Flask itself . The majority of Flask is already tested def test_template_test_with_name_and_template ( ) : assert app.test_client ( ) .get ( '/ ' ) .status_code == 500 def assert_equal ( self , x , y ) : # This support requires a new Werkzeug version assert 'path=/bar ' in rv.headers [ 'set-cookie ' ] .lower ( ) # Force Python to track this dictionary at all times . self.assertEqual ( rv.headers [ ' X-Foo ' ] , 'bar ' ) def test_response_creation ( ) : rv = flask.make_response ( 'Awesome ' ) assert len ( sess ) == 1 os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) if not hasattr ( sys , 'getrefcount ' ) : return `` def test_template_filter_after_route_with_template ( ) : flask.session [ 'test ' ] = 'aha ' return 'Hello World ' from flask.debughelpers import DebugFilesKeyError @ bp.route ( '/bar ' , endpoint='bar ' ) os.environ = { 'FOO_SETTINGS ' : __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' } return flask.Response ( `` , headers= { ' X-Method ' : 'HEAD ' } ) else : rv = c.post ( '/foo ' , data= { } , follow_redirects=True ) `` `` '' Yields all testsuites . '' '' '' assert rv [ ' u ' ] == the_uuid assert c.get ( '/decorator ' ) .data == b'boom ' return flask.request.method purge_module ( 'config_package_app ' ) response.data = 'stuff ' def index_put ( ) : def test_before_request_and_routing_errors ( ) : with catch_warnings ( ) as captured : app.test_client ( ) .get ( '/ ' ) def add_message ( self , text ) : suite.addTest ( unittest.makeSuite ( LoggingTestCase ) ) import subprocess AssertionError , c.get ( '/test_with_categories/ ' ) def frontend_no ( ) : app.config.from_pyfile ( 'missing.cfg ' ) class Test ( Base ) : ) and value is not None : self.assert_equal ( oldext_package.__name__ , 'flaskext.oldext_package ' ) ' ( blueprintapp.apps.frontend ) ' in text ) return new_function flask.testsuite.appctx self.testcase = testcase assert app.logger is not logger1 flask.flash ( u'Hello World ' , 'error ' ) SERVER_NAME='example.com ' def getRootSuite ( self ) : def test ( ) : app = SuppressedFlask ( __name__ ) assert flask.json.loads ( rv.data ) == d b ' < p > Hello World ! ' 'password2 ' : password2 , def test_filter ( ) : app.add_url_rule ( '/ ' , 'index ' , index ) self.assert_true ( flask.has_request_context ( ) ) rv2 = c.get ( '/two_args ' ) return flask.redirect ( '/getsession ' ) frontend = flask.Blueprint ( 'myapp.frontend ' , __name__ ) def cleanup ( exception ) : self.assert_true ( tb.tb_frame.f_globals is globals ( ) ) Tests the application context . self.assert_in ( 'httponly ' , rv.headers [ 'set-cookie ' ] .lower ( ) ) self.assertEqual ( c.get ( '/py/bar/123 ' ) .data , b'bp.123 ' ) def ensure_clean_request_context ( ) : assert b'You have to enter a password ' in rv.data app.add_url_rule ( '/ < test > / ' , 'index ' , self.index ) purge_module ( 'installed_package ' ) now = datetime.utcnow ( ) .replace ( microsecond=0 ) app.add_template_test ( boolean ) `` No ValueError exception should have been raised \ '' % s\ '' '' % e assert rv.status_code == 200 def test_explicit_head ( self ) : self.assert_equal ( app.jinja_env.filters [ 'my_reverse ' ] ( 'abcd ' ) , 'dcba ' ) def __init__ ( self , app , prefix ) : with c.session_transaction ( ) as s : app.config.update ( SERVER_NAME='localhost ' ) def test_add_template_test_with_name_and_template ( self ) : import warnings return 'Hi , status ! ' , 400 assert called == [ 1 , 2 , 3 , 4 , 5 , 6 ] assert flask.request.path == '/ ' return suite ( ) assert r.status_code == 200 def end_of_request ( exception ) : return flask.request.endpoint assert flask.url_for ( 'spam ' ) == '/test_handler/ ' import sys , os Tests the Flaskr application . def test_build_error_handler ( self ) : 'your POST-request to this URL ' ) in str ( e ) self.assert_equal ( lines , sorted_by_str ) rv = flask.render_template_string ( ' { { get_stuff ( ) } } ' ) rv = c.head ( '/ ' ) self.assert_equal ( errors [ 1 ] , None ) 'TEST_KEY ' : 'foo ' def after1 ( response ) : suite.addTest ( unittest.makeSuite ( RequestContextTestCase ) ) def test_template_loader_debugging ( self ) : def finalize_options ( self ) : flask.url_for ( 'index ' ) return 'POST ' from flask.ext.oldext_package import submodule rv = c.get ( '/py/bar ' ) r = self.app.get ( '/pages/hello ' ) testname.endswith ( ' . ' + name ) or \ def test_flaskext_new_simple_import_normal ( newext_simple ) : assert b'You have to enter a username ' in rv.data self.assert_equal ( rv.data , b'value ' ) Tests the request context . calls.append ( 'before-handler ' ) self._ctx = self.app.test_request_context ( ) def bp_defaults ( endpoint , values ) : # NoImportsTestCase self.assert_true ( isinstance ( e , MyException ) ) def test_enctype_debug_helper ( self ) : rv = c.get ( '/args ' ) def test_flash_signal ( self ) : assert test_function ( ) == 42 def view ( company_id ) : app.add_template_test ( is_boolean , 'boolean ' ) def dump_session_contents ( ) : for key in ext.__dict__ : with catch_warnings ( ) as log : assert len ( called ) == 1 def test_test_client_context_binding ( ) : return test assert flask.url_for ( 'hello ' , name='test x ' ) == '/hello/test % 20x ' def test_empty_db ( self ) : rv = flask.session [ 'foo ' ] = flask.session.get ( 'foo ' , 0 ) + 1 fire ( ) self.db_fd , minitwit.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( ) self.assert_in ( 'WARNING in helpers [ ' , out ) 1 // 0 SECRET_KEY = 'devkey ' raise MyFunctionException ( ) @ app.route ( '/action ' , methods= [ 'POST ' ] ) return str ( rv ) flask.g.value = 23 cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) Blueprint Example Tests self.assert_true ( app.jinja_env.auto_reload ) rv = c.get ( '/admin/static/css/test.css ' ) rv.close ( ) def test_name_with_import_error ( self ) : @ app.route ( '/test_filter/ ' ) cls.__name__ == 'ExtensionImporter ' : rv = c.get ( '/ ' , 'http : //localhost/ ' ) return self assert b'You were logged in ' in rv.data def internal_server_error ( e ) : template , context = recorded [ 0 ] common_object_test ( app ) def test_session_lifetime ( ) : # config keys used for the ConfigTestCase import sys mod = import_string ( module ) recorded.append ( exception ) self.add_message ( 'the message by foo ' ) with c.session_transaction ( ) as s : flask.flash ( 'This is a flash message ' , category='notice ' ) self.assert_equal ( c.get ( '/2/bar ' ) .data , b'19 ' ) print ( `` Audit finished with total % d warnings . '' % warns ) def view ( page ) : @ app.route ( '/ ' , methods= [ 'PUT ' ] ) messages = flask.get_flashed_messages ( ) def test_prefix_package_paths_with_limited_loader ( self ) : class TestStreaming ( object ) : def __init__ ( self , testcase ) : assert rv.status_code == 405 assert c.get ( '/get ' ) .data == b'42 ' run_test ( expect_header=True ) def for_bar_foo ( ) : assert c.get ( '/2/bar ' ) .data == b'19 ' flask.session [ 'foo ' ] = 42 APPLICATION_ROOT='/foo ' def test_greenlet_context_copying ( self ) : def index ( args ) : response.headers [ ' X-Foo ' ] = ' a header ' self.assert_true ( `` 'FOO_SETTINGS ' is not set '' in str ( e ) ) def test_request_context_means_app_context ( self ) : rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost.localdomain ' ) os.environ = env rv = register ( client , 'meh ' , ' x ' , ' y ' ) return flask.Response ( `` , headers= { ' X-Method ' : 'HEAD ' } ) return 'banana ' rv = c.get ( '/admin/static/css/test.css ' ) self.assert_in ( 'before ' , evts ) if new_objects > self.old_objects : class _ExceptionCatcher ( object ) : rv.close ( ) Tests the Blueprint example app from greenlet import greenlet app.debug = False current_dir = os.path.dirname ( os.path.abspath ( __file__ ) ) from flask import ext self.assert_equal ( sorted ( rv.allow ) , [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) def test_none_response ( ) : def blue_func_test ( ) : def __getattr__ ( self , name ) : called.append ( True ) permanent = False self.assert_equal ( category , 'notice ' ) MiniTwit Tests def test_template_test_with_template ( ) : app.add_template_filter ( super_reverse ) with app.test_request_context ( ) : self.login ( flaskr.app.config [ 'USERNAME ' ] , def test_session_cookie_setting ( ) : self.assert_ ( 'Error : the template could not be found ' in text ) def test_send_file_object ( self ) : self.assert_true ( flask._app_ctx_stack.top is None ) def test_teardown_on_pop ( self ) : def test_request_signals ( ) : @ flask.copy_current_request_context self.assert_equal ( called , [ None ] ) assert len ( messages ) == 2 import flask.ext.broken self.assert_false ( isinstance ( e , ForbiddenSubclass ) ) consistency . add_message ( client , 'test message 1 ' ) def test_options_handling_disabled ( ) : app.config.from_mapping ( def test_static_files ( self ) : def test_after_request_processing ( self ) : with app.app_context ( ) : flask.flash ( 'Zap ' ) 400 , [ ( ' X-Foo ' , 'bar ' ) ] ) template_folder='template ' ) @ app.route ( '/fail ' , methods= [ 'POST ' ] ) import blueprintexample from werkzeug.http import parse_cache_control_header def remember ( error ) : # But these tests should still pass . We just log a warning . assert rv.headers [ ' X-Method ' ] == 'HEAD ' self.assert_equal ( 'foo option 1 ' , foo_options [ 'option_1 ' ] ) @ app.route ( '/test ' ) sys.path.remove ( site_packages ) suite.addTest ( unittest.makeSuite ( ExceptionTestCase ) ) def test_environ_defaults_from_config ( ) : { { config.DEBUG } } return 'boom ' return test def fail ( ) : import flask.ext.broken self.assert_equal ( rv3.data , b'Hi , status ! ' ) def test_installed_package_paths_with_limited_loader ( self ) : script : flask.testsuite.testing with pytest.raises ( ZeroDivisionError ) : url = flask.url_for ( 'foo.bar.baz.view ' ) calls.append ( 'after-signal ' ) assert flask.render_template ( 'nested/nested.txt ' ) == ' I\ 'm nested ' gc.collect ( ) ( 'message ' , u'Hello World ' ) , self.assert_equal ( rv.data.strip ( ) , b'Admin File ' ) for x in range ( 3 ) : except ImportError : : copyright : ( c ) 2014 by Armin Ronacher . assert b'test message 1 ' in rv.data `` `` '' def test_installed_module_paths_with_limited_loader ( self ) : self.assert_in ( 'my_reverse ' , app.jinja_env.filters.keys ( ) ) assert len ( errors ) == 3 match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) assert values == expected return flask.session.get ( 'data ' , ' < missing > ' ) self.assert_equal ( c.get ( '/backend-no ' ) .data , b'backend says no ' ) if not all_tests : app.route ( '/ ' , methods= [ 'OPTIONS ' ] ) ( index2 ) def test_template_filter_after_route_with_template ( self ) : import pickle app.config [ 'BAR_STUFF_2 ' ] = 'bar stuff 2 ' assert rv.headers [ ' X-Parachute ' ] == 'awesome ' def test_template_rendered ( ) : pkg.join ( 'submodule.py ' ) .write ( 'def test_function ( ) : \n return 42\n ' ) def handle_foo ( e ) : def test_dotted_names ( self ) : common_test ( app ) assert str ( e ) == 'View function did not return a response ' test = flask.Blueprint ( 'test ' , __name__ ) lines = app.test_client ( ) .get ( '/ ' ) .data.splitlines ( ) messages = flask.get_flashed_messages ( category_filter= [ 'message ' , 'warning ' ] , with_categories=True ) flaskr.app.config [ 'PASSWORD ' ] ) self.assert_true ( msg.endswith ( `` missing.cfg ' '' ) ) return pickle.dumps ( dict ( flask.session ) ) assert isinstance ( e , MyDecoratorException ) with self.assert_raises ( NotFound ) : def something_else ( ) : from flask.debughelpers import DebugFilesKeyError ' { { foo } } ' ) # This test only works on CPython 2.7 . old_get_loader = pkgutil.get_loader app.register_blueprint ( bp , url_prefix='/1 ' , url_defaults= { 'bar ' : 23 } ) self.assert_equal ( c.get ( '/2/foo ' ) .data , b'19/42 ' ) gc.disable ( ) class MemoryTestCase ( FlaskTestCase ) : rv = self.app.post ( '/add_message ' , data= { 'text ' : text } , if PY2 : def test_session_expiration ( ) : bar_options = app.config.get_namespace ( 'BAR_ ' , lowercase=False ) env : REQUIREMENTS=lowest return ' , '.join ( base_to_url ( x ) for x in value ) def bar_foo ( ) : bp.route ( '/bar/123 ' , endpoint='bar.123 ' ) , from flask.ext.oldext_package import submodule ] # Werkzeug 0.8 assert b'You were successfully registered ' \ if name == 'suite ' : index.provide_automatic_options = False @ frontend.route ( '/frontend-no ' ) self.assert_equal ( expires.year , expected.year ) rv2 = c.get ( '/two_args ' ) # we should now see foo 's message def test_config_from_object ( self ) : def to_url ( self , value ) : self.assertFalse ( app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) ) assert rv.mimetype == 'application/json ' assert rv.data == b'42 ' # Werkzeug 0.8 blue = flask.Blueprint ( 'blue ' , __name__ ) return str ( e.whatever ) def record_pop ( sender , * * kwargs ) : self.logout ( ) bp = flask.Blueprint ( 'foo.bar.baz ' , __name__ , bp.add_app_template_test ( boolean ) return company_id assert list ( messages ) == [ assert b'You were logged in ' in rv.data `` `` '' Patch pkgutil.get_loader to give loader without get_filename or archive . `` `` '' Runs the testsuite as command line application . '' '' '' self.assert_equal ( flask.url_for ( 'myview ' , _method='GET ' ) , self.assert_equal ( flask.current_app , app ) class LimitedLoader ( object ) : def test_add_template_test_with_template ( ) : if not PY2 : import_hooks = 0 Blueprints ( and currently modules ) from config_module_app import app assert newext_package.ext_id == 'newext_package ' sess [ 'foo ' ] = [ 42 ] app.wsgi_app = PrefixPathMiddleware ( app.wsgi_app , '/bar ' ) assert `` 'FOO_SETTINGS ' is not set '' in str ( e ) return 'normal index ' 'handler ' , 'after-handler ' , Flaskr Tests class Index ( flask.views.MethodView ) : evts.append ( 'after ' ) @ app.template_test ( ) def test_extended_flashing ( ) : def test_main_module_paths ( modules_tmpdir , purge_module ) : self.assert_equal ( rv.data , b '' ) return root self.assert_false ( flask.request ) del called [ : ] assert flask.g.get ( ' x ' , 11 ) == 11 def test_before_first_request_functions_concurrent ( self ) : assert rv.mimetype == 'text/plain ' self.assert_equal ( rv.headers [ ' X-Method ' ] , 'GET ' ) with reqctx : assert recorded == [ 'push ' ] if flask.json_available : for module in find_modules ( __name__ ) : import site_egg resp = c.get ( '/ ' ) # - * - coding : utf-8 - * flask.session [ 'testing ' ] = 42 messages = flask.get_flashed_messages ( category_filter= [ 'message ' ] , with_categories=True ) self.test_case.fail ( 'Expected exception of type % r ' % assert app.jinja_env.globals [ 'get_stuff ' ] == get_stuff flask.request.form [ 'missing_key ' ] self.assertEqual ( rv.mimetype , 'application/json ' ) return 'ignored anyway ' req = flask.request._get_current_object ( ) return blueprintexample.app.test_client ( ) self.assert_true ( flask._request_ctx_stack.top is None ) @ app.route ( '/args_header ' ) flask.g.bar = 42 if 'main_app ' in sys.modules : def assertNotIn ( self , x , y ) : called.append ( 'app ' ) return rv rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/foo ' ) assert not app.jinja_env.auto_reload def test_request_dispatching ( self ) : from flask.helpers import safe_join except Exception as e : flask.session [ 'dt ' ] = now finally : self.assert_equal ( flask.url_for ( 'spam ' ) , '/test_handler/ ' ) assert env [ 'werkzeug.request ' ] is not None # This test only works on CPython 2.7 . self.assert_equal ( 'bar stuff 1 ' , bar_options [ 'STUFF_1 ' ] ) tests.helpers from main_app import app installed_path = os.path.join ( expected_prefix , 'path ' ) TEST_KEY = 'foo ' return flask.render_template ( 'context_template.html ' , value=23 ) # Specifically , if app.testing is not set to True , the AssertionErrors with c.session_transaction ( ) as sess : assert False , 'Expected exception ' self.assert_equal ( flask.json.loads ( rv.data ) , d ) for x in range ( 2 ) : # second blueprint instance flask.appcontext_popped.connect ( record_pop , app ) def test_template_filter_with_name ( ) : def __enter__ ( self ) : from flask.ext.newext_package import submodule rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/foo ' ) # Be sure app.testing=True below , else tests can fail silently . `` X-Bar '' : `` Foo '' class Index ( flask.views.View ) : self.fail ( 'Expected value error ' ) `` `` '' Catch warnings in a with block in a list '' '' '' def test_test_client_context_binding ( self ) : suite.addTest ( unittest.makeSuite ( SendfileTestCase ) ) app.config.from_mapping ( Blueprints ( and currently modules ) 'the blueprint `` frontend '' ' in text ) @ app.template_test ( 'boolean ' ) devel : git+git : //github.com/jek/blinker.git backend = flask.Blueprint ( 'backend ' , __name__ ) assert app.config.from_envvar ( 'FOO_SETTINGS ' ) else : return def working ( ) : `` `` '' def index ( ) : def index ( args ) : flask.session [ 'testing ' ] = 42 def always_first ( ) : assert c.get ( '/2/foo ' ) .data == b'19/42 ' ' '' A tmpdir added to sys.path '' ' def test_templates_list ( test_apps ) : Tests the extension import thing . test_suite='flask.testsuite.suite ' t.join ( ) devel : git+git : //github.com/mitsuhiko/werkzeug.git with flaskr.app.app_context ( ) : def login ( client , username , password ) : except Exception : 'after-signal ' ] ) gc.collect ( ) self.assert_equal ( rv , u ' '' \\u003c/script\\u003e '' ' ) assert len ( captured ) == 3 assert b'Internal Server Error ' in rv.data return flask.Response ( 'Hello world ' , 404 ) , { suite.addTest ( unittest.makeSuite ( TestToolsTestCase ) ) def fail_func ( ) : return 100 common_object_test ( app ) self.assert_in ( 'Modules are deprecated ' , str ( entry [ 'message ' ] ) ) monkeypatch.syspath_prepend ( str ( rv ) ) @ app.route ( '/read ' ) return self.app.get ( '/logout ' , follow_redirects=True ) self.assert_equal ( rv.status_code , 500 ) c = app.test_client ( ) def catch_warnings ( ) : def index ( user ) : def test_greenlet_context_copying ( ) : self.assert_equal ( c.get ( '/get ' ) .data , b'42 ' ) return 'index for % s ' % user calls = [ ] def test_http_error_subclass_handling ( self ) : assert context [ 'whiskey ' ] == 42 : copyright : ( c ) 2014 by the Flask Team , see AUTHORS for more details . assert rv.data == b'Foo ' from flask.testsuite import FlaskTestCase , emits_module_deprecation_warning assert app.logger is logger1 assert c.get ( '/page/2 ' ) .data == b ' 2 ' return value.split ( ' , ' ) class AppContextTestCase ( FlaskTestCase ) : blue.register_error_handler ( MyFunctionException , my_function_exception_handler ) old_handlers = app.logger.handlers [ : ] with app.test_request_context ( '/ ' ) : assert rv == ' '' \\u2603 '' ' def record ( sender , exception ) : import site_package from minitwit_tests import MiniTwitTestCase SESSION_COOKIE_HTTPONLY=False , assert rv == ' < a ng-data=\ ' { `` x '' : [ `` foo '' , `` bar '' , `` baz\\u0027 '' ] } \ ' > < /a > ' rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com/ ' ) { { request.args.foo } } return { 'whiskey ' : 'Jameson ' } modules_tmpdir_prefix ) : if sys.version_info [ :2 ] == ( 2 , 6 ) : def test_session_transaction_needs_cookies ( ) : except ValueError as e : pytestmark = pytest.mark.skipif ( flask.got_request_exception.connect ( record , app ) return flask.render_template_string ( `` ' @ backend.route ( '/be ' ) self.assert_in ( 'path=/ ' , cookie ) assert isinstance ( e , ForbiddenSubclass ) values.setdefault ( 'lang_code ' , flask.g.lang_code ) # bar 's timeline should just show bar 's message class CustomRequestGlobals ( object ) : def read ( ) : return { 'injected_value ' : 42 } is_permanent = False assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' Template functionality self.assert_equal ( rv.data , b'Meh ' ) self.assert_equal ( ext_id , 'oldext_simple ' ) def test_session_cookie_setting ( self ) : lambda : None from flask.ext.oldext_package import ext_id self.assert_true ( rv.direct_passthrough ) monkeypatch.syspath_prepend ( SERVER_NAME='example.com:8080 ' methods = [ 'GET ' , 'POST ' ] def foo ( response ) : @ test.route ( '/test/ ' ) def add_x_parachute ( f ) : def foo_bar_foo ( ) : self.assert_equal ( rv , b'request|after ' ) 'to this URL ' , str ( e ) ) assert rv == ' '' \\u003c\\u0000/script\\u003e '' ' modules_tmpdir.join ( 'var ' ) .join ( 'installed_package-instance ' ) # XXX : untitaker : These tests need to be revised . They broke around the time we pkgutil.get_loader = get_loader assert rv.data == b ' 3 ' raise flask.abort ( flask.redirect ( flask.url_for ( 'test ' ) ) ) `` X-Bar '' : `` Foo '' class _TestHandler ( logging.Handler ) : git+git : //github.com/jek/blinker.git # egg=blinker 'Content-Type ' : 'text/plain ; charset=utf-8 ' flask.message_flashed.connect ( record , app ) minitwit.init_db ( ) cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) with app.test_request_context ( '/ ' , environ_overrides= { 'HTTP_HOST ' : 'localhost ' } ) : self.assert_equal ( len ( messages ) , 1 ) class MyBlueprint ( flask.Blueprint ) : def teardown ( self ) : def test_flaskext_new_package_import_submodule_function ( self ) : def test_url_processors ( self ) : def subdomain ( ) : suite.addTest ( unittest.makeSuite ( FlaskrTestCase ) ) def test_werkzeug_routing ( self ) : Names which are redefined without having been used . assert expires.year == expected.year self.assert_equal ( flask.request.args [ 'foo ' ] , 'bar ' ) return 'application itself says no ' , 403 suite.addTest ( unittest.makeSuite ( BlueprintTestCase ) ) def not_found ( e ) : import time self.assert_equal ( c.get ( '/bump ' ) .data , b ' 3 ' ) flask.testsuite.regression def test_timelines ( self ) : self.assert_equal ( messages [ 1 ] , u'Hello World ' ) self.assert_equal ( rv.data.strip ( ) , b'/ * nested file * / ' ) self.assert_equal ( c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data , b'value set ' ) def finish2 ( exc ) : assert called == [ None ] assert not flask.request if 'site_app ' in sys.modules : @ app.before_request res = c.get ( '/ ' ) from installed_package import app def expect_exception ( f , * args , * * kwargs ) : def test_session_transactions ( ) : Tests the Blueprint example app `` `` '' Helper function to register a user '' '' '' def test_before_after_request_order ( ) : return 'Okay ' def setUp ( self ) : assert b'You have to enter a valid email address ' in rv.data Rule ( '/bar ' , endpoint='bar ' ) , assert rv4.data == b'Hello world ' template , context = recorded [ 0 ] calls.append ( 'before-handler ' ) def test_flash_signal ( ) : rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost/ ' ) from flask._compat import StringIO rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost/ ' ) app = MyFlask ( __name__ ) : license : BSD , see LICENSE for more details . def attach_something ( ) : def test_templates_auto_reload ( ) : _scheme='https ' ) , except RuntimeError as e : def test_route_decorator_custom_endpoint ( ) : def test_add_template_filter ( ) : rv = c.get ( '/ ' , 'http : //localhost/ ' ) except TemplateNotFound as e : flask.template_rendered.disconnect ( record , app ) git+git : //github.com/mitsuhiko/werkzeug.git # egg=Werkzeug with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost:80 ' } ) : assert c.get ( '/foo/bar ' ) .data == b'bar ' self.register ( username , password ) return repr ( flask.session.get ( 'foo ' ) ) app.add_url_rule ( '/more ' , 'more ' , more , methods= [ 'GET ' , 'POST ' ] ) # we have to run this test in an isolated thread because if the def pull_lang_code ( endpoint , values ) : assert 'before ' in evts def blue_func_test ( ) : recorded.append ( ( message , category ) ) def test_test_app_proper_environ ( self ) : git+git : //github.com/jek/blinker.git # egg=blinker `` `` '' Registers and logs in in one go '' '' '' The basic functionality . app.config [ 'APPLICATION_ROOT ' ] = '/foo ' sys.path.remove ( installed_path ) old_load_setting = app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] def from_two_args_tuple ( ) : app.config.from_pyfile ( 'missing.cfg ' ) def ensure_clean_request_context ( self ) : return 'bar ' self.assert_equal ( c.get ( '/de/about ' ) .data , b'/de/ ' ) rv = app.test_client ( ) .get ( '/ ? foo=42 ' ) assert buffer == [ ] def __init__ ( self , loader ) : cls.__name__ == 'ExtensionImporter ' : app.config.from_mapping ( [ will work . def test_missing_session ( self ) : assert c.post ( '/ ' ) .data == b'POST ' assert b'the message by foo ' not in rv.data finally : return 'Hello ' @ app.route ( '/getsession ' ) assert flask.url_for ( 'static ' , filename='index.html ' ) == \ # implicit appctx disappears too assert b'Response ' in rv.data 'http : //localhost/hello/test % 20x ' ) @ app.route ( '/fail ' ) rv = c.post ( '/ ' ) # when they expect no exception on the stack . while flask._request_ctx_stack.top is not None : config_class = Config assert 'cookies ' in str ( e ) return 'bar ' app.config [ 'LOGGER_HANDLER_POLICY ' ] = 'never ' import pkgutil values [ 'page ' ] = 'login ' next = next.tb_next assert 'httponly ' in rv.headers [ 'set-cookie ' ] .lower ( ) raise MyFunctionException ( ) def test_routing_redirect_debugging ( ) : assert 'foo option 2 ' == foo_options [ 'option_2 ' ] `` `` '' Adds an entry to sys.path if it 's not already there . This does def before1 ( ) : self.assert_equal ( response.data , b'stuff ' ) `` `` '' .format ( name ) ) ) self.assert_equal ( newext_simple.ext_id , 'newext_simple ' ) def test_static_files ( ) : def pull_lang_code ( endpoint , values ) : ~~~~~~~~~~~~~~~~~~~~~ c.get ( '/ ' ) self.assert_equal ( flask.request.path , '/ ' ) @ blue.route ( '/function ' ) ~~~~~~~~~~~~~~~~~ def test_flaskext_new_simple_import_module ( self ) : # dicts if they contain mutable objects . It 's a horrible , def test_request_exception_signal ( ) : assert b'Invalid password ' in rv.data @ app.route ( '/ ' , methods= [ 'GET ' , 'POST ' ] ) flaskr.app.config [ 'PASSWORD ' ] ) def blue_deco_test ( ) : os.path.join ( expected_prefix , 'var ' , app = flask.Flask ( __name__ ) response.data += b'|after ' app.add_url_rule ( '/ ' , 'index ' , index ) backend = flask.Blueprint ( 'myapp.backend ' , __name__ ) assert flask._app_ctx_stack.top is None if not hasattr ( c , 'redirect_client ' ) : app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True import pkgutil self.assert_equal ( test_function ( ) , 42 ) class BetterIndex ( Index ) : assert app.jinja_env.tests [ 'boolean ' ] == boolean assert b'You were successfully registered ' \ test = flask.Blueprint ( 'test ' , __name__ ) ' return 42 ' ) exception_name ) self.assert_equal ( c.get ( '/ ' ) .data , b'GET ' ) def test_session_using_server_name_port_and_path ( ) : expected = dict ( page='login ' ) def test_view_decorators ( ) : def showwarning ( message , category , filename , lineno , file=None , line=None ) : self.assert_equal ( flask.request.path , '/ ' ) } , follow_redirects=True ) app.register_blueprint ( blueprint ) class View ( object ) : def fire ( ) : calls.append ( 'handler ' ) evts.append ( 'before ' ) self.assert_equal ( cc.max_age , 12 * 60 * 60 ) match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] @ app.route ( '/accept ' , methods= [ 'POST ' ] ) test_greenlet_context_copying_api = None called.append ( 5 ) del sys.modules [ 'site_package ' ] flask.template_rendered.disconnect ( record , app ) backend = flask.Blueprint ( 'myapp.backend ' , __name__ ) app.config.update ( SERVER_NAME='localhost:80 ' ) assert template.name == 'simple_template.html ' assert b ' & lt ; Hello & gt ; ' in rv.data os.close ( self.db_fd ) ~~~~~~~~~~~~ ) return s [ : :-1 ] os.environ = { 'FOO_SETTINGS ' : 'missing.cfg ' } assert 'ZeroDivisionError : ' in err return LimitedLoader ( old_get_loader ( * args , * * kwargs ) ) assert excinfo.type is ImportError rv = flask.render_template_string ( ' { { get_stuff ( ) } } ' ) `` `` '' Start with a blank database . '' '' '' rv = c.get ( '/py/bar ' ) `` `` '' Make sure logging in and logging out works '' '' '' called.append ( 3 ) raise TypeError ( ) with c.session_transaction ( ) as sess : c.get ( '/test_filters/ ' ) return 'DELETE ' while flask._request_ctx_stack.top is not None : # now let 's follow foo assert err == `` flask.request_finished.disconnect ( after_request_signal , app ) ctx.pop ( ) exception_name = self.exc_type.__name__ rv = self.register ( 'meh ' , 'foo ' , email='broken ' ) def test_blueprint_url_definitions ( self ) : view.view_class = Other _gc_lock.release ( ) expect_exception ( flask.session.__setitem__ , 'foo ' , 42 ) @ app.route ( '/ ' , subdomain='foo ' ) @ frontend.errorhandler ( 403 ) def test_flaskext_new_package_import_normal ( self ) : return getattr ( self.loader , name ) ext = modules_tmpdir.mkdir ( 'flask_broken ' ) self.assert_equal ( site_app.app.instance_path , rv = register ( client , 'meh ' , 'foo ' , email='broken ' ) def error2 ( ) : self.assertEqual ( c.get ( '/bar/ ' ) .data , b'bar ' ) @ bp.url_value_preprocessor return u'Hällo Wörld ' return flask.render_template ( 'index.html ' ) rv = app.test_client ( ) .get ( '/static/index.html ' ) self.assert_equal ( rv.data , b ' 3 ' ) egg_path , = modules_tmpdir.join ( 'dist/ ' ) .listdir ( ) def __init__ ( self , app , prefix ) : assert rv [ 'm ' ] == flask.Markup ( 'Hello ! ' ) rv = flask.make_response ( ) def test_config_from_mapping ( ) : assert index ( ) == 'Hello World ! ' assert ext_id == 'oldext_simple ' flask.appcontext_popped.disconnect ( record_pop , app ) blue = flask.Blueprint ( 'blue ' , __name__ ) init.write ( 'import flask\napp = flask.Flask ( __name__ ) ' ) @ bp.app_template_test ( 'boolean ' ) def test_request_exception_signal ( self ) : def modules_tmpdir_prefix ( modules_tmpdir , monkeypatch ) : git+git : //github.com/mitsuhiko/jinja2.git # egg=Jinja2 if not hasattr ( sys , 'getrefcount ' ) : r = self.app.get ( '/hello ' ) app.url_build_error_handlers.append ( handler ) [ 'no_template.xml ' , # should skip this one Signalling . self.assert_equal ( flask.url_for ( 'myview ' , _method='POST ' ) , # import hook does not break on reloading . def something ( page ) : pytest.raises ( BuildError , flask.url_for , 'spam ' ) def test_templates_auto_reload ( self ) : raise AttributeError ( msg ) assert b'No entries here so far ' not in rv.data { { g.foo } } print ( `` Audit requires PyFlakes installed in your system . '' ) for file in files : rv = c.get ( '/py/bar/123 ' ) self.assert_equal ( newext_simple.__name__ , 'flask_newext_simple ' ) called = [ ] expected_max_age = 7200 reload_module = reload def accept_file ( ) : @ app.before_first_request self.assert_equal ( rv2.status_code , 200 ) Test client and more . def test_no_error_swallowing ( self ) : # But this request triggers it , and it 's an error def test_flaskext_new_package_import_submodule ( self ) : app.register_blueprint ( bp , url_prefix='/2 ' , url_defaults= { 'bar ' : 19 } ) flask.g.value = 42 os.environ = { } def test_blueprint_specific_error_handling ( self ) : bar_options = app.config.get_namespace ( 'BAR_ ' , lowercase=False ) return flask.request.endpoint current_dir = os.path.dirname ( os.path.abspath ( __file__ ) ) assert rv.data == b'not found ' assert len ( captured ) == 2 got.append ( 42 ) try : def test_url_generation_without_context_fails ( self ) : rv = self.app.get ( '/ ' ) class Base ( object ) : assert sorted ( rv.allow ) == [ 'OPTIONS ' ] SERVER_NAME='www.example.com:8080 ' , assert len ( called ) == 2 self.assert_true ( isinstance ( e , Forbidden ) ) self.assert_equal ( resp.status_code , 200 ) install_egg ( 'site_egg ' ) rv = self.app.get ( '/public ' ) if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == expected_max_age : self.assert_in ( 'boolean ' , app.jinja_env.tests.keys ( ) ) self.assert_equal ( site_app.app.instance_path , r = self.app.get ( '/ ' ) assert rv == ' '' \\u003c/script\\u003e '' ' self.assert_equal ( recorded , [ 'push ' ] ) self.assert_equal ( sorted ( rv.allow ) , [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' , 'PUT ' ] ) self.assert_equal ( rv.data , b'test index ' ) def test_before_first_request_functions_concurrent ( ) : return 'application itself says no ' , 403 def test_basic_view ( self ) : def before_request_handler ( ) : def test_add_template_filter ( self ) : self.assertTrue ( x , msg ) if flask.g.lang_code is not None and \ gc.enable ( ) self.assert_equal ( c.get ( '/fail ' ) .status_code , 400 ) suite.addTest ( unittest.makeSuite ( ViewTestCase ) ) `` `` '' Helper function to login '' '' '' def purge_module ( request ) : def bar_foo ( ) : app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] = old_load_setting rv = self.app.post ( '/add ' , data=dict ( def remember ( error ) : class TemplatingTestCase ( FlaskTestCase ) : values = dict ( ) def test_redirect_keep_session ( self ) : bp.add_app_template_filter ( my_reverse , 'strrev ' ) return flask.render_template ( 'template_filter.html ' , value='abcd ' ) self.assert_false ( app.config.from_pyfile ( 'missing.cfg ' , silent=True ) ) self.assert_equal ( rv2.data , b'Hello ' ) self.assert_true ( False , 'expected exception ' ) @ app.route ( '/foo ' ) bp.add_app_template_test ( boolean ) assert isinstance ( recorded [ 0 ] , ZeroDivisionError ) app.config [ 'SERVER_NAME ' ] = 'localhost ' app.config.update ( SERVER_NAME='localhost.localdomain ' ) class Test ( Base ) : app.register_blueprint ( backend ) `` `` '' A nicer loader that solves two problems . First of all we are setting app.config [ 'PERMANENT_SESSION_LIFETIME ' ] = 42 rv = c.get ( '/getsession ' ) assert message == 'This is a flash message ' except ( AttributeError , RuntimeError ) : ' X-Method ' : flask.request.method pip install hg+https : //bitbucket.org/hpk42/tox self.fail ( 'Flask ( import_name ) is importing import_name . ' ) app.testing = True self.assert_equal ( set_cookie is not None , expect_header ) import flask.ext.broken flaskext = modules_tmpdir.mkdir ( 'flaskext ' ) return flask.url_for ( 'myapp.backend.backend_index ' ) return flask.request.url assert rv [ 'dt ' ] == now app.secret_key = 'development key ' def test_app_tearing_down ( ) : assert b'forbidden ' == rv.data raise AssertionError ( 'some kind of exception expected ' ) return 'backend says no ' , 403 not hasattr ( sys , 'pypy_translation_info ' ) : return 'bam ' def test_nosubdomain ( self ) : get_and_assert ( ) with c.session_transaction ( ) as sess : } if 'site_package ' in sys.modules : def test_debug_log ( self ) : flask.g.value def fail ( ) : class BetterIndex ( Index ) : c = app.test_client ( ) unittest.main ( testLoader=BetterLoader ( ) , defaultTest='suite ' ) rv = app.test_client ( ) .get ( '/static/index.html ' ) return str ( e.whatever ) x = modules_tmpdir.join ( 'flask_newext_simple.py ' ) pass flask.session [ 't ' ] = ( 1 , 2 , 3 ) assert flask.render_template_string ( assert c.get ( '/string ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) def patch_pkgutil_get_loader ( wrapper_class=LimitedLoaderMockWrapper ) : follow_redirects=True ) app = SuppressedFlask ( __name__ ) return '/test_handler/ ' self.assert_equal ( message , 'This is a flash message ' ) assert sorted ( meths ) == [ 'DELETE ' , 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] evts.append ( 'after ' ) self.assert_equal ( c.get ( '/unicode ' ) .data , u'Hällo Wörld'.encode ( 'utf-8 ' ) ) @ app.after_request def test_flaskext_new_simple_import_normal ( self ) : def test_flaskext_old_simple_import_normal ( oldext_simple ) : def test_session_using_server_name_port_and_path ( self ) : err = out.getvalue ( ) here = os.path.abspath ( os.path.dirname ( __file__ ) ) return flask.Response ( 'Blub ' , headers= { reload_module ( ext ) 'username ' : username , return '42 ' def index ( ) : flaskr.app.config [ 'PASSWORD ' ] ) app.register_blueprint ( frontend ) @ app.route ( '/args_status ' ) def record ( sender , template , context ) : class SuppressedFlask ( flask.Flask ) : def handle ( x , record ) : def action ( ) : flask.flash ( u'Hello World ' ) ' '' Generate egg from package name inside base and put the egg into self.assert_equal ( rv.status_code , 405 ) app.config.from_mapping ( { flask.flash ( 'Zip ' ) app.add_url_rule ( '/ ' , 'index ' , self.index ) The basic functionality . `` `` '' Test that messages work '' '' '' self.assert_equal ( rv , ' '' \\u2603 '' ' ) `` ( 'localhost.localdomain:5000 ' ) does not match the `` + \ return 'index ' assert 'domain=.example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) assert resp.data == u'Hällo Wörld'.encode ( 'utf-8 ' ) assert rv.data == b '' flask.url_for ( 'spam ' ) self.assert_equal ( 'foo option 2 ' , foo_options [ 'option_2 ' ] ) return 100 flask.session.modified = False def test_empty_db ( client ) : error = err rv = c.get ( '/test ' ) def test_route_decorator_custom_endpoint ( self ) : assert c.get ( '/1 ' ) .data == b'banana ' ' < test > Mail ' app = flask.Flask ( __name__ ) if config_key is not None : cleanup_stuff.append ( exception ) rv = register_and_login ( client , 'user1 ' , 'default ' ) @ bp.route ( '/bar ' , endpoint='bar.bar ' ) class ForbiddenSubclass ( Forbidden ) : # Test an app with '__main__ ' as the import name , uses cwd . from flask._compat import text_type def backend_index ( ) : from werkzeug.http import parse_set_header flaskext.join ( '__init__.py ' ) .write ( '\n ' ) self.assert_equal ( rv.data , b'Hello ' ) return flask.render_template ( 'context_template.html ' , value=23 ) assert flask._app_ctx_stack.top is not None recorded.append ( 'push ' ) c.get ( '/ ' ) ' '' ) from setuptools import setup self.assert_in ( 'Make sure to directly send your POST-request ' self.assert_equal ( c.get ( '/ ' ) .data , b'42 ' ) self.assert_equal ( len ( captured ) , 3 ) rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/ ' ) flask.testsuite.templating Tests the MiniTwit application . app = MyFlask ( __name__ ) except AssertionError : def test_context_refcounts ( self ) : self.assertEqual ( rv.headers [ 'Content-Type ' ] , 'text/html ' ) import installed_package text= ' < strong > HTML < /strong > allowed here ' self.prefix = prefix # in the view functions will cause a 500 response to the test client bp = flask.Blueprint ( 'frontend ' , __name__ , url_prefix='/ < lang_code > ' ) self.assert_equal ( c.get ( '/fe2 ' ) .data.strip ( ) , b'/fe ' ) except RuntimeError as e : cls = type ( item ) sys.prefix = real_prefix example_path = os.path.join ( os.path.dirname ( __file__ ) , def test_teardown_request_handler_error ( self ) : python : `` 3.4 '' 'file ( No such file or directory ) : ' ) assert 'my_reverse ' in app.jinja_env.filters.keys ( ) assert c.get ( '/ ' ) .data == b'None ' class TestNoImports ( object ) : flask.appcontext_pushed.disconnect ( record_push , app ) def from_string ( ) : assert cc.max_age == 3600 class Index ( flask.views.View ) : old_showwarning = warnings.showwarning assert ' . ' not in key self.assert_equal ( ext_id , 'newext_package ' ) self.assert_in ( ' 1 // 0 ' , err ) assert url == expected reason='Turned off due to envvar . ' ) def run_test ( expect_header ) : del sys.modules [ 'installed_package ' ] flaskr.app.config [ 'PASSWORD ' ] + ' x ' ) self.assert_equal ( c.get ( '/string ' ) .data , u'Hällo Wörld'.encode ( 'utf-8 ' ) ) } ) 'See http : //flask.pocoo.org/docs/blueprints/ # templates ' in text ) assert rv2.status_code == 200 the_uuid = uuid.uuid4 ( ) return DictLoader ( { 'index.html ' : 'Hello Custom World ! ' } ) assert rv.data == b'index ' except DebugFilesKeyError as e : expected = '/login ' assert site_egg.app.instance_path == \ called.append ( error ) self.assert_equal ( 'foos ' in flask.g , False ) assert b'xxx ' == response.data app = flask.Flask ( __name__ , instance_path=here ) def test_multi_route_class_views ( self ) : self.assert_equal ( app.jinja_env.tests [ 'is_boolean ' ] , is_boolean ) self.assert_true ( app.logger is logger1 ) def test_config_from_file ( ) : Rule ( '/ ' , endpoint='index ' ) app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) Tests the examples . import unittest self.teardown ( ) '/bar/123 ' , endpoint='bar.123 ' , view_func=foo_foo_foo `` `` '' self.assert_in ( 'set-cookie ' , rv.headers ) def test_error_handling ( self ) : self.assert_equal ( rv.data , b'Awesome ' ) from werkzeug.routing import BaseConverter called.append ( 5 ) def internal_server_error ( e ) : assert cc.max_age == 12 * 60 * 60 assert flask.session.modified @ app.url_defaults pytest.fail ( 'Example code leaked ' ) assert c.get ( '/ ' ) .data == b'42 ' return `` Hey '' self.assert_equal ( flask.url_for ( 'admin.static ' , filename='test.txt ' ) , def my_reverse ( s ) : tox -e \ log.append ( locals ( ) ) # but on the user 's page we only want the user 's message app.config.from_mapping ( { def test_basic_view ( ) : rv = app.test_client ( ) .open ( '/b/ ' ) username=username , self.assert_in ( 'must be absolute ' , str ( e ) ) `` `` '' Make sure registering works '' '' '' category_filter= [ 'message ' , 'warning ' ] , with_categories=True ) view = Index.as_view ( 'index ' ) def foo_bar_foo ( ) : from config_module_app import app assert b'The two passwords do not match ' in rv.data rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost ' ) blinker==1.0 self.assert_equal ( len ( captured ) , 1 ) self.assert_equal ( rv.data , b'True ' ) Werkzeug==0.7 `` `` '' not used currently '' '' '' SERVER_NAME='www.example.com:8080 ' , def test_environ_defaults ( ) : self._ctx.pop ( ) return flask.url_for ( '.frontend_index ' ) del sys.modules [ 'site_egg ' ] def get_session ( ) : category_filter= [ 'message ' , 'warning ' ] ) ~~~~~~~~~~~~~~~~~~~~~~~~~~ pass def foo ( ) : sys.path.append ( site_packages ) assert repr ( flask.g ) == ' < LocalProxy unbound > ' TEST_KEY = 'foo ' assert rv.headers [ ' X-Foo ' ] == 'bar ' warnings.showwarning = showwarning except Exception : unexpected_max_age = 3600 app.view_functions [ 'index ' ] = index cookie = rv.headers [ 'set-cookie ' ] .lower ( ) called.append ( 4 ) self.common_test ( app ) rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost.localdomain ' ) assert rv.headers [ 'Location ' ] == 'http : //localhost/test ' app = flask.Flask ( __name__ ) flask.appcontext_popped.connect ( record_pop , app ) bp.add_app_template_filter ( super_reverse ) ) def test_request_dispatching ( ) : def test_blueprint_specific_error_handling ( ) : err = out.getvalue ( ) max_age_default = app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] `` ( 'localhost.localdomain:5000 ' ) does not match the `` run_test ( expect_header=True ) def register_and_login ( client , username , password ) : git+git : //github.com/mitsuhiko/itsdangerous.git # egg=itsdangerous self.assert_false ( app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) ) ( 'SECRET_KEY ' , 'devkey ' ) , suites = [ suite ] flask.jsonify ( { 'msg ' : 'W00t ' } ) , 400 ) def test_template_test_with_name ( self ) : self.assert_equal ( installed_package.app.instance_path , flask.request_started.disconnect ( before_request_signal , app ) password2 = password flask.testsuite.ext def add_x_parachute ( f ) : return text_type ( bar ) return flask.request.files [ 'foo ' ] .filename def test_context_binding ( ) : flask.session [ 'value ' ] = flask.request.form [ 'value ' ] installed_path = modules_tmpdir.mkdir ( 'path ' ) def from_unicode ( ) : app.config [ 'MAX_CONTENT_LENGTH ' ] = 64 app.config [ 'SERVER_NAME ' ] = 'example.com:1234 ' # test that all teardown_requests get passed the same original from flask.ext.oldext_simple import ext_id app.config.update ( SERVER_NAME='localhost.localdomain ' ) expect_exception ( flask.session.pop , 'foo ' ) self.assert_equal ( app.instance_path , os.path.join ( here , 'instance ' ) ) self.assert_equal ( flask.request.args [ 'foo ' ] , 'bar ' ) import os assert str ( excinfo.value ) == message import textwrap # On PY3 we even have another one : ( `` `` '' Make sure registering works '' '' '' def test_url_generation_requires_server_name ( ) : flask.request.form [ 'myfile ' ] return flask.url_for ( 'about ' ) return self.app.post ( '/login ' , data=dict ( flask.session [ 'foo ' ] = 42 def newext_simple ( modules_tmpdir ) : assert c.get ( '/ ' ) .status_code == 404 if __name__ == '__main__ ' : lines = app.test_client ( ) .get ( '/ ' ) .data.splitlines ( ) expected = datetime.utcnow ( ) + app.permanent_session_lifetime raise RuntimeError ( 'Tried to add nonexisting path ' ) rv = app.test_client ( ) .get ( '/ ' ) .data def frontend_forbidden ( e ) : assert b'You are no longer following & # 34 ; foo & # 34 ; ' in rv.data rv = app.test_client ( ) .get ( '/ ' ) SECRET_KEY='foo ' , '/static/index.html ' # that a real flaskext could be in there which would disable our client = app.test_client ( ) app.logger.handlers = [ _TestHandler ( ) ] meths = parse_set_header ( c.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) 'password2 ' : password2 , def set ( ) : self.assert_not_in ( 'ConfigTestCase ' , app.config ) r = client.get ( '/world ' ) self.assert_equal ( rv4.status_code , 404 ) return flask.url_for ( 'test.index ' ) app.secret_key = 'testing ' rv = logout ( client ) self.assert_equal ( 'bar stuff 2 ' , bar_options [ 'STUFF_2 ' ] ) def test_filters2 ( ) : def forbidden ( e ) : def handle_forbidden_subclass ( e ) : self.assert_equal ( rv , ' '' \\u0026 '' ' ) # This support requires a new Werkzeug version return rv self.assert_equal ( flask.current_app._get_current_object ( ) , app ) def __init__ ( self , loader ) : assert b'the message by foo ' not in rv.data def test_config_missing_json ( ) : rv = login ( client , 'user2 ' , 'wrongpassword ' ) self.add_message ( 'test message 1 ' ) def log_exception ( self , exc_info ) : app.secret_key = 'testing ' s.__class__.__name__ , called.append ( 'request ' ) def test_routing_redirect_debugging ( self ) : return 'GET ' MiniTwit Tests self.assert_equal ( rv.data , b'http : //localhost/ ' ) assert rv.data == b'Hello from the Admin ' self.app = blueprintexample.app.test_client ( ) def test_session_expiration ( self ) : # not torn down . This causes other tests that run after this fail # Specifically , if app.testing is not set to True , the AssertionErrors # now unfollow and check if that worked return self del sys.modules [ 'site_app ' ] app.register_blueprint ( bp , url_prefix='/py ' ) b ' < p > Hello World ! ' , self.assert_equal ( c.get ( '/foo/ ' ) .data , b'index ' ) import logging def test_appcontext_signals ( ) : def test_implicit_head ( ) : ~~~~~~~~~~~~~~~~~~~~~~~ `` `` '' Make sure login and logout works '' '' '' c.get ( '/missing ' ) response = self.client.get ( url ) return text_type ( flask.session [ 'foo ' ] ) assert 'is_boolean ' in app.jinja_env.tests.keys ( ) def test_installed_module_paths ( modules_tmpdir , modules_tmpdir_prefix , self.assert_equal ( len ( sess ) , 0 ) def test_test_client_calls_teardown_handlers ( ) : app.config.from_json ( 'missing.json ' ) ctx = app.test_request_context ( '/ ? name=World ' ) SECRET_KEY='devkey ' , assert 2 == len ( bar_options ) assert c.get ( '/fe2 ' ) .data.strip ( ) == b'/fe ' def index2 ( ) : except : self.assert_in ( b'Response ' , rv.data ) os.unlink ( minitwit.app.config [ 'DATABASE ' ] ) assert b'You were logged out ' in rv.data self.assert_true ( msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' flask.appcontext_pushed.disconnect ( record_push , app ) def test_iterable_loader ( self ) : assert called == [ 'request ' , 'app ' ] rv = login ( client , 'user1 ' , 'wrongpassword ' ) assert submodule.__name__ == 'flask_newext_package.submodule ' def test_app_tearing_down ( self ) : assert os.path.join ( 'flask_broken ' , '__init__.py ' ) in \ `` `` '' Get rid of the database again after each test . '' '' '' assert type ( exc ) == ZeroDivisionError self.assert_true ( flask.session.modified ) expect_exception ( flask.session.pop , 'foo ' ) from flask.ext import oldext_simple def bar ( bar ) : Test client and more . def test_proper_test_request_context ( ) : self.assert_equal ( c.get ( '/1/foo ' ) .data , b'23/42 ' ) raise TypeError ( ) class ListConverter ( BaseConverter ) : self.assert_equal ( flask.g.get ( ' x ' , 11 ) , 11 ) flask.url_for ( 'index ' ) @ bp.route ( '/ < page > ' ) def test_appcontext_signals ( self ) : return 'Test ' def test_flaskext_new_package_import_module ( self ) : ext_id = 'oldext_package ' class _TestHandler ( logging.Handler ) : app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : self.assert_equal ( str ( e ) , `` the server name provided `` ~~~~~~~~~~~~~~~~~~~~~ messages = flask.get_flashed_messages ( with_categories=True ) raise Forbidden ( ) def test_subdomain_matching_with_ports ( ) : sys.path '' ' return flask.render_template ( 'template_test.html ' , value=False ) is_permanent = False assert app.jinja_env.tests [ 'boolean ' ] ( False ) def test_disallow_string_for_allowed_methods ( ) : assert 'get_stuff ' in app.jinja_env.globals.keys ( ) def post ( self ) : from flask import ext os.path.dirname ( __file__ ) , 'test_apps ' ) ) purge_module ( 'main_app ' ) def test_build_error_handler ( ) : def foo_bar_foo ( ) : assert rv.data == b'GET ' assert_ = assert_true root = self.getRootSuite ( ) text= ' < strong > HTML < /strong > allowed here ' def after1 ( response ) : else : assert rv == u ' '' \\u003c/script\\u003e '' ' app.add_template_filter ( my_reverse ) permanent = True def logout ( client ) : return flask.session [ 'value ' ] # with statement is important because we leave an exception on the @ app.endpoint ( 'bar ' ) raise MyDecoratorException ( ) def test_url_mapping ( self ) : flask.testsuite.signals assert oldext_simple.__name__ == 'flaskext.oldext_simple ' ' { { foo } } ' , foo= ' < test > ' ) == ' < test > ' assert b'The two passwords do not match ' in rv.data rv = flask.make_response ( 'W00t ' , 404 ) called.append ( 4 ) rv = c.post ( '/ ' , data= { } , follow_redirects=True ) rv = self.register ( 'meh ' , ' x ' , ' y ' ) for other_suite in iter_suites ( ) : self.assert_equal ( rv.mimetype , 'text/html ' ) expires = parse_date ( match.group ( ) ) with catch_warnings ( ) as captured : class ForbiddenSubclass ( Forbidden ) : reason='Signals require the blinker library . ' expected_max_age = 7200 assert rv == ' '' \\u0027 '' ' return flask.render_template ( SESSION_COOKIE_SECURE=True , flask._request_ctx_stack.top.pop ( ) def test_make_response_with_response_instance ( ) : self.assert_not_in ( 'after ' , evts ) egg_setup = base.join ( 'setup.py ' ) def from_two_args_tuple ( ) : 'file ( No such file or directory ) : ' ) ) def test_multi_route_rules ( ) : time.sleep ( 0.2 ) 'import flask\n ' def test_custom_template_loader ( self ) : def g ( ) : return 'ignored anyway ' def sideend_no ( ) : f ( * args , * * kwargs ) def test_exception_propagation ( self ) : app.register_blueprint ( blue ) self.assert_equal ( sorted ( meths ) , [ 'DELETE ' , 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) `` X-Foo '' : `` Bar '' , rv = c.post ( 'http : //domain.com/action ? vodka=42 ' , data= { 'gin ' : 43 } ) # testing flask internally in debug mode in a few cases app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = False rv = self.login ( flaskr.app.config [ 'USERNAME ' ] , def catch_stderr ( ) : with patch_pkgutil_get_loader ( ) : def test_config_from_mapping ( self ) : self.assert_equal ( rv.data , u'정상처리'.encode ( 'utf-8 ' ) ) app.config [ 'SERVER_NAME ' ] = 'localhost ' site_packages.join ( 'site_app.py ' ) .write ( with minitwit.app.app_context ( ) : flask.flash ( u'Hello World ' , 'error ' ) import re def get_send_file_max_age ( self , filename ) : assert False , 'expected exception ' self.assertEqual ( rv.status_code , 400 ) app.config.from_pyfile ( __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' ) def test_trapping_of_bad_request_key_errors ( self ) : def frontend_page2 ( ) : self.assert_equal ( rv.data , b'Hello World ! ' ) assert b'Your message was recorded ' in rv.data assert rv.data == f.read ( ) def before_request_signal ( sender ) : return u '' self.assert_equal ( rv.data , b'Foo SubDomain ' ) assert flask.g.x == 42 cookie = rv.headers [ 'set-cookie ' ] .lower ( ) rv = c.get ( '/admin/ ' ) sys.path.append ( installed_path ) app.secret_key = 'dev key ' def test_options_work ( ) : # Test base case , a URL which results in a BuildError . def return_something ( error ) : filters = warnings.filters with app.test_request_context ( '/ ? name=World ' ) : index ( ) called.append ( True ) assert flask.g.get ( ' x ' ) == 42 assert not hasattr ( flask.g , 'value ' ) self.assertRaises ( BuildError , app.handle_url_build_error , error , 'spam ' , { } ) assert flask.has_request_context ( ) SESSION_COOKIE_HTTPONLY=False , c.get ( `` / '' ) with flaskr.app.app_context ( ) : return flask.redirect ( '/getsession ' ) def test_add_template_filter_with_template ( self ) : evts = [ ] return test self.assert_in ( b'Internal Server Error ' , resp.data ) flask.g.foo = 23 self.assert_equal ( rv.data , b ' < h1 > 42 < /h1 > ' ) 'Content-Type ' : 'text/plain ; charset=utf-8 ' ctx.push ( ) def bar ( ) : if config_key is not None : return resp def test_get_method_on_g ( ) : else : flask.g.foo = 23 self.assert_equal ( list ( flask.get_flashed_messages ( ) ) , [ 'Zap ' , 'Zip ' ] ) raise ValueError ( assert b'the message by bar ' in rv.data self.assert_equal ( app.jinja_env.filters [ 'strrev ' ] , my_reverse ) assert flask.url_for ( 'index ' , _anchor= ' x y ' ) == '/ # x % 20y ' ~~~~~~~~~~~~~~~~~~~~~~ else : assert c.get ( '/unicode ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) except BuildError as err : assert not app.config.from_pyfile ( 'missing.cfg ' , silent=True ) with flask._app_ctx_stack.top : assert isinstance ( e , Forbidden ) template_folder='template ' ) ] ) def test_custom_converters ( ) : os.path.join ( app.root_path , 'static/index.html ' ) ) flask.url_for ( 'index ' ) app.secret_key = 'development-key ' class RequestContextTestCase ( FlaskTestCase ) : def test_add_template_filter_with_name ( ) : assert rv.data == b ' [ 42 ] ' self.assert_true ( 0 , 'expected exception ' ) self.assert_equal ( c.get ( '/ ' ) .data , b ' 1 ' ) with client.session_transaction ( ) : rv = register ( client , `` , 'default ' ) raise MyException ( ) assert flask.url_for ( 'myview ' , id=42 , _method='GET ' ) == '/myview/42 ' ext.join ( ' b.py ' ) .write ( '\n ' ) result = greenlets [ 0 ] .run ( ) def context_processor ( ) : self.assert_true ( app.jinja_env.globals [ 'get_stuff ' ] ( ) , 42 ) app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) self.assert_true ( flask.request ) def __init__ ( self , app ) : self.assert_equal ( app.instance_path , os.path.join ( here , 'test_apps ' , 'instance ' ) ) assert rv.data == u'정상처리'.encode ( 'utf-8 ' ) html=flask.Markup ( text ) ) with self.assert_raises ( AttributeError ) : # Trigger caches suite.addTest ( unittest.makeSuite ( SignalsTestCase ) ) rv = self.login ( 'user1 ' , 'wrongpassword ' ) c.get ( '/ ' ) def test_standard_context ( self ) : def other ( ) : assert called == [ ] def test_macros ( self ) : self.assert_true ( isinstance ( e , BadRequest ) ) def test_urls ( self ) : def for_bar_foo ( ) : def find_module ( self , name , path=None ) : def super_reverse ( s ) : app.add_template_filter ( my_reverse ) msg = str ( e ) rv = self.logout ( ) def read ( ) : ~~~~~~~~~~~~~~~~~~~~~~~~~~~ # reraise ( ) adds a second frame so we need to skip that one too . `` `` '' A testsuite that has all the Flask tests . You can use this assert c.get ( '/py/bar/foo ' ) .data == b'bp.bar_foo ' yield s , ' % s. % s. % s ' % ( app.route ( '/ ' ) ( index ) app.view_functions [ 'index ' ] = index index2.provide_automatic_options = True errors.append ( exc ) self.assert_equal ( rv.mimetype , 'text/plain ' ) self.assert_equal ( rv.data , b'stuff ' ) app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = max_age_default self.add_message ( ' < test message 2 > ' ) 'site_package-instance ' ) ) assert recorded == [ 'push ' , 'pop ' ] self.assert_equal ( len ( messages ) , 3 ) import sys leaks.append ( flask._request_ctx_stack.pop ( ) ) def assert_true ( self , x , msg=None ) : with app.test_request_context ( ) : x.write ( 'ext_id = `` newext_simple '' ' ) assert x in y , `` % r unexpectedly not in % r '' % ( x , y ) def oldext_package ( modules_tmpdir ) : suite.addTest ( unittest.makeSuite ( NoImportsTestCase ) ) self.assert_equal ( rv4.headers [ ' X-Foo ' ] , 'Bar ' ) def for_bar ( ) : return flask.url_for ( 'about ' , lang_code='en ' ) app = Flask ( __name__ ) rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) ~~~~~~~~~~~~~~~~~~~ def handle ( x , record ) : with pytest.raises ( AssertionError ) : login ( client , flaskr.app.config [ 'USERNAME ' ] , @ bp.app_template_filter ( ) self.assert_equal ( flask.url_for ( 'index ' , _anchor= ' x y ' ) , self.fail ( 'expected exception ' ) assert rv [ ' b ' ] == b'\xff ' app.logger.addHandler ( StreamHandler ( out ) ) flask.session.permanent = is_permanent with self.assert_raises ( RuntimeError ) : return flask.url_for ( '.about ' ) gc.collect ( ) SESSION_COOKIE_PATH='/ ' def test_message_recording ( client ) : return 'Hello ' , { self.assert_in ( 'domain=example.com ' , rv.headers [ 'set-cookie ' ] .lower ( ) ) def test_preserve_remembers_exception ( ) : rv = flask.session [ 'foo ' ] = flask.session.get ( 'foo ' , 0 ) + 1 assert len ( errors ) == 2 # Create new test client on each test to clean flashed messages . from datetime import datetime import uuid assert ' 1 // 0 ' in err def test_app_context_provides_current_app ( ) : elif not issubclass ( exc_type , self.exc_type ) : app.add_url_rule ( '/ ' , 'index ' , self.index ) text = str ( record.msg ) class Index ( flask.views.MethodView ) : return flask.render_template ( 'escaping_template.html ' , text=text , import threading def test_app_tearing_down_with_previous_exception ( self ) : warnings.filters = filters self.assert_true ( match is None ) raise ForbiddenSubclass ( ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' , 'PUT ' ] password2 = password class ListConverter ( BaseConverter ) : def __init__ ( self , app ) : 'simple_template.html ' , # should render this client = flaskr.app.test_client ( ) ' X-Method ' : flask.request.method app.config.update ( SERVER_NAME='localhost.localdomain:443 ' ) def before_request_handler ( ) : self.assert_equal ( 200 , response.status_code ) self.assert_in ( 'domain=.example.com ' , cookie ) os.environ = { 'FOO_SETTINGS ' : 'missing.cfg ' } if text : app.config.from_object ( __name__ ) class ExtImportHookTestCase ( FlaskTestCase ) : rv = app.test_client ( ) .get ( '/ ' , 'http : //www.example.com:8080/test/ ' ) flask.session.permanent = permanent # Define top-level directories def after2 ( response ) : rv4 = c.get ( '/args_header ' ) expires = parse_date ( match.group ( ) ) self.assert_equal ( len ( recorded ) , 1 ) @ app.teardown_appcontext rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) rv = client.get ( '/foo/unfollow ' , follow_redirects=True ) app.add_template_filter ( my_reverse , 'super_reverse ' ) @ app.route ( '/ ' ) def test_uninstalled_package_paths ( self ) : class Base ( object ) : self.assert_true ( req is not None ) return flask.request.method self.assert_isinstance ( app.config , Config ) ' < a ng-data=\ ' { `` x '' : [ `` foo '' , `` bar '' , `` baz\\u0027 '' ] } \ ' > < /a > ' ) def test_dotted_names_from_app ( ) : errors.append ( exc ) Signalling . envlist = docs , py26 , py27 , pypy , py33 , py34 # we should now see foo 's message rv = pickle.loads ( c.get ( '/ ' ) .data ) app.config [ 'FOO_OPTION_1 ' ] = 'foo option 1 ' c.get ( '/fail ' ) def test_user_error_handling ( ) : : copyright : ( c ) 2014 by Armin Ronacher . self.assert_equal ( rv.data , b'http : //example.com:1234/foo/ ' ) bp = flask.Blueprint ( 'bp ' , __name__ ) result = greenlets [ 0 ] .run ( ) assert False , 'Expected exception ' @ app.route ( '/success ' ) app.add_url_rule ( '/more ' , 'more ' , more , methods= [ 'GET ' , 'POST ' ] ) # This is necessary since Python only starts tracking def test_http_error_subclass_handling ( ) : self.assert_equal ( flask.g.get ( ' x ' ) , 42 ) app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : self.assert_in ( 'this is a debug statement ' , out ) os.environ = { 'FOO_SETTINGS ' : __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' } Tests deprecation support . b ' < p > Hello World ! ' assert c.get ( '/be ' ) .data.strip ( ) == b'/fe ' assert c.get ( '/py/foo ' ) .data == b'bp.foo ' flask.Flask ( __name__ ) bp.route ( '/bar/123 ' , endpoint='bar.123 ' ) , def test_get_method_on_g ( self ) : got.append ( 42 ) def foo ( bar , baz ) : assert value == 'attachment ' self.fail ( 'Expected exception ' ) 'site_package-instance ' ) ) @ frontend.route ( '/fe2 ' ) self.assert_equal ( rv.data.split ( ) , [ b'42 ' , b'23 ' , b'False ' , b'aha ' ] ) assert c.get ( '/backend-no ' ) .data == b'backend says no ' def test_add_template_test_with_name ( ) : return 'apple ' _gc_lock.release ( ) def test_subdomain_matching_with_ports ( self ) : app.add_template_filter ( super_reverse ) def test_preserve_remembers_exception ( self ) : def dispatch_request ( self ) : in case you want to test that monkeypatches to Flask do not from flask.testsuite import FlaskTestCase , catch_warnings , catch_stderr modules_tmpdir.join ( 'importerror.py ' ) .write ( 'raise NotImplementedError ( ) ' ) include Makefile CHANGES LICENSE AUTHORS run-tests.py @ app.route ( '/more ' , methods= [ 'GET ' , 'POST ' ] ) } ) resp = c.get ( '/ ' ) 'frontend/index.html ' ] ) def add_language_code ( endpoint , values ) : def test_url_mapping ( ) : return flask.url_for ( '.index ' ) @ app.errorhandler ( MyException ) app.add_url_rule ( '/ ' , view_func=view ) assert cc.max_age == 10 assert 'strrev ' in app.jinja_env.filters.keys ( ) rv = flask.render_template_string ( 'Hello { { config.WORLD_NAME } } ' class ConfigTestCase ( FlaskTestCase ) : def test_blueprint_url_definitions ( ) : assert response.data == b'stuff ' macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) self.assertEqual ( called , [ 'request ' , 'app ' ] ) with pytest.raises ( RuntimeError ) : assert c.get ( '/bump ' ) .data == b ' 3 ' Rule ( '/ ' , endpoint='index ' ) def test_flaskext_new_package_import_module ( newext_package ) : # testing functions return 'banana ' self.assert_equal ( site_egg.app.instance_path , 'import flask\n\napp = flask.Flask ( __name__ ) ' def bar ( bar ) : def test_template_filter ( self ) : return True app.config [ 'SERVER_NAME ' ] = 'example.com:1234 ' purge_module , site_packages , limit_loader ) : assert templates == [ 'admin/index.html ' , 'frontend/index.html ' ] assert b ' & lt ; test message 2 & gt ; ' in rv.data url = flask.url_for ( 'view ' , company_id='xxx ' ) self.assert_equal ( rv.data.strip ( ) , b'Hello Subdomain ' ) def test_context_binding ( self ) : from flask._compat import reraise , StringIO @ app.template_filter ( 'super_reverse ' ) def error2 ( ) : return u'Hällo Wörld'.encode ( 'utf-8 ' ) if sys.version_info > = ( 2 , 7 ) and \ pass assert 'domain=example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) @ app.route ( '/test_filters_without_returning_categories/ ' ) if len ( all_tests ) == 1 : app.test_client ( ) .get ( '/ ' ) text = ' < p > Hello World ! ' self.assert_true ( app.jinja_env.tests [ 'is_boolean ' ] ( False ) ) b ' & lt ; p & gt ; Hello World ! ' , def handler ( error , endpoint , values ) : old_load_setting = app.config [ 'EXPLAIN_TEMPLATE_LOADING ' ] return inner yield rv def blue_deco_test ( ) : ext_id = 'oldext_simple ' ( 'TEST_KEY ' , 'foo ' ) flask.Markup ( u ' < em > Testing < /em > ' ) `` server name from the WSGI environment ( 'localhost ' ) '' base.join ( name ) .ensure_dir ( ) flask.g.x = 42 self.assertEquals ( r.status_code , 200 ) return `` Ignored '' assert rv.data == b'Hello World ! ' tests.signals def finish2 ( exc ) : for x in range ( 3 ) : rv = c.get ( '/foo ' , data= { } , follow_redirects=True ) from flask._compat import PY2 flask.testsuite with app.test_client ( ) as c : app = modules_tmpdir.join ( 'main_app.py ' ) assert b'No entries here so far ' in rv.data assert b'the message by foo ' in rv.data def test_view_inheritance ( self ) : assert ' x-sendfile ' in rv.headers def test_memory_consumption ( self ) : # in the view functions will cause a 500 response to the test client modules_tmpdir.join ( 'var ' ) .join ( 'site_package-instance ' ) def test_session_using_application_root ( ) : self.assert_equal ( rv.mimetype , 'text/plain ' ) app.write ( 'import flask\n\napp = flask.Flask ( `` __main__ '' ) ' ) return flask.render_template ( 'escaping_template.html ' , text=text , def test_reuse_client ( self ) : app = modules_tmpdir.join ( 'config_module_app.py ' ) .write ( assert submodule.test_function ( ) == 42 flask.render_template ( 'missing.html ' ) def test_view_patching ( self ) : client.get ( '/ ' ) rv = login ( client , flaskr.app.config [ 'USERNAME ' ] , assert rv.data.strip ( ) == b'Hello Subdomain ' assert rv.status_code == 404 from flask.ext import newext_package buffer = [ ] app = modules_tmpdir.join ( 'unimportable.py ' ) return flask.g.something , 404 values.setdefault ( 'lang_code ' , flask.g.lang_code ) return '42 ' assert b'internal server error ' == rv.data def test_inject_blueprint_url_defaults ( ) : assert flask._request_ctx_stack.top is not None self.assert_in ( os.path.basename ( __file__.rsplit ( ' . ' , 1 ) [ 0 ] + '.py ' ) , out ) return 'Meh ' , 400 , { # that a real flaskext could be in there which would disable our assert b ' & lt ; Hello & gt ; ' in rv.data flask.flash ( 'Zap ' ) class MyDecoratorException ( Exception ) : self.assert_ ( calls.append ( 'after-handler ' ) return 'not found ' , 404 ) , follow_redirects=True ) ~~~~~~~~~~~~~~~~~~~~~~~~~~ def test_none_response ( self ) : def test_templates_list ( self ) : c = app.test_client ( use_cookies=False ) c.get ( '/success ' ) app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) assert rv.mimetype == 'text/html ' import installed_package assert rv.mimetype == 'application/octet-stream ' ' X-Foo ' : 'Testing ' , flask.testsuite.basic cmdclass= { 'audit ' : run_audit } , def test_teardown_request_handler ( ) : assert app.logger.level == 10 self.assert_equal ( resp.status_code , 500 ) def test_flaskext_old_package_import_submodule ( self ) : def test_with_categories ( ) : self.assert_equal ( rv4.data , b'Hello world ' ) return 'Awesome ' suite.addTest ( unittest.makeSuite ( ConfigTestCase ) ) flask.g.something = 'value ' register_and_login ( client , 'bar ' , 'default ' ) index.provide_automatic_options = False app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = max_age_default self.assert_equal ( app.logger.level , 10 ) c = app.test_client ( use_cookies=False ) assert ( set_cookie is not None ) == expect_header import blinker assert 'TestConfig ' not in app.config with c : self.assert_equal ( cleanup_stuff , [ None ] ) Tests the request context . def after_request_signal ( sender , response ) : assert rv.data == b'Hello World ! ' except IOError as e : @ app.errorhandler ( 413 ) def __getattr__ ( self , name ) : dirs = ( 'flask ' , 'examples ' , 'scripts ' ) assert c.get ( '/foo/ ' ) .data == b'foo ' message = 'No module named missing_module ' lambda : bp.add_url_rule ( def test_session_lifetime ( self ) : self.assert_equal ( rv.data , b'Hello from the Frontend ' ) deps = blinker values.setdefault ( 'lang_code ' , flask.g.lang_code ) assert app.jinja_env.tests [ 'is_boolean ' ] == is_boolean assert flask.request.args [ 'foo ' ] == 'bar ' def __enter__ ( self ) : try : from flask.ext.newext_package.submodule import test_function def test_session_transactions_keep_context ( ) : def test_send_file_object ( self , catch_deprecation_warnings ) : self.assert_ ( 'missing_template.html ' in str ( e ) ) flask._request_ctx_stack.top.pop ( ) def test_user_error_handling ( self ) : def test_teardown_with_previous_exception ( self ) : self.assert_in ( 'cookies ' , str ( e ) ) assert 'Session backend did not open a session ' in str ( e ) self.assert_equal ( index ( ) , 'Hello World ! ' ) def test_options_on_multiple_rules ( ) : expected_max_age = 3600 return `` Hey '' assert rv.data == b'foo ' class StreamingTestCase ( FlaskTestCase ) : def test_session_using_session_settings ( ) : rv = c.get ( u'/киртест ' ) def my_reverse ( s ) : add_message ( client , 'the message by bar ' ) self.assert_equal ( b'xxx ' , response.data ) def test_installed_package_paths ( limit_loader , modules_tmpdir , def assert_isinstance ( self , obj , cls ) : def test_request_signals ( self ) : return flask.url_for ( 'myapp.backend.backend_index ' ) os.close ( db_fd ) self.assert_equal ( sess [ 'foo ' ] , [ 42 ] ) self.assert_equal ( rv.headers [ ' x-sendfile ' ] , assert rv.status_code == 400 assert not app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) blueprint = MyBlueprint ( 'blueprint ' , __name__ , static_folder='static ' ) rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com/ ' ) app.config.from_object ( Test ) def boolean ( value ) : assert rv.data == b'Test ' message = 'No module named \'missing_module\ '' `` `` '' Records a message '' '' '' assert c.get ( '/what-is-a-sideend ' ) .data == b'application itself says no ' assert not flask.has_request_context ( ) assert flask.current_app == app def client ( ) : def test_full_url_request ( self ) : class SuppressedFlask ( flask.Flask ) : assert app.test_client ( ) .get ( '/ ' ) .data == b'Awesome ' self.assert_equal ( c.get ( '/de/ ' ) .data , b'/de/about ' ) ctx.pop ( ) def test_timelines ( client ) : def test_trapping_of_all_http_exceptions ( self ) : flask.got_request_exception.connect ( record , app ) rv = c.delete ( '/more ' ) assert app.jinja_env.filters [ 'my_reverse ' ] == my_reverse os.unlink ( minitwit.app.config [ 'DATABASE ' ] ) assert app.jinja_env.filters [ 'strrev ' ] == my_reverse SERVER_NAME='localhost.localdomain:5000 ' os.pardir , os.pardir , 'examples ' ) except BuildError as err : def teardown_app ( error=None ) : rv = c.get ( '/read ' ) t.join ( ) def is_boolean ( value ) : assert rv [ 't ' ] == ( 1 , 2 , 3 ) cleanup_stuff = [ ] return 'Test ' ] ) def test_add_template_test_with_name_and_template ( ) : self.prefix = prefix self.assert_equal ( b'forbidden ' , rv.data ) sys.path.insert ( 0 , path ) assert b'Internal Server Error ' in rv.data finally : rv = self.register ( `` , 'default ' ) @ app.route ( '/ ' , methods='GET POST ' ) return 'Meh ' def test_config_from_class ( self ) : self.assert_equal ( newext_package.__name__ , 'flask_newext_package ' ) def log_exception ( self , exc_info ) : import os.path assert rv.status_code == 404 rv = c.get ( '/admin/ ' ) self.assert_equal ( rv.mimetype , 'text/plain ' ) ~~~~~~~~~~~~~~ @ bp.route ( '/bar ' ) def test_add_template_test ( ) : return lambda : warnings.catch_warnings ( record=True ) return 'Foo SubDomain ' from flask.testsuite import add_to_path assert newext_simple.ext_id == 'newext_simple ' assert match is None return text_type ( flask.session [ 'foo ' ] ) class TestLogging ( object ) : import gc loc.__storage__ [ 'FOOO ' ] = [ 1 , 2 , 3 ] assert rv.data == b'index for mitsuhiko ' `` `` '' Get rid of the database again after each test . '' '' '' app.logger.handlers [ : ] = old_handlers os.path.dirname ( __file__ ) , 'test_apps ' ) ) ) # ported Flask to Python 3 . import minitwit warnings.simplefilter ( 'default ' , category=DeprecationWarning ) return os.path.samefile ( x , y ) def test_uninstalled_module_paths ( modules_tmpdir , purge_module ) : def delete ( self ) : self.assert_equal ( rv.status_code , 500 ) cls = type ( item ) pkg = modules_tmpdir.mkdir ( 'flask_newext_package ' ) self.assert_equal ( len ( errors ) , 3 ) def before_request ( ) : assert rv == ' '' \\u003c ! -- \\u003cscript\\u003e '' ' SESSION_COOKIE_DOMAIN='.example.com ' , bp.add_app_template_test ( is_boolean ) `` server name from the WSGI environment ( 'localhost ' ) '' ) `` `` '' Yields all the tests and their names from a given suite . '' '' '' def test_uninstalled_module_paths ( self ) : def test_method_based_view ( self ) : rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) self.assert_equal ( rv.data , b'Blub ' ) Engine 's HardenedModulesHook , which have neither the ` get_filename ` method assert rv.data == b'value ' import flaskr purge_module ( 'site_app ' ) `` `` '' Registers and logs in in one go '' '' '' assert rv.data == b'Hello Custom World ! ' from contextlib import contextmanager assert sorted ( flask.g ) == [ 'bar ' , 'foo ' ] app.add_template_test ( is_boolean , 'boolean ' ) import time def test_session_transactions_keep_context ( self ) : sys.stderr = rv = StringIO ( ) os.path.join ( app.root_path , 'static/index.html ' ) self.assert_equal ( buffer , [ ] ) calls = [ ] self.assert_equal ( rv4.headers [ ' X-Bar ' ] , 'Foo ' ) def teardown_req ( error=None ) : return 'apple ' # testing flask internally in debug mode in a few cases def test_flaskext_new_package_import_submodule_function ( newext_package ) : return flask.render_template ( 'simple_template.html ' , whiskey=42 ) app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) def test_add_template_filter_with_name_and_template ( self ) : flask.message_flashed.connect ( record , app ) def test_session_transactions_no_null_sessions ( self ) : self.assert_equal ( rv.data , b'normal index ' ) def __call__ ( self , environ , start_response ) : rv = c.post ( 'http : //domain.com/action ? vodka=42 ' , data= { 'gin ' : 43 } ) { } , { } assert rv == 'Hello Special World 42 ' env = os.environ self.assert_equal ( called , [ ] ) def test_request_less_rendering ( ) : from datetime import datetime assert flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) == \ called.append ( 2 ) self.assert_not_in ( ' x-sendfile ' , rv.headers ) def test_dotted_names ( ) : assert app.jinja_env.filters [ 'my_reverse ' ] ( 'abcd ' ) == 'dcba ' from flask.ext import newext_simple @ app.context_processor @ app.route ( '/ < list : args > ' ) This provides for tests where a system has custom loaders , e.g . Google App return 'Awesome ' self.assert_in ( ' x-sendfile ' , rv.headers ) self.assertEqual ( called , [ 42 ] ) assert c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data == b'value set ' sys.meta_path.append ( Loader ( ) ) suite.addTest ( unittest.makeSuite ( AppContextTestCase ) ) flask.session [ ' u ' ] = the_uuid def index ( ) : assert errors == [ ] assert b'Success ! ' in rv.data if warns > 0 :","['.travis-devel-requirements.txt', '.travis-lowest-requirements.txt', '.travis-release-requirements.txt', '.travis.yml', 'MANIFEST.in', 'Makefile', 'examples/blueprintexample/blueprintexample_test.py', 'examples/blueprintexample/test_blueprintexample.py', 'examples/flaskr/flaskr_tests.py', 'examples/flaskr/test_flaskr.py', 'examples/minitwit/minitwit_tests.py', 'examples/minitwit/test_minitwit.py', 'flask/testsuite/__init__.py', 'flask/testsuite/appctx.py', 'flask/testsuite/basic.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/config.py', 'flask/testsuite/deprecations.py', 'flask/testsuite/examples.py', 'flask/testsuite/ext.py', 'flask/testsuite/regression.py', 'flask/testsuite/reqctx.py', 'flask/testsuite/signals.py', 'flask/testsuite/subclassing.py', 'flask/testsuite/templating.py', 'flask/testsuite/test_apps/config_module_app.py', 'flask/testsuite/test_apps/config_package_app/__init__.py', 'flask/testsuite/test_apps/flask_broken/__init__.py', 'flask/testsuite/test_apps/flask_broken/b.py', 'flask/testsuite/test_apps/flask_newext_package/__init__.py', 'flask/testsuite/test_apps/flask_newext_package/submodule.py', 'flask/testsuite/test_apps/flask_newext_simple.py', 'flask/testsuite/test_apps/flaskext/__init__.py', 'flask/testsuite/test_apps/flaskext/oldext_package/__init__.py', 'flask/testsuite/test_apps/flaskext/oldext_package/submodule.py', 'flask/testsuite/test_apps/flaskext/oldext_simple.py', 'flask/testsuite/test_apps/importerror.py', 'flask/testsuite/test_apps/lib/python2.5/site-packages/SiteEgg.egg', 'flask/testsuite/test_apps/lib/python2.5/site-packages/site_app.py', 'flask/testsuite/test_apps/lib/python2.5/site-packages/site_package/__init__.py', 'flask/testsuite/test_apps/main_app.py', 'flask/testsuite/test_apps/path/installed_package/__init__.py', 'flask/testsuite/testing.py', 'flask/testsuite/views.py', 'run-tests.py', 'scripts/{flaskext_test.py => flaskext_tester.py}', 'setup.py', 'tests/conftest.py', '{flask/testsuite => tests}/static/config.json', '{flask/testsuite => tests}/static/index.html', '{flask/testsuite => tests}/templates/_macro.html', '{flask/testsuite => tests}/templates/context_template.html', '{flask/testsuite => tests}/templates/escaping_template.html', '{flask/testsuite => tests}/templates/mail.txt', '{flask/testsuite => tests}/templates/nested/nested.txt', '{flask/testsuite => tests}/templates/simple_template.html', '{flask/testsuite => tests}/templates/template_filter.html', '{flask/testsuite => tests}/templates/template_test.html', 'tests/test_appctx.py', '{flask/testsuite => tests}/test_apps/blueprintapp/__init__.py', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/__init__.py', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/admin/__init__.py', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/admin/static/css/test.css', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/admin/static/test.txt', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/admin/templates/admin/index.html', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/frontend/__init__.py', '{flask/testsuite => tests}/test_apps/blueprintapp/apps/frontend/templates/frontend/index.html', '{flask/testsuite => tests}/test_apps/subdomaintestmodule/__init__.py', '{flask/testsuite => tests}/test_apps/subdomaintestmodule/static/hello.txt', 'tests/test_basic.py', 'tests/test_blueprints.py', 'tests/test_config.py', 'tests/test_deprecations.py', 'tests/test_ext.py', 'flask/testsuite/helpers.py => tests/test_helpers.py', 'tests/test_instance_config.py', 'tests/test_regression.py', 'tests/test_reqctx.py', 'tests/test_signals.py', 'tests/test_subclassing.py', 'tests/test_templating.py', 'tests/test_testing.py', 'tests/test_views.py', 'tox.ini']",Merge pull request # 1165 from untitaker/new_testsuite
532,773ad9b92d447102b92492f64d7ba0e708746f83,2014-09-10 07:37:25+02:00,"# actually memorable . # actually rememberable . twice , sometimes crashing without message or dieing when a syntax or twice , sometimes crashing without message or dying when a syntax or","['docs/server.rst', 'scripts/flaskext_test.py']",Merge pull request # 1172 from cgar/spelling
533,96d7cc933ae19133ac3cab535b0ea83c6dfecce4,2014-08-28 17:02:27+02:00,A : class : ` Headers ` object representing the response headers . A : class : ` ~werkzeug.datastructures.Headers ` object representing the response headers . .. autofunction : : without_appcontext : :,"['docs/api.rst', 'flask/testing.py']",Merge pull request # 1161 from pbu88/master
534,462bc6c2e5972cd4a91a12a93478b8c7c0739a5f,2014-08-28 16:12:27+02:00,"New python executable in venv/bin/python $ mkdir flask $ pip install Flask==dev $ cd flask Installing setuptools , pip ............ done . To just get the development version without git , do this instead : : Finished processing dependencies for Flask==dev $ . venv/bin/activate $ virtualenv venv ...",['docs/installation.rst'],Merge pull request # 1160 from untitaker/docs_dev_installation
535,01450efc25277e8832d1a00916af009db8a07dcf,2014-08-23 00:18:15+02:00,network connection of the server to another system failed . reading from the incoming data . reading from the incoming data the database server was overloaded and could not handle the query fail . Here some situations where perfectly fine code can lead to server network connection of the server to another system failed the database server was overloaded and could not handle the query . fail . Here are some situations where perfectly fine code can lead to server,['docs/errorhandling.rst'],Merge pull request # 1150 from kylepjohnson/master
536,60260eb0f0954ceddad559161445848214a50ec5,2014-08-12 14:46:56-04:00,"`` PREFERRED_URL_SCHEME `` from the : ref : ` app configuration < config > ` if no request context is available . behavior uses the same scheme as the current request , or parameter must be set to ` True ` or a ` ValueError ` is raised . The default parameter must be set to ` True ` or a ` ValueError ` is raised .",['flask/helpers.py'],Merge pull request # 1144 from untitaker/url_for_scheme_docs
537,1d55b8983efdc840b83ae6ccc4e496165010c8d1,2014-07-31 10:33:44+02:00,"< script type= '' text/javascript '' < div class=metanav > < div class=actions > < input type=submit value= '' Sign Up '' > < /div > > < input type= '' submit '' value= '' Share '' > < script type= '' text/javascript '' > < dd > < input type= '' password '' name= '' password2 '' size= '' 30 '' > < form action= '' { { url_for ( 'login ' ) } } '' method= '' post '' > > < input type=submit value= '' Share '' > < form action= '' { { url_for ( 'add_entry ' ) } } '' method= '' post '' class= '' add-entry '' > < div class=flash > { { message } } < /div > < ul class= '' entries '' > < div class=footer > { % if error % } < div class= '' error '' > < strong > Error : < /strong > { { error } } < /div > { % endif % } < form action= '' { { url_for ( 'add_message ' ) } } '' method=post > < div class= '' twitbox '' > Not signed in . < a href= '' # '' class=signin > Sign in < /a > < div class=followstatus > < div class= '' actions '' > < input type= '' submit '' value= '' Sign In '' > < /div > < div class=actions > < input type=submit value= '' Sign In '' > < /div > < dd > < input type= '' submit '' value= '' Login '' > < script type=text/javascript > < div class= '' authbar '' > < dd > < input type=submit value=Login > < div class=authbar > < span id= '' result '' > ? < /span > < input type= '' text '' size= '' 5 '' name= '' a '' > < div class= '' followstatus '' > < div class=page > < p > < input type=text name=text size=60 > < ! < div class= '' page '' > < dd > < textarea name=text rows=5 cols=40 > < /textarea > < dd > < input type=text size=30 name=title > < input type= '' text '' size= '' 5 '' name= '' b '' > = < form action= '' '' method=post > < dd > < input type= '' password '' name= '' password '' size= '' 30 '' > < link rel=stylesheet href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > < div class= '' footer '' > < span id=result > ? < /span > < ul class= '' messages '' > { % if error % } < p class=error > < strong > Error : < /strong > { { error } } { % endif % } < p > < a href= # id= '' calculate '' > calculate server side < /a > < dd > < input type=text name=username size=30 value= '' { { request.form.username } } '' > < div class= '' metanav '' > < p > < input type= '' text '' name= '' text '' size= '' 60 '' > < ! < a class= '' follow '' href= '' { { url_for ( 'follow_user ' , username=profile_user.username ) < input type=text size=5 name=b > = < script type=text/javascript < dd > < input type=password name=password > < dd > < input type=password name=password size=30 > < link rel= '' stylesheet '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > < dd > < input type=submit value=Share > < div class= '' flash '' > { { message } } < /div > < dd > < textarea name= '' text '' rows= '' 5 '' cols= '' 40 '' > < /textarea > < form action= '' { { url_for ( 'add_message ' ) } } '' method= '' post '' > < a class=unfollow href= '' { { url_for ( 'unfollow_user ' , username=profile_user.username ) ( < a href= '' # '' class=signout > Sign out < /a > ) { % if error % } < div class=error > < strong > Error : < /strong > { { error } } < /div > { % endif % } < dd > < input type= '' text '' name= '' username '' size= '' 30 '' value= '' { { request.form.username } } '' > < a class=follow href= '' { { url_for ( 'follow_user ' , username=profile_user.username ) < dd > < input type= '' password '' name= '' password '' > < form action= '' { { url_for ( 'add_entry ' ) } } '' method=post class=add-entry > < dd > < input type= '' text '' name= '' email '' size= '' 30 '' value= '' { { request.form.email } } '' > < form action= '' '' method= '' post '' > < div class= '' navigation '' > < ul class=messages > < input type=text size=5 name=a > ( < a href= '' # '' class= '' signout '' > Sign out < /a > ) Not signed in . < a href= '' # '' class= '' signin '' > Sign in < /a > < dd > < input type= '' text '' size= '' 30 '' name= '' title '' > < div class=navigation > < a class= '' unfollow '' href= '' { { url_for ( 'unfollow_user ' , username=profile_user.username ) < link rel=stylesheet type=text/css href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > < dd > < input type=text name=email size=30 value= '' { { request.form.email } } '' > < dd > < input type= '' text '' name= '' username '' > < ul class=flashes > < form action= '' { { url_for ( 'login ' ) } } '' method=post > < ul class=entries > < div class= '' body '' > < p > < a href= # id=calculate > calculate server side < /a > < div class=twitbox > < ul class= '' flashes '' > { % if error % } < p class= '' error '' > < strong > Error : < /strong > { { error } } { % endif % } < div class= '' actions '' > < input type= '' submit '' value= '' Sign Up '' > < /div > < div class=body > < dd > < input type= '' submit '' value= '' Share '' > < dd > < input type=text name=username > < dd > < input type=password name=password2 size=30 > < link rel= '' stylesheet '' type= '' text/css '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' >","['examples/blueprintexample/simple_page/templates/pages/layout.html', 'examples/flaskr/templates/layout.html', 'examples/flaskr/templates/login.html', 'examples/flaskr/templates/show_entries.html', 'examples/jqueryexample/templates/index.html', 'examples/jqueryexample/templates/layout.html', 'examples/minitwit/templates/layout.html', 'examples/minitwit/templates/login.html', 'examples/minitwit/templates/register.html', 'examples/minitwit/templates/timeline.html', 'examples/persona/templates/layout.html']",Merge pull request # 1138 from LiterallyElvis/master
538,3c48bf893590fe87445a735584591201c3085e35,2014-07-29 20:42:28-05:00,"< script type= '' text/javascript '' < div class=metanav > < div class=actions > < input type=submit value= '' Sign Up '' > < /div > > < input type= '' submit '' value= '' Share '' > < script type= '' text/javascript '' > < dd > < input type= '' password '' name= '' password2 '' size= '' 30 '' > < form action= '' { { url_for ( 'login ' ) } } '' method= '' post '' > > < input type=submit value= '' Share '' > < form action= '' { { url_for ( 'add_entry ' ) } } '' method= '' post '' class= '' add-entry '' > < div class=flash > { { message } } < /div > < ul class= '' entries '' > < div class=footer > { % if error % } < div class= '' error '' > < strong > Error : < /strong > { { error } } < /div > { % endif % } < form action= '' { { url_for ( 'add_message ' ) } } '' method=post > < div class= '' twitbox '' > Not signed in . < a href= '' # '' class=signin > Sign in < /a > < div class=followstatus > < div class= '' actions '' > < input type= '' submit '' value= '' Sign In '' > < /div > < div class=actions > < input type=submit value= '' Sign In '' > < /div > < dd > < input type= '' submit '' value= '' Login '' > < script type=text/javascript > < div class= '' authbar '' > < dd > < input type=submit value=Login > < div class=authbar > < span id= '' result '' > ? < /span > < input type= '' text '' size= '' 5 '' name= '' a '' > < div class= '' followstatus '' > < div class=page > < p > < input type=text name=text size=60 > < ! < div class= '' page '' > < dd > < textarea name=text rows=5 cols=40 > < /textarea > < dd > < input type=text size=30 name=title > < input type= '' text '' size= '' 5 '' name= '' b '' > = < form action= '' '' method=post > < dd > < input type= '' password '' name= '' password '' size= '' 30 '' > < link rel=stylesheet href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > < div class= '' footer '' > < span id=result > ? < /span > < ul class= '' messages '' > { % if error % } < p class=error > < strong > Error : < /strong > { { error } } { % endif % } < p > < a href= # id= '' calculate '' > calculate server side < /a > < dd > < input type=text name=username size=30 value= '' { { request.form.username } } '' > < div class= '' metanav '' > < p > < input type= '' text '' name= '' text '' size= '' 60 '' > < ! < a class= '' follow '' href= '' { { url_for ( 'follow_user ' , username=profile_user.username ) < input type=text size=5 name=b > = < script type=text/javascript < dd > < input type=password name=password > < dd > < input type=password name=password size=30 > < link rel= '' stylesheet '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > < dd > < input type=submit value=Share > < div class= '' flash '' > { { message } } < /div > < dd > < textarea name= '' text '' rows= '' 5 '' cols= '' 40 '' > < /textarea > < form action= '' { { url_for ( 'add_message ' ) } } '' method= '' post '' > < a class=unfollow href= '' { { url_for ( 'unfollow_user ' , username=profile_user.username ) ( < a href= '' # '' class=signout > Sign out < /a > ) { % if error % } < div class=error > < strong > Error : < /strong > { { error } } < /div > { % endif % } < dd > < input type= '' text '' name= '' username '' size= '' 30 '' value= '' { { request.form.username } } '' > < a class=follow href= '' { { url_for ( 'follow_user ' , username=profile_user.username ) < dd > < input type= '' password '' name= '' password '' > < form action= '' { { url_for ( 'add_entry ' ) } } '' method=post class=add-entry > < dd > < input type= '' text '' name= '' email '' size= '' 30 '' value= '' { { request.form.email } } '' > < form action= '' '' method= '' post '' > < div class= '' navigation '' > < ul class=messages > < input type=text size=5 name=a > ( < a href= '' # '' class= '' signout '' > Sign out < /a > ) Not signed in . < a href= '' # '' class= '' signin '' > Sign in < /a > < dd > < input type= '' text '' size= '' 30 '' name= '' title '' > < div class=navigation > < a class= '' unfollow '' href= '' { { url_for ( 'unfollow_user ' , username=profile_user.username ) < link rel=stylesheet type=text/css href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' > < dd > < input type=text name=email size=30 value= '' { { request.form.email } } '' > < dd > < input type= '' text '' name= '' username '' > < ul class=flashes > < form action= '' { { url_for ( 'login ' ) } } '' method=post > < ul class=entries > < div class= '' body '' > < p > < a href= # id=calculate > calculate server side < /a > < div class=twitbox > < ul class= '' flashes '' > { % if error % } < p class= '' error '' > < strong > Error : < /strong > { { error } } { % endif % } < div class= '' actions '' > < input type= '' submit '' value= '' Sign Up '' > < /div > < div class=body > < dd > < input type= '' submit '' value= '' Share '' > < dd > < input type=text name=username > < dd > < input type=password name=password2 size=30 > < link rel= '' stylesheet '' type= '' text/css '' href= '' { { url_for ( 'static ' , filename='style.css ' ) } } '' >","['examples/blueprintexample/simple_page/templates/pages/layout.html', 'examples/flaskr/templates/layout.html', 'examples/flaskr/templates/login.html', 'examples/flaskr/templates/show_entries.html', 'examples/jqueryexample/templates/index.html', 'examples/jqueryexample/templates/layout.html', 'examples/minitwit/templates/layout.html', 'examples/minitwit/templates/login.html', 'examples/minitwit/templates/register.html', 'examples/minitwit/templates/timeline.html', 'examples/persona/templates/layout.html']",Addressed issue # 1134
539,c048aed65abdbf51955367b95242a53f0219853b,2014-07-27 13:22:36+02:00,"support Python 3 yet . Some Flask extensions , documentation and PyPI provided libraries do not vast majority of the PyPI provided libraries do not support Python 3 yet . Python 2 for now . As a result many of the problems you will encounter are is nothing for the faint of heart . porting libraries on your own . download stats . As a result many of the problems you will encounter are you are adventurous you can start porting libraries on your own , but that But if you are familiar with Python 3 and Flask extension , you can start supported by Python 3 you do n't know what happens six months from now . If The majority of the Flask extensions , all of the documentation and the Python 3 currently has less than 1 % of the users of Python 2 going by PyPI Although moving to Python 3 should be done someday , most people still use supported by Python 3 you do n't know what happens six months from now .",['docs/python3.rst'],Merge pull request # 1112 from methane/patch-3
540,02f0c755a36c382f210d6654b84316745ad2af00,2014-07-26 17:26:31+02:00,"`` 'localhost ' `` and every subdomain of it . Please choose a different keep a default configuration in version control . Either populate the Just put them into a module ( like ` shelltools ` and import from there ) : written to be read ; it 's documentation published so you can use its internal 1 . Create your application in a function and register blueprints on it . Keep a default configuration in version control . Either populate the of you . Special characters in the sense of HTML ( or XML , and thus XHTML ) Use an environment variable to switch between the configurations . 1. create your application in a function and register blueprints on it . for you . Special characters in the sense of HTML ( or XML , and thus XHTML ) `` 'localhost ' `` and every subdomain of it . Please chose a different use an environment variable to switch between the configurations . Just put them into a module ( like ` shelltools ` ) and import from there : written to be read ; it 's documentation is published so you can use its internal","['docs/becomingbig.rst', 'docs/config.rst', 'docs/shell.rst', 'docs/templating.rst']",Merge pull request # 1117 from lord63/patch-1
541,8d3ee017c58ded9e994a7d97c58bcc5d6a2a6e68,2014-07-26 10:42:47+02:00,".. _fabric : http : //www.fabfile.org/ .. _Fabric : http : //www.fabfile.org/ of the application . To do this , we fire some requests to the login and logout class will be our WSGI application . .. _fabric : http : //fabfile.org/ trigger test requests to the application , and the client will also keep track By using ` self.app.get ` we can send an HTTP ` GET ` request to the application with .. _cherokee : http : //www.cherokee-project.com/ .. _Dive Into HTML5 : http : //www.diveintohtml5.info/ http : //github.com/mitsuhiko/flask/tree/master/examples/minitwit/ the given path . The return value will be a : class : ` ~flask.Flask.response_class ` object . < https : //raw.githubusercontent.com/mitsuhiko/flask/master/scripts/flask-07-upgrade.py > ` _ .. _flup : https : //pypi.python.org/pypi/flup Note : WSGIDaemonProcess is n't implemented in Windows and Apache will the return value ( as string ) from the application . In this case , we ensure that operations : : meth : ` ~werkzeug.contrib.cache.BaseCache.get ` and < https : //github.com/mitsuhiko/flask/tree/master/examples/jqueryexample > ` _ This test client will give us a simple interface to the application . We can supported ( you get them from ` PyPI < https : //pypi.python.org/ > ` _ ) and a Notice that our test functions begin with the word ` test ` ; this allows .. _bind : https : //www.isc.org/downloads/bind/ of the application . To do this , we fire some requests to the login and logout class will be our WSGI application . .. _Fabric : http : //fabfile.org/ each individual test function is run . To delete the database after the .. _flaskext_compat.py : https : //raw.githubusercontent.com/mitsuhiko/flask/master/scripts/flaskext_compat.py Flask provides a way to test your application by exposing the Werkzeug .. _bind : https : //www.isc.org/software/bind pages with the required form data ( username and password ) . And because the : mod : ` unittest ` to automatically identify the method as a test to run . .. _Dive Into HTML5 : http : //diveintohtml5.info/ https : //github.com/mitsuhiko/flask/tree/master/examples/flaskr/ operations : : meth : ` ~werkzeug.contrib.cache.BaseCache.get ` and This test client will give us a simple interface to the application . We can http : //www.sqlalchemy.org/docs/orm/extensions/declarative.html .. _cherokee : http : //cherokee-project.com/ In order to test the application , we add a second module the return value ( as string ) from the application . In this case , we ensure that .. _WTForms website : http : //wtforms.simplecodes.com/ pages with the required form data ( username and password ) . And because the By using ` self.app.get ` we can send an HTTP ` GET ` request to the application with each individual test function is run . To delete the database after the Let 's check that the application shows `` No entries here so far '' if we Flask provides a way to test your application by exposing the Werkzeug .. _WTForms website : http : //wtforms.readthedocs.org/ : mod : ` unittest ` to automatically identify the method as a test to run . the given path . The return value will be a : class : ` ~flask.Flask.response_class ` object . ` website < http : //www.sqlalchemy.org/ > ` _ . supported ( you get them from ` PyPI < https : //pypi.python.org/pypi > ` _ ) and a ` website < http : //sqlalchemy.org/ > ` _ . the request context stack will make extensions more readily handle use cases the request context stack will make extensions more readily handle use cases .. _App Engine : https : //developers.google.com/appengine/ .. _flup : http : //trac.saddi.com/flup .. _WTForms : http : //wtforms.simplecodes.com/ https : //github.com/mitsuhiko/flask/tree/master/examples/minitwit/ http : //github.com/mitsuhiko/flask/tree/master/examples/flaskr/ trigger test requests to the application , and the client will also keep track First , we need an application to test ; we will use the application from .. _App Engine : http : //code.google.com/appengine/ Let 's check that the application shows `` No entries here so far '' if we the : ref : ` tutorial ` . If you do n't have that application yet , get the .. _mod_wsgi wiki : http : //code.google.com/p/modwsgi/wiki/ < https : //raw.github.com/mitsuhiko/flask/master/scripts/flask-07-upgrade.py > ` _ the : ref : ` tutorial ` . If you do n't have that application yet , get the server and run the testsuite . In order to test the application , we add a second module First , we need an application to test ; we will use the application from .. _get-pip.py : https : //raw.github.com/pypa/pip/master/contrib/get-pip.py Now it 's time to start testing the functionality of the application . Notice that our test functions begin with the word ` test ` ; this allows http : //docs.sqlalchemy.org/en/latest/orm/extensions/declarative.html .. _flaskext_compat.py : https : //github.com/mitsuhiko/flask/raw/master/scripts/flaskext_compat.py Now it 's time to start testing the functionality of the application . < http : //github.com/mitsuhiko/flask/tree/master/examples/jqueryexample > ` _ < http : //redmine.lighttpd.net/wiki/lighttpd/Docs : ModFastCGI > ` _ ( note that .. _mod_wsgi wiki : http : //code.google.com/p/modwsgi/w/list .. _get-pip.py : https : //raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py .. _WTForms : http : //wtforms.readthedocs.org/ server and run the testsuite . Note : WSGIDaemonProcess is n't implemented in Windows and Apache will ` Deploying Flask on Heroku < https : //devcenter.heroku.com/articles/getting-started-with-python > ` _ ` Deploying Flask on Heroku < https : //devcenter.heroku.com/articles/python > ` _ < http : //redmine.lighttpd.net/projects/lighttpd/wiki/Docs_ModFastCGI > ` _ ( note that","['docs/config.rst', 'docs/deploying/cgi.rst', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/deploying/uwsgi.rst', 'docs/extensions.rst', 'docs/htmlfaq.rst', 'docs/installation.rst', 'docs/patterns/caching.rst', 'docs/patterns/fabric.rst', 'docs/patterns/jquery.rst', 'docs/patterns/sqlalchemy.rst', 'docs/patterns/wtforms.rst', 'docs/quickstart.rst', 'docs/testing.rst', 'docs/tutorial/dbcon.rst', 'docs/tutorial/index.rst', 'docs/upgrading.rst']",Merge pull request # 1132 from nicorevin/update_links
542,8efbae917b9265fe12b07187c3923d7003600346,2014-06-18 03:03:42+08:00,"After doing this , the prompt of your shell should be as familar as before . Now , let 's move on . Enter the following command to get Flask activated in your $ deactivate And if you want to go back to the real world , use the following command : : Now you can just enter the following command to get Flask activated in your",['docs/installation.rst'],Merge pull request # 1088 from lord63/master
543,b0f594efc9c6ae692b9b4732d40006b1d3c69d23,2014-06-18 03:01:56+08:00,"can install it as follows : # yum install mod_wsgi # pkg install ap22-mod_wsgi2 # pkg_add -r mod_wsgi .. sourcecode : : text If you are using a yum based distribution ( Fedora , OpenSUSE , etc .. ) you",['docs/deploying/mod_wsgi.rst'],Merge pull request # 1090 from wxcafe/master
544,7cfe833a50524e629542a82c8cd35b84cb1f9e9c,2014-06-06 21:02:38+06:00,"elif callable ( getattr ( value , '__html__ ' , None ) ) : return { ' b ' : b64encode ( value ) .decode ( 'ascii ' ) } try : u'base64 encoding your string ( String was % r ) ' % value ) return { ' d ' : http_date ( value ) } raise UnexpectedUnicodeError ( u ' A byte string with ' return text_type ( value ) return [ _tag ( x ) for x in value ] except UnicodeError : u'which can only store unicode strings . Consider ' elif callable ( getattr ( value , '__html__ ' , None ) ) : elif isinstance ( value , list ) : if isinstance ( value , tuple ) : return text_type ( value ) return dict ( ( k , _tag ( v ) ) for k , v in iteritems ( value ) ) return [ _tag ( x ) for x in value ] u'which can only store unicode strings . Consider ' return { ' d ' : http_date ( value ) } elif isinstance ( value , uuid.UUID ) : elif isinstance ( value , uuid.UUID ) : return { ' b ' : b64encode ( value ) .decode ( 'ascii ' ) } elif isinstance ( value , list ) : elif isinstance ( value , bytes ) : elif isinstance ( value , datetime ) : u'base64 encoding your string ( String was % r ) ' % value ) elif isinstance ( value , str ) : raise UnexpectedUnicodeError ( u ' A byte string with ' return { ' m ' : text_type ( value.__html__ ( ) ) } return { ' t ' : [ _tag ( x ) for x in value ] } elif isinstance ( value , datetime ) : return value elif isinstance ( value , dict ) : elif isinstance ( value , str ) : return { ' u ' : value.hex } return dict ( ( k , _tag ( v ) ) for k , v in iteritems ( value ) ) except UnicodeError : elif isinstance ( value , bytes ) : return { ' u ' : value.hex } def _tag ( value ) : try : u'non-ASCII data was passed to the session system ' return { ' t ' : [ _tag ( x ) for x in value ] } u'non-ASCII data was passed to the session system ' elif isinstance ( value , dict ) : if isinstance ( value , tuple ) : return { ' m ' : text_type ( value.__html__ ( ) ) } def _tag ( value ) : return value",['flask/sessions.py'],Merge pull request # 1079 from smarkets/master
545,16a7dd06aade99d478eb183e89ede87d4b55a3f7,2014-05-27 12:10:37-04:00,"flash ( 'No selected file ' ) # check if the post request has the file part if 'file ' not in request.files : if file.filename == `` : flash ( 'No file part ' ) return redirect ( request.url ) # submit a empty part without filename # if user does not select file , browser also",['docs/patterns/fileuploads.rst'],Merge pull request # 1062 from SteelyWing/patch-2
546,da1c1f0d7f8e2df19eb320b176021511b7d05b76,2014-05-16 10:16:12-04:00,"rasons it 's done this way . The reason for this is that Flask wants to The Flask script integration might be confusing at first , but it has good The Flask script integration might be confusing at first , but there is a reason special use-case you can also use `` python -mflask `` to accomplish exactly why it 's done this way . The reason for this is that Flask wants to special use-case you can also use `` python -m flask `` to accomplish exactly",['docs/cli.rst'],Merge pull request # 1057 from IanConnolly/doc-fix
547,367a168d867d9b1b36485c98d9c6e5ade1d85686,2014-05-13 22:11:05+01:00,"rasons it 's done this way . The reason for this is that Flask wants to The Flask script integration might be confusing at first , but it has good The Flask script integration might be confusing at first , but there is a reason special use-case you can also use `` python -mflask `` to accomplish exactly why it 's done this way . The reason for this is that Flask wants to special use-case you can also use `` python -m flask `` to accomplish exactly",['docs/cli.rst'],Fixes # 1051
548,807067001f58272429fd67396ba2c2c5b2e85861,2014-05-12 12:23:22-04:00,Let 's call it flaskr.py . We will place this file inside the flask folder . Let 's call it flaskr.py . We will place this file inside the flaskr folder . module . Flask will the initialize the variable from that module . Note module . Flask will then initialize the variable from that module . Note,['docs/tutorial/setup.rst'],Merge pull request # 1054 from lord63/master
549,32d32249d51f37ec53779372ad23616efbf4d74b,2014-05-09 15:50:11+02:00,"Whenever click now needs to operate on a flask application it will instanciate your application properly by itself . Because of this reason application provided click command . register more commands there if they desire so . contents : : 1 . First we import the `` click `` library as well as the click extensions immediately , therefore giving a better debug experience . have the option to avoid creating an instance of the Flask application immediately to give a better debug experience . script info object ( : ref : ` script-info-object ` ) from flask and it 's basic level . In addition to that it means that the individual commands script info object ( : ref : ` script-info-object ` ) from Flask and its basic level . In addition to that does it mean that the individual the recommendation is to create a separate file that instanciates application-provided click command . application unless required . This is very useful as it allows the server unless required . This is very useful as it allows the server commands for For instance this could be a file named `` autoapp.py `` with these instance to load the application on a first request instead of commands have the option to not create an instance of the Flask 1 . At first we import regular `` click `` as well as the click extensions and then pass the `` create_wiki_app `` function as a factory function . hypothetical wiki application . We will go through the details This could be a file named `` autoapp.py `` with these contents : : instantiate your application properly by itself . Because of this reason manages a hypothetical wiki application . We will go through the details command for instance , the load the application on first request instead of register more commands there if they so desire . Whenever click now needs to operate on a Flask application it will To explain all of this , here is an example `` manage.py `` script that and then pass the `` create_wiki_app `` function as factory function . To explain all of this here an example `` manage.py `` script that manages a the recommendation is to create a separate file that instantiates",['docs/cli.rst'],Merge pull request # 1050 from julen/doc-fixes
550,8fd1825551b28ee967246ce9638fcad763bf616d,2014-05-09 15:48:36+02:00,"Here the code for that decorator : : Here is the code for that decorator : : Here is an example cache function . It generates the cache key from a Flask is a function decorators can be used to inject additional from flask import request allow some really neat things for web applications . Because each view in view that should only be used by people that are logged in . If a user from flask import request , render_template Flask is a function , decorators can be used to inject additional allows some really neat things for web applications . Because each view in Here an example cache function . It generates the cache key from a view that should only be used by people that are logged in to . If a user",['docs/patterns/viewdecorators.rst'],Merge pull request # 1010 from plumdog/master
551,c73d740e571c5912045adb5e2dbd3b9b3ff15a9d,2014-04-26 02:14:37+02:00,"# Extra startup messages . This depends a but on Werkzeug internals to # Chop off file extensions or package markers . the application upfront because it means that we can forward all # Chop off file extensions or package markers # Otherwise find the first object named Flask is known by it 's import name . By default the app ID can also be a # Extra startup messages . This depends a bit on Werkzeug internals to errors for import problems into the browser as error . # Otherwise find exactly one Flask instance , or fail . `` `` '' Special applicationt that dispatches to a flask application which the application up front because it means that we can forward all is known by its import name . By default the app ID can also be a errors for import problems into the browser as errors . `` `` '' Special application that dispatches to a flask application which",['flask/run.py'],Merge pull request # 1030 from zakj/master
552,ea73571a5464d254979d827f849a2d69b655adcc,2014-04-26 02:12:51+02:00,parameter will be ` None ` ) or an exception happened in which case the error 'the root path needs to be explicitly ' # happend until the next bytecode instruction ? parameter will be ` None ` ) or an exception happend in which case the error # happened until the next bytecode instruction ? 'the root path needs to be explictly ',"['docs/tutorial/dbcon.rst', 'flask/_compat.py', 'flask/helpers.py']",Merge pull request # 1032 from cgar/spelling
553,5c3b161c9e7c4cacfe789a8237b262a7549d37fa,2014-04-14 19:03:04-04:00,requests . the request stack will make extensions more readily handle use cases outside of the request context stack will make extensions more readily handle use cases outside of requests .,['docs/upgrading.rst'],Merge pull request # 1012 from atupal/patch-2
554,01e831f08279d69f29984abf74c0eeaa12579915,2014-04-14 19:02:52-04:00,and can be overridden by the simplejson `` ensure_ascii `` parameter . but this can be overridden by the ` force ` parameter . but this can be overriden by the ` force ` parameter . and can be overriden by the simplejson `` ensure_ascii `` parameter .,"['flask/json.py', 'flask/wrappers.py']",Merge pull request # 1019 from raimu/master
555,470014a2cab1e7d416ac94445f8aa766eda72c93,2014-04-06 13:11:17-04:00,"fail ( 'Release date is not today ( % s ! = % s ) ' ) fail ( 'Release date is not today ( % s ! = % s ) ' , release_date.date ( ) , date.today ( ) ) length = len ( match.group ( 1 ) )",['scripts/make-release.py'],Merge pull request # 1014 from untitaker/pr842
556,d4fec1454488687b574c545761c2869d3bb97ca6,2014-03-21 17:15:31-04:00,"self.assert_true ( isinstance ( e , MyDecoratorException ) ) pass c = app.test_client ( ) def my_function_exception_handler ( e ) : `` `` '' Non-decorator version of the : meth : ` errorhandler ` error attach self.name , code_or_exception , f ) ) self.assert_true ( isinstance ( e , MyFunctionException ) ) raise MyFunctionException ( ) raise MyDecoratorException ( ) for error handlers limited to this blueprint . self.assert_equal ( c.get ( '/function ' ) .data , b'bam ' ) .. versionadded : : 0.11 self.assert_equal ( c.get ( '/decorator ' ) .data , b'boom ' ) def blue_deco_test ( ) : class MyDecoratorException ( Exception ) : blue.register_error_handler ( MyFunctionException , my_function_exception_handler ) app = flask.Flask ( __name__ ) self.record_once ( lambda s : s.app._register_error_handler ( def my_decorator_exception_handler ( e ) : `` `` '' class MyFunctionException ( Exception ) : return 'boom ' application-wide function of the : class : ` ~flask.Flask ` object but def blue_func_test ( ) : return 'bam ' app.register_blueprint ( blue ) blue = flask.Blueprint ( 'blue ' , __name__ ) function , akin to the : meth : ` ~flask.Flask.register_error_handler ` def register_error_handler ( self , code_or_exception , f ) : def test_blueprint_specific_user_error_handling ( self ) :","['flask/blueprints.py', 'flask/testsuite/blueprints.py']",Revert `` Revert `` Merge pull request # 859 from wvh/register_error_handler '' ''
557,2aa26fff04a98f2435e8e3015e92ef6108d3b485,2014-03-21 17:12:26-04:00,"def blue_deco_test ( ) : pass `` `` '' Non-decorator version of the : meth : ` errorhandler ` error attach app.register_blueprint ( blue ) blue.register_error_handler ( MyFunctionException , my_function_exception_handler ) return 'boom ' blue = flask.Blueprint ( 'blue ' , __name__ ) `` `` '' for error handlers limited to this blueprint . def my_decorator_exception_handler ( e ) : app = flask.Flask ( __name__ ) self.assert_equal ( c.get ( '/function ' ) .data , b'bam ' ) self.assert_true ( isinstance ( e , MyDecoratorException ) ) def my_function_exception_handler ( e ) : .. versionadded : : 0.11 self.record_once ( lambda s : s.app._register_error_handler ( class MyDecoratorException ( Exception ) : class MyFunctionException ( Exception ) : raise MyDecoratorException ( ) c = app.test_client ( ) @ blue.errorhandler ( MyDecoratorException ) def register_error_handler ( self , code_or_exception , f ) : self.assert_equal ( c.get ( '/decorator ' ) .data , b'boom ' ) raise MyFunctionException ( ) application-wide function of the : class : ` ~flask.Flask ` object but @ blue.route ( '/decorator ' ) function , akin to the : meth : ` ~flask.Flask.register_error_handler ` self.name , code_or_exception , f ) ) return 'bam ' @ blue.route ( '/function ' ) self.assert_true ( isinstance ( e , MyFunctionException ) ) def blue_func_test ( ) : def test_blueprint_specific_user_error_handling ( self ) :","['flask/blueprints.py', 'flask/testsuite/blueprints.py']",Revert `` Merge pull request # 859 from wvh/register_error_handler ''
558,6347e75deea2eda444c60080fda3885c1fb7705d,2014-03-21 17:08:34-04:00,"self.assert_true ( isinstance ( e , MyDecoratorException ) ) pass c = app.test_client ( ) def my_function_exception_handler ( e ) : `` `` '' Non-decorator version of the : meth : ` errorhandler ` error attach self.name , code_or_exception , f ) ) self.assert_true ( isinstance ( e , MyFunctionException ) ) raise MyFunctionException ( ) raise MyDecoratorException ( ) for error handlers limited to this blueprint . self.assert_equal ( c.get ( '/function ' ) .data , b'bam ' ) .. versionadded : : 0.11 self.assert_equal ( c.get ( '/decorator ' ) .data , b'boom ' ) def blue_deco_test ( ) : class MyDecoratorException ( Exception ) : blue.register_error_handler ( MyFunctionException , my_function_exception_handler ) app = flask.Flask ( __name__ ) self.record_once ( lambda s : s.app._register_error_handler ( def my_decorator_exception_handler ( e ) : `` `` '' class MyFunctionException ( Exception ) : return 'boom ' application-wide function of the : class : ` ~flask.Flask ` object but def blue_func_test ( ) : return 'bam ' app.register_blueprint ( blue ) blue = flask.Blueprint ( 'blue ' , __name__ ) function , akin to the : meth : ` ~flask.Flask.register_error_handler ` def register_error_handler ( self , code_or_exception , f ) : def test_blueprint_specific_user_error_handling ( self ) :","['flask/blueprints.py', 'flask/testsuite/blueprints.py']",Merge pull request # 859 from wvh/register_error_handler
559,9427e16567943cb5dc2a6b034db97f34e39bfe9f,2014-03-21 17:03:02-04:00,".. versionadded : : 0.7 handlers . Use : meth : ` register_error_handler ` instead of modifying : attr : ` error_handler_spec ` directly , for application wide error",['flask/app.py'],Merge pull request # 707 from xsleonard/patch-1
560,9c434ebc679087ece3d7464e39878e29dabf1951,2014-03-21 17:01:55-04:00,"errors through : attr : ` Flask.build_error_handler ` . The ` url_for ` function app.url_build_error_handlers.append ( external_url_handler ) function results in a : exc : ` ~werkzeug.routing.BuildError ` when the current : data : ` ~flask.current_app ` calls its : attr : ` ~Flask.url_build_error_handlers ` if def external_url_handler ( error , endpoint , * * values ) : ` endpoint ` and ` values ` are the arguments passed into ` url_for ` . Note not have a URL for the given endpoint and values . When it does , the def external_url_handler ( error , endpoint , values ) : : data : ` ~flask.current_app ` calls its : attr : ` ~Flask.build_error_handler ` if app does not have a URL for the given endpoint and values . When it does , the results in a : exc : ` ~werkzeug.routing.BuildError ` when the current app does ` endpoint ` and ` * * values ` are the arguments passed into ` url_for ` . Note app.build_error_handler = external_url_handler errors through : attr : ` Flask.url_build_error_handlers ` . The ` url_for `",['flask/helpers.py'],Merge pull request # 885 from jmhobbs/master
561,21f3ad267183f1e8347812c3b00e806cac562347,2014-03-21 16:54:35-04:00,"Here is an example for a `` 404 Page Not Found '' exception : : Blueprints support the errorhandler decorator just like the : class : ` Flask ` application object , so it is easy to make Blueprint-specific custom error More information on error handling see : ref : ` errorpages ` . def page_not_found ( e ) : Error Handlers pages . return render_template ( 'pages/404.html ' )",['docs/blueprints.rst'],Merge pull request # 830 from hntw/patch-1
562,7f5b6c692df34cedf28a01e46305ec5c22697a5a,2014-03-21 16:43:20-04:00,".. versionadded : : 1.0 debug mode . For higher performance it ’ s possible to disable that . .. versionchanged : : 1.0 def test_templates_auto_reload ( self ) : templates will be reloaded only if the application is running in affect debug mode . `` TEMPLATES_AUTO_RELOAD `` configuration option . `` Environment.auto_reload `` set in accordance with self.assert_false ( app.jinja_env.auto_reload ) be viable to disable this feature by setting self.assert_true ( app.jinja_env.auto_reload ) options [ 'auto_reload ' ] = self.debug \ app.config [ 'TEMPLATES_AUTO_RELOAD ' ] = False `` TEMPLATES_AUTO_RELOAD `` Flask checks if template was modified each app = flask.Flask ( __name__ ) `` TEMPLATES_AUTO_RELOAD `` Added `` TEMPLATES_AUTO_RELOAD `` config key . If disabled the necessary . But disk I/O is costly and it may if 'auto_reload ' not in options : 'TEMPLATES_AUTO_RELOAD ' : True , self.assert_true ( app.config [ 'TEMPLATES_AUTO_RELOAD ' ] ) time it is requested and reloads it if this key to `` False `` . This option does not or self.config [ 'TEMPLATES_AUTO_RELOAD ' ]","['CHANGES', 'docs/config.rst', 'flask/app.py', 'flask/testsuite/templating.py']",Merge pull request # 876 from defuz/templates-auto-reload
563,4c0253f9fdd4812b979532f1e24b7f0ebbd1626d,2014-03-21 16:39:13-04:00,"self.assert_in ( 'flask_broken/__init__.py ' , next.tb_frame.f_code.co_filename ) import os.path self.assert_in ( os.path.join ( 'flask_broken ' , '__init__.py ' ) , next.tb_frame.f_code.co_filename ) f = open ( os.path.join ( app.root_path , 'static/index.html ' ) , mode='rb ' ) f = open ( os.path.join ( app.root_path , 'static/index.html ' ) )","['flask/testsuite/ext.py', 'flask/testsuite/helpers.py']",Merge pull request # 862 from bikerm16/master
564,02eb9c99fdaa0c3cb3179ca5a1538e87ba6f13f1,2014-03-21 16:36:12-04:00,"Flask depends on some external libraries , like ` Werkzeug ( e.g `` C : \Python27 `` ) , then go to `` Tools `` , then `` Scripts `` ; then find the you can upgrade them by running : : .. _distribute_setup.py : http : //python-distribute.org/distribute_setup.py and * virtualenv * can be a little trickier , but nothing very hard . The two crucial To install the latest setuptools , you can use its bootstrap file : quite easy . The easiest way to do it is to download the open your downloads folder and double-click on the file . `` Computer '' icon on the Desktop or in the Start menu , and choose `` Properties '' . On Windows , installation of ` easy_install ` is a little bit trickier , but still Most often , once you pull up a command prompt you want to be able to type `` pip `` on Windows , because it does n't know where those executables are ( give either a try ! ) . ` pip ` and ` distribute ` on Windows you can run to install either . Next , add the ` easy_install ` command and other Python scripts to the `` win_add2path.py `` file and run that . Open a * * new * * Command Prompt and ` ez_setup.py ` _ $ virtualenv venv -- distribute .. _get-pip.py : https : //raw.github.com/pypa/pip/master/contrib/get-pip.py Installing setuptools , pip ............ done . Then you can be off on your way following the installation instructions above . If you do n't currently have either , then ` get-pip.py ` will install both for you Either should be double-clickable once you download them . If you already have pip , .. _ez_setup.py : https : //bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py ; C : \Python27\Scripts To fix this , you should be able to navigate to your Python install directory to the ` PATH ` environment variable . To do that , right-click on the Python 2.7 on the default path , add the following value : : `` Advanced '' tab instead ) . Then click on the `` Environment variables '' button . command search path , by adding your Python installation 's Scripts folder $ virtualenv venv Finally , to install ` virtualenv ` _ , you can simply run : : Installing distribute ............ done . Windows 7 , it should prompt you for administrator privileges . Flask depends on two external libraries , ` Werkzeug `` easy_install `` . If you have User Account Control enabled on Windows Vista or > pip install virtualenv ( you wo n't need to run ez_setup.py ) . Finally , double-click on the `` Path '' variable in the `` System variables '' section , > pip install -- upgrade pip setuptools delimit it from existing values with a semicolon . Assuming you are using and `` python `` which will run those things , but this might not automatically happen Now that you have `` easy_install `` , you can use it to install `` pip `` : : Sometimes getting the standard `` Python packaging tools '' like * pip * , * setuptools * Then click on `` Advanced System settings '' ( in Windows XP , click on the check that you can now just type `` python `` to bring up the interpreter . And you are done ! To check that it worked , open the Command Prompt and execute anything else ( like virtualenv ) . Fortunately there are two `` bootstrap scripts '' You will need Python 2.6 or newer to get started , so be sure to have an > easy_install pip and add the path of your Python interpreter 's Scripts folder . Be sure to ` distribute_setup.py ` _ file and run it . The easiest way to run the file is to ` get-pip.py ` _ You will need Python 2.6 or higher to get started , so be sure to have an packages you will need are setuptools and pip - these will let you install ` pip ` and ` setuptools ` on Windows",['docs/installation.rst'],Merge pull request # 977 from Ivoz/patch-1
565,872094c55612976bdd3de9094f7f8d13a38fee48,2014-03-21 16:21:18-04:00,"# : A dict of view arguments that matched the request . If an exception # In debug mode we 're replacing the files multidict with an ad-hoc # : the internal URL rule that matched the request . This can be # retry with GET . # : if matching the URL failed , this is the exception that will be # retry with GET # If we have no method at all in there we do n't want to # The namespace for code signals . If you are not flask code , do # If the request method is HEAD and we do n't have a handler for it # module functionality . # : a dict of view arguments that matched the request . If an exception # if the request method is HEAD and we do n't have a handler for it default implementation uses the value from the `` SESSION_COOKIE_PATH `` # Switched by the request context until 1.0 to opt in deprecated # Figure out if simplejson escapes slashes . This behavior was changed # module functionality # : If matching the URL failed , this is the exception that will be # Core signals . For usage examples grep the sourcecode or consult # if we have no method at all in there we do n't want to # : The internal URL rule that matched the request . This can be # core signals . For usage examples grep the sourcecode or consult default implementation uses the value from the SESSION_COOKIE_PATH `` # switched by the request context until 1.0 to opt in deprecated # we attach the view class to the view function for two reasons : # in debug mode we 're replacing the files multidict with an ad-hoc # We attach the view class to the view function for two reasons : # figure out if simplejson escapes slashes . This behavior was changed # the namespace for code signals . If you are not flask code , do","['flask/json.py', 'flask/sessions.py', 'flask/signals.py', 'flask/views.py', 'flask/wrappers.py']",Merge pull request # 1000 from mikar/master
566,ff3ef8511ed7c507ade5ebdebced7177665a3414,2014-03-13 19:24:53+01:00,"`` `` '' Register a function to be run after each request . same ( see : meth : ` process_response ` ) . Your function must take one parameter , an instance of must take one parameter , a : attr : ` response_class ` object and return `` `` '' Register a function to be run after each request . Your function a new response object or the same ( see : meth : ` process_response ` ) . : attr : ` response_class ` and return a new response object or the",['flask/app.py'],Merge pull request # 997 from charlax/ca/fix/response_class_documentation
567,47a41b645f627b9b68c70c193cb322f56bb4c12c,2014-02-09 13:27:35+00:00,"and in your application.py ( or equivalent ) : : Factories & Extensions db.init_app ( app ) def create_app ( config_filename ) : application-specific state is stored on the extension object , so one extension from yourapplication.model import db Your ` model.py ` might look like this when using ` Flask-SQLAlchemy But , rather , in model.py ( or equivalent ) : : It 's preferable to create your extensions and app factories so that the For more information about the design of extensions refer to : doc : ` /extensiondev ` . # no app object passed ! Instead we use use db.init_app in the factory . extensions refer to : doc : ` /extensiondev ` . Using this design pattern , no application-specific state is stored on the app = Flask ( __name__ ) extension object does not initially get bound to the application . db = SQLAlchemy ( app ) app.config.from_pyfile ( config_filename ) from flask.ext.sqlalchemy import SQLAlchemy Extension objects are not initially bound to an application . Using # create some models < http : //pythonhosted.org/Flask-SQLAlchemy/ > ` _ : : Using ` Flask-SQLAlchemy < http : //pythonhosted.org/Flask-SQLAlchemy/ > ` _ , object can be used for multiple apps . For more information about the design of as an example , you should * * not * * do : : extension object , so one extension object can be used for multiple apps . `` db.init_app `` , the app gets configured for the extension . No",['docs/patterns/appfactories.rst'],Merge pull request # 884 from rsyring/patch-2
568,280d8659601a5e3b8dab77231d9f9fc16f5cd1ce,2014-02-09 13:22:05+00:00,"c = app.test_client ( ) self._got_first_request = True def get_and_assert ( ) : t.start ( ) self.assert_equal ( got , [ 42 ] ) self.assert_true ( app.got_first_request ) got = [ ] from time import sleep self._got_first_request = True sleep ( 1 ) t = Thread ( target=get_and_assert ) got.append ( 42 ) app = flask.Flask ( __name__ ) t.join ( ) def foo ( ) : get_and_assert ( ) def test_before_first_request_functions_concurrent ( self ) : c.get ( `` / '' )","['flask/app.py', 'flask/testsuite/basic.py']",fix issue # 879 and add a test for it
569,ba36d57729c413ba41aa0b9504f3300c43bcd483,2014-02-09 13:20:46+00:00,for this : Why would you want to build URLs instead of hard-coding them into your Why would you want to build URLs using the URL reversing function : func : ` ~flask.url_for ` instead of hard-coding them into your templates ? There are three good reasons templates ? There are three good reasons for this :,['docs/quickstart.rst'],Merge pull request # 897 from d3spis3d/master
570,76e2f9cd0396c71eedf7e3b1dabf60f36585722e,2014-02-09 13:01:54+00:00,"filename = os.path.join ( current_app.root_path , filename ) if not os.path.isabs ( filename ) : Fixed ` send_from_directory ` not expanding to the application root path correctly .","['CHANGES', 'flask/helpers.py']",Fixed send_from_directory not rebasing to the root path . This fixes # 921
571,e95cef66a3bd2d8ca751e36d111cf8f84dfc5586,2014-02-08 17:47:22+00:00,flask_app.config.update ( celery = make_celery ( app ) flask_app = Flask ( __name__ ) app = Flask ( __name__ ) app.config.update ( celery = make_celery ( flask_app ),['docs/patterns/celery.rst'],Merge pull request # 931 from aphexcx/patch-1
572,2506c0b9a96d48f14624acfa552fc88e38a542ae,2014-02-08 17:45:27+00:00,"adler32 ( rv = flask.send_file ( f ) self.assert_equal ( len ( captured ) , 3 ) rv.close ( ) try : ) & 0xffffffff f = PYStringIO ( 'Test ' ) rv.direct_passthrough = False adler32 ( filename.encode ( 'utf-8 ' ) if isinstance ( filename , text_type ) filename.encode ( 'utf-8 ' ) if isinstance ( filename , text_type ) else filename self.assert_equal ( rv.data , b'Test ' ) warn ( 'Access % s failed , maybe it does not exist , so ignore etags in ' Fixed an etags bug when sending a file without a name . except OSError : with catch_warnings ( ) as captured : else filename self.assert_equal ( rv.mimetype , 'text/plain ' ) f.name = 'test.txt ' from StringIO import StringIO as PYStringIO os.path.getmtime ( filename ) , 'headers ' % filename , stacklevel=2 ) os.path.getmtime ( filename ) , os.path.getsize ( filename ) , ) ) ) & 0xffffffff rv.set_etag ( 'flask- % s- % s- % s ' % ( rv.set_etag ( 'flask- % s- % s- % s ' % ( ) ) # attachment_filename and etags os.path.getsize ( filename ) ,","['CHANGES', 'flask/helpers.py', 'flask/testsuite/helpers.py']",Fixed sending etags for file streams with a name . This fixes # 930 .
573,c9bf9070370fb1cfeefab8a34f40351d6bd1bc26,2014-02-08 17:32:01+00:00,"` status ` value will override the status code and ` headers ` can be a headers = status = None headers = status_or_headers = None status_or_headers = headers = None rv = self.response_class ( rv , headers=headers , status=status ) headers ) `` or `` ( response , headers ) `` where at least one item has self.assert_equal ( rv4.headers [ ' X-Bar ' ] , 'Foo ' ) self.assert_equal ( rv3.status_code , 400 ) rv.status = status_or_headers rv , status_or_headers , headers = rv + ( None , ) * ( 3 - len ( rv ) ) `` X-Bar '' : `` Foo '' headers ) `` or `` ( response , headers ) `` headers ) `` where at least one item has to be in the tuple . The self.assert_equal ( rv2.status_code , 200 ) if isinstance ( status_or_headers , string_types ) : rv , status , headers = rv + ( None , ) * ( 3 - len ( rv ) ) rv.status_code = status_or_headers rv.status = status def from_status_tuple ( ) : list or dictionary of additional header values . where ` response ` is any of the 'Content-Type ' : 'text/plain ; charset=utf-8 ' self.assert_equal ( rv4.headers [ ' X-Foo ' ] , 'Bar ' ) } headers , status_or_headers = status_or_headers , None status = headers = None `` X-Foo '' : `` Bar '' , self.assert_equal ( rv2.mimetype , 'text/plain ' ) to be in the tuple . The ` status ` value will override the status code rv4 = c.get ( '/args_header ' ) } def from_two_args_tuple ( ) : rv.status_code = status def from_response_instance_status_tuple ( ) : self.assert_equal ( rv2.headers [ ' X-Foo ' ] , 'Test ' ) self.assert_equal ( rv4.data , b'Hello world ' ) if status is not None : rv = self.response_class ( rv , headers=headers , status=status_or_headers ) rv2 = c.get ( '/two_args ' ) self.assert_equal ( rv4.status_code , 404 ) headers ) `` where ` response ` is any of the rv3 = c.get ( '/args_status ' ) self.assert_equal ( rv3.data , b'Hi , status ! ' ) if isinstance ( status_or_headers , ( dict , list ) ) : ' X-Foo ' : 'Test ' , self.assert_equal ( rv2.data , b'Hello ' ) return flask.Response ( 'Hello world ' , 404 ) , { return 'Hello ' , { if status_or_headers is not None : and ` headers ` can be a list or dictionary of additional header values . if isinstance ( status , string_types ) : self.assert_equal ( rv3.mimetype , 'text/html ' ) return 'Hi , status ! ' , 400","['docs/quickstart.rst', 'flask/app.py', 'flask/testsuite/basic.py']",Merge pull request # 938 from ahlen/response-with-headers-without-status
574,4d9916e1a6e26e33ce2360f1d7ee41d95b79d995,2014-02-08 17:30:55+00:00,"verification_data = json.loads ( resp.content ) from flask import Flask , render_template , session , request , json , abort , g from flask import Flask , render_template , session , request , abort , g verification_data = resp.json ( )",['examples/persona/persona.py'],Merge pull request # 946 from allevo/master
575,e7c587789ae22a626196cea26340253dd9b70bf1,2014-02-08 17:19:00+00:00,"with app.test_client ( ) as c : Fixed an issue with query parameters getting removed from requests in return ' x ' self.assert_ ( 'gin ' in flask.request.form ) if url.query : rv = c.post ( 'http : //domain.com/action ? vodka=42 ' , data= { 'gin ' : 43 } ) the test client when absolute URLs were requested . self.assert_equal ( rv.status_code , 200 ) path += ' ? ' + url.query app.testing = True app = flask.Flask ( __name__ ) def action ( ) : def test_full_url_request ( self ) : self.ssert_ ( 'vodka ' in flask.request.args )","['CHANGES', 'flask/testing.py', 'flask/testsuite/testing.py']",Fixe a bug in the test client causing url parameters to be removed . This fixes # 968
576,ccc2de19971c6c88202e9068431e562230f84b62,2014-02-08 16:26:27+00:00,The configuration variable `` JSON_SORT_KEYS `` ( : ref : ` config ` ) can be set to false to stop Flask from auto-sorting keys . By default sorting is enabled and .. admonition : : Auto-Sort JSON Keys outside of the app context sorting is turned on .,['docs/api.rst'],Merge pull request # 962 from nZac/JSON-Support-doc-update
577,ea656a89099ee848c42c871a8407242d853c0a09,2014-01-24 19:21:24-06:00,The configuration variable `` JSON_SORT_KEYS `` ( : ref : ` config ` ) can be set to false to stop Flask from auto-sorting keys . By default sorting is enabled and .. admonition : : Auto-Sort JSON Keys outside of the app context sorting is turned on .,['docs/api.rst'],added a note to the api documentation about JSON_SORT_KEYS . Fixes # 922
578,05dbf52fa586ccd86a7d774e918faa5e9ae414a5,2013-10-30 11:29:18+11:00,for this : Why would you want to build URLs instead of hard-coding them into your Why would you want to build URLs using the URL reversing function : func : ` ~flask.url_for ` instead of hard-coding them into your templates ? There are three good reasons templates ? There are three good reasons for this :,['docs/quickstart.rst'],URL Reversing in Quickstart # 779
579,544118bef94e647258a997ac3b1ae04625164ed7,2013-10-16 10:09:41-07:00,"# : The key must match the name of the ` flaskext ` module . For example in # : case of a `` Flask-Foo '' extension in ` flask_foo ` , the key would be # : case of a `` Flask-Foo '' extension in ` flaskext.foo ` , the key would be # : The key must match the name of the extension module . For example in",['flask/app.py'],Merge pull request # 891 from ThiefMaster/docs-flaskext
580,cab514e9f17e68d66c61739325808dc5ed494e90,2013-10-16 10:06:01-07:00,`` connect_db `` function ( following the tutorial line-by-line ) . ` create_db ` but by itself that 's not particularly useful . Creating and savely on the : data : ` ~flask.g ` object . ` connect_db ` but by itself that 's not particularly useful . Creating and `` init_db `` function ( following the tutorial line-by-line ) . safely on the : data : ` ~flask.g ` object .,['docs/tutorial/dbcon.rst'],Merge pull request # 886 from talam/patch-1
581,36d70d8789954e9e3e5512d1df2215119279a7c4,2013-09-03 10:58:04-07:00,and return ` None ` . and return ` False ` . : param silent : if set to ` False ` this method will fail silently : param silent : if set to ` True ` this method will fail silently,['flask/wrappers.py'],Merge pull request # 843 from wbowlin/master
582,5207c69064898f513c0b08110514f3fd39e5a4a5,2013-09-03 19:47:00+02:00,"slash is omitted , consistent with how Apache and other servers work . Also , slash is ommited , consistent with how Apache and other servers work . Also , the URLs will stay unique , which helps search engines avoid indexing the the URLs will stay unique , which helps search engines avoid indexing the",['docs/quickstart.rst'],Fix # 856 ommited typo in quickstart
583,a2bc61b5ab19e899735f8945f68123b4cea570d5,2013-08-04 13:59:22-07:00,"' '' 5 '' : `` foo '' , ' , ' '' 11 '' : `` foo '' , ' , self.assert_equal ( lines , [ ' } ' , try : ' '' 3 '' : `` foo '' , ' , except AssertionError : ' '' 6 '' : `` foo '' , ' , ' '' 12 '' : `` foo '' , ' , ] ' '' 4 '' : `` foo '' , ' , ' '' 10 '' : `` foo '' , ' , ' } ' ' '' 0 '' : `` foo '' , ' , self.assert_equal ( lines , sorted_by_str ) ' '' 2 '' : `` foo '' , ' , ] ) ' '' 9 '' : `` foo '' ' , ' { ' , self.assert_equal ( lines , sorted_by_int ) ' '' values '' : { ' , ' '' 7 '' : `` foo '' , ' , ' '' 1 '' : `` foo '' , ' , ' '' 14 '' : `` foo '' , ' , sorted_by_str = [ ' '' 16 '' : `` foo '' , ' , ' '' 13 '' : `` foo '' , ' , ' '' 18 '' : `` foo '' , ' , ' '' 19 '' : `` foo '' , ' , ' '' 17 '' : `` foo '' , ' , ' '' 8 '' : `` foo '' , ' , sorted_by_int = [ ' '' 15 '' : `` foo '' , ' ,",['flask/testsuite/helpers.py'],Merge pull request # 819 from chason/master
584,08931401e8fefa31af2432d27b2346a96ffe8e2c,2013-08-01 01:15:17-07:00,"return dict ( ( cur.description [ idx ] [ 0 ] , value ) dictionaries instead of tuples this could be inserted into `` get_db `` : : dictionaries instead of tuples this can be used : : return dict ( ( cursor.description [ idx ] [ 0 ] , value )",['docs/patterns/sqlite3.rst'],Merge pull request # 817 from llimllib/master
585,2e17ad7fd42d8575f308af9c17496d38ceb72b5e,2013-07-31 07:44:44-07:00,"def index ( ) : return `` Hey '' if isinstance ( methods , string_types ) : raise TypeError ( 'Allowed methods have to be iterables of strings , ' app = flask.Flask ( __name__ ) def test_disallow_string_for_allowed_methods ( self ) : with self.assert_raises ( TypeError ) :","['flask/app.py', 'flask/testsuite/basic.py']",Merge pull request # 816 from untitaker/allowed_methods
586,af5a0853bfe36d547af93b904729a43fcf8cc55d,2013-07-31 00:38:03+02:00,"def index ( ) : return `` Hey '' if isinstance ( methods , string_types ) : raise TypeError ( 'Allowed methods have to be iterables of strings , ' app = flask.Flask ( __name__ ) def test_disallow_string_for_allowed_methods ( self ) : with self.assert_raises ( TypeError ) :","['flask/app.py', 'flask/testsuite/basic.py']",Fix # 815
587,da49f7398d80cdd34e7f0bce28ea119a19d8c81d,2013-07-29 13:24:49-07:00,# due to a werkzeug bug we need to make sure that the defaults are # None if they are an empty dictionary . This should not be necessary options [ 'defaults ' ] = options.get ( 'defaults ' ) or None # with Werkzeug 0.7,['flask/app.py'],Merge pull request # 811 from rpicard/remove_options_workaround
588,1982c208ceebfd317e30ba16a40402850e97e1c9,2013-07-26 16:28:08-07:00,".. admonition : : Windows If you are on Windows , replace ` /tmp/flaskr.db ` with a different writeable path of your choice , in the configuration and for the rest of this tutorial .",['docs/tutorial/setup.rst'],Merge pull request # 808 from untitaker/issue782
589,fd9bf8f37609f220f4829050eed94df208543c56,2013-07-27 01:21:01+02:00,".. admonition : : Windows If you are on Windows , replace ` /tmp/flaskr.db ` with a different writeable path of your choice , in the configuration and for the rest of this tutorial .",['docs/tutorial/setup.rst'],Fix # 782 -- /tmp/ in tutorial
590,afa33e37ecf1214dbf7d619181791af70e600ef5,2013-07-26 14:47:11-07:00,"That way someone can set an environment variable called : meth : ` ~flask.Config.from_object ` line above : : Usually , it is a good idea to load a configuration from a configurable Simply define the environment variable : envvar : ` FLASKR_SETTINGS ` that points to : envvar : ` FLASKR_SETTINGS ` to specify a config file to be loaded which will then file . This is what : meth : ` ~flask.Config.from_envvar ` can do , replacing the Usually , it is a good idea to load a separate , environment specific configuration file . Flask allows you to import multiple configurations and it a config file to be loaded . The silent switch just tells Flask to not complain override the default values . The silent switch just tells Flask to not complain will use the setting defined in the last import . This enables robust configuration setups . : meth : ` ~flask.Config.from_envvar ` can help achieve this .",['docs/tutorial/setup.rst'],Merge pull request # 800 from nZac/issue # 783
591,ab1be65c88b01f3318e42afd089006d24e083274,2013-07-22 06:43:21-07:00,explicitly overriden in the `` route ( ) `` call . explicitly overridden in the `` route ( ) `` call . library . The following extensions are by default applied to the stdlib 's ` True ` if the signaling system is available . This is the case lirbary . The following extensions are by default applied to the stdlib 's ` True ` if the signalling system is available . This is the case,['docs/api.rst'],Merge pull request # 799 from cvrebert/patch-1
592,d56d96c8c253a86b5abe20d92584a50017470a06,2013-07-01 06:43:38-07:00,"into a response object with the string as response body , a `` 200 OK `` status code and a `` text/html `` mimetype . The logic that Flask applies to into a response object with the string as response body , an `` 200 OK `` error code and a `` text/html `` mimetype . The logic that Flask applies to",['docs/quickstart.rst'],Merge pull request # 784 from BobStevens/master
593,3d9055b3b73b1d09f933bfd070f704e9e8bdff2a,2013-06-01 00:20:00+01:00,"and not request.is_xhr : if they are not requested by an if current_app.config [ 'JSONIFY_PRETTYPRINT_REGULAR ' ] \ `` JSON_AS_ASCII `` , `` JSONIFY_PRETTYPRINT_REGULAR `` This function 's response will be pretty printed if it was not requested XMLHttpRequest object ( controlled by Added the `` JSONIFY_PRETTYPRINT_REGULAR `` configuration variable . 'JSON_AS_ASCII ' : True indent = 2 'JSON_AS_ASCII ' : True , `` JSON_AS_ASCII `` with `` X-Requested-With : XMLHttpRequest `` to simplify debugging unless the `` X-Requested-With `` header ) indent=indent ) , indent=None if request.is_xhr else 2 ) , `` JSONIFY_PRETTYPRINT_REGULAR `` If this is set to `` True `` ( the default ) jsonify responses will be pretty printed the `` JSONIFY_PRETTYPRINT_REGULAR `` config parameter is set to false . indent = None 'JSONIFY_PRETTYPRINT_REGULAR ' : True ,","['CHANGES', 'docs/config.rst', 'flask/app.py', 'flask/json.py']",Added the JSONIFY_PRETTYPRINT_REGULAR config variable . This fixes # 725
594,7f35fc293559e5c809de78909872896236100189,2013-05-30 07:08:17-07:00,"return u '' self.assert_true ( flask._request_ctx_stack.top.request.environ if isinstance ( rv , string_types + ( bytes , ) ) : self.assert_true ( flask._request_ctx_stack.request.environ if isinstance ( rv , string_types ) :","['flask/app.py', 'flask/testsuite/appctx.py']",Merge pull request # 751 from ThomasWaldmann/sprint-branch
595,915d7180fcd0defd23384e30b630e2cb31a39222,2013-05-26 11:41:28-07:00,"1/0 1 // 0 self.assert_in ( ' 1/0 ' , err ) self.assert_in ( ' 1 // 0 ' , err ) 1 // 0 1/0","['flask/testsuite/basic.py', 'flask/testsuite/helpers.py', 'flask/testsuite/signals.py', 'flask/testsuite/subclassing.py', 'flask/testsuite/testing.py', 'flask/testsuite/views.py']",Merge pull request # 747 from ThomasWaldmann/sprint-branch
596,77753e9b73a8ed8f908e2877455f629ea6e7a6a4,2013-05-25 13:06:43-07:00,# If an exception ocurrs in debug mode or if context preservation is # dummy metaclass for one level of class instantiation that replaces # specific values ( like defualt content type selection ) . # dummy metaclass for one level of class instanciation that replaces # : exception ocurrs and the integrated server will automatically reload def inject_all_regualr ( ) : Flask needs the name of the application . It can be set and overriden however is discouraged as it requires fidling with nested dictionaries however is discouraged as it requires fiddling with nested dictionaries : param attribute : the name of the variable of macro to access in the context will not be overridden if a context processor : param attribute : the name of the variable of macro to acccess # : exception occurs and the integrated server will automatically reload # The rule 's di n't actually made it through Flask needs the name of the application . It can be set and overridden # specific values ( like default content type selection ) . def inject_all_regular ( ) : # If an exception occurs in debug mode or if context preservation is # The rule 's did n't actually made it through in the context will not be overriden if a context processor,"['flask/_compat.py', 'flask/app.py', 'flask/ctx.py', 'flask/helpers.py', 'flask/testsuite/blueprints.py']",Merge pull request # 746 from ThomasWaldmann/sprint-branch
597,4baeac07d97b73c1c7ca14c9d5ca7ff35d583165,2013-05-25 12:01:49-07:00,"response.data += b'|after ' response.data += '|after ' self.assert_in ( 'after ' , evts ) self.assert_in ( b'after ' , evts )",['flask/testsuite/basic.py'],Merge pull request # 745 from ThomasWaldmann/sprint-branch
598,1fe20d32087cb3e0ae1139b7fca1545db64b8cff,2013-05-25 11:28:16-07:00,"from ._compat import with_metaclass from flask._compat import urlparse class MethodView ( with_metaclass ( MethodViewType , View ) ) : from ._compat import string_types , text_type from flask._compat import reraise from ._compat import string_types from flask._compat import string_types , text_type class MethodView ( View ) : from flask._compat import implements_to_string from flask._compat import reraise , string_types , integer_types from ._compat import reraise , string_types , integer_types from flask._compat import string_types from ._compat import urlparse __metaclass__ = MethodViewType from ._compat import implements_to_string from ._compat import reraise","['flask/app.py', 'flask/config.py', 'flask/debughelpers.py', 'flask/exthook.py', 'flask/helpers.py', 'flask/testing.py', 'flask/views.py']",Merge pull request # 744 from ThomasWaldmann/sprint-branch
599,3c5d7bab26cf63b677b23ad9f4620e3bb6bfc706,2013-05-25 10:49:25-07:00,"from flask._compat import StringIO , text_type def next ( self ) : def __next__ ( self ) : from flask._compat import StringIO , text_type , implements_iterator",['flask/testsuite/helpers.py'],Merge pull request # 743 from ThomasWaldmann/sprint-branch
600,ffbcad1e46ff88981e9f787f29234de49d31a54f,2013-05-25 10:35:08-07:00,"assert 'No entries here so far ' in rv.data with app.open_resource ( 'schema.sql ' ) as f : assert b'The username is already taken ' in rv.data assert 'You have to enter a password ' in rv.data assert b ' & lt ; Hello & gt ; ' in rv.data assert 'the message by foo ' not in rv.data with app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : assert 'Invalid password ' in rv.data assert ' & lt ; test message 2 & gt ; ' in rv.data assert b'You were logged in ' in rv.data assert b'Invalid password ' in rv.data assert 'You are no longer following & # 34 ; foo & # 34 ; ' in rv.data assert 'No entries here so far ' not in rv.data assert b'You were logged out ' in rv.data assert b'You are now following & # 34 ; foo & # 34 ; ' in rv.data assert b'No entries here so far ' not in rv.data assert ' & lt ; Hello & gt ; ' in rv.data assert 'You are now following & # 34 ; foo & # 34 ; ' in rv.data assert 'You have to enter a username ' in rv.data assert 'You were successfully registered ' \ assert 'the message by bar ' not in rv.data assert b ' & lt ; test message 2 & gt ; ' in rv.data with app.open_resource ( 'schema.sql ' ) as f : assert b'No entries here so far ' in rv.data assert b'You have to enter a password ' in rv.data assert b'Invalid username ' in rv.data assert 'The two passwords do not match ' in rv.data assert 'You have to enter a valid email address ' in rv.data assert 'the message by foo ' in rv.data assert b'test message 1 ' in rv.data : param mode : resource file opening mode , default is 'rb ' . assert 'Your message was recorded ' in rv.data assert b'The two passwords do not match ' in rv.data assert b'the message by foo ' in rv.data assert 'the message by bar ' in rv.data assert b'the message by bar ' in rv.data assert b'the message by bar ' not in rv.data 'and can login now ' in rv.data assert b'Your message was recorded ' in rv.data assert 'The username is already taken ' in rv.data assert b ' < strong > HTML < /strong > allowed here ' in rv.data with app.open_resource ( 'schema.sql ' , mode= ' r ' ) as f : assert 'You were logged out ' in rv.data assert b'You were successfully registered ' \ assert 'test message 1 ' in rv.data assert ' < strong > HTML < /strong > allowed here ' in rv.data assert b'You have to enter a username ' in rv.data assert b'the message by foo ' not in rv.data assert 'Invalid username ' in rv.data assert 'You were logged in ' in rv.data assert b'You have to enter a valid email address ' in rv.data assert b'You are no longer following & # 34 ; foo & # 34 ; ' in rv.data b'and can login now ' in rv.data","['docs/patterns/sqlite3.rst', 'docs/tutorial/dbinit.rst', 'examples/flaskr/flaskr.py', 'examples/flaskr/flaskr_tests.py', 'examples/minitwit/minitwit.py', 'examples/minitwit/minitwit_tests.py', 'flask/app.py', 'flask/helpers.py']",Merge pull request # 742 from ThomasWaldmann/sprint-branch
601,d395d3684a6b9243ffd9091ea9b28275d90aeb91,2013-05-22 12:16:25-07:00,"leaks.append ( flask._request_ctx_stack.pop ( ) ) while flask._request_ctx_stack.top is not None : self.assert_equal ( leaks , [ ] ) self.assert_equal ( flask._request_ctx_stack.top , None ) leaks = [ ]",['flask/testsuite/__init__.py'],Merge pull request # 739 from untitaker/sprint-branch
602,97815b999e831205b90018e81569b55ef8fd0043,2013-05-22 08:11:46-07:00,"self.assert_equal ( rv.data , b'Outside ' ) self.assert_equal ( c.get ( '/de/ ' ) .data , b'/de/about ' ) self.assert_equal ( c.get ( '/backend-no ' ) .data , 'backend says no ' ) self.assert_equal ( rv.data , 'Hello from the Frontend ' ) self.assert_equal ( rv.data , 'True ' ) self.assert_equal ( rv.data , b ' < p > 23|42 ' ) self.assert_equal ( rv.data , ' [ 42 ] ' ) self.assert_equal ( rv.data , b'Hello World ! ' ) self.assert_equal ( rv.data , 'Blub ' ) self.assertEqual ( c.get ( '/bar/123 ' ) .data , b'123 ' ) self.assert_equal ( rv.data , 'success ' ) self.assert_equal ( rv.data , 'http : //localhost/ ' ) self.assert_equal ( c.get ( '/ ' ) .data , 'the index ' ) self.assert_equal ( rv.data , 'Foo SubDomain ' ) self.assert_equal ( c.get ( '/ ' ) .data , 'None ' ) self.assert_equal ( c.get ( '/admin/ ' ) .data , b'the admin ' ) self.assert_equal ( rv.data , b'Awesome ' ) self.assert_equal ( c.get ( '/admin/ ' ) .data , '123 ' ) self.assert_equal ( c.get ( '/admin/logout ' ) .data , 'admin logout ' ) self.assert_equal ( rv.data , ' 3 ' ) self.assert_equal ( c.get ( '/admin/logout ' ) .data , b'admin logout ' ) self.assert_equal ( rv.data , 'dcba ' ) self.assert_equal ( c.get ( '/1,2,3 ' ) .data , b ' 1|2|3 ' ) self.assertEqual ( c.get ( '/py/foo ' ) .data , b'bp.foo ' ) self.assert_equal ( rv.data , b'normal index ' ) self.assert_equal ( 'internal server error ' , rv.data ) self.assert_equal ( rv.data , b'Hello from the Admin ' ) self.assert_equal ( rv.data , b'Hello Custom World ! ' ) self.assert_equal ( c.get ( '/admin/login ' ) .data , b'admin login ' ) self.assert_equal ( rv.data , 'index for mitsuhiko ' ) self.assert_equal ( c.get ( '/get ' ) .data , b'42 ' ) self.assert_equal ( c.get ( '/admin/ ' ) .data , b'123 ' ) self.assert_equal ( rv.data , b'Foo ' ) self.assert_equal ( c.get ( '/page/2 ' ) .data , ' 2 ' ) self.assert_equal ( rv.data , 'Meh ' ) ' { \n `` msg '' : `` W00t '' \n } ' ) self.assert_equal ( c.get ( '/1,2,3 ' ) .data , ' 1|2|3 ' ) self.assert_ ( 'Internal Server Error ' in rv.data ) self.assert_equal ( app.test_client ( ) .get ( '/admin/ ' ) .data , b'42 ' ) self.assert_equal ( resp.data , 'Hello World ! ' ) self.assertEqual ( c.get ( '/py/bar ' ) .data , b'bp.bar ' ) self.assert_equal ( rv.data , 'stuff ' ) self.assert_equal ( rv.data , b ' < h1 > 42 < /h1 > ' ) self.assert_equal ( c.get ( '/backend-no ' ) .data , b'backend says no ' ) self.assert_equal ( c.get ( '/admin/ ' ) .data , b'admin index ' ) self.assert_equal ( response.data , b'stuff ' ) self.assertEqual ( rv.data , b '' ) self.assert_equal ( c.get ( '/ ' ) .data , b'13 ' ) self.assert_equal ( c.get ( '/foo/ ' ) .data , b'index ' ) self.assert_equal ( app.test_client ( ) .get ( '/ ' ) .data , b'Awesome ' ) self.assert_ ( b'Internal Server Error ' in rv.data ) self.assert_equal ( resp.data , b'Hello World ! ' ) self.assertEqual ( c.get ( '/py/bar ' ) .data , 'bp.bar ' ) self.assert_equal ( rv.data , 'http : //example.com:1234/foo/ ' ) self.assert_equal ( c.get ( '/foo/bar ' ) .data , b'bar ' ) self.assert_equal ( c.get ( '/more ' ) .data , b'GET ' ) self.assert_equal ( rv.data.strip ( ) , b ' < h1 > Hello World ! < /h1 > ' ) self.assert_equal ( rv.data , b'Foo SubDomain ' ) self.assert_equal ( c.get ( '/de/about ' ) .data , '/foo ' ) self.assert_equal ( c.get ( '/foo ' ) .data , b'/en/about ' ) self.assertEqual ( rv.data , `` ) self.assert_ ( b'Response ' in rv.data ) self.assert_equal ( c.get ( '/ ' ) .data , 'GET ' ) self.assert_equal ( c.get ( '/ ' ) .data , b'42 ' ) self.assert_equal ( c.get ( '/de/about ' ) .data , '/de/ ' ) self.assertEqual ( rv.data , self.assert_equal ( rv.data , b ' [ 42 ] ' ) self.assert_equal ( rv.data , b'GET ' ) self.assert_equal ( c.get ( '/what-is-a-sideend ' ) .data , b'application itself says no ' ) self.assert_equal ( rv.data , b'test index ' ) self.assert_equal ( c.get ( '/de/ ' ) .data , '/de/about ' ) self.assert_equal ( rv , 'request|after ' ) self.assert_equal ( c.get ( '/what-is-a-sideend ' ) .data , 'application itself says no ' ) self.assert_equal ( rv.data , b'Meh ' ) self.assert_equal ( rv.data.strip ( ) , ' < h1 > Hello World ! < /h1 > ' ) self.assert_equal ( rv.data , 'not found ' ) self.assertEqual ( c.get ( '/bar/ ' ) .data , b'bar ' ) self.assert_equal ( c.get ( '/page/2 ' ) .data , b ' 2 ' ) self.assert_equal ( c.get ( '/more ' ) .data , 'GET ' ) self.assert_equal ( rv.data , b ' 3 ' ) self.assert_equal ( c.get ( '/frontend-no ' ) .data , 'frontend says no ' ) self.assert_equal ( rv.data , b'True ' ) self.assert_equal ( rv.data , '42 ' ) self.assertEqual ( rv.data , b ' '' < 42 > '' ' ) self.assert_equal ( rv.data , b'42 ' ) self.assert_equal ( rv.data , 'Test ' ) self.assertEqual ( rv.data , '42 ' ) self.assert_equal ( rv.data , b'index for mitsuhiko ' ) self.assert_equal ( c.get ( '/foo/ ' ) .data , 'index ' ) self.assert_equal ( c.post ( '/more ' ) .data , b'POST ' ) self.assert_equal ( rv , b'request|after ' ) self.assert_equal ( app.test_client ( ) .get ( '/foo ' ) .data , b'Meh ' ) self.assertEqual ( c.get ( '/py/bar/foo ' ) .data , b'bp.bar_foo ' ) self.assert_equal ( c.get ( '/ ' ) .data , b'the index ' ) self.assert_equal ( rv.data , 'Awesome ' ) self.assert_equal ( c.get ( '/admin/ ' ) .data , 'the admin ' ) self.assert_equal ( rv.data , b'Test ' ) self.assert_equal ( rv.data , 'Hello from the Admin ' ) self.assert_equal ( rv.data , b'dcba ' ) self.assert_equal ( rv.data , b'Awesome ' ) self.assert_equal ( c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data , b'value set ' ) self.assert_equal ( app.test_client ( ) .get ( '/admin/ ' ) .data , '42 ' ) self.assert_equal ( rv.data , b'Blub ' ) self.assertEqual ( c.get ( '/ ' ) .data , b'index ' ) self.assert_equal ( rv.data , b'http : //localhost/ ' ) self.assert_equal ( rv.data , 'Hello Custom World ! ' ) self.assert_equal ( c.get ( '/frontend-no ' ) .data , b'frontend says no ' ) self.assert_equal ( rv.data , ' < h1 > Jameson < /h1 > ' ) self.assert_equal ( rv.data , b ' < h1 > Jameson < /h1 > ' ) self.assert_equal ( c.get ( '/foo/bar ' ) .data , 'bar ' ) self.assert_equal ( c.get ( '/de/about ' ) .data , b'/de/ ' ) self.assert_equal ( c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data , 'value set ' ) self.assert_equal ( rv.data , b'Test ' ) self.assert_equal ( rv.data , b'Hello from the Frontend ' ) self.assert_equal ( c.post ( '/ ' ) .data , b'POST ' ) self.assert_equal ( rv.data , `` ) self.assert_ ( 'Response ' in rv.data ) self.assertEqual ( c.get ( '/py/bar/foo ' ) .data , 'bp.bar_foo ' ) self.assert_equal ( c.get ( '/ ' ) .data , b'GET ' ) self.assert_equal ( rv.data , b'W00t ' ) self.assert_equal ( rv.data , 'Awesome ' ) self.assert_equal ( rv.data , ' < p > 23|42 ' ) self.assert_equal ( rv.data , 'test index ' ) self.assertEqual ( c.get ( '/ ' ) .data , 'index ' ) self.assert_equal ( c.get ( '/foo ' ) .data , '/en/about ' ) self.assert_equal ( rv.data , b '' ) self.assertEqual ( c.get ( '/bar/123 ' ) .data , '123 ' ) self.assert_equal ( rv.data , b'not found ' ) self.assertEqual ( rv.data , b'Hello World ! ' ) self.assert_equal ( rv.data , b'value ' ) self.assert_equal ( rv.data , 'value ' ) self.assert_equal ( rv.data , 'Hello Server Error ' ) self.assert_equal ( app.test_client ( ) .get ( '/ ' ) .data , 'Awesome ' ) self.assertEqual ( rv.data , 'Hello World ! ' ) self.assert_equal ( rv.data , ' < h1 > 42 < /h1 > ' ) self.assert_equal ( rv.data , b'Hello Server Error ' ) self.assertEqual ( c.get ( '/bar/ ' ) .data , 'bar ' ) self.assert_equal ( rv.data , b'stuff ' ) self.assert_equal ( rv.data , 'Foo ' ) self.assert_equal ( c.get ( '/ ' ) .data , ' 1 ' ) self.assert_equal ( response.data , 'stuff ' ) self.assertEqual ( c.get ( '/py/bar/123 ' ) .data , b'bp.123 ' ) self.assertEqual ( c.get ( '/py/bar/123 ' ) .data , 'bp.123 ' ) self.assert_equal ( c.get ( '/ ' ) .data , '13 ' ) self.assert_equal ( rv.data , b '' ) self.assert_equal ( b'internal server error ' , rv.data ) self.assertEqual ( c.get ( '/py/foo ' ) .data , 'bp.foo ' ) self.assert_equal ( c.get ( '/ ' ) .data , b'None ' ) self.assert_equal ( rv.data , b'success ' ) self.assert_equal ( c.get ( '/admin/ ' ) .data , 'admin index ' ) self.assert_equal ( rv.data , 'Outside ' ) self.assertEqual ( rv.data , ' '' < 42 > '' ' ) self.assert_equal ( c.get ( '/admin/login ' ) .data , 'admin login ' ) self.assert_equal ( c.get ( '/ ' ) .data , b ' 1 ' ) self.assert_equal ( rv.data , 'Hello World ! ' ) self.assert_equal ( rv.data , `` ) self.assertEqual ( c.get ( '/foo/ ' ) .data , 'foo ' ) self.assertEqual ( c.get ( '/foo/ ' ) .data , b'foo ' ) self.assert_equal ( rv.data , 'GET ' ) self.assert_equal ( app.test_client ( ) .get ( '/foo ' ) .data , 'Meh ' ) self.assert_equal ( c.get ( '/get ' ) .data , '42 ' ) self.assert_equal ( c.get ( '/ ' ) .data , '42 ' ) self.assertEqual ( rv.data , b ' { \n `` msg '' : `` W00t '' \n } ' ) self.assert_equal ( c.get ( '/de/about ' ) .data , b'/foo ' ) self.assert_equal ( rv.data , 'Test ' ) self.assertEqual ( rv.data , b'42 ' ) self.assert_equal ( c.post ( '/more ' ) .data , 'POST ' ) self.assert_equal ( rv.data , 'normal index ' ) self.assert_equal ( c.post ( '/ ' ) .data , 'POST ' ) self.assert_equal ( rv.data , 'W00t ' ) self.assert_equal ( rv.data , b'http : //example.com:1234/foo/ ' )","['flask/testsuite/basic.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/helpers.py', 'flask/testsuite/regression.py', 'flask/testsuite/reqctx.py', 'flask/testsuite/signals.py', 'flask/testsuite/templating.py', 'flask/testsuite/testing.py', 'flask/testsuite/views.py']",Merge pull request # 737 from untitaker/sprint-branch
603,ee013e01b0f0007e4908458fbb8e60944c40a6b7,2013-05-22 07:20:41-07:00,"exec ( 'def reraise ( tp , value , tb=None ) : \n raise tp , value , tb ' ) from flask._compat import reraise # itself with the actual metaclass . Because of internal type checks for entry , value in list ( sys.modules.items ( ) ) : `` six '' 1.3.0 . from flask._compat import reraise , string_types , integer_types raise exc_type , exc_value , tb c = app.test_client ( ) for x in xrange ( 3 ) : self.assert_equal ( len ( log ) , 1 ) Some py2/py3 compatibility support that is not yet available in get_next = lambda x : x.next # if getattr ( self.init_jinja_globals , 'im_func ' , None ) is not \ unichr = chr for x in range ( 10 ) : __init__ = type.__init__ rv = self.create_jinja_environment ( ) raise value.with_traceback ( tb ) from urllib import quote as url_quote NativeStringIO = BytesIO def init_jinja_globals ( self ) : import pickle from flask._compat import StringIO itervalues = lambda d : d.itervalues ( ) from itertools import imap , izip , ifilter for x in range ( 3 ) : if this_bases is None : from flask._compat import string_types , text_type return app.jinja_env.globals [ 'foo ' ] range_type = xrange import cPickle as pickle @ app.route ( '/ ' ) if isinstance ( filename , unicode ) : for i in xrange ( 2 , int ( math.ceil ( math.sqrt ( n ) ) ) + 1 ) : raise exc_type , exc_value , tb.tb_next return meta ( name , bases , d ) if value.__traceback__ is not tb : of it . PYPY = hasattr ( sys , 'pypy_translation_info ' ) return rv Some py2/py3 compatibility support based on a stripped down imap = map self.assert_ ( 'init_jinja_globals ' in str ( log [ 0 ] [ 'message ' ] ) ) for i in range ( 2 , int ( math.ceil ( math.sqrt ( n ) ) ) + 1 ) : warn ( DeprecationWarning ( 'This flask class uses a customized ' # This has the advantage over six.with_metaclass in that it does not 'Move the code from that method into the ' app = MyFlask ( __name__ ) iterkeys = lambda d : d.iterkeys ( ) def foo ( ) : cls.__str__ = lambda x : x.__unicode__ ( ) .encode ( 'utf-8 ' ) # dummy metaclass for one level of class instanciation that replaces Flask.init_jinja_globals.__func__ : if isinstance ( code_or_exception , ( int , long ) ) : try : string_types = ( str , unicode ) # This requires a bit of explanation : the basic idea is to make a NativeStringIO = StringIO if isinstance ( obj , string_types ) : again from here as soon as we require a new enough `` six '' release . There are bugs open for `` six '' for all this stuff , so we can remove it iterkeys = lambda d : iter ( d.keys ( ) ) filename.encode ( 'utf-8 ' ) if isinstance ( filename , text_type ) intern = sys.intern reraise ( exc_type , exc_value , tb ) return filename.encode ( 'utf-8 ' ) from urllib.parse import urlparse from flask._compat import string_types encode_filename = _identity for entry , value in sys.modules.items ( ) : if isinstance ( filename_or_fp , basestring ) : self.assert_equal ( c.get ( '/ ' ) .data , '42 ' ) `` `` '' not used currently '' '' '' raise exc_type , exc_value , tb for x in xrange ( 10 ) : from flask._compat import urlparse itervalues = lambda d : iter ( d.values ( ) ) from flask._compat import reraise , StringIO def implements_to_string ( cls ) : __call__ = type.__call__ implements_to_string = _identity implements_iterator = _identity self.__dict__ [ 'jinja_env ' ] = rv return filename from warnings import warn from cStringIO import StringIO as BytesIO , StringIO def encode_filename ( filename ) : izip = zip iteritems = lambda d : iter ( d.items ( ) ) and isinstance ( filename , string_types ) : _identity = lambda x : x integer_types = ( int , ) iteritems = lambda d : d.iteritems ( ) if not PY2 : with catch_warnings ( ) as log : 'create_jinja_environment ( ) method instead . ' ) ) class metaclass ( meta ) : def __new__ ( cls , name , this_bases , d ) : from StringIO import StringIO from urlparse import urlparse del cls.__next__ reraise ( exc_type , exc_value , tb.tb_next ) for x in range ( 2 ) : def test_init_jinja_globals ( self ) : if isinstance ( filename_or_fp , string_types ) : cls.next = cls.__next__ for x in xrange ( 2 ) : import sys return self.create_jinja_environment ( ) from urllib.parse import quote_from_bytes as url_quote # Hack to support the init_jinja_globals method which is supported from io import BytesIO , StringIO class MyFlask ( flask.Flask ) : # introduce dummy classes into the final MRO . ifilter = filter integer_types = ( int , long ) if isinstance ( status , basestring ) : cls.__unicode__ = cls.__str__ version of six so we do n't have to depend on a specific version 'init_jinja_globals ( ) method which is deprecated . ' # __init__ comes back from type etc . ) . range_type = range def with_metaclass ( meta , * bases ) : if isinstance ( rv , string_types ) : if isinstance ( obj , basestring ) : return metaclass ( 'temporary_class ' , None , { } ) unichr = unichr self.init_jinja_globals ( ) def implements_iterator ( cls ) : except ImportError : text_type = str filename.encode ( 'utf-8 ' ) if isinstance ( filename , unicode ) raise exc_type , exc_value , tb else : string_types = ( str , ) if isinstance ( code_or_exception , integer_types ) : reraise ( exc_type , exc_value , tb ) reraise ( exc_type , exc_value , tb ) # until 1.0 but has an API deficiency . get_next = lambda x : x.__next__ intern = intern return type.__new__ ( cls , name , ( ) , d ) if isinstance ( status , string_types ) : PY2 = sys.version_info [ 0 ] == 2 text_type = unicode # for one level to something closer to type ( that 's why __call__ and from urlparse import urlparse def reraise ( tp , value , tb=None ) : # we also need to make sure that we downgrade the custom metaclass from __future__ import with_statement return cls if isinstance ( rv , basestring ) : self.jinja_env.globals [ 'foo ' ] = '42 ' and isinstance ( filename , basestring ) : raise value","['examples/flaskr/flaskr.py', 'examples/minitwit/minitwit.py', 'flask/_compat.py', 'flask/app.py', 'flask/config.py', 'flask/exthook.py', 'flask/helpers.py', 'flask/testing.py', 'flask/testsuite/__init__.py', 'flask/testsuite/appctx.py', 'flask/testsuite/basic.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/config.py', 'flask/testsuite/deprecations.py', 'flask/testsuite/ext.py', 'flask/testsuite/helpers.py', 'flask/testsuite/regression.py', 'flask/testsuite/reqctx.py', 'flask/testsuite/signals.py', 'flask/testsuite/subclassing.py', 'flask/testsuite/templating.py', 'flask/testsuite/testing.py', 'flask/testsuite/views.py', 'scripts/flaskext_test.py']",Merge pull request # 736 from ThomasWaldmann/sprint-branch
604,bbdfc839029889af7477b6dbbe8dc4c230ba6f73,2013-05-18 08:24:00-07:00,"except Exception , e : except TemplateNotFound as e : except Exception as e : except KeyError , e : except ValueError as e : except IOError as e : except DebugFilesKeyError as e : except KeyError , e : except HTTPException as e : except IOError as e : except NotFound , e : except RuntimeError , e : except ValueError , e : except BuildError as error : except Exception as e : except AssertionError as e : except KeyError as e : except HTTPException , e : except RuntimeError , e : except IOError , e : except KeyError as e : except BuildError as error : except Exception , e : except BuildError , error : except AssertionError as e : except AssertionError , e : except BuildError , error : except HTTPException as e : except DebugFilesKeyError , e : except IOError , e : except RuntimeError as e : except MethodNotAllowed as e : except ValueError as e : except ValueError , e : except RuntimeError as e : except AssertionError , e : except BuildError , error : except NotFound as e : except MethodNotAllowed , e : except Exception as e : except TemplateNotFound , e : except Exception , e : except HTTPException , e : except BuildError as error :","['flask/app.py', 'flask/config.py', 'flask/ctx.py', 'flask/debughelpers.py', 'flask/helpers.py', 'flask/testsuite/__init__.py', 'flask/testsuite/basic.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/config.py', 'flask/testsuite/reqctx.py', 'flask/testsuite/testing.py', 'flask/wrappers.py']",Merge pull request # 732 from ThomasWaldmann/exceptions_as
605,c87735ff1bc30ed8c9e80d385ddb69ad5f4f4a12,2013-05-18 08:18:05-07:00,"'The runtime requirements for Flask 0.7 however are still ' add the following lines to your existing imports in ` flaskr.py ` : : This requires Python 2.6 or an installed version of simplejson . For 10 . An extension currently has to support Python 2.6 as well as want to use Python 2.5 it 's also necessary to enable the ` with ` statement For security reasons only objects are supported toplevel . For more Python requirements changed : requiring Python 2.6 or 2.7 now to prepare parser.error ( 'Python 2.6 or later is required to run the upgrade script.\n ' 10 . An extension currently has to support Python 2.5 , 2.6 as well as for Python 3.3 port . You will need Python 2.5 or higher to get started , so be sure to have an : func : ` contextlib.closing ` function from the contextlib package . If you This requires Python 2.6 or an installed version of simplejson . .. _simplejson : http : //pypi.python.org/pypi/simplejson 'Python 2.5 . ' ) will have to install the ` simplejson ` _ library from PyPI . Accordingly , add the following lines to your existing imports in ` flaskr.py ` : : security reasons only objects are supported toplevel . For more You will need Python 2.6 or higher to get started , so be sure to have an 2.5 : func : ` contextlib.closing ` function from the contextlib package . first ( ` __future__ ` imports must be the very first import ) . Accordingly , from __future__ import with_statement 'Programming Language : : Python : : 2.5 ' , parser.error ( 'Python 2.6 or later is required to run the upgrade script . ' ) If you have Python 2.6 JSON will work out of the box , in Python 2.5 you","['.travis.yml', 'CHANGES', 'docs/extensiondev.rst', 'docs/installation.rst', 'docs/patterns/jquery.rst', 'docs/tutorial/dbinit.rst', 'flask/json.py', 'flask/wrappers.py', 'scripts/flask-07-upgrade.py', 'setup.py']",Merge pull request # 731 from ThomasWaldmann/docs
606,ef62e8440e050bb8791505f66cf48f1b756571b1,2013-05-14 03:25:49-07:00,< https : //developers.google.com/speed/libraries/devguide > ` _ to load jQuery : < script src= '' //ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js '' > < /script > < http : //code.google.com/apis/ajaxlibs/documentation/ > ` _ to load jQuery : < script src= '' //ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.js '' > < /script > Edmond Burnett,"['AUTHORS', 'docs/patterns/jquery.rst']",Merge pull request # 702 from edburnett/master
607,6a8acc115e312e1e23e70b66d493b4cdc00d1133,2013-05-14 03:25:33-07:00,3. now you can run the flaskr.py file with your 2. now you can run the flaskr.py file with your 2. fire up a python shell and run this : > > > from flaskr import init_db ; init_db ( ),['examples/flaskr/README'],Merge pull request # 709 from halexus/patch-1
608,6309987dca72ebe62539ce7b851a072f4e4e9173,2013-03-31 20:05:57-07:00,"the URLs will stay unique , which helps search engines avoid indexing the `` < variable_name > `` . Such a part is then passed as keyword argument to your interpreter and not used as an imported module . function . Optionally a converter can be used by specifying a rule with function . Optionally a converter can be specified by specifying a rule with slash is ommited , consistent with how Apache and other servers work . Also , and other servers work . Also , the URLs will stay unique , which helps search engines avoid indexing the same page twice . interpreter and not used as imported module . This behavior allows relative URLs to continue working even if the trailing same page twice . This behavior allows relative URLs to continue working if users access the `` < variable_name > `` . Such a part is then passed as a keyword argument to your page when they forget a trailing slash , consistent with how Apache",['docs/quickstart.rst'],Merge pull request # 701 from bruston/quickstart-typod
609,5997890c6996a5eaebc14fff5642ae55acf30cd4,2013-03-21 13:58:52-07:00,"recorded.append ( ( message , category ) ) return flask.redirect ( '/other ' ) def test_flash_signal ( self ) : try : client = app.test_client ( ) self.assert_equal ( category , 'notice ' ) app.config [ 'SECRET_KEY ' ] = 'secret ' from .signals import message_flashed message_flashed.send ( current_app._get_current_object ( ) , client.get ( '/ ' ) appcontext_tearing_down , message_flashed recorded = [ ] def record ( sender , message , category ) : def index ( ) : message_flashed = _signals.signal ( 'message-flashed ' ) finally : flask.message_flashed.disconnect ( record , app ) self.assert_equal ( message , 'This is a flash message ' ) with client.session_transaction ( ) : app = flask.Flask ( __name__ ) message=message , category=category ) self.assert_equal ( len ( recorded ) , 1 ) flask.flash ( 'This is a flash message ' , category='notice ' ) message , category = recorded [ 0 ] from __future__ import with_statement appcontext_tearing_down flask.message_flashed.connect ( record , app )","['flask/__init__.py', 'flask/helpers.py', 'flask/signals.py', 'flask/testsuite/signals.py']",Merge pull request # 687 from poiati/flash-signal
610,ac9d8b09a5f8d3d4580cd432ab05eab2cf2529c7,2013-03-21 13:57:29-07:00,"# create some models # no app object passed ! Instead we use use db.init_app in the factory . extensions refer to : doc : ` /extensiondev ` . from yourapplication.model import db application-specific state is stored on the extension object , so one extension Your ` model.py ` might look like this when using ` Flask-SQLAlchemy object can be used for multiple apps . For more information about the design of Extension objects are not initially bound to an application . Using < http : //pythonhosted.org/Flask-SQLAlchemy/ > ` _ : : `` db.init_app `` , the app gets configured for the extension . No from flask.ext.sqlalchemy import SQLAlchemy db.init_app ( app ) db = SQLAlchemy ( )",['docs/patterns/appfactories.rst'],Merge pull request # 693 from untitaker/factory_docs
611,aa83d9132fde44d4fda5b34bea1f0872780746aa,2013-03-06 09:52:47-08:00,"& copy ; Copyright 2010 by < a href= '' http : //domain.invalid/ '' > you < /a > . application or imported as module the name will be different ( `` '__main__ ' `` information have a look at the : class : ` ~flask.Flask ` documentation . ( `` '__main__ ' `` versus the actual import name ) . This is needed so that < /body > the application 's module . If you are using a single module ( as in this { % endblock % } the application 's module or package . If you are using a single module ( as 2 . Next we create an instance of this class . The first argument is the name of versus the actual import name ) . For more information , have a look at the < div id= '' footer '' > { % block footer % } < div id= '' content '' > { % block content % } { % endblock % } < /div > < div id= '' footer '' > or package . This is needed so that Flask knows where to look for templates , < /div > < /html > Flask knows where to look for templates , static files , and so on . For more : class : ` ~flask.Flask ` documentation . & copy ; Copyright 2010 by < a href= '' http : //domain.invalid/ '' > you < /a > . < body > { % block footer % } static files , and so on . started as application or imported as module the name will be different class will be our WSGI application . The first argument is the name of < /body > example ) , you should use ` __name__ ` because depending on if it 's started as 2 . Next we create an instance of this class . We pass it the name of the module < div id= '' content '' > { % block content % } { % endblock % } < /div > { % endblock % } in this example ) , you should use ` __name__ ` because depending on if it 's class will be our WSGI application . < body > < /div >","['docs/patterns/templateinheritance.rst', 'docs/quickstart.rst']",Merge pull request # 683 from alexcouper/master
612,8a968a9378b4db323af71683ccd09b810afc2bbb,2013-03-06 09:49:23-08:00,".flash { background : # CEE5F5 ; padding : 0.5em ; .flash { background : # cee5F5 ; padding : 0.5em ; a , h1 , h2 { color : # 377ba8 ; } .error { background : # f0d6d6 ; padding : 0.5em ; } border : 1px solid # AACBE2 ; } border : 1px solid # aacbe2 ; } a , h1 , h2 { color : # 377BA8 ; } .error { background : # F0D6D6 ; padding : 0.5em ; }",['docs/tutorial/css.rst'],Merge pull request # 689 from OrangeTux/patch-2
613,6ab569b0e3791cf04db7c333bbf5b78d33255dad,2013-01-27 00:56:01+00:00,by the `` PRESERVE_CONTEXT_ON_EXCEPTION `` configuration variable . .. admonition : : Debug Note In debug mode Flask will not tear down a request on an exception immediately . Instead if will keep it alive so that the interactive debugger can still access it . This behavior can be controlled,['flask/app.py'],Added note on teardown in debug mode . Fixes # 661
614,3b393f89f66733f7824a50b33b93eae9999812ad,2013-01-27 00:46:19+00:00,"def decorator ( f ) : self.add_template_global ( f , name=name ) return f : meth : ` Flask.template_global ` but for a blueprint . name will be used . Example : : Added `` template_global `` methods in addition to the already existing return 42 def add_app_template_global ( self , f , name=None ) : self.assert_ ( app.jinja_env.globals [ 'get_stuff ' ] ( ) , 42 ) def template_global ( self , name=None ) : def register_template ( state ) : You can specify a name for the global function , otherwise the function def get_stuff ( ) : : meth : ` Flask.add_template_global ` but for a blueprint . Works exactly with app.app_context ( ) : .. versionadded : : 0.10 : meth : ` template_global ` decorator . def double ( n ) : self.add_app_template_global ( f , name=name ) return 2 * n `` `` '' Register a custom template global , available application wide . Like rv = flask.render_template_string ( ' { { get_stuff ( ) } } ' ) self.jinja_env.globals [ name or f.__name__ ] = f app = flask.Flask ( __name__ ) `` `` '' A decorator that is used to register a custom template global function . self.assert_ ( 'get_stuff ' in app.jinja_env.globals.keys ( ) ) self.assert_equal ( rv , '42 ' ) function name will be used . def add_template_global ( self , f , name=None ) : : param name : the optional name of the global , otherwise the `` `` '' state.app.jinja_env.globals [ name or f.__name__ ] = f `` template_filter `` method family . `` `` '' Register a custom template global function . Works exactly like the like the : meth : ` app_template_global ` decorator . self.assert_equal ( app.jinja_env.globals [ 'get_stuff ' ] , get_stuff ) def app_template_global ( self , name=None ) : : param name : the optional name of the global function , otherwise the function name will be used . def test_add_template_global ( self ) : return decorator self.record_once ( register_template )","['CHANGES', 'flask/app.py', 'flask/blueprints.py', 'flask/testsuite/templating.py']","Added template_global , fixes # 657"
615,3fdcefbcda47c1ad7fd3432d0643d127cd2918d4,2013-01-24 20:22:02-08:00,"top.sqlite_db = sqlite_db entries = cur.fetchall ( ) sqlite_db = sqlite3.connect ( app.config [ 'DATABASE ' ] ) db.row_factory = sqlite3.Row Or even simpler : : sqlite_db.row_factory = sqlite3.Row entries = [ dict ( title=row [ 0 ] , text=row [ 1 ] ) for row in cur.fetchall ( ) ] top.sqlite_db = sqlite3.connect ( app.config [ 'DATABASE ' ] )","['docs/patterns/sqlite3.rst', 'examples/flaskr/flaskr.py']",Merge pull request # 625 from soulseekah/master
616,17fc38c397aeea01165275f6811e34989f2ff00d,2013-01-24 20:21:31-08:00,"if ( e.keyCode == 13 ) { var submit_form = function ( e ) { $ ( `` # result '' ) .text ( data.result ) ; < span id=result > ? < /span > $ ( 'input [ type=text ] ' ) .bind ( 'keydown ' , function ( e ) { $ ( ' a # calculate ' ) .bind ( 'click ' , function ( ) { < p > < input type=text size=5 name=a > < input type=text size=5 name=a > submit_form ( e ) ; < input type=text size=5 name=b > = $ ( ' # result ' ) .text ( data.result ) ; $ ( ' a # calculate ' ) .bind ( 'click ' , submit_form ) ; < p > < input type=text size=5 name=b > = < span id=result > ? < /span > } ; } $ ( 'input [ name=a ] ' ) .focus ( ) .select ( ) ; $ ( 'input [ name=a ] ' ) .focus ( ) ;",['examples/jqueryexample/templates/index.html'],Merge pull request # 617 from tony/jquery-example-iteration1
617,777c0c56b5768582eb57607846a945f94c37e154,2013-01-24 20:13:30-08:00,'application context being pushed . This has to be ' 'executed when application context is available . ' ) 'context being pushed . This has to be executed ' ) raise RuntimeError ( 'Attempted to generate a URL without the ' raise RuntimeError ( 'Attempted to generate a URL with the application ',['flask/helpers.py'],Merge pull request # 630 from untitaker/doc_fix_appctx
618,94a9b9665b6a0a5b1aac46c4212da519205a22ad,2013-01-24 19:01:43-08:00,"up-to-date Python 2.x installation . At the time of writing , the WSGI the 3.x series of Python . specification has not yet been finalized for Python 3 , so Flask can not support up-to-date Python 2.x installation . Python 3.x is not supported .",['docs/installation.rst'],Merge pull request # 660 from baijum/docs
619,b975dd4667ddbdf3733e6620d2329596db9dbfad,2013-01-24 18:57:45-08:00,"_scheme='https ' ) , if not external : def test_url_for_with_scheme ( self ) : The ` _scheme ` parameter was added . flask.url_for , self.assert_equal ( flask.url_for ( 'index ' , parameter must be set to ` True ` or a ` ValueError ` is raised . def test_url_for_with_scheme_not_external ( self ) : if scheme is not None : def index ( ) : self.assert_raises ( ValueError , 'https : //localhost/ ' ) url_adapter.url_scheme = scheme scheme = values.pop ( '_scheme ' , None ) .. versionadded : : 0.10 return '42 ' app = flask.Flask ( __name__ ) with app.test_request_context ( ) : : param _scheme : a string specifying the desired URL scheme . The ` _external ` raise ValueError ( 'When specifying _scheme , _external must be True ' ) _external=True , 'index ' , _scheme='https ' )","['flask/helpers.py', 'flask/testsuite/helpers.py']",Merge pull request # 667 from maxcountryman/secure-url-for
620,6fa449de00ae89bb1d1ae5e6f793b60d32c1ba76,2013-01-24 18:55:21-08:00,"Web development , one drop at a time ~ Is it ready ? ~ What do I need ? of the current documentation . Otherwise build them yourself $ python run-tests.py Flask is a microframework for Python based on Werkzeug ` pip ` or ` easy_install ` will install them for you if you do # # What do I need ? # # Where are the docs ? ask on the mailinglist : http : //flask.pocoo.org/mailinglist/ ~ Where are the docs ? provide it on the command line : # # Where can I get help ? Jinja 2.4 and Werkzeug 0.7 or later . provide it on the command line : $ python run-tests.py test_to_run Check the docs for complete installation and usage Go to http : //flask.pocoo.org/docs/ for a prebuilt version $ python run-tests.py -- verbose ` -- verbose ` flag : ~ What is Flask ? ` pip ` or ` easy_install ` will install them for you if you do ` run-tests.py ` file : $ python run-tests.py test_to_run ` pip install Flask ` . I encourage you to use a virtualenv . If it 's not enough output for you , you can use the and was developed with best intentions in mind . ` -- verbose ` flag : ~ Where can I get help ? of the current documentation . Otherwise build them yourself web development , one drop at a time instructions . flask/testsuite package . To run the tests use the # Flask $ python run-tests.py ` run-tests.py ` file : and Jinja2 . It 's intended for getting started very quickly ask on the mailinglist : http : //flask.pocoo.org/mailinglist/ already widely used . Consider the API to slightly and was developed with best intentions in mind . already widely used . Consider the API to slightly ` pip install Flask ` . I encourage you to use a virtualenv . improve over time but we do n't plan on breaking it . # # Where are the tests ? It 's still not 1.0 but it 's shaping up nicely and is Good that you 're asking . The tests are in the $ python run-tests.py -- verbose # # What is Flask ? from the sphinx sources in the docs folder . If it 's not enough output for you , you can use the If you just want one particular testcase to run you can See http : //flask.pocoo.org/community/ for more resources . instructions . If you just want one particular testcase to run you can // Flask // from the sphinx sources in the docs folder . Either use the # pocoo IRC channel on irc.freenode.net or improve over time but we do n't plan on breaking it . and Jinja2 . It 's intended for getting started very quickly Either use the # pocoo IRC channel on irc.freenode.net or Check the docs for complete installation and usage It 's still not 1.0 but it 's shaping up nicely and is Flask is a microframework for Python based on Werkzeug flask/testsuite package . To run the tests use the Good that you 're asking . The tests are in the ~ Where are the tests ? # # Is it ready ? Jinja 2.4 and Werkzeug 0.7 or later . Go to http : //flask.pocoo.org/docs/ for a prebuilt version See http : //flask.pocoo.org/community/ for more resources .","['README', 'README.md']",Merge pull request # 669 from schneems/master
621,2b30900e2c007cf39b3d73a8ad53afe2f29a3a2c,2013-01-11 16:52:38+01:00,'application context being pushed . This has to be ' 'executed when application context is available . ' ) 'context being pushed . This has to be executed ' ) raise RuntimeError ( 'Attempted to generate a URL without the ' raise RuntimeError ( 'Attempted to generate a URL with the application ',['flask/helpers.py'],Fix # 623
622,ab3d9d12c6f16712895735903cfbb136f22aeeec,2012-12-27 07:23:30-08:00,"title text not null , text string not null , text text not null , text string not null title string not null , email string not null , username text not null , email text not null , text string not null pw_hash text not null text text not null pw_hash string not null text text not null username string not null , title string not null , title text not null ,","['docs/tutorial/schema.rst', 'examples/flaskr/schema.sql', 'examples/minitwit/schema.sql']",Merge pull request # 655 from oliversong/master
623,dfdbc00eafb3e7578b81f82a59630f2e79691cee,2012-12-27 07:22:05-08:00,self.init_app ( self.app ) self.app = app self.app = app self.init_app ( app ) self.app = None else : return sqlite3.connect ( current_app.config [ 'SQLITE3_DATABASE ' ] ) return sqlite3.connect ( self.app.config [ 'SQLITE3_DATABASE ' ] ) from flask import current_app,['docs/extensiondev.rst'],Merge pull request # 653 from methane/patch-1
624,813149677d2627a9ca462dbb2fae985369b54384,2012-12-12 16:06:18-08:00,"that does n't write into the HTTP response . With CGI , you will also have to make sure that your code does not contain any `` print `` statements , or that `` sys.stdin `` is overridden by something",['docs/deploying/cgi.rst'],Merge pull request # 647 from untitaker/print_in_cgi
625,fedc96c0b9a1c48d11819f03fc82065336af89a4,2012-11-15 18:37:35-08:00,"example , to run a Twisted Web server in the foreground , on port 8080 , with an standard WSGI container which can be controlled from the command line using as well ; see `` twistd -h `` and `` twistd web -h `` for more information . For Twisted Web This example will run a Flask application called `` app `` from a module named .. _Twisted Web : https : //twistedmatrix.com/trac/wiki/TwistedWeb .. _Twisted : https : //twistedmatrix.com/ ` Twisted Web ` _ is the web server shipped with ` Twisted ` _ , a mature , `` myproject `` . Twisted Web supports many flags and options , and the `` twistd `` utility does application from `` myproject `` : : twistd web -- wsgi myproject.app twistd -n web -- port 8080 -- wsgi myproject.app non-blocking event-driven networking library . Twisted Web comes with a the `` twistd `` utility : :",['docs/deploying/wsgi-standalone.rst'],Merge pull request # 609 from MostAwesomeDude/master
626,8339cb35082fc93d3a9c98616aed7fe0c1c642dc,2012-10-18 00:48:15+01:00,"default to not cause confusion with existing libraries that might expect automatically encode it in `` utf-8 `` kwargs.setdefault ( 'cls ' , current_app.json_encoder ) _load_arg_defaults ( kwargs ) if current_app : `` `` '' Inject default arguments for load functions . '' '' '' kwargs.setdefault ( 'cls ' , current_app.json_decoder ) 'PREFERRED_URL_SCHEME ' : 'http ' , in less bytes being transmitted over the network . It 's disabled by `` False `` Flask will not encode to ASCII self.assert_equal ( rv , ' '' \\u2603 '' ' ) def _load_arg_defaults ( kwargs ) : default is controlled by the `` JSON_AS_ASCII `` configuration variable and can be overriden by the simplejson `` ensure_ascii `` parameter . app.config [ 'JSON_AS_ASCII ' ] = False default which coerce into unicode strings automatically . That behavior by self.assert_equal ( rv , u ' '' \u2603 '' ' ) ascii-encoded JSON . If this is set to _dump_arg_defaults ( kwargs ) 'JSON_AS_ASCII ' : True with app.app_context ( ) : This function can return `` unicode `` strings or ascii-only bytestrings by kwargs.setdefault ( 'ensure_ascii ' , False ) kwargs.setdefault ( 'cls ' , current_app.json_decoder ) def _dump_arg_defaults ( kwargs ) : `` flask.json.dumps `` to return bytestrings by default . `` JSON_AS_ASCII `` By default Flask serialize object to def test_json_as_unicode ( self ) : app.config [ 'JSON_AS_ASCII ' ] = True app = flask.Flask ( __name__ ) if current_app : if not current_app.config [ 'JSON_AS_ASCII ' ] : Added an option to generate non-ascii encoded JSON which should result `` `` '' Inject default arguments for dump functions . '' '' '' and output strings as-is and return then for transport for instance . .. versionadded : : 0.10 rv = flask.json.dumps ( u'\N { SNOWMAN } ' ) kwargs.setdefault ( 'cls ' , current_app.json_encoder ) 'PREFERRED_URL_SCHEME ' : 'http ' unicode strings . `` jsonfiy `` will `` JSON_AS_ASCII ``","['CHANGES', 'docs/config.rst', 'flask/app.py', 'flask/json.py', 'flask/testsuite/helpers.py']",Added support for unicode json dumping . This fixes # 535
627,f06c80a21508d827a6db1223ad4de253fde013a3,2012-10-17 16:36:48-07:00,"rv = url_adapter.build ( endpoint , values , method=method , from __future__ import with_statement force_external=external )","['flask/helpers.py', 'flask/testsuite/views.py']",Merge pull request # 614 from mizhi/master
628,3afcbf160eff2a5ab6ac35a82e0719f972df8972,2012-10-07 22:58:41+02:00,"filename.startswith ( ' .. / ' ) : from flask.helpers import safe_join if os.path.isabs ( filename ) or \ if os.path.isabs ( filename ) or filename.startswith ( ' .. / ' ) : with self.assert_raises ( NotFound ) : filename == ' .. ' or \ safe_join ( '/foo ' , ' .. ' ) from werkzeug.exceptions import NotFound def test_safe_join_toplevel_pardir ( self ) :","['flask/helpers.py', 'flask/testsuite/regression.py']",Extra safety for safe_join . Does not look exploitable but better safe than sorry . Fixes # 501
629,661ee54bc2bc1ea0763ac9c226f8e14bb0beb5b1,2012-10-07 17:12:16+02:00,"app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) def test_filters2 ( ) : class Index ( flask.views.View ) : # But these tests should still pass . We just log a warning . if old_func is not None and old_func is not view_func : app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) with self.assert_raises ( AssertionError ) : return flask.request.method raise AssertionError ( 'View function mapping is overwriting an ' def test_filters ( ) : app = flask.Flask ( __name__ ) methods = [ 'GET ' , 'POST ' ] 'existing endpoint function : % s ' % endpoint ) def test_endpoint_override ( self ) : old_func = self.view_functions.get ( endpoint ) def dispatch_request ( self ) : app.debug = True self.common_test ( app )","['flask/app.py', 'flask/testsuite/basic.py', 'flask/testsuite/views.py']",Raise exceptions if a function is overridden by a new endpoint . This fixes # 570
630,f8b6033a3b86691470a36db57eba17d996c7d5e8,2012-10-07 16:04:31+02:00,"except ( IOError , OSError ) : return True if x == y : except ( IOError , OSError , AttributeError ) : # Windows has no samefile",['flask/testsuite/__init__.py'],Added a workaround for samefile . This fixes # 600
631,b5bb49d080475e4fb90f6a47dacab60b53470e9d,2012-10-07 15:46:21+02:00,"# Accessing this parses the input stream return stream._hash code path . This seems inconvenient when you want to calculate the self._hash.update ( rv ) rv = self._stream.readline ( size_hint ) rv = self._stream.read ( bytes ) some APIs . import hashlib def generate_checksum ( request ) : To use this , all you need to do is to hook the calculating stream in processed , form data ends up there as well but goes through a different Request Content Checksums return rv ========================= requestchecksum class ChecksumCalcStream ( object ) : def special_api ( ) : The following example calculates the SHA1 checksum of the incoming data as self._stream = stream hash = generate_checksum ( request ) stream = ChecksumCalcStream ( env [ 'wsgi.input ' ] ) env [ 'wsgi.input ' ] = stream checksum = hash.hexdigest ( ) For instance JSON data ends up on the request object already read and def read ( self , bytes ) : Fortunately this is however very simple to change by wrapping the input def readline ( self , size_hint ) : env = request.environ `` request.form `` or anything of that nature . `` before_request_handlers `` # At this point the hash is fully constructed . before the request starts consuming data . ( Eg : be careful accessing Various pieces of code can consume the request data and preprocess it . self._hash = hashlib.sha1 ( ) Example usage : : it gets read and stores it in the WSGI environment : : return 'Hash was : % s ' % checksum files = request.files for instance should be careful not to access it ) . checksum of the incoming request data . This is necessary sometimes for stream . def __init__ ( self , stream ) :","['docs/patterns/index.rst', 'docs/patterns/requestchecksum.rst']",Added a new example for checksums on input data . This fixes # 601
632,c4f2075f4c4c27856fe0af77250fb75c61c0d86b,2012-10-07 15:33:25+02:00,"if '\\/ ' not in json.dumps ( '/ ' ) : return rv.replace ( ' < ! ' , ' < \\u0021 ' ) rv = render ( ' { { `` < ! -- < script > '' |tojson|safe } } ' ) _tojson_filter = json.dumps rv = json.dumps ( * args , * * kwargs ) _slash_escape = '\\/ ' not in json.dumps ( '/ ' ) return json.dumps ( * args , * * kwargs ) .replace ( '/ ' , '\\/ ' ) else : def _tojson_filter ( * args , * * kwargs ) : if _slash_escape : self.assert_equal ( rv , ' '' < \\u0021 -- < script > '' ' ) `` tojson `` filter now does not escape script blocks in HTML5 parsers . def _tojson_filter ( * args , * * kwargs ) : rv = rv.replace ( '/ ' , '\\/ ' )","['CHANGES', 'flask/helpers.py', 'flask/testsuite/helpers.py']",tojson no longer escapes script blocks in HTML5 parsers . Fixed # 605
633,aecb760c6adb1ee9a32b6cca5b47920cb9bf9e1b,2012-10-07 06:06:23-07:00,"< /Directory > .. sourcecode : : apache Order deny , allow Allow from all Note : WSGIDaemonProcess is n't implemented in Windows and Apache will WSGIScriptAlias / C : \yourdir\yourapp.wsgi ServerName example.com < /VirtualHost > < VirtualHost * > refuse to run with the above configuration . On a Windows system , eliminate those lines : < Directory C : \yourdir >",['docs/deploying/mod_wsgi.rst'],Merge pull request # 550 from AkaiKitsune/master
634,18413ed1bf08261acf6d40f8ba65a98ae586bb29,2012-10-07 13:02:05+02:00,"def __call__ ( self , environ , start_response ) : ] ) Adding HTTP Method Overrides methods ( such as PATCH ) . In that case it 's possible to “ proxy ” HTTP 'POST ' , from flask import Flask app.wsgi_app = HTTPMethodOverrideMiddleware ( app.wsgi_app ) Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP intended HTTP method ( such as `` PATCH `` ) . The way this works is by letting the client do an HTTP POST request and methods through another HTTP method in total violation of the protocol . def __init__ ( self , app ) : method = method.encode ( 'ascii ' , 'replace ' ) if method in self.bodyless_methods : return self.app ( environ , start_response ) 'HEAD ' , 'DELETE ' , self.app = app 'OPTIONS ' 'GET ' , bodyless_methods = frozenset ( [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'DELETE ' ] ) allowed_methods = frozenset ( [ environ [ 'CONTENT_LENGTH ' ] = ' 0 ' This can easily be accomplished with an HTTP middleware : : To use this with Flask this is all that is necessary : : set the `` X-HTTP-Method-Override `` header and set the value to the 'PUT ' , if method in self.allowed_methods : environ [ 'REQUEST_METHOD ' ] = method method = environ.get ( 'HTTP_X_HTTP_METHOD_OVERRIDE ' , `` ) .upper ( ) methodoverrides ============================ app = Flask ( __name__ ) 'PATCH ' , class HTTPMethodOverrideMiddleware ( object ) :","['docs/patterns/index.rst', 'docs/patterns/methodoverrides.rst']",Added HTTP override middleware to docs . This fixes # 582
635,39329bfc0788e1475038f9c65cb350daa45b39de,2012-10-07 03:54:58-07:00,"the actualy : meth : ` before_request ` functions are called . deprecated . In general we no longer recommend custom error handler ' A blueprint\ 's name collision ocurred between % r and ' \ request in case an unhandled exception occurred . The main reason for the application 's context existance is that in the app.logger.warning ( ' A warning occurred ( % d apples ) ' , 42 ) statements and log ocurring errors . class SuppressedFlask ( flask.Flask ) : def test_supressed_exception_logging ( self ) : error ocurred or not . See : ref : ` callbacks-and-errors ` . app.logger_name = 'flask_tests/test_suppressed_exception_logging ' this method is used by : attr : ` json ` when an error occurred . The default app.logger.error ( 'An error occoured ' ) app = SuppressedFlask ( __name__ ) request in case an unhandled exception ocurred . this method is used by : attr : ` json ` when an error ocurred . The default ' A blueprint\ 's name collision occurred between % r and ' \ def test_suppressed_exception_logging ( self ) : app.logger.warning ( ' A warning ocurred ( % d apples ) ' , 42 ) class SupressedFlask ( flask.Flask ) : app.logger.error ( 'An error occurred ' ) error occurred or not . See : ref : ` callbacks-and-errors ` . the actual : meth : ` before_request ` functions are called . Generally teardown functions must take every necessary step to avoid # Some python verisons will will clean up modules so early that the app = SupressedFlask ( __name__ ) can ignore the existence of the application context unless you need it . The main reason for the application 's context existence is that in the can ignore the existance of the application context unless you need it . # Some python versions will will clean up modules so early that the statements and log occurring errors . deprecated . In generaly we no longer recommend custom error handler app.logger_name = 'flask_tests/test_supressed_exception_logging ' Generally teardown functions must take every necesary step to avoid","['docs/appcontext.rst', 'docs/upgrading.rst', 'flask/app.py', 'flask/exthook.py', 'flask/testsuite/subclassing.py', 'flask/wrappers.py']",Merge pull request # 591 from finbarrocallaghan/master
636,f034d8d3451f590fca1badeac5da0230bed9b148,2012-10-07 12:51:46+02:00,"def decorator ( f ) : bp.add_app_template_test ( is_boolean ) like the : meth : ` app_template_test ` decorator . def boolean ( value ) : self.assert_equal ( app.jinja_env.tests [ 'boolean ' ] , boolean ) def test_add_template_test_with_name ( self ) : { % if value is boolean % } return f `` `` '' Register a custom template test , available application wide . Like name will be used . Example : : : meth : ` Flask.add_template_test ` but for a blueprint . Works exactly def test_template_test ( self ) : self.assert_ ( app.jinja_env.tests [ 'is_boolean ' ] ( False ) ) def test_template_test_with_template ( self ) : self.assert_ ( app.jinja_env.tests [ 'boolean ' ] ( False ) ) self.assert_ ( 'boolean ' in app.jinja_env.tests.keys ( ) ) def is_boolean ( value ) : return flask.render_template ( 'template_test.html ' , value=False ) { % endif % } : param name : the optional name of the test , otherwise the def test_template_test_after_route_with_template ( self ) : return True self.assert_ ( 'my_reverse ' in app.jinja_env.filters.keys ( ) ) state.app.jinja_env.tests [ name or f.__name__ ] = f : meth : ` Flask.template_test ` but for a blueprint . for i in xrange ( 2 , int ( math.ceil ( math.sqrt ( n ) ) ) + 1 ) : def register_template ( state ) : You can specify a name for the test , otherwise the function self.add_template_test ( f , name=name ) def test_template_test_with_name_and_template ( self ) : self.assert_ ( 'Success ! ' in rv.data ) self.assert_ ( 'strrev ' in app.jinja_env.filters.keys ( ) ) Success ! def index ( ) : .. versionadded : : 0.10 def test_add_template_test ( self ) : def app_template_test ( self , name=None ) : app.add_template_test ( boolean ) def add_app_template_test ( self , f , name=None ) : `` `` '' Register a custom template test . Works exactly like the return True self.assert_ ( 'my_reverse ' in app.jinja_env.filters.keys ( ) ) def test_add_template_test_with_name_and_template ( self ) : bp = flask.Blueprint ( 'bp ' , __name__ ) self.record_once ( register_template ) return False app.register_blueprint ( bp , url_prefix='/py ' ) def add_template_test ( self , f , name=None ) : app = flask.Flask ( __name__ ) if n % i == 0 : self.jinja_env.tests [ name or f.__name__ ] = f bp.add_app_template_test ( boolean ) self.assert_equal ( app.jinja_env.tests [ 'boolean ' ] , is_boolean ) if n == 2 : rv = app.test_client ( ) .get ( '/ ' ) def test_template_test_with_name ( self ) : `` `` '' A decorator that is used to register custom template test . `` `` '' : meth : ` template_test ` decorator . def is_prime ( n ) : self.add_app_template_test ( f , name=name ) self.assert_ ( 'strrev ' in app.jinja_env.filters.keys ( ) ) bp.add_app_template_test ( is_boolean , 'boolean ' ) def template_test ( self , name=None ) : self.assert_ ( 'is_boolean ' in app.jinja_env.tests.keys ( ) ) self.assert_equal ( app.jinja_env.tests [ 'is_boolean ' ] , is_boolean ) function name will be used . return isinstance ( value , bool ) app.add_template_test ( is_boolean , 'boolean ' ) return decorator def test_add_template_test_with_template ( self ) :","['flask/app.py', 'flask/blueprints.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/templates/template_test.html', 'flask/testsuite/templating.py']","Add @ template_test ( ) decorator for creating custom jinja2 tests , like existing @ template_filter ( ) for filters . Fixes # 332"
637,b2fc9febdda6ce4c90f1aca351c01e8b71fde11b,2012-10-07 03:49:36-07:00,"To redirect a user to another endpoint , use the : func : ` ~flask.redirect ` : func : ` ~flask.redirect ` function . To abort a request early with an error code use the : func : ` ~flask.abort ` function . Here an example how this works : : To redirect a user to somewhere else you can use the : func : ` ~flask.abort ` function : : function ; to abort a request early with an error code , use the",['docs/quickstart.rst'],Merge pull request # 607 from jfinkels/patch-3
638,ee76129812419d473eb62434051e81d5855255b6,2012-09-22 18:50:11-07:00,: param source : the sourcecode of the template to be : param template_name : the sourcecode of the template to be rendered rendered,['flask/templating.py'],Merge pull request # 594 from ralphbean/patch-1
639,9a0f6519aaa14aa8f6d0a076e269e8ca8b1668aa,2012-08-01 09:34:49-07:00,"Alternatively it can also be used around a specific generator : address can be changed via ` SERVER_NAME ` configuration variable which defaults to ` localhost ` . : param _external : if set to ` True ` , an absolute URL is generated . Server : param _external : if set to ` True ` , an absolute URL is generated . Alternatively it can also be used around a specific generator : :",['flask/helpers.py'],Merge pull request # 571 from plaes/doc-improvements
640,0f3bc38a18909cae8903f3229a2866aa64a52b2a,2012-07-21 04:57:39-07:00,with libraries that were not designed with that in mind for libraries for which it was too inconvenient to make this work . to the official ` Jinja2 Template Documentation with libraries that were not designed with that in mind . to the the official ` Jinja2 Template Documentation,"['docs/appcontext.rst', 'docs/quickstart.rst']",Merge pull request # 562 from yaph/master
641,9d9f240df8da4b433c914e76b6ea2c7e82f3e320,2012-07-20 14:31:55-07:00,will go quite far with that in that it will automatically redirect to a with that in that it will automatically redirect to a canonical URL if a route is ambiguous . canonical URL if a route is ambiguous . in Werkzeug try to ensure that URLs are unique . Werkzeug will go quite far in Werkzeug try to ensure that there is that URLs are unique . Werkzeug,['docs/design.rst'],Merge pull request # 559 from rdegges/master
642,7003fe61352bab3a1dc62d18dffb00ef749b050d,2012-07-04 12:18:28-07:00,"` flaskr.py ` : : the following lines should be to your existing import lines in earlier . Just add that function below the ` connect_db ` function : : first ( ` __future__ ` imports must be the very first import ) : : ` flask.py ` : : first ( ` __future__ ` imports must be the very first import ) . Accordingly , earlier . Just add that function below the ` connect_db ` function in",['docs/tutorial/dbinit.rst'],Merge pull request # 539 from svenstaro/master
643,0ba758d448ca18d98bf05dfa2ad48b59eedbb942,2012-06-25 10:49:11-07:00,"< /ul > { % extends `` pages/layout.html '' % } from simple_page.simple_page import simple_page World < li > < a href= '' { { url_for ( 'simple_page.show ' , page='world ' ) } } '' > /world < /a > < /li > < li > < a href= '' { { url_for ( 'simple_page.show ' , page='hello ' ) } } '' > /hello < /a > < /li > { % endblock % } def setUp ( self ) : import blueprintexample < /p > abort ( 404 ) import unittest self.app = blueprintexample.app.test_client ( ) { % block body % } from flask import Blueprint , render_template , abort from jinja2 import TemplateNotFound class BlueprintExampleTestCase ( unittest.TestCase ) : app.register_blueprint ( simple_page ) # second blueprint instance < div class=page > def show ( page ) : Blueprint example page < li > < a href= '' /pages/hello '' > /pages/hello < /a > < /li > < ul > if __name__ == '__main__ ' : from flask import Flask self.assertEquals ( r.status_code , 200 ) app.run ( debug=True ) `` `` '' # Blueprint can be registered many times < li > < a href= '' /pages/world '' > /pages/world < /a > < /li > except TemplateNotFound : Tests the Blueprint example app unittest.main ( ) template_folder='templates ' ) r = self.app.get ( '/ ' ) Hello ~~~~~~~~~~~~~~ try : < h1 > This is blueprint example < /h1 > < p > you can access it using this urls : return render_template ( 'pages/ % s.html ' % page ) < title > Simple Page Blueprint < /title > Blueprint Example Tests app.register_blueprint ( simple_page , url_prefix='/pages ' ) app = Flask ( __name__ ) { % block body % } < ! doctype html > A simple page blueprint is registered under / and /pages < br/ > r = self.app.get ( '/pages/hello ' ) < /div > simple_page = Blueprint ( 'simple_page ' , __name__ , def test_urls ( self ) : # - * - coding : utf-8 - * r = self.app.get ( '/world ' ) { % endblock % } r = self.app.get ( '/pages/world ' ) Also you can register the same blueprint under another path r = self.app.get ( '/hello ' )","['examples/blueprintexample/blueprintexample.py', 'examples/blueprintexample/blueprintexample_test.py', 'examples/blueprintexample/simple_page/__init__.py', 'examples/blueprintexample/simple_page/simple_page.py', 'examples/blueprintexample/simple_page/templates/pages/hello.html', 'examples/blueprintexample/simple_page/templates/pages/index.html', 'examples/blueprintexample/simple_page/templates/pages/layout.html', 'examples/blueprintexample/simple_page/templates/pages/world.html']",Merge pull request # 413 from dmishe/master
644,7bc6eead47061d1135e420ec1a54eeaf702ed470,2012-06-25 10:35:46-07:00,"return render_template ( 'login.html ' , error=error ) # the code below this is executed if the request method # credentials were invalid # was GET or the credentials were invalid # this is executed if the request method was GET or the",['docs/quickstart.rst'],Merge pull request # 531 from bev-a-tron/master
645,1f82d02b33dad8ac7a4aa49e690767027690fe1a,2012-06-25 13:31:11-04:00,"return render_template ( 'login.html ' , error=error ) # the code below this is executed if the request method # credentials were invalid # was GET or the credentials were invalid # this is executed if the request method was GET or the",['docs/quickstart.rst'],Fixes # 519 by adding return statement
646,a9e753f7064e38e40819b49a51491e681dd0f42c,2012-06-17 06:24:35-07:00,"values [ 'page ' ] = 'login ' app.inject_url_defaults ( 'foo.bar.baz.view ' , values ) self.assert_equal ( url , expected ) def test_inject_blueprint_url_defaults ( self ) : def bp_defaults ( endpoint , values ) : template_folder='template ' ) values = dict ( ) with app.test_request_context ( '/somepage ' ) : self.assert_equal ( values , expected ) def view ( page ) : pass app = flask.Flask ( __name__ ) url = flask.url_for ( 'foo.bar.baz.view ' ) app.register_blueprint ( bp ) bp = endpoint.split ( ' . ' , 1 ) [ 0 ] expected = '/login ' bp = endpoint.rsplit ( ' . ' , 1 ) [ 0 ] expected = dict ( page='login ' ) bp = flask.Blueprint ( 'foo.bar.baz ' , __name__ ,","['flask/app.py', 'flask/testsuite/basic.py']",Merge pull request # 497 from ekoka/master
647,24e01318d31c6a541a44636d3a97310ff814d0c1,2012-06-17 06:22:54-07:00,"to be enlisted on the Flask Extension Registry . Keep in mind that the to be able to be enlisted in the Flask Extension Registry . Keep in mind Flask extensions must be licensed under a BSD , MIT or more liberal license Flask Extension Registry is a moderated place and libraries will be that the Flask Extension Registry is a moderated place and libraries will be reviewed upfront if they behave as required . reviewed upfront if they behave as required . Flask extensions must be licensed as BSD or MIT or a more liberal license",['docs/extensiondev.rst'],Merge pull request # 517 from kuyan/patch-1
648,7b1c8fd15b619aee9eb6bc53dd50bd2d7e9bea3d,2012-06-17 14:22:15+01:00,".. sourcecode : : apache work in that case : On shared webhosting , though , you might not have access to your Apache config . RewriteRule ^ ( . * ) $ /path/to/the/application.cgi/ $ 1 [ L ] In this case , a file called ` .htaccess ` , sitting in the public directory you want RewriteCond % { REQUEST_FILENAME } ! -f # Do n't interfere with static files your app to be available , works too but the ` ScriptAlias ` directive wo n't In Apache for example you can put something like this into the config : RewriteEngine On In Apache for example you can put a like like this into the config :",['docs/deploying/cgi.rst'],Added # 522 in modified version
649,9034461e5bc3a3e75c64b603c89a28acc7bd2144,2012-06-17 06:00:28-07:00,"patterns to build your own extensions if you do not find the tools you need . Flask extensions . Explore the many ` extensions Flask extensions . Explore the many extensions in the community , and look for build your own extensions if you do not find the tools you need . < http : //flask.pocoo.org/extensions/ > ` in the community , and look for patterns to",['docs/becomingbig.rst'],Merge pull request # 525 from brousch/patch-1
650,9f055104ad1a8bfa29c8cccf830dea196b5a9344,2012-05-29 17:04:23-07:00,"2.6 2.5 if isinstance ( kwargs [ 'padded ' ] , str ) : if padded : callback = request.args.get ( kwargs [ 'padded ' ] ) or 'jsonp ' before_install : pip install simplejson del kwargs [ 'padded ' ] callback = request.args.get ( padded ) or 'jsonp ' pypy padded = kwargs.get ( 'padded ' , False ) script : python setup.py test if isinstance ( padded , str ) : python : language : python del kwargs [ 'padded ' ] 2.7","['.travis.yml', 'flask/helpers.py']",Merge pull request # 515 from msabramo/travis
651,7c79ce6e418f07a49be8c25a4c5a40e5347be257,2012-04-23 23:42:58-04:00,"Everything else is up to you , so that Flask can be everything you need locals for you but instead embrace them and provide you with a lot of tools to of that we made a few design choices that some people might find surprising or response objects . Dig deeper on the APIs you use , and look for the The Flask developers keep the framework accessible to users with codebases big problems of modern web applications : cross-site scripting ( XSS ) . Unless you customizations which are available out of the box in a Flask release . Look for and change it . Flask is designed with that in mind and makes this you deliberately mark insecure HTML as secure , Flask and the underlying Thread-Locals in Flask what database to use . Those decisions that it does make , such as what The Flask developers are very interested to keep everybody happy , so as application as if it was implemented in Flask itself . Numerous extensions future releases . Hook . Extend . that your application is not important enough to attract an attacker . production use on a variety of needs . you need to spend in order to get up and running , without assuming things As your codebase grows , you are free to make the design decisions appropriate extensions . For extensions a number of hooks exist throughout Flask the Flask and Flask extension developers to improve the tools for larger Flask itself . As such it 's easy to adapt even for large applications and we in that , check out the : ref : ` becomingbig ` chapter . If you are curious about Subclassing . The majority of functionality can be changed by creating Depending on the kind of attack , chances are that automated bots are ways in which your project can be refactored into a collection of utilities and as appropriate , and take advantage of framework-agnostic tools built for WSGI , internal utilities so that you can find the hook points needed for your server . Werkzeug includes several ` middlewares make it as pleasant as possible to work with them . “ Micro ” does not mean that your whole web application has to fit into a single : ref : ` signals ` . You can provide custom classes for things like the request and thread-locals , does not hide them , and calls out in the code and documentation Scale like a pro . subclassing things or by forking the entire codebase . If you are interested build with caution , watching for exploits when building to your requirements . possibilities are endless . are preconfigured . For example , by convention templates and static files are What that means for large applications is that it 's very easy to take the Read the Source . Discuss with the community . Flask extensions . For a lot of reusable functionality you can create The : class : ` ~flask.Flask ` class has many methods designed for subclassing . You Flask is powered by Werkzeug and Jinja2 , two libraries that are in use at and small . If you find an obstacle in your way , caused by Flask , do n't hesitate available in the community to integrate your project for production . The Flask for your project . Flask will continue to provide a very simple glue layer to to contact the developers on the mailinglist or IRC channel . The best way they should not take a lot of code and yet they should not limit you . Because Scaling like a Pro to contact the developers on the mailinglist or IRC channel . The best way for the original developers had ) . This is natural because if this would not be the are far more complex than one might think , and we all sometimes underestimate So always keep security in mind when doing web development . usually do n't have to , especially when getting started . the likelihood that a vulnerability will be exploited - until a clever the point where the underlying framework gets in the way ( due to assumptions case , the framework would be a very complex system to begin with which causes a problems of modern web applications : cross-site scripting ( XSS ) . Unless framework would be a very complex system to begin with which causes a Here are your options when growing your codebase or scaling your application . Once you have Flask up and running , you 'll find a variety of extensions application class . This works well with : ref : ` app-factories ` . The documentation will warn you about aspects of web development that require important enough to attract an attacker . Depending on the kind of attack , Flask started in part to demonstrate how to build your own framework on top of it does make , such as what templating engine to use , are easy to change . core simple but extensible . Flask wo n't make many decisions for you , such as handle that . Instead , FLask extensions add such functionality to your The majority of code of Flask is within Werkzeug and Jinja2 . These many decisions for you , such as what database to use . Those decisions that For the Stalwart and Wizened ... user . combining existing libraries - there is not a lot of code involved . Flask has many configuration values , with sensible defaults , and a few project . names ` templates ` and ` static ` respectively . While this can be changed you deliberately mark insecure HTML as secure , Flask and the underlying Jinja2 handle that . Instead , Flask supports extensions to add such functionality to template engine have you covered . But there are many more ways to cause < http : //werkzeug.pocoo.org/docs/middlewares/ > ` _ . Continue to : ref : ` installation ` or the : ref : ` quickstart ` . Since Flask is based on a very solid foundation there is not a lot of code in If none of the above options work , fork Flask . The majority of code of Flask This chapter is for programmers who have worked with other frameworks in the cause security problems . do n't just use Flask -- understand it . Read the source . Flask 's code is for the Flask and Flask-extension developers to improve it for larger with signals and callback functions . realize that Flask does things in a way that does not work out for your If you 're more curious about the minutiae of Flask 's implementation , and methods provided for this exact purpose . are making sure that you can either configure it as much as possible by The : ref : ` api ` docs are full of available overrides , hook points , and codebase at a given point and copy/paste it into your application can quickly add or customize behavior by subclassing : class : ` ~flask.Flask ` ( see soon as you find an obstacle in your way , caused by Flask , do n't hesitate unorthodox . For example , Flask uses thread-local objects internally so that you Configuration and Conventions this can be changed you usually do n't have to . We want to minimize the time authentication technologies , and more . Flask may be `` micro '' , but it 's ready for software , and the like . Growing Up existing well-used tools Werkzeug ( WSGI ) and Jinja ( templating ) , and as it uses a value pegged to the request . The Flask project is honest about .. _advanced_foreword : a single Python file ( although it certainly can ) . Nor does it mean Flask is designed to be extended and modified in a couple of different that Flask is lacking in functionality . The `` micro '' in microframework Web Development is Dangerous Jinja2 template engine have you covered . But there are many more ways to written to be read ; it 's documentation published so you can use its internal security problems . chances are that automated bots are probing for ways to fill your database with incredible easy . You just have to take the package and copy it Fork . in functionality . The `` micro '' in microframework means Flask aims to keep the saves you a lot of time , it might also cause some troubles for very large than one might think , and we all sometimes underestimate the likelihood that a core team reviews extensions and ensures approved extensions do not break with a number of large websites out there and all Flask does is bring those Dialogue with the Community the Python web interface . vulnerability will be exploited - until a clever attacker figures out a way to that Flask can be everything you need and nothing you do n't . Flask is based on convention over configuration , which means that many things past , and who may have more specific or esoteric concerns that the typical Subclass . whether its structure is right for your needs , read the unorthodox . For example , Flask uses thread-local objects internally so that customization , the Flask class is built for subclassing . If you are interested If you are curious about the Flask design principles , head over to the section you don ’ t have to pass objects around from function to function within a had ) . This is natural because if this would not be the case , the Python file , although it certainly can . Nor does it mean that Flask is lacking Wrap with middleware . where they are used . SQLAlchemy or another database tool , introduce non-relational data persistence the linked method docs ) and using that subclass wherever you instantiate an the best that Python has to offer . You can implement advanced patterns in applications because changes on these thread-local objects can happen anywhere spam , links to malicious software , and the like . a new subclass of the : class : ` ~flask.Flask ` class and overriding probing for ways to fill your database with spam , links to malicious can introduce WSGI middleware to wrap your Flask instances and introduce fixes code from Flask and put it into a new module within the applications and about : ref : ` design ` . attacker figures out a way to exploit our applications . And do n't think framework gets in the way ( due to assumptions the original developers Forking . If nothing else works out you can just take the Flask Always keep security in mind when building web applications . Develop for the Web with Caution attention to security . Some of these security concerns are far more complex APIs . Flask sticks to documented APIs in upstream libraries , and documents its Flask is no different from any other framework in that you the developer must exploit our applications . And do n't think that your application is not about your needs . into your application 's code and rename it ( for example to in the same thread . In order to solve these problems we don ’ t hide the thread in that , check out the : ref : ` becomingbig ` chapter . stored in subdirectories within the application 's Python source tree . While of that , Flask has few design choices that some people might find surprising or require attention to security . Some of these security concerns conventions when getting started . By convention templates and static files are Flask extensions . Explore the many extensions in the community , and look for Continue to : ref : ` installation ` , the : ref : ` quickstart ` , or the One of the design decisions with Flask was that simple tasks should be simple ; is within Werkzeug and Jinja2 . These libraries do the majority of the work . libraries do the majority of the work . Flask is just the paste that glues authentication technologies , and more . Flask may be `` micro '' , but the templating engine to use , are easy to change . Everything else is up to you , so and nothing you do n't . ways : request context for dependency injection or when attempting to reuse code which two together . Being a microframework Flask does not do much more than One of the design decisions in Flask was that simple tasks should be simple ; they should not take a lot of code and yet they should not limit you . Because “ Micro ” does not mean that your whole web application has to fit into order to stay threadsafe . This approach is convenient , but requires a valid request in order to stay threadsafe . While this is a really easy approach and application there are ways to deal with that . Flask is just the paste that glues those together . For every project there is advanced_foreword The : ref : ` app-dispatch ` chapter shows in detail how to apply middleware . You your application as if it was implemented in Flask itself . Numerous extensions those together . For every project there is the point where the underlying the Flask design principles , head over to the section about : ref : ` design ` . and changes at the layer between your Flask application and your HTTP don ’ t have to pass objects around from function to function within a request in Your application is becoming more and more complex ? If you suddenly Flask includes many hooks to customize its behavior . Should you need more developed , it became useful to a wide audience . As you grow your codebase , Growing with Flask Threads in Flask patterns to build your own extensions if you do not find the tools you need . stored in subdirectories within the application 's Python source tree , with the expand on that . ` framework ` ) . Then you can start modifying the code in there . means Flask aims to keep the core simple but extensible . Flask wo n't make The documentation will warn you about aspects of web development that Why consider Forking ? Convention over Configuration","['docs/advanced_foreword.rst', 'docs/becomingbig.rst', 'docs/contents.rst.inc', 'docs/foreword.rst']","Revise foreword and Becoming Big docs , # 484 ."
652,b31f2d9a640c154e41de6d9631e95cf105e96e1f,2012-04-23 21:46:53-04:00,"I encourage you to use a virtualenv . Check the docs for Jinja 2.4 and Werkzeug 0.6.1 . ` pip ` or ` easy_install ` will install them for you if you do ` easy_install Flask ` . Check the docs for complete installation and usage 'Werkzeug > =0.6.1 ' , Jinja 2.4 and Werkzeug 0.7 or later . ` pip ` or ` easy_install ` will install them for you if you do ` pip install Flask ` . I encourage you to use a virtualenv . complete installation and usage instructions . 'Werkzeug > =0.7 ' , instructions .","['README', 'setup.py']","Require Werkzeug > =0.7 , # 449 ."
653,2262ce4915aec0dfffa8e71244ebe10f72d11111,2012-04-23 21:36:28-04:00,"with self.assert_no_leak ( ) : if sys.version_info > = ( 2 , 7 ) and \ for x in xrange ( 10 ) : not hasattr ( sys , 'pypy_translation_info ' ) : # This test only works on CPython 2.7 . fire ( ) fire ( ) with self.assert_no_leak ( ) : for x in xrange ( 10 ) :",['flask/testsuite/regression.py'],"Skip template leak test when not CPython2.7 , # 452 ."
654,bb31188ec3882e9a6c6035b7a65ca257d424e31a,2012-04-22 12:30:15-04:00,"# : self.build_error_handler ( error , endpoint , * * values ) raise error from werkzeug.routing import BuildError # : ` * * values ` are the arguments passed into : meth : ` url_for ` . def handle_build_error ( self , error , endpoint , * * values ) : except BuildError , error : self.build_error_handler = None app.build_error_handler = handler # : force_external=external ) values [ '_method ' ] = method Calls : meth : ` Flask.handle_build_error ` on : exc : ` ~werkzeug.routing.BuildError ` . # : Here , ` error ` is the instance of ` BuildError ` , and ` endpoint ` and return self.build_error_handler ( error , endpoint , * * values ) if self.build_error_handler is None : # : : exc : ` ~werkzeug.routing.BuildError ` , with the call signature : : return appctx.app.handle_build_error ( error , endpoint , * * values ) # : .. versionadded : : 0.9 Calls : attr : ` build_error_handler ` if it is not ` None ` . rv = url_adapter.build ( endpoint , values , method=method , values [ '_external ' ] = external self.assertRaises ( BuildError , flask.url_for , 'spam ' ) values [ '_anchor ' ] = anchor try : return '/test_handler/ ' app = flask.Flask ( __name__ ) # : If not ` None ` , this function is called when : meth : ` url_for ` raises with app.test_request_context ( ) : # Just a test . def handler ( error , endpoint , * * values ) : `` `` '' self.assert_equal ( flask.url_for ( 'spam ' ) , '/test_handler/ ' ) `` `` '' Handle : class : ` ~werkzeug.routing.BuildError ` on : meth : ` url_for ` . .. versionadded : : 0.9 def test_build_error_handler ( self ) :","['flask/app.py', 'flask/helpers.py', 'flask/testsuite/basic.py']","Add a BuildError hook to url_for , # 456 ."
655,d90f0afe39724040d0be92df054e2b1438886134,2012-04-21 18:40:02-04:00,"def return_padded_json ( ) : def return_padded_true ( ) : for url in '/kw ' , '/dict ' : for url in '/kw ' , '/dict ' , '/unpadded ' : return flask.jsonify ( d , padded=False ) def return_padded_false ( ) :",['flask/testsuite/helpers.py'],"Add test for jsonify padded=False , # 495 ."
656,2a6c80a37d8a13516499be791100312576cf34d0,2012-04-12 12:45:22-07:00,"# Some python verisons will will clean up modules so early that the # very this seems to be redundant , but if recursive imports # end this seems to be redundant , but if recursive imports # Some python versions will clean up modules so early that the # is the one from __import__ above which we do n't care about . # is the one from __import__ above which we do n't care about",['scripts/flaskext_compat.py'],Merge pull request # 489 from florentx/patch-1
657,f43003967e2139ee6d89e7dcf267ba8d52200ac6,2012-04-01 08:42:39-07:00,": class : ` ~werkzeug.exceptions.BadRequest ` which sets the 'understand . ' c = app.test_client ( ) return json.dumps ( dict ( description=self.get_description ( environ ) ) ) # : The description of the error which occurred as a string . self.assert_equal ( rv.mimetype , 'application/json ' ) self.assert_ ( ' < p > ' not in flask.json.loads ( rv.data ) [ 'description ' ] ) class JSONHTTPException ( HTTPException ) : .. versionchanged : : 0.9 The `` description `` attribute of this class must set to a string ( * not * an this method is used by : attr : ` json ` when an error ocurred . The return unicode ( flask.request.json ) error description : : from .helpers import json The : func : ` flask.Request.on_json_loading_failed ` now returns a JSON formatted self.assert_equal ( rv.status_code , 400 ) this server could not understand . '' } from werkzeug.exceptions import BadRequest `` `` '' self.assert_ ( 'description ' in flask.json.loads ( rv.data ) ) `` `` '' Represents an HTTP `` 400 Bad Request `` error whose body contains an rv = c.post ( '/json ' , data='malformed ' , content_type='application/json ' ) this method is used by : attr : ` json ` when an error ocurred . The default from .exceptions import JSONBadRequest implementation raises a : class : ` JSONBadRequest ` , which is a subclass of `` Content-Type `` to `` application/json `` and provides a JSON-formatted default implementation raises a : class : ` ~werkzeug.exceptions.BadRequest ` . application/json `` . : copyright : ( c ) 2011 by Armin Ronacher . : license : BSD , see LICENSE for more details . description = ( Return a : class : ` JSONBadRequest ` instead of a `` `` '' A base class for HTTP exceptions with `` Content-Type : `` `` '' Returns a list of headers including `` Content-Type : error message in JSON format instead of HTML format ( as in the superclass ) . `` `` '' 'The browser ( or proxy ) sent a request that this server could not ' HTML string ) which describes the error . return [ ( 'Content-Type ' , 'application/json ' ) ] app = flask.Flask ( __name__ ) def get_headers ( self , environ ) : `` `` '' Overrides : meth : ` werkzeug.exceptions.HTTPException.get_body ` to def return_json ( ) : { `` description '' : `` The browser ( or proxy ) sent a request that \ flask.exceptions ~~~~~~~~~~~~ from werkzeug.exceptions import HTTPException , BadRequest return the description of this error in JSON format instead of HTML . ) `` `` '' def get_body ( self , environ ) : # - * - coding : utf-8 - * application/json `` . class JSONBadRequest ( JSONHTTPException , BadRequest ) : raise BadRequest ( ) Flask specific additions to : class : ` ~werkzeug.exceptions.HTTPException ` def test_json_bad_requests_content_type ( self ) : raise JSONBadRequest ( ) response by default . : class : ` ~werkzeug.exceptions.BadRequest ` by default .","['CHANGES', 'flask/exceptions.py', 'flask/testsuite/helpers.py', 'flask/wrappers.py']",Merge pull request # 439 from aisipos/jsonexceptions
658,df772df24f22f7f0681a8d5b211dad764ce9c8a6,2012-04-01 11:40:37-04:00,": func : ` run_simple < werkzeug.serving.run_simple > ` : the application and the simple server , here is the `` hello world '' example with the application and the simple server , here is the `` hello world '' example with debugging and In order to use the interactive debuggger , debugging must be enabled both on run_simple ( 'localhost ' , 5000 , app , use_reloader=True , use_debugger=True , use_evalex=True ) run_simple ( 'localhost ' , 5000 , app , debugging and : func : ` run_simple < werkzeug.serving.run_simple > ` : : use_reloader=True , use_debugger=True , use_evalex=True ) In order to use the interactive debuggger , debugging must be enables both on",['docs/patterns/appdispatch.rst'],"Touch up run_simple doc , # 446 ."
659,8740fff90781b3fd0fd9ec51a0b6a15a45f96489,2012-04-01 08:37:44-07:00,"In order to use the interactive debuggger , debugging must be enables both on def hello_world ( ) : app.debug = True if __name__ == '__main__ ' : the application and the simple server , here is the `` hello world '' example with debugging and return 'Hello World ! ' from werkzeug.serving import run_simple from flask import Flask app = Flask ( __name__ ) : func : ` run_simple < werkzeug.serving.run_simple > ` : run_simple ( 'localhost ' , 5000 , app , use_reloader=True , use_debugger=True , use_evalex=True )",['docs/patterns/appdispatch.rst'],Merge pull request # 446 from jtsoi/patch-1
660,71a97662663babca96365e01bc2017f9f178c95b,2012-04-01 08:23:26-07:00,"session.setdefault ( '_flashes ' , [ ] ) .append ( ( category , message ) ) session [ '_flashes ' ] = flashes flashes = session.get ( '_flashes ' , [ ] ) flashes.append ( ( category , message ) )",['flask/helpers.py'],Merge pull request # 417 from tarruda/master
661,d626787a3461edcebd38025269f74a5428f64edb,2012-03-13 19:17:29-07:00,"Currently the Python community is in the process of improving libraries to If you are curious about the Flask design principles , head over to the section One of the design decisions with Flask was that simple tasks should be cause security problems . section about : ref : ` design ` . whether its structure is right for your needs , read the By default , Flask does not include a database abstraction layer , form you deliberately mark insecure HTML as secure , Flask and the underlying means Flask aims to keep the core simple but extensible . Flask wo n't make Unfortunately , there are many ways the security of a web application can be attacker figures out a way to exploit our applications . And do n't think And even if you are the only user that might leave data in your application , that your application is not important enough to attract an attacker . Unfortunately , there are many ways the security of a web application can be small size of the framework , but also the fact that it does not make many provide database integration , form validation , upload handling , various open internally so that you do n't have to pass objects around from function to many decisions for you , such as what database to use . Those decisions that work with them . development . If you plan on upgrading to Python 3 in the near future we To me , the `` micro '' in microframework refers not only to the simplicity and Depending on the kind of attack , chances are that automated bots are handle that . Instead , FLask extensions add such functionality to your existing applications to Python 3 . Until then , we strongly recommend For the Stalwart and Wizened ... and provide you with a lot of tools to make it as pleasant as possible to using Python 2.6 and 2.7 with activated Python 3 warnings during The main reason Flask is called a `` microframework '' is the idea partially caused by changes in the language that went unreviewed for too Threads in Flask long , partially also because we have not quite worked out how the lower locals for you but instead embrace them and provide you with a lot of tools to compromised . Flask protects you against one of the most common security are making sure that you can either configure it as much as possible by Everything else is up to you , so that Flask can be everything you need in Flask itself . As such it 's easy to adapt even for large applications partially caused by changes in the language that went unreviewed for too long , partially also because we have not quite worked out how the lower they should not take a lot of code and yet they should not limit you . Because Flask itself . As such it 's easy to adapt even for large applications and we : ref : ` advanced_foreword ` . past , and who may have more specific or esoteric concerns that the typical it does make , such as what templating engine to use , are easy to change . are far more complex than one might think , and we all sometimes underestimate Since Flask is based on a very solid foundation there is not a lot of code Depending on the kind of attack , chances are that automated bots are troubles for very large applications because changes on these thread-local wo n't make such decisions for your datastore or other parts . the likelihood that a vulnerability will be exploited - until a clever So always keep security in mind when doing web development . are far more complex than one might think , and we all sometimes underestimate The Status of Python 3 problems of modern web applications : cross-site scripting ( XSS ) . Unless the changes is found , and we will provide helpful tips how to upgrade So always keep security in mind when doing web development . Werkzeug and Flask will be ported to Python 3 as soon as a solution for many things are preconfigured . For example , by convention templates and If you write a web application , you are probably allowing users to register hard for us to switch over to Python 3 just now . These problems are you don ’ t have to pass objects around from function to function within a Jinja2 template engine have you covered . But there are many more ways to already exist that can handle that . However Flask supports stored in subdirectories within the application 's Python source tree . While really easy approach and saves you a lot of time , it might also cause some If you 're more curious about the minutiae of Flask 's implementation , and development . If you plan on upgrading to Python 3 in the near future we problems of modern web applications : cross-site scripting ( XSS ) . Unless cause security problems . has to fit into a single Python file . and leave their data on your server . The users are entrusting you with data . are interested in that , check out the : ref : ` becomingbig ` chapter . require attention to security . Some of these security concerns Currently the Python community is in the process of improving libraries to and we are making sure that you can either configure it as much as user . and nothing you do n't . data on your server . The users are entrusting you with data . And even if The Status of Python 3 authentication technologies , and more . Flask may be `` micro '' , but the Growing Up One of the design decisions with Flask was that simple tasks should be simple ; possibilities are endless . object-relational mappers , form validation , upload handling , various open software , and the like . Web Development is Dangerous in that , check out the : ref : ` becomingbig ` chapter . Jinja2 template engine have you covered . But there are many more ways to strongly recommend that you read ` How to write forwards compatible application as if it was implemented in Flask itself . Numerous extensions While this can be changed you usually do n't have to . application , you are probably allowing users to register and leave their However , to us the term “ micro ” does not mean that the whole implementation make it as pleasant as possible to work with them . Werkzeug and Flask will be ported to Python 3 as soon as a solution for was implemented in Flask itself . There are currently extensions for function within a request in order to stay threadsafe . While this is a saves you a lot of time , it might also cause some troubles for very large objects can happen anywhere in the same thread . In order to solve these applications because changes on these thread-local objects can happen anywhere about your needs . situation is greatly improving there are still some issues that make it Flask is also based on convention over configuration , which means that situation is greatly improving there are still some issues that make it ==================================== about : ref : ` design ` . subclassing things or by forking the entire codebase . If you are interested unorthodox . For example , Flask uses thread-local objects internally so that “ Micro ” does not mean that your whole web application has to fit into support the new iteration of the Python programming language . While the surprising or unorthodox . For example , Flask uses thread-local objects validation or anything else where different libraries already exist that can want that data to be stored securely . probing for ways to fill your database with spam , links to malicious Web Development is Dangerous Python code < http : //lucumr.pocoo.org/2011/1/22/forwards-compatible-python/ > ` _ . probing for ways to fill your database with spam , links to malicious Foreword for Experienced Programmers static files are stored in subdirectories within the application 's Python source tree . the changes is found , and we will provide helpful tips how to upgrade attacker figures out a way to exploit our applications . And do n't think If you are curious about the Flask design principles , head over to the level API should change to account for the Unicode differences in Python 3 . you need to spend in order to get up and running , without assuming things layer , no form validation or anything else where different libraries This chapter is for programmers who have worked with other frameworks in the support the new iteration of the Python programming language . While the you still want that data to be stored securely . to keep the core simple but extensible . There is no database abstraction are preconfigured . For example , by convention templates and static files are possible by subclassing things or by forking the entire codebase . If you request in order to stay threadsafe . While this is a really easy approach and hard for us to switch over to Python 3 just now . These problems are Since Flask is based on a very solid foundation there is not a lot of code in require attention to security . Some of these security concerns using Python 2.6 and 2.7 with activated Python 3 warnings during software , and the like . I 'm not joking . Well , maybe a little . If you write a web the likelihood that a vulnerability will be exploited - until a clever that your application is not important enough to attract an attacker . problems we do n't hide the thread locals for you but instead embrace them extensions to add such functionality to your application as if it level API should change to account for the Unicode differences in Python 3 . you are the only user that might leave data in your application , you still in the same thread . In order to solve these problems we don ’ t hide the thread of that we made a few design choices that some people might find surprising or The documentation will warn you about aspects of web development that simple ; they should not take a lot of code and yet they should not limit you . a single Python file ( although it certainly can ) . Nor does it mean Flask is based on convention over configuration , which means that many things this can be changed you usually do n't have to . We want to minimize the time Because of that we made a few design choices that some people might find existing applications to Python 3 . Until then , we strongly recommend decisions for you . While Flask does pick a templating engine for you , we that Flask is lacking in functionality . The `` micro '' in microframework strongly recommend that you read ` How to write forwards compatible you deliberately mark insecure HTML as secure , Flask and the underlying compromised . Flask protects you against one of the most common security Convention over Configuration The documentation will warn you about aspects of web development that authentication technologies and more . Python code < http : //lucumr.pocoo.org/2011/1/22/forwards-compatible-python/ > ` _ .","['docs/advanced_foreword.rst', 'docs/foreword.rst']",Merge pull request # 438 from garbados/improve_foreword
662,a5d1cf415e142c2926845601257d3d6c05cb3ded,2012-03-13 17:00:18-07:00,"we will use the class-based approach because it will provide users with a ctx.sqlite3_db.close ( ) ` teardown_request ` handlers . Our extension could add an ` init_app ` function as follows : : self.app.before_request ( self.before_request ) Additionally , the `` init_app `` method is used to support the factory pattern self.init_app ( self.app ) The user could then initialize the extension in one file : : In the example above , before every request , a `` sqlite3_db `` variable is assigned Using _request_ctx_stack self.app.teardown_request ( self.teardown_request ) self.app = app def teardown_request ( self , exception ) : 1 . The `` __init__ `` method takes an optional app object and , if supplied , will manager = SQLite3 ( ) SQLite . cur = db.connection.cursor ( ) self.app = app using the `` connection `` property of `` SQLite3 `` . During the teardown of a configuration for the database , defaulting to an in memory database if 5 . Finally , we add a ` get_db ` function that simplifies access to the context 's def get_db ( self ) : self.app = None self.app.config.setdefault ( 'SQLITE3_DATABASE ' , ' : memory : ' ) Adding an ` init_app ` Function # Then later on . Opening a database connection from outside a view function is simple . app = create_app ( 'the-config.cfg ' ) consider your application is currently connecting to SQLite like the Keep in mind that supporting this factory pattern for creating apps is required functions and before / after request handlers . So how does the extension `` before_request `` and `` teardown_request `` handlers . db = Sqlite3 ( ) we will use the class-based approach because it will provide users with an def before_request ( self ) : and bind their app to the extension in another file : : 3 . Next , we define a `` connect `` method that opens a database connection . > > > from yourapplication import db self.app = app ` _request_ctx_stack.top ` . Extensions should use the top context and not the if app is not None : circular import problems when a user is breaking their app into multiple files . documentation suggests ( : ref : ` sqlite3 ` ) you will need to provide a few extension and provide an app object after the fact . This can help avoid factory pattern for creating applications . The `` init_app `` will set the if app is not None : call `` init_app `` . ctx = _request_ctx_stack.top from __future__ import absolute_import manager object that handles opening and closing database connections . Otherwise we could not call our module ` sqlite3.py ` and import the return sqlite3.connect ( app.config [ 'SQLITE3_DATABASE ' ] ) 1 . The `` __future__ `` import is necessary to activate absolute imports . 5 . Finally , we add a `` connection `` property that simplifies access to the context 's instantiated without requiring an app object . This method supports the request , the `` sqlite3_db `` connection is closed . By using this pattern , the def connect ( self ) : ( : meth : ` dict.setdefault ` ) , and attaches ` before_request ` and top-level ` sqlite3 ` module which actually implements the connection to consider an application that 's currently connecting to SQLite like the def __init__ ( self , app=None ) : 2 . We create a class for our extension that requires a supplied ` app ` object , else : def __init__ ( self , app ) : for the duration of the request . ` g ` object to store things like database connections . db = manager.get_db ( ) `` g `` object to store things like database connections . def __init__ ( self , app=None ) : 3 . Next , we define a ` connect ` function that opens a database connection . def init_app ( self , app ) : def init_app ( self , app ) : db.init_app ( app ) manager.init_app ( app ) object that handles opening and closing database connections . ctx.sqlite3_db = self.connect ( ) self.init_app ( self.app ) documentation suggests ( : ref : ` sqlite3 ` ) . So how does the extension else : for creating apps : : def connection ( self ) : In practice , you 'll almost always want to permit users to initialize your self.app = None return ctx.sqlite3_db cur = db.cursor ( ) > > > cur.execute ( ... ) to `` _request_ctx_stack.top `` . In a view function , this variable is accessible no configuration is supplied . In addition , the `` init_app `` method attaches manager = SQLite3 ( app ) if ctx is not None : 2 . The `` init_app `` method exists so that the `` SQLite3 `` object can be db = SQLite3 ( app ) `` _request_ctx_stack.top `` . Extensions should use the top context and not the class SQLite3 ( object ) : sets a configuration for the database if it 's not there for approved flask extensions ( described below ) . > > > cur = db.cursor ( ) * same * connection to the sqlite3 database is accessible to anything that needs it",['docs/extensiondev.rst'],Merge pull request # 440 from jamesls/extension-docs
663,d94efc6db63516b7f72e58c34ae33700f3d9c4fb,2012-03-13 16:34:16-07:00,".. versionaded : : 0.9 hooks . Defaults to 43200 ( 12 hours ) . * * self.get_send_file_options ( filename ) ) try : : meth : ` flask.Flask.send_static_file ` based on keywords in : class : ` flask.Flask ` now provides a ` get_send_file_options ` hook for example allows changing cache controls by file extension . The default : class : ` flask.Flask ` now provides a ` get_static_file_options ` hook for from werkzeug.http import parse_cache_control_header def get_send_file_options ( self , filename ) : * * self.get_static_file_options ( filename ) ) # default cache timeout is 12 hours # override get_send_file_options with some new values and check them def get_static_file_options ( self , filename ) : : meth : ` flask.Blueprint.get_send_file_options ` def get_static_file_options ( self , filename ) : def get_static_file_options ( self , filename ) : max_age_default = app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] cache_timeout . `` SEND_FILE_MAX_AGE_DEFAULT `` configuration variable , regardless of whether # Override : Hooks in SEND_FILE_MAX_AGE_DEFAULT config . options [ 'cache_timeout ' ] = self.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] options = super ( MyFlask , self ) .get_send_file_options ( filename ) `` SEND_FILE_MAX_AGE_DEFAULT `` : Default cache control max age to use with self.assert_equal ( cc.max_age , expected_max_age ) return options subclasses to override behavior of serving static files from Flask when using : meth : ` flask.Flask.get_send_file_options ` and finally : # override get_static_file_options with some new values and check them .. versionadded : : 0.9 options = super ( Flask , self ) .get_send_file_options ( filename ) seconds . Override this value on a per-file self.assert_equal ( cc.max_age , 3600 ) options = super ( MyFlask , self ) .get_static_file_options ( filename ) max-age for ` send_static_file ` can be configured through a new subclasses to override behavior of serving static files through Flask , cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) # default cache timeout is 12 hours ( hard-coded ) file extension . expected_max_age = 3600 app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = 3600 `` SEND_FILE_MAX_AGE_DEFAULT `` configuration variable to set the default : func : ` flask.helpers.send_file ` . This hook is provided a filename , which for app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = max_age_default rv = app.send_static_file ( 'index.html ' ) with app.test_request_context ( ) : def get_send_file_options ( self , filename ) : 'SEND_FILE_MAX_AGE_DEFAULT ' : 12 * 60 * 60 , # 12 hours rv = c.get ( '/admin/static/css/test.css ' ) optionally by filename , which for example allows changing cache controls by # try/finally , in case other tests use this app for Blueprint tests . if app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] == expected_max_age : app.config [ 'SEND_FILE_MAX_AGE_DEFAULT ' ] = expected_max_age def get_send_file_options ( self , filename ) : basis using the opts = super ( StaticFileApp , self ) .get_static_file_options ( filename ) : meth : ` flask.Flask.send_static_file ` , in the ` get_send_file_options ` hook is used . opts = super ( StaticFileApp , self ) .get_send_file_options ( filename ) Note ` get_send_file_options ` in : class : ` flask.Flask ` hooks the expected_max_age = 7200","['CHANGES', 'docs/config.rst', 'flask/app.py', 'flask/helpers.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/helpers.py']","Expose send_file max-age as config value , # 433 ."
664,146088d58066f16ef4bc8172f8120402517c34d3,2012-03-13 14:37:48-07:00,"subclasses to override behavior of serving static files through Flask , app = StaticFileApp ( ) : class : ` flask.Flask ` now provides a ` get_static_file_options ` hook for options = super ( MyFlask , self ) .get_static_file_options ( filename ) `` `` '' Function used internally to determine what keyword arguments to send to : func : ` send_from_directory ` for a specific file . '' '' '' if filename.lower ( ) .endswith ( '.js ' ) : on the filename . For example , to set the cache timeout for .js files to 60 seconds ( note the options are keywords for : func : ` send_file ` ) : : options [ 'conditional ' ] = True return options .. versionaded : : 0.9 def get_static_file_options ( self , filename ) : optionally by filename , which for example allows changing cache controls by options [ 'cache_timeout ' ] = 60 def __init__ ( self ) : `` `` '' This allows subclasses to change the behavior when sending files based class MyFlask ( flask.Flask ) : `` `` '' Provides keyword arguments to send to : func : ` send_from_directory ` . file extension . app = StaticFileApp ( __name__ ) super ( StaticFileApp , self ) .__init__ ( __name__ )","['CHANGES', 'flask/helpers.py', 'flask/testsuite/helpers.py']","Expand docs on send_file option hook , # 433 ."
665,f4a31db9f6a9b8bdfeb023f247eb6e8a42af3162,2012-03-13 13:59:31-07:00,"`` `` '' Function used internally to determine what keyword arguments def get_static_file_options ( self , filename ) : # default cache timeout is 12 hours ( hard-coded ) return send_file ( filename , * * options ) from werkzeug.http import parse_cache_control_header , parse_options_header super ( StaticFileApp , self ) .__init__ ( __name__ ) # this test catches explicit inclusion of the conditional # keyword arg in the guts def get_static_file_options ( self , filename ) : # override get_static_file_options with some new values and check them * * self.get_static_file_options ( filename ) ) return send_file ( filename , conditional=True , * * options ) def test_static_file ( self ) : self.assert_equal ( cc.max_age , 12 * 60 * 60 ) def __init__ ( self ) : opts [ 'cache_timeout ' ] = 10 from werkzeug.http import parse_options_header opts = super ( StaticFileApp , self ) .get_static_file_options ( filename ) to send to : func : ` send_from_directory ` for a specific file . '' '' '' options.setdefault ( 'conditional ' , True ) return opts class StaticFileApp ( flask.Flask ) : return { } app = flask.Flask ( __name__ ) cc = parse_cache_control_header ( rv.headers [ 'Cache-Control ' ] ) opts [ 'conditional ' ] = True rv = app.send_static_file ( 'index.html ' ) with app.test_request_context ( ) : app = StaticFileApp ( ) return send_from_directory ( self.static_folder , filename ) return send_from_directory ( self.static_folder , filename , self.assert_equal ( cc.max_age , 10 )","['flask/helpers.py', 'flask/testsuite/helpers.py']",Merge pull request # 433 from dave-shawley/master
666,f7bb2b5f19146cbaed375f29520f57c3c385762f,2012-03-13 13:51:53-07:00,"flask.Response ( `` , headers= { 'Content-Type ' : 'text/html ' } ) , self.assertEqual ( rv.data , ' { \n `` msg '' : `` W00t '' \n } ' ) # mimetype=None , content_type=None , ... return new_response View functions can now return a tuple with the first instance being an # tuple contains header information so the def test_make_response_with_response_instance ( self ) : flask.Response ( `` , mimetype='application/json ' ) , # so if there 's at least 3 elements the rv 400 , { 'Content-Type ' : 'text/html ' } ) # The args for the response class are return self.response_class ( * rv ) `` jsonify ( error= '' error msg '' ) , 400 `` from a view function . new_response = self.response_class ( `` , * rv [ 1 : ] ) else : self.assertEqual ( rv.data , `` ) if len ( rv ) < 3 : self.assertEqual ( rv.mimetype , 'application/json ' ) new_response.response = original.response rv = flask.make_response ( flask.jsonify ( { 'msg ' : 'W00t ' } ) , 400 ) self.assertEqual ( rv.status_code , 400 ) if len ( rv ) > 0 and isinstance ( rv [ 0 ] , self.response_class ) : original = rv [ 0 ] app = flask.Flask ( __name__ ) flask.Response ( `` ) , 400 ) self.assertEqual ( rv.mimetype , 'text/html ' ) self.assertEqual ( rv.headers [ 'Content-Type ' ] , 'text/html ' ) return self.response_class ( * rv ) new_response.headers = original.headers instance of : class : ` flask.Response ` . This allows for returning # response=None , status=None , headers=None , with app.test_request_context ( ) : 400 , None , 'application/json ' ) self.assertEqual ( rv.headers [ 'Content-Type ' ] , 'application/json ' ) # headers from rv [ 0 ] `` win . ''","['CHANGES', 'flask/app.py', 'flask/testsuite/basic.py']",Merge pull request # 430 from jamesls/issue140
667,1d1db80e062bb576cd542a7a3ca990360c5b57ba,2012-03-13 11:47:04-07:00,": envvar : ` FLASKR_SETTINGS ` to specify a config file to be loaded which will debug flag enables or disables the interactive debugger . Never leave Usually , it is a good idea to load a configuration from a configurable debug mode activated in a production system because it will allow users to then override the default values . The silent switch just tells Flask to debug mode activated in a production system * , because it will allow users to config from the same file , in ` flaskr.py ` : : not complain if no such environment key is set . applications for free . ` Check out their tutorial on how to deploy Flask apps on override the default values . The silent switch just tells Flask to not complain In ` flaskr.py ` : : ` Sharing your Localhost Server with Localtunnel < http : //flask.pocoo.org/snippets/89/ > ` _ : : : meth : ` ~flask.Config.from_object ` line above : : if no such environment key is set . file . This is what : meth : ` ~flask.Config.from_envvar ` can do , replacing the easy for you to do so . ` Deploying Flask on ep.io < https : //www.ep.io/docs/quickstart/flask/ > ` _ It is also a good idea to be able to load a configuration from a < http : //www.heroku.com > ` _ is very easy to set up and will run small Flask ` Deploying Flask on Google App Engine < https : //github.com/kamalgill/flask-appengine-template > ` _ Deploying to a Web Server config from the same file : : ` Deploying Flask on Webfaction < http : //flask.pocoo.org/snippets/65/ > ` _ do : : : envvar : ` FLASKR_SETTINGS ` to specify a config file to be loaded which will then their service < http : //devcenter.heroku.com/articles/python > ` _ . If you want to make your Flask app available to the Internet at large , ` Heroku There are a number of other websites that will host your Flask app and make it configurable file . This is what : meth : ` ~flask.Config.from_envvar ` can debug flag enables or disables the interactive debugger . * Never leave","['docs/quickstart.rst', 'docs/tutorial/setup.rst']",Merge pull request # 427 from kevinburke/fix-existing-tutorial
668,4e9b7867c989a1d1b0c03ddb2ea62d689b6abab1,2012-03-13 11:43:13-07:00,though were are interacting with it through a Python shell . Have a look at the Flask 's URL rules are based on Werkzeug 's routing module . The idea behind though we are interacting with it through a Python shell . Have a look at the that module is to ensure beautiful and unique also unique URLs based on behind that module is to ensure beautiful and unique URLs based on Flask 's URL rules are based on Werkzeug 's routing module . The idea,['docs/quickstart.rst'],Merge pull request # 411 from PaulMcMillan/docs_fix
669,09370c3f1c808e9251292bc228b6bef4b1223e93,2012-03-12 15:26:05-04:00,"for JSONP calls and the response mimetype will be changed to and `` jsonp `` will be used as the name for the callback function . If the `` padded `` argument is a string , jsonify will look for from the request argument `` callback `` or `` jsonp `` . If the argument `` padded `` a string jsonify will look for the function name in the If the `` padded `` argument is true , the JSON object will be padded This will work with jQuery and most other JavaScript libraries to `` text/javascript `` . the request argument with the same name and use that value as the no function name it will fallback and use `` jsonp `` as function name . JSONP calls like from jquery . The response mimetype will also change The json object will pad as javascript function with the function name callback-function name . If the argument `` padded `` true than the json object will pad for by default . request argument with the name which is equal to `` padded `` . Is there `` text/javascript `` . By default , the request arguments `` callback ``",['flask/helpers.py'],Clean up docs and review pull request # 384
670,561775cbf677f72d6d8d505af79c114bc750b6b7,2012-03-12 11:33:42-07:00,"dependencies for tests alone can be specified in the ` setup.py ` are installed automatically . If tests are invoked with `` python setup.py test `` , test dependencies can be specified in the ` setup.py ` file . The are installed automatically , in case of `` python setup.py test `` file . The test suite also has to be part of the distribution . test suite also has to be part of the distribution .",['docs/extensiondev.rst'],Merge pull request # 435 from mattd/master
671,8d7ca29a3554d20324ed9c75d9c095dfa8a8c439,2012-03-01 08:53:58-05:00,"self.fail ( 'expected IOError ' ) self.assert_ ( 0 , 'expected config ' ) self.assertFalse ( app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) ) self.assert_ ( not app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) )",['flask/testsuite/config.py'],Cleaned up test case for issue # 414 .
672,69e7a0a2a0391ed1bdd102deffbd98137790f959,2012-02-03 18:11:14-05:00,"# Disable Flask 's debugger if external debugger is requested Debugging Application Errors have shell access to your host , verify that you can run your application try : your production host , which is helpful in catching configuration issues , but * `` use_debugger `` - whether to use the internal Flask debugger if app.debug : use_debugger = True DEBUG_WITH_APTANA : True full-featured Python debugger . `` debug `` must be True ( i.e. , exceptions must be caught ) in order for the other Debuggers interfere with each other . except : of the box ( see : ref : ` debug-mode ` ) . If you would like to use another Python If you 're using Aptana/Eclipse for debugging you 'll need to set both if __name__ == `` __main__ '' : When in Doubt , Run Manually config.yaml ( change the block as approriate for your application , of course ) : : `` debug `` must be True ( i.e. , exceptions must be caught ) in order for the two options to have any value . production with ` debug=True ` . Then in your application 's entry-point ( main.py ) , you could have something like : : ============================ If you 're using Aptana/Eclipse for debugging you 'll need to set both pointers when debugging deployment configuration and digging deeper with a app.run ( use_debugger=use_debugger , debug=app.debug , use_reloader=use_debugger , host= ' 0.0.0.0 ' ) That said , you may still wish to use the debugger in a tool of your choice . pass Working with Debuggers if app.debug : use_debugger = True Have another debugger in mind ? See : ref : ` working-with-debuggers ` . Then in your application 's entry-point ( main.py ) , you could have something like : : Logging Application Errors debugger , note that debuggers interfere with each other . You have to set some Flask provides the following options to manage the debug process : app = create_app ( config= '' config.yaml '' ) A possible useful pattern for configuration is to set the following in your =========================== DEBUG : True notifications as described in : ref : ` application-errors ` . This section provides the same user account as the configured deployment to troubleshoot permission .. _debug-mode : options in order to use your favorite debugger : ========================== Handling Application Errors pass DEBUG : True if __name__ == `` __main__ '' : `` use_debugger `` and `` use_reloader `` to False . except : To dig deeper , possibly to trace code execution , Flask provides a debugger out * `` use_reloader `` - whether to reload and fork the process on exception * `` use_reloader `` - whether to reload and fork the process on exception * * be sure to do this temporarily in a controlled environment . * * Do not run in Having problems getting your application configured for production ? If you # To allow aptana to receive errors , set use_debugger=False app = create_app ( config= '' config.yaml '' ) * `` debug `` - whether to enable debug mode and catch exceptinos For production applications , configure your application with logging and manually from the shell in the deployment environment . Be sure to run under use_debugger = not ( app.config.get ( 'DEBUG_WITH_APTANA ' ) ) .. admonition : : Working With Other Debuggers .. _working-with-debuggers : A possible useful pattern for configuration is to set the following in your * `` debug `` - whether to enable debug mode and catch exceptinos * `` use_debugger `` - whether to use the internal Flask debugger issues . You can use Flask 's builtin development server with ` debug=True ` on other two options to have any value . config.yaml ( change the block as approriate for your application , of course ) : : use_reloader=use_debugger , host= ' 0.0.0.0 ' ) try : app.run ( use_debugger=use_debugger , debug=app.debug , DEBUG_WITH_APTANA : True # To allow aptana to receive errors , set use_debugger=False `` use_debugger `` and `` use_reloader `` to False . FLASK : FLASK : # Disable Flask 's debugger if external debugger is requested use_debugger = not ( app.config.get ( 'DEBUG_WITH_APTANA ' ) )","['docs/errorhandling.rst', 'docs/quickstart.rst']","Move debugger details into a new section , # 343 ."
673,7ba5196ba6230feede5afc24d7eff4fd15742397,2012-01-31 07:05:03-08:00,enough to explain the basic principle . When you have a class based view # : The canonical way to decorate class based views is to decorate the we will use the class-based approach because it will provide users with a # first of all it allows us to easily figure out what class-based we will use the class based approach because it will provide users with a Class-Based Views you might want more flexibility . This is where pluggable class-based Implemented generic : ref : ` views ` ( class-based views ) . This module provides class based views inspired by the ones in Django . `` `` '' Like a regular class-based view but that dispatches requests to you might want more flexibility . This is where pluggable class based `` `` '' Like a regular class based view but that dispatches requests to enough to explain the basic principle . When you have a class-based view Implemented generic : ref : ` views ` ( class based views ) . This module provides class-based views inspired by the ones in Django . So why did we decide on a class based approach here ? Because using our pluggable ( class-based ) views . pluggable ( class based ) views . # : The canonical way to decorate class-based views is to decorate the So why did we decide on a class-based approach here ? Because using our Class Based Views # first of all it allows us to easily figure out what class based,"['CHANGES', 'docs/api.rst', 'docs/extensiondev.rst', 'docs/views.rst', 'flask/views.py']",Merge pull request # 392 from FND/docs
674,92dbe3153a9e0c007ecd1987ccd5f3d796c901af,2012-01-24 18:00:44-05:00,< li > < a href= '' http : //flask.pocoo.org/docs/flask-docs.epub '' > as ePub < /a > $ ( MAKE ) -C docs html dirhtml latex epub $ ( MAKE ) -C docs html dirhtml latex rsync -a docs/_build/epub/Flask.epub pocoo.org : /var/www/flask.pocoo.org/docs/flask-docs.epub,"['Makefile', 'docs/_templates/sidebarintro.html']","Export .epub with docs , # 388 ."
675,fbbe14791f2d417bfa57618eecaa503b69f459ac,2012-01-23 11:51:15-08:00,"a function and you can call that function to instantiate it , that is a function and you can call that function to instanciate it , that is the parameters from the URL rule . The class itself is instanciated with the parameters from the URL rule . The class itself is instantiated with with the routing system . Internally this generates a function on the on each request and call the : meth : ` dispatch_request ` method on it . # view this thing came from , secondly it 's also used for instantiating # view this thing came from , secondly it 's also used for instanciating `` `` '' Converts the class into an actual view function that can be used `` `` '' Converts the class into an actual view function that can be used with the routing system . What it does internally is generating a function on the fly that will instanciate the : class : ` View ` the : meth : ` dispatch_request ` method on it . fly which will instantiate the : class : ` View ` on each request and call","['docs/patterns/appdispatch.rst', 'docs/views.rst', 'flask/views.py']",Merge pull request # 387 from FND/docs
676,b786eac5574e478d51314333fb6309456bff7b76,2012-01-18 18:57:05-05:00,"sys.prefix = real_prefix 'installed_package-instance ' ) ) old_get_loader = pkgutil.get_loader del sys.modules [ 'installed_package ' ] nor the ` archive ` attribute . pkgutil.get_loader = get_loader pkgutil.get_loader = old_get_loader 'site_package-instance ' ) ) site_packages = os.path.join ( expected_prefix , 'lib ' , 'python2.5 ' , 'site-packages ' ) import pkgutil finally : def test_installed_package_paths_with_limited_loader ( self ) : def test_installed_module_paths_with_limited_loader ( self ) : finally : import site_app self.assert_equal ( site_package.app.instance_path , sys.path.remove ( installed_path ) class LimitedLoaderMockWrapper ( object ) : sys.path.remove ( site_packages ) if 'site_app ' in sys.modules : yield del sys.modules [ 'site_package ' ] if name in ( 'archive ' , 'get_filename ' ) : Engine 's HardenedModulesHook , which have neither the ` get_filename ` method return wrapper_class ( old_get_loader ( * args , * * kwargs ) ) self.assert_equal ( installed_package.app.instance_path , os.path.join ( expected_prefix , 'var ' , def __init__ ( self , loader ) : with patch_pkgutil_get_loader ( ) : from contextlib import contextmanager try : del sys.modules [ 'site_app ' ] try : self.assert_equal ( site_app.app.instance_path , def patch_pkgutil_get_loader ( wrapper_class=LimitedLoaderMockWrapper ) : self.loader = loader `` `` '' real_prefix , sys.prefix = sys.prefix , expected_prefix def test_prefix_package_paths_with_limited_loader ( self ) : def __getattr__ ( self , name ) : here = os.path.abspath ( os.path.dirname ( __file__ ) ) def get_loader ( * args , * * kwargs ) : This provides for tests where a system has custom loaders , e.g . Google App expected_prefix = os.path.join ( here , 'test_apps ' ) import installed_package msg = 'Mocking a loader which does not have ` % s. ` ' % name sys.path.append ( installed_path ) raise AttributeError , msg if 'installed_package ' in sys.modules : `` `` '' Patch pkgutil.get_loader to give loader without get_filename or archive . import site_package from __future__ import with_statement installed_path = os.path.join ( expected_prefix , 'path ' ) 'site_app-instance ' ) ) return getattr ( self.loader , name ) sys.path.append ( site_packages ) if 'site_package ' in sys.modules :",['flask/testsuite/config.py'],"Add test for limited imp loaders , # 380 ."
677,56177bcbd16f9e73252d7af7c78d25dc60ed946d,2012-01-17 19:43:11-05:00,"app.testing = True the only indication of an AssertionError or other exception will be a exceptions to propagate to the test client . Otherwise , the exception application code , you must set `` app.testing = True `` in order for the 500 status code response to the test client . See the : attr : ` testing ` client = app.test_client ( ) attribute . For example : : will be handled by the application ( not visible to the test client ) and Note that if you are testing for assertions or exceptions in your",['flask/app.py'],"Document app.testing=True for test client , # 381 ."
678,1f20a11284e3e9bcfc08939c48e3ab590da7c7a4,2012-01-16 09:23:40-05:00,"# Fall back to imports . elif hasattr ( loader , 'archive ' ) : __import__ ( import_name ) filename = sys.modules [ import_name ] .__file__ else : else : # At least one loader is missing both get_filename and archive : # # Google App Engine 's HardenedModulesHook",['flask/helpers.py'],"Fall back to imports w/exotic pkg loaders , # 380 ."
679,f64098c784f93db9a60d7576cd4fefab8000dc97,2012-01-04 15:05:16-08:00,"However , to us the term “ micro ” does not mean that the whole implementation the URLs , which is especially handy for applications that are used from information about how to do that . Once you have it installed , run the stored and only stored once . This is how HTML forms usually will stay unique which helps search engines not indexing the same page simple and not take up a lot of code and yet not limit yourself . Because behind that module is to ensure nice looking and also unique URLs based the application 's module . If you are using a single module ( as in this example ) This is possible as well , but I do not recommend it . Just run will notice that code that depends on a request object will suddenly break what URL should trigger our function . long , partially also because we have not quite worked out how the lower extensions that can add this functionality into your application as if it you enable debug support the server will reload itself on code changes , you should use ` __name__ ` because depending on if it 's started as many things are preconfigured . For example , by convention , templates and webserver decides to spawn a new thread ( or something else , the So how do you get all that on your computer quickly ? There are many ways If you run the server you will notice that the server is only accessible available . Besides the request object there is also a second object called ` easy_install ` with root rights : : are handled as the ` HTTP RFC ` _ ( the document describing the HTTP might be asking why this is useful , but there are some good reasons Have a look at the explanation below . : ref : ` context-locals ` ) . ` easy_install ` with root privileges : : not using the template engine ( as in this example ) . stored and only stored once . This is how HTML forms are usually ( Run it in an Admin shell on Windows systems and without ` sudo ` . ) small size of the framework , but also the fact that it does not make many are handled like the ` HTTP RFC ` _ ( the document describing the HTTP System-Wide Installation on behaviour Apache and earlier servers coined . long , partially also because we have not quite worked out how the lower ( Run it in an Admin shell on Windows systems and without ` sudo ` ) . 4 . If neither of that works , Flask will assume the return value is a does not work in your shell , try replacing the dot with `` source `` ) object relational mappers , form validation , upload handling , various open underlying object is capable of dealing with other concurrency systems not using the template engine ( like in this example ) . arbitrary Python code on your computer . If you have ` debug ` disabled like this : : web server decides to spawn a new thread ( or something else , the as well automatically . Dynamic web applications need static files as well . That 's usually where malformed . This might be caused by a user tampering with the data , or the side code that sends an HTTP request to the server but it 's obviously Eager to get started ? This page gives a good introduction in how to get unit testing is to use the : meth : ` ~flask.Flask.test_request_context ` change to your code . That is not very nice and Flask can do better . If To generate URLs that part of the URL , use the special `` 'static ' `` URL The problem with random is that it 's hard to judge what random is . And If you have ` debug ` disabled or trust the users on your network , you can might be asking why is this useful , but there are some good reasons If you run the server you will notice that the server is only available already exist that can handle that . However Flask supports does not work in your shell , try replacing the dot with `` source `` . ) than threads as well ) . When Flask starts its internal request handling it In addition to the request object there is also a second object called extensions to add such functionality to your application as if it and it will also provide you with a helpful debugger if things go wrong . Because of that we made a few design choices that some people might find this is the case unless you are doing something like unittesting . You which this section will explain , but the most kick-ass method is which URL should trigger our function . application is a module , that folder is next to that module , if it 's a to do it this way . Consider that the connection is lost during change you do to code . That is not very nice and Flask can do better . If than threads ) . When Flask starts its internal request handling it : class : ` ~flask.session ` which allows you to store information specific to a Just change the call of the : meth : ` ~flask.Flask.run ` method to look small size of the framework , but also the fact that it does not make much client code failing . Most of the time it 's okay to reply with `` 400 Bad the URLs which is especially handy for applications that are used from template to expose the message . on this technique , have a look at the : class : ` ~flask.Flask ` documentation . to do it this way . Consider that the connection gets lost during possible to record a message at the end of a request and access it on the next So how do you get all that on your computer quickly ? There are many ways , Or pass it to ` run ` : : Dynamic web applications also need static files . That 's usually where as this section will explain , but the most kick-ass method is you enable the debug support the server will reload itself on code changes The here mentioned : func : ` ~flask.escape ` does escaping for you if you are method . All you have to do is provide the name of the template and the will be a 404 error . 4 . If none of that works , Flask will assume the return value is a on the `` Environment variables '' button and double click on the `` Path '' object-relational mappers , form validation , upload handling , various open level API should change for the unicode differences in Python3 . information on how to do that . Once you have it installed , run the The main reason Flask is called a `` microframework '' is the idea code that sends an HTTP request to the server but it 's obviously specification . Likewise as of Flask 0.6 , ` OPTIONS ` is implemented for you of that we took a few design choices that some people might find on the `` Environment variables '' button and double-click on the `` Path '' the likelihood that a vulnerability will be exploited , until a clever Eager to get started ? This page gives a good introduction on how to get valid WSGI application and converts that into a response object . The main reason however why Flask is called a `` microframework '' is the idea many things are preconfigured . For example , by convention templates and Have a look at the explanation below : : ref : ` context-locals ` . ) While this can be changed you usually do n't have to . template that does this . automatically as well . Automatic escaping is enabled , so if ` name ` contains HTML it will be escaped will result in a 404 error . will notice that code which depends on a request object will suddenly break level API should change to account for the Unicode differences in Python 3 . malformed . This might be caused by a user tempering with the data , or the transmitting data to the server . To generate URLs to that part of the URL , use the special `` 'static ' `` URL the application 's module . If you are using a single module ( like here ) application is a module , this folder is next to that module , if it 's a It does that in an intelligent way so that one application can invoke another valid WSGI application and convert that into a response object . This is possible as well , though I do not recommend it . Just run on that , have a look at the : class : ` ~flask.Flask ` documentation . simple ; they should not take a lot of code and yet they should not limit you . method . All you have to do is to provide the name of the template and the this is the case unless you are doing something like unit testing . You specification . Likewise , as of Flask 0.6 , ` OPTIONS ` is implemented for you static files are stored in subdirectories within the application 's Python source tree . static files are in subdirectories within the Python source tree of the application . While this can be changed you usually do n't have to . : meth : ` ~flask.Flask.run ` method to look like this : : Automatic escaping is enabled , so if name contains HTML it will be escaped transmit data to the server . System Wide Installation or trust the users on your network , you can make the server publicly the likelihood that a vulnerability will be exploited - until a clever you should use ` __name__ ` because depending on whether it 's started as will stay unique which ensures search engines do not index the same page behind that module is to ensure nice-looking and also unique URLs based ( and only the next ) request . This is usually combined with a layout should be correct , but actually is not . For example you may have some client-side should be correct , but actually is not . For example you may have some client : class : ` ~flask.session ` that allows you to store information specific to a client code failing . Most of the time , it 's okay to reply with `` 400 Bad For us however the term “ micro ” does not mean that the whole implementation Or pass it to run : : request and only next request . This is usually combined with a layout It does that in an intelligent way that one application can invoke another However , in the second case the URL is defined without a slash so it The problem with random is that it 's hard to judge what is truly random . And arbitrary Python code on your computer . make the server publicly available simply by changing the call of the The : func : ` ~flask.escape ` mentioned here does escaping for you if you are already exist that can handle that . However Flask knows the concept of manages to still be threadsafe . The answer are context locals : However in the second case the URL is defined without a slash so it unittesting is by using the : meth : ` ~flask.Flask.test_request_context ` safe HTML ( because for example it came from a module that converts wiki underlying object is capable of dealing with concurrency systems other manages to still be threadsafe . The answer is context locals : and also provide you with a helpful debugger if things go wrong . on behaviour coined by Apache and earlier servers . possible to record a message at the end of a request and access it next safe HTML ( for example because it came from a module that converts wiki","['docs/foreword.rst', 'docs/installation.rst', 'docs/quickstart.rst']",Merge pull request # 369 from FND/docs
680,065afe53a6f72e42428c4373ed10d082868f25d6,2011-12-27 19:08:44+01:00,return 'User % s ' % username pass pass return 'The about page ' return 'The project page ' return 'Post % d ' % post_id,['docs/quickstart.rst'],Improved doc exaples . This fixes # 370 and # 371 .
681,8ae6ced82db441d0696ebfbf2e33e720be1008fd,2011-11-20 08:00:14-08:00,"app.add_url_rule ( url , view_func=view_func , methods= [ 'POST ' , ] ) view_func=user_view , methods= [ 'GET ' , ] ) app.add_url_rule ( '/users/ ' , view_func=user_view , methods= [ 'POST ' , ] ) view_func=view_func , methods= [ 'GET ' , 'POST ' ] ) view_func=user_view , methods= [ 'GET ' , 'POST ' ] ) app.add_url_rule ( ' % s < % s : % s > ' % ( url , pk ) , view_func=view_func , view_func=view_func , methods= [ 'GET ' , ] ) app.add_url_rule ( ' % s < % s : % s > ' % ( url , pk , pk_type ) , view_func=view_func ,",['docs/views.rst'],Merge pull request # 345 from jimrollenhagen/master
682,d628df6ab6c57b34acfb412e135d0d095636c539,2011-11-20 16:54:40+01:00,"return repr ( flask.session.get ( 'foo ' ) ) c = app.test_client ( ) def test_session_stored_last ( self ) : self.save_session ( ctx.session , response ) app.testing = True self.assert_equal ( c.get ( '/ ' ) .data , 'None ' ) self.save_session ( ctx.session , response ) Session is now stored after callbacks so that if the session payload is stored in the session you can still modify it in an after def dump_session_contents ( ) : app = flask.Flask ( __name__ ) if not self.session_interface.is_null_session ( ctx.session ) : self.assert_equal ( c.get ( '/ ' ) .data , '42 ' ) app.secret_key = 'development-key ' if not self.session_interface.is_null_session ( ctx.session ) : request callback . flask.session [ 'foo ' ] = 42 return response def modify_session ( response ) :","['CHANGES', 'flask/app.py', 'flask/testsuite/basic.py']",Store session after callbacks . This fixes # 351
683,51e4a58a85bc1500d1400ba7d633d570f6296745,2011-11-05 09:02:05-04:00,"app.add_url_rule ( url , view_func=view_func , methods= [ 'POST ' , ] ) view_func=user_view , methods= [ 'GET ' , ] ) app.add_url_rule ( '/users/ ' , view_func=user_view , methods= [ 'POST ' , ] ) view_func=view_func , methods= [ 'GET ' , 'POST ' ] ) view_func=user_view , methods= [ 'GET ' , 'POST ' ] ) view_func=view_func , methods= [ 'GET ' , ] )",['docs/views.rst'],Fix flask issue # 338
684,6dccf775468ea0a849d3c1c3965e3a1db6a36a3f,2011-09-25 19:12:41+02:00,"app which converts the result to an integer automatically . def _get_permanent_session_lifetime ( self ) : ` PERMANENT_SESSION_LIFETIME ` configuration key . Defaults to app.permanent_session_lifetime.total_seconds ( ) `` timedelta ( days=31 ) `` . .. admonition : : Notice _set_permanent_session_lifetime ) permanent session survive for roughly one month . starting with Flask 0.8 . Either catch this down yourself or use # : A : class : ` ~datetime.timedelta ` which is used to set the expiration This attribute can also be configured from the config with the If you want to have this value as seconds you can use `` total_seconds ( ) `` : : # : date of a permanent session . The default is 31 days which makes a # : the : attr : ` ~flask.Flask.permanent_session_lifetime ` attribute on the self.config [ 'PERMANENT_SESSION_LIFETIME ' ] = value del _get_permanent_session_lifetime , _set_permanent_session_lifetime permanent_session_lifetime = ConfigAttribute ( 'PERMANENT_SESSION_LIFETIME ' ) return rv if not isinstance ( rv , timedelta ) : Starting with Flask 0.8 this can also be `` `` '' A : class : ` ~datetime.timedelta ` which is used to set the expiration Note that the config key can be a timedelta object or number of seconds return timedelta ( seconds=rv ) rv = self.config [ 'PERMANENT_SESSION_LIFETIME ' ] date of a permanent session . The default is 31 days which makes a as integer since Flask 0.8 . # : ` PERMANENT_SESSION_LIFETIME ` configuration key . Defaults to `` `` '' # : permanent session survive for roughly one month . # : This attribute can also be configured from the config with the # : `` timedelta ( days=31 ) `` an integer representing seconds . def _set_permanent_session_lifetime ( self , value ) : permanent_session_lifetime = property ( _get_permanent_session_lifetime , The `` PERMANENT_SESSION_LIFETIME `` config key can also be an integer","['docs/api.rst', 'docs/config.rst', 'flask/app.py']",PERMANENT_SESSION_LIFETIME can now be an integer . This fixes # 310
685,df1dd57045b38ea7dcca44622744ab24e53e399e,2011-09-25 18:49:00+02:00,"2 . You can use the : meth : ` flask.Flask.add_url_rule ` function . provided endpoint def show_user ( username ) : trailing slash attached . handling . They have to be specified as keyword arguments . .. _url-route-registrations : also makes it possible to use relative link targets safely . matching is in use . If not specified the default ` rule ` the URL roule as string ` int ` accepts integers brackets ( `` /user/ < username > `` ) . By default a variable part the page with a trailing slash , a 404 not found is raised . well by using `` < converter : name > `` . : param endpoint : Since version 0.8 you can also pass the enpoint , ` defaults ` A dictionary with defaults for this rule . See the This is consistent with how web servers deal with static files . This ` int ` accepts integers it will be used instead of generating the endpoint to customize the behavior via subclassing you only need to change ( `` /user/ < username > `` ) . By default a variable part in the URL accepts any unique however . Defaults can also be specified . Here for example is a ` view_func ` the function to call when serving a request to the example above for how defaults work . : class : ` ~werkzeug.routing.Rule ` object . A change to from the function name . Variable parts are passed to the view function as keyword endpoint @ app.route ( '/ ' ) : param options : other options to be forwarded to the underlying ` float ` like ` int ` but for floating point values 2 . If a rule does not end with a trailing slash and the user request the which is exposed as : attr : ` flask.Flask.url_map ` . definition for a URL that accepts an optional page : : string without a slash however a different converter can be specified as implicitly ` HEAD ` ) . Starting with Flask 0.6 , ` OPTIONS ` is ` float ` like ` int ` but for floating point values provided endpoint . If this is not provided one can The : meth : ` route ` decorator accepts a couple of other arguments this method . If a view function is provided some defaults can be specified directly in the URL accepts any string without a slash however a different endpoint as key . Werkzeug is handling of method options . methods is a list ` path ` like the default but also accepts slashes def index ( ) : of methods this rule should be limited to ( ` GET ` , ` POST ` by the user , the user is automatically redirected to the same apply : This is consistent with how web servers deal with static files . This specify the function later by storing it in the implicitly added and handled by the standard request : param strict_slashes : can be used to disable the strict slashes @ app.route ( '/ < username > ' ) setting for this rule . See above . : ref : ` view-func-options ` . 1 . If a rule ends with a slash and is requested without a slash etc. ) . By default a rule just listens for ` GET ` ( and ` path ` like the default but also accepts slashes `` /users/page/N `` will be the URL for page ` N ` . assumes that the name of the view function is the name : meth : ` ~flask.Flask.add_url_rule ` accept . The only difference is that as well : ` * * options ` the options to be forwarded to the underlying apply : 1 . If a rule ends with a slash and is requested without a slash by the Here some examples : : =========== =========================================== Variable parts are passed to the view function as keyword arguments . : param methods : a list of methods this rule should be limited but is intended for decorator usage : : Here some examples : : subdomain matching is in use . slashes . The idea is to keep each URL unique so the following rules 3 . You can directly access the underlying Werkzeug routing system 2 . If a rule does not end with a trailing slash and the user request The following converters are possible available : The following converters are possible : =========== =============================================== : param options : the options to be forwarded to the underlying This specifies that `` /users/ `` will be the URL for page one and Generally there are three ways to define rules for the routing system : given URL rule . Example : : URL Route Registrations is a list of methods this rule should be limited user , the user is automatically redirected to the same page with a : class : ` ~werkzeug.routing.Rule ` object . A change with the route parameter the view function is defined with the decorator arguments . ` subdomain ` specifies the rule for the subdomain in case subdomain def show_post ( post_id ) : ` endpoint ` the endpoint for the registered URL rule . Flask itself page with a trailing slash , a 404 not found is raised . : class : ` ~werkzeug.routing.Rule ` object . An important detail to keep in mind is how Flask deals with trailing You can also define multiple rules for the same function . They have to be also makes it possible to use relative link targets safely . =============== ========================================================== slashes . The idea is to keep each URL unique so the following rules @ app.route ( '/post/ < int : post_id > ' ) Variables parts in the route can be specified with angular brackets to Werkzeug is handling of method options . methods Here the parameters that : meth : ` ~flask.Flask.route ` and : attr : ` ~flask.Flask.view_functions ` dictionary with the Internally : meth : ` route ` invokes : meth : ` add_url_rule ` so if you want on the view function . For more information refer to def show_users ( page ) : Variables parts in the route can be specified with angular def show_user ( username ) : subdomain is assumed . For more information refer to : ref : ` url-route-registrations ` . : param endpoint : the endpoint for the registered URL rule . Flask given URL rule . This does the same thing as : meth : ` add_url_rule ` def show_post ( post_id ) : An important detail to keep in mind is how Flask deals with trailing itself assumes the name of the view function as page with a trailing slash attached . : param view_func : the function to call when serving a request to the : param subdomain : specifies the rule for the subdomain in case ` unicode ` accepts any text without a slash ( the default ) instead of the ` view_func ` parameter . of the endpoint if not explicitly stated . def index ( ) : pass converter can be specified as well by using `` < converter : name > `` . 1 . You can use the : meth : ` flask.Flask.route ` decorator . pass","['docs/api.rst', 'flask/app.py']",Cleaned up url routing common docs . This fixes # 279
686,c6316132b173f96a6f5a90ff3b62f706f8a62560,2011-09-24 20:27:38+02:00,"The context preservation on exceptions is now an integral component of internal logic and lowers the odds of runaway request contexts in unittests . for x in xrange ( 3 ) : top = _request_ctx_stack.top # on exit we want to clean up earlier . Normally the request context # functionality is not active in production environments . c = app.test_client ( ) self.request.url , self.app.name ) self.context_preserved = False return Client.open ( self , builder , with self.assert_raises ( ZeroDivisionError ) : # is pushed the preserved context is popped . preserve_context = False as_tuple=as_tuple , try : # stays preserved until the next request in the same thread comes if top is not None and top.preserved : # memory . This is usually only a problem in testsuite since this if not self.request.environ.get ( 'flask._preserve_context ' ) and \ def test_preserve_only_once ( self ) : self.preserved = True top.pop ( ) def _pop_reqctx_if_necessary ( self ) : follow_redirects=follow_redirects ) self.assert_ ( flask._request_ctx_stack.top is None ) old = _request_ctx_stack.top % ( rv , self ) # activated under exception situations exactly one context stays rv = _request_ctx_stack.pop ( ) if self.request.environ.get ( 'flask._preserve_context ' ) or \ preserve_context = context_preserved = False if self.context_preserved : return ' < % s \ ' % s\ ' [ % s ] of % s > ' % ( buffered=buffered , self.assert_ ( flask._request_ctx_stack.top is not None ) finally : Flask itself and no longer of the test client . This cleaned up some as_tuple=as_tuple , 1/0 ( tb is not None and self.app.preserve_context_on_exception ) : return Client.open ( self , builder , self._pop_reqctx_if_necessary ( ) # pop that context again we want to make sure that on the next push # in . See RequestGlobals.push ( ) for the general behavior . def fail_func ( ) : # on the stack . The rationale is that you want to access that def __repr__ ( self ) : app = flask.Flask ( __name__ ) self.__class__.__name__ , # information under debug situations . However if someone forgets to self.request.method , buffered=buffered , _request_ctx_stack.pop ( ) # _request_ctx_stack.pop since we want teardown handlers # to be executed . _request_ctx_stack.top.pop ( ) c.get ( '/fail ' ) # If an exception ocurrs in debug mode or if context preservation is self.context_preserved = _request_ctx_stack.top is not old # it 's invalidated otherwise we run at risk that something leaks self.preserved = False ( tb is None or not self.app.preserve_context_on_exception ) : else : flask._request_ctx_stack.pop ( ) app.debug = True # we have to use _request_ctx_stack.top.pop instead of # indicator if the context was preserved . Next time another context follow_redirects=follow_redirects ) assert rv is self , 'Popped wrong request context . ( % r instead of % r ) ' \","['CHANGES', 'flask/ctx.py', 'flask/globals.py', 'flask/testing.py', 'flask/testsuite/basic.py']",Context preserving is now part of Flask and not the test client . This fixes # 326
687,7044b4beccec4380bc7e573559a08f4a8820afec,2011-09-17 13:20:30-07:00,"self.record_once ( lambda s : s.app.url_value_preprocessor .setdefault ( None , [ ] ) .append ( f ) ) .setdefault ( self.name , [ ] ) .append ( f ) ) self.record_once ( lambda s : s.app.url_value_preprocessors",['flask/blueprints.py'],Merge pull request # 324 from embe/master
688,7b899c85103996d861360a7ce42ab9a21bae3f48,2011-09-07 02:44:08-07:00,"environ_overrides = kwargs.pop ( 'environ_overrides ' , { } ) with c.session_transaction ( ) as sess : self.assert_equal ( sess [ 'foo ' ] , [ 42 ] ) environ_overrides = kwargs.setdefault ( 'environ_overrides ' , { } ) self.assert_equal ( len ( sess ) , 1 )","['flask/testing.py', 'flask/testsuite/testing.py']",Merge pull request # 309 from embe/master
689,780297e2bb6939ea9ed6a40846f3dc3fb7dcddc9,2011-08-31 08:33:17-07:00,"rv = c.get ( '/py/bar/123 ' ) pass def foo_bar ( ) : assert flask.url_for ( 'bar ' ) == '/bar/ ' c = app.test_client ( ) def foo_bar ( ) : try : except AssertionError : ) from the function name . self.assertEqual ( c.get ( '/py/bar/123 ' ) .data , 'bp.123 ' ) self.assertEqual ( c.get ( '/py/bar/foo ' ) .data , 'bp.bar_foo ' ) self.add_url_rule ( rule , endpoint , f , * * options ) '/bar/123 ' , endpoint='bar.123 ' , view_func=foo_foo_foo raise AssertionError ( 'expected AssertionError not raised ' ) self.assertEqual ( c.get ( '/foo/ ' ) .data , 'foo ' ) def for_bar ( ) : ) it will be used instead of generating the endpoint assert flask.url_for ( '123 ' ) == '/bar/123 ' self.assertRaises ( def test_route_decorator_custom_endpoint_with_dots ( self ) : rv = c.get ( '/py/bar ' ) def foo_foo_foo ( ) : : param endpoint : Since version 0.8 you can also pass the enpoint , def index ( ) : endpoint = options.pop ( `` endpoint '' , None ) def foo_bar_foo ( ) : def foo_bar_foo ( ) : # The rule 's di n't actually made it through assert flask.url_for ( 'foo ' ) == '/foo/ ' self.assertEqual ( c.get ( '/ ' ) .data , 'index ' ) endpoint = options.pop ( `` endpoint '' , f.__name__ ) return flask.request.endpoint assert rv.status_code == 404 def test_route_decorator_custom_endpoint ( self ) : bp = flask.Blueprint ( 'bp ' , __name__ ) bp.route ( '/bar/123 ' , endpoint='bar.123 ' ) , app.register_blueprint ( bp , url_prefix='/py ' ) app = flask.Flask ( __name__ ) self.add_url_rule ( rule , f.__name__ , f , * * options ) lambda : bp.add_url_rule ( with app.test_request_context ( ) : lambda : None def foo ( ) : self.assertEqual ( c.get ( '/py/bar ' ) .data , 'bp.bar ' ) self.add_url_rule ( rule , None , f , * * options ) if endpoint : assert ' . ' not in endpoint , `` Blueprint endpoint 's should not contain dot 's '' return flask.request.endpoint else : app.debug = True self.assertEqual ( c.get ( '/bar/123 ' ) .data , '123 ' ) self.assertEqual ( c.get ( '/py/foo ' ) .data , 'bp.foo ' ) def for_bar_foo ( ) : AssertionError , def bar_foo ( ) : self.assertEqual ( c.get ( '/bar/ ' ) .data , 'bar ' )","['flask/app.py', 'flask/blueprints.py', 'flask/testsuite/basic.py', 'flask/testsuite/blueprints.py']",Merge pull request # 307 from s0undt3ch/master
690,e942a0974f945bd4551482ecf7e29d87d162d0c1,2011-08-31 06:17:10-07:00,"include_package_data = True , package_data= { } , 'flask.testsuite ' : [ 'test_apps/ * ' , 'static/ * ' , 'templates/ * ' ]",['setup.py'],Merge pull request # 311 from christophercurrie/master
691,4cb6eea8f1e1edc707874f72cbca43a0f698ec7d,2011-08-26 11:21:26+01:00,"rv = c.get ( '/test ' , 'http : //testing.localhost/ ' ) recorded.append ( ( template , context ) ) assert rv.status_code == 405 assert expires.year == expected.year yield log rv = client.get ( '/ ' ) app.config [ 'TRAP_HTTP_EXCEPTIONS ' ] = True class TestSignals ( FlaskTestCase ) : f ( ' .. \\__init__.py ' ) buffer.append ( exception ) assert not flask.request self.assert_equal ( c.get ( '/ ' ) .data , ' 1 ' ) def hello ( ) : frontend = flask.Blueprint ( 'frontend ' , __name__ ) assert value == 'attachment ' old_stderr = sys.stderr assert not flask.session.modified 'site-packages ' , 'myapp ' ) assert c.get ( '/ ' ) .data == '13 ' d = dict ( a=23 , b=42 , c= [ 1 , 2 , 3 ] ) sideend = flask.Blueprint ( 'sideend ' , __name__ ) resp.headers [ ' X-Parachute ' ] = 'awesome ' flask.flash ( 'Zip ' ) return flask.request.json assert c.get ( '/admin/ ' ) .data == 'admin index ' def backend_no ( ) : return 'Hello World ! ' 1/0 # want to see the warnings assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] for config_key in 'TESTING ' , 'PROPAGATE_EXCEPTIONS ' , 'DEBUG ' , None : return False as part of Werkzeug . else : def sub ( ) : assert 'domain=.example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) assert rv.data == 'Foo ' @ app.route ( '/other ' ) suite.addTest ( unittest.makeSuite ( TemplatingTestCase ) ) flask.render_template ( 'missing.html ' ) response.data = 'stuff ' mod.__file__ = os.path.join ( expected_prefix , 'lib ' , 'python2.5 ' , class PrefixPathMiddleware ( object ) : def set ( ) : return flask.url_for ( '.index ' ) assert `` 'FOO_SETTINGS ' is not set '' in str ( e ) f ( '/etc/passwd ' ) SECRET_KEY='foo ' , return 'Awesome ' return flask.request.url here = os.path.abspath ( os.path.dirname ( __file__ ) ) def index ( args ) : except RuntimeError , e : rv = c.get ( '/ ' , 'http : //localhost/ ' ) return 'Hello % s ! ' % flask.request.args [ 'name ' ] expect_exception ( flask.session.__setitem__ , 'foo ' , 42 ) return 'admin login ' self.ensure_clean_request_context ( ) @ bp.route ( '/foo ' , defaults= { 'baz ' : 42 } ) assert logger1.name == __name__ assert flask.render_template ( 'nested/nested.txt ' ) == ' I\ 'm nested ' def test_template_filter ( self ) : flask.testsuite.basic self.assert_equal ( c.get ( '/de/about ' ) .data , '/foo ' ) def test_view_decorators ( self ) : # to not negatively affect other tests . def test_before_first_request_functions ( self ) : def bar ( ) : rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com/ ' ) return ' , '.join ( base_to_url ( x ) for x in value ) client = app.test_client ( ) mod.__file__ = os.path.join ( package_path , '__init__.py ' ) self.assertFalse ( flask.g ) assert len ( messages ) == 3 def delete ( self ) : methods = [ 'GET ' , 'POST ' ] assert rv.data == 'test index ' ] finally : expected_prefix = os.path.abspath ( 'foo ' ) assert isinstance ( e , MyException ) return 'GET ' except NotFound , e : assert c.get ( '/ ' ) .status_code == 500 req = flask.request._get_current_object ( ) return flask.url_for ( 'myapp.frontend.frontend_index ' ) def test ( ) : self.assert_equal ( c.get ( '/fe ' ) .data.strip ( ) , '/be ' ) class ListConverter ( BaseConverter ) : `` server name from the WSGI environment ( 'localhost.localdomain ' ) '' , str ( e ) def get ( ) : def get ( self ) : assert match is None with app.test_request_context ( '/ ' , environ_overrides= { 'HTTP_HOST ' : 'localhost ' } ) : evts.append ( 'after ' ) assert rv.mimetype == 'application/json ' return flask.url_for ( 'myapp.frontend.frontend_index ' ) assert not app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) return 'index for % s ' % user app = flask.Flask ( __name__ ) out = StringIO ( ) expected = datetime.utcnow ( ) + app.permanent_session_lifetime class SubdomainTestCase ( FlaskTestCase ) : assert 'Response ' in rv.data assert len ( recorded ) == 1 self.assert_ ( 'Make sure to directly send your POST-request ' # we have to run this test in an isolated thread because if the c.get ( '/exc ' ) assert rv.data == 'Test ' render = flask.render_template_string # make sure we 're not leaking a request context since we are assert c.get ( '/ ' ) .data == '42 ' app.config.update ( class LoggingTestCase ( FlaskTestCase ) : assert rv == 'request|after ' assert rv.headers [ ' X-Foo ' ] == 'Testing ' return flask.g.something , 404 def test_no_escaping ( self ) : return unicode ( flask.session [ 'foo ' ] ) ~~~~~~~~~~~ @ admin.route ( '/error ' ) self.prefix = prefix assert rv == ' '' < \\u0000\\/script > '' ' assert rv.data == 'value ' rv = app.test_client ( ) .open ( '/ ' , method='OPTIONS ' ) assert 'domain=.example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) class FlaskTestCase ( unittest.TestCase ) : with app.test_client ( ) as c : def test_context_test ( self ) : flask.request.form [ 'missing_key ' ] def test_blueprint_specific_error_handling ( self ) : assert expires.month == expected.month # test that all teardown_requests get passed the same original assert rv.data == ' 3 ' rv = app.test_client ( ) .get ( u'/ ? foo=정상처리'.encode ( 'euc-kr ' ) ) def test_options_handling_disabled ( self ) : c.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) def catcher ( error ) : def test_exception_logging ( self ) : here = os.path.abspath ( os.path.dirname ( __file__ ) ) text = ' < p > Hello World ! ' assert c.get ( '/admin/ ' ) .data == '123 ' @ app.url_value_preprocessor `` No ValueError exception should have been raised \ '' % s\ '' '' % e def test_jsonify ( self ) : assert flask._request_ctx_stack.top is None for entry in log : def tearDown ( self ) : from jinja2 import DictLoader assert 'strrev ' in app.jinja_env.filters.keys ( ) log.append ( locals ( ) ) rv = app.test_client ( ) .get ( '/ ' ) # This raises a new error and blows away sys.exc_info ( ) , so we can { { session.test } } app.debug = True os.path.join ( app.root_path , 'static/index.html ' ) rv = c.get ( '/outside ' , 'http : //xtesting.localhost/ ' ) assert app.logger is logger1 assert list ( flask.get_flashed_messages ( ) ) == [ 'Zap ' , 'Zip ' ] @ app.route ( '/meh ' ) return { ' a ' : 1 } assert c.get ( '/admin/logout ' ) .data == 'admin logout ' def from_tuple ( ) : class Other ( Index ) : from werkzeug.utils import import_string , find_modules add_etags=False ) backend = flask.Blueprint ( 'backend ' , __name__ ) from threading import Thread { { request.args.foo } } def test_modified_url_encoding ( self ) : rv = flask.make_response ( 'Awesome ' ) suite.addTest ( unittest.makeSuite ( JSONTestCase ) ) self.jinja_env.globals [ 'foo ' ] = '42 ' def accept_file ( ) : assert rv.status_code == 200 def test_user_error_handling ( self ) : flask.template_rendered.disconnect ( record , app ) def attach_something ( ) : class MyException ( Exception ) : flask.got_request_exception.disconnect ( record , app ) return flask.request.files [ 'foo ' ] .filename def before_request ( ) : try : def add ( ) : assert messages [ 1 ] == u'Hello World ' def return_kwargs ( ) : os.path.join ( app.root_path , 'static/index.html ' ) assert rv.data == 'True ' rv = c.get ( '/args ' ) def test_environ_defaults ( self ) : def test_template_escaping ( self ) : return value.split ( ' , ' ) assert 'after ' not in evts self.assert_equal ( c.get ( '/de/about ' ) .data , '/de/ ' ) def test_request_processing ( self ) : assert not hasattr ( flask.g , 'value ' ) app.url_map.charset = 'euc-kr ' self.assert_equal ( rv.data , ' [ 42 ] ' ) return 'request ' assert rv.data == 'Awesome ' os.pardir , os.pardir , 'examples ' ) self.assert_ ( ' A setup function was called ' in str ( e ) ) def teardown_request ( exc ) : foo= ' < test > ' ) == ' < test > ' rv = c.get ( '/admin/index2 ' ) 1/0 { { request.args.foo } } permanent = False def index ( ) : if hasattr ( mod , 'suite ' ) : { { g.foo } } f ( ' .. /__init__.py ' ) rv = c.get ( '/ ' ) self.assert_equal ( rv.data , 'success ' ) suite.addTest ( unittest.makeSuite ( BasicFunctionalityTestCase ) ) import os assert flask.request from werkzeug.http import parse_set_header def common_test ( self , app ) : assert 'set-cookie ' in rv.headers def test_installed_module_paths ( self ) : assert rv.data.split ( ) == [ '42 ' , '23 ' , 'False ' , 'aha ' ] flask.g.something = 'value ' suite.addTest ( unittest.makeSuite ( ViewTestCase ) ) return 'test index ' app.config.from_object ( Test ) assert app.jinja_env.filters [ 'my_reverse ' ] == my_reverse assert rv.mimetype == 'text/html ' assert flask.url_for ( 'index ' , _external=True ) == 'http : //localhost.localdomain:5000/ ' def exc ( ) : assert flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) \ return suite ( ) def test_late_binding ( self ) : assert rv.data == '42 ' def _samefile ( x , y ) : self.assertEqual ( c.get ( '/2/bar ' ) .data , u'19 ' ) package_path = os.path.join ( expected_prefix , 'lib ' , 'python2.5 ' , assert messages [ 1 ] == u'Hello World ' def test_empty_url_defaults ( self ) : @ app.route ( '/string ' ) calls.append ( 'before-signal ' ) def test_original_win ( self ) : def new_f ( self , * args , * * kwargs ) : return flask.url_for ( 'myapp.backend.backend_index ' ) yield mod.suite ( ) assert rv.data.strip ( ) == 'Hello Subdomain ' assert value == 'attachment ' self.assertEqual ( flask._request_ctx_stack.top , None ) mod = flask.Module ( __name__ , 'test ' , subdomain='testing ' ) return `` Response '' return 'Foo SubDomain ' os.environ = env from config_package_app import app c.get ( '/fail ' ) expected_prefix = os.path.abspath ( sys.prefix ) { { config.DEBUG } } templates = sorted ( app.jinja_env.list_templates ( ) ) rv = flask.send_file ( f , mimetype='text/plain ' ) return `` self.assert_ ( not app.got_first_request ) ctx.pop ( ) 'site-packages ' , 'myapp.py ' ) app.config [ 'SERVER_NAME ' ] = 'example.com:1234 ' def test_index ( ) : return response return flask.url_for ( 'something_else ' ) return 'frontend says no ' , 403 assert rv.data == 'Meh ' def after_request_signal ( sender , response ) : def apprunner ( configkey ) : app.register_blueprint ( bp ) assert flask.has_request_context ( ) app.register_blueprint ( sideend ) c = app.test_client ( ) rv = c.get ( '/admin/static/test.txt ' ) c.get ( '/exc ' ) @ app.errorhandler ( 500 ) self.assert_equal ( flask._request_ctx_stack.top , None ) def something ( page ) : calls = [ ] def create_global_jinja_loader ( self ) : flask.g.lang_code = values.pop ( 'lang_code ' , None ) def before2 ( ) : self.assert_equal ( sorted ( meths ) , [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) return 'admin index ' app.register_module ( module ) rv = c.get ( url ) def test_context_processing ( self ) : assert 'this is a debug statement ' in out def end_of_request ( exception ) : def test_basic_module ( self ) : assert flask.url_for ( 'static ' , filename='index.html ' ) \ def add ( ) : assert rv.mimetype == 'text/plain ' app.url_map.add ( Submount ( '/foo ' , [ self.ensure_clean_request_context ( ) assert rv.headers [ ' x-sendfile ' ] == \ from werkzeug.exceptions import BadRequest , NotFound assert 'Internal Server Error ' in rv.data app.url_map.converters [ 'list ' ] = ListConverter self.fail ( 'Expected runtime error ' ) return ' % s/ % d ' % ( bar , baz ) def record ( sender , exception ) : assert False , 'debug log ate the exception ' assert messages [ 2 ] == ( 'warning ' , flask.Markup ( u ' < em > Testing < /em > ' ) ) def after_request ( response ) : assert rv.direct_passthrough rv = c.get ( '/error ' ) flask.request_started.connect ( before_request_signal , app ) Tests the examples . self.assertEqual ( c.post ( '/ ' ) .data , 'POST ' ) return suite self.assert_equal ( c.get ( '/1/bar ' ) .data , u'23 ' ) flask.g.foo = 23 try : self.assertEqual ( sorted ( meths ) , [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) bp = flask.Blueprint ( 'bp ' , __name__ ) except NotFound : def add_to_path ( path ) : assert buffer == [ ] self.assertEqual ( app.instance_path , here ) assert rv.headers [ ' x-sendfile ' ] == \ calls.append ( 'after-handler ' ) assert resp.status_code == 500 def test_standard_context ( self ) : def test_config_from_envvar ( self ) : return flask.render_template_string ( ' { { a } } { { b } } { { c } } ' ) def test_attachment ( self ) : flask.flash ( u'Hello World ' ) os.path.join ( app.root_path , 'static/index.html ' ) assert 'This was submitted : `` index.txt '' ' in str ( e ) foo= ' < test > ' ) == ' < test > ' from threading import Thread def foo ( bar , baz ) : assert rv.data == 'Test ' flask.flash ( 'Zip ' ) unittest.TestCase.tearDown ( self ) def common_test ( self , app ) : app = MyFlask ( __name__ ) self.assert_equal ( len ( sess ) , 0 ) SERVER_NAME='example.com:8080 ' return 'Meh ' def test_templates_and_static ( self ) : self.assert_ ( req is flask.request._get_current_object ( ) ) app.config.from_pyfile ( 'missing.cfg ' ) called.append ( True ) app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True suite.addTest ( unittest.makeSuite ( ConfigTestCase ) ) self.assertEqual ( c.get ( '/ ' ) .data , ' 1 ' ) def test_extended_flashing ( self ) : calls.append ( 'after-signal ' ) from contextlib import contextmanager class ContextTestCase ( FlaskTestCase ) : return None def inject_all_regualr ( ) : rv = c.get ( '/admin/ ' ) class ViewTestCase ( FlaskTestCase ) : 'myapp-instance ' ) ) # config keys used for the ConfigTestCase return flask.url_for ( '.about ' ) self.assert_equal ( app.test_client ( ) .get ( '/ ' ) .data , 'Awesome ' ) self.fail ( 'Expected exception ' ) `` server name from the WSGI environment ( 'localhost ' ) '' , str ( e ) def fails ( ) : def admin_index ( ) : def test_template_filter_with_template ( self ) : with catch_stderr ( ) as err : @ backend.route ( '/backend-no ' ) assert flask.request def test_before_after_request_order ( self ) : recorded = [ ] app.config.from_object ( __name__ ) 'after-admin ' , 'after-app ' ] return 'GET ' def inject_all_module ( ) : def tearDown ( self ) : def test_template_rendered ( self ) : def bar ( ) : flask.got_request_exception.disconnect ( record , app ) def fails ( ) : assert rv.data == 'Hello from the Admin ' def after2 ( response ) : def admin_logout ( ) : rv = flask.make_response ( 'W00t ' , 404 ) rv = app.test_client ( ) .get ( '/ ? foo=42 ' ) @ admin.route ( '/logout ' ) c.get ( '/ ' ) render = flask.render_template_string class TestToolsTestCase ( FlaskTestCase ) : def init_jinja_globals ( self ) : assert c.get ( '/ ' ) .data == 'GET ' view.view_class = Other assert rv.data == 'stuff ' flask.session [ 'test ' ] = 'aha ' 'to this URL ' in str ( e ) ) ] ) ) Various helpers . def delete ( self ) : def test_endpoint_decorator ( self ) : def sub ( ) : self.assert_equal ( c.get ( '/2/bar ' ) .data , u'19 ' ) rv = app.test_client ( ) .get ( '/ ? foo=42 ' ) from werkzeug.exceptions import NotFound , BadRequest def index_put ( ) : def suite ( ) : if trigger == 'before ' : def test_processor_exceptions ( self ) : assert flask.url_for ( 'hello ' , name='test x ' ) == '/hello/test % 20x ' assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] class BlueprintTestCase ( FlaskTestCase ) : assert rv.mimetype == 'text/plain ' def has_encoding ( name ) : def test_basic_view ( self ) : if not has_encoding ( 'euc-kr ' ) : rv = c.get ( '/args ' ) with app.test_request_context ( ) : assert rv.data == 'test index ' rv = c.post ( '/foo ' , data= { } , follow_redirects=True ) def sideend_no ( ) : @ bp.url_defaults with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost ' } ) : rv = flask.send_file ( f , mimetype='text/plain ' ) def broken ( ) : logger1 = app.logger self.assert_ ( 'Modules are deprecated ' in str ( entry [ 'message ' ] ) ) assert rv.data.strip ( ) == 'Hello Subdomain ' with catch_stderr ( ) as err : bp = flask.Blueprint ( 'frontend ' , __name__ , url_prefix='/ < lang_code > ' ) def my_reverse ( s ) : self.assertEqual ( len ( sess ) , 0 ) return 'Awesome ' return flask.url_for ( '.about ' ) @ admin.app_errorhandler ( 404 ) return flask.request.method def test_json_attr ( self ) : return str ( page ) assert c.get ( '/1,2,3 ' ) .data == ' 1|2|3 ' app.request_class = ModifiedRequest assert msg.endswith ( `` missing.cfg ' '' ) Pluggable views . assert app.test_client ( ) .get ( '/ ' ) .status_code == 500 assert rv.data == 'dcba ' warnings.simplefilter ( 'default ' , DeprecationWarning ) ) assert 'after ' not in evts self.assert_ ( app.got_first_request ) assert rv.data == `` def inject_all_module ( ) : rv = client.get ( '/test ' ) assert lines == [ warnings.showwarning = old_showwarning except NotFound , e : assert not flask.has_request_context ( ) def app_forbidden ( e ) : class JSONTestCase ( FlaskTestCase ) : def test_session_using_server_name_and_port ( self ) : 'site-packages ' , 'MyApp.egg ' , 'myapp ' ) class BasicFunctionalityTestCase ( FlaskTestCase ) : environ [ 'SCRIPT_NAME ' ] = self.prefix flask.template_rendered.connect ( record , app ) flask.session [ 'test ' ] = 42 return 'internal server error ' , 500 def test_blueprint_url_processors ( self ) : class FlaskTestCase ( unittest.TestCase ) : def test_response_creation ( self ) : suite.addTest ( unittest.makeSuite ( ContextTestCase ) ) def backend_no ( ) : rv = c.post ( '/ ' ) return u'Hällo Wörld'.encode ( 'utf-8 ' ) return self.app ( environ , start_response ) permanent = True mod.add_url_rule ( '/ ' , view_func=index ) from functools import update_wrapper flask.render_template ( 'missing.html ' ) def frontend_forbidden ( e ) : assert 'this is a debug statement ' in out def test_send_file_regular ( self ) : with app.open_resource ( 'static/index.html ' ) as f : assert not flask.request rv = flask.send_file ( f ) 1 // 0 assert buffer == [ None ] rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) def hello ( ) : assert len ( called ) == 2 if flask.g.lang_code is not None and \ assert 0 , 'expected runtime error ' # This raises a new error and blows away sys.exc_info ( ) , so we can flask.g.lang_code = values.pop ( 'lang_code ' ) suite.addTest ( unittest.makeSuite ( FlaskrTestCase ) ) def test_view_inheritance ( self ) : def test_json_bad_requests ( self ) : def get ( ) : assert flask.session.get ( 'missing_key ' ) is None catched.append ( 'after-admin ' ) flask.Flask ( __name__ , instance_path='instance ' ) from cStringIO import StringIO rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/ ' ) assert 'Internal Server Error ' in resp.data with c.session_transaction ( ) : called.append ( 2 ) assert not rv.data # head truncates def test_logger_cache ( self ) : return False assert ' x-sendfile ' not in rv.headers return ' , '.join ( base_to_url ( x ) for x in value ) import codecs def emits_module_deprecation_warning ( f ) : except ( AttributeError , RuntimeError ) : catched.append ( 'before-app ' ) assert c.get ( '/foo/bar ' ) .data == 'bar ' app.view_functions [ 'bar ' ] = bar app.config [ 'SERVER_NAME ' ] = 'localhost ' return 'the index ' assert isinstance ( e , BadRequest ) assert messages [ 2 ] == flask.Markup ( u ' < em > Testing < /em > ' ) codecs.lookup ( name ) app.debug = True msg = str ( e ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' , 'PUT ' ] def test_debug_mode_complains_after_first_request ( self ) : assert c.get ( '/admin/login ' ) .data == 'admin login ' assert app.jinja_env.filters [ 'my_reverse ' ] ( 'abcd ' ) == 'dcba ' def catch_stderr ( ) : frontend = flask.Blueprint ( 'myapp.frontend ' , __name__ ) def before_request_handler ( ) : def teardown_request1 ( exc ) : app.config [ config_key ] = True return flask.url_for ( 'something_else ' ) @ app.route ( '/hello/ < name > ' , methods= [ 'POST ' ] ) mod.__path__ = [ package_path ] return ' % s/ % d ' % ( bar , baz ) @ bp.route ( '/page/ < int : page > ' ) # stack otherwise and we want to ensure that this is not the case @ module.endpoint ( 'bar ' ) with app.test_request_context ( '/meh ' ) : def test_options_handling_disabled ( self ) : assert len ( captured ) == 1 assert 'Traceback ( most recent call last ) : ' in err self.assert_equal ( c.get ( '/ ' ) .data , 'GET ' ) assert 'no file contents were transmitted ' in str ( e ) assert messages [ 1 ] == ( 'error ' , u'Hello World ' ) flask.session [ 'test ' ] = 42 assert 'init_jinja_globals ' in str ( log [ 0 ] [ 'message ' ] ) class MyFlask ( flask.Flask ) : resp = flask.make_response ( f ( * args , * * kwargs ) ) suite.addTest ( unittest.makeSuite ( TestToolsTestCase ) ) # not torn down . This causes other tests that run after this fail evts.append ( 'before ' ) warnings.filters = filters [ : ] self.assertEqual ( got , [ 42 ] ) def frontend_forbidden ( e ) : rv = c.get ( '/admin/index2 ' ) app = flask.Flask ( __name__ ) def test_session_expiration ( self ) : rv = c.get ( '/admin/static/css/test.css ' ) def test_empty_url_defaults ( self ) : assert rv.status_code == 500 assert c.get ( '/more ' ) .data == 'GET ' def admin_logout ( ) : return 'not found ' , 404 resp = c.get ( '/other ' ) from flaskr_tests import FlaskrTestCase def internal_server_error ( e ) : def test_before_request_and_routing_errors ( self ) : return 'Foo ' def test_no_escaping ( self ) : @ app.route ( '/get ' ) def test_egg_installed_paths ( self ) : @ app.route ( '/exc ' ) except TemplateNotFound , e : def test_make_response ( self ) : ~~~~~~~~~~~~~~~~~~~~~~~~~~ assert rv.status_code == 500 def more ( ) : assert options [ 'filename ' ] == 'index.html ' except RuntimeError : def teardown_request2 ( exc ) : app = MyFlask ( __name__ ) rv = c.delete ( '/more ' ) assert response.data == 'stuff ' self.common_object_test ( app ) def teardown_request ( exc ) : assert rv.status_code == 404 def accept_file ( ) : @ app.template_filter ( ) TEST_KEY = 'foo ' == 'http : //localhost/hello/test % 20x ' app.route ( '/ ' , methods= [ 'OPTIONS ' ] ) ( index2 ) def root ( ) : def test_session_using_server_name_and_port ( self ) : return 'frontend says no ' , 403 assert flask.url_for ( 'hello ' , name='test x ' , _external=True ) \ def test_json_attr ( self ) : { { config.DEBUG } } c.get ( '/test ' ) filters = warnings.filters out = err.getvalue ( ) assert len ( called ) == 1 codecs.lookup ( name ) unittest.TestCase.tearDown ( self ) flask.testsuite.blueprints assert `` 'FOO_SETTINGS ' is not set '' in str ( e ) app.debug = False from config_module_app import app app.register_module ( mod ) @ admin.after_request def test_debug_log ( self ) : os.environ = { 'FOO_SETTINGS ' : 'flask_tests.py ' } rv = flask.make_response ( 'Awesome ' ) def index ( user ) : @ contextmanager assert rv.data.strip ( ) == ' < h1 > Hello World ! < /h1 > ' self.assert_equal ( c.get ( '/foo ' ) .data , '/en/about ' ) def test_explicit_instance_paths ( self ) : rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost/ ' ) @ app.route ( '/ ' ) class DeprecationsTestCase ( FlaskTestCase ) : assert c.get ( '/unicode ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) def exc ( ) : def apprunner ( configkey ) : # make sure we 're not leaking a request context since we are def post ( self ) : assert not hasattr ( flask.g , 'value ' ) assert c.get ( '/get ' ) .data == '42 ' return 'Meh ' @ app.errorhandler ( 404 ) assert rv.data == 'normal index ' @ app.route ( '/foo/ ' , methods= [ 'GET ' , 'POST ' ] ) return suite assert c.get ( '/ ' ) .data == 'the index ' def test_request_exception_signal ( self ) : def test_environ_defaults_from_config ( self ) : return { ' c ' : 3 } return flask.request.method assert len ( captured ) == 2 @ admin.route ( '/login ' ) response.data += '|after ' ~~~~~~~~~~~~~~~~~~~~~~~ class SendfileTestCase ( FlaskTestCase ) : assert c.get ( '/unicode ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) self.assert_ ( 'must be absolute ' in str ( e ) ) assert app.jinja_env.filters [ 'my_reverse ' ] == my_reverse return None def test_template_filter_with_name ( self ) : assert rv.mimetype == 'text/plain ' def test_make_response ( self ) : rv = flask.send_file ( f , as_attachment=True ) class InstanceTestCase ( FlaskTestCase ) : def test_template_filter_with_name ( self ) : assert rv.data == 'stuff ' `` ( 'localhost.localdomain:443 ' ) does not match the `` + \ assert 'ZeroDivisionError : ' in err os.environ = { } env = os.environ Configuration and instances . except ( OSError , IOError ) : rv = app.test_client ( ) .open ( '/ ' , method='OPTIONS ' ) from jinja2 import TemplateNotFound assert rv.data.strip ( ) == ' < h1 > Hello World ! < /h1 > ' import warnings return '|'.join ( args ) assert c.get ( '/admin/ ' ) .data == '123 ' try : from werkzeug.http import parse_date `` ( 'localhost.localdomain ' ) does not match the `` + \ app.use_x_sendfile = True os.path = old_path app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost ' ) # import moduleapp here because it uses deprecated features and we do n't assert rv.data == `` assert ' x-sendfile ' in rv.headers def app_forbidden ( e ) : suite = unittest.TestSuite ( ) self.fail ( 'Expected value error ' ) def test_uninstalled_module_paths ( self ) : assert str ( e ) == `` the server name provided `` + \ assert app.test_client ( ) .get ( '/ ' ) .status_code == 500 class MyFlask ( flask.Flask ) : def handle_my_exception ( e ) : def test_custom_converters ( self ) : rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) assert rv == ' '' < \\/script > '' ' admin = flask.Module ( __name__ , 'admin ' , url_prefix='/admin ' ) def test_view_decorators ( self ) : assert options [ 'filename ' ] == 'index.txt ' got = [ ] def after1 ( response ) : return flask.jsonify ( * * d ) def about ( ) : class PrefixPathMiddleware ( object ) : def admin_index ( ) : app.secret_key = 'development key ' def meh ( ) : recorded = [ ] self.assert_equal ( app.instance_path , here ) self.fail ( 'Expected runtime error ' ) rv = flask.make_response ( 'W00t ' , 404 ) app.view_functions [ 'bar ' ] = bar msg = str ( e ) except IOError , e : assert rv.status_code == 404 with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost:80 ' } ) : def test_escaping ( self ) : if flask.g.lang_code is not None and \ def test_templates_list ( self ) : def test_json_body_encoding ( self ) : assert c.get ( '/foo/ ' ) .data == 'index ' app.register_blueprint ( sideend ) def after_request ( response ) : warnings.filters = filters except NotFound : assert rv.data == 'index for mitsuhiko ' evts = [ ] suite.addTest ( unittest.makeSuite ( MiniTwitTestCase ) ) SERVER_NAME='example.com ' return 'internal server error ' , 500 base_to_url = super ( ListConverter , self ) .to_url expect_exception ( flask.session.pop , 'foo ' ) except ( AttributeError , RuntimeError ) : c.post ( '/foo ' , data= { } ) assert 'my_reverse ' in app.jinja_env.filters.keys ( ) assert c.get ( '/fail ' ) .status_code == 400 def test_subdomain_matching ( self ) : suite.addTest ( unittest.makeSuite ( DeprecationsTestCase ) ) import flask def test_options_work ( self ) : assert c.get ( '/foo/bar ' ) .data == 'bar ' assert c.get ( '/admin/ ' ) .data == 'admin index ' mod = types.ModuleType ( 'myapp ' ) # exception . assert 'Traceback ( most recent call last ) : ' in err rv = render ( ' { { `` < /script > '' |tojson|safe } } ' ) def frontend_no ( ) : except ValueError , e : flask.request_finished.disconnect ( after_request_signal , app ) suite.addTest ( unittest.makeSuite ( FlaskrTestCase ) ) def test_config_from_envvar ( self ) : @ app.template_filter ( 'strrev ' ) ' '' ) flask.request_finished.disconnect ( after_request_signal , app ) return app.jinja_env.globals [ 'foo ' ] app.route ( '/ ' ) ( index ) mod.add_url_rule ( '/ ' , view_func=index ) assert rv.data == 'Foo SubDomain ' self.assert_ ( 'http : //localhost/foo/ ' in str ( e ) ) here = os.path.abspath ( os.path.dirname ( __file__ ) ) assert rv.status_code == 400 assert match is None app.secret_key = 'testing ' return 'Hello Server Error ' , 500 pass import unittest admin = flask.Module ( __name__ , 'admin ' ) app.route ( '/ ' ) ( index ) assert rv.data == ' 3 ' with catch_warnings ( ) as captured : def test_original_win ( self ) : assert rv.mimetype == 'application/json ' ctx.push ( ) assert ' x-sendfile ' in rv.headers self.assertEqual ( app.test_client ( ) .get ( '/foo ' ) .data , 'Meh ' ) def test_config_from_file ( self ) : pass # debug flag is set to true and an exception happens the context is def normal_index ( ) : def test_attachment ( self ) : assert 'internal server error ' == rv.data base_to_url = super ( ListConverter , self ) .to_url class InstanceTestCase ( FlaskTestCase ) : import flask.views def test_url_mapping ( self ) : return { ' c ' : 3 } for module in find_modules ( __name__ ) : flask.session.modified = False f = StringIO ( 'Test ' ) def test_response_creation ( self ) : def about ( ) : rv = c.get ( '/ ' ) APPLICATION_ROOT='/bar ' def set ( ) : called.append ( 1 ) self.assertEqual ( c.get ( '/fe2 ' ) .data.strip ( ) , '/fe ' ) def test_index ( ) : assert ' x-sendfile ' in rv.headers # mimetypes + etag def __call__ ( self , environ , start_response ) : ] ) ) app.config [ 'TRAP_BAD_REQUEST_ERRORS ' ] = True rv = c.get ( '/ ' ) mod.__file__ = os.path.join ( expected_prefix , 'lib ' , 'python2.5 ' , raise AssertionError ( 'some kind of exception expected ' ) def test_before_first_request_functions ( self ) : def test_session ( self ) : ) 'file ( No such file or directory ) : ' ) def test_test_app_proper_environ ( self ) : from StringIO import StringIO rv = app.test_client ( ) .get ( '/ ' ) def test_subdomain_matching ( self ) : SERVER_NAME='localhost.localdomain:5000 ' def test_uninstalled_package_paths ( self ) : def subdomain ( ) : self.assert_equal ( c.get ( '/1/foo ' ) .data , u'23/42 ' ) old_stderr = sys.stderr def test_teardown_request_handler ( self ) : sys.modules [ 'myapp ' ] = None def common_object_test ( self , app ) : def frontend_no ( ) : assert len ( recorded ) == 1 class ModuleTestCase ( FlaskTestCase ) : return flask.g.something , 404 # want to see the warnings value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) def test_installed_package_paths ( self ) : from werkzeug import parse_date , parse_options_header assert ' x-sendfile ' not in rv.headers called.append ( 6 ) with c.session_transaction ( ) : import sys def super_reverse ( s ) : app.register_blueprint ( bp ) suite.addTest ( unittest.makeSuite ( TestSignals ) ) class SubdomainTestCase ( FlaskTestCase ) : def has_encoding ( name ) : def test_installed_module_paths ( self ) : app.url_map.converters [ 'list ' ] = ListConverter assert rv.data == 'Hello from the Frontend ' return 'POST ' @ app.route ( '/ ' , subdomain= ' < user > ' ) def test_context_test ( self ) : decorators = [ add_x_parachute ] assert msg.endswith ( `` missing.cfg ' '' ) rv = flask.send_file ( f ) ctx.pop ( ) def test_explicit_instance_paths ( self ) : assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' ] flask.template_rendered.connect ( record , app ) @ frontend.route ( '/fe ' ) def post ( self ) : app.testing = True templates = sorted ( app.jinja_env.list_templates ( ) ) assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' ] return unicode ( flask.request.json [ ' a ' ] + flask.request.json [ ' b ' ] ) add_to_path ( os.path.join ( example_path , 'flaskr ' ) ) def fail ( ) : calls.append ( 'after-signal ' ) assert catched == [ 'before-app ' , 'before-admin ' , ctx = app.test_request_context ( ) else : assert rv.data == 'Hello Custom World ! ' assert rv.data == 'Hello Server Error ' except NotFound : return u'Hällo Wörld ' import flask class SendfileTestCase ( FlaskTestCase ) : `` `` '' Catch stderr in a StringIO '' '' '' def from_tuple ( ) : def catcher ( error ) : rv = app.test_client ( ) .get ( '/ ' ) assert context [ 'whiskey ' ] == 42 assert app.test_client ( ) .get ( '/admin/ ' ) .data == '42 ' def test_config_from_file ( self ) : assert flask.url_for ( 'frontend.index ' ) == '/ ' assert catched == [ 'before-app ' , 'after-app ' ] == 'http : //localhost/hello/test % 20x ' expires = parse_date ( match.group ( ) ) assert e.args and 'session is unavailable ' in e.args [ 0 ] mod = flask.Module ( __name__ , 'test ' , subdomain='testing ' ) rv = c.post ( '/add ' , data=flask.json.dumps ( { ' a ' : 1 , ' b ' : 2 } ) , @ admin.before_request assert rv.mimetype == 'text/html ' os.path.join ( expected_prefix , 'var ' , return update_wrapper ( new_f , f ) class Index ( flask.views.MethodView ) : c.post ( '/fail ' , data= { 'foo ' : 'index.txt ' } ) def pull_lang_code ( endpoint , values ) : sys.stderr = rv = StringIO ( ) def test_before_request_and_routing_errors ( self ) : def test_custom_template_loader ( self ) : 'site-packages ' , 'myapp ' ) rv = c.post ( '/json ' , data='malformed ' , content_type='application/json ' ) self.setup ( ) app.config [ config_key ] = True buffer = [ ] err = out.getvalue ( ) import ntpath flask.g.lang_code = values.pop ( 'lang_code ' , None ) assert rv.headers [ ' x-sendfile ' ] == \ 1/0 as part of Werkzeug . self.assert_equal ( rv.data , 'http : //example.com:1234/foo/ ' ) def test_session_transactions ( self ) : def to_url ( self , value ) : @ sideend.route ( '/what-is-a-sideend ' ) return flask.url_for ( 'about ' , lang_code='en ' ) for other_suite in iter_suites ( ) : except NotFound : app.secret_key = 'development key ' from logging import StreamHandler from werkzeug.http import parse_options_header return 'success ' def to_python ( self , value ) : from moduleapp import app as moduleapp return flask.jsonify ( d ) self.assert_equal ( rv.data , 'Awesome ' ) old_path = os.path for entry in sys.path : def test_session_using_server_name ( self ) : from flask import Module def before_admin_request ( ) : `` server name from the WSGI environment ( 'localhost.localdomain ' ) '' , str ( e ) client = app.test_client ( ) def test_request_locals ( self ) : # we have to run this test in an isolated thread because if the def teardown_request1 ( exc ) : def test_manual_context_binding ( self ) : APPLICATION_ROOT='/bar ' yield rv flask.request_finished.connect ( after_request_signal , app ) yield log def index ( user ) : suite.addTest ( unittest.makeSuite ( InstanceTestCase ) ) try : frontend = flask.Blueprint ( 'frontend ' , __name__ ) def test_safe_access ( self ) : except ZeroDivisionError : rv = app.test_client ( ) .get ( '/ ' ) .data return '|'.join ( args ) flask.g.value = 42 ' < p > Hello World ! ' return flask.request.method assert options [ 'filename ' ] == 'index.txt ' self.assert_equal ( c.get ( '/be ' ) .data.strip ( ) , '/fe ' ) return 'Hello Server Error ' , 500 def test_options_work ( self ) : environ [ 'SCRIPT_NAME ' ] = self.prefix assert rv.data == u'정상처리'.encode ( 'utf-8 ' ) def test_dotted_names ( self ) : rv = c.get ( '/static/hello.txt ' , 'http : //foo.example.com/ ' ) return 'Meh ' : copyright : ( c ) 2011 by Armin Ronacher . sys.path.append ( os.path.join ( example_path , 'flaskr ' ) ) def normal_index ( ) : `` ( 'localhost.localdomain:443 ' ) does not match the `` + \ def add_language_code ( endpoint , values ) : def test_template_filter_with_name_and_template ( self ) : flask.flash ( flask.Markup ( u ' < em > Testing < /em > ' ) , 'warning ' ) return flask.request.args [ 'foo ' ] import os assert c.get ( '/ ' ) .data == '42 ' assert index ( ) == 'Hello World ! ' def test_flashes ( self ) : def working ( ) : resp = c.get ( '/ ' , data=u ' '' Hällo Wörld '' '.encode ( 'iso-8859-15 ' ) , app.secret_key = 'testkey ' assert rv.data.strip ( ) == 'Admin File ' @ app.route ( '/ < lang_code > /about ' ) app.logger.warning ( 'the standard library is dead ' ) app.config.update ( SERVER_NAME='localhost ' ) self.assert_equal ( len ( sess ) , 1 ) rv = c.post ( '/json ' , data='malformed ' , content_type='application/json ' ) return 'admin logout ' assert str ( e ) == 'View function did not return a response ' rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/ ' ) admin = flask.Module ( __name__ , 'admin ' , url_prefix='/admin ' ) def test_basic_support ( self ) : assert 'Internal Server Error ' in resp.data return u'Hällo Wörld'.encode ( 'utf-8 ' ) app.config [ 'MAX_CONTENT_LENGTH ' ] = 64 ' < p > Hello World ! ' , # exception . class TestToolsTestCase ( FlaskTestCase ) : assert c.get ( '/what-is-a-sideend ' ) .data == 'application itself says no ' def test_static_files ( self ) : def test_manual_context_binding ( self ) : assert 'WARNING in helpers [ ' in out def finish1 ( exc ) : view.view_class = Other return `` Response '' def error ( ) : def create_global_jinja_loader ( self ) : def test_default_endpoint_name ( self ) : rv = c.get ( '/ ' ) app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : return flask.render_template ( 'template_filter.html ' , value='abcd ' ) raise TypeError self.assert_ ( not app.got_first_request ) test_modified_url_encoding = None app.logger.addHandler ( StreamHandler ( out ) ) import flask.views out = StringIO ( ) return 'Aha ! ' rv = c.get ( '/ ' , 'http : //test.localhost/ ' ) from flask import Module assert rv.data == 'index for mitsuhiko ' `` ( 'localhost.localdomain ' ) does not match the `` + \ assert rv.data == 'W00t ' @ app.route ( '/ < lang_code > / ' ) rv = render ( ' { { `` < /script > '' |tojson|safe } } ' ) mod = import_string ( module ) rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost.localdomain ' ) suite.addTest ( unittest.makeSuite ( InstanceTestCase ) ) return flask.render_template_string ( ' { { config } } ' , config=42 ) def test_teardown_request_handler_error ( self ) : @ app.route ( '/set ' , methods= [ 'POST ' ] ) template , context = recorded [ 0 ] flask.g.value = 42 assert False , 'debug log ate the exception ' return 'Foo ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ def new_function ( * args , * * kwargs ) : assert 0 , 'expected config ' from logging import StreamHandler assert 'flask_tests.py ' in out self.assert_equal ( repr ( flask.g ) , ' < LocalProxy unbound > ' ) return response warnings.simplefilter ( 'ignore ' , DeprecationWarning ) except ZeroDivisionError : Tests deprecation support . assert buffer == [ None ] assert not flask.session.modified ~~~~~~~~~~~~~~~~~~~~~~~~ @ app.errorhandler ( 403 ) def broken ( ) : bp = flask.Blueprint ( 'test ' , __name__ ) raise ValueError ( flask.testsuite.examples assert rv.data.strip ( ) == '/ * nested file * / ' assert len ( log ) == 1 flask.g.value = 23 rv = c.get ( url ) 'handler ' , 'after-handler ' , @ backend.errorhandler ( 403 ) assert 'httponly ' in rv.headers [ 'set-cookie ' ] .lower ( ) except LookupError : app.add_url_rule ( '/ ' , view_func=BetterIndex.as_view ( 'index ' ) ) def test_proper_test_request_context ( self ) : return `` Ignored '' suite.addTest ( unittest.makeSuite ( SubdomainTestCase ) ) app.register_blueprint ( backend ) module = Module ( __name__ , __name__ ) `` `` '' return False # import moduleapp here because it uses deprecated features and we do n't content_type='application/json ; charset=iso-8859-15 ' ) assert len ( captured ) == 1 def subdomain ( ) : flask.testsuite def init_jinja_globals ( self ) : flask.testsuite.testing rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) t = Thread ( target=apprunner , args= ( config_key , ) ) assert c.get ( '/ ' ) .data == '42 ' def test_jsonify ( self ) : assert 'strrev ' in app.jinja_env.filters.keys ( ) class BetterIndex ( Index ) : mod = flask.Module ( __name__ , 'frontend ' ) # test that all teardown_requests get passed the same original def context_processor ( ) : SERVER_NAME='example.com ' response.data += '|after ' ctx = app.test_request_context ( '/ ? name=World ' ) for config_key in 'TESTING ' , 'PROPAGATE_EXCEPTIONS ' , 'DEBUG ' , None : c.get ( '/ ' ) sess [ 'foo ' ] = [ 42 ] with app.test_request_context ( ) : f ( '/etc/passwd ' ) assert 'my_reverse ' in app.jinja_env.filters.keys ( ) rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain ' ) def test_session ( self ) : def after_request_handler ( response ) : def test ( ) : except DebugFilesKeyError , e : recorded.append ( ( template , context ) ) self.assertEqual ( app.test_client ( ) .get ( '/ ' ) .data , 'Awesome ' ) return 'value set ' return 'value set ' assert 'no file contents were transmitted ' in str ( e ) macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) self.assertEqual ( c.get ( '/1/foo ' ) .data , u'23/42 ' ) Rule ( '/bar ' , endpoint='bar ' ) , def inject_admin ( ) : assert calls == [ 'before-signal ' , 'before-handler ' , def test_proper_test_request_context ( self ) : ctx = app.test_request_context ( ) c.get ( '/test ' ) assert e.name == 'missing.html ' @ app.route ( '/unicode ' ) with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost:80 ' } ) : ' < p > Hello World ! ' , t.join ( ) self.fail ( 'expected exception ' ) assert c.get ( '/string ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) app.config.update ( assert 'the standard library is dead ' in out def to_python ( self , value ) : return flask.jsonify ( * * d ) self.common_object_test ( app ) assert rv.direct_passthrough flask.request_finished.connect ( after_request_signal , app ) except TemplateNotFound , e : catched.append ( 'after-admin ' ) def always_first ( ) : warnings.simplefilter ( 'default ' , category=DeprecationWarning ) # when they expect no exception on the stack . self.assertEqual ( app.instance_path , os.path.join ( here , 'instance ' ) ) expected = datetime.utcnow ( ) + app.permanent_session_lifetime def before1 ( ) : log = [ ] @ app.endpoint ( 'index ' ) @ app.teardown_request return self.app ( environ , start_response ) assert len ( called ) == 2 suite.addTest ( unittest.makeSuite ( BasicFunctionalityTestCase ) ) mod.__path__ = [ package_path ] def frontend_index ( ) : assert 'after ' not in evts def test_blueprint_url_processors ( self ) : assert logger1.name == __name__ def test_before_after_request_order ( self ) : assert app.test_client ( ) .get ( '/admin/ ' ) .data == '42 ' assert 'Exception on / [ GET ] ' in err calls.append ( 'before-signal ' ) c.post ( '/foo ' , data= { } ) suite.addTest ( unittest.makeSuite ( BlueprintTestCase ) ) self.assert_equal ( ctx.request.url , 'http : //example.com:1234/foo/ ' ) t.join ( ) self.assertEqual ( len ( sess ) , 1 ) from blueprintapp import app assert flask.url_for ( 'admin.static ' , filename='test.txt ' ) \ app.config.from_envvar ( 'FOO_SETTINGS ' ) @ admin.route ( '/ ' ) rv = flask.send_file ( StringIO ( 'Test ' ) , as_attachment=True , assert flask.session.modified def test_teardown_request_handler ( self ) : # - * - coding : utf-8 - * assert c.get ( '/admin/logout ' ) .data == 'admin logout ' assert app.config [ 'TEST_KEY ' ] == 'foo ' def backend_forbidden ( e ) : warnings.simplefilter ( 'ignore ' , DeprecationWarning ) ' < p > Hello World ! ' `` server name from the WSGI environment ( 'localhost ' ) '' , str ( e ) old_showwarning = warnings.showwarning assert rv.mimetype == 'text/plain ' return DictLoader ( { 'index.html ' : 'Hello Custom World ! ' } ) rv = app.test_client ( ) .get ( '/ ' , 'https : //localhost.localdomain:5000 ' ) url_charset = 'euc-kr ' return unicode ( flask.session.permanent ) SECRET_KEY = 'devkey ' app.add_url_rule ( '/ ' , view_func=BetterIndex.as_view ( 'index ' ) ) called.append ( 3 ) assert 'before ' in evts sess [ 'foo ' ] = [ 42 ] add_etags=False ) def test_environ_defaults_from_config ( self ) : assert rv.headers [ ' X-Foo ' ] == 'Testing ' SECRET_KEY = 'devkey ' assert rv.data.strip ( ) == 'Admin File ' flask.Flask ( __name__ , instance_path='instance ' ) assert rv.data.split ( ) == [ '42 ' , '23 ' , 'False ' , 'aha ' ] rv = flask.make_response ( ) def index2 ( ) : finally : SECRET_KEY = 'devkey ' assert flask.url_for ( 'admin.static ' , filename='test.txt ' ) \ return 'Outside ' t.start ( ) flask.request_started.connect ( before_request_signal , app ) 'after-signal ' ] { { session.test } } app.register_blueprint ( bp , url_prefix='/1 ' , url_defaults= { 'bar ' : 23 } ) app.config.from_envvar ( 'FOO_SETTINGS ' ) @ admin.app_errorhandler ( 500 ) return 'test index ' 'myapp-instance ' ) ) assert rv.data == 'Foo ' @ app.route ( '/foo ' ) self.jinja_env.globals [ 'foo ' ] = '42 ' assert isinstance ( e , ValueError ) if flask.signals_available : self.assert_equal ( c.get ( '/2/foo ' ) .data , u'19/42 ' ) assert str ( e ) == `` the server name provided `` + \ app.register_module ( module ) assert rv.data == 'Hello Custom World ! ' pass from subdomaintestmodule import mod assert 0 , 'expected exception ' bp = flask.Blueprint ( 'test ' , __name__ ) app.add_url_rule ( '/ ' , view_func=view ) return 'Foo SubDomain ' return { ' b ' : 2 } try : flask.flash ( u'Hello World ' , 'error ' ) def frontend_index ( ) : except Exception , e : self.assert_equal ( c.put ( '/ ' ) .status_code , 405 ) old_path = os.path assert c.get ( '/fail ' ) .status_code == 400 assert `` Expected ValueError '' content_type='application/json ' ) class Other ( Index ) : def frontend_page2 ( ) : assert app.jinja_env.filters [ 'my_reverse ' ] ( 'abcd ' ) == 'dcba ' # debug flag is set to true and an exception happens the context is def test_prefix_installed_paths ( self ) : os.path = ntpath def finish1 ( exc ) : assert rv.status_code == 500 def after_request_handler ( response ) : assert rv.data == ' < p > 23|42 ' == '/static/index.html ' self.assert_ ( ' A setup function was called ' in str ( e ) ) @ bp.route ( '/ ' ) self.common_object_test ( app ) assert rv.data == f.read ( ) resp = c.get ( '/other ' ) rv = c.get ( '/outside ' , 'http : //xtesting.localhost/ ' ) warnings.filters = filters [ : ] def new_function ( * args , * * kwargs ) : return flask.request.json calls.append ( 'after-handler ' ) def record ( sender , exception ) : ~~~~~~~~~~~~~~~ self.assert_equal ( c.get ( '/page/2 ' ) .data , ' 2 ' ) @ app.route ( '/ ' , subdomain='test ' ) def setUp ( self ) : rv = flask.send_file ( 'static/index.html ' ) rv = c.get ( '/ ' , 'http : //test.localhost/ ' ) return flask.render_template ( 'simple_template.html ' , whiskey=42 ) def meh ( ) : return 'Meh ' , 400 , { ' X-Foo ' : 'Testing ' } , 'text/plain ' self.app = app sys.stderr = old_stderr def test_max_content_length ( self ) : catched.append ( 'before-admin ' ) value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) rv = c.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) rv = c.post ( '/ ' ) view = Index.as_view ( 'index ' ) TEST_KEY = 'foo ' def suite ( ) : def from_unicode ( ) : setup_paths ( ) @ mod.route ( '/test ' ) rv = flask.send_file ( StringIO ( 'Test ' ) , as_attachment=True , class ViewTestCase ( FlaskTestCase ) : # testcase for a security issue that may exist on windows systems def test_config_missing ( self ) : assert 0 , 'expected exception ' def test_options_on_multiple_rules ( self ) : flask.abort ( 404 ) import types assert messages [ 1 ] == ( 'error ' , u'Hello World ' ) class ContextTestCase ( FlaskTestCase ) : assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' def dispatch_request ( self ) : assert rv.data == `` assert len ( log ) == 1 catched.append ( 'after-app ' ) rv = c.get ( '/test ' , 'http : //testing.localhost/ ' ) class ModifiedRequest ( flask.Request ) : assert len ( called ) == 1 class Test ( Base ) : c.get ( '/ ' ) @ app.route ( '/args ' ) def test_request_signals ( self ) : return flask.render_template_string ( `` ' app.logger.warning ( 'the standard library is dead ' ) app = flask.Flask ( __name__ ) @ bp.route ( '/ ' , defaults= { 'page ' : 1 } ) with app.test_request_context ( '/ ' , environ_overrides= { 'SERVER_NAME ' : 'localhost ' } ) : app.register_blueprint ( frontend ) def catch_warnings ( ) : # etags app.use_x_sendfile = False suite = unittest.TestSuite ( ) recorded.append ( exception ) with c.session_transaction ( ) as sess : self.assert_equal ( ctx.request.url , 'http : //localhost/ ' ) def test_init_jinja_globals ( self ) : def return_json ( ) : def test_send_file_object ( self ) : import re from jinja2 import TemplateNotFound def test_logger_cache ( self ) : t = Thread ( target=apprunner , args= ( config_key , ) ) # mimetypes + etag def test_request_locals ( self ) : def test_session_using_application_root ( self ) : def always_first ( ) : rv = app.test_client ( ) .get ( '/static/index.html ' ) except ( IOError , OSError ) : rv = c.post ( '/foo ' , data= { } , follow_redirects=True ) catched.append ( 'before-admin ' ) return flask.render_template ( 'index.html ' ) assert c.get ( '/ ' ) .data == '13 ' assert rv.data == 'Meh ' catched = [ ] assert app.config [ 'TEST_KEY ' ] == 'foo ' return resp self.fail ( 'Expected exception ' ) mod = flask.Module ( __name__ , 'frontend ' ) def test_trapping_of_bad_request_key_errors ( self ) : # make sure deprecation warnings are active in tests with flask.Flask ( __name__ ) .test_request_context ( ) : sideend = flask.Blueprint ( 'sideend ' , __name__ ) app.config [ 'APPLICATION_ROOT ' ] = '/foo ' return 'backend says no ' , 403 Rule ( '/bar ' , endpoint='bar ' ) , def test_template_filter_with_name_and_template ( self ) : def test_init_jinja_globals ( self ) : @ bp.route ( '/about ' ) mod.app = flask.Flask ( mod.__name__ ) flask.g.value assert rv == ' '' < \\u0000\\/script > '' ' meths = parse_set_header ( c.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) with catch_warnings ( ) as captured : app.wsgi_app = PrefixPathMiddleware ( app.wsgi_app , '/bar ' ) def test_prefix_installed_paths ( self ) : flask.abort ( 403 ) @ app.route ( '/error ' ) assert flask.url_for ( 'index ' , _external=True ) == 'http : //localhost.localdomain:5000/ ' class LoggingTestCase ( FlaskTestCase ) : : license : BSD , see LICENSE for more details . catched.append ( 'after-app ' ) app.request_class = ModifiedRequest Tests Flask itself . The majority of Flask is already tested from werkzeug.exceptions import NotFound def test_context_processors ( self ) : self.assert_equal ( app.instance_path , os.path.join ( here , 'test_apps ' , 'instance ' ) ) class BasicFunctionalityTestCase ( FlaskTestCase ) : self.assert_ ( 'http : //localhost/foo/ ' in str ( e ) ) from werkzeug.routing import Submount , Rule app.url_map.charset = 'euc-kr ' def test_exception_logging ( self ) : return 'index for % s ' % user unittest.main ( defaultTest='suite ' ) from flask.testsuite import FlaskTestCase , catch_warnings , catch_stderr return 'index ' return `` Ignored '' if trigger == 'after ' : assert rv.mimetype == 'application/octet-stream ' def return_dict ( ) : ) return 'request ' app.logger.debug ( 'this is a debug statement ' ) content_type='application/json ' ) c = app.test_client ( ) assert rv.status_code == 200 def test_enctype_debug_helper ( self ) : def test_custom_converters ( self ) : self.app = app def test_url_generation ( self ) : assert app.jinja_env.filters [ 'strrev ' ] ( 'abcd ' ) == 'dcba ' self.assertEqual ( sorted ( meths ) , [ 'DELETE ' , 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) called.append ( 4 ) from werkzeug.routing import Submount , Rule decorators = [ add_x_parachute ] def test_teardown_request_handler_debug_mode ( self ) : def setup_path ( ) : os.path = old_path self.assertEqual ( rv.headers [ ' X-Parachute ' ] , 'awesome ' ) self.assert_equal ( c.get ( '/de/ ' ) .data , '/de/about ' ) return flask.render_template_string ( `` ' assert rv.data == 'Test ' # not torn down . This causes other tests that run after this fail mod = types.ModuleType ( 'myapp ' ) from jinja2 import DictLoader return u'Hällo Wörld ' def test_egg_installed_paths ( self ) : Tests Flask itself . The majority of Flask is already tested suite.addTest ( unittest.makeSuite ( SubdomainTestCase ) ) rv = app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost.localdomain ' ) return 'Hello World ' evts = [ ] else : return flask.request.method assert 'WARNING in flask_tests [ ' in out response.data = 'stuff ' def index_put ( ) : assert 'Modules are deprecated ' in str ( entry [ 'message ' ] ) with catch_warnings ( ) as captured : app.test_client ( ) .get ( '/ ' ) # stack otherwise and we want to ensure that this is not the case mod.__file__ = os.path.join ( package_path , '__init__.py ' ) suite.addTest ( unittest.makeSuite ( LoggingTestCase ) ) assert flask.has_request_context ( ) SECRET_KEY='foo ' , suite.addTest ( unittest.makeSuite ( ModuleTestCase ) ) return 'Awesome ' import ntpath assert ' 1/0 ' in err assert rv.data == 'Foo SubDomain ' def test_teardown_on_pop ( self ) : def foo ( ) : class Test ( Base ) : def root ( ) : self.assertEqual ( rv.data , 'http : //localhost/ ' ) def test_module_subdomain_support ( self ) : except ValueError , e : return new_function assert app.logger is not logger1 flask.flash ( u'Hello World ' , 'error ' ) assert flask.json.loads ( rv.data ) == d def test_safe_access ( self ) : app.add_url_rule ( '/ ' , 'index ' , index ) frontend = flask.Blueprint ( 'myapp.frontend ' , __name__ ) def from_string ( ) : def test_context_processors ( self ) : assert 'internal server error ' == rv.data `` No ValueError exception should have been raised \ '' % s\ '' '' % e rv = c.get ( '/error ' ) assert rv.status_code == 200 permanent = False def __init__ ( self , app , prefix ) : import warnings def end_of_request ( exception ) : backend = flask.Blueprint ( 'backend ' , __name__ ) rv = c.head ( '/ ' ) with app.open_resource ( 'static/index.html ' ) as f : def after1 ( response ) : assert c.get ( '/ ' ) .data == '42 ' def test_teardown_request_handler_debug_mode ( self ) : assert flask.url_for ( 'hello ' , name='test x ' ) == '/hello/test % 20x ' calls.append ( 'before-handler ' ) suite.addTest ( other_suite ) suite.addTest ( unittest.makeSuite ( ContextTestCase ) ) return unicode ( bar ) def more ( ) : def not_found ( e ) : def error ( ) : def test_enctype_debug_helper ( self ) : assert c.get ( '/ ' ) .data == 'the index ' app.use_x_sendfile = True with catch_warnings ( ) as log : assert rv.data == 'Hello from the Frontend ' # make sure deprecation warnings are active in tests assert catched == [ 'before-app ' , 'after-app ' ] assert 'after ' not in evts f = open ( os.path.join ( app.root_path , 'static/index.html ' ) ) assert resp.data == 'Hello World ! ' 1 // 0 return 'the admin ' SECRET_KEY = 'devkey ' flask.g.value = 23 def test_routing_redirect_debugging ( self ) : assert `` Expected ValueError '' if trigger == 'before ' : with app.open_resource ( 'static/index.html ' ) as f : return 'DELETE ' rv = c.get ( '/admin/static/css/test.css ' ) assert app.config.from_envvar ( 'FOO_SETTINGS ' ) def other ( ) : assert rv.data == ' < p > 23|42 ' catched.append ( 'before-app ' ) def internal_server_error ( e ) : template , context = recorded [ 0 ] # config keys used for the ConfigTestCase import sys recorded.append ( exception ) return flask.url_for ( 'about ' , lang_code='en ' ) @ app.route ( '/ ' , methods= [ 'PUT ' ] ) messages = flask.get_flashed_messages ( ) rv = flask.send_file ( 'static/index.html ' , as_attachment=True ) def after_admin_request ( response ) : rv = app.test_client ( ) .get ( u'/ ? foo=정상처리'.encode ( 'euc-kr ' ) ) flask.session [ 'value ' ] = flask.request.form [ 'value ' ] def admin_login ( ) : assert c.post ( '/more ' ) .data == 'POST ' assert not rv.data # head truncates assert app.secret_key == 'devkey ' class MyException ( Exception ) : example_path = os.path.join ( os.path.dirname ( __file__ ) , app.debug = False with flask.Flask ( __name__ ) .test_request_context ( ) : def test_basic_module ( self ) : assert messages [ 0 ] == u'Hello World ' add_to_path ( os.path.join ( example_path , 'minitwit ' ) ) assert len ( messages ) == 3 called.append ( True ) value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) return 'admin login ' attachment_filename='index.txt ' , f ( ' .. \\__init__.py ' ) with app.test_request_context ( ) : assert rv.data == '42 ' def test_endpoint_decorator ( self ) : def test_teardown_on_pop ( self ) : def test_send_file_object ( self ) : @ app.route ( '/add ' , methods= [ 'POST ' ] ) class DeprecationsTestCase ( FlaskTestCase ) : flask.testsuite.config app = flask.Flask ( __name__ ) def working ( ) : def test_static_files ( self ) : return 'Meh ' , 400 , { ' X-Foo ' : 'Testing ' } , 'text/plain ' @ app.route ( '/fail ' , methods= [ 'POST ' ] ) assert rv.data == 'Outside ' raise AssertionError ( 'some kind of exception expected ' ) @ app.route ( '/test ' ) with app.test_request_context ( '/ ? name=World ' ) : assert isinstance ( e , MyException ) f ( * args , * * kwargs ) def new_f ( * args , * * kwargs ) : buffer.append ( exception ) calls.append ( 'handler ' ) assert False , 'expected exception ' return 'POST ' match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) def before_request_signal ( sender ) : app.view_functions [ 'index ' ] = index except AssertionError , e : app.route ( '/ ' , methods= [ 'OPTIONS ' ] ) ( index2 ) index.provide_automatic_options = False del catched [ : ] assert 'set-cookie ' in rv.headers def test_dotted_names ( self ) : def return_json ( ) : self.assert_equal ( app.test_client ( ) .get ( '/foo ' ) .data , 'Meh ' ) def something_else ( ) : from flask.debughelpers import DebugFilesKeyError app.register_blueprint ( bp , url_prefix='/1 ' , url_defaults= { 'bar ' : 23 } ) flask.testsuite.deprecations `` `` '' Catch stderr in a StringIO '' '' '' def test_context_binding ( self ) : == '/admin/static/test.txt ' app.config.update ( SERVER_NAME='localhost.localdomain:443 ' ) from subdomaintestmodule import mod @ frontend.route ( '/frontend-no ' ) from minitwit_tests import MiniTwitTestCase module = Module ( __name__ , __name__ ) except IOError , e : def to_url ( self , value ) : assert 0 , 'expected exception ' def test_config_from_object ( self ) : 'after-signal ' ] def test_extended_flashing ( self ) : def add_x_parachute ( f ) : def inject_admin ( ) : `` server name from the WSGI environment ( 'foo.localhost ' ) '' , str ( e ) warnings.simplefilter ( 'default ' , DeprecationWarning ) app.wsgi_app = PrefixPathMiddleware ( app.wsgi_app , '/bar ' ) except Exception , e : assert type ( exc ) == ZeroDivisionError assert False return 'normal index ' 'handler ' , 'after-handler ' , class Index ( flask.views.MethodView ) : return flask.session [ 'value ' ] def test_config_from_class ( self ) : flask.got_request_exception.connect ( record , app ) test_modified_url_encoding = None assert rv.mimetype == 'text/plain ' flask.g.something = 'value ' expected_prefix = os.path.abspath ( 'foo ' ) if flask.json_available : assert c.get ( '/ ' ) .status_code == 500 f = app.view_functions [ 'admin.static ' ] package_path = os.path.join ( expected_prefix , 'lib ' , 'python2.5 ' , 'after-admin ' , 'after-app ' ] # - * - coding : utf-8 - * flask.session [ 'testing ' ] = 42 called.append ( 1 ) assert macro ( 'World ' ) == 'Hello World ! ' assert flask.g.value == 42 self.assertEqual ( c.get ( '/de/ ' ) .data , '/de/about ' ) assert flask.url_for ( 'sub ' , _external=True ) == 'http : //foo.localhost.localdomain:5000/ ' flask.request.form [ 'missing_key ' ] assert rv.status_code == 404 rv = c.get ( '/static/hello.txt ' , 'http : //foo.example.com/ ' ) def test_request_dispatching ( self ) : finally : class ModifiedRequest ( flask.Request ) : TEST_KEY = 'foo ' return s [ : :-1 ] suite.addTest ( unittest.makeSuite ( ModuleTestCase ) ) Rule ( '/ ' , endpoint='index ' ) self.assert_equal ( rv.status_code , 400 ) assert rv.status_code == 405 SERVER_NAME='example.com:8080 ' assert c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data == 'value set ' rv = render ( ' { { `` < \0/script > '' |tojson|safe } } ' ) index2.provide_automatic_options = True # when they expect no exception on the stack . self.fail ( 'Expected value error ' ) 1/0 `` `` '' Catch warnings in a with block in a list '' '' '' def test_test_client_context_binding ( self ) : assert rv.headers [ ' x-sendfile ' ] == \ suite.addTest ( unittest.makeSuite ( SendfileTestCase ) ) Blueprints ( and currently modules ) self.teardown ( ) else : def index ( ) : def index ( args ) : assert expires.day == expected.day except Exception : raise MyException ( ) expected_prefix = os.path.abspath ( sys.prefix ) self.assert_ ( 'Make sure to directly send your POST-request ' suite.addTest ( unittest.makeSuite ( TestToolsTestCase ) ) == '/static/index.html ' def catch_warnings ( ) : app = MyFlask ( __name__ ) # to not negatively affect other tests . text = ' < p > Hello World ! ' assert app.config.from_envvar ( 'FOO_SETTINGS ' ) env = os.environ backend = flask.Blueprint ( 'myapp.backend ' , __name__ ) assert c.get ( '/backend-no ' ) .data == 'backend says no ' return `` def test_method_based_view ( self ) : assert app.logger is logger1 return app.jinja_env.globals [ 'foo ' ] self.assertEqual ( c.get ( '/fe ' ) .data.strip ( ) , '/be ' ) warnings.showwarning = showwarning app.config [ 'TRAP_HTTP_EXCEPTIONS ' ] = True == '/admin/static/test.txt ' @ app.route ( '/dict ' ) with app.test_request_context ( '/ ' ) : os.path.dirname ( __file__ ) , 'test_apps ' ) ) ) sys.path.append ( os.path.join ( example_path , 'minitwit ' ) ) self.assertEqual ( rv.data , 'http : //example.com:1234/foo/ ' ) sys.path.append ( path ) flask.request.form [ 'myfile ' ] assert rv.data == 'normal index ' assert expires.month == expected.month flask.got_request_exception.connect ( record , app ) rv = c.post ( '/add ' , data=flask.json.dumps ( { ' a ' : 1 , ' b ' : 2 } ) , def before_admin_request ( ) : @ backend.route ( '/be ' ) def teardown ( self ) : assert flask.render_template_string ( ' { { foo } } ' , values.setdefault ( 'lang_code ' , flask.g.lang_code ) assert app.jinja_env.filters [ 'strrev ' ] ( 'abcd ' ) == 'dcba ' assert msg.startswith ( ' [ Errno 2 ] Unable to load configuration ' return { 'injected_value ' : 42 } Template functionality def test_late_binding ( self ) : test_suite='__main__.run_tests ' assert app.logger is not logger1 import os , sys flask.session [ 'test ' ] = 'aha ' os.path.join ( expected_prefix , 'var ' , rv = flask.send_file ( 'static/index.html ' ) assert 'path=/bar ' in rv.headers [ 'set-cookie ' ] .lower ( ) return 'success ' from flask.testsuite import FlaskTestCase rv = client.get ( '/ ' ) def test_url_processors ( self ) : def test_max_content_length ( self ) : def test_werkzeug_routing ( self ) : return 'application itself says no ' , 403 suite.addTest ( unittest.makeSuite ( BlueprintTestCase ) ) return 'Hello World ' def setup_paths ( ) : app.config.update ( SERVER_NAME='localhost.localdomain ' ) def not_found ( e ) : self.assertEqual ( repr ( flask.g ) , ' < LocalProxy unbound > ' ) assert index ( ) == 'Hello World ! ' assert sorted ( rv.allow ) == [ 'OPTIONS ' ] @ app.before_request def expect_exception ( f , * args , * * kwargs ) : def test_url_processors ( self ) : got = [ ] assert rv.data == 'Hello from the Admin ' rv = c.get ( '/ ' , 'http : //mitsuhiko.localhost/ ' ) assert 'ConfigTestCase ' not in app.config : license : BSD , see LICENSE for more details . def attach_something ( ) : assert flask.render_template ( 'mail.txt ' , foo= ' < test > ' ) \ rv = c.get ( '/ ' , 'http : //localhost/ ' ) self.assert_ ( 'Session backend did not open a session ' in str ( e ) ) assert flask.url_for ( 'hello ' , name='test x ' , _external=True ) \ assert c.get ( '/frontend-no ' ) .data == 'frontend says no ' def test_test_app_proper_environ ( self ) : rv = client.get ( '/test ' ) The basic functionality . app.config [ 'APPLICATION_ROOT ' ] = '/foo ' assert isinstance ( recorded [ 0 ] , ZeroDivisionError ) app.config.from_pyfile ( 'missing.cfg ' ) def test_context_processing ( self ) : def ensure_clean_request_context ( self ) : 'site-packages ' , 'MyApp.egg ' , 'myapp ' ) from moduleapp import app as moduleapp def test_missing_session ( self ) : finally : assert rv.data.strip ( ) == '/ * nested file * / ' def iter_suites ( ) : rv = flask.send_file ( f , as_attachment=True ) example_path = os.path.join ( os.path.dirname ( __file__ ) , ' .. ' , 'examples ' ) assert called == [ 1 , 2 , 3 , 4 , 5 , 6 ] @ app.route ( '/fail ' ) 'site-packages ' , 'myapp.py ' ) assert rv.mimetype == 'text/plain ' def run_tests ( ) : except AssertionError , e : return 'bar ' def emits_module_deprecation_warning ( f ) : def test_macros ( self ) : self.assert_equal ( templates , [ 'admin/index.html ' , assert rv.data == 'True ' `` server name from the WSGI environment ( 'foo.localhost ' ) '' , str ( e ) def test_session_using_server_name ( self ) : assert 'httponly ' in rv.headers [ 'set-cookie ' ] .lower ( ) def test_view_patching ( self ) : def before1 ( ) : return new_function def finish2 ( exc ) : def pull_lang_code ( endpoint , values ) : with catch_warnings ( ) as log : def return_dict ( ) : @ app.route ( '/ ' , methods= [ 'GET ' , 'POST ' ] ) self.assertEqual ( rv.status_code , 400 ) @ admin.app_context_processor class BetterIndex ( Index ) : assert 'Response ' in rv.data return 'Outside ' except RuntimeError , e : return 'the admin ' assert rv.data == 'Awesome ' assert calls == [ 'before-signal ' , 'before-handler ' , assert c.get ( '/string ' ) .data == u'Hällo Wörld'.encode ( 'utf-8 ' ) def showwarning ( message , category , filename , lineno , file=None , line=None ) : return 'not found ' , 404 def test_send_file_regular ( self ) : log = [ ] calls.append ( 'handler ' ) evts.append ( 'before ' ) with c.session_transaction ( ) as sess : resp = c.get ( '/ ' , data=u ' '' Hällo Wörld '' '.encode ( 'iso-8859-15 ' ) , assert 'after ' in evts def super_reverse ( s ) : @ app.route ( '/accept ' , methods= [ 'POST ' ] ) called.append ( 5 ) flask.template_rendered.disconnect ( record , app ) app.config.update ( SERVER_NAME='localhost:80 ' ) backend = flask.Blueprint ( 'myapp.backend ' , __name__ ) assert flask._request_ctx_stack.top is None == ' < test > Mail ' return s [ : :-1 ] assert 'ZeroDivisionError : ' in err app.config.from_pyfile ( 'flask_tests.py ' ) assert rv.data == 'Awesome ' with c.session_transaction ( ) as sess : called.append ( 3 ) return 'DELETE ' return flask.url_for ( '.frontend_index ' ) assert app.jinja_env.filters [ 'strrev ' ] == my_reverse ctx.pop ( ) def test_blueprint_url_definitions ( self ) : 'frontend/index.html ' ] ) expect_exception ( flask.session.__setitem__ , 'foo ' , 42 ) self.assert_equal ( c.get ( '/fe2 ' ) .data.strip ( ) , '/fe ' ) @ app.route ( '/ ' , subdomain='foo ' ) self.assert_equal ( got , [ 42 ] ) @ frontend.errorhandler ( 403 ) html=flask.Markup ( text ) ) def test_json_body_encoding ( self ) : if flask.json_available : admin = flask.Module ( __name__ , 'admin ' ) @ bp.url_value_preprocessor return flask.render_template ( 'index.html ' ) assert index ( ) == 'Hello World ! ' def test_request_exception_signal ( self ) : Signalling . def test_trapping_of_all_http_exceptions ( self ) : def something ( page ) : `` `` '' Catch warnings in a with block in a list '' '' '' test_suite='flask.testsuite.suite ' { { g.foo } } mod.app = flask.Flask ( mod.__name__ ) flask.testsuite.templating assert isinstance ( recorded [ 0 ] , ZeroDivisionError ) app.add_url_rule ( '/ ' , view_func=view ) called = [ ] flask.session.permanent = permanent @ app.before_first_request assert flask.session.get ( 'missing_key ' ) is None index ( ) def test_send_file_xsendfile ( self ) : assert value == 'attachment ' app.register_blueprint ( bp , url_prefix='/2 ' , url_defaults= { 'bar ' : 19 } ) assert rv.data == 'Outside ' def test_module_static_path_subdomain ( self ) : os.environ = { } def test_blueprint_specific_error_handling ( self ) : assert context [ 'whiskey ' ] == 42 assert messages [ 0 ] == ( 'message ' , u'Hello World ' ) assert len ( captured ) == 2 try : from flask.testsuite import add_to_path assert flask.url_for ( 'frontend.index ' ) == '/ ' except ImportError : calls.append ( 'before-handler ' ) class Base ( object ) : return unicode ( flask.request.json ) flask.flash ( flask.Markup ( u ' < em > Testing < /em > ' ) , 'warning ' ) def test_basic_view ( self ) : suite.addTest ( unittest.makeSuite ( ViewTestCase ) ) return flask.render_template ( 'escaping_template.html ' , text=text , def test_template_rendered ( self ) : class TemplatingTestCase ( FlaskTestCase ) : return flask.render_template ( 'template_filter.html ' , value='abcd ' ) @ app.route ( '/foo ' ) flask.g.lang_code = values.pop ( 'lang_code ' ) app.register_blueprint ( backend ) self.assertEqual ( mod.app.instance_path , self.fail ( 'Expected exception ' ) def common_object_test ( self , app ) : app.testing = True except AssertionError , e : return flask.url_for ( 'myapp.backend.backend_index ' ) return flask.request.url assert rv.data == 'not found ' d = dict ( a=23 , b=42 , c= [ 1 , 2 , 3 ] ) return 'backend says no ' , 403 from blueprintapp import app with c.session_transaction ( ) as sess : assert c.get ( '/admin/login ' ) .data == 'admin login ' def test_debug_log ( self ) : flask.g.value def fail ( ) : c = app.test_client ( ) def test_installed_package_paths ( self ) : resp = c.get ( '/ ' ) rv = app.test_client ( ) .get ( '/static/index.html ' ) ctx.pop ( ) pass @ admin.context_processor return flask.render_template_string ( ' { { config } } ' , config=42 ) evts.append ( 'after ' ) flask.abort ( 404 ) @ app.after_request @ emits_module_deprecation_warning assert resp.status_code == 500 err = out.getvalue ( ) def test_templates_and_static ( self ) : for trigger in 'before ' , 'after ' : return '42 ' app.register_blueprint ( frontend ) def index ( ) : def test_json_bad_requests ( self ) : def record ( sender , template , context ) : flask.flash ( u'Hello World ' ) return 'Hello World ! ' `` ( 'localhost.localdomain:5000 ' ) does not match the `` + \ return 'index ' assert sorted ( rv.allow ) == [ 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' , 'PUT ' ] called = [ ] assert resp.data == u'Hällo Wörld'.encode ( 'utf-8 ' ) self.assert_ ( req is flask.request._get_current_object ( ) ) self.assertEqual ( templates , [ 'admin/index.html ' , assert meh ( ) == 'http : //localhost/meh ' assert c.post ( '/more ' ) .data == 'POST ' flask.session.modified = False flask.session [ 'testing ' ] = 42 self.common_test ( app ) suite.addTest ( unittest.makeSuite ( DeprecationsTestCase ) ) app = flask.Flask ( __name__ ) class ModuleTestCase ( FlaskTestCase ) : from werkzeug.http import parse_set_header def backend_index ( ) : def test_werkzeug_routing ( self ) : return flask.render_template ( 'context_template.html ' , value=23 ) SERVER_NAME='localhost.localdomain:5000 ' ' '' ) resp = c.get ( '/ ' ) import os app = MyFlask ( __name__ ) rv = c.delete ( '/more ' ) self.prefix = prefix bp = flask.Blueprint ( 'frontend ' , __name__ , url_prefix='/ < lang_code > ' ) assert messages [ 0 ] == ( 'message ' , u'Hello World ' ) def test_config_from_object ( self ) : def test_session_using_application_root ( self ) : assert 'before ' in evts def test_teardown_request_handler_error ( self ) : 'file ( No such file or directory ) : ' ) self.assert_ ( app.got_first_request ) for entry in log : return '42 ' def test_session_transactions ( self ) : f ( self , * args , * * kwargs ) def from_string ( ) : class Index ( flask.views.View ) : old_showwarning = warnings.showwarning from flask.debughelpers import DebugFilesKeyError return { ' b ' : 2 } if flask.signals_available : def return_kwargs ( ) : assert c.get ( '/more ' ) .data == 'GET ' def test_missing_session ( self ) : def expect_exception ( f , * args , * * kwargs ) : return flask.request.args [ 'foo ' ] app.logger.addHandler ( StreamHandler ( out ) ) assert rv.data == 'Hello Server Error ' return DictLoader ( { 'index.html ' : 'Hello Custom World ! ' } ) except AssertionError , e : app = flask.Flask ( __name__ , instance_path=here ) app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) import unittest self.assert_equal ( rv.data , 'http : //localhost/ ' ) def test_exception_propagation ( self ) : `` `` '' def test_error_handling ( self ) : assert flask.g.value == 42 from werkzeug.routing import BaseConverter class SignalsTestCase ( FlaskTestCase ) : def handle_my_exception ( e ) : assert flask.session.modified @ app.url_defaults self.assertEqual ( c.get ( '/be ' ) .data.strip ( ) , '/fe ' ) import types assert 'Exception on / [ GET ] ' in err def __init__ ( self , app , prefix ) : attachment_filename='index.txt ' , log.append ( locals ( ) ) sys.modules [ 'myapp ' ] = mod assert 'path=/bar ' in rv.headers [ 'set-cookie ' ] .lower ( ) match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) f ( ' .. /__init__.py ' ) assert not app.config.from_pyfile ( 'missing.cfg ' , silent=True ) view = Index.as_view ( 'index ' ) assert expires.year == expected.year def foo ( ) : assert index ( ) == 'Hello World ! ' except : from __future__ import with_statement def showwarning ( message , category , filename , lineno , file=None , line=None ) : ] return flask.url_for ( '.frontend_index ' ) assert rv.status_code == 500 pass def foo ( ) : self.assertEqual ( ctx.request.url , 'http : //example.com:1234/foo/ ' ) req = flask.request._get_current_object ( ) assert options [ 'filename ' ] == 'index.html ' warnings.showwarning = showwarning called.append ( 4 ) self.common_test ( app ) self.assert_equal ( sorted ( meths ) , [ 'DELETE ' , 'GET ' , 'HEAD ' , 'OPTIONS ' , 'POST ' ] ) finally : def test_modified_url_encoding ( self ) : assert c.get ( '/admin/ ' ) .data == 'the admin ' assert not flask.has_request_context ( ) def test_basic_support ( self ) : self.common_object_test ( app ) called.append ( 5 ) def add_x_parachute ( f ) : assert c.get ( '/admin/ ' ) .data == 'the admin ' flask.request_started.disconnect ( before_request_signal , app ) flask.session [ 'value ' ] = flask.request.form [ 'value ' ] def from_unicode ( ) : app.config [ 'MAX_CONTENT_LENGTH ' ] = 64 app.config [ 'SERVER_NAME ' ] = 'example.com:1234 ' rv = c.head ( '/ ' ) app.config.update ( SERVER_NAME='localhost.localdomain ' ) expect_exception ( flask.session.pop , 'foo ' ) import os got.append ( 42 ) flask.request.form [ 'myfile ' ] TEST_KEY = 'foo ' return flask.url_for ( 'about ' ) app.config [ 'SERVER_NAME ' ] = 'example.com ' assert 0 , 'expected config ' lines = app.test_client ( ) .get ( '/ ' ) .data.splitlines ( ) def bar ( bar ) : if __name__ == '__main__ ' : messages = flask.get_flashed_messages ( ) return flask.url_for ( '.index ' ) rv = app.test_client ( ) .get ( '/ ' ) assert meh ( ) == 'http : //localhost/meh ' meths = parse_set_header ( c.open ( '/ ' , method='OPTIONS ' ) .headers [ 'Allow ' ] ) app.secret_key = 'testing ' assert rv == 'request|after ' def test_template_escaping ( self ) : def before2 ( ) : def test_environ_defaults ( self ) : assert flask.url_for ( 'static ' , filename='index.html ' ) \ sys.stderr = old_stderr rv = c.get ( '/foo ' , data= { } , follow_redirects=True ) def test_routing_redirect_debugging ( self ) : del catched [ : ] == ' < test > Mail ' def test_session_expiration ( self ) : sys.path.append ( os.path.join ( os.path.dirname ( __file__ ) , 'tests ' ) ) def test_session_transactions_no_null_sessions ( self ) : ctx = app.test_request_context ( '/ ? name=World ' ) assert flask.render_template ( 'nested/nested.txt ' ) == ' I\ 'm nested ' flask.flash ( 'Zap ' ) except RuntimeError : def index2 ( ) : except : import os class JSONTestCase ( FlaskTestCase ) : assert app.jinja_env.filters [ 'strrev ' ] == my_reverse with app.open_resource ( 'static/index.html ' ) as f : with app.test_request_context ( '/meh ' ) : def bar ( bar ) : Test client and more . rv = c.post ( '/accept ' , data= { 'myfile ' : 'foo ' * 100 } ) suite.addTest ( unittest.makeSuite ( LoggingTestCase ) ) assert expires.day == expected.day flask.testsuite.views def after_admin_request ( response ) : rv = flask.make_response ( ) assert rv.data == 'dcba ' @ app.route ( '/kw ' ) try : return unicode ( flask.session [ 'foo ' ] ) return 'Test ' flask.abort ( 403 ) app.url_map.is_endpoint_expecting ( endpoint , 'lang_code ' ) : ~~~~~~~~~~~~~~~~~~~~~ messages = flask.get_flashed_messages ( with_categories=True ) return 'normal index ' assert e.args and 'session is unavailable ' in e.args [ 0 ] app.register_module ( admin ) def test_error_handling ( self ) : out = err.getvalue ( ) except DebugFilesKeyError , e : else : permanent = True # with statement is important because we leave an exception on the return flask.session [ 'value ' ] @ app.endpoint ( 'bar ' ) def test_url_mapping ( self ) : self.assertEqual ( rv.data , 'Awesome ' ) content_type='application/json ; charset=iso-8859-15 ' ) expires = parse_date ( match.group ( ) ) with catch_warnings ( ) as captured : from flask.testsuite import FlaskTestCase , emits_module_deprecation_warning rv = render ( ' { { `` < \0/script > '' |tojson|safe } } ' ) assert isinstance ( e , ValueError ) app.logger_name = 'flask_tests/test_exception_logging ' # etags return 'Aha ! ' assert list ( flask.get_flashed_messages ( ) ) == [ 'Zap ' , 'Zip ' ] return value.split ( ' , ' ) f = open ( os.path.join ( app.root_path , 'static/index.html ' ) ) # with statement is important because we leave an exception on the app.config [ 'SERVER_NAME ' ] = 'example.com ' ' & lt ; p & gt ; Hello World ! ' , app.use_x_sendfile = False assert sorted ( rv.allow ) == [ 'OPTIONS ' ] def test_custom_template_loader ( self ) : suite.addTest ( unittest.makeSuite ( SendfileTestCase ) ) def sideend_no ( ) : return 'ignored anyway ' f ( * args , * * kwargs ) def test_exception_propagation ( self ) : def test_request_dispatching ( self ) : # testing flask internally in debug mode in a few cases from flaskr_tests import FlaskrTestCase # testcase for a security issue that may exist on windows systems def foo ( ) : def catch_stderr ( ) : def backend_forbidden ( e ) : app.config [ 'SERVER_NAME ' ] = 'localhost ' assert rv.data == f.read ( ) def backend_index ( ) : import re assert False , 'expected exception ' app.add_url_rule ( '/ ' , 'index ' , index ) assert False def test_trapping_of_bad_request_key_errors ( self ) : url_charset = 'euc-kr ' assert rv.data == f.read ( ) def before_request_signal ( sender ) : rv = c.get ( '/admin/ ' ) def test_options_on_multiple_rules ( self ) : with app.test_request_context ( '/ ? name=World ' ) : filters = warnings.filters def return_something ( error ) : index ( ) return 'the index ' assert messages [ 2 ] == flask.Markup ( u ' < em > Testing < /em > ' ) assert c.get ( '/backend-no ' ) .data == 'backend says no ' app.logger_name = 'flask_tests/test_exception_logging ' assert not app.config.from_pyfile ( 'missing.cfg ' , silent=True ) self.assertEqual ( c.get ( '/1/bar ' ) .data , u'23 ' ) with app.test_request_context ( '/ ' , environ_overrides= { 'HTTP_HOST ' : 'localhost ' } ) : return { 'injected_value ' : 42 } assert c.get ( '/ ' ) .data == 'GET ' ctx.push ( ) if config_key is not None : return resp rv = flask.send_file ( 'static/index.html ' , as_attachment=True ) app.test_client ( ) .get ( '/ ' , 'http : //foo.localhost ' ) return flask.jsonify ( d ) flask.g.foo = 23 logger1 = app.logger assert rv.data == `` def test_processor_exceptions ( self ) : else : raise ValueError ( ~~~~~~~~~~~~~~~~~~~~~~ else : : copyright : ( c ) 2010 by Armin Ronacher . app.secret_key = 'testkey ' return unicode ( flask.request.json [ ' a ' ] + flask.request.json [ ' b ' ] ) assert c.get ( '/foo/ ' ) .data == 'index ' class Base ( object ) : assert c.post ( '/set ' , data= { 'value ' : '42 ' } ) .data == 'value set ' app.logger_name = __name__ + '/test_logger_cache ' called.append ( 6 ) f = app.view_functions [ 'admin.static ' ] self.assert_equal ( c.post ( '/ ' ) .data , 'POST ' ) def admin_login ( ) : 'to this URL ' in str ( e ) ) self.assert_ ( log , 'expected deprecation warning ' ) @ app.route ( '/json ' , methods= [ 'POST ' ] ) raise MyException ( ) from functools import update_wrapper def test_config_missing ( self ) : def context_processor ( ) : resp = flask.make_response ( f ( * args , * * kwargs ) ) def test_blueprint_url_definitions ( self ) : assert rv.data == u'정상처리'.encode ( 'utf-8 ' ) html=flask.Markup ( text ) ) assert log , 'expected deprecation warning ' self.assert_equal ( mod.app.instance_path , c.get ( '/ ' ) assert c.get ( '/what-is-a-sideend ' ) .data == 'application itself says no ' def other ( ) : methods = [ 'GET ' , 'POST ' ] def test_standard_context ( self ) : def test_macros ( self ) : pass assert 0 , 'expected exception ' def test_request_processing ( self ) : from werkzeug.routing import BaseConverter rv = app.test_client ( ) .get ( '/ ' , 'http : //localhost.localdomain:5000 ' ) assert resp.data == u'Hällo Wörld'.encode ( 'utf-8 ' ) return 'admin logout ' return unicode ( bar ) return 'Hello % s ! ' % flask.request.args [ 'name ' ] app.logger_name = __name__ + '/test_logger_cache ' app.view_functions [ 'index ' ] = index except KeyError , e : index2.provide_automatic_options = True self.assertEqual ( c.get ( '/de/about ' ) .data , '/de/ ' ) assert c.get ( '/1,2,3 ' ) .data == ' 1|2|3 ' assert resp.data == 'Hello World ! ' add_to_path ( os.path.abspath ( os.path.join ( assert template.name == 'simple_template.html ' assert app.secret_key == 'devkey ' assert flask.url_for ( 'sub ' , _external=True ) == 'http : //foo.localhost.localdomain:5000/ ' return str ( page ) with app.test_request_context ( ) : assert 'init_jinja_globals ' in str ( log [ 0 ] [ 'message ' ] ) from minitwit_tests import MiniTwitTestCase assert resp.status_code == 200 if os.path.samefile ( path , entry ) : def get ( self ) : def teardown_request2 ( exc ) : sys.modules [ 'myapp ' ] = mod def test_module_subdomain_support ( self ) : class BlueprintTestCase ( FlaskTestCase ) : value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) self.fail ( 'expected exception ' ) self.assertEqual ( c.get ( '/de/about ' ) .data , '/foo ' ) return flask.request.files [ 'foo ' ] .filename def test_url_generation ( self ) : for url in '/kw ' , '/dict ' : self.assertEqual ( c.get ( '/page/2 ' ) .data , ' 2 ' ) from flask.testsuite import FlaskTestCase , catch_warnings from datetime import datetime return 'ignored anyway ' assert 'Internal Server Error ' in rv.data return True os.environ = env for url in '/kw ' , '/dict ' : warnings.filters = filters return { ' a ' : 1 } def ensure_clean_request_context ( self ) : class ListConverter ( BaseConverter ) : app.register_module ( admin ) app.config.update ( SERVER_NAME='localhost.localdomain:443 ' ) def before_request_handler ( ) : app.config.update ( SERVER_NAME='localhost:80 ' ) for trigger in 'before ' , 'after ' : app.config.from_object ( __name__ ) self.assertEqual ( ctx.request.url , 'http : //localhost/ ' ) assert 'ConfigTestCase ' not in app.config flask.session.permanent = permanent def after2 ( response ) : def test_flashes ( self ) : assert rv == ' '' < \\/script > '' ' @ app.route ( '/ ' ) def test_uninstalled_package_paths ( self ) : f ( * args , * * kwargs ) app.config.from_pyfile ( __file__.rsplit ( ' . ' ) [ 0 ] + '.py ' ) assert rv.data == f.read ( ) def record ( sender , template , context ) : def dispatch_request ( self ) : c.get ( '/fail ' ) bp = flask.Blueprint ( 'bp ' , __name__ ) app.add_url_rule ( '/more ' , 'more ' , more , methods= [ 'GET ' , 'POST ' ] ) return 'Test ' assert called == [ 1 , 2 , 3 , 4 , 5 , 6 ] def test_send_file_xsendfile ( self ) : self.assertEqual ( c.get ( '/2/foo ' ) .data , u'19/42 ' ) assert c.get ( '/get ' ) .data == '42 ' if not has_encoding ( 'euc-kr ' ) : app.logger.debug ( 'this is a debug statement ' ) got.append ( 42 ) assert value == 'attachment ' def foo ( bar , baz ) : assert response.data == 'stuff ' self.fail ( 'Expected exception ' ) assert 0 , 'expected runtime error ' def test_template_filter_with_template ( self ) : @ frontend.route ( '/fe2 ' ) app.register_module ( admin , url_prefix='/admin ' ) ' & lt ; p & gt ; Hello World ! ' , @ mod.route ( '/outside ' , subdomain='xtesting ' ) @ app.route ( '/more ' , methods= [ 'GET ' , 'POST ' ] ) return 'bar ' def test_test_client_context_binding ( self ) : def add_language_code ( endpoint , values ) : resp = c.get ( '/ ' ) 'frontend/index.html ' ] ) @ app.errorhandler ( MyException ) assert messages [ 0 ] == u'Hello World ' class ConfigTestCase ( FlaskTestCase ) : macro = flask.get_template_attribute ( '_macro.html ' , 'hello ' ) assert rv.data == 'value ' def frontend_page2 ( ) : assert str ( e ) == 'View function did not return a response ' Rule ( '/ ' , endpoint='index ' ) self.assertEqual ( rv.data , ' [ 42 ] ' ) flask.testsuite.helpers if config_key is not None : with app.test_request_context ( '/ ' ) : assert template.name == 'simple_template.html ' def test_template_filter ( self ) : return True values.setdefault ( 'lang_code ' , flask.g.lang_code ) self.assertEqual ( c.get ( '/ ' ) .data , 'GET ' ) @ app.template_filter ( 'super_reverse ' ) def assert_equal ( self , x , y ) : def test_context_binding ( self ) : assert flask.json.loads ( rv.data ) == d assert e.name == 'missing.html ' pass c = app.test_client ( ) rv = c.get ( '/admin/static/test.txt ' ) yield rv app = flask.Flask ( __name__ , instance_path=here ) def something_else ( ) : suite.addTest ( unittest.makeSuite ( TemplatingTestCase ) ) flask.testsuite.signals resp.headers [ ' X-Parachute ' ] = 'awesome ' return flask.url_for ( 'about ' ) raise TypeError assert buffer == [ ] def finish2 ( exc ) : ) rv = c.get ( '/foo ' , data= { } , follow_redirects=True ) assert 'the standard library is dead ' in out with app.test_client ( ) as c : def test_view_inheritance ( self ) : assert ' x-sendfile ' in rv.headers assert rv.data == 'W00t ' self.assert_equal ( rv.headers [ ' X-Parachute ' ] , 'awesome ' ) class ConfigTestCase ( FlaskTestCase ) : self.assertEqual ( rv.data , 'success ' ) return flask.render_template ( 'escaping_template.html ' , text=text , def test_view_patching ( self ) : buffer = [ ] values.setdefault ( 'lang_code ' , flask.g.lang_code ) return flask.flash ( 'Zap ' ) os.environ = { 'FOO_SETTINGS ' : __file__.rsplit ( ' . ' ) [ 0 ] + '.py ' } `` ( 'localhost.localdomain:5000 ' ) does not match the `` + \ suite.addTest ( unittest.makeSuite ( SignalsTestCase ) ) assert ' 1/0 ' in err def test_none_response ( self ) : def test_templates_list ( self ) : app.add_url_rule ( '/ ' , view_func=Index.as_view ( 'index ' ) ) assert c.get ( '/frontend-no ' ) .data == 'frontend says no ' app.register_module ( admin , url_prefix='/admin ' ) if trigger == 'after ' : assert rv.mimetype == 'text/html ' assert rv.mimetype == 'application/octet-stream ' catched = [ ] assert catched == [ 'before-app ' , 'before-admin ' , assert rv.data == 'Awesome ' assert os.path.basename ( __file__.rsplit ( ' . ' ) [ 0 ] + '.py ' ) in out setup_path ( ) suite.addTest ( unittest.makeSuite ( ConfigTestCase ) ) assert not app.config.from_envvar ( 'FOO_SETTINGS ' , silent=True ) index.provide_automatic_options = False def index ( ) : return os.path.samefile ( x , y ) sys.modules [ 'myapp ' ] = None messages = flask.get_flashed_messages ( with_categories=True ) def after_request_signal ( sender , response ) : @ app.errorhandler ( 413 ) def test_session_transactions_keep_context ( self ) : assert macro ( 'World ' ) == 'Hello World ! ' assert rv.mimetype == 'text/html ' values.setdefault ( 'lang_code ' , flask.g.lang_code ) try : def test_user_error_handling ( self ) : def return_something ( error ) : app.register_blueprint ( bp , url_prefix='/2 ' , url_defaults= { 'bar ' : 19 } ) def setup ( self ) : @ module.endpoint ( 'index ' ) import codecs def my_reverse ( s ) : assert lines == [ def test_request_signals ( self ) : app.config.from_object ( Test ) rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com/ ' ) assert messages [ 2 ] == ( 'warning ' , flask.Markup ( u ' < em > Testing < /em > ' ) ) warnings.showwarning = old_showwarning assert rv.data == 'not found ' self.assert_ ( 'Session backend did not open a session ' in str ( e ) ) except KeyError , e : app = moduleapp def test_trapping_of_all_http_exceptions ( self ) : suite.addTest ( unittest.makeSuite ( MiniTwitTestCase ) ) assert isinstance ( e , BadRequest ) assert type ( exc ) == ZeroDivisionError def test_default_endpoint_name ( self ) : def inject_all_regualr ( ) : def before_request ( ) : assert flask.render_template_string ( ' { { foo } } ' , resp = c.get ( '/ ' ) app.add_url_rule ( '/more ' , 'more ' , more , methods= [ 'GET ' , 'POST ' ] ) def test_none_response ( self ) : assert rv.status_code == 200 def test_module_static_path_subdomain ( self ) : finally : return 'Meh ' def test_config_from_class ( self ) : app.test_client ( ) .get ( '/ ' ) self.assertFalse ( flask.g ) app.config.update ( SERVER_NAME='localhost ' ) assert rv.status_code == 404 assert rv.status_code == 400 @ bp.route ( '/bar ' ) def test_escaping ( self ) : assert 'after ' in evts f = StringIO ( 'Test ' ) assert resp.status_code == 200 class TemplatingTestCase ( FlaskTestCase ) : return 'admin index ' app = moduleapp warnings.simplefilter ( 'default ' , category=DeprecationWarning ) self.assert_ ( 'must be absolute ' in str ( e ) ) Flask Tests os.path = ntpath assert rv.data == 'Test ' return 'application itself says no ' , 403 def test_uninstalled_module_paths ( self ) : self.assertEqual ( c.get ( '/foo ' ) .data , '/en/about ' ) def test_method_based_view ( self ) : class Index ( flask.views.View ) : from contextlib import contextmanager def test_session_transactions_keep_context ( self ) : except LookupError : sys.stderr = rv = StringIO ( ) return update_wrapper ( new_f , f ) os.path.join ( app.root_path , 'static/index.html ' ) app.register_module ( mod ) self.assertEqual ( c.put ( '/ ' ) .status_code , 405 ) calls = [ ] suite.addTest ( unittest.makeSuite ( JSONTestCase ) ) from flask_tests import suite except Exception : # testing flask internally in debug mode in a few cases return unicode ( flask.request.json ) return flask.render_template ( 'simple_template.html ' , whiskey=42 ) def test_session_transactions_no_null_sessions ( self ) : def __call__ ( self , environ , start_response ) : return self.assertEqual ( x , y ) lines = app.test_client ( ) .get ( '/ ' ) .data.splitlines ( ) rv = app.test_client ( ) .get ( '/ ' ) .data def test_debug_mode_complains_after_first_request ( self ) : from datetime import datetime called.append ( 2 ) return unicode ( flask.session.permanent ) flask.request_started.disconnect ( before_request_signal , app ) t.start ( ) @ app.context_processor @ app.route ( '/ < list : args > ' ) return 'Awesome ' return flask.render_template_string ( ' { { a } } { { b } } { { c } } ' ) app.url_map.add ( Submount ( '/foo ' , [ return flask.render_template ( 'context_template.html ' , value=23 ) assert 'This was submitted : `` index.txt '' ' in str ( e )","['flask/testsuite/__init__.py', 'flask/testsuite/basic.py', 'flask/testsuite/blueprints.py', 'flask/testsuite/config.py', 'flask/testsuite/deprecations.py', 'flask/testsuite/examples.py', 'flask/testsuite/helpers.py', 'flask/testsuite/signals.py', '{tests => flask/testsuite}/static/index.html', '{tests => flask/testsuite}/templates/_macro.html', '{tests => flask/testsuite}/templates/context_template.html', '{tests => flask/testsuite}/templates/escaping_template.html', '{tests => flask/testsuite}/templates/mail.txt', '{tests => flask/testsuite}/templates/nested/nested.txt', '{tests => flask/testsuite}/templates/simple_template.html', '{tests => flask/testsuite}/templates/template_filter.html', 'flask/testsuite/templating.py', '{tests => flask/testsuite/test_apps}/blueprintapp/__init__.py', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/__init__.py', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/admin/__init__.py', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/admin/static/css/test.css', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/admin/static/test.txt', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/admin/templates/admin/index.html', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/frontend/__init__.py', '{tests => flask/testsuite/test_apps}/blueprintapp/apps/frontend/templates/frontend/index.html', 'flask/testsuite/test_apps/config_module_app.py', 'flask/testsuite/test_apps/config_package_app/__init__.py', '{tests => flask/testsuite/test_apps}/moduleapp/__init__.py', '{tests => flask/testsuite/test_apps}/moduleapp/apps/__init__.py', '{tests => flask/testsuite/test_apps}/moduleapp/apps/admin/__init__.py', '{tests => flask/testsuite/test_apps}/moduleapp/apps/admin/static/css/test.css', '{tests => flask/testsuite/test_apps}/moduleapp/apps/admin/static/test.txt', '{tests => flask/testsuite/test_apps}/moduleapp/apps/admin/templates/index.html', '{tests => flask/testsuite/test_apps}/moduleapp/apps/frontend/__init__.py', '{tests => flask/testsuite/test_apps}/moduleapp/apps/frontend/templates/index.html', '{tests => flask/testsuite/test_apps}/subdomaintestmodule/__init__.py', '{tests => flask/testsuite/test_apps}/subdomaintestmodule/static/hello.txt', 'flask/testsuite/testing.py', 'flask/testsuite/views.py', '{tests => scripts}/flaskext_test.py', 'setup.py', 'tests/flask_tests.py']",Split up testsuite and moved it to flask.testsuite . This fixes # 246
692,b209cd96f5865500c7002e127217fdf9ef9d2225,2011-08-17 06:05:57-07:00,"lot of very similar things . there : : : attr : ` ~flask.Flask ` object so you can read and write them from there : : ideally that file would be outside of the actual application package so that Configuration becomes more useful if you can configure from a file , and that experience : Here is an example configuration file : : you might want to change like toggling debug mode , the secret key , and a packaging and distributing your application possible via various package you can install the package with distribute ( : ref : ` distribute-deployment ` ) Applications need some kind of configuration . There are different things Applications need some kind of configuration . There are different settings Make sure to load the configuration very early on , so that extensions have ideally located outside the actual application package . This makes configuration that is always loaded and part of the version control , and a configuration file afterwards . be a separate configuration for a production server and one used during a little harder . There is no single 100 % solution for this problem in environment-specific things . general , but there are a couple of things you can keep in mind to improve a little harder . There is no one 100 % solution for this problem in # Example configuration Most applications need more than one configuration . There will at least general , but there are a couple of things you can do to improve that Configuration becomes more useful if you can store it in a separate file , during development . The easiest way to handle this is to use a default Most applications need more than one configuration . There should be at : attr : ` ~flask.Flask ` object so that you can read and write them from Make sure to load the configuration very early on so that extensions have development . The easiest way to handle this is to use a default Here is an example of a configuration file : : configuration that is always loaded and part of version control , and a handling tools ( : ref : ` distribute-deployment ` ) and finally modifying the experience : toggling the debug mode , setting the secret key , and other such and still modify that file afterwards . least separate configurations for the production server and the one used you might want to change depending on the application environment like",['docs/config.rst'],Merge pull request # 304 from plaes/config-docs
693,63876614b6734e6404f17c9d3d22b71b3f43d158,2011-08-09 16:16:04+02:00,Contains the parsed body of the JSON request if the mimetype of This requires Python 2.6 or an installed version of simplejson . the incoming data was ` application/json ` . This requires Python 2.6 parsed JSON data . parsed JSON data . Otherwise this will be ` None ` . or an installed version of simplejson . .. attribute : : json,"['docs/api.rst', 'flask/wrappers.py']",Removed second mention of json . This fixes # 290
694,505cd663cd75b5593a1c9db0eded5298bd67139a,2011-08-08 01:26:39+02:00,"_date_clean_re = re.compile ( r ' ( \d+ ) ( st|nd|rd|th ) ' ) .replace ( 'rd ' , ' ' ) .replace ( 'st ' , ' ' ) string = string.replace ( 'th ' , ' ' ) .replace ( 'nd ' , ' ' ) \ string = _date_clean_re.sub ( r'\1 ' , string )",['scripts/make-release.py'],Hopefully fixed release script date parsing thingy . This fixes # 299
695,a950f936875fcf7acd64e66273485f770b09c626,2011-08-05 07:16:28-07:00,"in a folder . While multiple blueprints can originate from the same folder , : attr : ` Blueprint.root_path ` property to see what 's the resource folder : : in a folder . While multiple blueprints can origin from the same folder , The folder is inferred from the second argument to : class : ` Blueprint ` which is usually ` __name__ ` . This argument specifies what logical Python The folder is infered from the second argument to : class : ` Blueprint ` which : attr : ` Blueprint.root_path ` property to see what the resource folder is : : is ususally ` __name__ ` . This argument specifies what logical Python",['docs/blueprints.rst'],Merge pull request # 297 from rascalmicro/master
696,7155f11a723695352323d484610b9a1c6798eb69,2011-08-05 12:35:41+02:00,"responses which however can make If it returns ` True ` for any exception the error handler for this try : exceptions but instead treat the # wants the traceback preserved in handle_http_exception . Of course app.config [ 'TRAP_BAD_REQUEST_KEY_ERRORS ' ] = True `` `` '' Checks if an HTTP exception should be trapped or not . By default through the exception stack . This is assert c.get ( '/fail ' ) .status_code == 400 # wants the traceback preserved in handle_http_exception . return False exc_type , exc_value , tb = sys.exc_info ( ) traceback . This is helpful for debugging implicitly raised HTTP self.fail ( 'Expected exception ' ) not execute the error handlers of HTTP else : from werkzeug.exceptions import NotFound exception like any other and bubble it key error if `` TRAP_BAD_REQUEST_KEY_ERRORS `` is set to ` True ` . It pass c = app.test_client ( ) return True exception is not called and it shows up as regular exception in the MethodNotAllowed if self.config [ 'TRAP_HTTP_EXCEPTIONS ' ] : flask.abort ( 404 ) bad request exceptions . By default deal with request specific data will exceptions . assert isinstance ( e , BadRequest ) HTTP exceptions and Bad Request Key Errors can now be trapped so that they # trap_http_exception method so that 's their fault then . except KeyError , e : `` TRAP_BAD_REQUEST_KEY_ERRORS `` Werkzeug 's internal data structures that `` TRAP_BAD_REQUEST_KEY_ERRORS `` , `` TRAP_HTTP_EXCEPTIONS `` these will be converted into 400 `` TRAP_HTTP_EXCEPTIONS `` If this is set to `` True `` Flask will .. versionadded : : 0.8 if self.config [ 'TRAP_BAD_REQUEST_KEY_ERRORS ' ] : this will return ` False ` for all exceptions except for a bad request return isinstance ( e , BadRequest ) and isinstance ( e , LookupError ) 'TRAP_BAD_REQUEST_KEY_ERRORS ' : False , app = flask.Flask ( __name__ ) 'MAX_CONTENT_LENGTH ' : None where you have to find out where an HTTP 'MAX_CONTENT_LENGTH ' : None , if isinstance ( e , HTTPException ) : 'TRAP_HTTP_EXCEPTIONS ' : False if isinstance ( e , HTTPException ) and not self.trap_http_exception ( e ) : `` `` '' c.get ( '/fail ' ) def test_trapping_of_bad_request_key_errors ( self ) : a regular traceback instead . app.testing = True assert exc_value is e assert exc_value is e def fail ( ) : This is called for all HTTP exceptions raised by a view function . app.config [ 'TRAP_HTTP_EXCEPTIONS ' ] = True raise special key errors that are also exception is coming from . def test_trapping_of_all_http_exceptions ( self ) : debugging some issues harder . If this flask.request.form [ 'missing_key ' ] helpful for hairy debugging situations exc_type , exc_value , tb = sys.exc_info ( ) from werkzeug.exceptions import NotFound , BadRequest # we can not prevent users from trashing it themselves in a custom MethodNotAllowed , BadRequest also returns ` True ` if `` TRAP_HTTP_EXCEPTIONS `` is set to ` True ` . def trap_http_exception ( self , e ) : except NotFound , e : show up normally in the traceback . config is set to `` True `` you will get","['CHANGES', 'docs/config.rst', 'flask/app.py', 'tests/flask_tests.py']",Added HTTP exception trapping . This should fix # 294
697,34c4709d0674607afb32d3ef48738cd0c8003769,2011-07-23 11:15:01-07:00,"Werkzeug server . See for more information . : func : ` werkzeug.serving.run_simple ` for more Werkzeug server . See : func : ` werkzeug.run_simple ` : func : ` werkzeug.create_environ ` for more information , this information . : func : ` werkzeug.test.EnvironBuilder ` for more information , this",['flask/app.py'],Merge pull request # 284 from SimonSapin/patch-2
698,e8e2e934096f36edd8e96d554d06c0e330d94913,2011-07-19 16:20:28-07:00,: raises : : class : ` ~werkzeug.exceptions.NotFound ` if the resulting path : raises : : class : ` ~werkzeug.exceptions.NotFound ` if the retsulting path can fill in . All the ` block ` tag does is to tell the template engine that a can fill in . All the ` block ` tag does is tell the template engine that a,"['docs/patterns/templateinheritance.rst', 'flask/helpers.py']",Merge pull request # 282 from callahad/master
699,eb6549d95a8e9c28f9e4b89c28e370124e7452b9,2011-06-28 07:09:21-07:00,"app.add_url_rule ( '/about ' , view_func=RenderTemplateView.as_view ( app.add_url_view ( '/myview ' , MyView.as_view ( 'myview ' ) ) app.add_url_view ( '/users/ ' , UserAPI.as_view ( 'users ' ) ) app.add_url_view ( '/about ' , RenderTemplateView.as_view ( app.add_url_rule ( '/users/ ' , view_func=UserAPI.as_view ( 'users ' ) ) app.add_url_rule ( '/myview ' , view_func=MyView.as_view ( 'myview ' ) )",['docs/views.rst'],Merge pull request # 262 from SimonSapin/patch-1
700,ccd5ced70e48515e222b84dccc8f21d32c864dcd,2011-06-27 09:40:45+02:00,"# chop of the port which is usually not supported by browsers def test_session_using_server_name_and_port ( self ) : return 'Hello World ' domain = ' . ' + self.config [ 'SERVER_NAME ' ] .rsplit ( ' : ' , 1 ) [ 0 ] domain = ' . ' + self.config [ 'SERVER_NAME ' ] ) rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com:8080/ ' ) assert 'httponly ' in rv.headers [ 'set-cookie ' ] .lower ( ) assert 'domain=.example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) flask.session [ 'testing ' ] = 42 SERVER_NAME='example.com:8080 ' app = flask.Flask ( __name__ ) def index ( ) : app.config.update ( SECRET_KEY='foo ' ,","['flask/app.py', 'tests/flask_tests.py']",Chop of ports for session cookies . This fixes # 253
701,ea7a1720779ab4680304d2bc9dffcb6f5c7f2798,2011-06-27 09:20:50+02:00,"self.assertEqual ( c.get ( '/be ' ) .data.strip ( ) , '/fe ' ) c = app.test_client ( ) frontend = flask.Blueprint ( 'myapp.frontend ' , __name__ ) backend = flask.Blueprint ( 'myapp.backend ' , __name__ ) def frontend_index ( ) : app.register_blueprint ( backend ) def backend_index ( ) : return self.url_rule.endpoint.split ( ' . ' , 1 ) [ 0 ] app.register_blueprint ( frontend ) return self.url_rule.endpoint.rsplit ( ' . ' , 1 ) [ 0 ] def frontend_page2 ( ) : return flask.url_for ( 'myapp.frontend.frontend_index ' ) self.assertEqual ( c.get ( '/fe2 ' ) .data.strip ( ) , '/fe ' ) app = flask.Flask ( __name__ ) return flask.url_for ( 'myapp.backend.backend_index ' ) def test_dotted_names ( self ) : return flask.url_for ( '.frontend_index ' ) self.assertEqual ( c.get ( '/fe ' ) .data.strip ( ) , '/be ' )","['flask/wrappers.py', 'tests/flask_tests.py']",Test that dotted names work . This fixes # 258
702,c5340b1ec471ee8535916eeb042fb2710df64276,2011-06-26 22:58:10-07:00,"is not lost when he tries to access a resource he can not access . the server 's filesystem he or she should not modify . This does require some does not get enough feedback he will probably end up hating the some JavaScript he or she just has to trick some users to load that page and the server 's filesystem he should not modify . This does require some client asks the server every 5 seconds how much he has transmitted use the 410 code instead and display a message that what he or she was some JavaScript he just has to trick some users to load that page and unless he or she knows the secret key used for signing . is not lost when he or she tries to access a forbidden resource . use the 410 code instead and display a message that what he was something complex and unguessable . the index to a page he or she can not access ( 401 means access denied ) but it likely he will like the page and come back next time . not modify it unless he or she knows the secret key , so make sure to set that already . Do you realize the irony ? The client is asking for something it not modify it unless he knows the secret key , so make sure to set that to This view lets the user add new entries if he 's logged in . This only goes to the site and is not logged in , he should be redirected to the client asks the server every 5 seconds how much it has transmitted likely he or she will like the page and come back next time . does not get enough feedback he or she will probably end up hating the This view lets the user add new entries if he or she is logged in . This only to something complex and unguessable . already . Do you realize the irony ? The client is asking for something he the index to a page he can not access ( 401 means access denied ) but it goes to the site and is not logged in , he or she should be redirected to the unless he knows the secret key used for signing .","['docs/api.rst', 'docs/patterns/errorpages.rst', 'docs/patterns/fileuploads.rst', 'docs/patterns/flashing.rst', 'docs/patterns/viewdecorators.rst', 'docs/quickstart.rst', 'docs/security.rst', 'docs/tutorial/views.rst']",Merge pull request # 257 from jfinkels/master
703,8e928a2fcbac6edca918e9d4efccc4fedb418292,2011-06-25 14:11:53-04:00,"that can be run with any WSGI server . For production , see : ref : ` deployment ` . use in production . Use a : ref : ` full-blown WSGI server < deployment > ` . Each of the techniques and examples below results in an `` application `` object .. _deployment : from werkzeug.serving import run_simple Working with this Document at : func : ` werkzeug.serving.run_simple ` : : run_simple ( 'localhost ' , 5000 , application , use_reloader=True ) Note that : func : ` run_simple < werkzeug.serving.run_simple > ` is not intended for For development , Werkzeug provides a builtin server for development available","['docs/deploying/index.rst', 'docs/patterns/appdispatch.rst']","Document Werkzeug 's run_simple for dispatch , # 225 ."
704,46ecc57b7c29cd017fd841aef37c5d767cc538e0,2011-06-24 07:30:56-07:00,"else filename adler32 ( adler32 ( filename ) & 0xffffffff ) & 0xffffffff filename.encode ( 'utf8 ' ) if isinstance ( filename , unicode )",['flask/helpers.py'],Merge pull request # 237 from SimonSapin/master
705,c7ff139481f96316d740a34f01cfd0f25e449848,2011-05-30 12:45:07-07:00,`` SERVER_NAME `` the name and port number of the server . `` SERVER_NAME `` the name of the server . Required for subdomain support ( e.g . : `` 'localhost ' `` ) Required for subdomain support ( e.g . : `` 'localhost:5000 ' `` ),['docs/config.rst'],Merge pull request # 238 from SimonSapin/doc-SERVER_NAME-fix
706,e3d577cc2a87cee4e45f9939df1d6d5d99f4d943,2011-05-07 15:28:05-07:00,# now setup the package with our virtual environment 's run ( 'mkdir /tmp/yourapplication ' ) # python interpreter run ( '/var/www/yourapplication/env/bin/python setup.py install ' ) sourcecode to the server and install it into a pre-existing # python interpreter run ( '/var/www/yourapplication/env/bin/python setup.py install ' ) # now setup the package with our virtual environment 's run ( 'mkdir yourapplication ' ) sourcecode to the server and install it into a already existing,['docs/patterns/fabric.rst'],Merge pull request # 228 from akavlie/master
707,04e70bd5c7bd80696eabaea11afd9080d874f859,2011-03-14 14:28:15-04:00,"return `` Ignored '' # This raises a new error and blows away sys.exc_info ( ) , so we can if mod and mod in self.teardown_request_funcs : self.teardown_request_funcs = { } assert rv.status_code == 200 finally : raise TypeError # : called.append ( 6 ) `` `` '' Called after the actual request dispatching and will assert 'Internal Server Error ' in rv.data called.append ( 5 ) Flask allows us to do that with the : meth : ` ~flask.Flask.before_request ` , assert len ( called ) == 1 rv = func ( exc ) for func in funcs : rv = app.test_client ( ) .get ( '/ ' ) decorators . In debug mode , if an error is raised , # : A dictionary with lists of functions that are called after def teardown_request ( self , f ) : mod = request.module processing the request . If an exception was thrown , it gets passed to funcs = reversed ( self.teardown_request_funcs.get ( None , ( ) ) ) : meth : ` ~flask.Flask.after_request ` and : meth : ` ~flask.Flask.teardown_request ` of a request regardless of whether an exception occurred . assert len ( called ) == 2 def teardown_request ( exception ) : pass def root ( ) : call every as : meth : ` teardown_request ` decorated function . assert called == [ 1 , 2 , 3 , 4 , 5 , 6 ] assert called == [ 1 , 2 , 3 , 4 ] if rv is not None : def teardown_request1 ( exc ) : response has been constructed . They are not allowed to modify the request , and return rv try : self.do_teardown_request ( ) assert type ( exc ) == ZeroDivisionError def teardown_request2 ( exc ) : called = [ ] db connection in the interactive debugger : : g.db.close ( ) funcs = chain ( funcs , reversed ( self.teardown_request_funcs [ mod ] ) ) app.debug = True def finish2 ( exc ) : # : occurred while processing the request , it gets passed to each can close it in a function decorated with : meth : ` ~flask.Flask.teardown_request ` : a request and passed no arguments . Functions marked with def test_teardown_request_handler_debug_mode ( self ) : assert 'Response ' in rv.data # : each request , even if an exception has occurred . The key of the # : teardown_request function . To register a function here , use the def test_teardown_request_handler ( self ) : def fails ( ) : g.db = connect_db ( ) : meth : ` ~flask.Flask.after_request ` wo n't be run , and you 'll have access to the # : the request , and their return values are ignored . If an exception exc = sys.exc_info ( ) [ 1 ] being processed , it is passed to each function ; otherwise , None is passed in . 1/0 .. versionchanged : : 0.7 app = flask.Flask ( __name__ ) # : dictionary is the name of the module this function is active for , import sys return f `` `` '' # exception . def finish1 ( exc ) : Flask allows us to do that with the : meth : ` ~flask.Flask.before_request ` and Functions marked with : meth : ` ~flask.Flask.teardown_request ` get called after the def before_request ( ) : `` `` '' Register a function to be run at the end of each request , regardless of whether there was an exception or not . '' '' '' a request and passed no arguments , functions marked with return `` Response '' # : ` None ` for all requests . These functions are not allowed to modify their return values are ignored . If an exception occurred while the request was def test_teardown_request_handler_error ( self ) : each teardown_request function . # : .. versionadded : : 0.7 called.append ( True ) # test that all teardown_requests get passed the same original # : : meth : ` teardown_request ` decorator . assert rv.status_code == 500 The : meth : ` teardown_request ` functions get called at the very end of If you want to guarantee that the connection is always closed in debug mode , you : meth : ` ~flask.Flask.after_request ` decorators : : self.teardown_request_funcs.setdefault ( None , [ ] ) .append ( f ) except : def teardown_request ( exc ) : def do_teardown_request ( self ) : Added ` teardown_request ` decorator , for functions that should run at the end","['CHANGES', 'docs/tutorial/dbcon.rst', 'flask/app.py', 'tests/flask_tests.py']",Add teardown_request decorator . Fixes issue # 174
708,0bf777ed81d5296fb722931d35e5db4333e3de39,2011-02-05 17:41:02+01:00,"was incorrectly introduced in 0.6 . # a separate date header . # with a new release , however many WSGI servers will still emit # current time to better support conditional requests . Werkzeug # the time of the last modification . Use Last-Modified for static file sending instead of Date which # response with the current time . This will be fixed in Werkzeug # as of 0.6.1 will override this value however in the conditional rv.date = int ( mtime ) rv.last_modified = int ( mtime )","['CHANGES', 'flask/helpers.py']","Do not use Date , use Last-Modified . This fixes # 164"
709,4b65c7ed5a31d56e194817231eb88e1083ba285d,2010-12-06 03:16:13+01:00,"return cls ( self , self.response_class , use_cookies=use_cookies ) # : the test client that is used with when ` test_client ` is used . def test_client ( self ) : .. versionadded : : 0.7 test_client_class = None return FlaskClient ( self , self.response_class , use_cookies=True ) if cls is None : to override the client to be used by setting the from flask.testing import FlaskClient as cls # : # : .. versionadded : : 0.7 def test_client ( self , use_cookies=True ) : The ` use_cookies ` parameter was added as well as the ability from flask.testing import FlaskClient cls = self.test_client_class : attr : ` test_client_class ` attribute .",['flask/app.py'],Added the ability to override the test client 's class . This fixes # 148
710,2ac1b7d4388209d8e1309ed5b43ebe8d023eaa53,2010-11-19 13:25:45+01:00,"recorded = [ ] with captured_templates ( app , templates ) : ... specified that way one has to pass the list in as argument : : def captured_templates ( app ) : its own which simplifies the example above : : templates = [ ] template , context = templates [ 0 ] The example above would then look like this : : its own . Because the return value of the context manager can not be def captured_templates ( app , recorded ) :",['docs/signals.rst'],Fixed a documentation error . This fixes # 143
711,1c24b62727704016813a44d7c677ead0b6638c91,2010-11-02 00:03:50+01:00,"template_rendered.connect ( log_template_renders , app ) from flask import request_started from flask import template_rendered request_started.connect ( log_template_renders , app )",['docs/signals.rst'],Minor on docs ( fixes # 133 )
712,2a73bbc436041875f81aeffd5b8f13c6da8fcf19,2010-08-20 11:16:18+02:00,"app.config [ 'SERVER_NAME ' ] = 'example.com ' mod = Module ( __name__ , 'foo ' , subdomain='foo ' ) c = app.test_client ( ) app.register_module ( mod ) from subdomaintestmodule import mod rv = c.get ( '/static/hello.txt ' , 'http : //foo.example.com/ ' ) from flask import Module Hello Subdomain assert rv.data.strip ( ) == 'Hello Subdomain ' def test_module_static_path_subdomain ( self ) : app = flask.Flask ( __name__ )","['tests/flask_tests.py', 'tests/subdomaintestmodule/__init__.py', 'tests/subdomaintestmodule/static/hello.txt']",Added testcase . This fixes # 108
713,38107c752cf959ad69cf4f35886946bc947f2bd3,2010-08-07 13:41:06+02:00,from themodule import TheHandler YouWant : class : ` ~logging.FileHandler ` - logs messages to a file on the : class : ` ~logging.handlers.FileHandler ` - logs messages to a file on the from logging.handlers import TheHandlerYouWant,['docs/errorhandling.rst'],Fixed a wrong import path in the documentation . Fixes # 102
714,fda14678c07d036ef3a1984a4e346e793cc5a63c,2010-08-07 13:36:39+02:00,"'filenames instead if possible , otherwise attach an etag ' assert len ( captured ) == 2 in Flask 1.0 . Previously it was possible to use etags and mimetypes log.append ( locals ( ) ) os.path.join ( app.root_path , 'static/index.html ' ) return send_file ( my_file_object , add_etags=False ) add_etags=False ) etag attaching and attach them yourself . assert rv.mimetype == 'text/plain ' 'longer be generated for file objects passed to the send_file ' 'yourself based on another value ' ) , stacklevel=2 ) if add_etags : Mimetype guessing and etag support based on file objects is now update your application to work with either filenames there or disable assert value == 'attachment ' filters = warnings.filters to sent certain files as attachment ( HTML for instance ) . The mimetype .. versionchanged : : 0.7 assert len ( captured ) == 1 assert rv.headers [ ' x-sendfile ' ] == \ return send_file ( my_file_object ) f = StringIO ( 'Test ' ) warnings.filters = filters [ : ] able to , otherwise attach an etag yourself . This functionality assert rv.mimetype == 'text/html ' os.path.join ( app.root_path , 'static/index.html ' ) mimetype guessing and etag support for file objects was assert rv.mimetype == 'application/octet-stream ' f = open ( os.path.join ( app.root_path , 'static/index.html ' ) ) with app.test_request_context ( ) : `` `` '' Catch stderr in a StringIO '' '' '' with catch_warnings ( ) as captured : assert ' x-sendfile ' in rv.headers 'passed to send_file is not deprecated . Pass an ' if not attachment_filename and not mimetype \ assert ' x-sendfile ' not in rv.headers to sent certain files as attachment ( HTML for instance ) . Pass filenames instead or attach your own etags and provide a rv = flask.send_file ( f , as_attachment=True ) warn ( DeprecationWarning ( 'In future flask releases etags will no ' value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) from warnings import warn rv = flask.send_file ( f , as_attachment=True ) with app.test_request_context ( ) : attachment_filename='index.txt ' ) provided . yield log try : 'attach_filename if you want mimetypes to be guessed . ' ) , Additionally the : func : ` ~flask.send_file ` function is now issuing assert rv.mimetype == 'text/plain ' # XXX : this behaviour is now deprecated because it was unreliable . deprecated because it was unreliable . Pass a filename if you are rv = flask.send_file ( f ) with app.open_resource ( 'static/index.html ' ) as f : assert ' x-sendfile ' not in rv.headers warnings.showwarning = old_showwarning Old code : : finally : assert rv.mimetype == 'text/html ' for a few setups . If you get a deprecation warning , make sure to guessing requires a ` filename ` or an ` attachment_filename ` to be import warnings deprecation warnings if you depend on functionality that will be removed New code : : def catch_warnings ( ) : log = [ ] # removed in Flask 1.0 f = open ( os.path.join ( app.root_path , 'static/index.html ' ) ) assert rv.headers [ ' x-sendfile ' ] == \ assert ' x-sendfile ' in rv.headers f = StringIO ( 'Test ' ) with app.open_resource ( 'static/index.html ' ) as f : when file objects were passed . This was unreliable and caused issues # mimetypes + etag # etags assert rv.data == 'Test ' rv = flask.send_file ( f ) assert rv.data == 'Test ' 'function because this behaviour was unreliable . Pass ' old_showwarning = warnings.showwarning rv = flask.send_file ( f , mimetype='text/plain ' ) assert value == 'attachment ' warn ( DeprecationWarning ( 'The filename support for file objects ' rv = flask.send_file ( f , mimetype='text/plain ' ) warnings.showwarning = showwarning assert rv.data == f.read ( ) with catch_warnings ( ) as captured : stacklevel=2 ) assert rv.mimetype == 'application/octet-stream ' `` `` '' Catch warnings in a with block in a list '' '' '' proper mimetype by hand . will be removed in Flask 1.0 assert rv.data == f.read ( ) value , options = parse_options_header ( rv.headers [ 'Content-Disposition ' ] ) attachment_filename='index.txt ' , def showwarning ( message , category , filename , lineno , file=None , line=None ) : and isinstance ( filename , basestring ) : warnings.filters = filters deprecated for : func : ` flask.send_file ` because it was unreliable .","['CHANGES', 'docs/upgrading.rst', 'flask/helpers.py', 'tests/flask_tests.py']",Deprecated send_file etag support and mimetype guessing for file-like objects . This fixes # 104
715,faa1c71e455a99e9b098aa9bb4667c07a1bab6aa,2010-08-07 13:02:53+02:00,"of an : exc : ` AttributeError ` . request = LocalProxy ( lambda : _request_ctx_stack.top.request ) top = _request_ctx_stack.top g = LocalProxy ( lambda : _request_ctx_stack.top.g ) before , you should catch them with : exc : ` RuntimeError ` now . Version 0.7 current_app = LocalProxy ( lambda : _request_ctx_stack.top.app ) raise RuntimeError ( 'working outside of request context ' ) g = LocalProxy ( partial ( _lookup_object , ' g ' ) ) session = LocalProxy ( partial ( _lookup_object , 'session ' ) ) request = LocalProxy ( partial ( _lookup_object , 'request ' ) ) return getattr ( top , name ) self.assertEqual ( repr ( flask.g ) , ' < LocalProxy unbound > ' ) self.assertFalse ( flask.g ) def _lookup_object ( name ) : session = LocalProxy ( lambda : _request_ctx_stack.top.session ) raise a : exc : ` RuntimeError ` instead of an : exc : ` AttributeError ` when they except RuntimeError : Due to a bug in earlier implementations the request local proxies now Unbound locals now raise a proper : exc : ` RuntimeError ` instead from functools import partial are unbound . If you cought these exceptions with : exc : ` AttributeError ` current_app = LocalProxy ( partial ( _lookup_object , 'app ' ) ) except AttributeError : if top is None : def test_request_locals ( self ) :","['CHANGES', 'docs/upgrading.rst', 'flask/globals.py', 'tests/flask_tests.py']",Request local objects now fail properly with a RuntimeError . This fixes # 105
716,d17b6d738a0e9f8a3dcf4996a65de6e3347acae6,2010-08-03 12:17:36+02:00,"os.unlink ( flaskr.DATABASE ) os.unlink ( flaskr.app.config [ 'DATABASE ' ] ) self.db_fd , flaskr.DATABASE = tempfile.mkstemp ( ) self.db_fd , self.app.config [ 'DATABASE ' ] = tempfile.mkstemp ( )",['docs/testing.rst'],Fixed a refacotring error in the docs . This fixes # 100
717,4a2d2ba3b8259165a97dc80890547f97d7e35ff5,2010-07-18 01:30:28+02:00,"it JavaScript ) into the context of a website . To rememdy this , developers on ` Cross-Site Scripting Jinja Setup These filters are available in Jinja2 additionally to the filters provided Registering Filters 1. you explicitly pass the request to the macro as parameter , or .. versionadded : : 0.6 .. admonition : : The Jinja Context Behaviour The current configuration object ( : data : ` flask.config ` ) autoescaping is enabled for all templates ending in `` .html `` , The : func : ` flask.url_for ` function . If you want to register your own filters in Jinja2 you have two ways to do global variables . The difference is that by default these will not the template context : : carry specific meanings in documents on their own you have to replace them the template with the value of ` g.user ` . This example is not very The : func : ` flask.get_flashed_messages ` function . Importing with context looks like this : Templates `` { % autoescape % } `` tag . context processors exist in Flask . Context processors run before the using in this block . example if they come from a system that generate secure HTML like a a different template engine , but you still have to install Jinja2 to run sure to disable escaping with `` |safe `` if you intend to use it inside Documentation < http : //jinja.pocoo.org/2/documentation/templates > ` _ for < http : //en.wikipedia.org/wiki/Cross-site_scripting > ` _ . 2. you import the macro `` with context '' . < p > { { will_not_be_escaped } } of you . Special characters in the sense of HTML ( or XML , and thus XHTML ) < p > autoescaping is disabled here have to properly escape text so that it can not include arbitrary HTML .. sourcecode : : jinja to the : ref : ` templating ` section of the documentation or the official by performance considerations , partially to keep things explicit . show up in the context of imported templates . This is partially caused template context . A context processor is a function that returns a .. function : : get_flashed_messages That the `` |tojson `` filter escapes forward slashes properly for you . idea how this works . engine 's syntax itself , head over to the official ` Jinja2 Template { % from '_helpers.html ' import my_macro with context % } the attribute of the request object you are interested in . < script type=text/javascript > { % endautoescape % } To disable the autoescape system in templates , you can use the `` { % doSomethingWith ( { { user.username|tojson|safe } } ) ; fly . recommended way . that . You can either put them by hand into the .. function : : tojson return dict ( user=g.user ) `` .htm `` , `` .xml `` as well as `` .xhtml `` Jinja2 context , additionally to the values that are present by Note that inside ` script ` tags no escaping must take place , so make This can be the case if you want to explicitly inject HTML into pages , for template is rendered and have the ability to inject new values into the The current request object ( : class : ` flask.request ` ) Context Processors This section only gives a very quick introduction into how Jinja2 autoescape % } `` block : Standard Filters Cross site scripting is the concept of injecting arbitrary HTML ( and with Autoescaping is the concept of automatically escaping special characters { % autoescape false % } The two following examples work the same and both reverse an object : : characters in text , but can also lead to security problems . ( see Whenever you do this , please be very cautious about the varibles you are The context processor above makes a variable called ` user ` available in : meth : ` ~flask.Flask.template_filter ` decorator . Unless customized , Jinja2 is configured by Flask as follows : object before passing it to the template . This is in general the by so called `` entities '' if you want to use them for text . Not doing so .. _xss : An extension can depend on Jinja2 being present . def inject_user ( ) : interesting because ` g ` is available in templates anyways , but it gives an is integrated into Flask . If you want information on the template : attr : ` ~flask.Flask.jinja_env ` of the application or use the would not only cause user frustration by the inability to use these The following global variables are available within Jinja2 templates Controlling Autoescaping .. function : : url_for .. sourcecode : : html+jinja < /script > templating In case of the decorator the argument is optional if you want to use the The current session object ( : class : ` flask.session ` ) What does this mean for you ? If you have a macro you want to import , markdown to HTML converter . .. sourcecode : : html+jinja string as safe HTML ( `` { { myvariable|safe } } `` ) Flask inserts a couple of global functions and helpers into the ========= This function converts the given object into JSON representation . This : ref : ` xss ` ) : noindex : that needs to access the request object you have two possibilities : ` Jinja2 Template Documentation by default : There are three ways to accomplish that : Flask itself . This requirement is necessary to enable rich extensions . tags . For more information on that have a look at the Wikipedia article by Jinja2 itself : .. data : : config .. data : : g Standard Context are `` & `` , `` > `` , `` < `` , `` `` `` as well as `` ' `` . Because these characters ` script ` tags : return s [ : :-1 ] Inside the template , use the `` |safe `` filter to explicitly mark a is for example very helpful if you try to generate JavaScript on the .. data : : request Flask leverages Jinja2 as template engine . You are obviously free to use more information . The request-bound object for global variables ( : data : ` flask.g ` ) To inject new variables automatically into the context of a template In the Python code , wrap the HTML string in a : class : ` ~flask.Markup ` These variables are added to the context of variables , they are not def reverse_filter ( s ) : to the ` Jinja2 Template Documentation .. data : : session app.jinja_env.filters [ 'reverse ' ] = reverse_filter default . a template has the ability to opt in/out autoescaping with the Temporarily disable the autoescape system altogether . dictionary . The keys and values of this dictionary are then merged with Sometimes however you will need to disable autoescaping in templates . function name as name of the filter .","['docs/contents.rst.inc', 'docs/quickstart.rst', 'docs/security.rst', 'docs/templating.rst']",Added templating docs . This basically fixes # 92
718,e5008386b1a7e0ef3ebb5a4082bf2176d7169ab9,2010-07-17 15:41:05+02:00,"If you want to run the application in debug mode , but disable the `` use_evalex=False `` as parameter . This will keep the debugger 's traceback screen active , but disable code execution . code execution on the interactive debugger , you can pass",['flask/app.py'],Added docs on use_evalex . This fixes # 90
719,a3a72e2d8d8df53164689fd84a5db2c6cd04f28a,2010-07-17 15:39:24+02:00,"If you want to add a WSGI middleware to your application you can wrap the server_name=app.config [ 'SERVER_NAME ' ] ) middlewares from the Werkzeug package to work around bugs in lighttpd , you so the request is passed explicitly . def create_url_adapter ( self , request ) : from werkzeug.contrib.fixers import LighttpdCGIRootFix self.url_adapter = app.create_url_adapter ( self.request ) is created at a point where the request context is not yet set up Hooking in WSGI Middlewares `` `` '' Creates a URL adapter for the given request . The URL adapter internal WSGI application . For example if you want to one of the app.wsgi_app = LighttpdCGIRootFix ( app.wsgi_app ) server_name=self.config [ 'SERVER_NAME ' ] ) return self.url_map.bind_to_environ ( request.environ , can do it like this : : .. versionadded : : 0.6 self.url_adapter = app.url_map.bind_to_environ ( environ , `` `` ''","['docs/quickstart.rst', 'flask/app.py', 'flask/ctx.py']",Added middlewares to quickstart . This fixes # 88
720,70dc2b66a0d02a23546ad8d48b7fca1c21997ae6,2010-07-16 13:14:54+02:00,".. _log-format : Before you run that in production , please also look at : ref : ` log-format ` lot of frustration . .. _logformat : put more information into that error mail . That will save you from a lot of frustration . < script type=text/javascript src= '' { { url_for ( 'static ' , filename='app.js ' ) } } '' > < /script > Before you run that in production , please also look at : ref : ` logformat ` to to put more information into that error mail . That will save you from a","['docs/errorhandling.rst', 'examples/jqueryexample/templates/layout.html']",Removed useless script reference . This fixes # 87
721,f5b8c082847baa8a902cef22c43a5d50d7a55bdc,2010-07-15 14:35:02+02:00,"_tojson_filter , _endpoint_from_view_func def test_default_endpoint_name ( self ) : endpoint = _endpoint_from_view_func ( view_func ) 'is not provided . ' on the application object . mod = flask.Module ( __name__ , 'frontend ' ) assert flask.url_for ( 'frontend.index ' ) == '/ ' function . This always is the function name . the_endpoint ) , state.app.add_url_rule ( the_rule , ' % s. % s ' % ( self.name , endpoint = view_func.__name__ The ` endpoint ` argument is now optional and will default to the assert rv.data == 'Awesome ' app.register_module ( mod ) from .helpers import _PackageBoundObject , _endpoint_from_view_func if the_endpoint is None : mod.add_url_rule ( '/ ' , view_func=index ) 'is not provided . ' def index ( ) : assert view_func is not None , 'expected view func if endpoint ' \ return view_func.__name__ assert view_func is not None , 'expected view func if endpoint ' \ the_endpoint = _endpoint_from_view_func ( view_func ) def add_url_rule ( self , rule , endpoint=None , view_func=None , * * options ) : return 'Awesome ' `` `` '' Internal helper that returns the default endpoint for a given the_endpoint = endpoint `` `` '' app = flask.Flask ( __name__ ) .. versionchanged : : 0.6 with app.test_request_context ( ) : rv = app.test_client ( ) .get ( '/ ' ) def add_url_rule ( self , rule , endpoint , view_func=None , * * options ) : from .helpers import _PackageBoundObject _tojson_filter function name to consistent with the function of the same name state.app.add_url_rule ( the_rule , ' % s. % s ' % ( self.name , endpoint ) , def _endpoint_from_view_func ( view_func ) :","['flask/app.py', 'flask/helpers.py', 'flask/module.py', 'tests/flask_tests.py']",endpoint is optional for modules . This fixes # 86
722,f8f8463f3a0e260604b066de56b0a8c7d3a86db4,2010-07-14 02:50:41+02:00,"Please keep in mind that not only Flask has the problem of not knowing server name without dots in it . So if your server name is browsers will not allow cross-subdomain cookies to be set on a Flask can not guess the subdomain part without the knowledge of the .. admonition : : More on `` SERVER_NAME `` server name in that case , like `` 'myapplication.local ' `` and add `` 'localhost ' `` you will not be able to set a cookie for subdomains . This is also used for the session cookie . or setup a local ` bind ` _ . this name + the subdomains you want to use into your host config `` 'localhost ' `` and every subdomain of it . Please chose a different what subdomains are , your web browser does as well . Most modern web The `` SERVER_NAME `` key is used for the subdomain support . Because actual server name , this is required if you want to work with .. _bind : https : //www.isc.org/software/bind",['docs/config.rst'],Documented cookie problem for # 80
723,ed16ae2183ad44a7ba89aedd331a180455ed0836,2010-07-13 23:14:53+02:00,"# register the static folder for the application . Do that even remove the static folder if it 's part of a mapping in the .yml view_func=self.send_static_file ) # if the folder does not exist . First of all it might be created self.add_url_rule ( self.static_path + '/ < path : filename > ' , for the module . This was implemented to aid GAE which will view_func=self.send_static_file ) # else when mapped with the .yml file . file . return FileSystemLoader ( template_folder ) if os.path.isdir ( template_folder ) : template_folder = os.path.join ( self.root_path , 'templates ' ) endpoint='static ' , return FileSystemLoader ( os.path.join ( self.root_path , 'templates ' ) ) if self.has_static_folder : static rules are now even in place if there is no static folder # while the server is running ( usually happens during development ) # if there is a static folder , register it for the application . # but also because google appengine stores static files somewhere endpoint='static ' , self.add_url_rule ( self.static_path + '/ < path : filename > ' ,","['CHANGES', 'flask/app.py', 'flask/helpers.py']",Always register URL rules . This fixes # 81
724,d12d73263f5d1664a65a42f71f19158b7e07ef2c,2010-07-12 18:04:10+02:00,"def before2 ( ) : def before1 ( ) : after request functions are now called in reverse order of called.append ( 2 ) of the registration , now they are called in reverse order . This change called.append ( 3 ) Version 0.6 execution are called in reverse order of registration . how other systems handle request pre- and postprocessing . If you dependend on the order of execution of post-request functions , be sure to called.append ( 4 ) funcs = reversed ( self.after_request_funcs [ mod ] ) def index ( ) : def test_before_after_request_order ( self ) : funcs = chain ( funcs , self.after_request_funcs [ None ] ) return '42 ' called = [ ] .. versionchanged : : 0.5 app = flask.Flask ( __name__ ) assert called == [ 1 , 2 , 3 , 4 ] funcs = chain ( funcs , reversed ( self.after_request_funcs [ None ] ) ) was made so that Flask behaves more like people expected it to work and change the order . rv = app.test_client ( ) .get ( '/ ' ) assert rv.data == '42 ' order of after-request handlers . Previously they were called in the order registration . called.append ( 1 ) As of Flask 0.5 the functions registered for after request funcs = chain ( funcs , self.after_request_funcs [ mod ] ) return response def after1 ( response ) : Flask 0.6 comes with a backwards incompatible change which affects the","['CHANGES', 'docs/upgrading.rst', 'flask/app.py', 'tests/flask_tests.py']",Reverse order of execution of post-request handlers . This fixes # 82
725,da514b398429653dbd368c6da48c9863d3c2632f,2010-07-06 10:42:36+02:00,"rv = app.test_client ( ) .get ( '/ ' , 'http : //example.com/ ' ) SERVER_NAME='example.com ' ) SECRET_KEY='foo ' , return 'Hello World ' expires=expires , httponly=True ) domain = ' . ' + self.config [ 'SERVER_NAME ' ] def index ( ) : domain=domain ) if self.config [ 'SERVER_NAME ' ] is not None : expires = None app = flask.Flask ( __name__ ) app.config.update ( expires=expires , httponly=True , expires = domain = None def test_session_using_server_name ( self ) : assert 'httponly ' in rv.headers [ 'set-cookie ' ] .lower ( ) assert 'domain=.example.com ' in rv.headers [ 'set-cookie ' ] .lower ( ) flask.session [ 'testing ' ] = 42","['flask/app.py', 'tests/flask_tests.py']",Respect the domain for the session cookie . This fixes # 79
726,9e1111c2fbc2c7670eb489df0262a90417b96019,2010-07-04 17:21:13+02:00,"from flask.helpers import json send_file , get_flashed_messages , get_template_attribute from flask.helpers import url_for , jsonify , json_available , flash , send_file , \ get_flashed_messages , get_template_attribute , json from flask.helpers import url_for , jsonify , json_available , flash , \ # only import json if it 's available if json_available :",['flask/__init__.py'],Fixed JSON availability test . This fixes # 77
727,a154c87cfca3e21316552b2ec558029f9c96122a,2010-07-02 19:45:26+02:00,"wo n't catch any exceptions because there wo n't be any to Setting `` use_debugger `` to ` True ` without being in debug mode .. admonition : : Keep in Mind Flask will supress any server error with a generic error page invoke : meth : ` run ` with `` debug=True `` and `` use_reloader=False `` . interactive debugger without the code reloading , you ahve to unless it is in debug mode . As such to enable just the catch .",['flask.py'],Documented exception catching behaviour . This fixes # 75
728,3ab318a7ddca819e13d6d161b008b62b6583453e,2010-07-01 12:56:34+02:00,"app = Flask ( 'yourapplication ' ) .. admonition : : About the First Parameter on the file system , can be used by extensions to improve debugging to how resources are looked up . However it will make debugging more using a package , it 's usually recommended to hardcode the name of belongs to your application . This name is used to find resources So it 's important what you provide there . If you are using a single up , that debugging information is lost . ( For example it would only application or imported as module the name will be different you should use ` __name__ ` because depending on if it 's started as For example if your application is defined in ` yourapplication/app.py ` information and a lot more . extension will look for the code in your application that triggered module , ` __name__ ` is always the correct value . If you however are ( `` '__main__ ' `` versus the actual import name ) . For more information your package there . app = Flask ( __name__.split ( ' . ' ) [ 0 ] ) class will be our WSGI application . an SQL query in debug mode . If the import name is not properly set ` yourapplication.views.frontend ` ) pick up SQL queries in ` yourapplicaiton.app ` and not Why is that ? The application will work even with ` __name__ ` , thanks painful . Certain extensions can make assumptions based on the the application 's module . If you are using a single module ( like here ) on that , have a look at the : class : ` ~flask.Flask ` documentation . class will be our WSGI application . The first argument is the name of The idea of the first parameter is to give Flask an idea what import name of your application . For example the Flask-SQLAlchemy you should create it with one of the two versions below : :","['docs/quickstart.rst', 'flask.py']",Explained Flask constructor better . This fixes # 70
729,bc662a546ed9028d93482f79314e64beae19a1d6,2010-07-01 01:45:39+02:00,"It is also recommended to use the Unix newline format , you can select 2 . Select the `` New Document/Default Directory '' tab Most editors save as UTF-8 by default nowadays but in case your editor is Subproject commit 21cf07433147212ee6c8ab203dfa648a9239c66f ( prefer-coding-system 'utf-8 ) not configured to do this you have to change it . Here some common ways to file : : Subproject commit b8e0f4f1bfc7c89fffb5440fcdf60edaa033c836 set your editor to store as UTF-8 : 3 . Select `` UTF-8 without BOM '' as encoding Notepad++ : Configuring Editors ( setq default-buffer-file-coding-system 'utf-8 ) Jinja is configured to decode the template files from UTF08 . So make sure to tell your editor to save the file as UTF-8 there as well . Emacs : either use an encoding cookie or put this into your `` .emacs `` it in the same panel but this not a requirement . Vim : put `` set enc=utf-8 `` to your `` .vimrc `` file . 1 . Go to * Settings - > Preferences ... *","['docs/_themes', 'docs/unicode.rst']",Added a section about unicode and editors . This fixes # 74
730,d0357b44b02324b85af42052487eab13d0b75f81,2010-07-01 01:22:46+02:00,"There are four very common ways to use SQLAlchemy . I will outline each You can download ` Flask-SQLAlchemy ` _ from ` PyPI < http : //pypi.python.org/pypi/Flask-WTF > ` _ . Flask-SQLAlchemy Extension there is a Flask extension that handles that for you . This is recommended There are three very common ways to use SQLAlchemy . I will outline each .. _Flask-WTF : http : //packages.python.org/Flask-WTF/ .. admonition : : Getting most of WTForms with an Extension handful little helpers that make working with forms and Flask more < http : //pypi.python.org/pypi/Flask-SQLAlchemy > ` _ . fun . You can get it from ` PyPI The ` Flask-WTF ` _ extension expands on this pattern and adds a few if you want to get started quickly . Because SQLAlchemy is a common database abstraction layer and object .. _Flask-SQLAlchemy : http : //packages.python.org/Flask-SQLAlchemy/ relational mapper that requires a little bit of configuration effort ,","['docs/patterns/sqlalchemy.rst', 'docs/patterns/wtforms.rst']",Added links to Flask-WTF and Flask-SQLAlchemy . This fixes # 73
731,7ea1b801cc1f7d09ee18e8d70957c9d34b870700,2010-06-29 01:32:02+02:00,"# : modified URL . If an exception happened when matching , this will view_args = None endpoint = view_args = routing_exception = None # : raised / was raised as part of the request handling . This is # : be ` None ` . endpoint = None # : the endpoint that matched the request . This in combination with # : something similar . # : : attr : ` view_args ` can be used to reconstruct the same or a # : happened when matching , this will be ` None ` . # : usually a : exc : ` ~werkzeug.exceptions.NotFound ` exception or # : if matching the URL failed , this is the exception that will be routing_exception = None # : a dict of view arguments that matched the request . If an exception",['flask.py'],Documented missing attributes . This fixes # 71
732,fe35105bec80bbb7cbba1b1d6414612fe85873cd,2010-06-18 17:03:31+02:00,"requirements and Flask could not meet those if it would force any of this create the application which is very helpful for unittesting and similar Everything else is up to you or extensions . It also binds to a few common standard library packages such as logging . the logger switches to ` DEBUG ` mode now if debug is enabled . The idea of Flask is to build a good foundation for all applications . into the core . The majority of web applications will need a template to implement a proper WSGI application and to Jinja2 to handle templating . What Flask is , What Flask is Not Furthermore this design makes it possible to use a factory function to or anything else in that direction . Flask itself just bridges to Werkzeug engine in some sort . However not every application needs a SQL database . Why is this the case ? Because people have different preferences and things ( : ref : ` app-factories ` ) . Flask will never have a database layer . It will not have a form library Everything else is up for extensions .","['CHANGES', 'docs/design.rst']",Updated design decisions . This fixes # 63
733,387be22f26b8065d29e311723bb8a50a74248534,2010-06-17 19:01:32+02:00,"def read_file ( filename , charset='utf-8 ' ) : that requires bytes to be transmitted . already transmits unicode and if they do not , SQLAlchemy or your other ORM internally you will always use unicode exclusively for text except SQLAlchemy or a similar ORM system . Some databases have a protocol that Anyways . To load such a file with unicode you can use the builtin : meth : ` str.decode ` method : : return f.read ( ) .decode ( charset ) The Golden Rule HTTP is based on bytes . Not only the protocol , also the system used to with open ( filename , ' r ' ) as f : address documents on servers ( so called URIs or URLs ) . However HTML which Unicode in Flask Flask has a few assumptions about your application ( which you can change character sets and which ones are used , are transmitted in an HTTP header . fancy ) you can use regular string literals ( `` 'Hello World ' `` ) . unicode So what does this mean to you ? if you are using non-unicode characters in your Python files you have UTF-8 for this purpose . To tell the interpreter yuor encoding you can If you are talking with a filesystem or something that is not really based with unicode interface . So for example if you want to load a file on the this string as unicode string by prefixing it with a lowercase ` u ` . To go from unicode into a specific charset such as UTF-8 you can use the The same is true if you are talking to databases with the help of the encoding for text on your website is UTF-8 if you need anything else than ASCII in a string you have to mark filesystem and embedd it into a Jinja2 template you will have to decode it ( like `` u'Hänsel und Gretel ' `` ) def write_file ( filename , contents , charset='utf-8 ' ) : Absolutely , Positively Must Know About Unicode and Character Sets f.write ( contents.encode ( charset ) ) form the encoding of that file . Here the old problem that textfiles do for literal strings with only ASCII character points . : meth : ` unicode.encode ` method : : So the rule of thumb : if you are not dealing with binary data , work with and setting of the appropriate headers for you . libraries that deal with text . If you do n't know unicode so far , you of course ) that give you basic and painless unicode support : ================ encoding and decoding happens whenever you are talking over a protocol on unicode you will have to ensure that you decode properly when working pleasent experience with unicode related things . To not make this too complex Flask just assumes that if you are sending should probably read ` The Absolute Minimum Every Software Developer Automatic Conversion as long as you are using ASCII charpoints only ( basically numbers , some special characters of latin letters without umlauts or anything not specify their encoding comes into play . So do yourself a favour and limit yourself to UTF-8 for textfiles as well . documentation just tries to cover the very basics so that you have a Flask like Jinja2 and Werkzeug is totally unicode based when it comes to should take care of that . put the `` # - * - coding : utf-8 - * - `` into the first or second line of your Python source file . Encoding and Decoding Yourself text . Not only these libraries , also the majority of web related Python is usually transmitted on top of HTTP supports a large variety of unicode out you want it to be UTF-8 encoded . Flask will do the encoding with open ( filename , ' w ' ) as f : < http : //www.joelonsoftware.com/articles/Unicode.html > ` _ . This part of the unicode . What does working with unicode in Python 2.x mean ? to tell Python which encoding your file uses . Again , I recommend","['docs/contents.rst.inc', 'docs/unicode.rst']",Added unicode chapter to the docs . This fixes # 67
734,f5fb4576577cbedcedba9eb16d9fdace18c9292c,2010-06-07 00:56:02+02:00,"testing = ConfigAttribute ( 'TESTING ' ) # : For example this might activate unittest helpers that have an # : additional runtime cost which should not be enabled by default . # : ` TESTING ` configuration key . Defaults to ` False ` . added ` TESTING ` switch that can activate unittesting helpers . `` TESTING `` enable/disable testing mode 'TESTING ' : False , # : This attribute can also be configured from the config with the # : # : Flask extensions ( and in the future probably also Flask itself ) . # : The testing flask . Set this to ` True ` to enable the test mode of","['CHANGES', 'docs/config.rst', 'flask.py']",Added TESTING flag . This fixes # 58 .
735,bc00fd1e83f23f57dd6a765b6a4bab2394584ae6,2010-06-03 15:26:07+02:00,"the ` with ` block , the ` assert ` would fail with an error because ` request ` try : except ( AttributeError , RuntimeError ) : raise AssertionError ( 'some kind of exception expected ' ) finally : def __exit__ ( self , exc_type , exc_value , tb ) : self.context_preserved = _request_ctx_stack.top is not old ( tb is None or not self.app.debug ) : flask.g.value = 23 added support for ` with ` block usage for the client . introspect the data . With 0.4 this can also be forced for requests exceptions happen so that interactive debuggers have a chance to are already called at that point so your database connection and with app.test_client ( ) as c : The test client can be used in a ` with ` block to defer the closing down rv = c.get ( '/ ? foo=42 ' ) def open ( self , * args , * * kwargs ) : assert resp.status_code == 500 return Client ( self , self.response_class , use_cookies=True ) _request_ctx_stack.pop ( ) else : pass assert not hasattr ( flask.g , 'value ' ) for you . In debug mode the request context is kept around if test client has not the ability to preserve the request context [ 'flask._preserve_context ' ] = self.preserve_context assert resp.data == 'Hello World ! ' self.context_preserved = False old = _request_ctx_stack.top for a little longer . This can also be used to trigger custom def index ( ) : happen . With Flask 0.4 this is possible by using the return FlaskClient ( self , self.response_class , use_cookies=True ) assert resp.status_code == 200 return 'Hello World ! ' context will not pop itself at the end of the request . This is used by # the context can be force kept alive for the test client . self.preserve_context = False return self assert flask.g.value == 42 if not self.request.environ.get ( 'flask._preserve_context ' ) and \ app = flask.Flask ( __name__ ) .. versionadded : : 0.4 try : requests that do not pop the request stack for testing . self.preserve_context = True the : meth : ` ~flask.Flask.test_client ` for example to implement the assert request.args [ 'foo ' ] == '42 ' deferred cleanup functionality . class FlaskClient ( Client ) : is no longer available ( because used outside of an actual request ) . resp = c.get ( '/ ' ) you want to access the context locals for testing : : context around for a little longer so that additional introspection can that did not fail and outside of ` DEBUG ` mode . By setting 1/0 Keeping the Context Around .. versionchanged : : 0.4 The request context is automatically popped at the end of the request everything involved is probably already closed down . .. versionchanged : : 0.4 if self.context_preserved : app = flask.Flask ( __name__ ) rv = c.get ( '/ ? foo=42 ' ) assert flask._request_ctx_stack.top is None assert 'Internal Server Error ' in resp.data def other ( ) : def __enter__ ( self ) : assert request.args [ 'foo ' ] == '42 ' with app.test_client ( ) as c : preserve_context = context_preserved = False # access the request object in the interactive shell . Furthermore return Client.open ( self , * args , * * kwargs ) resp = c.get ( '/other ' ) You might find this helpful for unittests where you need the : meth : ` ~flask.Flask.test_client ` with a ` with ` block : : flask.g.value of the context until the end of the ` with ` block . This is useful if def test_test_client_context_binding ( self ) : with app.test_client ( ) as c : kwargs.setdefault ( 'environ_overrides ' , { } ) \ if tb is None or not self.app.debug : flask.g.value = 42 sure to properly : meth : ` ~werkzeug.LocalStack.pop ` the stack yourself in If you would just be using the : meth : ` ~flask.Flask.test_client ` without Sometimes it can be helpful to trigger a regular request but keep the Keep in mind however that : meth : ` ~flask.Flask.after_request ` functions # access the request object in the interactive shell . information from the context local around for a little longer . Make `` 'flask._preserve_context ' `` to ` True ` on the WSGI environment the that situation , otherwise your unittests will leak memory .","['CHANGES', 'docs/api.rst', 'docs/testing.rst', 'flask.py', 'tests/flask_tests.py']",Added support for deferred context cleanup . test_client users can now access the context locals after the actual request if the client is used with a with-block . This fixes # 59 .
736,33e7f2b990e3889d6aa9cffef4a4c9d7d0923698,2010-06-02 18:04:49+02:00,"response = self.process_response ( response ) properly close the connection . try : self.logger.exception ( 'after_request handler failed ' 'Depending on uncertain state ? ' ) error_out = StringIO ( ) def test_after_request_errors ( self ) : def fails ( ) : assert 'Internal Server Error ' in rv.data except Exception , e : def test_after_request_handler_error ( self ) : assert 'after_request handler failed ' in error_out.getvalue ( ) 'to postprocess error response . ' assert len ( called ) == 1 1/0 .. versionchanged : : 0.4 even if an exception happens database have the chance to called = [ ] called.append ( True ) app = flask.Flask ( __name__ ) assert rv.status_code == 500 rv = app.test_client ( ) .get ( '/ ' ) from logging import StreamHandler def after_request ( response ) : app.logger.addHandler ( StreamHandler ( error_out ) ) The : meth : ` after_request ` functions are now called even if an return response error handler took over request processing . This ensures that","['flask.py', 'tests/flask_tests.py']",Invoke after_request on exceptions as well . This fixes # 59
737,707b30749daf407c07b5b265bd892564576ad80a,2010-05-31 17:53:10+02:00,"def run_tests ( ) : ] , sys.path.append ( os.path.join ( os.path.dirname ( __file__ ) , 'tests ' ) ) import os , sys python tests/flask_tests.py ] test_suite='__main__.run_tests ' python setup.py test return suite ( ) from flask_tests import suite","['Makefile', 'setup.py']",use setup.py test . This fixes # 56
738,a6617f44c0416c6877d930b312e1f64df08eca0e,2010-05-31 17:50:31+02:00,all the context local objects used in Flask . This is a documented instance and can be used by extensions and application code but the Useful Internals The internal : class : ` ~werkzeug.LocalStack ` that is used to implement .. data : : _request_ctx_stack use is discouraged in general .,['docs/api.rst'],Documented _request_ctx_stack . This fixes # 57
739,1264c458ae808d306aa03c51f70103e52dca107b,2010-05-26 15:19:08+02:00,random generator which can be used to get such a key : > > > os.urandom ( 24 ) a secret key should be as random as possible . Your operating system has ways to generate pretty random stuff based on a cryptographical > > > import os The problem with random is that it 's hard to judge what random is . And '\xfd { H\xe5 < \x95\xf9\xe3\x96.5\xd1\x01O < ! \xd5\xa2\xa0\x9fR '' \xa1\xa8 ' Just take that thing and copy/paste it into your code and you 're done . .. admonition : : How to generate good Secret Keys,['docs/quickstart.rst'],Document ways to generate secret keys . This fixes # 47 .
740,9d98ad5e079b88fd9da87e47d55a11e465ab6bb0,2010-05-24 15:24:17+02:00,"behaves similar to a file and accessing the URL with a trailing slash pass ` projects ` endpoint has a trailing slash . It 's similar to a folder in def projects ( ) : Take these two rules : : also consistent with how Apache and other servers work . Also , the URLs They look rather similar , the difference is the trailing slash in the redirect to the canonical URL with the trailing slash . However in the second case the URL is defined without a slash so it .. admonition : : Unique URLs / Redirection Behaviour will stay unique which helps search engines not indexing the same page def about ( ) : that sense . Accessing it without a trailing slash will cause Flask to behind that module is to ensure nice looking and also unique URLs based access the page when they forget a trailing slash . This behaviour is will be a 404 error . URL * definition * . In the first case , the canonical URL for the Why is this ? This allows relative URLs to continue working if users Flask 's URL rules are based on Werkzeug 's routing module . The idea on behaviour Apache and earlier servers coined . twice .",['docs/quickstart.rst'],Documented redirect behaviour . Fixes # 42
741,cc8332e9d99c08b77614e5acd7bd0e6d08dc29b6,2010-05-24 15:08:35+02:00,"and `` group `` parameter to the ` WSGIDaemonProcess ` directive ) Subproject commit 09eeca526b2b5675cc29f45917f5d0f795395035 that : meth : ` ~flask.Flask.run ` call from the file and move it into a .. admonition : : Watch Out pkg_add : : can execute it : : protection from the config by setting the ` WSGIRestrictStdout ` to filename is picked up . If you are using ubuntu / debian you can apt-get it and activate it as follows : separate ` run.py ` file or put it into such an if block . .. sourcecode : : text can execute it : WSGIRestrictStdout Off not want if we deploy that application to CGI / appengine . called because this will always start a local WSGI server which we do with a different stream : : * * Problem : * * application dies with an error on print have in your application file , is inside an `` if __name__ == The reason for this is that for non-installed Packages , the module * * Problem : * * accessing resources gives IO errors Subproject commit 991997d6d63a0cdcf7f4557a2dae5afa9b38b904 If your application does not run , follow this guide to troubleshoot : sure the folders the application needs access to have the proper instead you either have to put the folder into the pythonpath the file Toubleshooting * * Problem : * * application gives permission errors filename is used to locate the resources and for symlinks the wrong If you are using ubuntu / debian you can apt-get it and activate it as follows : : '__main__ ' : `` or moved to a separate file . Just make sure it 's not .. _ * guarded by an `` if __name__ == '__main__ ' : `` condition . Either remove * * Problem : * * Application does not run , errorlog shows SystemExit ignored Probably caused by your application running as the wrong user . Make \vskip 8ex site-packages folder . Please be aware that this does not work , : data : ` sys.stdout ` and : data : ` sys.stderr ` . You can disable this \vskip 3ex import sys pkg_add : Alternatively you can also replace the standard out in the .wsgi file Your application probably is a single .py file you symlinked into the privileges set and the application runs as the correct user ( `` user `` not want if we deploy that application to mod_wsgi . `` off `` : Please make sure in advance that your `` app.run ( ) `` call you might is stored in , or convert your application into a package . You have a `` app.run ( ) `` call in your application file that is not not want if we deploy that application to FastCGI . .. sourcecode : : apache sys.stdout = sys.stderr Keep in mind that mod_wsgi disallows doing anything with","['docs/_themes', 'docs/deploying/cgi.rst', 'docs/deploying/fastcgi.rst', 'docs/deploying/mod_wsgi.rst', 'docs/flaskstyle.sty']",Added troubleshooting infos . This fixes # 44
742,854e0e26d16408760072308c44b9160a9fb39abd,2010-05-18 18:05:05+02:00,"by side . < larger-applications > ` _ . Distributing resources with standard modules is < larger-applications > ` . Distributing resources with standard modules is extensions that want to support multiple applications running side ` yourapplication.py ` and you are not using a module , but a : ref : ` package ` yourapplication.py ` and you are not using a module , but a ` package Points to the application handling the request . This is useful for @ app.route ( '/ ' ) .. data : : current_app","['docs/api.rst', 'docs/patterns/distribute.rst', 'docs/patterns/fileuploads.rst']",Fixed some documentation issues . This fixes # 41 .
743,c6e6792cd52022add8455fc792b2ca73c62d3d65,2010-05-17 02:01:23+02:00,recursive-include tests * include Makefile CHANGES LICENSE AUTHORS recursive-include docs * prune docs/_build/doctrees,['MANIFEST.in'],Added MANIFEST.in . This fixes # 39
744,f6da77e894a939b838e02fb744fa3031abfc96ec,2010-05-04 11:43:19+02:00,` base_url ` `` http : //www.example.com/myapplication/page.html `` ` url ` `` http : //www.example.com/myapplication/page.html `` ` url ` `` http : //www.example.com/myapplication/page.html ? x=y `` ` base_url ` `` http : //www.example.com/myapplication/page.html ? x=y ``,['docs/api.rst'],Fixed URL examples . This fixes # 30 .
745,a921aef6c47cecbacef5173f03c07c52e6bc8fea,2010-05-04 11:41:54+02:00,"def test_late_binding ( self ) : admin = flask.Module ( __name__ , 'admin ' ) if self.url_prefix : return '42 ' app.register_module ( admin , url_prefix='/admin ' ) app = flask.Flask ( __name__ ) def index ( ) : assert app.test_client ( ) .get ( '/admin/ ' ) .data == '42 ' if state.url_prefix :","['flask.py', 'tests/flask_tests.py']",Fixed late binding of url_prefix . This fixes # 29 .
746,9248a7baca5bc616a60f9b63b525e872fbfddef2,2010-05-03 13:07:30+02:00,"stacklevel=2 ) return u '' from warnings import warn warn ( Warning ( 'View function did not return a response ' ) , raise ValueError ( 'View function did not return a response ' )",['flask.py'],None responses fail properly now . This fixes # 24
747,8d49440d8b881b2df2c10085a58d3a4e4085147e,2010-05-02 11:45:40+02:00,"All the other objects that are context bound can be used the same . functions . Here a full example that showcases this : : Besides using the test client we used above there is also the Other Testing Tricks app = flask.Flask ( __name__ ) the ` with ` statement can be used to activate a request context : class : ` ~flask.g ` and : class : ` ~flask.session ` objects like in view with app.test_request_context ( '/ ? name=Peter ' ) : assert flask.request.path == '/ ' assert flask.request.args [ 'name ' ] == 'Peter ' : meth : ` ~flask.Flask.test_request_context ` method that in combination with temporarily . With that you can access the : class : ` ~flask.request ` ,",['docs/testing.rst'],Added example for context bound objects to the testing docs . This fixes # 18
748,a9284afde97c30d136e8ec675794c7cdcf4ca277,2010-05-02 11:38:40+02:00,"modifications in the future . The application above is used as a basic applications . of the documentation . Go there to see how easy it is to test Flask example of how to perform unittesting in the : ref : ` testing ` section of the expected , it 's probably not the best idea to add automated tests to basic example of how to perform unittesting in the : ref : ` testing ` section simplify modifications in the future . The application above is used as a expected , it 's probably not a good idea to add automated tests to simplify documentation . Go there to see how easy it is to test Flask applications .",['docs/tutorial/testing.rst'],Fixed typo in tutorial . This fixes # 19
749,f1603d33f266ab24eda604f76632fa604b91e3f9,2010-05-02 11:36:42+02:00,"Variable arguments that are unknown to the target endpoint are appended .. _url-building : the URL rule . Unknown variable parts are appended to the URL as query ... print url_for ( 'login ' , next='/ ' ) /login ? next=/ to the generated URL as query arguments . the URL rule . Here some examples : For more information , head over to the : ref : ` Quickstart < url-building > ` . parameter . Here some examples :","['docs/quickstart.rst', 'flask.py']",Docs mention query args now . This fixes # 20
750,36717b02731ad7d86ba8effbe27e70405e48cd9b,2010-04-27 14:32:09+02:00,"session will be deleted when the user closes the browser . assert expires.year == expected.year .PHONY : clean-pyc test upload-docs self [ '_permanent ' ] = bool ( value ) assert expires.day == expected.day def test_session_expiration ( self ) : # : A : class : ` ~datetime.timedelta ` which is used to set the expiration expires = None app.secret_key = 'testkey ' if session.permanent : return `` # : permanent session survive for roughly one month . del _get_permanent , _set_permanent def _get_permanent ( self ) : `` `` '' Expands the session for support for switching between permanent .. attribute : : permanent # : date of a permanent session . The default is 31 days which makes a return self.get ( '_permanent ' , False ) session.save_cookie ( response , self.session_cookie_name , permanent = True class Session ( SecureCookie ) : def index ( ) : and non-permanent sessions . permanent_session_lifetime = timedelta ( days=31 ) return Session.load_cookie ( request , self.session_cookie_name , assert match is None secret_key=key ) session.save_cookie ( response , self.session_cookie_name ) permanent = property ( _get_permanent , _set_permanent ) assert expires.month == expected.month .PHONY : clean-pyc test return SecureCookie.load_cookie ( request , self.session_cookie_name , expires = datetime.utcnow ( ) + self.permanent_session_lifetime expires=expires , httponly=True ) from datetime import datetime match = re.search ( r'\bexpires= ( [ ^ ; ] + ) ' , rv.headers [ 'set-cookie ' ] ) assert 'set-cookie ' in rv.headers `` `` '' app = flask.Flask ( __name__ ) If set to ` True ` the session life for permanent = False class _NullSession ( SecureCookie ) : default is 31 days . If set to ` False ` ( which is the default ) the import re class _NullSession ( Session ) : : attr : ` ~flask.Flask.permanent_session_lifetime ` seconds . The secret_key=key ) from werkzeug import parse_date flask.session [ 'test ' ] = 42 flask.session.permanent = permanent rv = app.test_client ( ) .get ( '/ ' ) expires = parse_date ( match.group ( ) ) expected = datetime.utcnow ( ) + app.permanent_session_lifetime def _set_permanent ( self , value ) : from datetime import datetime , timedelta","['Makefile', 'docs/api.rst', 'flask.py', 'tests/flask_tests.py']",Added support for long running sessions . This closes # 16 .
751,88f671aaaef334caf3231095b119cac094ff5ffb,2010-04-23 16:04:54+02:00,"def decorator ( f ) : def __init__ ( self , name , url_prefix=None , package_name=None ) : if self.url_prefix : self.app = app rule = state.url_prefix + rule self.name = name return f def _record ( self , func , args ) : state = _ModuleSetupState ( app , options ) def register_module ( self , module , * * options ) : func ( state , * args ) def __init__ ( self , app , url_prefix=None ) : `` `` '' Registers a module with this application . '' '' '' self.app.add_url_rule ( rule , ' % s. % s ' % ( self.name , endpoint ) , def _register_rule ( self , state , rule , endpoint , view_func , options ) : self.package_name = package_name def route ( self , rule , * * options ) : for func , args in module._register_events : self.url_prefix = url_prefix `` `` '' Container object that enables pluggable applications '' '' '' class _ModuleSetupState ( object ) : self._register_events.append ( ( func , args ) ) def add_url_rule ( self , rule , endpoint , view_func=None , * * options ) : options.setdefault ( 'url_prefix ' , self.url_prefix ) self.add_url_rule ( rule , f.__name__ , f , * * options ) self._record ( self._register_rule , ( rule , endpoint , view_func , options ) ) class Module ( object ) : self._register_events = [ ] view_func , * * options ) return decorator",['flask.py'],Another try for # 12
