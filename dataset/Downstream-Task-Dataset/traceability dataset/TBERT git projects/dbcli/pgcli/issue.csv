,issue_id,issue_desc,issue_comments,closed_at,created_at
0,1201,"## Description
<!--- Describe your problem as fully as you can. -->

I installed the following:
cmder
python 3.8.5
pip 20.2.1
psycopg2 (2.8.5)

The following error occurs when I run pip install pgcli

```
pip install pgcli
Collecting pgcli
  Using cached pgcli-3.0.0-py3-none-any.whl (70 kB)
Requirement already satisfied: psycopg2>=2.8 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (2.8.5)
Requirement already satisfied: prompt-toolkit<4.0.0,>=3.0.0 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (3.0.5)
Requirement already satisfied: Pygments>=2.0 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (2.6.1)
Collecting setproctitle>=1.1.9
  Using cached setproctitle-1.1.10.tar.gz (24 kB)
Requirement already satisfied: sqlparse<0.4,>=0.3.0 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (0.3.1)
Requirement already satisfied: configobj>=5.0.6 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (5.0.6)
Requirement already satisfied: cli-helpers[styles]>=1.2.0 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (2.1.0)
Requirement already satisfied: pgspecial>=1.11.8 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (1.11.10)
Requirement already satisfied: humanize>=0.5.1 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (2.5.0)
Requirement already satisfied: click>=4.1 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from pgcli) (7.1.2)
Requirement already satisfied: wcwidth in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from prompt-toolkit<4.0.0,>=3.0.0->pgcli) (0.2.5)
Requirement already satisfied: six in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from configobj>=5.0.6->pgcli) (1.15.0)
Requirement already satisfied: tabulate[widechars]>=0.8.2 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from cli-helpers[styles]>=1.2.0->pgcli) (0.8.7)
Requirement already satisfied: terminaltables>=3.0.0 in c:\users\eric\appdata\local\packages\pythonsoftwarefoundation.python.3.8_qbz5n2kfra8p0\localcache\local-packages\python38\site-packages (from cli-helpers[styles]>=1.2.0->pgcli) (3.1.0)
Building wheels for collected packages: setproctitle
  Building wheel for setproctitle (setup.py) ... error
  ERROR: Command errored out with exit status 1:
   command: 'C:\Users\Eric\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-6atjyko3\\setproctitle\\setup.py'""'""'; __file__='""'""'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-6atjyko3\\setproctitle\\setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' bdist_wheel -d 'C:\Users\Eric\AppData\Local\Temp\pip-wheel-a210_mqr'
       cwd: C:\Users\Eric\AppData\Local\Temp\pip-install-6atjyko3\setproctitle\
  Complete output (5 lines):
  running bdist_wheel
  running build
  running build_ext
  building 'setproctitle' extension
  error: Microsoft Visual C++ 14.0 is required. Get it with ""Build Tools for Visual Studio"": https://visualstudio.microsoft.com/downloads/
  ----------------------------------------
  ERROR: Failed building wheel for setproctitle
  Running setup.py clean for setproctitle
Failed to build setproctitle
DEPRECATION: Could not build wheels for setproctitle which do not use PEP 517. pip will fall back to legacy 'setup.py install' for these. pip 21.0 will remove support for this functionality. A possible replacement is to fix the wheel build issue reported above. You can find discussion regarding this at https://github.com/pypa/pip/issues/8368.
Installing collected packages: setproctitle, pgcli
    Running setup.py install for setproctitle ... error
    ERROR: Command errored out with exit status 1:
     command: 'C:\Users\Eric\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-6atjyko3\\setproctitle\\setup.py'""'""'; __file__='""'""'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-6atjyko3\\setproctitle\\setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' install --record 'C:\Users\Eric\AppData\Local\Temp\pip-record-u5k85dwd\install-record.txt' --single-version-externally-managed --user --prefix= --compile --install-headers 'C:\Users\Eric\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\LocalCache\local-packages\Python38\Include\setproctitle'
         cwd: C:\Users\Eric\AppData\Local\Temp\pip-install-6atjyko3\setproctitle\
    Complete output (5 lines):
    running install
    running build
    running build_ext
    building 'setproctitle' extension
    error: Microsoft Visual C++ 14.0 is required. Get it with ""Build Tools for Visual Studio"": https://visualstudio.microsoft.com/downloads/
    ----------------------------------------
ERROR: Command errored out with exit status 1: 'C:\Users\Eric\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-6atjyko3\\setproctitle\\setup.py'""'""'; __file__='""'""'C:\\Users\\Eric\\AppData\\Local\\Temp\\pip-install-6atjyko3\\setproctitle\\setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' install --record 'C:\Users\Eric\AppData\Local\Temp\pip-record-u5k85dwd\install-record.txt' --single-version-externally-managed --user --prefix= --compile --install-headers 'C:\Users\Eric\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\LocalCache\local-packages\Python38\Include\setproctitle' Check the logs for full command output.
```

## Your environment
<!-- This gives us some more context to work with. -->

- Windows 10
- pip freeze:
cli-helpers==2.1.0
click==7.1.2
configobj==5.0.6
humanize==2.5.0
pgspecial==1.11.10
prompt-toolkit==3.0.5
psycopg2==2.8.5
Pygments==2.6.1
six==1.15.0
sqlparse==0.3.1
tabulate==0.8.7
terminaltables==3.1.0
wcwidth==0.2.5
",Installation Error Windows 10 (pip install pgcli),2020-08-04 17:26:45,
1,1200,"## Description
I use the following settings in my `pgclirc` file:
```
pager = pspg --csv --rr=2 --quit-if-one-screen --ignore-case --csv-header on -s 4 -X
table_format = csv
```
and I'm quite happy, except for one notable defect: when I execute a query containing an error, pgcli does not properly handle the case and still emit the output coming from PG thru the pager, that simply discards it not being a `CSV` stream.

For example, *not* using the pager I get:
```
$ pgcli -h localhost -u user -d test
Server: PostgreSQL 11.8 (Debian 11.8-1.pgdg90+1)
Version: 3.0.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
user@localhost:test> select foo;
column ""foo"" does not exist
LINE 1: select foo
               ^

Time: 0.001s
```

while going thru `pspg` this is what I get:
```
$ pgcli -h localhost -u user -d test --pgclirc my.pgclirc
Server: PostgreSQL 11.8 (Debian 11.8-1.pgdg90+1)
Version: 3.0.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
user@localhost:test> select foo;
Time: 0.002s
```

Maybe the [_evaluate_command() function](https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L901) should return that `success` flag to the caller and the latter emit the output without the pager?

### Environment
```
$ pip freeze
cli-helpers==2.1.0
click==7.1.2
configobj==5.0.6
pendulum==2.1.2
-e git+https://github.com/dbcli/pgcli.git@8f7e31450835bca5d9a8bb4de252efba6f4b7b10#egg=pgcli
pgspecial==1.11.10
prompt-toolkit==3.0.5
psycopg2==2.8.4
pudb==2019.2
Pygments==2.6.1
python-dateutil==2.8.1
pytzdata==2020.1
setproctitle==1.1.10
six==1.15.0
sqlparse==0.3.1
tabulate==0.8.7
terminaltables==3.1.0
urwid==2.1.1
wcwidth==0.2.5

$ pspg --version
pspg-2.6.6
with readline (version: 0x0603)
with integrated menu
ncurses version: 6.1, patch: 20190112
ncurses with wide char support
ncurses widechar num: 1
wchar_t width: 4, max: 2147483647
with postgres client integration
```

The same happens with latest released version of `pspg`, 3.1.2.",SQL errors are discarded when using the pspg pager,2020-07-31 09:25:02,
2,1199,"## Description

As per #1015, this removes the `humanize` library in favor of `pendulum` for showing query duration. It does add `dateutil` and `pytzdata` as dependencies, which may not be desirable - just thought I'd throw it out there since it was such an easy change.


## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Move from humanize to pendulum library for displaying query duration
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=h1) Report
> Merging [#1199](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/80bf05a3b3be8eb86cbc90dd5e9214a61ba2edb3&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1199/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1199      +/-   ##
==========================================
- Coverage   83.93%   83.89%   -0.04%     
==========================================
  Files          21       21              
  Lines        2552     2552              
==========================================
- Hits         2142     2141       -1     
- Misses        410      411       +1     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1199/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <100.00%> (ø)` | |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1199/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.92% <0.00%> (-0.31%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=footer). Last update [80bf05a...dd05f8a](https://codecov.io/gh/dbcli/pgcli/pull/1199?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice one! Thank you! 🍫 ",2020-07-28 00:14:42,2020-07-29 06:08:20
3,1198,"## Description

Today I made a typo in a DSN alias while connecting, and the ""invalid DSN"" error made me look at my pgcli config file, wondering how it changed, before I realized I just misspelled the alias. So I figured it might be nice to make the error for that case more explicit.

I'm happy to add a test or two but I couldn't find any other tests for the `cli` function / error cases to base it off of.


## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","More explicit error message when DSN alias is not found
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=h1) Report
> Merging [#1198](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8f7e31450835bca5d9a8bb4de252efba6f4b7b10&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `0.00%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1198/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1198      +/-   ##
==========================================
+ Coverage   83.72%   83.75%   +0.03%     
==========================================
  Files          21       21              
  Lines        2531     2555      +24     
==========================================
+ Hits         2119     2140      +21     
- Misses        412      415       +3     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1198/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `75.63% <0.00%> (-0.28%)` | :arrow_down: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1198/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.92% <0.00%> (+0.05%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1198/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `91.66% <0.00%> (+0.75%)` | :arrow_up: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1198/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `66.66% <0.00%> (+1.66%)` | :arrow_up: |
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1198/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `53.12% <0.00%> (+9.72%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=footer). Last update [8f7e314...baf5386](https://codecov.io/gh/dbcli/pgcli/pull/1198?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Well done, thank you @tomplex! 🍓 ",2020-07-27 23:38:02,2020-07-31 17:25:07
4,1197,"## Description
It turns out that Fedora 32 doesn't have prompt-toolkit 3 yet :-(

Seems we still support Prompt Toolkit 2 without any code changes (the tests don't fail on my system).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Keep support for prompt_toolkit 2
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=h1) Report
> Merging [#1197](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/77414aa9e75f89cca9d248d4c0f3b9f1959007c8&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1197/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1197      +/-   ##
==========================================
- Coverage   83.89%   83.85%   -0.04%     
==========================================
  Files          21       21              
  Lines        2552     2552              
==========================================
- Hits         2141     2140       -1     
- Misses        411      412       +1     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgstyle.py](https://codecov.io/gh/dbcli/pgcli/pull/1197/diff?src=pr&el=tree#diff-cGdjbGkvcGdzdHlsZS5weQ==) | `64.00% <ø> (ø)` | |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1197/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <0.00%> (-0.14%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=footer). Last update [41dd24e...345a527](https://codecov.io/gh/dbcli/pgcli/pull/1197?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Whoops thanks for checking this @laixintao that was my idea (to include pt 3). Fixed in 36e60475524956cdc2561d24826495e17d4f7882
@meeuw Did you verify that pgcli can work with both prompt_toolkit 2.x and 3.x? I thought they are not compatible.
> @meeuw Did you verify that pgcli can work with both prompt_toolkit 2.x and 3.x? I thought they are not compatible.

I think it's compatible, I didn't change any code while upgrading from 2.x: https://github.com/dbcli/pgcli/pull/1149/files , and I checked the changelog.

Can @jonathanslenders confirm?
:tada: yes, I've checked that pgcli still works with pt-2. Thanks a lot for merging!",2020-07-06 19:23:16,2020-07-08 19:28:25
5,1196,"## Description

Since the only way to customize the string, number, keyword color is by changing through `syntax_style = <given_style>`,
I added some custom color types which will overwrite prompt_toolkit's style color via `merge_styles` func.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Add custom color
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=h1) Report
> Merging [#1196](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/77414aa9e75f89cca9d248d4c0f3b9f1959007c8&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1196/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1196      +/-   ##
==========================================
- Coverage   83.89%   83.85%   -0.04%     
==========================================
  Files          21       21              
  Lines        2552     2552              
==========================================
- Hits         2141     2140       -1     
- Misses        411      412       +1     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgstyle.py](https://codecov.io/gh/dbcli/pgcli/pull/1196/diff?src=pr&el=tree#diff-cGdjbGkvcGdzdHlsZS5weQ==) | `64.00% <ø> (ø)` | |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1196/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <0.00%> (-0.14%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=footer). Last update [77414aa...aaa1a1c](https://codecov.io/gh/dbcli/pgcli/pull/1196?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you @GUIEEN , looks good!",2020-07-05 11:52:21,2020-07-08 03:19:23
6,1195,"## Description
<!--- Describe your changes in detail. -->
Current datatype / function suggestions based on the pgliterals.json is out of date.
So I chose to update datatypes / functions of pgliterals.json according to current version's document.

- datatypes(https://www.postgresql.org/docs/current/datatype.html)
    - Table 8.1. Data Types
    - Table 8.26. Object Identifier Types
    - Table 8.27. Pseudo-Types
- functions(https://www.postgresql.org/docs/current/functions.html)
    - Table 9.3. Comparison Functions
    - Table 9.5. Mathematical Functions
    - Table 9.9. SQL String Functions and Operators
    - Table 9.10. Other String Functions
    - Table 9.12. SQL Binary String Functions and Operators
    - Table 9.13. Other Binary String Functions
    - Table 9.24. Formatting Functions
    - Table 9.31. Date/Time Functions
    - Table 9.33. Enum Support Functions
    - Table 9.35. Geometric Functions
    - Table 9.36. Geometric Type Conversion Functions
    - Table 9.38. cidr and inet Functions
    - Table 9.52. Array Functions
    - Table 9-42. General-Purpose Aggregate Functions
    - Table 9-44. General-Purpose Window Functions

- [x] Updated function / database test cases

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Update suggestion literals
@GUIEEN Thank you for the PR! It looks like you need to update unit tests as well. Are you able to do that?
okay, I can look into it but not sure how should the test logic be done.
do you think is it enough to check whether all types/funcs I added is loaded well on the suggestions or not ?
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=h1) Report
> Merging [#1195](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/77414aa9e75f89cca9d248d4c0f3b9f1959007c8&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1195/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1195      +/-   ##
==========================================
- Coverage   83.89%   83.85%   -0.04%     
==========================================
  Files          21       21              
  Lines        2552     2552              
==========================================
- Hits         2141     2140       -1     
- Misses        411      412       +1     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgstyle.py](https://codecov.io/gh/dbcli/pgcli/pull/1195/diff?src=pr&el=tree#diff-cGdjbGkvcGdzdHlsZS5weQ==) | `64.00% <ø> (ø)` | |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1195/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <0.00%> (-0.14%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=footer). Last update [80bf05a...81b0e58](https://codecov.io/gh/dbcli/pgcli/pull/1195?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Sorry it took me a while to get back - this is looking great! Merging.
no problem ! it's my pleasure :)",2020-07-01 19:28:24,2020-07-31 17:22:00
7,1194,"## Description
<!--- Describe your changes in detail. -->

Fixes https://github.com/dbcli/pgcli/issues/1193.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","J bennet/fix sql comment
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=h1) Report
> Merging [#1194](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0c24e8bda226f3dbd6ccb0381515a9c903847249&el=desc) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1194/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1194   +/-   ##
=======================================
  Coverage   83.84%   83.85%           
=======================================
  Files          21       21           
  Lines        2551     2552    +1     
=======================================
+ Hits         2139     2140    +1     
  Misses        412      412           
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/1194/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9fX2luaXRfXy5weQ==) | `100.00% <100.00%> (ø)` | |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1194/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.62% <100.00%> (+0.05%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=footer). Last update [0c24e8b...106c6c7](https://codecov.io/gh/dbcli/pgcli/pull/1194?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Tested, works well! ☕️",2020-06-26 20:57:15,2020-06-28 02:12:18
8,1193,"## Description
To reproduce: Connect to a postgres database, save the following to a file and include it via `\i <file>`:
```postgresql
--

--
```
The shell will report `list index out of range`.

Commands before the trailing comments will not be executed, i.e., the following will produce the same output and no user will be created:
```postgresql
create role foobar123;
--

--
```

If the comments are not the last thing in the file, all is fine and commands are executed as expected, as in the following example:
```postgresql
select 1;
--

--
select 2;
```

## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information:
```
Linux charon 5.7.4-arch1-1 #1 SMP PREEMPT Thu, 18 Jun 2020 16:01:07 +0000 x86_64 GNU/Linux
```
- [x] Please provide your CLI version:
```
 > pgcli --version
Version: 3.0.0
```
(Note that pgcli was installed as a system package, not using pip. I hope that the bug is easy to reproduce. If that is not the case, I can try and see what happens when using the current master.)
- [x] What is the output of ``pip freeze`` command:
```
 > pip freeze
alabaster==0.7.12
anytree==2.8.0
apipkg==1.5
appdirs==1.4.4
asciinema==2.0.2
asn1crypto==1.3.0
astroid==2.4.2
atomicwrites==1.4.0
attrs==19.3.0
Babel==2.8.0
backports.csv==1.0.7
bcrypt==3.1.7
Beaker==1.11.0
Brlapi==0.7.0
btrfsutil==1.2.0
CacheControl==0.12.6
ceph-volume==1.0.0
cephfs==2.0.0
cephfs-shell==0.0.1
cffi==1.14.0
chardet==3.0.4
cli-helpers==1.2.1
click==7.1.2
click-log==0.3.2
click-plugins==1.1.1
click-threading==0.4.4
cmd2==1.1.0
colorama==0.4.3
compdb==0.2.0
configobj==5.0.6
contextlib2==0.6.0.post1
cryptography==2.9.2
cycler==0.10.0
Cython==0.29.20
decorator==4.4.2
distlib==0.3.0
distro==1.5.0
docopt==0.6.2
docutils==0.16
entrypoints==0.3
et-xmlfile==1.0.1
evdev==1.3.0
eyeD3==0.8
gpodder==3.10.15
gps==3.20
greenlet==0.4.16
html5lib==1.0.1
humanize==0.5.1
icalendar==4.0.6
idna==2.9
imageio==2.8.0
imagesize==1.2.0
importlib-metadata==1.6.1
iniconfig==1.0.0
iotop==0.6
isc==2.0
isodate==0.6.0
isort==4.3.21
jdcal==1.4.1
jedi==0.17.0
jeepney==0.4.3
Jinja2==2.11.2
joblib==0.14.1
keyring==21.2.1
khal==0.10.1
kiwisolver==1.2.0
lazy-object-proxy==1.5.0
lensfun==0.3.95
lit==0.10.0.dev0
louis==3.14.0
lutris==0.5.6
lxml==4.5.1
Mako==1.1.3
mallard-ducktype==1.0.2
Markdown==3.1.1
Markups==3.0.0
MarkupSafe==1.1.1
matplotlib==3.2.2
mccabe==0.6.1
mercurial==5.4.1
meson==0.54.3
Mimeo==2019.7.6.0.8.17
more-itertools==8.4.0
msgpack==1.0.0
mygpoclient==1.8
neovim-remote==2.4.0
networkx==2.4
numexpr==2.7.1
numpy==1.18.5
olefile==0.46
openpyxl==3.0.3
ordered-set==3.1.1
packaging==20.4
pandas==1.0.5
parso==0.7.0
pep517==0.8.2
pgcli==3.0.0
pgspecial==1.11.10
Pillow==6.2.1
pluggy==0.13.1
ply==3.11
podcastparser==0.6.5
progress==1.5
prompt-toolkit==3.0.5
psutil==5.7.0
psycopg2==2.8.5
pudb==2019.2
py==1.8.2
pycairo==1.19.1
pycountry==19.8.18
pycparser==2.20
pycryptodome==3.9.7
Pygments==2.6.1
PyGObject==3.36.1
PyICU==2.5
pyinotify==0.9.6
pylint==2.5.3
pynvim==0.4.0
PyOpenGL==3.1.5
pyparsing==2.4.7
pyPEG2==2.15.2
pyperclip==1.7.0
PyQt5==5.15.0
PyQt5-sip==12.8.0
PyQtWebEngine==5.15.0
PySocks==1.7.1
pytest==5.4.3
python-dateutil==2.8.1
python-markdown-math==0.6
pytoml==0.1.21
pytz==2020.1
PyWavelets==1.1.1
pyxdg==0.26
PyYAML==5.3.1
pyzfs==0.8.4
pyzmq==19.0.1
qutebrowser==1.12.0
rados==2.0.0
ranger-fm==1.9.3
rbd==2.0.0
requests==2.24.0
requests-toolbelt==0.9.1
resolvelib==0.4.0
ReText==7.1.0
retrying==1.3.3
rgw==2.0.0
scikit-image==0.16.2
scikit-learn==0.23.1
scipy==1.4.1
seaborn==0.10.1
SecretStorage==3.1.2
setproctitle==1.1.10
sip==4.19.23
six==1.15.0
snowballstemmer==2.0.0
Sphinx==3.1.1
sphinx-rtd-theme==0.5.0
sphinxcontrib-applehelp==1.0.2
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==1.0.3
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==1.0.3
sphinxcontrib-serializinghtml==1.1.4
sphinxcontrib-websupport==1.1.2
SQLAlchemy==1.3.17
sqlparse==0.3.1
sshuttle==1.0.2
streamlink==1.4.1
tabulate==0.8.7
team==1.0
terminaltables==3.1.0
threadpoolctl==2.0.0
toml==0.10.1
tzlocal==2.1
Unidecode==1.1.1
urllib3==1.25.9
urlscan==0.9.4
urwid==2.1.0
vdirsyncer==0.16.9.dev0+gb5dd092.d20200612
vobject==0.9.6.1
wcwidth==0.2.4
webencodings==0.5.1
websocket-client==0.57.0
Whoosh==2.7.4
wrapt==1.12.1
xlrd==1.2.0
youtube-dl==2020.6.16.1
zipp==3.1.0
```","""list index out of range""-error when including file with trailing comments separated by newline
Thank you for fixing this!",2020-06-25 09:54:18,2020-06-28 02:12:18
9,1192,"## Description
I'd like to run pgcli on alpine linux.

this is how far I got:
```sh
docker run -it alpine
apk add postgresql
apk add py3-pip
pip3 install pgcli
```

```sh
Collecting pgcli
  Downloading pgcli-3.0.0-py3-none-any.whl (70 kB)
     |████████████████████████████████| 70 kB 6.5 MB/s
Collecting psycopg2>=2.8
  Downloading psycopg2-2.8.5.tar.gz (380 kB)
     |████████████████████████████████| 380 kB 9.6 MB/s
    ERROR: Command errored out with exit status 1:
     command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'/tmp/pip-install-x22ehx11/psycopg2/setup.py'""'""'; __file__='""'""'/tmp/pip-install-x22ehx11/psycopg2/setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base /tmp/pip-pip-egg-info-wpv_f_mu
         cwd: /tmp/pip-install-x22ehx11/psycopg2/
    Complete output (23 lines):
    running egg_info
    creating /tmp/pip-pip-egg-info-wpv_f_mu/psycopg2.egg-info
    writing /tmp/pip-pip-egg-info-wpv_f_mu/psycopg2.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-pip-egg-info-wpv_f_mu/psycopg2.egg-info/dependency_links.txt
    writing top-level names to /tmp/pip-pip-egg-info-wpv_f_mu/psycopg2.egg-info/top_level.txt
    writing manifest file '/tmp/pip-pip-egg-info-wpv_f_mu/psycopg2.egg-info/SOURCES.txt'

    Error: pg_config executable not found.

    pg_config is required to build psycopg2 from source.  Please add the directory
    containing pg_config to the $PATH or specify the full executable path with the
    option:

        python setup.py build_ext --pg-config /path/to/pg_config build ...

    or with the pg_config option in 'setup.cfg'.

    If you prefer to avoid building psycopg2 from source, please install the PyPI
    'psycopg2-binary' package instead.

    For further information please check the 'doc/src/install.rst' file (also at
    <https://www.psycopg.org/docs/install.html>).

    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
```
","Installing on alpine
I also tried:
```sh
/ # pip3 install pgcli --only-binary psycopg2
Collecting pgcli
  Using cached pgcli-3.0.0-py3-none-any.whl (70 kB)
Collecting prompt-toolkit<4.0.0,>=3.0.0
  Downloading prompt_toolkit-3.0.5-py3-none-any.whl (351 kB)
     |████████████████████████████████| 351 kB 11.0 MB/s
Collecting Pygments>=2.0
  Downloading Pygments-2.6.1-py3-none-any.whl (914 kB)
     |████████████████████████████████| 914 kB 12.0 MB/s
Collecting pgspecial>=1.11.8
  Downloading pgspecial-1.11.10-py3-none-any.whl (33 kB)
Collecting click>=4.1
  Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)
     |████████████████████████████████| 82 kB 2.1 MB/s
Collecting cli-helpers[styles]>=1.2.0
  Downloading cli_helpers-2.0.1-py3-none-any.whl (19 kB)
Collecting humanize>=0.5.1
  Downloading humanize-2.4.0-py3-none-any.whl (62 kB)
     |████████████████████████████████| 62 kB 2.4 MB/s
Collecting sqlparse<0.4,>=0.3.0
  Downloading sqlparse-0.3.1-py2.py3-none-any.whl (40 kB)
     |████████████████████████████████| 40 kB 10.2 MB/s
Collecting configobj>=5.0.6
  Downloading configobj-5.0.6.tar.gz (33 kB)
Collecting setproctitle>=1.1.9
  Downloading setproctitle-1.1.10.tar.gz (24 kB)
ERROR: Could not find a version that satisfies the requirement psycopg2>=2.8 (from pgcli) (from versions: none)
ERROR: No matching distribution found for psycopg2>=2.8 (from pgcli)
```
if you want use pgcli withdocker, you can use https://hub.docker.com/r/dbcliorg/pgcli

sample of Dockerfile

```
FROM python:3.8-alpine
RUN \
 apk add --no-cache postgresql-libs && \
 apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && \
 pip install pgcli==3.0.0 && \
 apk --purge del .build-deps
ENTRYPOINT [""pgcli""]
```
@fraoustin awesome! thank you.
How did I not think to look at dockerhub 🤦 

Thanks for a great cli!
It's new ;-)
",2020-06-16 10:59:48,2020-06-16 11:49:31
10,1191,"## Description
To work with interactive SQLs, we need to provide input at sql runtime, for this we need \prompt to work, but it's not working with pgcli as shown below:

pgdb1> \i tab_size.sql
syntax error at or near ""\""
LINE 1: \prompt 'enter schema name here: ' schema_name
        ^

as can be seen above \prompt is not identified as keyword.

Please have a look.

## Your environment

- [ ] Please provide your OS and version information.
MacOS - version 10.14.6
- [ ] Please provide your CLI version.
Version: 2.2.0
- [ ] What is the output of ``pip freeze`` command.
$ pip3 freeze
awscli==1.17.0
botocore==1.14.0
cli-helpers==2.0.1
click==7.1.1
colorama==0.4.1
coloredlogs==10.0
configobj==5.0.6
docutils==0.15.2
Flask==1.1.1
humanfriendly==4.18
humanize==2.4.0
itsdangerous==1.1.0
Jinja2==2.11.1
jmespath==0.9.4
MarkupSafe==1.1.1
pgspecial==1.11.10
prompt-toolkit==3.0.5
psycopg2==2.8.5
pyasn1==0.4.8
Pygments==2.5.2
python-dateutil==2.8.1
PyYAML==5.2
retrying==1.3.3
rsa==3.4.2
s3transfer==0.3.0
setproctitle==1.1.10
six==1.13.0
sqlparse==0.3.0
tabulate==0.8.7
terminaltables==3.1.0
urllib3==1.25.7
wcwidth==0.2.3
Werkzeug==1.0.1","\prompt not working with pgcli
pgcli does not support all meta-commands (""backslash commands"") that exist in psql. `\?` will display all supported pgcli commands.

I can leave this open as feature request - but it's not a bug.",2020-06-03 18:16:24,
11,1190,"## Description
<!--- Describe your problem as fully as you can. -->

Some of my databases cannot be connected with `pgcli -D <dsn>` from several days ago.

```
[alias_dsn]
sdb = postgresql://postgres:xxxxx@11.66.194.51/scenedb
```

![image](https://user-images.githubusercontent.com/17923071/83240317-cd1ec400-a1cb-11ea-88da-a8d5a97ca5a8.png)

But `pgcli -h <ip> -u xxx` works:

![image](https://user-images.githubusercontent.com/17923071/83240386-e758a200-a1cb-11ea-9605-b4aaa7a6368c.png)

And here are relavant logs from `.config/pgcli/log`:

```
2020-05-29 16:39:26,722 (148849/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/usr/lib/python3.8/site-packages/pgcli/main.py"", line 562, in connect
    raise e
  File ""/usr/lib/python3.8/site-packages/pgcli/main.py"", line 549, in connect
    pgexecute = PGExecute(database, user, passwd, host, port, dsn, **kwargs)
  File ""/usr/lib/python3.8/site-packages/pgcli/pgexecute.py"", line 214, in __init__
    self.connect(database, user, password, host, port, dsn, **kwargs)
  File ""/usr/lib/python3.8/site-packages/pgcli/pgexecute.py"", line 254, in connect
    conn = psycopg2.connect(**conn_params)
  File ""/usr/lib/python3.8/site-packages/psycopg2/__init__.py"", line 127, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
  File ""/usr/lib/python3.8/site-packages/pgcli/pgexecute.py"", line 39, in _wait_select
    state = conn.poll()
psycopg2.OperationalError: could not send SSL negotiation packet: Resource temporarily unavailable
```

## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.

```
Linux oreo 5.4.40-1-MANJARO #1 SMP PREEMPT Sun May 10 14:17:40 UTC 2020 x86_64 GNU/Linux
```
- [x] Please provide your CLI version.

```
pgcli -v
Version: 3.0.0
```

- [x] What is the output of ``pip freeze`` command.

```
apparmor==2.13.4
appdirs==1.4.3
application-utility==1.3.2
arandr==0.1.10
asn1crypto==1.3.0
attrs==19.3.0
Automat==20.2.0
autopep8==1.5.2
bauh==0.9.3
Beaker==1.11.0
beautifulsoup4==4.9.1
bs4==0.0.1
btrfsutil==1.2.0
CacheControl==0.12.6
cffi==1.14.0
chardet==3.0.4
cli-helpers==2.0.1
click==7.1.1
colorama==0.4.3
configobj==5.0.6
constantly==15.1.0
contextlib2==0.6.0.post1
cryptography==2.9.2
deluge==2.0.4.dev23
distlib==0.3.0
distro==1.5.0
docopt==0.6.2
entrypoints==0.3
filelock==3.0.12
flake8==3.7.9
GeoIP==1.3.2
gufw==20.4.0
html5lib==1.0.1
httpie==2.1.0
humanize==0.5.1
hyperlink==19.0.0
idna==2.9
incremental==17.5.0
jeepney==0.4.3
keyring==21.2.0
lensfun==0.3.95
LibAppArmor==2.13.4
lit==0.10.0.dev0
louis==3.13.0
lxml==4.5.1
Mako==1.1.2
MarkupSafe==1.1.1
mccabe==0.6.1
msgpack==1.0.0
mycli==1.21.1
npyscreen==4.10.5
ordered-set==3.1.1
packaging==20.3
pacman-mirrors==4.16.4
pbr==5.4.5
pep517==0.8.2
pgcli==3.0.0
pgspecial==1.11.10
Pillow==6.2.1
ply==3.11
progress==1.5
prompt-toolkit==3.0.5
psutil==5.7.0
psycopg2==2.8.5
psycopg2-binary==2.8.5
pyaml==20.4.0
pyasn1==0.4.8
pyasn1-modules==0.2.8
pycairo==1.19.1
pycodestyle==2.5.0
pycparser==2.20
pyflakes==2.2.0
Pygments==2.6.1
PyGObject==3.36.1
PyHamcrest==1.9.0
PyMySQL==0.9.3
pyOpenSSL==19.1.0
pyparsing==2.4.7
PyQt5==5.14.2
PyQt5-sip==12.7.2
pysmbc==1.0.20
python-libtorrent==1.2.6
python-xapp==2.0.0
python-xlib==0.27
pytoml==0.1.21
pyxdg==0.26
PyYAML==5.3.1
ranger-fm==1.9.3
rencode==1.0.6
reportlab==3.5.42
requests==2.23.0
retrying==1.3.3
SecretStorage==3.1.2
service-identity==18.1.0
setproctitle==1.1.10
shadowsocks==3.0.0
six==1.14.0
soupsieve==2.0.1
speedtest-cli==2.1.2
sqlparse==0.3.1
stevedore==1.32.0
tabulate==0.8.7
team==1.0
terminaltables==3.1.0
toml==0.10.0
Twisted==20.3.0
ueberzug==18.1.5
ufw==0.36
urllib3==1.25.9
virtualenv==20.0.21
virtualenv-clone==0.5.4
virtualenvwrapper==4.8.4
wcwidth==0.1.9
webencodings==0.5.1
youtube-dl==2020.5.8
zope.interface==5.1.0

```","connection with dsn raises 'could not send SSL negotiation packet: Resource temporarily unavailable'
Hi

can you test the connection with the database by docker.

You run a base with

You write a Dockerfile file:

```
FROM postgres:12-alpine
RUN apk add --no-cache openssl
RUN /usr/bin/openssl req -new -text -passout pass:abcd -subj /CN=localhost -out /var/lib/postgresql/server.req
RUN /usr/bin/openssl rsa -in privkey.pem -passin pass:abcd -out /var/lib/postgresql/server.key
RUN /usr/bin/openssl req -x509 -in /var/lib/postgresql/server.req -text -key /var/lib/postgresql/server.key -out /var/lib/postgresql/server.crt
RUN chmod 400 /var/lib/postgresql/server.key
RUN chown postgres.postgres /var/lib/postgresql/server.key
```

you build and run the Dockerfile

```
docker build -t test .
docker run -d --name test -p 5432:5432 -e POSTGRES_PASSWORD=secret test -c ssl=on -c ssl_cert_file=/var/lib/postgresql/server.crt -c ssl_key_file=/var/lib/postgresql/server.key
```

you can test the connection, with a pgcli docker

```
docker run --rm -it dbcliorg/pgcli -h <YourIP> -p 5432 -U postgres -W 
```

you can test the connection, with your pgcli 

```
pgcli -h <YourIP> -p 5432 -U postgres -W 
```

At home the connection is ok 

",2020-05-29 08:51:12,
12,1189,"## Description
On Mac, the normal keyboard shortcut for moving the cursor one word at a time is alt + left/right arrow keys.  However, pgcli does not seem to support this when entering a query (it inserts characters instead of moving the cursor).  Instead, I have to use the control key with the arrow keys, which is a windows/linux shortcut.  Please support the proper shortcut on macOS.

## Your environment
OS: macOS 10.14.6
CLI Version: 3.0.0
`pip freeze`:
```3to2==1.1.1
agate==1.6.1
agate-dbf==0.2.1
agate-excel==0.2.3
agate-sql==0.5.4
appdirs==1.4.4
applib==1.2
arrow==0.13.0
b2==1.4.2
b2sdk==0.1.8
Babel==2.8.0
certifi==2020.4.5.1
chardet==3.0.4
cli-helpers==2.0.1
click==7.1.2
cmdln==2.0.0
CodeIntel==2.0.0
configobj==5.0.6
csvkit==1.0.5
dbfread==2.0.7
esprima==4.0.1
et-xmlfile==1.0.1
funcsigs==1.0.2
future==0.18.2
humanize==2.4.0
idna==2.9
Inflector==3.0.1
isodate==0.6.0
jdcal==1.4.1
leather==0.3.3
libclang-py3==3.9.0
logfury==0.1.2
openpyxl==3.0.3
parsedatetime==2.5
pgcli==3.0.0
pgspecial==1.11.10
prompt-toolkit==3.0.5
psycopg2==2.8.5
Pygments==2.6.1
pyobjc-core==6.2
pyobjc-framework-Cocoa==6.2
pyobjc-framework-Quartz==6.2
python-dateutil==2.8.1
python-slugify==4.0.0
pytimeparse==1.1.8
pytz==2020.1
requests==2.23.0
setproctitle==1.1.10
simplejson==3.17.0
six==1.15.0
SQLAlchemy==1.3.17
sqlparse==0.3.1
tabulate==0.8.7
terminaltables==3.1.0
text-unidecode==1.3
tqdm==4.46.0
Unidecode==1.1.1
urllib3==1.25.9
wcwidth==0.1.9
xlrd==1.2.0
zope.cachedescriptors==4.3.1
```
","Support alt + arrow keys for moving by word on Mac
I wasn't able to duplicate this bug - that is, the Option key plus right or left arrow on my Mac moves the cursor left or right by a full word, as you were expecting.

I'm also on dbcli version 3.0.0 and OS X 10.14.6 (Mojave), so I can't explain the discrepancy that way.

Also, I think that this functionality is inherited from prompt-toolkit, so whatever issue you're experiencing probably traces back to there.  I tried out https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/examples/tutorial/sqlite-cli.py and saw the same cursor movement behavior there.  Do you want to try that out and see if your bug persists there?
To be fair, pgcli has its own keybindings as well, but those are for pgcli-specific things (such as function keys):

https://github.com/dbcli/pgcli/blob/master/pgcli/key_bindings.py

Other keybindings are provided by prompt-toolkit, and there's a lot of them:

https://github.com/prompt-toolkit/python-prompt-toolkit/tree/master/prompt_toolkit/key_binding/bindings

So yes, this is the issue for @jonathanslenders.
After looking into some stuff, it was probably an issue with iTerm2 key configs.  It looks like alt+left was set to send `^[B` and alt+right was set to send `^[F`.  I've switched those to use the `^[[1;5D` and `^[[1;5C` that were set for the left and right arrows with the control key, and it works as expected.  I'm guessing the `^[B` and `^[F` escape sequences aren't as common, but I've never had any trouble with them in anything that uses the system or homebrew-installed `readline` library like zsh, NodeJS, and Ruby.

On the topic of the system readline library, one really nice config I found online for `~/.inputrc` is
```
# Use the text that has already been typed as the prefix for searching through
# commands (basically more intelligent Up/Down behavior)
""\e[B"": history-search-forward
""\e[A"": history-search-backward
```
This sets it up so that if I start typing, the up and down arrows that navigate the history will navigate only between commands that have the same content before the point my cursor is at.  For example, if I type `echo`, then the up and down will only navigate between history entries that start with `echo`.  Also, if I type `echo ""hi""`, then move my cursor to right after `echo`, it will only match based on `echo` since that's what's before my cursor.  It would be really awesome if pgcli could have functionality like that, though that should probably be a separate github issue.  I'm guessing some aspects of the tool, like the autocomplete, prevent the standard system `readline` library from being used, since my `~/.inputrc` is normally respected when the system `readline` library is used.
Let me revise that statement.  After looking at the built-in terminal app, I found that the intended escape sequence is `^[b` and `^[f`.  The iTerm2 app was using capital letters, which seems to have been the issue.  Switching it to lowercase works fine.
@henderea : Is that the default configuration for iTerm2? It's easy enough otherwise to add the capital versions to the default key bindings in prompt_toolkit. A bit weird though.
@jonathanslenders I had never changed any of those configs, so the capital versions are definitely the default, at least for whatever version of iTerm2 I started off with.",2020-05-28 16:31:13,
13,1188,"## Description
I trying to use keyring integration in pgcli, pgcli take responsibility to seting and getting password during connection to database. I take a look into pgcli implementation, all seams ok, but in general getting password don't work. 
Then I tried to make same process by hand, and got that get_password function don't return anything. I thought that it was cause keyring haven't anything to return. I make set by hand, all seams ok, but get_password return nothing as well. 

**To Reproduce**
Steps to reproduce the behavior:
1. pip install keyring
2. pip install bitwarden-keyring
3. yay -S bitwarden-cli 
4. pip install pgcli
5. pgcli -h localhost -U postgres -W
5.1 then pgcli connection to bitwarden and ask master password to get password for connect 
5.2 I provide master password. 
5.3 Them pgcli request password, even if I have one in bw. 
6. I successfuly connected
7. Make disconnect
8. Connect again
8.1 Same steps as in step 5, so nothing saved and nothing getting from bw. 

## Your environment
```
➜ uname -a               
Linux gnome 5.6.12-arch1-1 #1 SMP PREEMPT Sun, 10 May 2020 10:43:42 +0000 x86_64 GNU/Linux
➜ pgcli -v                                                                        
Version: 3.0.0
➜ bw --version
1.9.1
```
```
➜ pip freeze                   
airdrop-ng==1.1
airgraph-ng==1.1
alabaster==0.7.12
appdirs==1.4.4
asn1crypto==1.3.0
attrs==19.3.0
Babel==2.8.0
backcall==0.1.0
backports.csv==1.0.7
bcrypt==3.1.7
beautifulsoup4==4.9.1
bitwarden-keyring==0.3.0
bleach==3.1.5
btrfsutil==1.2.0
CacheControl==0.12.6
cached-property==1.5.1
certifi==2019.11.28
cffi==1.14.0
chardet==3.0.4
cli-helpers==1.2.0
click==7.1.1
colorama==0.4.3
configobj==5.0.6
contextlib2==0.6.0.post1
cryptography==2.9.2
decorator==4.4.2
deepspeech==0.6.0
deepspeech-gpu==0.6.0
defusedxml==0.6.0
distlib==0.3.0
distro==1.5.0
docker==4.2.0
docker-compose==1.25.5
docker-pycreds==0.4.0
dockerpty==0.4.1
docopt==0.6.2
docutils==0.16
entrypoints==0.3
enum-compat==0.0.3
evdev==1.3.0
feedparser==5.2.1
filelock==3.0.12
future==0.18.2
greenlet==0.4.15
guake==3.7.0
html5lib==1.0.1
humanize==0.5.1
i3-workspace-groups==0.4.6
i3ipc==2.1.1
idna==2.9
imagesize==1.2.0
importlib-metadata==1.5.2
ipykernel==5.1.4
ipython==7.14.0
ipython-genutils==0.1.0
ipywidgets==7.5.1
jedi==0.16.0
jeepney==0.4.3
Jinja2==2.11.2
jsonschema==3.2.0
jupyter-client==6.0.0
jupyter-console==6.1.0
jupyter-core==4.6.3
keyboard==0.13.4
keyring==21.2.0
lockfile==0.12.2
lutris==0.5.6
lyricwikia==0.1.11
MarkupSafe==1.1.1
meson==0.54.1
mistune==0.8.4
more-itertools==8.2.0
msgpack==1.0.0
nbconvert==5.6.1
nbformat==4.4.0
notebook==6.0.3
numpy==1.17.4
ordered-set==3.1.1
packaging==20.3
pafy==0.5.5
pandocfilters==1.4.2
paramiko==2.7.1
parso==0.7.0
pbr==5.4.4
pep517==0.8.2
pexpect==4.8.0
pgcli==3.0.0
pgspecial==1.11.10
pickleshare==0.7.5
Pillow==6.2.1
pipenv==2018.11.27.dev0
playsound==1.2.2
ply==3.11
pocketsphinx==0.1.15
progress==1.5
prometheus-client==0.7.1
prompt-toolkit==3.0.5
psutil==5.6.7
psycopg2==2.8.5
ptyprocess==0.6.0
pyasn1==0.4.8
PyAudio==0.2.11
pycairo==1.19.1
pycparser==2.20
pycryptodome==3.9.7
Pygments==2.6.1
PyGObject==3.36.1
PyNaCl==1.3.0
pynvim==0.4.0
pyparsing==2.4.7
pyrsistent==0.16.0
pysmi==0.3.4
pysnmp==4.4.12
python-dateutil==2.8.1
python-forecastio==1.4.0
python-xlib==0.26
pytoml==0.1.21
pyttsx3==2.71
pytz==2020.1
pywatchman==1.4.0
PyYAML==5.3.1
pyzmq==19.0.0
requests==2.23.0
responses==0.10.9
retrying==1.3.3
routersploit==3.4.0
SecretStorage==3.1.2
Send2Trash==1.5.0
setproctitle==1.1.10
six==1.14.0
snowballstemmer==2.0.0
sounddevice==0.3.14
soupsieve==2.0.1
SpeechRecognition==3.8.1
Sphinx==3.0.3
sphinxcontrib-applehelp==1.0.2
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==1.0.3
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==1.0.3
sphinxcontrib-serializinghtml==1.1.4
sqlparse==0.3.1
tabulate==0.8.7
td-cli==1.2.6
terminado==0.8.3
terminaltables==3.1.0
testpath==0.4.4
texttable==1.6.2
toml==0.10.0
tornado==6.0.4
traitlets==4.3.3
urllib3==1.25.9
virtualenv==20.0.18
virtualenv-clone==0.5.4
wcwidth==0.1.9
webencodings==0.5.1
websocket-client==0.57.0
widgetsnbextension==3.5.1
zipp==3.1.0
```",Can not get or set password in keyring during connecting. ,2020-05-27 10:15:19,
14,1187,"## Description
<!--- Describe your changes in detail. -->

* Corrected a couple of minor typos in `pgclirc`
* Added name to AUTHORS and noted change in `changelog.rst`

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Minor typo fixes in pgclirc
Thanks a lot ❤️
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1187?src=pr&el=h1) Report
> Merging [#1187](https://codecov.io/gh/dbcli/pgcli/pull/1187?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bd705bd5c472c15bd0de9f3bfb668abfd4db8202&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1187/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1187?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1187   +/-   ##
=======================================
  Coverage   87.04%   87.04%           
=======================================
  Files          19       19           
  Lines        1806     1806           
=======================================
  Hits         1572     1572           
  Misses        234      234           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1187?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1187?src=pr&el=footer). Last update [bd705bd...635eaaa](https://codecov.io/gh/dbcli/pgcli/pull/1187?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:clinking_glasses: ",2020-05-26 13:14:30,2020-05-26 18:28:49
15,1186,"## Description

New feature!

Support settings for `null`.

close #1185 

(This PR is blocking by the release of https://github.com/dbcli/cli_helpers/pull/61 )

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Support style for missing value.
Preview:

<img width=""448"" alt=""image"" src=""https://user-images.githubusercontent.com/9675939/82758160-7efa7100-9e17-11ea-9691-b5e0b0375b18.png"">

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=h1) Report
> Merging [#1186](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bd705bd5c472c15bd0de9f3bfb668abfd4db8202&el=desc) will **not change** coverage.
> The diff coverage is `0.00%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1186/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1186   +/-   ##
=======================================
  Coverage   87.04%   87.04%           
=======================================
  Files          19       19           
  Lines        1806     1806           
=======================================
  Hits         1572     1572           
  Misses        234      234           
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgstyle.py](https://codecov.io/gh/dbcli/pgcli/pull/1186/diff?src=pr&el=tree#diff-cGdjbGkvcGdzdHlsZS5weQ==) | `64.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=footer). Last update [bd705bd...00c4641](https://codecov.io/gh/dbcli/pgcli/pull/1186?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good. We should release cli_helpers first, so we can bump cli_helpers requirement for this PR.
@laixintao Released cli_helpers: https://github.com/dbcli/cli_helpers/releases/tag/v2.0.0",2020-05-24 15:36:54,2020-05-28 22:29:51
16,1185,"## Description
It would be really nice if I could configure the `null_string` to be in a different style to stand out more, but doing `\x1b[1m` to get bold text like the prompt config just puts the escape sequence directly into the column as plain text instead of properly handling it as an ANSI escape sequence.  I would really like to have the `<null>` be dim or gray, because it's really hard to notice when it's the same color.

Alternatively, maybe add something to the `[colors]` section to define the style of the null string, such as an `output.null-string` property.

## Your environment
OS: macOS 10.14.6
pgcli version: 3.0.0
`pip freeze`: not relevant; this is a feature request","Feature Request: allow ANSI sequences in the null_string setting
This feature is really nice to have, what do you think? @j-bennet 
@laixintao Yes! Do you feel like taking it up? :)
I will give it a try :)",2020-05-20 20:26:01,2020-05-28 22:29:51
17,1184,"How can I fix this message, please?

```
pgcli -h localhost -U juliano -d postgres
postgres> Exception in thread completion_refresh:
Traceback (most recent call last):
File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
self.run()
File ""/usr/lib/python3.8/threading.py"", line 870, in runs-mode Refreshing completions...
self._target(self._args, *self._kwargs)
File ""/usr/share/pgcli/pgcli/completion_refresher.py"", line 65, in _bg_refresh
refresher(completer, executor)
File ""/usr/share/pgcli/pgcli/completion_refresher.py"", line 110, in refresh_tables
completer.extend_foreignkeys(executor.foreignkeys())
File ""/usr/share/pgcli/pgcli/pgcompleter.py"", line 278, in extend_foreignkeys
childcolmeta = meta[childschema][childtable][childcol]
KeyError: 'my_partitioned_table'
```

```
pgcli -v
Version: 2.2.0
```
```
cat /etc/os-release
NAME=""Ubuntu""
VERSION=""20.04 LTS (Focal Fossa)""
```
```
SELECT VERSION();
PostgreSQL 11.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36), 64-bit
```
```
python3 --version
Python 3.8.2
```","Exception in thread completion_refresh
I haven't worked on the completer, but that looks as though the data dictionary somehow changed while your pgcli instance was still starting up.  (Or maybe some kind of race condition bug?)

Is it a persistent problem?  Does it happen every time, or just sometimes?  Does it persist after you restart pgcli, restart postgresql, or restart the server?",2020-05-19 10:29:48,
18,1183,"Description
---
Halfway through typing out an INSERT statement I hit the TAB key and I get an error:
```
Traceback (most recent call last):
  File ""/usr/lib/python3.7/threading.py"", line 926, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.7/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/lib/python3/dist-packages/prompt_toolkit/interface.py"", line 865, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""/usr/share/pgcli/pgcli/pgcompleter.py"", line 442, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 159, in suggest_type
    return suggest_based_on_last_token(stmt.last_token, stmt)
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 388, in suggest_based_on_last_token
    Column(table_refs=stmt.get_tables('insert'), context='insert'),
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 108, in get_tables
    self.full_text if scope == 'full' else self.text_before_cursor)
  File ""/usr/share/pgcli/pgcli/packages/parseutils/tables.py"", line 147, in extract_tables
    return tuple(i for i in identifiers if i.name)
  File ""/usr/share/pgcli/pgcli/packages/parseutils/tables.py"", line 147, in <genexpr>
    return tuple(i for i in identifiers if i.name)
  File ""/usr/share/pgcli/pgcli/packages/parseutils/tables.py"", line 96, in extract_table_identifiers
    for item in token_stream:
RuntimeError: generator raised StopIteration
```
The exact location I hit the TAB is:

`INSERT INTO <schema.table> VALUES(`
................................................................^

Environment
---
```
> lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 19.10
Release:	19.10
Codename:	eoan

> pgcli --version
Version: 1.9.1

> pip freeze
<blank>
```","RuntimeError when hitting tab for autocomplete Python 3.7.0
As of pgcli 3.0.0, I'm not able to duplicate.  Can you update your pgcli and see if you still have the problem?

Can you test it against multiple tables and multiple databases to see if it's present consistently?
I cannot reproduce this on 3.0.0.
However on 1.9.1, I could reproduce it for multiple tables on the same DB.

I don't want to pursue this anymore since I can work with an upgraded pgcli.",2020-05-13 08:31:55,2020-08-03 02:36:20
19,1182,"## Description
It has been brought to my attention that without this line pip may try to install packages on environments with python 2. At the moment it does not happen because prompt_toolkit has this constraint, but it's still better to have it explicit. 



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","add python_requires constraint to setup.py
@pasenor Any reason why we can't leave it to prompt_toolkit?
pip2 should install the latest py2-compatible version, but now it downloads 3.0.0 and complains: 
```
Collecting pgcli
  Using cached pgcli-3.0.0.tar.gz (118 kB)
Collecting pgspecial>=1.11.8
  Using cached pgspecial-1.11.10.tar.gz (64 kB)
Requirement already satisfied: click>=4.1 in ./venv/lib/python2.7/site-packages (from pgcli) (7.1.2)
Requirement already satisfied: Pygments>=2.0 in ./venv/lib/python2.7/site-packages (from pgcli) (2.5.2)
ERROR: Could not find a version that satisfies the requirement prompt_toolkit<4.0.0,>=3.0.0 (from pgcli) (from versions: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 0.9, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.25, 0.26, 0.28, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.6, 1.0.7, 1.0.8, 1.0.9, 1.0.10, 1.0.13, 1.0.14, 1.0.15, 1.0.16, 1.0.17, 1.0.18, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.0.10)
ERROR: No matching distribution found for prompt_toolkit<4.0.0,>=3.0.0 (from pgcli)
```
As a user, I would find it rather cryptic.

I'm not sure whether this fix makes pip2 download the correct version, but at least the error message is clearer:
```
pip install -e .
DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
Obtaining file:///home/fro/prj/dbcli/sqlcomplete
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
    Preparing wheel metadata ... done
ERROR: Package u'pgcli' requires a different Python: 2.7.17 not in '>=3.6'
WARNING: You are using pip version 20.0.2; however, version 20.1 is available.
You should consider upgrading via the '/tmp/venv/bin/python -m pip install --upgrade pip' command.
```
You're right, the second message looks much more helpful - it's a good enough reason for me.
Also, the more people we force to upgrade to python 3, the better... 😈 ",2020-05-12 18:15:38,2020-05-12 23:23:35
20,1181,"## Description
<!--- Describe your changes in detail. -->
Running `docker build -t .` command fails with an error:

```bash
Sending build context to Docker daemon  30.38MB
Step 1/4 : FROM python:2.7
 ---> 68e7be49c28c
Step 2/4 : COPY . /app
 ---> 519757388c77
Step 3/4 : RUN cd /app && pip install -e .
 ---> Running in 5f82116c8653
DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
Obtaining file:///app
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
    Preparing wheel metadata: started
    Preparing wheel metadata: finished with status 'done'
ERROR: Could not find a version that satisfies the requirement prompt-toolkit<4.0.0,>=3.0.0 (from pgcli==3.0.0) (from versions: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 0.9, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.25, 0.26, 0.28, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.60, 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.6, 1.0.7, 1.0.8, 1.0.9, 1.0.10, 1.0.13, 1.0.14, 1.0.15, 1.0.16, 1.0.17, 1.0.18, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8, 2.0.9, 2.0.10)
ERROR: No matching distribution found for prompt-toolkit<4.0.0,>=3.0.0 (from pgcli==3.0.0)
WARNING: You are using pip version 20.0.2; however, version 20.1 is available.
You should consider upgrading via the '/usr/local/bin/python -m pip install --upgrade pip' command.
The command '/bin/sh -c cd /app && pip install -e .' returned a non-zero code: 1
```

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Update python version from 2.7 to 3.8 in Dockerfile
👍 thank you!",2020-05-11 13:14:29,2020-05-11 16:51:23
21,1180,"## Description
I've installed extension _PostGIS_, but cannot autocomplete its functions. Is this possible at all?

## Your environment
### pgcli --version
`Version: 3.0.0` - build bcb0c8bce776a5eba9f5425c57c2ec8385f10e94

### system
```Debian Buster with latest updates, Kernel 5.4.0-0.bpo.4-amd64```

### dpkg --list | grep postgresql
```
ii  pgdg-keyring                           2018.2                                           all          keyring for apt.postgresql.org
ii  postgresql-12                          12.2-2.pgdg100+1                                 amd64        object-relational SQL database, version 12 server
ii  postgresql-12-pgmp                     1.0.4-2.pgdg100+1                                amd64        arbitrary precision integers and rationals for PostgreSQL 12
ii  postgresql-12-postgis-3                3.1.0~alpha1+dfsg-1~exp3                         amd64        Geographic objects support for PostgreSQL 12
ii  postgresql-12-postgis-3-dbgsym         3.1.0~alpha1+dfsg-1~exp3                         amd64        debug symbols for postgresql-12-postgis-3
ii  postgresql-12-postgis-3-scripts        3.1.0~alpha1+dfsg-1~exp3                         all          Geographic objects support for PostgreSQL 12 -- SQL scripts
ii  postgresql-12-rational                 0.0.2-1.pgdg100+1                                amd64        Precise fractional arithmetic for PostgreSQL
ii  postgresql-client-12                   12.2-2.pgdg100+1                                 amd64        front-end programs for PostgreSQL 12
ii  postgresql-client-common               215~382.gitb94362a.pgdg100+1                     all          manager for multiple PostgreSQL client versions
ii  postgresql-common                      215~382.gitb94362a.pgdg100+1                     all          PostgreSQL database-cluster manager
```

### pip3 freeze
``` pthon
asn1crypto==0.24.0
atomicwrites==1.1.5
attrs==18.2.0
bottle==0.12.18
certifi==2020.4.5.1
chardet==3.0.4
cli-helpers==1.2.1
click==7.1.1
colorama==0.4.3
conan==1.24.0
configobj==5.0.6
cryptography==2.6.1
deprecation==2.0.7
devscripts===2.20.2-bpo10-1
distro==1.1.0
entrypoints==0.3
fail2ban==0.10.2
fasteners==0.15
future==0.18.2
gpg==1.12.0
humanfriendly==4.18
humanize==2.3.0
idna==2.9
iotop==0.6
Jinja2==2.11.1
keyring==17.1.1
keyrings.alt==3.1.1
MarkupSafe==1.1.1
meson==0.52.1
monotonic==1.5
more-itertools==4.2.0
node-semver==0.6.1
numpy==1.16.2
opencv-python==4.1.2.30
packaging==20.3
patch-ng==1.17.4
pgspecial==1.11.9
pluggy==0.8.0
pluginbase==0.7
prompt-toolkit==3.0.5
psycopg2==2.8.5
py==1.7.0
pycrypto==2.6.1
Pygments==2.6.1
PyGObject==3.30.4
pyinotify==0.9.6
PyJWT==1.7.1
pyparsing==2.4.7
pytest==3.10.1
python-apt==1.8.4.1
python-dateutil==2.8.1
python-debian==0.1.35
python-magic==0.4.16
pyxdg==0.25
PyYAML==5.3.1
requests==2.23.0
SecretStorage==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.3.1
systemd-python==234
tabulate==0.8.7
terminaltables==3.1.0
tqdm==4.45.0
unidiff==0.5.4
urllib3==1.25.8
visidata===2.-3
wcwidth==0.1.9
```

### cat ~/.config/pgcli/config (unchanged)
<details><summary>extend me</summary>

``` python
# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = False

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = False

# If multi_line_mode is set to ""psql"", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to ""safe"", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = psql

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as ""drop table"", ""drop database""
# or ""shutdown"".
destructive_warning = True

# Enables expand mode, which is similar to `\x` in psql.
expand = False

# Enables auto expand mode, which is similar to `\x auto` in psql.
auto_expand = False

# If set to True, table suggestions will include a table alias
generate_aliases = False

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = default

# keyword casing preference. Possible values ""lower"", ""upper"", ""auto""
keyword_casing = auto

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = False

# Casing of column headers based on the casing_file described above
case_column_headers = True

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = default

# Default log level. Possible values: ""CRITICAL"", ""ERROR"", ""WARNING"", ""INFO""
# and ""DEBUG"". ""NONE"" disables logging.
log_level = INFO

# Order of columns when expanding * to column list
# Possible values: ""table_order"" and ""alphabetic""
asterisk_column_order = table_order

# Whether to qualify with table alias/name when suggesting columns
# Possible values: ""always"", never"" and ""if_more_than_one_table""
qualify_columns = if_more_than_one_table

# When no schema is entered, only suggest objects in search_path
search_path_filter = False

# Default pager.
# By default 'PAGER' environment variable is used
# pager = less -SRXF

# Timing of sql statments and table rendering.
timing = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: psql, fancy_grid and grid.
table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = default

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = False

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values ""STOP"" or ""RESUME""
on_error = STOP

# Set threshold for row limit. Use 0 to disable limiting.
row_limit = 1000

# Skip intro on startup and goodbye on exit
less_chatty = False

# Postgres prompt
# \t - Current date and time
# \u - Username
# \h - Short hostname of the server (up to first '.')
# \H - Hostname of the server
# \d - Database name
# \p - Database port
# \i - Postgres PID
# \# - ""@"" sign if logged in as superuser, '>' in other case
# \n - Newline
# \dsn_alias - name of dsn alias if -D option is used (empty otherwise)
# \x1b[...m - insert ANSI escape sequence
# eg: prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
prompt = '\u@\h:\d> '

# Number of lines to reserve for the suggestion menu
min_num_menu_lines = 4

# Character used to left pad multi-line queries to match the prompt size.
multiline_continuation_char = ''

# The string used in place of a null value.
null_string = '<null>'

# manage pager on startup
enable_pager = True

# Use keyring to automatically save and load password in a secure manner
keyring = True

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = 'bg:#ffffff #000000'
completion-menu.completion = 'bg:#008888 #ffffff'
completion-menu.meta.completion.current = 'bg:#44aaaa #000000'
completion-menu.meta.completion = 'bg:#448888 #ffffff'
completion-menu.multi-column-meta = 'bg:#aaffff #000000'
scrollbar.arrow = 'bg:#003333'
scrollbar = 'bg:#00aaaa'
selected = '#ffffff bg:#6666aa'
search = '#ffffff bg:#4444aa'
search.current = '#ffffff bg:#44aa44'
bottom-toolbar = 'bg:#222222 #aaaaaa'
bottom-toolbar.off = 'bg:#222222 #888888'
bottom-toolbar.on = 'bg:#222222 #ffffff'
search-toolbar = 'noinherit bold'
search-toolbar.text = 'nobold'
system-toolbar = 'noinherit bold'
arg-toolbar = 'noinherit bold'
arg-toolbar.text = 'nobold'
bottom-toolbar.transaction.valid = 'bg:#222222 #00ff5f bold'
bottom-toolbar.transaction.failed = 'bg:#222222 #ff005f bold'

# style classes for colored table output
output.header = ""#00ff5f bold""
output.odd-row = """"
output.even-row = """"

# Named queries are queries you can execute by name.
[named queries]

# DSN to call by -D option
[alias_dsn]
# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]

# Format for number representation
# for decimal ""d"" - 12345678, "",d"" - 12,345,678
# for float ""g"" - 123456.78, "",g"" - 123,456.78
[data_formats]
decimal = """"
float = """"
```
</details>",[help] Autocomplete for extension's functions?,2020-05-09 00:44:16,
22,1179,Implementing a feature requested in https://github.com/dbcli/pgcli/issues/1087#issuecomment-610611560.,[WIP] autocomplete first suggestion on ENTER,2020-05-08 19:50:58,
23,1178,"Fix for this:

https://github.com/dbcli/pgcli/commit/bcb0c8bce776a5eba9f5425c57c2ec8385f10e94#r38893627",Fix bug introduced in #1102.,2020-05-07 23:27:05,2020-05-07 23:41:24
24,1177,"## Description
When executing any query, I'm getting
``` python
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python3.7/dist-packages/click/core.py"", line 829, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python3.7/dist-packages/click/core.py"", line 782, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python3.7/dist-packages/click/core.py"", line 1066, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python3.7/dist-packages/click/core.py"", line 610, in invoke
    return callback(*args, **kwargs)
  File ""/tmp/src/pgcli/pgcli/main.py"", line 1327, in cli
    pgcli.run_cli()
  File ""/tmp/src/pgcli/pgcli/main.py"", line 765, in run_cli
    query = self.execute_command(text)
  File ""/tmp/src/pgcli/pgcli/main.py"", line 684, in execute_command
    self.echo_via_pager(""\n"".join(output))
  File ""/tmp/src/pgcli/pgcli/main.py"", line 1078, in echo_via_pager
    elif ""pspg"" in os.environ[""PAGER""] and self.table_format == ""csv"":
  File ""/usr/lib/python3.7/os.py"", line 678, in __getitem__
    raise KeyError(key) from None
KeyError: 'PAGER'
```

## Your environment
### pgcli --version
`Version: 3.0.0` - build bcb0c8bce776a5eba9f5425c57c2ec8385f10e94

### system
```Debian Buster with latest updates, Kernel 5.4.0-0.bpo.4-amd64```

### dpkg --list | grep postgresql
```
ii  pgdg-keyring                           2018.2                                           all          keyring for apt.postgresql.org
ii  postgresql-12                          12.2-2.pgdg100+1                                 amd64        object-relational SQL database, version 12 server
ii  postgresql-12-pgmp                     1.0.4-2.pgdg100+1                                amd64        arbitrary precision integers and rationals for PostgreSQL 12
ii  postgresql-12-postgis-3                3.1.0~alpha1+dfsg-1~exp3                         amd64        Geographic objects support for PostgreSQL 12
ii  postgresql-12-postgis-3-dbgsym         3.1.0~alpha1+dfsg-1~exp3                         amd64        debug symbols for postgresql-12-postgis-3
ii  postgresql-12-postgis-3-scripts        3.1.0~alpha1+dfsg-1~exp3                         all          Geographic objects support for PostgreSQL 12 -- SQL scripts
ii  postgresql-12-rational                 0.0.2-1.pgdg100+1                                amd64        Precise fractional arithmetic for PostgreSQL
ii  postgresql-client-12                   12.2-2.pgdg100+1                                 amd64        front-end programs for PostgreSQL 12
ii  postgresql-client-common               215~382.gitb94362a.pgdg100+1                     all          manager for multiple PostgreSQL client versions
ii  postgresql-common                      215~382.gitb94362a.pgdg100+1                     all          PostgreSQL database-cluster manager
```

### pip3 freeze
``` pthon
asn1crypto==0.24.0
atomicwrites==1.1.5
attrs==18.2.0
bottle==0.12.18
certifi==2020.4.5.1
chardet==3.0.4
cli-helpers==1.2.1
click==7.1.1
colorama==0.4.3
conan==1.24.0
configobj==5.0.6
cryptography==2.6.1
deprecation==2.0.7
devscripts===2.20.2-bpo10-1
distro==1.1.0
entrypoints==0.3
fail2ban==0.10.2
fasteners==0.15
future==0.18.2
gpg==1.12.0
humanfriendly==4.18
humanize==2.3.0
idna==2.9
iotop==0.6
Jinja2==2.11.1
keyring==17.1.1
keyrings.alt==3.1.1
MarkupSafe==1.1.1
meson==0.52.1
monotonic==1.5
more-itertools==4.2.0
node-semver==0.6.1
numpy==1.16.2
opencv-python==4.1.2.30
packaging==20.3
patch-ng==1.17.4
pgspecial==1.11.9
pluggy==0.8.0
pluginbase==0.7
prompt-toolkit==3.0.5
psycopg2==2.8.5
py==1.7.0
pycrypto==2.6.1
Pygments==2.6.1
PyGObject==3.30.4
pyinotify==0.9.6
PyJWT==1.7.1
pyparsing==2.4.7
pytest==3.10.1
python-apt==1.8.4.1
python-dateutil==2.8.1
python-debian==0.1.35
python-magic==0.4.16
pyxdg==0.25
PyYAML==5.3.1
requests==2.23.0
SecretStorage==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.3.1
systemd-python==234
tabulate==0.8.7
terminaltables==3.1.0
tqdm==4.45.0
unidiff==0.5.4
urllib3==1.25.8
visidata===2.-3
wcwidth==0.1.9
```

### cat ~/.config/pgcli/config (unchanged)
<details><summary>extend me</summary>

``` python
# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = False

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = False

# If multi_line_mode is set to ""psql"", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to ""safe"", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = psql

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as ""drop table"", ""drop database""
# or ""shutdown"".
destructive_warning = True

# Enables expand mode, which is similar to `\x` in psql.
expand = False

# Enables auto expand mode, which is similar to `\x auto` in psql.
auto_expand = False

# If set to True, table suggestions will include a table alias
generate_aliases = False

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = default

# keyword casing preference. Possible values ""lower"", ""upper"", ""auto""
keyword_casing = auto

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = False

# Casing of column headers based on the casing_file described above
case_column_headers = True

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = default

# Default log level. Possible values: ""CRITICAL"", ""ERROR"", ""WARNING"", ""INFO""
# and ""DEBUG"". ""NONE"" disables logging.
log_level = INFO

# Order of columns when expanding * to column list
# Possible values: ""table_order"" and ""alphabetic""
asterisk_column_order = table_order

# Whether to qualify with table alias/name when suggesting columns
# Possible values: ""always"", never"" and ""if_more_than_one_table""
qualify_columns = if_more_than_one_table

# When no schema is entered, only suggest objects in search_path
search_path_filter = False

# Default pager.
# By default 'PAGER' environment variable is used
# pager = less -SRXF

# Timing of sql statments and table rendering.
timing = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: psql, fancy_grid and grid.
table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = default

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = False

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values ""STOP"" or ""RESUME""
on_error = STOP

# Set threshold for row limit. Use 0 to disable limiting.
row_limit = 1000

# Skip intro on startup and goodbye on exit
less_chatty = False

# Postgres prompt
# \t - Current date and time
# \u - Username
# \h - Short hostname of the server (up to first '.')
# \H - Hostname of the server
# \d - Database name
# \p - Database port
# \i - Postgres PID
# \# - ""@"" sign if logged in as superuser, '>' in other case
# \n - Newline
# \dsn_alias - name of dsn alias if -D option is used (empty otherwise)
# \x1b[...m - insert ANSI escape sequence
# eg: prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
prompt = '\u@\h:\d> '

# Number of lines to reserve for the suggestion menu
min_num_menu_lines = 4

# Character used to left pad multi-line queries to match the prompt size.
multiline_continuation_char = ''

# The string used in place of a null value.
null_string = '<null>'

# manage pager on startup
enable_pager = True

# Use keyring to automatically save and load password in a secure manner
keyring = True

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = 'bg:#ffffff #000000'
completion-menu.completion = 'bg:#008888 #ffffff'
completion-menu.meta.completion.current = 'bg:#44aaaa #000000'
completion-menu.meta.completion = 'bg:#448888 #ffffff'
completion-menu.multi-column-meta = 'bg:#aaffff #000000'
scrollbar.arrow = 'bg:#003333'
scrollbar = 'bg:#00aaaa'
selected = '#ffffff bg:#6666aa'
search = '#ffffff bg:#4444aa'
search.current = '#ffffff bg:#44aa44'
bottom-toolbar = 'bg:#222222 #aaaaaa'
bottom-toolbar.off = 'bg:#222222 #888888'
bottom-toolbar.on = 'bg:#222222 #ffffff'
search-toolbar = 'noinherit bold'
search-toolbar.text = 'nobold'
system-toolbar = 'noinherit bold'
arg-toolbar = 'noinherit bold'
arg-toolbar.text = 'nobold'
bottom-toolbar.transaction.valid = 'bg:#222222 #00ff5f bold'
bottom-toolbar.transaction.failed = 'bg:#222222 #ff005f bold'

# style classes for colored table output
output.header = ""#00ff5f bold""
output.odd-row = """"
output.even-row = """"

# Named queries are queries you can execute by name.
[named queries]

# DSN to call by -D option
[alias_dsn]
# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]

# Format for number representation
# for decimal ""d"" - 12345678, "",d"" - 12,345,678
# for float ""g"" - 123456.78, "",g"" - 123,456.78
[data_formats]
decimal = """"
float = """"
```
</details>","[HAS FIX] KeyError: 'PAGER' on v3.0.0
# Fix
## Comment
https://github.com/dbcli/pgcli/commit/bcb0c8bce776a5eba9f5425c57c2ec8385f10e94#r38893627
### Diff
``` diff
diff --git a/pgcli/main.py b/pgcli/main.py
index cc3d58c4..daa1660a 100644
--- a/pgcli/main.py
+++ b/pgcli/main.py
@@ -1075,7 +1075,7 @@ class PGCli(object):
     def echo_via_pager(self, text, color=None):
         if self.pgspecial.pager_config == PAGER_OFF or self.watch_command:
             click.echo(text, color=color)
-        elif ""pspg"" in os.environ[""PAGER""] and self.table_format == ""csv"":
+        elif ""PAGER"" in os.environ and ""pspg"" in os.environ[""PAGER""] and self.table_format == ""csv"":
             click.echo_via_pager(text, color)
         elif self.pgspecial.pager_config == PAGER_LONG_OUTPUT:
             lines = text.split(""\n"")
```
Closed via https://github.com/dbcli/pgcli/pull/1178.",2020-05-02 05:50:50,2020-05-07 23:42:22
25,1176,"## Description
Named queries have stopped recognizing arguments passed to numeric positional parameters since upgrading to version 2.2.0:

```
postgres> \ns i SELECT $1                                                       
Saved.
Time: 0.003s
postgres> \n i 42                                                               
there is no parameter $1
LINE 1: SELECT $1
               ^
```

I got version 2.2.0 by upgrading Ubuntu to 20.04 LTS. I have named queries saved in my config which used to work, but I don't know which version of pgcli I had previously.

Using `%s` instead of `$1` (as suggested in #841) does work:

```
postgres> \ns i SELECT %s                                                       
Saved.
Time: 0.006s
postgres> \n i 42                                                               
> SELECT %s
+----------+
| ?column? |
+----------+
| 42       |
+----------+
SELECT 1
```

But that [isn't documented](https://www.pgcli.com/named_queries.md), and isn't as flexible.

## Your environment
<!-- This gives us some more context to work with. -->

- [X] Please provide your OS and version information. **Ubuntu 20.04 LTS (Focal Fossa)**
- [X] Please provide your CLI version. **2.2.0**
- [X] What is the output of ``pip freeze`` command. **Command 'pip' not found, but there are 18 similar ones.**
","“there is no parameter $1” with named query
@Smylers instead of `pip freeze` command, try this:

```
python --version
```

and this:

```
python -m pip freeze
```
and post the output.

Thank you!
I'm not sure, but I think that the version of `pgspecial` module packaged with your Ubuntu distribution may be old. See if updating `pgspecial` fixes your problem:

`python -m pip install -U pgspecial`
> I'm not sure, but I think that the version of `pgspecial` module packaged with your Ubuntu distribution may be old.
Bingo! Thanks.

Ubuntu 20.04 was released last week, but the `python3-pgspecial` package is version 1.9.0-2.

What is the minimum version of `pgspecial` that `pgcli` relies on? I'll report it as a bug in Ubuntu that it needs to have that as a dependency.

> `python -m pip install -U pgspecial`

Yay! And I found the `pip` command: it's `pip3`, to go with `python3`. Apparently I still have some legacy software installed which requires that `python` be Python 2.
@Smylers the latest `pgspecial` is 1.11.10, and it would be good to have the latest. Changelog for `pgspecial` is here:

https://github.com/dbcli/pgspecial/blob/master/changelog.rst

Was your problem fixed by updating `pgspecial`?
> @Smylers the latest `pgspecial` is 1.11.10, and it would be good to have the latest.

Ta.

> Was your problem fixed by updating `pgspecial`?

Yes. Apologies if that wasn't clear in my previous response.

Thank you for being so speedy in addressing this.
",2020-05-01 04:48:59,2020-05-01 16:20:36
26,1175,"## Description
I tried to install pgcli on win7, but got the err:
error: Microsoft Visual C++ 14.0 is required.

## Your environment
Windows 7, Python 3.8.1
```
running build
running build_ext \n
building 'setproctitle' extension \n
error: Microsoft Visual C++ 14.0 is required. 
```
I think the problem is occued by the additional dependencies named ```setproctitle```.
In the source code ```setup.py``` :
```
# setproctitle is used to mask the password when running `ps` in command line.
# But this is not necessary in Windows since the password is never shown in the
# task manager. Also setproctitle is a hard dependency to install in Windows,
# so we'll only install it if we're not in Windows.
if platform.system() != ""Windows"" and not platform.system().startswith(""CYGWIN""):
    install_requirements.append(""setproctitle >= 1.1.9"")
```
The comments means that ```setproctitle``` is not necessary in Windows. And it's so hard 
to install ```setproctitle``` in windows.
The check is for skipping the windows, but virtually not work:
```
if platform.system() != ""Windows"" and not platform.system().startswith(""CYGWIN""):
```
## Solution
When you have the same problem, there are two ways which works:
1. you can install the dependencies individually,  like this:
```
pip install pgcli --no-deps
pip install pgspecial
pip install prompt_toolkit
...
```
2. you can modify the ```setup.py``` and install from source code.

",error: Microsoft Visual C++ 14.0 is required.,2020-05-01 02:45:23,
27,1174,"## Description
<!--- Describe your problem as fully as you can. -->
I want the author to merge this pgcli tool into the postgresql trunk
## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.
- [ ] Please provide your CLI version.
- [x] What is the output of ``pip freeze`` command.
","When will the pgcli tool be integrated into the postgresql trunk
Hi @xiaohuazi123 - that's an interesting question! Nobody from postgres contacted us to express interest in making pgcli part of their repo. If that happens, we'd certainly consider it.
> Hi @xiaohuazi123 - that's an interesting question! Nobody from postgres contacted us to express interest in making pgcli part of their repo. If that happens, we'd certainly consider it.


Thank you for your reply. I think we can contact them and ask if they are interest in  making pgcli part of their repo.
This tool is so good, it's 100 times better than the official PSQL client tool.

 
 
I'm happy that pgcli works for you (and a lot of other users). But it has its weak points, and in some areas it still wouldn't be able to replace the official client (you can find issues in our repo where we recommend people to use psql for their use cases that pgcli didn't handle well, such as non-interactive usage, or dumping data).

I'm going to close the issue, since it's not a bug.

Thank you for the suggestion!",2020-04-26 02:33:01,2020-04-26 21:31:06
28,1173,"addresses #1102

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Add support for using pspg as the pager.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1173?src=pr&el=h1) Report
> Merging [#1173](https://codecov.io/gh/dbcli/pgcli/pull/1173?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/3071de14f55f7ea1a3df2dd5f42800363e225d2a&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1173/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1173?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1173   +/-   ##
=======================================
  Coverage   87.04%   87.04%           
=======================================
  Files          19       19           
  Lines        1806     1806           
=======================================
  Hits         1572     1572           
  Misses        234      234           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1173?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1173?src=pr&el=footer). Last update [3071de1...3d48597](https://codecov.io/gh/dbcli/pgcli/pull/1173?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@pmav99 You could combine your two PRs, they are both related to the same issue!

Please add the changes to changelog, and they'll be good to merge. Thank you!
@j-bennet Is there a way to retrieve the `table_format` runtime setting? I am asking because here we get the configuration option, which might have changed in the meantime with `\T <supported_table_format>`:
https://github.com/dbcli/pgcli/pull/1173/commits/3d48597fa66a9ca4322c270cd6169ccca9f17c8e#diff-38f3aeda57742756afa677ca09dcea43R1076
@pmav99 When table format is set during runtime, it would be set in cli instance, `self.table_format`:

https://github.com/dbcli/pgcli/blob/3071de14f55f7ea1a3df2dd5f42800363e225d2a/pgcli/main.py#L326

So in `echo_via_pager`, it should be `self.table_format`, vs `self.config[""main""][""table_format""]`.
Perfect! thank you @j-bennet . I rebased.
Looks good. Merging - thank you! 🍓 ",2020-04-18 17:40:27,2020-04-23 17:17:41
29,1172,"Partially addresses #1102


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [ ] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Stop printing ""status"" when table_format is ""csv""
superseded by #1173",2020-04-18 17:18:04,2020-04-20 17:54:54
30,1171,"## Description
fix https://github.com/dbcli/pgcli/issues/1169



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","bugfix: don't echo a newline when output is empty.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=h1) Report
> Merging [#1171](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/005fd2fcee258ae192ed01d503303068558b0e89&el=desc) will **decrease** coverage by `0.16%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1171/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1171      +/-   ##
==========================================
- Coverage   87.20%   87.04%   -0.17%     
==========================================
  Files          19       19              
  Lines        1806     1806              
==========================================
- Hits         1575     1572       -3     
- Misses        231      234       +3     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1171/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.57% <0.00%> (-0.91%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=footer). Last update [005fd2f...94718ef](https://codecov.io/gh/dbcli/pgcli/pull/1171?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

before:
<img width=""550"" alt=""image"" src=""https://user-images.githubusercontent.com/9675939/79629723-63e47380-817e-11ea-9916-b5e1697f3af4.png"">


after:
<img width=""651"" alt=""image"" src=""https://user-images.githubusercontent.com/9675939/79629717-5cbd6580-817e-11ea-9cb5-8a43b6dc7bb2.png"">

@laixintao Good catch! Please add it to changelog as well.

P.S. Yes, I think we want this change. It makes the output more compact, which might help if someone wants to copy it from the screen, and it aligns the behavior with other cli tools.
Very nice! 

I'll update the changelog. Thanks, @laixintao! 

:wine_glass: 
> @laixintao Good catch! Please add it to changelog as well.
> 
> P.S. Yes, I think we want this change. It makes the output more compact, which might help if someone wants to copy it from the screen, and it aligns the behavior with other cli tools.

I think the same as well :)

@amjith Thanks for changelog :)",2020-04-18 06:06:53,2020-04-19 02:06:26
31,1170,"First open source commit! 🍻

## Description
This change introduces `show_bottom_toolbar` config option in pgclirc of True or False. Defaulting to True.

### If False the toolbar will be hidden.
<img width=""640"" alt=""Screenshot 2020-04-17 at 23 34 34"" src=""https://user-images.githubusercontent.com/40718272/79619189-175c5200-8104-11ea-8eb9-284d84b9200c.png"">

### If True the toolbar will be visible.
<img width=""630"" alt=""Screenshot 2020-04-17 at 23 35 05"" src=""https://user-images.githubusercontent.com/40718272/79619199-1cb99c80-8104-11ea-8fd4-2ddfccf9eb5b.png"">


This change was requested [here](https://github.com/dbcli/pgcli/issues/939#issuecomment-615469759).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","show_bottom_toolbar - Feature to Show/Hide Toolbar
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=h1) Report
> Merging [#1170](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/005fd2fcee258ae192ed01d503303068558b0e89&el=desc) will **decrease** coverage by `0.16%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1170/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1170      +/-   ##
==========================================
- Coverage   87.20%   87.04%   -0.17%     
==========================================
  Files          19       19              
  Lines        1806     1806              
==========================================
- Hits         1575     1572       -3     
- Misses        231      234       +3     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1170/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.57% <0.00%> (-0.91%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=footer). Last update [005fd2f...3425515](https://codecov.io/gh/dbcli/pgcli/pull/1170?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

> Congratulations on your first open-source PR. :) Well done. Please add your name and the change to changelog also:
> 
> https://github.com/dbcli/pgcli/blob/master/changelog.rst

Cheers! Made requested change to changelog.
Also If I want to remove the \n newline for my prompt locally, where is this located? I want to just disable newline that is inserted with normal prompt, personally (not for pr)
> Also If I want to remove the \n newline for my prompt locally, where is this located?

Not sure about that. @jonathanslenders can you advise?
@stephanoparaskeva Nice work - thank you! 🍓 
> > Also If I want to remove the \n newline for my prompt locally, where is this located?
> 
> Not sure about that. @jonathanslenders can you advise?

This will fix the empty newline issue. https://github.com/dbcli/pgcli/pull/1171

But I am not sure if we want this. @j-bennet ",2020-04-17 22:38:07,2020-04-18 05:58:14
32,1169,"How do I stop the newline for each prompt, in psql I can have all my commands one above the other
where as in pgcli they're seperated by newlines (even when timing=False)?

<img width=""324"" alt=""Screenshot 2020-04-17 at 18 38 46"" src=""https://user-images.githubusercontent.com/40718272/79597717-b0767300-80da-11ea-9077-94ceaa34969f.png"">

","Prevent Prompt Newline - Feature/Question
Fix if in PR #1171 ",2020-04-17 17:38:57,2020-04-18 10:36:25
33,1168,"Additionally:
- how do I remove the bar at the bottom of terminal that says '[F2] Smart Completion [F3] Multiline Off'?
This bar makes using pgcli quite choppy because it sometimes has a delayed render and so my prompt pops up and down during fast operations.
",How to turn OFF syntax highlighting?,2020-04-17 17:02:55,2020-04-17 21:28:00
34,1167,"## Description
Setting ""pager = less -SRXF"" results in error (on Windows). From a process monitor trace I can see that pgcli runs `C:\WINDOWS\system32\cmd.exe /c 'less -SRXF' 'R:\Temp\tmpv1iacsw3'`. The error is an operating system error saying `Command ""'less"" could not be found` (note the `'less`).

It looks to me like pgcli is trying to run the pager string without normalizing it first into its components (for instance with `shlex.split`).

## Your environment
<!-- This gives us some more context to work with. -->

- [x] Windows 10
- [x] pgcli 2.2.0
","setting ""pager = less -SRXF"" results in error
I don't use Windows so sorry I can't test.

But pgcli's pager is done by [`click.echo_via_pager`](https://click.palletsprojects.com/en/7.x/api/#click.echo_via_pager). So it might be click's issue.

However, I think a workaround solution might be setting your `$PAGER=less` and then set `$LESS=-SRXF`, an environment which less will read.

From `man less`:

```
ENVIRONMENT VARIABLES
       LESS   Options which are passed to less automatically.
```
@laixintao Yup, you are right: there's already a [ticket](https://github.com/pallets/click/issues/1514) for the issue. I'm going to close this one here.

Thanks.",2020-04-08 22:13:24,2020-04-13 17:34:02
35,1166,"## Description
Given the following call 
```sql
BEGIN;

 CREATE FUNCTION count_to_hundred() RETURNS VOID AS
 $_$
 BEGIN 
     FOR i IN 1..100
     LOOP
         RAISE NOTICE '%', i;
     END LOOP;

     RETURN;
 END;
 $_$
 LANGUAGE plpgsql;


 SELECT count_to_hundred();

 ROLLBACK;
```
You would expect `NOTICE: XXX` to be printed from 1 to 100, but it start from 51 and ends at 100. 

## Your environment
<!-- This gives us some more context to work with. -->
```bash
$ uname -srvom
Linux 3.16.0-9-amd64 #1 SMP Debian 3.16.68-2 (2019-06-17) x86_64 GNU/Linux

$ pgcli --version
Version: 2.2.0

$ pip3 freeze
cli-helpers==1.2.1
click==7.1.1
configobj==5.0.6
humanize==2.2.0
pgcli==2.2.0
pgspecial==1.11.9
prompt-toolkit==2.0.10
psycopg2==2.8.5
Pygments==2.6.1
setproctitle==1.1.10
six==1.14.0
sqlparse==0.3.1
tabulate==0.8.7
terminaltables==3.1.0
wcwidth==0.1.9
```
From my understanding it might come from psycopg2 limiting the number of notices:
https://www.psycopg.org/docs/connection.html#connection.notices

There is a workaround that if `connection.notices` is overriden, is it possible to have more than 50 in pgcli then?","Notices limited to the last 50 ones
Thank you for researching this to find the limitation. I hadn't run into this limitation myself.

I'm happy to accept a PR if you're willing to take a stab at it. 

Relevant code: 
https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py#L262

",2020-04-06 10:26:08,
36,1165,Changelog update. Major version bump because we're dropping old versions of Python.,"New release 3.0.0.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1165?src=pr&el=h1) Report
> Merging [#1165](https://codecov.io/gh/dbcli/pgcli/pull/1165?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d9ea18d3a0f93c7990bc5e7df76daf3e608ae3d9&el=desc) will **not change** coverage by `%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1165/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1165?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1165   +/-   ##
=======================================
  Coverage   87.04%   87.04%           
=======================================
  Files          19       19           
  Lines        1806     1806           
=======================================
  Hits         1572     1572           
  Misses        234      234           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1165?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1165?src=pr&el=footer). Last update [93c14f8...4fe6b86](https://codecov.io/gh/dbcli/pgcli/pull/1165?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2020-04-03 22:23:59,2020-04-10 22:14:57
37,1164,"Additionally, refer to environment variables which can be used to configure login options.","Add --help output to README
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1164?src=pr&el=h1) Report
> Merging [#1164](https://codecov.io/gh/dbcli/pgcli/pull/1164?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d444db412bf3d9e1f5920319c844fd484786226e&el=desc) will **not change** coverage by `%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1164/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1164?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1164   +/-   ##
=======================================
  Coverage   87.04%   87.04%           
=======================================
  Files          19       19           
  Lines        1806     1806           
=======================================
  Hits         1572     1572           
  Misses        234      234           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1164?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1164?src=pr&el=footer). Last update [2a28399...3f15c73](https://codecov.io/gh/dbcli/pgcli/pull/1164?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thanks, I think it's a good idea about showing `--help` in readme.md in case of others miss `alias_dsn` feature :)  cc @amjith @j-bennet ",2020-03-30 11:01:50,2020-03-30 12:50:07
38,1163,"## Description
Add an example of how to use the colored prompt.
","Add an example for how to use the colored prompt.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=h1) Report
> Merging [#1163](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d444db412bf3d9e1f5920319c844fd484786226e&el=desc) will **decrease** coverage by `0.14%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1163/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1163      +/-   ##
==========================================
- Coverage   87.04%   86.89%   -0.15%     
==========================================
  Files          19       19              
  Lines        1806     1786      -20     
==========================================
- Hits         1572     1552      -20     
  Misses        234      234              
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1163/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `43.39% <0.00%> (-9.73%)` | :arrow_down: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1163/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `65.00% <0.00%> (-1.67%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1163/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `87.01% <0.00%> (-1.09%)` | :arrow_down: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1163/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.42% <0.00%> (-0.06%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=footer). Last update [d444db4...edbb90e](https://codecov.io/gh/dbcli/pgcli/pull/1163?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2020-03-29 21:19:27,2020-03-30 01:32:01
39,1162,"ConfigObj fixes a lot of problems with INI, which isn't a real format, but AFAIK is a dead end in terms of adoption and indeed wider recognition as it's just one library with its own specification.

TOML resolves many of the same problems as ConfigObj and is seeing pretty widespread adoption (e.g. by the rust ecosystem, and indeed by modern python standards). Therefore it has better tooling available for it, is more recognisable, and is in wider use.

Changing config format is obviously a seriously breaking change. If there is interest in this transition, we could move to supporting both immediately, give a couple of minor versions' (Pending)DeprecationWarning, then actually deprecate it with a major version.","For future major releases, consider TOML over ConfigObj for pgclirc
The last time I checked the TOML library for python it didn't have a way to preserve the comments in the file when we update it. 

For instance, we write to the config file when someone saves a [named query](https://www.pgcli.com/named_queries.md). By using ConfigObj it allows us to preserve the comments in the file that a user might have added. With TOML if we read the config and write back the file it strips out the comments. I had filed an issue with the library author a while back, I don't think it has seen any movement though. 
Good point! The [tomlkit](https://github.com/sdispater/tomlkit) library, from the creator of [poetry](https://github.com/python-poetry/poetry), allows you to persist comments, as well as whitespace/ formatting. It's a little less transparent in its usage than the [toml](https://github.com/uiri/toml) library is, though.",2020-03-27 12:21:22,
40,1161,"[`pipx`](https://github.com/pipxproject/pipx/) is an excellent tool which converts PyPI into a package repository without the concern of clashing dependencies etc., by managing individual virtual environments for every application installed by `pipx` (and their dependencies). Console scripts are symlinked into the user's $PATH, just like `pip install --user`. This keeps the tool installed at the user level, rather than tied to any particular project's virtual environment, while keeping it out of the system/ user root python environment.",Recommend pipx for installation,2020-03-27 12:06:40,
41,1160,"Database connections are often project-specific, or machine-specific for containers, so it would be nice to be to set our own defaults, possibly with something like a `.env` file.

Using any part of the full connection string `postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]` would ignore all environment variables.

`PGCLI_USER`, `PGCLI_HOST`, `PGCLI_PORT`, and `PGCLI_DATABASE` would be the obvious names. In conjunction with #1159 , I see the search path for options being 

connection string -> command line options -> environment variables -> profile -> ancestor profile(s) -> current default","Feature request: use environment variables to set command line arguments
Sounds good, what do you think? @j-bennet 
My bad, this is already implemented (using the same environment variables as used by `psql`), just not documented anywhere.",2020-03-27 12:01:32,2020-03-30 11:22:13
42,1159,"Most people are connecting to only a small number of databases, with an even smaller number of users etc. It's a pain to write them out every time, though. This could be scripted, but pgcli could also handle it. The configurations could be added to the pgclirc, and potentially (singly) inherit from each other.

For example, rather than typing `pgcli -h some.host.com -p 5433 -U someuser -d otherdb` all the time, we could have in the config file

```configobj
[profile]
[[work]]
host = some.host.com
port = 5433
user = someuser
database = otherdb
```
and type `pgcli --profile work`.

Then we could also do (inside the above)

```configobj
[[[root]]]
user = postgres
```

`pgcli --profile work.root` would keep the config from `profile.work`, except where overwritten (i.e. the user).

Options given in the command line could also override the profile.

Doesn't have to be ""profile"" (something we could use a non-clashing abbreviation for would be great).

Using the full `postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]` string would be incompatible with using a profile.

EDIT: changed syntax to match ConfigObj. Anything directly in the `profile` section could be applied if `--profile` was given without an argument, or a user-wide default, or just act as a parent for ""realised"" profiles; whatever you think is best.","Feature request: option for preconfigured host/port/user/database ""profile""
Currently, there is a feature called `alias_dsn` which may suit your need. Both mycli and pglic are supported.

https://www.mycli.net/loginpath
Sorry, I missed that in the sample config file! However, the `-d` option in pgcli seems to be in use for database name, and I couldn't see how to access the aliases on the pgcli docs.

This certainly resolves most of the use cases for this, besides the readability and inheritance proposed here. These are pretty minor considerations though, so this can be closed if you think the use case is sufficiently covered.
`pgcli --help` tells that you can use `-D dsn_name` for that:

```
 pgcli --help
Usage: pgcli [OPTIONS] [DBNAME] [USERNAME]

Options:
...
  -D, --dsn TEXT          Use DSN configured into the [alias_dsn] section of
                          pgclirc file.
  --list-dsn              list of DSN configured into the [alias_dsn] section
                          of pgclirc file.
```

But it is a little bit obscure indeed, may be we can list this feature in readme. :)
Happy for this to be closed when the docs PRs are merged: https://github.com/dbcli/pgcli.com/pull/39 and #1164 .",2020-03-27 11:54:25,
43,1158,"## Description

This fixes the coverage issue from #1157 , it tunes out that the version of `coverage.py` we are using is broken on Python3.8, which produces some phantom lines. see https://github.com/nedbat/coveragepy/issues/714 (which is actually interesting).

So simply upgrade coverage.py solves the problen.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","upgrade coverage to 5.x
The line data from @pasenor 's script draws my attention( https://github.com/dbcli/pgcli/pull/1157#issuecomment-600769740 ), I don't the difference is normal, but the script is correct and I even checked the lines manually.

 I figured it out by running coverage locally, this is html report from Python3.6 `pgcli/main.py`:

<img width=""1438"" alt=""image"" src=""https://user-images.githubusercontent.com/9675939/76996769-10b7af00-698d-11ea-962e-1ffddfa47577.png"">

And this from Python3.8:

<img width=""998"" alt=""image"" src=""https://user-images.githubusercontent.com/9675939/76996788-190fea00-698d-11ea-8bfe-5de41e36f2bd.png"">

Then google lead me to https://github.com/nedbat/coveragepy/issues/714

@laixintao Good catch!",2020-03-18 18:54:17,2020-03-18 19:59:02
44,1157,"## Description
<!--- Describe your changes in detail. -->

test in python38.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","python3.8: add travis test and setup.py class.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=h1) Report
> Merging [#1157](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/61c81b05f50a073f62629bdcf8eb4317d7a2084c&el=desc) will **decrease** coverage by `21.73%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1157/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=tree)

```diff
@@             Coverage Diff             @@
##           master    #1157       +/-   ##
===========================================
- Coverage   83.98%   62.24%   -21.74%     
===========================================
  Files          21       21               
  Lines        2492     3388      +896     
===========================================
+ Hits         2093     2109       +16     
- Misses        399     1279      +880     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/tables.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy90YWJsZXMucHk=) | `63.43% <0.00%> (-34.27%)` | :arrow_down: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `64.73% <0.00%> (-32.92%)` | :arrow_down: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `71.08% <0.00%> (-25.87%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `50.98% <0.00%> (-25.61%)` | :arrow_down: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `68.62% <0.00%> (-24.71%)` | :arrow_down: |
| [pgcli/packages/parseutils/utils.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy91dGlscy5weQ==) | `73.21% <0.00%> (-24.41%)` | :arrow_down: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `41.17% <0.00%> (-23.83%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `67.27% <0.00%> (-19.75%)` | :arrow_down: |
| [pgcli/packages/prompt\_utils.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcHJvbXB0X3V0aWxzLnB5) | `55.00% <0.00%> (-9.71%)` | :arrow_down: |
| [pgcli/pgtoolbar.py](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree#diff-cGdjbGkvcGd0b29sYmFyLnB5) | `12.24% <0.00%> (-8.45%)` | :arrow_down: |
| ... and [3 more](https://codecov.io/gh/dbcli/pgcli/pull/1157/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=footer). Last update [61c81b0...309bf27](https://codecov.io/gh/dbcli/pgcli/pull/1157?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Why did @codecov-io think the coverage is decreased?
So I think the decrease is because we didn't test in Python3.8 before, the comparison isn't useful. I saw a decrease in https://github.com/dbcli/mycli/pull/837#pullrequestreview-376958583  too.

<img width=""1202"" alt=""image"" src=""https://user-images.githubusercontent.com/9675939/76975678-db4f9900-696d-11ea-9839-d9aed330fac6.png"">

@laixintao Aren't we all cutting edge now... :)
Apparently it does drop, both here and in mycli. I have calculated percentages for individual reports, it looks like this ([script is here](https://gist.github.com/pasenor/a257f374b5cd074ce73525cb75f030c3)):
```
mycli 3.6: 78.64%
mycli 3.7: 78.64%
mycli 3.8: 48.09%

pgcli 3.6: 83.99%
pgcli 3.7: 83.99%
pgcli 3.8: 56.70%
```
Don't yet know why.",2020-03-18 01:26:32,2020-03-18 16:11:11
45,1156,"since Python 2 is now deprecated, this compatibility magic is no longer needed ","removed py2-related stuff
I think we don't have much usage of `six`, but can remove that as well.
aha, and encoding declarations (by the way, there are too few of them, I wonder how it used to work).
All removed.
LGTM, merged!",2020-03-13 12:49:36,2020-03-14 02:53:44
46,1155,"## Description
<!--- Describe your changes in detail. -->
This implements https://github.com/dbcli/pgcli/issues/1083


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Add pg_service.conf handling
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=h1) Report
> Merging [#1155](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/91263c37b94a1a3b45be13d35ff1ea19c7b8e1b7?src=pr&el=desc) will **decrease** coverage by `0.56%`.
> The diff coverage is `69.69%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1155/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1155      +/-   ##
==========================================
- Coverage   84.27%   83.71%   -0.57%     
==========================================
  Files          22       22              
  Lines        2531     2560      +29     
==========================================
+ Hits         2133     2143      +10     
- Misses        398      417      +19
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1155/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.18% <69.69%> (-0.72%)` | :arrow_down: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/1155/diff?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `83.33% <0%> (-16.67%)` | :arrow_down: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1155/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.38% <0%> (-1.21%)` | :arrow_down: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1155/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.35% <0%> (-0.34%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=footer). Last update [91263c3...d826fcc](https://codecov.io/gh/dbcli/pgcli/pull/1155?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@gantsevdenis Can you take a look at those conflicts in `main.py`?
@j-bennet done!
👍 FInally had the chance to try this - works as expected. Thanks!
Can I close #1083 now?",2020-03-11 16:02:26,2020-04-17 21:52:20
47,1154,"## Description

So we can work on #114 



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Drop Python3.5.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=h1) Report
> Merging [#1154](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/fd775497547bb51e3d3b38590cbc83e54afd9508?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1154/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1154   +/-   ##
=======================================
  Coverage   84.07%   84.07%           
=======================================
  Files          22       22           
  Lines        2530     2530           
=======================================
  Hits         2127     2127           
  Misses        403      403
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1154/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.28% <ø> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=footer). Last update [fd77549...57c4623](https://codecov.io/gh/dbcli/pgcli/pull/1154?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Good news, we can using f-string in pgcli's codebase now! 😀
Nice work @laixintao ! Thank you! 🍒 ",2020-03-10 04:51:24,2020-03-11 20:58:14
48,1153,"So we can use latest version of prompt-toolit.
Relate: https://github.com/dbcli/pgcli/pull/1149



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Deprecate Python2.7.
Updated, sorry I forgot
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=h1) Report
> Merging [#1153](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/91263c37b94a1a3b45be13d35ff1ea19c7b8e1b7?src=pr&el=desc) will **decrease** coverage by `0.2%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1153/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1153      +/-   ##
==========================================
- Coverage   84.27%   84.07%   -0.21%     
==========================================
  Files          22       22              
  Lines        2531     2530       -1     
==========================================
- Hits         2133     2127       -6     
- Misses        398      403       +5
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1153/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.72% <ø> (-0.18%)` | :arrow_down: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/1153/diff?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `83.33% <0%> (-16.67%)` | :arrow_down: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1153/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.35% <0%> (-0.34%)` | :arrow_down: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1153/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.28% <0%> (-0.31%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=footer). Last update [91263c3...ba39bcb](https://codecov.io/gh/dbcli/pgcli/pull/1153?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Merged! Thanks a lot! 🍫 
@j-bennet I am going to open a PR to drop 3.5 as well, and working on #1149 ",2020-03-09 07:20:05,2020-03-10 03:14:52
49,1152,"## Description
<!--- Describe your changes in detail. -->
Closing connection explicitly in completion_refresher thread easily fixes https://github.com/dbcli/pgcli/issues/1151

Before fix:
```
postgres=# select datid, datname, pid, application_name, client_addr, state from pg_stat_activity where datname != '';
 datid | datname  |  pid  |     application_name     | client_addr | state  
-------+----------+-------+--------------------------+-------------+--------
 12707 | postgres |  4092 | psql                     |             | active
 19780 | mydb1    | 17843 | pgcli-completion_refresh | ::1         | idle
 12707 | postgres | 17825 | pgcli-completion_refresh | ::1         | idle
 19780 | mydb1    | 17841 | pgcli-MainThread         | ::1         | idle
(4 rows)

...

postgres=# select datid, datname, pid, application_name, client_addr, state from pg_stat_activity where datname != '';
 datid | datname  |  pid  |     application_name     | client_addr | state  
-------+----------+-------+--------------------------+-------------+--------
 12707 | postgres |  4092 | psql                     |             | active
 19780 | mydb1    | 17843 | pgcli-completion_refresh | ::1         | idle
 12707 | postgres | 17825 | pgcli-completion_refresh | ::1         | idle
 12707 | postgres | 20221 | pgcli-completion_refresh | ::1         | idle
 12707 | postgres | 20219 | pgcli-MainThread         | ::1         | idle
(5 rows)

...

postgres=# select datid, datname, pid, application_name, client_addr, state from pg_stat_activity where datname != '';
 datid | datname  |  pid  |     application_name     | client_addr | state  
-------+----------+-------+--------------------------+-------------+--------
 12707 | postgres |  4092 | psql                     |             | active
 19780 | mydb1    | 17843 | pgcli-completion_refresh | ::1         | idle
 12707 | postgres | 17825 | pgcli-completion_refresh | ::1         | idle
 12707 | postgres | 20221 | pgcli-completion_refresh | ::1         | idle
 19780 | mydb1    | 20259 | pgcli-completion_refresh | ::1         | idle
 19780 | mydb1    | 20240 | pgcli-MainThread         | ::1         | idle
(6 rows)

```
After fix:
```
postgres=# select datid, datname, pid, application_name, client_addr, state, query from pg_stat_activity where datname != '';
 datid | datname  |  pid  | application_name | client_addr | state  |                                                       query                                                        
-------+----------+-------+------------------+-------------+--------+--------------------------------------------------------------------------------------------------------------------
 12707 | postgres |  4092 | psql             |             | active | select datid, datname, pid, application_name, client_addr, state, query from pg_stat_activity where datname != '';
 19791 | mydb2    | 22461 | pgcli-MainThread | ::1         | idle   | select t.oid FROM pg_type t WHERE t.typname = 'hstore' and t.typisdefined
(2 rows)

...

postgres=# select datid, datname, pid, application_name, client_addr, state, query from pg_stat_activity where datname != '';
 datid | datname  |  pid  | application_name | client_addr | state  |                                                       query                                                        
-------+----------+-------+------------------+-------------+--------+--------------------------------------------------------------------------------------------------------------------
 12707 | postgres |  4092 | psql             |             | active | select datid, datname, pid, application_name, client_addr, state, query from pg_stat_activity where datname != '';
 19780 | mydb1    | 22495 | pgcli-MainThread | ::1         | idle   | select t.oid FROM pg_type t WHERE t.typname = 'hstore' and t.typisdefined
(2 rows)

```
P.S. I ran `black`, but `pre-commit` is buggy and assumes python3.7, while I am inside virtualenv with python3.8..
## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Fix: Unable to drop previously connected-to database
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=h1) Report
> Merging [#1152](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/91263c37b94a1a3b45be13d35ff1ea19c7b8e1b7?src=pr&el=desc) will **decrease** coverage by `0.02%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1152/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1152      +/-   ##
==========================================
- Coverage   84.27%   84.24%   -0.03%     
==========================================
  Files          22       22              
  Lines        2531     2533       +2     
==========================================
+ Hits         2133     2134       +1     
- Misses        398      399       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1152/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `87.01% <100%> (+0.34%)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1152/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.76% <0%> (-0.15%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=footer). Last update [91263c3...b1b62c9](https://codecov.io/gh/dbcli/pgcli/pull/1152?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Lovely! Merging.
@gantsevdenis by the way, did you have some kind of a problem with `black`?
not with `black`, but `pre-commit` yes. it wouldn't run in py38 environment, which prevented me from commiting to my local repo
Hi @gantsevdenis 

One possible cause is, `black` isn't in your `$PATH` from the `pre-commit` script, maybe you installed black from a virtualenv that need to be `activated` then run?

Maybe you can try to change the `black` to an absolute path, but I recommend you using [pipx](https://github.com/pipxproject/pipx) to install it so that `black` will the avaiable in new shell process.
Hi @laixintao 
This is quite possible, I may have forgot to switch env before running it. Will try again later
Thanks for advise!",2020-03-08 14:25:35,2020-03-12 20:46:01
50,1151,"## Description

Dropping a database fails even when it's no longer the current database.

If you connect to a database (`\c foo`), and then switch to another database (`\c bar`), you are not able to drop the database unless you quit and restart pgcli.

```$ pgcli
Server: PostgreSQL 10.11
Version: 2.2.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
matt@/tmp:matt> \c foo                                                                                                                                                                                                           
You are now connected to database ""foo"" as user ""matt""
Time: 0.013s
matt@/tmp:foo> \c matt                                                                                                                                                                                                           
You are now connected to database ""matt"" as user ""matt""
Time: 0.008s
matt@/tmp:matt> DROP DATABASE foo;                                                                                                                                                                                               
You're about to run a destructive command.
Do you want to proceed? (y/n): y
Your call!
database ""foo"" is being accessed by other users
DETAIL:  There is 1 other session using the database.

Time: 5.050s (5 seconds), executed in: 5.050s (5 seconds)
matt@/tmp:matt>  
```

## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
MacOS Catalina.

- [x] Please provide your CLI version.
pgcli 2.2.0

- [x] What is the output of ``pip freeze`` command.
```cli-helpers==1.2.1
Click==7.0
configobj==5.0.6
humanize==1.0.0
pgcli==2.2.0
pgspecial==1.11.9
prompt-toolkit==2.0.10
psycopg2==2.8.4
Pygments==2.5.2
setproctitle==1.1.10
six==1.14.0
sqlparse==0.3.0
tabulate==0.8.6
terminaltables==3.1.0
wcwidth==0.1.8
```",Unable to drop previously connected-to database,2020-03-06 04:09:53,2020-03-12 20:46:00
51,1150,"## Description
Thanks for `pgcli`! 

Postgres 10 introduced the `IDENTITY` column as a replacement for `SERIAL` in int PKs. `pgcli`'s `\d` command reports when a column is `SERIAL` but not when it's `IDENTITY`, so when using `IDENTITY` columns it's not obvious that they're autoincrement PKs. **I'd like to see ""generated by default as identity"" appear in the `Modifiers` column.** Here's an example that shows that the `IDENTITY` column isn't specially marked in `Modifiers` --

    $ pgcli
    Password for postgres:
    Server: PostgreSQL 11.6
    Version: 2.2.0
    Chat: https://gitter.im/dbcli/pgcli
    Home: http://pgcli.com
    $ CREATE TABLE foo (
         id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
         some_stuff text
         )

    CREATE TABLE
    Time: 0.044s
    $ \d foo
    +------------+---------+-------------+
    | Column     | Type    | Modifiers   |
    |------------+---------+-------------|
    | id         | integer |  not null   |
    | some_stuff | text    |             |
    +------------+---------+-------------+
    Indexes:
        ""foo_pkey"" PRIMARY KEY, btree (id)

    Time: 0.198s

Here's `psql` output for the same table, note output in the `Default` column --

                                       Table ""public.foo""
       Column   |  Type   | Collation | Nullable |             Default
    ------------+---------+-----------+----------+----------------------------------
     id         | integer |           | not null | generated by default as identity
     some_stuff | text    |           |          |
    Indexes:
        ""foo_pkey"" PRIMARY KEY, btree (id)

Here's `pgcli` for a table created with the old school `SERIAL` default. The fact that it's an autoincrement PK is visible in the `Modifiers` column  --

    $     CREATE TABLE bar (
             id SERIAL PRIMARY KEY,
                  some_stuff text
         )

    CREATE TABLE
    Time: 0.049s
    $ \d bar
    +------------+---------+---------------------------------------------------+
    | Column     | Type    | Modifiers                                         |
    |------------+---------+---------------------------------------------------|
    | id         | integer |  not null default nextval('bar_id_seq'::regclass) |
    | some_stuff | text    |                                                   |
    +------------+---------+---------------------------------------------------+
    Indexes:
        ""bar_pkey"" PRIMARY KEY, btree (id)


## Your environment

I'm on a Mac, Catalina, Python 3.6, `pgcli` 2.2.0.

    $ pip freeze
    cli-helpers==1.2.1
    Click==7.0
    configobj==5.0.6
    humanize==0.5.1
    pgcli==2.2.0
    pgspecial==1.11.9
    prompt-toolkit==2.0.10
    psycopg2==2.8.4
    Pygments==2.5.2
    setproctitle==1.1.10
    six==1.14.0
    sqlparse==0.3.0
    tabulate==0.8.6
    terminaltables==3.1.0
    wcwidth==0.1.8","PG10+ ""identity"" columns not differentiated in \d output
Unless someone has already took this, I am working on a PR",2020-03-05 14:28:35,2020-04-24 15:10:00
52,1149,"fix: https://github.com/dbcli/pgcli/issues/1148

## Description

Upgrade dependency.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","upgrade prompt-toolit to 3.0
## Breaking Changes Check List

https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/CHANGELOG#L61
- Python 2 support has been dropped. Minimal Python version is now 3.6,
  although 3.7 is preferred (because of ContextVars).
- Native asyncio, so some async code becomes slightly different.
- The active `Application` became a contextvar. Which means that it should be
  propagated correctly to the code that requires it. However, random other
  threads or coroutines won't be able to know what the current application is.
- The dialog shortcuts API changed. All dialog functions now return an
  `Application`. You still have to call either `run()` or `run_async` on the
  `Application` object.
- The way inputhooks work is changed.
- `patch_stdout` now requires an `Application` as input.
I checked the source code, I don't think those changes affect us.

> ## Breaking Changes Check List
> 
> https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/CHANGELOG#L61
> 
>     * Python 2 support has been dropped. Minimal Python version is now 3.6,
>       although 3.7 is preferred (because of ContextVars).
> 
>     * Native asyncio, so some async code becomes slightly different.
> 
>     * The active `Application` became a contextvar. Which means that it should be
>       propagated correctly to the code that requires it. However, random other
>       threads or coroutines won't be able to know what the current application is.
> 
>     * The dialog shortcuts API changed. All dialog functions now return an
>       `Application`. You still have to call either `run()` or `run_async` on the
>       `Application` object.
> 
>     * The way inputhooks work is changed.
> 
>     * `patch_stdout` now requires an `Application` as input.

But if we upgrade we have to:

- [x] Drop Python2.7
- [x] Drop Python3.5(prompt-toolkit required 3.6 at least)
- [ ] Fix some test case (I can do that :) )

What do you think? @amjith @j-bennet Is that necessary?
@laixintao to address your questions:

1. python 2.7 reached end-of-life already. Yes, we better terminate the support for it, and do it in a separate PR.
2. python 3.5 reaches EOL in September 2020, but I don't see why we can't terminate support now. Most users would be on 3.6 or 3.7 by now.
3. Certainly have to fix those test cases!
The tests are all passed on my mac but failed in travis:
```
Feature: Special commands # specials.feature:1

  Scenario: run refresh command             # specials.feature:3
    When we refresh completions             # steps/specials.py:11 0.109s
    And we wait for prompt                  # steps/basic_commands.py:57 0.001s
    Then we see completions refresh started # steps/specials.py:19 1.079s

Closed connection: host=localhost user=postgres port=5432 dbname=pgcli_behave_tests_3_6_10.
Created connection: host=localhost user=postgres port=5432 dbname=postgres.
Closed connection: host=localhost user=postgres port=5432 dbname=postgres.
8 features passed, 0 failed, 0 skipped
23 scenarios passed, 0 failed, 0 skipped
109 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m48.367s
```
That's odd, I am still investigating it... 
OK, so I created a vagrant VM to test it, it fails exactly like travis CI. I think it only happens on Linux.
```
[vagrant@lailab pgcli]$ behave tests/features/crud_table.feature
package root: /vagrant/pgcli
fixture dir: /vagrant/pgcli/tests/features/fixture_data
Created connection: host=localhost user=postgres port=5432 dbname=postgres.
Created connection: host=localhost user=postgres port=5432 dbname=pgcli_behave_tests_3_7_6.
reading fixture data: /vagrant/pgcli/tests/features/fixture_data/
--- os.environ changed values: ---
COLUMNS=""100""
COVERAGE_PROCESS_START=""/vagrant/pgcli/.coveragerc""
EDITOR=""ex""
LINES=""100""
PAGER=""/vagrant/fedora_pgcli/bin/python3 /vagrant/pgcli/tests/features/wrappager.py ---boundary---""
PGDATABASE=""pgcli_behave_tests_3_7_6""
PGHOST=""localhost""
PGPORT=""5432""
PGSERVICEFILE=""/vagrant/pgcli/tests/features/fixture_data/mock_pg_service.conf""
PGUSER=""postgres""
VISUAL=""ex""
XDG_CONFIG_HOME=""/tmp/pgcli_home_st3gu4uk""
--------------------
Feature: manipulate tables: # tests/features/crud_table.feature:1
  create, insert, update, select, delete from, drop
  Scenario: create, insert, select from, update, drop table  # tests/features/crud_table.feature:4
    When we connect to test database                         # tests/features/steps/crud_database.py:30 0.102s
    Then we see database connected                           # tests/features/steps/crud_database.py:88 1.265s
    When we create table                                     # tests/features/steps/crud_table.py:12 0.102s
    Then we see table created                                # tests/features/steps/crud_table.py:60 1.226s
    When we insert into table                                # tests/features/steps/crud_table.py:20 0.101s
    Then we see record inserted                              # tests/features/steps/crud_table.py:68 1.251s
    When we update table                                     # tests/features/steps/crud_table.py:28 0.102s
    Then we see record updated                               # tests/features/steps/crud_table.py:76 1.120s
    When we select from table                                # tests/features/steps/crud_table.py:36 0.102s
    Then we see data selected                                # tests/features/steps/crud_table.py:84 1.003s
    When we delete from table                                # tests/features/steps/crud_table.py:44 0.101s
    Then we confirm the destructive warning                  # tests/features/steps/basic_commands.py:134 1.261s
    Then we see record deleted                               # tests/features/steps/crud_table.py:110 0.060s
    When we drop table                                       # tests/features/steps/crud_table.py:52 0.101s
    Then we confirm the destructive warning                  # tests/features/steps/basic_commands.py:134 1.111s
    Then we see table dropped                                # tests/features/steps/crud_table.py:118 0.068s
    When we connect to dbserver                              # tests/features/steps/crud_database.py:39 0.102s
    Then we see database connected                           # tests/features/steps/crud_database.py:88 2.005s
      Traceback (most recent call last):
        File ""/vagrant/fedora_pgcli/lib64/python3.7/site-packages/behave/model.py"", line 1329, in run
          match.run(runner.context)
        File ""/vagrant/fedora_pgcli/lib64/python3.7/site-packages/behave/matchers.py"", line 98, in run
          self.func(context, *args, **kwargs)
        File ""tests/features/steps/crud_database.py"", line 93, in step_see_db_connected
          wrappers.expect_exact(context, ""You are now connected to database"", timeout=2)
        File ""/vagrant/pgcli/tests/features/steps/wrappers.py"", line 37, in expect_exact
          ).format(expected, actual, context.logfile.getvalue())
      Exception: Expected:
      ---
      'You are now connected to database'
      ---
      Actual:
      ---
      'Time: 0.016s\r\n_behave_tests_3_7_6>  \r\r\n\r\r\n\r\r\n                                                                               \r \r\\connect postgres \x08_behave_tests_3_7_6> \\connect postgres                                    \r \r_behave_tests_3_7_6> \\connect postgres                                    \r \r\r\r\n\r\nUnhandled exception in event loop:\r\n\r\nException None\r\n ENTER to continue...                                                     \r \r'
      ---
      Full log:
 ```

```
[vagrant@lailab pgcli]$ uname -a
Linux lailab 5.3.7-301.fc31.x86_64 #1 SMP Mon Oct 21 19:18:58 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```
It might be time issue, I test it manually and found that the `\connection postgres` actually takes longer than 1s.

```
pgcli_behave_tests_3_7_6> \connect postgres
You are now connected to database ""postgres"" as user ""postgres""
Time: 1.784s (a second), executed in: 1.771s (a second)
```
> Most users would be on 3.6 or 3.7 by now

[pypi stats page](https://pypistats.org/packages/pgcli) disagrees. I don't know how accurate it is, but it shows comparable daily download numbers for 3.5 and 3.6
I see, maybe there are some Linux distributions that have Python3.5 installed by default. So that leaves us two options:

1. Still develop based on 3.5, I will revert #1154 
2. Python3.5 Users can only use the old version of pgcli
I find keeping up with prompt-toolkit a good idea, and it does mean 3.6+. Maybe we could consider other distribution options, like PyInstaller? Sure, python coders will prefer pip, but they are likely to have newer python anyway. Everyone else just needs an executable.
> I find keeping up with prompt-toolkit a good idea, and it does mean 3.6+. Maybe we could consider other distribution options, like PyInstaller? Sure, python coders will prefer pip, but they are likely to have newer python anyway. Everyone else just needs an executable.

Yes, that's also a good option. I did that in https://github.com/laixintao/iredis (build script: https://github.com/laixintao/iredis/blob/master/.github/workflows/release.yaml#L118 ), I use Github Action for building a binary for every release. You can download from the release page: https://github.com/laixintao/iredis/releases

I use PyOxidizer for packaging, however. PyInstaller basic package the python code into a zip, so it may be slower to start the cli application. PyOxidizer is faster, but the problems we have to have a dir like `lib/` in the file system duo the import system. There is a comparison from PyOxidizer here: https://pyoxidizer.readthedocs.io/en/stable/comparisons.html

PS: Sorry for massive push notification. I am t rying to fix travis-ci, but some behave tests are randomly timeout after upgrading prompt-prompt.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=h1) Report
> Merging [#1149](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/61c81b05f50a073f62629bdcf8eb4317d7a2084c&el=desc) will **increase** coverage by `3.22%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1149/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1149      +/-   ##
==========================================
+ Coverage   83.98%   87.20%   +3.22%     
==========================================
  Files          21       19       -2     
  Lines        2492     1806     -686     
==========================================
- Hits         2093     1575     -518     
+ Misses        399      231     -168     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/1149/diff?src=pr&el=tree#diff-cGdjbGkvX19pbml0X18ucHk=) | | |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1149/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | | |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1149/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.47% <0.00%> (+0.05%)` | :arrow_up: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1149/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `66.66% <0.00%> (+1.66%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1149/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `91.66% <0.00%> (+4.65%)` | :arrow_up: |
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1149/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `53.12% <0.00%> (+9.72%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=footer). Last update [61c81b0...c3e898b](https://codecov.io/gh/dbcli/pgcli/pull/1149?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Finally, all of the test cases passed. It seems the latest version of prompt-toolkit is slower so I have to extend the timeout for some tests.

Also, I met the `CPR unsupported` problems, disabling CPR for some tests but `run the cli` can get the tests passed, but I have to idea why.
@laixintao Is this PR still a WIP, or ready to go?
Hi @j-bennet I think it's ready to go.

To make the tests pass in prompt-toolkit 3.0, I have to:

1. Extend the pexpect's timeout;
2. Disable CPR for some tests;

Not sure if it's ok.
@jonathanslenders Interesting. From the comment here, it looks like when using `pexpect`, CPR should return not supported already:

https://github.com/prompt-toolkit/python-prompt-toolkit/blob/0b9a64f20717e069a44358f651196584f43e666d/prompt_toolkit/input/vt100.py#L89

Why do we need to set an environment variable?
> @jonathanslenders Interesting. From the comment here, it looks like when using `pexpect`, CPR should return not supported already:
> 
> https://github.com/prompt-toolkit/python-prompt-toolkit/blob/0b9a64f20717e069a44358f651196584f43e666d/prompt_toolkit/input/vt100.py#L89
> 
> Why do we need to set an environment variable?

Hi @j-bennet , I think what the comment wants to say is that when test in pexpect, CPR is not supported, but this function (As far as I can see) didn't do that for us, thus we need to set `PROMPT_TOOLKIT_NO_CPR` to `1`. (see this travis failed test without disabling CPR: https://github.com/dbcli/pgcli/pull/1149/commits/fe4d5b565e01be6237b6df646429d26eaa0c6d92 )

And why some tests need to enable `CPR` to pass? ( https://github.com/dbcli/pgcli/pull/1149/commits/890ae2bfda2990da6649491331270c3242b7c835#diff-903967dacf3fff9120918217578816f9R162 ) I checked those tests, it turns out that the prompt was `expect` twice:

1. https://github.com/dbcli/pgcli/blob/93c14f844ee33e4d47ae07688f0e5ca7219df7de/tests/features/steps/basic_commands.py#L94
2. https://github.com/dbcli/pgcli/blob/93c14f844ee33e4d47ae07688f0e5ca7219df7de/tests/features/basic_commands.feature#L16

So delete one solved this.

I leave the commits un-rebased so you can see the failed ci logs. :)
I'm not sure but think pexpect allocates a pseudo terminal, which means that ``isatty`` return ``True``, so prompt_toolkit would expect CPR to work, unless there's that environment variable.
@jonathanslenders Thank you for the explanation, that makes sense. Is prompt_toolkit 3.x really that much slower? I don't feel good about the fact that @laixintao had to increase the timeouts from 5 to 15.
Hi @j-bennet. Sorry looks like my fault. The `timeout` only happens [when didn't setting `PROMPT_TOOLKIT_NO_CPR`](https://github.com/dbcli/pgcli/pull/1149/commits/d379b1e736dcc6623ba53fc3d4e6f095fd3e8344). We needn't increase the timeout if we disable CPR in tests. I reverted it back.

Sorry for bothering ;-( 
@laixintao That's good news! Thank you. Let's get this PR out of the door.",2020-03-03 01:27:54,2020-04-06 03:56:32
53,1148,"Currently `pgcli` is pinned to `prompt_toolkit` version 2:

https://github.com/dbcli/pgcli/blob/91263c37b94a1a3b45be13d35ff1ea19c7b8e1b7/setup.py#L12

This causes a compatibility issue with other tools using `prompt_toolkit`, for example with `litecli` which requires `prompt_toolkit>=3.0.3`.

https://github.com/dbcli/litecli/blob/39d7dad9d63f445e288f476f9e4b76cdd7dc8e9b/setup.py#L30

This issue blocks package managers like `macports` to keep up-to-date versions of both `pgcli`, `litecli` and some other tools.
","Add support for prompt_toolkit>3
I would consider installing pgcli, along with any other system tools which happen to be written in python, using [`pipx`](https://github.com/pipxproject/pipx/), so that it doesn't have to share a virtual environment with anything, and is available everywhere for your user.
> I would consider installing pgcli, along with any other system tools which happen to be written in python, using [`pipx`](https://github.com/pipxproject/pipx/), so that it doesn't have to share a virtual environment with anything, and is available everywhere for your user.

Thanks and yes, that's the recommended way, but the problem is for some distribution developers, their packaging work requires prompt-toolkit>=3 ",2020-03-02 16:53:43,2020-04-06 03:56:32
54,1146,"## Description
```
wakapi_depl1> \d category                                                                                                                                            
Reconnecting...
Reconnect Failed
could not translate host name ""proxyprod"" to address: Name or service not known

<.. turning on work VPN ... >

wakapi_depl1> \d category                                                                                                                                            
'NoneType' object has no attribute 'mogrify'
```

## Your environment
Version: 2.1.1
Linux: 4.15.0-62-generic
",NPE: NoneType has no attribute 'mogrify',2020-02-12 11:01:36,
55,1145,"## Description
added support for partitioned tables, added relkind ""p""

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Add Support for partitioned tables.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=h1) Report
> Merging [#1145](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8fe316e5376738880c9cf4013f37ff357f428e19?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1145/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1145      +/-   ##
==========================================
- Coverage   84.27%   84.23%   -0.04%     
==========================================
  Files          22       22              
  Lines        2531     2531              
==========================================
- Hits         2133     2132       -1     
- Misses        398      399       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1145/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.58% <100%> (ø)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1145/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.76% <0%> (-0.15%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=footer). Last update [8fe316e...9572bf1](https://codecov.io/gh/dbcli/pgcli/pull/1145?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@lazydba247 This is related to https://github.com/dbcli/pgcli/pull/1143, right? What about other new table types?

- t = TOAST table
- f = foreign table

Perhaps it makes sense to include those as well?

cc @troyanov

@j-bennet, t= TOAST tables should be ignored (they are internal only, and used to hold ""wide"" rows)
i will add the f= foreign tables.
@lazydba247 Merged. Thank you! 🍓 ",2020-02-09 14:16:01,2020-02-13 22:24:38
56,1144,"## Description
Not sure what's wrong here
pgcli:
```
wakapi_depl1> select * from _internal.connectors_metadata                                                                                                                                                
╒════════════════╤═════════╤════════════╤════════════╕
│ connector_id   │ scope   │ metadata   │ category   │
╞════════════════╪═════════╪════════════╪════════════╡
╘════════════════╧═════════╧════════════╧════════════╛
SELECT 0
Time: 0.033s
wakapi_depl1> \d _internal.connectors_metadata                                                                                                                                                           
Did not find any relation named _internal.connectors_metadata.
```
psql:
```
wakapi_depl1=> select * from _internal.connectors_metadata;
 connector_id | scope | metadata | category 
--------------+-------+----------+----------
(0 rows)

wakapi_depl1=> \d _internal.connectors_metadata
Table ""_internal.connectors_metadata""
    Column    | Type  | Modifiers 
--------------+-------+-----------
 connector_id | uuid  | not null
... blabla
Indexes:
  blabl ..
```


## Your environment
```
(py37) denis:~ $ pgcli --version
Version: 2.1.1
psql (9.5.19, server 10.11 (Debian 10.11-1.pgdg100+1))
linux 4.15.0-62-generic

```

","\d describe doesn't work
This may be https://github.com/dbcli/pgspecial/issues/88, upgrading to v2.2 should cure the problem.
@lelit solved, thank you",2020-02-06 15:24:06,2020-03-02 15:49:15
57,1143,"## Description
When starting pgcli you could see such an Exception
```
Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
postgres@localhost:postgres>   File ""/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/local/Cellar/pgcli/2.2.0_1/libexec/lib/python3.8/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
                                 refresher(completer, executor)
  File ""/usr/local/Cellar/pgcli/2.2.0_1/libexec/lib/python3.8/site-packages/pgcli/completion_refresher.py"", line 110, in refresh_tables
    completer.extend_foreignkeys(executor.foreignkeys())
  File ""/usr/local/Cellar/pgcli/2.2.0_1/libexec/lib/python3.8/site-packages/pgcli/pgcompleter.py"", line 278, in extend_foreignkeys
    childcolmeta = meta[childschema][childtable][childcol]s-mode     Refreshing completions...
KeyError: {table_name_here}
```

Error occurs when your schema contains partitioned table with foreign key.
More information can be found here:
https://github.com/dbcli/pgcli/issues/675#issuecomment-503631853

I've added a simple if-statement to check if key exists just not to throw an exeption. 

I think at least those two issues are connected to that error:
https://github.com/dbcli/pgcli/issues/1133
https://github.com/dbcli/pgcli/issues/675


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)"," Fix exception in thread completion_refresh caused by KeyError in extend_foreignkeys call
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=h1) Report
> Merging [#1143](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8fe316e5376738880c9cf4013f37ff357f428e19?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1143/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1143      +/-   ##
==========================================
- Coverage   84.27%   84.23%   -0.04%     
==========================================
  Files          22       22              
  Lines        2531     2531              
==========================================
- Hits         2133     2132       -1     
- Misses        398      399       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1143/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.58% <100%> (ø)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1143/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.76% <0%> (-0.15%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=footer). Last update [8fe316e...5049a18](https://codecov.io/gh/dbcli/pgcli/pull/1143?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I merged https://github.com/dbcli/pgcli/pull/1145 that fixes the same issues, but includes both `f` and `p`. Sorry - but in any case, thanks a lot for the fix!",2020-01-31 15:31:02,2020-02-13 22:27:02
58,1142,"## Description
When connecting to my server SQL completion breaks shortly after connecting. Im assuming this is more do to my network or the setup of the managed DB by DigitalOcean than PGCLI. But I bring it to your attention to see if there is a better way to handle this type of situation. Or possibly a way to retry the connection to the server.

Here is the error output:
```
Exception in thread Thread-30:
Traceback (most recent call last):
  File ""/usr/lib/python3.5/threading.py"", line 914, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.5/threading.py"", line 862, in runs-mode                                             
    self._target(*self._args, **self._kwargs)
  File ""/usr/lib/python3/dist-packages/prompt_toolkit/interface.py"", line 673, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""/usr/share/pgcli/pgcli/pgcompleter.py"", line 238, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 100, in suggest_type
    full_text, identifier)
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 192, in suggest_based_on_last_token
    token_v = token.value.lower()
AttributeError: 'tuple' object has no attribute 'value'
```

## Your environment
Ubuntu Xenial
PGCLI Version: 0.20.1

Pip Freeze
```
astroid==2.3.0
beautifulsoup4==4.4.1
catfish==1.4.2
chardet==2.3.0
click==6.2
colorama==0.3.7
command-not-found==0.3
configobj==5.0.6
cycler==0.9.0
defer==1.0.6
future==0.15.2
GDAL==2.2.2
html5lib==0.999
httplib2==0.9.1
isort==4.3.21
Jinja2==2.8
language-selector==0.1
lazy-object-proxy==1.4.2
lxml==3.5.0
MarkupSafe==0.23
matplotlib==1.5.1
mccabe==0.6.1
menulibre==2.1.3
mugshot==0.3.1
numpy==1.11.0
onboard==1.2.0
OWSLib==0.14.0
pbr==5.4.1
pexpect==4.0.1
pgspecial==1.2.0
Pillow==3.1.2
plotly==1.9.5
prompt-toolkit==0.57
psutil==3.4.2
psycopg2==2.7.6.1
ptyprocess==0.5
pycups==1.9.73
pycurl==7.43.0
Pygments==2.1
pygobject==3.20.0
pylint==2.4.1
pyparsing==2.0.3
pyproj==1.9.5.1
python-apt===1.1.0.b1-ubuntu0.16.04.2-zorin1
python-dateutil==2.4.2
python-debian==0.1.27
python-systemd==231
pytz==2014.10
pyxdg==0.25
PyYAML==3.11
reportlab==3.3.0
requests==2.9.1
sessioninstaller==0.0.0
setproctitle==1.1.8
six==1.10.0
sqlparse==0.2.4
stevedore==1.30.1
typed-ast==1.2.0
ubuntu-drivers-common==0.0.0
ufw==0.35
unattended-upgrades==0.1
urllib3==1.13.1
virtualenv==16.6.2
virtualenv-clone==0.5.3
virtualenvwrapper==4.8.4
wcwidth==0.1.6
wrapt==1.11.2
xkit==0.0.0
```
","sql completion breaks shortly after connecting to DB
Hi. Can you try upgrading pgcli? You seem to have a very old version. The current version is 2.2.0. 

You can install it using `pip`. 

```
pip install -U pgcli
```
hmmm its been a while since I installed or upgraded pgcli. I must have installed in using apt.  Currently it looks like version 0.20.1 is the latest for the Ubuntu repo. Is this still the recommended installation method or would pip be preferred to get more up-to-date versions?
`pip install pgcli` is preferred. Better remove the one that is apt-installed, so you don't use it accidentally.
What about ```pip3 install pgcli```? 

Not sure how the python v2/v3 thing for pip works and just dropping in here. 

My output for ``` pip install pgcli ``` and ```pip3 install pgcli``` on macos 10.15.2 :

```
timbo@/Users/tim.siwula/Desktop/docs:🐸:pip install pgcli
DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
Collecting pgcli
  Downloading https://files.pythonhosted.org/packages/19/eb/ec2d4ef9f340660695d17b70f3f4912cee675905e2cd0c5d5d0e39d1e6ba/pgcli-2.2.0.tar.gz (116kB)
     |################################| 122kB 1.6MB/s 
Collecting pgspecial>=1.11.8
  Downloading https://files.pythonhosted.org/packages/4e/0c/47957ad5b5cfb488344032326a4a013127b005929422bc5e9ee98bdf18ec/pgspecial-1.11.9.tar.gz (63kB)
     |################################| 71kB 2.0MB/s 
Requirement already satisfied: click>=4.1 in /usr/local/lib/python2.7/site-packages (from pgcli) (7.0)
Requirement already satisfied: Pygments>=2.0 in /Users/tim.siwula/Library/Python/2.7/lib/python/site-packages (from pgcli) (2.3.1)
Collecting prompt_toolkit<3.0.0,>=2.0.6
  Downloading https://files.pythonhosted.org/packages/66/6a/2c0693ec21528c10dfea279662788b28b2a01cce961160791084d975521a/prompt_toolkit-2.0.10-py2-none-any.whl (340kB)
     |################################| 348kB 2.9MB/s 
Collecting psycopg2>=2.8
  Downloading https://files.pythonhosted.org/packages/84/d7/6a93c99b5ba4d4d22daa3928b983cec66df4536ca50b22ce5dcac65e4e71/psycopg2-2.8.4.tar.gz (377kB)
     |################################| 378kB 3.9MB/s 
Collecting sqlparse<0.4,>=0.3.0
  Downloading https://files.pythonhosted.org/packages/ef/53/900f7d2a54557c6a37886585a91336520e5539e3ae2423ff1102daf4f3a7/sqlparse-0.3.0-py2.py3-none-any.whl
Collecting configobj>=5.0.6
  Downloading https://files.pythonhosted.org/packages/64/61/079eb60459c44929e684fa7d9e2fdca403f67d64dd9dbac27296be2e0fab/configobj-5.0.6.tar.gz
Collecting humanize>=0.5.1
  Downloading https://files.pythonhosted.org/packages/8c/e0/e512e4ac6d091fc990bbe13f9e0378f34cf6eecd1c6c268c9e598dcf5bb9/humanize-0.5.1.tar.gz
Collecting cli_helpers[styles]>=1.2.0
  Downloading https://files.pythonhosted.org/packages/b1/7e/f2658b0e7cb3d4ab75d4dd5c275605ae89e56ba889dc086a0aefe6a89048/cli_helpers-1.2.1-py2-none-any.whl
Collecting setproctitle>=1.1.9
  Downloading https://files.pythonhosted.org/packages/5a/0d/dc0d2234aacba6cf1a729964383e3452c52096dc695581248b548786f2b3/setproctitle-1.1.10.tar.gz
Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python2.7/site-packages (from prompt_toolkit<3.0.0,>=2.0.6->pgcli) (1.12.0)
Requirement already satisfied: wcwidth in /Users/tim.siwula/Library/Python/2.7/lib/python/site-packages (from prompt_toolkit<3.0.0,>=2.0.6->pgcli) (0.1.7)
Collecting tabulate[widechars]>=0.8.2
  Downloading https://files.pythonhosted.org/packages/c4/41/523f6a05e6dc3329a5660f6a81254c6cd87e5cfb5b7482bae3391d86ec3a/tabulate-0.8.6.tar.gz (45kB)
     |################################| 51kB 2.8MB/s 
Collecting terminaltables>=3.0.0
  Downloading https://files.pythonhosted.org/packages/9b/c4/4a21174f32f8a7e1104798c445dacdc1d4df86f2f26722767034e4de4bff/terminaltables-3.1.0.tar.gz
Collecting backports.csv>=1.0.0
  Downloading https://files.pythonhosted.org/packages/8e/26/a6bd68f13e0f38fbb643d6e497fc3462be83a0b6c4d43425c78bb51a7291/backports.csv-1.0.7-py2.py3-none-any.whl
Building wheels for collected packages: pgcli, pgspecial, psycopg2, configobj, humanize, setproctitle, tabulate, terminaltables
  Building wheel for pgcli (setup.py) ... done
  Created wheel for pgcli: filename=pgcli-2.2.0-cp27-none-any.whl size=69966 sha256=49f5411b3b3b200a952f9db1cefa77ea74bb046dad324fcd81dd7a81c63610ee
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/0a/09/7f/872fc88ec93b2533998c52cea93b2d52fb72e196327850e621
  Building wheel for pgspecial (setup.py) ... done
  Created wheel for pgspecial: filename=pgspecial-1.11.9-cp27-none-any.whl size=33642 sha256=1e483a54070b4793e15df90e9b69faed0a933e51a2e5d5fb1552ef729e455b21
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/c7/c6/b9/3f26df673e76d4e5737846151fbf784070e2675e5726a5d44c
  Building wheel for psycopg2 (setup.py) ... done
  Created wheel for psycopg2: filename=psycopg2-2.8.4-cp27-cp27m-macosx_10_15_x86_64.whl size=135268 sha256=044e27559df204fd0586d269806c276121e8ac4527e6e2b3a0c6d07ecec694c0
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/7e/5b/53/30085c62689dcfce50c8f40759945a49eb856af082e9ebf751
  Building wheel for configobj (setup.py) ... done
  Created wheel for configobj: filename=configobj-5.0.6-cp27-none-any.whl size=34546 sha256=a1fd78fe9e03aa97ac5bb8e71c00cf7c416ac337d2e8312887b5876358f0903d
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/f1/e4/16/4981ca97c2d65106b49861e0b35e2660695be7219a2d351ee0
  Building wheel for humanize (setup.py) ... done
  Created wheel for humanize: filename=humanize-0.5.1-cp27-none-any.whl size=17901 sha256=74028ca98c585d86972784deda46c8363fce210d84494aa1476486fbbc70cb56
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/69/86/6c/f8b8593bc273ec4b0c653d3827f7482bb2001a2781a73b7f44
  Building wheel for setproctitle (setup.py) ... done
  Created wheel for setproctitle: filename=setproctitle-1.1.10-cp27-cp27m-macosx_10_15_x86_64.whl size=9703 sha256=bf4668af17d4ce33d5996dc665b6041d11a04a015d78285fe0e335985532231e
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/e6/b1/a6/9719530228e258eba904501fef99d5d85c80d52bd8f14438a3
  Building wheel for tabulate (setup.py) ... done
  Created wheel for tabulate: filename=tabulate-0.8.6-cp27-none-any.whl size=23273 sha256=c69d008628a47de7756679f99a28887b18459119bad3315f6147ed8dc8bf50da
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/9c/9b/f4/eb243fdb89676ec00588e8c54bb54360724c06e7fafe95278e
  Building wheel for terminaltables (setup.py) ... done
  Created wheel for terminaltables: filename=terminaltables-3.1.0-cp27-none-any.whl size=15356 sha256=c110b27da2dd96518589111874158da3e02b7128e449ab95b50c440a5ae38566
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/30/6b/50/6c75775b681fb36cdfac7f19799888ef9d8813aff9e379663e
Successfully built pgcli pgspecial psycopg2 configobj humanize setproctitle tabulate terminaltables
ERROR: ipython 5.8.0 has requirement prompt-toolkit<2.0.0,>=1.0.4, but you'll have prompt-toolkit 2.0.10 which is incompatible.
ERROR: jupyter-console 5.2.0 has requirement prompt-toolkit<2.0.0,>=1.0.0, but you'll have prompt-toolkit 2.0.10 which is incompatible.
Installing collected packages: sqlparse, psycopg2, pgspecial, prompt-toolkit, configobj, humanize, tabulate, terminaltables, backports.csv, cli-helpers, setproctitle, pgcli
  Found existing installation: prompt-toolkit 1.0.15
    Uninstalling prompt-toolkit-1.0.15:
      Successfully uninstalled prompt-toolkit-1.0.15
Successfully installed backports.csv-1.0.7 cli-helpers-1.2.1 configobj-5.0.6 humanize-0.5.1 pgcli-2.2.0 pgspecial-1.11.9 prompt-toolkit-2.0.10 psycopg2-2.8.4 setproctitle-1.1.10 sqlparse-0.3.0 tabulate-0.8.6 terminaltables-3.1.0
timbo@/Users/tim.siwula/Desktop/docs:🐸:pgcli            
could not connect to server: No such file or directory
	Is the server running locally and accepting
	connections on Unix domain socket ""/tmp/.s.PGSQL.5432""?

timbo@/Users/tim.siwula/Desktop/docs:🐸:c

timbo@/Users/tim.siwula/Desktop/docs:🐸:pgcli
Server: PostgreSQL 12.1
Version: 2.2.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
tim.siwula@/tmp:tim.siwula> exit                                                                     
Goodbye!
timbo@/Users/tim.siwula/Desktop/docs:🐸:pip3 install pgcli
Collecting pgcli
  Downloading https://files.pythonhosted.org/packages/89/11/fba529b929db020fdafbfdc3d5ac33d2a30c8834e6a81cb4e104e82ee59f/pgcli-2.2.0-py3-none-any.whl (69kB)
     |████████████████████████████████| 71kB 1.8MB/s 
Collecting setproctitle>=1.1.9
  Using cached https://files.pythonhosted.org/packages/5a/0d/dc0d2234aacba6cf1a729964383e3452c52096dc695581248b548786f2b3/setproctitle-1.1.10.tar.gz
Collecting humanize>=0.5.1
  Using cached https://files.pythonhosted.org/packages/8c/e0/e512e4ac6d091fc990bbe13f9e0378f34cf6eecd1c6c268c9e598dcf5bb9/humanize-0.5.1.tar.gz
Collecting cli-helpers[styles]>=1.2.0
  Downloading https://files.pythonhosted.org/packages/51/53/d94bb9cd98cd996da6eeea82a077293cd62b825d89a36d3c27714cae5e5b/cli_helpers-1.2.1-py3-none-any.whl
Requirement already satisfied: click>=4.1 in /usr/local/lib/python3.7/site-packages (from pgcli) (7.0)
Collecting pgspecial>=1.11.8
  Using cached https://files.pythonhosted.org/packages/4e/0c/47957ad5b5cfb488344032326a4a013127b005929422bc5e9ee98bdf18ec/pgspecial-1.11.9.tar.gz
Collecting prompt-toolkit<3.0.0,>=2.0.6
  Downloading https://files.pythonhosted.org/packages/87/61/2dfea88583d5454e3a64f9308a686071d58d59a55db638268a6413e1eb6d/prompt_toolkit-2.0.10-py3-none-any.whl (340kB)
     |████████████████████████████████| 348kB 2.1MB/s 
Collecting configobj>=5.0.6
  Using cached https://files.pythonhosted.org/packages/64/61/079eb60459c44929e684fa7d9e2fdca403f67d64dd9dbac27296be2e0fab/configobj-5.0.6.tar.gz
Collecting Pygments>=2.0
  Downloading https://files.pythonhosted.org/packages/be/39/32da3184734730c0e4d3fa3b2b5872104668ad6dc1b5a73d8e477e5fe967/Pygments-2.5.2-py2.py3-none-any.whl (896kB)
     |████████████████████████████████| 901kB 1.8MB/s 
Collecting psycopg2>=2.8
  Using cached https://files.pythonhosted.org/packages/84/d7/6a93c99b5ba4d4d22daa3928b983cec66df4536ca50b22ce5dcac65e4e71/psycopg2-2.8.4.tar.gz
Collecting sqlparse<0.4,>=0.3.0
  Using cached https://files.pythonhosted.org/packages/ef/53/900f7d2a54557c6a37886585a91336520e5539e3ae2423ff1102daf4f3a7/sqlparse-0.3.0-py2.py3-none-any.whl
Collecting tabulate[widechars]>=0.8.2
  Using cached https://files.pythonhosted.org/packages/c4/41/523f6a05e6dc3329a5660f6a81254c6cd87e5cfb5b7482bae3391d86ec3a/tabulate-0.8.6.tar.gz
Collecting terminaltables>=3.0.0
  Using cached https://files.pythonhosted.org/packages/9b/c4/4a21174f32f8a7e1104798c445dacdc1d4df86f2f26722767034e4de4bff/terminaltables-3.1.0.tar.gz
Collecting wcwidth
  Downloading https://files.pythonhosted.org/packages/58/b4/4850a0ccc6f567cc0ebe7060d20ffd4258b8210efadc259da62dc6ed9c65/wcwidth-0.1.8-py2.py3-none-any.whl
Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/site-packages (from prompt-toolkit<3.0.0,>=2.0.6->pgcli) (1.11.0)
Building wheels for collected packages: setproctitle, humanize, pgspecial, configobj, psycopg2, tabulate, terminaltables
  Building wheel for setproctitle (setup.py) ... done
  Created wheel for setproctitle: filename=setproctitle-1.1.10-cp37-cp37m-macosx_10_15_x86_64.whl size=10139 sha256=874419b7b8d8b5367d05ab98310d4f03c0fb6c71d6509c1374a5831414d3b8bd
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/e6/b1/a6/9719530228e258eba904501fef99d5d85c80d52bd8f14438a3
  Building wheel for humanize (setup.py) ... done
  Created wheel for humanize: filename=humanize-0.5.1-cp37-none-any.whl size=17901 sha256=fc228739f729749e418faa2a0d502a73c56234aeb02907b0760ffbdb098980b5
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/69/86/6c/f8b8593bc273ec4b0c653d3827f7482bb2001a2781a73b7f44
  Building wheel for pgspecial (setup.py) ... done
  Created wheel for pgspecial: filename=pgspecial-1.11.9-cp37-none-any.whl size=33642 sha256=ef944c1d4a03cef2c179f0002398b52a451ba5db85e83276572aed5ea79f5fe5
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/c7/c6/b9/3f26df673e76d4e5737846151fbf784070e2675e5726a5d44c
  Building wheel for configobj (setup.py) ... done
  Created wheel for configobj: filename=configobj-5.0.6-cp37-none-any.whl size=34547 sha256=78792db35176a08e1fb276f7e059071d5f22533bdb6451682a963908aef50af7
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/f1/e4/16/4981ca97c2d65106b49861e0b35e2660695be7219a2d351ee0
  Building wheel for psycopg2 (setup.py) ... done
  Created wheel for psycopg2: filename=psycopg2-2.8.4-cp37-cp37m-macosx_10_15_x86_64.whl size=135061 sha256=f46931a05a2d8623d57ace829589c6456fbf59e27322449f110e0597cf0d62fa
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/7e/5b/53/30085c62689dcfce50c8f40759945a49eb856af082e9ebf751
  Building wheel for tabulate (setup.py) ... done
  Created wheel for tabulate: filename=tabulate-0.8.6-cp37-none-any.whl size=23274 sha256=28cceaaad9f0aabbae503537151bf3e64734b9d8f54184ee47ec811287f4d889
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/9c/9b/f4/eb243fdb89676ec00588e8c54bb54360724c06e7fafe95278e
  Building wheel for terminaltables (setup.py) ... done
  Created wheel for terminaltables: filename=terminaltables-3.1.0-cp37-none-any.whl size=15355 sha256=713f21e4bbbf5dc36e69dd3d4122a9bf58e345a916ec300e3e5f52dcc28b9a43
  Stored in directory: /Users/tim.siwula/Library/Caches/pip/wheels/30/6b/50/6c75775b681fb36cdfac7f19799888ef9d8813aff9e379663e
Successfully built setproctitle humanize pgspecial configobj psycopg2 tabulate terminaltables
Installing collected packages: setproctitle, humanize, configobj, wcwidth, tabulate, terminaltables, Pygments, cli-helpers, sqlparse, psycopg2, pgspecial, prompt-toolkit, pgcli
Successfully installed Pygments-2.5.2 cli-helpers-1.2.1 configobj-5.0.6 humanize-0.5.1 pgcli-2.2.0 pgspecial-1.11.9 prompt-toolkit-2.0.10 psycopg2-2.8.4 setproctitle-1.1.10 sqlparse-0.3.0 tabulate-0.8.6 terminaltables-3.1.0 wcwidth-0.1.8
timbo@/Users/tim.siwula/Desktop/docs:🐸:c

timbo@/Users/tim.siwula/Desktop/docs:🐸:pgcli             
Server: PostgreSQL 12.1
Version: 2.2.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
tim.siwula@/tmp:tim.siwula>
```
ok, thanks @j-bennet i will try installing via pip.
This may have been why I chose apt previously to install. Below is the error I got when trying to pip install. I then tried installing ```psycopg2-binary``` but am getting the same error.
```
ERROR: Command errored out with exit status 1:
     command: /home/garret/.virtualenvs/pgcli/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'/tmp/pip-install-mntrmanw/psycopg2/setup.py'""'""'; __file__='""'""'/tmp/pip-install-mntrmanw/psycopg2/setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base /tmp/pip-install-mntrmanw/psycopg2/pip-egg-info
         cwd: /tmp/pip-install-mntrmanw/psycopg2/
    Complete output (23 lines):
    running egg_info
    creating /tmp/pip-install-mntrmanw/psycopg2/pip-egg-info/psycopg2.egg-info
    writing dependency_links to /tmp/pip-install-mntrmanw/psycopg2/pip-egg-info/psycopg2.egg-info/dependency_links.txt
    writing top-level names to /tmp/pip-install-mntrmanw/psycopg2/pip-egg-info/psycopg2.egg-info/top_level.txt
    writing /tmp/pip-install-mntrmanw/psycopg2/pip-egg-info/psycopg2.egg-info/PKG-INFO
    writing manifest file '/tmp/pip-install-mntrmanw/psycopg2/pip-egg-info/psycopg2.egg-info/SOURCES.txt'
    
    Error: pg_config executable not found.
    
    pg_config is required to build psycopg2 from source.  Please add the directory
    containing pg_config to the $PATH or specify the full executable path with the
    option:
    
        python setup.py build_ext --pg-config /path/to/pg_config build ...
    
    or with the pg_config option in 'setup.cfg'.
    
    If you prefer to avoid building psycopg2 from source, please install the PyPI
    'psycopg2-binary' package instead.
    
    For further information please check the 'doc/src/install.rst' file (also at
    <http://initd.org/psycopg/docs/install.html>).
    
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
```

This was done in a new pip virtual env. Here's a new pip list
psycopg2-binary 2.8.4  
setuptools      45.1.0 
wheel           0.34.2 

Nevermind, I didnt see the requirements further down in the README.
""pgcli requires python-dev, libpq-dev and libevent-dev packages.""

Ive installed those now, and pip install runs fine. I will see if the this effects the sql completion in any way.
So far after the update I havent had any issues like the original error I first reported.

Thanks!
@glw Thank you for reporting your findings - this may help others - and nice work resolving the issue!",2020-01-23 17:30:32,2020-01-31 21:59:32
59,1141,"## Description
<!--- Describe your changes in detail. -->

https://www.python.org/downloads/release/python-340/

related: #1139 

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Drop Python 3.4 support
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1141?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@77a3619`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1141/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1141?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1141   +/-   ##
=========================================
  Coverage          ?   84.23%           
=========================================
  Files             ?       22           
  Lines             ?     2531           
  Branches          ?        0           
=========================================
  Hits              ?     2132           
  Misses            ?      399           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1141?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1141?src=pr&el=footer). Last update [77a3619...0cdc30d](https://codecov.io/gh/dbcli/pgcli/pull/1141?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

> Nice work! Please address the changelog comments, and remove 3.4 from tox.ini as well.

Oh sorry, I search `3.4` for the whole repo but missed here :)
Merged! Thanks a lot!",2020-01-15 05:32:16,2020-01-16 06:45:16
60,1140,closed by https://github.com/dbcli/pgcli/pull/1141,"Drop python3.4 support
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=h1) Report
> Merging [#1140](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/2b55da84812f94bc98d3586244f02749326062d5?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1140/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1140      +/-   ##
==========================================
+ Coverage   84.23%   84.27%   +0.03%     
==========================================
  Files          22       22              
  Lines        2531     2531              
==========================================
+ Hits         2132     2133       +1     
+ Misses        399      398       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1140/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.9% <0%> (+0.14%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=footer). Last update [2b55da8...566c5dd](https://codecov.io/gh/dbcli/pgcli/pull/1140?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2020-01-15 05:22:48,2020-01-15 05:32:29
61,1139,"
## Description
<!--- Describe your changes in detail. -->

Using `is not` for comparing string literals raises warning that != should be
used.

Fixes #1138 

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Fix warning raised for using `is not` to compare string literal
@laixintao, looks like PyYAML is not supported in 3.4.8. That's why the tests are failing
I see, the tests on master branch also failed due to PyYAML doesn't support 3.4. https://travis-ci.org/dbcli/pgcli/builds/636113749

Any chance that we drop Python-3.4 support? @amagri @j-bennet 
Yes, we don't want to support 3.4 anymore.
I'm going to merge the PR and drop 3.4 support in a separate one later. Thanks for the fix @thegeorgeous! 🍫 ",2020-01-13 06:17:43,2020-01-15 04:56:08
62,1138,"## Description
<!--- Describe your problem as fully as you can. -->

installed pgcli v2.2.0 via homebrew, which requires python@3.8.0

`pgcli --version` shows following warning from https://github.com/dbcli/pgcli/blob/v2.2.0/pgcli/main.py#L1259


```
SyntaxWarning: ""is not"" with a literal. Did you mean ""!=""?
```

## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
macOS 10.15.2

- [x] Please provide your CLI version.
2.2.0

- [ ] What is the output of ``pip freeze`` command.

","SyntaxWarning: ""is not"" with a literal. Did you mean ""!=""?",2020-01-10 01:40:57,2020-01-15 04:56:08
63,1137,"## Description

Running pgcli version 2.2.0, installed through nix:

```
$ nix run nixpkgs.pgcli
$ pgcli --version
Version: 2.2.0
```

The postgres server is version `11.5 (Debian 11.5-1.pgdg90+1)` which I'm running through docker.

I created a new database, and I ran this query:

```
begin;

create table users (
    user_email varchar(128) not null primary key
);

create table tags (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    primary key (user_email, tag)
);

create table entry_types (
    user_email varchar(128) not null references users(user_email),
    entry_type varchar(128) not null,
    primary key (user_email, entry_type)
);

create table positions (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    entry_type varchar(128) not null,
    timestamp timestamp not null,
    foreign key (user_email) references users(user_email),
    foreign key (user_email, entry_type) references entry_types(user_email, entry_type),
    primary key (user_email, timestamp)
);

commit;
```

Then I got this error:

```
Traceback (most recent call last):
  File ""/nix/store/d89hv7fvmky59qqgzb1yiwagv34i1q75-python3-3.7.5/lib/python3.7/threading.py"", line 926, in _bootstrap_inner
[... a bit of garbage because of cli overwriting error...]
  File ""/nix/store/d89hv7fvmky59qqgzb1yiwagv34i1q75-python3-3.7.5/lib/python3.7/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/nix/store/gj1a2x73rf4b0zw6y92barym9pfhvx7s-pgcli-2.2.0/lib/python3.7/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/nix/store/gj1a2x73rf4b0zw6y92barym9pfhvx7s-pgcli-2.2.0/lib/python3.7/site-packages/pgcli/completion_refresher.py"", line 110, in refresh_tables
    completer.extend_foreignkeys(executor.foreignkeys())
  File ""/nix/store/gj1a2x73rf4b0zw6y92barym9pfhvx7s-pgcli-2.2.0/lib/python3.7/site-packages/pgcli/pgcompleter.py"", line 278, in extend_foreignkeys
    childcolmeta = meta[childschema][childtable][childcol]
KeyError: 'entry_types'
```

Since I'm not installing `pgcli` through `pip`, the `pip freeze` output is irrelevant - pgcli is not going to use those libraries. But this command:

```
$ strace -e trace=file pgcli 2>&1 | cut -d '""' -f 2 | cut -d '/' -f ""1-4"" | grep ""/"" | sort | uniq
```

Gives a pretty good idea of libraries used and file paths touched:

```
/dev/tty
/etc/ld-nix.so.preload
/etc/localtime
/etc/nsswitch.conf
/etc/passwd
/home
/home/dbe
/home/dbe/.config
/home/dbe/.pgclirc
/home/dbe/.pgpass
/nix
/nix/store
/nix/store/03c4106zarkpdrf2yscs9f1ph4rnlpcx-python3.7-singledispatch-3.4.0.3
/nix/store/2x3rzl2181qgfgdcbin1fqfk0m9nb661-python3.7-psycopg2-2.8.4
/nix/store/3cz3xgnghkpy41ab9hcj7011sqbrpg4n-ncurses-6.1-20190112
/nix/store/46bbd4s1p40q3f8hzlqk9niqa9zsw5wi-python3.7-click-7.0
/nix/store/4vv0b5qch3b4n4nwsxabl13crk4rc8vk-openssl-1.1.1d
/nix/store/6bz6zqhsbbgcjdxps792a3754ql4hhq4-xz-5.2.4
/nix/store/6w52i29bpdmi3x0h5w4a5cinm3l4g8yv-python3.7-jeepney-0.4.1
/nix/store/7ydp5qhy2pj8ymlqr8qmvr1wdy1dl0b4-python3.7-pygobject-3.32.1
/nix/store/88b5jfiywj0bfqz2qv0fml2p1kljw62n-python3.7-wcwidth-0.1.7
/nix/store/8mg3cjnnjvhdv0ixxf9vg208fkhs9irp-python3.7-configobj-5.0.6
/nix/store/95m314hwvmldzarwyfckc3r7y8s9m2ba-python3.7-entrypoints-0.3
/nix/store/9dv2hymh9a1w568vqzvy4yq1b37v60rp-python3.7-sqlparse-0.3.0
/nix/store/9w4llsiixfyc3q66fqdxgc4m2f608ijj-python3.7-Pygments-2.4.2
/nix/store/arjlvns0ahabnskdqxavyj9rpa8nghb6-python3.7-cli_helpers-1.2.1
/nix/store/bk68i8li3n3h1772znw70cdxnqyvjmzl-python3.7-certifi-2019.9.11
/nix/store/brbfl68gm56aqrfa43ffrbhx46qxqhlm-python3.7-docutils-0.15.2
/nix/store/c9q465hrmcwlxal44gl4qn0n221lza2s-python3.7-setproctitle-1.1.10
/nix/store/d89hv7fvmky59qqgzb1yiwagv34i1q75-python3-3.7.5
/nix/store/f7n6lgyxg0l4p67zpdh52wlx3xgr728r-bzip2-1.0.6.0.1
/nix/store/ff824gxsp05l44gi35mfgqadvha3fp60-python3.7-cryptography-2.8
/nix/store/g5rhq6rcwhsn3kv6nx1n5g4lwfg21y1g-python3.7-packaging-19.2
/nix/store/gj1a2x73rf4b0zw6y92barym9pfhvx7s-pgcli-2.2.0
/nix/store/gn6mp6xch4vk0ks1vazyqm03v7mz2v0y-python3.7-tabulate-0.8.6
/nix/store/jls9vdr32nmhp17xm0igk0fw9plq883b-python3.7-dbus-python-1.2.12
/nix/store/kh3ipi40nja6hw3k25s8bnqlpny9hiiv-postgresql-11.6-lib
/nix/store/klhkh53svwvzxi14yh23r8n06x0wcbz6-python3.7-humanize-0.5.1
/nix/store/kvjb1rvvb29y83j4pnms2q50qk1q68ah-python3.7-cffi-1.13.2
/nix/store/p4hhm3lgi7qa4kiv68wppflxf6yfhl6n-python3.7-pgspecial-1.11.9
/nix/store/r9mn29i5wxflwscrvcbjck452dmlhcic-python3.7-tornado-5.1
/nix/store/r9r668v95455vglg75nsyvn0idx77css-python3.7-prompt_toolkit-2.0.10
/nix/store/sf2qjfd4dygh4cl4jgr62bjbplcjzzn2-python3.7-secretstorage-3.1.1
/nix/store/sm7gvn5x104cmqh26lpszds9azqjp2mj-python3.7-keyring-19.2.0
/nix/store/ssmz9r19xfqd1hmymy9rda3chmg3wvry-python3.7-pycairo-1.18.2
/nix/store/v8qv6zzqhi34y2hkppp3dx36fb7njppf-python3.7-backports_abc-0.5
/nix/store/wxs2das9y77fiwn4fwvzccgiajyzk7qd-python3.7-pyparsing-2.4.5
/nix/store/xhpwab5kavygbr1fswawmdyqvmn3wa4i-glibc-2.27
/nix/store/y19x72fgsb62bb0qr6x1pbhvl7hr624w-python3.7-terminaltables-3.1.0
/nix/store/ylhic97zbw8qsarzg5a26abgpqhi8a9v-python3.7-six-1.12.0
/nix/store/ylpi31dwsgm9c9rndp0j5b4na749d97z-zlib-1.2.11
/nix/store/zdl0hjgkyiclzzgdi0q4z2zm78zdvnif-libffi-3.3
/nix/store/zmc43wsgwg8ms0l3vjg1dlfh08y59x3z-python3.7-pycparser-2.19
/proc/mounts
/proc/self/status
/run/postgresql/.s.PGSQL.5432
/selinux
```



Interesting addition; if I change the query to this:

```
begin;

create table tags (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    primary key (user_email, tag)
);

create table positions (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    timestamp timestamp not null,
    primary key (user_email, timestamp)
);

commit;
```

Then, instead, I get this error:

```
KeyError: 'positions'
```

So I'm guessing `pgcli` just has issues with transactions?


## Your environment
<!-- This gives us some more context to work with. -->

- [X] Please provide your OS and version information.
- [X] Please provide your CLI version.
- [X] What is the output of ``pip freeze`` command.
","`KeyError` on transactions with foreign keys
This works:

```
begin;

create table users (
    user_email varchar(128) not null primary key
);

create table tags (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    primary key (user_email, tag)
);

commit;
```

But this does not:


```
begin;

create table tags (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    primary key (user_email, tag)
);

create table positions (
    user_email varchar(128) not null,
    tag varchar(128) not null,
    timestamp timestamp not null,
    foreign key (user_email, tag) references tags(user_email, tag),
    primary key (user_email, timestamp)
);

commit;
```

I think the issue is that if you create a transaction query with two tables and a foreign key relationship between them, you get a `KeyError` of the table with the foreign keys.",2020-01-06 09:43:29,
64,1136,"## Description
When attempting to connect to Redshift, it exits immediately with the following message
```
PGSSLMODE=require pgcli -p <portnum> -h <host> -d <dbname> -U <user>
server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or while processing the request.
```
This just started happening after upgrading to 2.2.0 through Homebrew

## Your environment
<!-- This gives us some more context to work with. -->

Running MacOS 10.15.1
`pip freeze` output:
```
connor:~ $ pip freeze
applicationinsights==0.11.9
attrs==19.3.0
backports.csv==1.0.7
cli-helpers==0.2.3
Click==7.0
configobj==5.0.6
DateTime==4.3
enum34==1.1.6
future==0.17.1
humanize==0.5.1
importlib-metadata==1.2.0
more-itertools==8.0.0
mssql-cli==0.15.0
packaging==19.2
pendulum==2.0.5
pluggy==0.13.1
prompt-toolkit==1.0.16
py==1.8.0
Pygments==2.4.2
pyparsing==2.4.5
pytest==5.3.1
pytest-runner==3.0.1
python-dateutil==2.8.1
pytz==2019.3
pytzdata==2019.3
six==1.12.0
sqlparse==0.2.4
terminaltables==3.1.0
wcwidth==0.1.7
zipp==0.6.0
zope.interface==4.7.1
```
",pgcli fails to start when connecting to Redshift,2020-01-03 20:07:29,
65,1135,"## Description
<!--- Describe your changes in detail. -->
Fixed dead link of behave package in development guide.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Fix dead link of behave package.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=h1) Report
> Merging [#1135](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/901812a7bf1667117668e24211a99ab7b867b98d?src=pr&el=desc) will **decrease** coverage by `0.15%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1135/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1135      +/-   ##
==========================================
- Coverage   84.49%   84.33%   -0.16%     
==========================================
  Files          21       21              
  Lines        2528     2528              
==========================================
- Hits         2136     2132       -4     
- Misses        392      396       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1135/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1135/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.76% <0%> (-0.15%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=footer). Last update [901812a...eb2718b](https://codecov.io/gh/dbcli/pgcli/pull/1135?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Lovely! Can you please add your name to changelog as well? (you'd have to add a link in the bottom of changelog).
Sure, I'd be glad to.
Thank you! :coffee: ",2020-01-01 13:02:21,2020-01-07 14:53:43
66,1134,"## Description
<!--- Describe your problem as fully as you can. -->
Since #813, there is support for the 3 modes of `\pset pager`: on, off or always. However there is no way to configure 'always' from the pgcli config file. There should be a way to specify this in the pgcli config file.
## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
macOS 10.14.6
- [x] Please provide your CLI version.
2.1.1_2 (from Homebrew)
- [x] What is the output of ``pip freeze`` command.
Not relevant",Ability to specify pset pager behavior in config,2019-12-19 18:36:13,
67,1133,"## Description
I gave this type of error when I start working, then continue

> traceback (most recent call last):
  File ""/usr/lib/python3.6/threading.py"", line 916, in _bootstrap_inner                              
    self.run()mpletion: ON  [F3] Multiline: OFF  [F4] Emacs-mode     Refreshing completions...       
  File ""/usr/lib/python3.6/threading.py"", line 864, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/sharof/.local/lib/python3.6/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/home/sharof/.local/lib/python3.6/site-packages/pgcli/completion_refresher.py"", line 110, in refresh_tables
    completer.extend_foreignkeys(executor.foreignkeys())
  File ""/home/sharof/.local/lib/python3.6/site-packages/pgcli/pgcompleter.py"", line 278, in extend_foreignkeys
    childcolmeta = 

> meta[childschema][childtable][childcol]

## My environment
-Linux Ubuntu 180.04.
-Version: 2.1.1

","Starting issue
Hi @Sharofiddin Can you try to upgrade to v2.2.0 see if it still happens?",2019-12-11 09:42:43,
68,1132,"## Description
As the title of the issue states quitting less is also closing pgcli.

A simple query like this opens up `less`

```
select G.d_ID, avg(G.g_Price) as g_AvgPrice
 from gGarments G
 group by G.d_ID
```

When `q` is pressed to close `less` pgcli is also closed and there is nor foreground jobs running

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] 5.3.15-1-MANJARO
- [ ] pgcli Version: 2.2.0
- [ ] (pip freeze](https://termbin.com/egx5)
- [ ] `zsh 5.7.1 (x86_64-pc-linux-gnu)`
","quitting less is also closing pgcli
Seems like this has been fixed v.2.2.0
The issue is still there, I was mistaken.
The odd thing is that this only happens for this single query, every other query which displays the results in less does not close down the entire application.
Though I don't have  your particular table, I can't duplicate this in pgcli 3.0.0.
I think we can close this issue for now, I can't replicate it anymore either :)",2019-12-10 10:12:35,2020-07-27 10:08:58
69,1131,"## Description
Can't install pgcli with binary version of psycopg2.

## Steps to reproduce
```
pip3 install pgcli --only-binary psycopg2
Collecting pgcli
...
Collecting psycopg2>=2.8 (from pgcli)
  Could not find a version that satisfies the requirement psycopg2>=2.8 (from pgcli) (from versions: 2.7, 2.7.1, 2.7.2, 2.7.3, 2.7.3.1, 2.7.3.2, 2.7.4, 2.7.5, 2.7.6, 2.7.6.1, 2.7.7)
No matching distribution found for psycopg2>=2.8 (from pgcli)
```
but 
```
pip3 install psycopg2-binary
Collecting psycopg2-binary
...
Successfully installed psycopg2-binary-2.8.4
```
## Your environment
Ubuntu-18.14 on WSL2

- [ ] What is the output of ``pip freeze`` command.
```
argcomplete==1.8.1
argh==0.26.2
asn1crypto==0.24.0
attrs==19.3.0
Automat==0.6.0
bcrypt==3.1.7
beautifulsoup4==4.6.0
blinker==1.4
Brotli==1.0.4
cached-property==1.5.1
certifi==2019.11.28
cffi==1.13.2
chardet==3.0.4
click==6.7
click-plugins==1.0.2
cligj==0.5.0
cloud-init==19.2
colorama==0.4.1
command-not-found==0.3
ConfigArgParse==0.11.0
configobj==5.0.6
constantly==15.1.0
construct==2.8.16
cryptography==2.8
cssutils==1.0.2
cycler==0.10.0
decorator==4.1.2
distro-info===0.18ubuntu0.18.04.1
docker==4.1.0
docker-compose==1.25.0
dockerpty==0.4.1
docopt==0.6.2
feedparser==5.2.1
Fiona==1.8.11
Flask==0.12.2
future==0.15.2
GDAL==3.0.2
Guake==3.0.5
h2==3.0.1
hpack==3.0.0
html2text==2018.1.9
html5lib==0.999999999
httpie==1.0.3
httplib2==0.9.2
hyperframe==5.1.0
hyperlink==17.3.1
idna==2.8
importlib-metadata==1.2.0
incremental==16.10.1
ipython-genutils==0.2.0
itsdangerous==0.24
Jinja2==2.10
jsbeautifier==1.6.4
jsonpatch==1.16
jsonpointer==1.10
jsonschema==3.2.0
jupyter-core==4.4.0
kaitaistruct==0.7
keyring==10.6.0
keyrings.alt==3.0
language-selector==0.1
lxml==4.2.1
MarkupSafe==1.0
matplotlib==2.1.1
mitmproxy==2.0.2
more-itertools==8.0.0
munch==2.2.0
nbformat==4.4.0
netifaces==0.10.4
numpy==1.13.3
oauthlib==2.0.6
olefile==0.45.1
OWSLib==0.18.0
PAM==0.4.2
paramiko==2.7.0
passlib==1.7.1
pathtools==0.1.2
pbr==3.1.1
Pillow==5.1.0
plotly==2.2.3
psycopg2==2.7.4
psycopg2-binary==2.8.4
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycairo==1.16.2
pycparser==2.19
pycrypto==2.6.1
Pygments==2.5.2
pygobject==3.26.1
pyinotify==0.9.6
PyJWT==1.5.3
PyNaCl==1.3.0
pyOpenSSL==17.5.0
pyparsing==2.2.0
pyperclip==1.6.0
pyproj==2.4.1
pyrsistent==0.15.6
pyserial==3.4
python-apt==1.6.4
python-dateutil==2.6.1
python-debian==0.1.32
pytz==2018.3
pyxdg==0.25
PyYAML==3.13
requests==2.22.0
requests-unixsocket==0.1.5
ruamel.yaml==0.15.34
SecretStorage==2.3.1
service-identity==16.0.0
simplejson==3.13.2
six==1.13.0
sortedcontainers==1.5.7
ssh-import-id==5.7
systemd-python==234
termcolor==1.1.0
texttable==1.6.2
tldr==0.5
tornado==4.5.3
traitlets==4.3.2
Twisted==17.9.0
ufw==0.36
unattended-upgrades==0.1
urllib3==1.25.7
urwid==2.0.1
watchdog==0.8.3
webencodings==0.5
websocket-client==0.56.0
Werkzeug==0.14.1
zipp==0.6.0
zope.interface==4.3.2
```","pip3 install pgcli --only-binary psycopg2 Not working
I am having the same problem on an Ubuntu 18.04.3
```
$ pip3 freeze
psycopg2-binary==2.8.4
```

During install
```
$ pip3 install pgcli --only-binary psycopg2
Collecting pgcli
  Using cached https://files.pythonhosted.org/packages/89/11/fba529b929db020fdafbfdc3d5ac33d2a30c8834e6a81cb4e104e82ee59f/pgcli-2.2.0-py3-none-any.whl
Collecting humanize>=0.5.1 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/8c/e0/e512e4ac6d091fc990bbe13f9e0378f34cf6eecd1c6c268c9e598dcf5bb9/humanize-0.5.1.tar.gz
Collecting click>=4.1 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/fa/37/45185cb5abbc30d7257104c434fe0b07e5a195a6847506c074527aa599ec/Click-7.0-py2.py3-none-any.whl
Collecting Pygments>=2.0 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/be/39/32da3184734730c0e4d3fa3b2b5872104668ad6dc1b5a73d8e477e5fe967/Pygments-2.5.2-py2.py3-none-any.whl
Collecting cli-helpers[styles]>=1.2.0 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/51/53/d94bb9cd98cd996da6eeea82a077293cd62b825d89a36d3c27714cae5e5b/cli_helpers-1.2.1-py3-none-any.whl
Collecting configobj>=5.0.6 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/64/61/079eb60459c44929e684fa7d9e2fdca403f67d64dd9dbac27296be2e0fab/configobj-5.0.6.tar.gz
Collecting sqlparse<0.4,>=0.3.0 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/ef/53/900f7d2a54557c6a37886585a91336520e5539e3ae2423ff1102daf4f3a7/sqlparse-0.3.0-py2.py3-none-any.whl
Collecting prompt-toolkit<3.0.0,>=2.0.6 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/87/61/2dfea88583d5454e3a64f9308a686071d58d59a55db638268a6413e1eb6d/prompt_toolkit-2.0.10-py3-none-any.whl
Collecting pgspecial>=1.11.8 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/4e/0c/47957ad5b5cfb488344032326a4a013127b005929422bc5e9ee98bdf18ec/pgspecial-1.11.9.tar.gz
Collecting setproctitle>=1.1.9 (from pgcli)
  Using cached https://files.pythonhosted.org/packages/5a/0d/dc0d2234aacba6cf1a729964383e3452c52096dc695581248b548786f2b3/setproctitle-1.1.10.tar.gz
Collecting psycopg2>=2.8 (from pgcli)
  Could not find a version that satisfies the requirement psycopg2>=2.8 (from pgcli) (from versions: 2.7, 2.7.1, 2.7.2, 2.7.3, 2.7.3.1, 2.7.3.2, 2.7.4, 2.7.5, 2.7.6, 2.7.6.1, 2.7.7)
No matching distribution found for psycopg2>=2.8 (from pgcli)
```
Interestingly, dropping back a version worked fine:

 `pip install pgcli==2.1.1 --only-binary psycopg2`",2019-12-05 12:19:44,
70,1130,"## Description
```
Server: PostgreSQL 12.1 (Debian 12.1-1)
Version: 2.2.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
kh24@127:kh24> \d tablename
column c.relhasoids does not exist
LINE 2: ...                 c.relhasrules, c.relhastriggers, c.relhasoi...
                                                             ^

Time: 0.007s
```

## Your environment
<!-- This gives us some more context to work with. -->
OS: Debian testing
pgcli version: 2.2.0
```
$ pip3 freeze
annexremote==1.3.1
asn1crypto==0.24.0
astroid==2.2.5
atomicwrites==1.3.0
attrs==19.3.0
backcall==0.1.0
beautifulsoup4==4.8.0
Brlapi==0.7.0
cachetools==3.1.1
certifi==2018.8.24
chardet==3.0.4
chrome-gnome-shell==0.0.0
cli-helpers==1.2.1
Click==7.0
configobj==5.0.6
cryptography==2.6.1
cupshelpers==1.0
cycler==0.10.0
datetime3==3.8.0
dbus-python==1.2.14
decorator==4.4.0
distro==1.3.0
distro-info==0.22
Django==2.2.5
dnspython==1.16.0
entrypoints==0.3
feedparser==5.2.1
flake8==3.7.8
future==0.17.1
git-annex-remote-googledrive==0.11.1
google-api-python-client==1.7.11
google-auth==1.6.3
google-auth-httplib2==0.0.3
gpg===1.13.1-unknown
html5lib==1.0.1
httplib2==0.11.3
humanize==0.5.1
idna==2.6
importlib-metadata==0.23
ipython==7.8.0
ipython-genutils==0.2.0
isort==4.3.21
jedi==0.14.0
json-rpc==1.12.1
keyring==18.0.1
keyrings.alt==3.1.1
kiwisolver==1.0.1
lazy-object-proxy==1.4.1
lesspass==8.0.1
libvirt-python==5.0.0
louis==3.11.0
lxml==4.4.1
Mako==1.0.7
Markdown==3.1.1
MarkupSafe==1.1.0
matplotlib==3.0.2
mccabe==0.6.1
more-itertools==7.2.0
musicbrainzngs==0.6
mutagen==1.40.0
nose==1.3.7
numpy==1.16.5
oauth2client==4.1.3
olefile==0.46
orgparse==0.1.2
packaging==19.2
parso==0.5.0
pexpect==4.6.0
pgcli==2.2.0
pgspecial==1.11.8
pickleshare==0.7.5
Pillow==6.2.0
pluggy==0.13.0
prompt-toolkit==2.0.9
psycopg2==2.8.4
py==1.8.0
pyasn1==0.4.7
pyasn1-modules==0.2.6
pycairo==1.16.2
pycodestyle==2.5.0
pycrypto==2.6.1
pycups==1.9.73
pycurl==7.43.0.2
PyDrive==1.3.1
pyflakes==2.1.1
Pygments==2.4.2
PyGObject==3.34.0
pylint==2.3.1
pyparsing==2.4.2
PyQt5==5.12.3
PySimpleSOAP==1.16.2
pysmbc==1.0.15.6
pytest==5.2.1
python-apt==1.8.4+b1
python-dateutil==2.7.3
python-debian==0.1.36
python-debianbts==2.8.2
pytz==2019.1
pyxattr==0.6.1
pyxdg==0.25
PyYAML==5.1.2
quodlibet==4.2.1
reportbug==7.5.3
reportlab==3.5.31
requests==2.21.0
rsa==4.0
scour==0.37
SecretStorage==2.3.1
service-factory==0.1.5
setproctitle==1.1.10
sip==4.19.19
six==1.13.0
soupsieve==1.9.4
sqlparse==0.3.0
tabulate==0.8.3
tenacity==5.1.1
terminaltables==3.1.0
traitlets==4.3.3
typed-ast==1.4.0
unattended-upgrades==0.1
uritemplate==3.0.0
urllib3==1.24.1
wcwidth==0.1.7
webencodings==0.5.1
wrapt==1.11.2
wxPython==4.0.7
youtube-dl==2019.8.2
zipp==0.6.0
```
","\d fails with ""column c.relhasoids does not exist"" in postgresql 12.1
Looks like a fix may exist, but it's not merged in pgspecial: https://github.com/dbcli/pgspecial/pull/83 
Also ran into this issue. 



Released the fix in pgspecial 1.11.9. https://github.com/dbcli/pgspecial/pull/91

`pip install -U pgspecial` should help.
I can confirm that upgrading to pgspecial 1.11.9 fixed the issue for me. Thank you!
Thanks, `\d`ing happily!",2019-12-05 08:04:16,2019-12-09 02:29:08
71,1129,"Closes #1128

","Fix simple typo: thows -> throws
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1129?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@69b2da9`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1129/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1129?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1129   +/-   ##
=========================================
  Coverage          ?   84.32%           
=========================================
  Files             ?       21           
  Lines             ?     2526           
  Branches          ?        0           
=========================================
  Hits              ?     2130           
  Misses            ?      396           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1129?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/utils.py](https://codecov.io/gh/dbcli/pgcli/pull/1129/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy91dGlscy5weQ==) | `97.67% <ø> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1129?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1129?src=pr&el=footer). Last update [69b2da9...8456dcb](https://codecov.io/gh/dbcli/pgcli/pull/1129?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-12-04 21:35:29,2019-12-09 03:17:15
72,1128,"There is a small typo in pgcli/packages/parseutils/utils.py.
Should read throws rather than thows.

",Fix simple typo: thows -> throws,2019-12-04 21:35:14,2019-12-09 03:17:15
73,1127,"There is a small typo in pgcli/packages/parseutils/utils.py.
Should read throws rather than thows.

",Fix simple typo: thows -> throws,2019-12-04 21:35:10,2019-12-04 21:35:47
74,1126,"## Description
<!--- Describe your changes in detail. -->

Prepare for a new release. Most importantly to fix https://github.com/dbcli/pgcli/issues/1121.
","J bennet/release 2.2.0
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=h1) Report
> Merging [#1126](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0f969aba0cbf9b1a93c679a442e74e13f00a1702?src=pr&el=desc) will **decrease** coverage by `0.11%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1126/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1126      +/-   ##
==========================================
- Coverage   84.48%   84.36%   -0.12%     
==========================================
  Files          21       21              
  Lines        2526     2526              
==========================================
- Hits         2134     2131       -3     
- Misses        392      395       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1126/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=footer). Last update [0f969ab...081bc4e](https://codecov.io/gh/dbcli/pgcli/pull/1126?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

OOC, why the restriction? I'm using PT 3 since a while, and didn't notice any defect...
@lelit nobody did extensive testing of pgcli with 3.0, and it has incompatible changes according to @jonathanslenders, so I wanted to be on the safe side. Did you run unit tests / behave tests with 3.0? Does everything pass?
No, sorry: I browsed its changelog and didn't spot alerting changes... so I upgraded it.
Didn't have surprises, using it. But if Jonathan said so, the restriction is surely due.",2019-12-03 18:09:18,2019-12-04 17:24:18
75,1125,"## Description

The [keybindings](https://www.pgcli.com/keybindings) page tells me I can change keybindings but it does not tell me how. I am missing a full list of possible keybindings to change as well as a description how to change these in the configuration file.

## Your environment
<!-- This gives us some more context to work with. -->


*Arch Linux kernel 5.3.13

*pgcli version 2.1.1

*Pip freeze:
```
appdirs==1.4.3
asn1crypto==1.2.0
attrs==19.3.0
bcrypt==3.1.7
CacheControl==0.12.5
cached-property==1.5.1
cffi==1.13.2
chardet==3.0.4
cli-helpers==1.2.1
Click==7.0
colorama==0.4.1
configobj==5.0.6
cryptography==2.8
distlib==0.3.0
distro==1.4.0
docker==4.1.0
docker-compose==1.25.0
docker-pycreds==0.4.0
dockerpty==0.4.1
docopt==0.6.2
feedparser==5.2.1
greenlet==0.4.15
html5lib==1.0.1
humanize==0.5.1
idna==2.8
importlib-metadata==0.23
jsonschema==3.2.0
lensfun==0.3.2
lockfile==0.12.2
louis==3.11.0
meson==0.52.0
more-itertools==7.2.0
msgpack==0.6.2
neovim==0.3.1
ordered-set==3.1.1
packaging==19.2
paramiko==2.6.0
pep517==0.6.0
pgcli==2.1.1
pgspecial==1.11.7
ply==3.11
progress==1.5
prompt-toolkit==2.0.10
psycopg2==2.8.4
pyalpm==0.9.0
pyasn1==0.4.8
pycairo==1.18.2
pycparser==2.19
Pygments==2.5.1
PyGObject==3.34.0
PyNaCl==1.3.0
pynvim==0.4.0
pyparsing==2.4.5
pyrsistent==0.15.6
python-dateutil==2.8.1
pytoml==0.1.21
PyYAML==5.1.2
regex==2019.8.19
requests==2.22.0
retrying==1.3.3
setproctitle==1.1.10
six==1.13.0
sqlparse==0.3.0
tabulate==0.8.5
terminaltables==3.1.0
texttable==1.6.2
urllib3==1.25.7
virtualenv==16.1.0
wcwidth==0.1.7
webencodings==0.5.1
websocket-client==0.56.0
youtube-dl==2019.11.22
zipp==0.6.0
```
","How to change keybindings
Hi @lsund - unfortunately there's currently no way to change the individual keybindings.

Instead, you can switch between either (default) emacs mode or vi mode, by pressing f4 when running pgcli, or by editing the config file and changing the `vi` setting to `True`.
Hi @owst, Okay, I was confused by
>  The keybindings can be changed via the config file (~/.config/pgcli/config) or toggled via F4 key.

But thanks for the clarification!",2019-11-28 12:00:22,2019-11-29 09:11:19
76,1124,"## Description
pgcli doesn't work after I updated my system. I might expect that it has something to do with the python upgrade from 3.7 -> 3.8

```
[~] pgcli -h 172.17.0.3 -u postgres
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 6, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/lib/python3.8/site-packages/pkg_resources/__init__.py"", line 3251, in <module>
    def _initialize_master_working_set():
  File ""/usr/lib/python3.8/site-packages/pkg_resources/__init__.py"", line 3234, in _call_aside
    f(*args, **kwargs)
  File ""/usr/lib/python3.8/site-packages/pkg_resources/__init__.py"", line 3263, in _initialize_master_working_set
    working_set = WorkingSet._build_master()
  File ""/usr/lib/python3.8/site-packages/pkg_resources/__init__.py"", line 583, in _build_master
    ws.require(__requires__)
  File ""/usr/lib/python3.8/site-packages/pkg_resources/__init__.py"", line 900, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/usr/lib/python3.8/site-packages/pkg_resources/__init__.py"", line 786, in resolve
    raise DistributionNotFound(req, requirers)
pkg_resources.DistributionNotFound: The 'pgcli==2.1.1' distribution was not found and is required by the application
```

## Your environment
<!-- This gives us some more context to work with. -->

- **OS** Manjaro 
- **CLI Versuib** 2.1.1-4
- https://termbin.com/n5w9

","DistributionNotFound
I've installed the `pgcli-git` from AUR which seems to be working.",2019-11-26 09:20:06,2019-11-27 08:41:45
77,1123,"## Description

To execute pgcli as python package, I've added a [`__main__.py`](https://docs.python.org/3/library/__main__.html) file.

## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [ ] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","add main file to allow python3 -m pgcli execution
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=h1) Report
> Merging [#1123](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0f969aba0cbf9b1a93c679a442e74e13f00a1702?src=pr&el=desc) will **decrease** coverage by `0.13%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1123/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1123      +/-   ##
==========================================
- Coverage   84.48%   84.34%   -0.14%     
==========================================
  Files          21       22       +1     
  Lines        2526     2529       +3     
==========================================
- Hits         2134     2133       -1     
- Misses        392      396       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/\_\_main\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/1123/diff?src=pr&el=tree#diff-cGdjbGkvX19tYWluX18ucHk=) | `0% <0%> (ø)` | |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1123/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.69% <0%> (-0.15%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=footer). Last update [0f969ab...62dba35](https://codecov.io/gh/dbcli/pgcli/pull/1123?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I've rebased this branch and fixed the changelog file.
Thank you! :tea: ",2019-11-25 21:47:49,2020-01-07 14:55:37
78,1122,"## Description

support for ansi escape sequences:

my config file:
```
prompt = '\x1b[37m[\h] \x1b[92;1m\u\x1b[36m@\x1b[34m\d\x1b[0m \# '
```

resulting pgcli prompt:

![2019-11-25-224203_1069x118_scrot](https://user-images.githubusercontent.com/673543/69580569-1d2a8d00-0fd5-11ea-8847-b89546a43016.png)



## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [ ] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","support ansi escape sequences for prompt colors
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=h1) Report
> Merging [#1122](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0f969aba0cbf9b1a93c679a442e74e13f00a1702?src=pr&el=desc) will **decrease** coverage by `0.02%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1122/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1122      +/-   ##
==========================================
- Coverage   84.48%   84.45%   -0.03%     
==========================================
  Files          21       21              
  Lines        2526     2528       +2     
==========================================
+ Hits         2134     2135       +1     
- Misses        392      393       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1122/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.76% <100%> (-0.08%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=footer). Last update [0f969ab...3660517](https://codecov.io/gh/dbcli/pgcli/pull/1122?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you! :rescue_worker_helmet: ",2019-11-25 21:45:11,2019-12-09 03:19:44
79,1121,"## Description
Latest pgcli from pip do have issues with latest postgresql:

During startup:

```
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in runs-mode     Refreshing completions...                                                                                                                                                
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/manager/.local/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/home/manager/.local/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 109, in refresh_tables
    completer.extend_columns(executor.table_columns(), kind=""tables"")
  File ""/home/manager/.local/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 218, in extend_columns
    for schema, relname, colname, datatype, has_default, default in column_data:
  File ""/home/manager/.local/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 591, in table_columns
    for row in self._columns(kinds=[""r""]):
  File ""/home/manager/.local/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 586, in _columns
    cur.execute(sql)
UndefinedColumn: column def.adsrc does not exist
LINE 7:                         def.adsrc as default
                                ^
```

\d failed:

```
> \d sample                                   
column c.relhasoids does not exist
LINE 2: ...                 c.relhasrules, c.relhastriggers, c.relhasoi...
                                                             ^
```

## Your environment
+ OS: Doesn't matter (Gentoo testing, Debian sid, etc)
+ Version: latest from pip 
```
pgcli --version
Version: 2.1.1
```
- Pg versions:
```
$ pip freeze | grep -i pg
pgcli==2.1.1
pgspecial==1.11.7
psycopg2==2.8.3
psycopg2-binary==2.8.4
```","pgcli + postgresql 12: colum def.adsrc not exists
I have the same problem. (Arch linux and version exactly the same except my psycopg2==2.8.4)
same here
Related to #1058
Same. Is this expected to be fixed soon? Postgres 12 has been out for some time now. Thanks!",2019-11-19 07:18:31,2019-12-04 17:24:18
80,1120,"## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Made Code easier to read and less complicated
I don't think that code is formatted correctly and I don't undestand how this PR makes the code readable. 

I'm happy to reopen if you provide more context. Thanks!",2019-10-31 20:53:59,2019-11-04 03:48:33
81,1119,"## Description
Get version of module for setup.py in simpler way - just import it.
Unless you are planning to release postfixed versions (like x.y.z-dev) often, there is IMO no need to use regular expressions and ast to determine version number.
In case this is intentional, regular expression alone should be sufficient solution.

## Checklist
- [ ] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","setup: Simplify getting module version
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1119?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@0f969ab`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1119/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1119?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1119   +/-   ##
=========================================
  Coverage          ?   84.36%           
=========================================
  Files             ?       21           
  Lines             ?     2526           
  Branches          ?        0           
=========================================
  Hits              ?     2131           
  Misses            ?      395           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1119?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1119?src=pr&el=footer). Last update [0f969ab...202ce85](https://codecov.io/gh/dbcli/pgcli/pull/1119?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I don't think this will work when pgcli is already installed in the virtualenv. I understand that the current code is complicated but it has served us well and I don't see a need to change it. 

I'm happy to reconsider if you have a reasonable counterpoint.
Could you point out case when will it break in virtualenv? I don't believe it will, but I could be mistaken.

I just tried it and `pip install . --upgrade` seems to work fine in virtualenv.
Not sure in case of `python setyp.py install` though, but combination of installing through `python setup.py` with virtualenv always lead to some interesting behaviour (at least for me), so I guess it is reasonable to expect use virtualenv & pip.

Nevertheless I see your point with ""don't change what works"". Also I am aware that this could break setup.py in few corner cases - if some in-package imports happens in `__init__.py` - however I didn't seen such code in commit history, so I guess this package is safe from that.",2019-10-29 20:41:31,2019-12-09 03:18:43
82,1118,"## Description
Fix logger strings formatting to use lazy string interpolation on few logger calls.

## Checklist

- [ ] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Logging cleanup
Hi @mmtj, 

Thank you for the changes. Looks like the CI build is failing because of black formatting. 

I see that you've tried to run the black formatting yourself, but it looks like it is producing different results? 

Can you tell me what version of black you're using to format things? 
Hi,
according to virtualenv, it is `19.10b0`.

```
$ pip freeze
black==19.10b0
```
Looks like the CI is also using the same black version. 

Relevant section from the CI build:

```
Successfully installed appdirs-1.4.3 black-19.10b0 pathspec-0.6.0 regex-2019.8.19 typed-ast-1.4.0
would reformat /home/travis/build/dbcli/pgcli/pgcli/magic.py
would reformat /home/travis/build/dbcli/pgcli/release.py
would reformat /home/travis/build/dbcli/pgcli/tests/features/db_utils.py
would reformat /home/travis/build/dbcli/pgcli/tests/features/fixture_utils.py
would reformat /home/travis/build/dbcli/pgcli/tests/features/environment.py
would reformat /home/travis/build/dbcli/pgcli/tests/features/wrappager.py
```

Can you try running black on your branch one more time? 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=h1) Report
> Merging [#1118](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f3dc23a94b57ccd7c1909dc32174b3bc8c501919?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `50%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1118/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1118   +/-   ##
=======================================
  Coverage   84.44%   84.44%           
=======================================
  Files          21       21           
  Lines        2526     2526           
=======================================
  Hits         2133     2133           
  Misses        393      393
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/magic.py](https://codecov.io/gh/dbcli/pgcli/pull/1118/diff?src=pr&el=tree#diff-cGdjbGkvbWFnaWMucHk=) | `0% <0%> (ø)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1118/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.69% <54.54%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=footer). Last update [f3dc23a...6b2e8df](https://codecov.io/gh/dbcli/pgcli/pull/1118?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:dango: 
",2019-10-29 02:03:36,2019-10-29 17:05:57
83,1117,"## Description
As I understand the issue is present for the queries with one-line comment ending with `;` or similar C-style comments
For example I want to type a query in multiline mode 
```
select -- this is my query;
2;
```
or
```
select /* this is my query; 
 */ 2;
```
and pgcli does not allow me to continue with the second line, instead it executes only the first line with error in case C-style comment
```
unterminated /* comment at or near ""/* this is my query""
LINE 1: select /* this is my query
               ^
```
## Your environment

- [x] Please provide your OS and version information.
Ubuntu 19.10
- [x] Please provide your CLI version.
v2.1.1
- [x] What is the output of ``pip freeze`` command.
```
arandr==0.1.9
asn1crypto==0.24.0
backports.functools-lru-cache==1.5
beautifulsoup4==4.7.1
bs4==0.0.1
certifi==2019.6.16
click==6.7
configparser==3.5.0b2
cryptography==2.3
entrypoints==0.3
enum34==1.1.6
fuzzyfinder==2.1.0
httplib2==0.13.0
idna==2.6
ipaddress==1.0.17
keyring==17.1.1
keyrings.alt==3.1.1
kube-shell==0.0.23
kubernetes==2.0.0
lxml==4.3.3
oauth2client==4.1.3
prompt-toolkit==1.0.16
pyasn1==0.4.5
pyasn1-modules==0.2.5
pycairo==1.16.2
pycrypto==2.6.1
Pygments==2.4.2
PyGObject==3.32.0
python-dateutil==2.8.0
pyxdg==0.25
PyYAML==5.1.1
rsa==4.0
SecretStorage==2.3.1
six==1.12.0
snxvpn==1.2
soupsieve==1.9
urllib3==1.25.3
wcwidth==0.1.7
websocket-client==0.56.0
```",Multiline does not work as expected for some comments,2019-10-24 16:34:48,
84,1116,"## Description
Add a behave test to verify error condition.
","Add a test to verify error message.
This is the test that I came up with for checking the regression introduced in the non-multiline mode. But the problem is I can't make this test fail using the old code. I am at a loss to try and come up with a reliable test to catch the regression.
Merging.",2019-10-24 04:01:42,2019-10-26 05:21:52
85,1115,"## Description 

Escape then enter intended as two separate key presses is a very common
sequence when using vi mode - returning to normal mode from insert mode
(escape) and then submitting the query (enter). The presence of the
escape-enter key binding overrides this behaviour by inserting
undesirable newlines (newline is be easily inserted when in insert mode
by pressing enter) or by introducing a noticable delay/lag before enter
can be pressed after escape, due to prompt toolkit not being able to
recognise escape immediately (since it may form part of an escape-enter
sequence).","Disable escape-enter keybinding in vi mode
I wonder if this is going to break compatibility for current users who use vi mode and rely on alt-enter to introduce line breaks. 

I guess we'll find out if this is an issue after the release. Merging!

:coffee: ",2019-10-23 22:13:39,2019-10-24 07:01:08
86,1114,"## Description
Fix the non-multi line case where the enter key was not recognized when the completion menu was open.
","Fix the condition for <enter> key.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=h1) Report
> Merging [#1114](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a713b5d08b0fae4e55066f5438522a173f79606b?src=pr&el=desc) will **increase** coverage by `0.15%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1114/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1114      +/-   ##
==========================================
+ Coverage   84.33%   84.48%   +0.15%     
==========================================
  Files          21       21              
  Lines        2509     2514       +5     
==========================================
+ Hits         2116     2124       +8     
+ Misses        393      390       -3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1114/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `44.44% <50%> (+1.04%)` | :arrow_up: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1114/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `66.66% <75%> (+1.96%)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1114/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.42% <0%> (+0.31%)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1114/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.68% <0%> (+0.33%)` | :arrow_up: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/1114/diff?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <0%> (+16.66%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=footer). Last update [a713b5d...e10ab12](https://codecov.io/gh/dbcli/pgcli/pull/1114?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-10-22 03:38:22,2019-10-23 21:11:45
87,1113,"## Description

Related to #1109 

Issue is in master branch. 

When I have the completion menu open it is not acknowledging the enter key. C-n and C-p to select items from the completion menu are also broken.","Non-multi line mode isn't working well
You fixed the enter issue (#1114) - thanks!

Just to record my findings for the other issue: it looks like the C-n/C-p issue is related to/caused by https://github.com/dbcli/pgcli/commit/19c3e0eeb81f4a231d0ebfd2c18c47215f85e572#diff-8c7ffac5f775dfaf49268b59aba8bd78R108  - if I comment those bindings, C-n/C-p selects items in the completion menu, but now longer selects history. I don't know what a ""selection"" is to prompt_toolkit, but perhaps the filters should be `~has_completions` instead (with 5s of testing it seems to work like that). I'll try and create a PR soon
`has_selection` is meant to return true when the user has selected an item from the menu.

This is to ensure if the user is trying to select an item from the completion menu then C-n and C-p has to move up and down the menu, but if they haven't selected any items from the completion menu then C-n and C-p should move up and down the history. 

The completion menu is almost always open, so having `~has_completions` as a condition will force the C-n and C-p to navigate the menu instead of history. 

I wonder if `has_selection` behavior has changed recently.",2019-10-20 17:46:42,
88,1112,"## Description
<!--- Describe your changes in detail. -->

Fix for #1110 PQconninfo not available in libpq < 9.3.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Fix for PQconninfo not available.
Why is this marked as WIP? 
@amjith I have no way to test it, I have newer postgresql and libpq, that's why it's WIP.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=h1) Report
> Merging [#1112](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a713b5d08b0fae4e55066f5438522a173f79606b?src=pr&el=desc) will **increase** coverage by `0.1%`.
> The diff coverage is `52.94%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1112/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #1112     +/-   ##
=========================================
+ Coverage   84.33%   84.44%   +0.1%     
=========================================
  Files          21       21             
  Lines        2509     2526     +17     
=========================================
+ Hits         2116     2133     +17     
  Misses        393      393
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.58% <52.94%> (-1.53%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.69% <0%> (+0.28%)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.68% <0%> (+0.33%)` | :arrow_up: |
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `44.44% <0%> (+1.04%)` | :arrow_up: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `66.66% <0%> (+1.96%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.66% <0%> (+4%)` | :arrow_up: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/1112/diff?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <0%> (+16.66%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=footer). Last update [a713b5d...d758781](https://codecov.io/gh/dbcli/pgcli/pull/1112?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I was able to reproduce the issue using a docker image.

I have made a small change to the PR to check for libpq version instead of psycopg2 version. 

@j-bennet If you're happy with the changes I've made, please feel free to merge it. 
@amjith I think that we'd still need to check psycopg2 version, not libpq version, to make sure `conn.info.dsn_parameters` is present, because that object is provided by psycopg2. What do you think?
You might be right. We will have to check both versions. When I tried your PR yesterday, pgcli won't even start even though psycopg2 version was the latest by libpq version was 9.1. 

I'll update the PR to check for both. 
Actually we have psycopg2 version requirement in setup.py, so I don't think we need to do the psycopg2 version check during runtime. Thoughts?
> Actually we have psycopg2 version requirement in setup.py, so I don't think we need to do the psycopg2 version check during runtime.

Ha. Ok, that will do it. Except that we currently require 2.7.4 and up:

https://github.com/dbcli/pgcli/blob/199a0223e044ec3116879e67d2b924050e4afa78/setup.py#L20

so we should probably change it to 2.8 and up. Otherwise we'll have an exception with versions in between 2.7.4 and 2.8 (pypi has 2.7.5, 2.7.6, 2.7.6.1, 2.7.7).
:+1: ",2019-10-19 18:38:39,2019-10-28 17:09:00
89,1111,"## Description
Is there any way to change config values from pgcli with autocompletion and validation intime? Otherwise it would be great to have such possibility .
There are a number of disadvantages of editing it with something else than pgcli
1. no checking for misprints or errors
2. no autocompletion and validation for new parameter value
3. need to reload and reconnect after each change


## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
Ubuntu 19.04
- [x] Please provide your CLI version.
v2.1.1
- [x] What is the output of ``pip freeze`` command.
```
arandr==0.1.9
asn1crypto==0.24.0
backports.functools-lru-cache==1.5
beautifulsoup4==4.7.1
bs4==0.0.1
certifi==2019.6.16
click==6.7
configparser==3.5.0b2
cryptography==2.3
entrypoints==0.3
enum34==1.1.6
fuzzyfinder==2.1.0
httplib2==0.13.0
idna==2.6
ipaddress==1.0.17
keyring==17.1.1
keyrings.alt==3.1.1
kube-shell==0.0.23
kubernetes==2.0.0
lxml==4.3.3
oauth2client==4.1.3
prompt-toolkit==1.0.16
pyasn1==0.4.5
pyasn1-modules==0.2.5
pycairo==1.16.2
pycrypto==2.6.1
Pygments==2.4.2
PyGObject==3.32.0
python-dateutil==2.8.0
pyxdg==0.25
PyYAML==5.1.1
rsa==4.0
SecretStorage==2.3.1
six==1.12.0
snxvpn==1.2
soupsieve==1.9
urllib3==1.25.3
wcwidth==0.1.7
websocket-client==0.56.0
```",How could I change set config values from pgcli?,2019-10-17 21:58:00,
90,1110,"## Description
On running pgcli the above error message is given.
Various people are getting the same error:
https://github.com/psycopg/psycopg2/issues/976
The maintainers suggest that pgcli needs a better work-around

Tried to find & update libpq but I'm not having much success with that - my bad.

## Your environment

- [ Latest AWS Amazon Linux 2 AMI with yum update applied ] Please provide your OS and version information.
- [ Version: 2.1.1 ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.
amazon-linux-extras==1.6.9
aws-cfn-bootstrap==1.4
awscli==1.16.102
Babel==0.9.6
backports.csv==1.0.7
backports.ssl-match-hostname==3.5.0.1
botocore==1.12.92
cffi==1.6.0
chardet==2.2.1
cli-helpers==1.2.1
Click==7.0
cloud-init==18.2
colorama==0.3.2
configobj==5.0.6
cryptography==1.7.2
docutils==0.12
ec2-hibinit-agent==1.0.0
enum34==1.0.4
futures==3.0.5
hibagent==1.1.0
humanize==0.5.1
idna==2.4
iniparse==0.4
ipaddress==1.0.16
Jinja2==2.7.2
jmespath==0.9.3
jsonpatch==1.2
jsonpointer==1.9
jsonschema==2.5.1
jwcrypto==0.4.2
kitchen==1.1.1
langtable==0.0.31
lockfile==0.9.1
MarkupSafe==0.11
oauthlib==2.0.1
pgcli==2.1.1
pgspecial==1.11.7
Pillow==2.0.0
ply==3.4
prompt-toolkit==2.0.10
psycopg2==2.8.3
pyasn1==0.1.9
pycparser==2.14
pycurl==7.19.0
Pygments==2.4.2
pygpgme==0.3
pyliblzma==0.5.3
pystache==0.5.3
python-daemon==1.6
python-dateutil==2.6.0
pyxattr==0.5.1
PyYAML==3.10
repoze.lru==0.4
requests==2.6.0
rsa==3.4.1
s3transfer==0.1.12
setproctitle==1.1.10
simplejson==3.2.0
six==1.9.0
sqlparse==0.3.0
tabulate==0.8.5
terminaltables==3.1.0
urlgrabber==3.10
urllib3==1.24.3
wcwidth==0.1.7
yum-langpacks==0.4.2
yum-metadata-parser==1.1.4

","PQconninfo not available in libpq < 9.3
@Ian-T-Price I have a possible fix in branch. Can you try installing pgcli from branch as follows:

`pip install git+https://github.com/dbcli/pgcli.git@j-bennet/pqconninfo-1110`

and see if that resolves the problem?
Fixed in 2.2.0.",2019-10-17 08:35:09,2019-12-04 17:37:04
91,1109,"## Description

Use a (conditional) Enter key-binding to force-handle a multi-line
buffer, rather than doing so by (conditionally) disabling the multiline
mode of prompt_toolkit.

This has the benefit of being more efficient (the multiline Condition
filter is called very often, which (due to the repeated query parsing)
causes editing to become slow with a large buffer that ends in a
semicolon), clearer in intent (we want to force-handle the query, rather
than (temporarily) disable multiline mode which indirectly forces the
buffer to be handled) and avoids a bug in multi-line history search
(issue #1031)

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [ ] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Handle a multi-line query on Enter key-press (fixes #1031)
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=h1) Report
> Merging [#1109](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d5cdd2ad4ea5c70dae766f2e00a71510e9c76b58?src=pr&el=desc) will **decrease** coverage by `0.13%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1109/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1109      +/-   ##
==========================================
- Coverage   84.64%   84.51%   -0.14%     
==========================================
  Files          21       21              
  Lines        2507     2505       -2     
==========================================
- Hits         2122     2117       -5     
- Misses        385      388       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1109/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.41% <100%> (-0.18%)` | :arrow_down: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1109/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `73.33% <62.5%> (+4.91%)` | :arrow_up: |
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1109/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `41.5% <66.66%> (+1.5%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1109/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=footer). Last update [d5cdd2a...629a931](https://codecov.io/gh/dbcli/pgcli/pull/1109?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I tried the master branch to try and replicate #1031. I couldn't replicate the stack trace crash. I do see that only the matching line is shown in a multi-line query. With that said, the new PR also doesn't show the full multi-line query when I search the history. 


Thanks for trying @amjith! I'm surprised at your results though. For me, on master (`d5cdd2ad4ea5c70dae766f2e00a71510e9c76b58`) I _can_ replicate the stack trace and ""one-line"" search result, but with this branch (`7f44748149be47cc42261ff73465a82eb7174eca`) I _can't_ replicate the stack trace and I _do_ see the full multiline search result.

To avoid any config or history differences, I'm using:
```
$ cat config
[main]
multi_line = True
history_file=./history.txt
```
as a minimal config file and
```
$ cat history.txt
# 2019-04-06 00:00:00.000000
+SELECT a
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY a

# 2019-04-06 00:00:01.000000
+SELECT 1

# 2019-04-06 00:00:02.000000
+SELECT a
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY a DESC

# 2019-04-06 00:00:03.000000
+SELECT 2

# 2019-04-06 00:00:04.000000
+SELECT b
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY b

# 2019-04-06 00:00:05.000000
+SELECT 3

# 2019-04-06 00:00:06.000000
+SELECT b
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY b DESC
``` 
as the history file. Then on master:
```
$ git rev-parse HEAD
d5cdd2ad4ea5c70dae766f2e00a71510e9c76b58
$ pgcli --pgclirc config
```
Typing `C-r ORDER` shows:
```
(reverse-i-search)`ORDER': ORDER BY b DESC
```
then `C-r`:
```
ORDER
```
and finally `C-c`:
```

Unhandled exception in event loop:
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/eventloop/posix.py"", line 155, in _run_task
    t()
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/eventloop/context.py"", line 116, in new_func
    return func(*a, **kw)
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/application/application.py"", line 589, in read_from_input
    self.key_processor.process_keys()
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/key_binding/key_processor.py"", line 275, in process_keys
    self._process_coroutine.send(key_press)
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/key_binding/key_processor.py"", line 182, in _process
    self._call_handler(matches[-1], key_sequence=buffer[:])
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/key_binding/key_processor.py"", line 325, in _call_handler
    handler.call(event)
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/key_binding/key_bindings.py"", line 79, in call
    return self.handler(event)
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/key_binding/bindings/search.py"", line 34, in abort_search
    search.stop_search()
  File ""/Users/owenstephens/code/pgcli/pgcli-dev/lib/python3.7/site-packages/prompt_toolkit/search.py"", line 130, in stop_search
    del layout.search_links[search_buffer_control]

Exception <SearchBufferControl buffer=<Buffer(name='SEARCH_BUFFER', text='ORDER') at 4432952016> at 4433012240>
```
```
postgres@localhost:postgres> SELECT b
 FROM (VALUES (1, 1), (1, 2)) v(a, b)
 ORDER BY b DESC
```

But on this branch: 
```
$ git rev-parse HEAD
7f44748149be47cc42261ff73465a82eb7174eca
$ pgcli --pgclirc config
```
applying the same keypresses shows, `C-r ORDER`:
```
postgres@localhost:postgres> SELECT b
 FROM (VALUES (1, 1), (1, 2)) v(a, b)
 ORDER BY b DESC

I-search backward: ORDER
``` 
(n.b. the search term is shown in the footer of the window)
then `C-r`:
```
postgres@localhost:postgres> SELECT b
 FROM (VALUES (1, 1), (1, 2)) v(a, b)
 ORDER BY b

I-search backward: ORDER
```
and on Ctrl-c:
```
postgres@localhost:postgres> SELECT b
 FROM (VALUES (1, 1), (1, 2)) v(a, b)
 ORDER BY b DESC
```
Having thought and played around with this branch more, there is a bug when the currently-displayed history entry contains a `;`-terminated query - on Enter, we were trying to submit the query, rather than ""choose"" the history entry. Instead, we should not treat Enter specially, if we're searching. (To demonstrate the issue, add `;` to the end of each `ORDER BY` line in the previous history file, use `C-r ORDER` and hit enter)

Also, I think it makes sense to always use multi-line (i.e. ignoring the user setting) when searching history, otherwise if we have any multi-line history entries, they are displayed incorrectly if the _current_ setting is _not_ multi-line

I'll push a fixup that makes these two changes.
I've pushed a fixup for the former change, but the latter was trickier than I was expecting - so I'll have to take more of a look into it.
I wonder if this is due to a difference in prompt-toolkit version. I still can't reproduce it with your config and history. 

Relevant output from pip freeze:

## master branch
```
-e git+git@github.com:dbcli/pgcli.git@d5cdd2ad4ea5c70dae766f2e00a71510e9c76b58#egg=pgcli
pgspecial==1.11.7
prompt-toolkit==2.0.10
psycopg2==2.8.3
```

## Your branch 

```
-e git+git@github.com:dbcli/pgcli.git@6763433a687cc651d9ce5c97eeb81d83c4d34f71#egg=pgcli
pgspecial==1.11.7
prompt-toolkit==2.0.10
psycopg2==2.8.3
```

What I see is that master and your branch have same behavior which is, the search doesn't show me the entire multi-line query and pressing C-c doesn't give me a stack trace.
@amjith thanks for looking again. I think that my suggestion to add `;` to the end of each line in the history actually prevents the stack trace on master - if I add `;` to each history query, I see one-line history search, but do not get a stack trace with `C-r ORDER, C-r, C-c`. If I remove all the `;`s I reliably get a stack trace with the same command sequence.

I can't explain you not seeing multi-line history search on my branch. That is confusing.

However, I think I have an alternative approach that is simpler: always use `multiline` as far as `prompt_toolkit` is concerned, but have pgcli's `multi_line` mode effectively just control the ""auto submit"" of a single line (i.e. Enter means submit always if pgcli is _not_ using `multi_line`, and conditionally, as now, if pgcli _is_ using `multi_line`). This means that history search always correctly displays a multiline search (even if the `multi_line` mode has been switched to off), and I _think_ preserves all other behaviour other than slight changes in the prompt/buffer display.

What do you think? I'll push a change to that effect that we can try.
> always use multiline as far as prompt_toolkit is concerned, but have pgcli's multi_line mode effectively just control the ""auto submit"" of a single line

I like that suggestion. I see that you've made that change. I'll give it a spin and see how it behaves. 
Yup. That works beautifully. I'm not sure why the travis tests are failing. I'll take a look. 
I'm thoroughly confused. Things are passing locally but it is failing consistently on Travis. :disappointed: 

I'm going to chalk that up as Travis weirdness and merge this. 

Maybe @j-bennet can look into the failing behave tests when she gets a chance.",2019-10-13 00:08:54,2019-10-17 03:54:29
92,1108,"## Description

On master (`d5cdd2ad4ea5c70dae766f2e00a71510e9c76b58`) escape/alt-enter no longer run a multi-line query when in safe mode, but instead inserts a new line. This seems to have originated in https://github.com/dbcli/pgcli/pull/1065 - as @jonathanslenders suggests there, the change overrides the prompt_toolkit behaviour of accepting input when in multi-line mode, which breaks the safe mode of `multi_line_mode` introduced in https://github.com/dbcli/pgcli/pull/577 (as there is no way to accept the input and run the query)
",escape/alt-enter no longer runs multi-line query in safe mode,2019-10-12 22:49:30,
93,1107,"## Description

Fixes #1048 so that autocompletion of function arguments takes account of table aliases. 

Now, when given 
```
CREATE TABLE test_table(foo text, bar text);
CREATE TABLE other_test_table(baz integer);
```

When the cursor is at `^` in:
```
SELECT length(tt. FROM test_table tt, other_test_table ott
                ^
```
the autocomplete options are given as
```
bar column
foo column
```
as expected.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","Take account of table aliases when completing function args (#1048)
Very nice fix. Thank you!

:taco: ",2019-10-12 15:27:27,2019-10-17 03:57:19
94,1106,"## Description
When having `on_error = RESUME` in my `~/.config/pgcli/config`, executing an sql file that contains multiple queries will still halt on the first error.

For example:
`test.sql`
```sql
SELECT 'makes an error' as '';

SELECT * FROM A;
```

outputs:
```
\i test.sql; SELECT col as ""thisisfromb"" FROM B;
syntax error at or near ""''""
LINE 1: SELECT 'makes an error' as ''
                                   ^

+---------------+
| thisisfromb   |
|---------------|
+---------------+
SELECT 0
Time: 0.010s
```

Here the first first statement in test.sql creates an error, the second statement inside test.sql is ignored.  
Statements after the file are still taken, but I need it to RESUME on statements inside the file too.  
Is there a way to make pgcli resume on error for errors inside a script too? 

## My environment
<!-- This gives us some more context to work with. -->
### OS and version information.
- Ubuntu 18.04.3 LTS  
- Gnome 3.28.2
- I use bash in Gnome Terminal

I installed pgcli first through `pip install`, but as the command was not available I then use `sudo apt install pgcli` which worked

### CLI version.
```
$ pgcli -v
Version: 1.6.0
```
### Output of ``pip freeze`` command.
```
$ pip freeze
asn1crypto==0.24.0
backports.csv==1.0.7
beautifulsoup4==4.6.0
chardet==3.0.4
cli-helpers==1.2.1
Click==7.0
configobj==5.0.6
cryptography==2.1.4
dnspython==1.15.0
enum34==1.1.6
gyp==0.1
html5lib==0.999999999
humanize==0.5.1
idna==2.6
ipaddress==1.0.17
keyring==10.6.0
keyrings.alt==3.0
lxml==4.2.1
mutagen==1.38
numpy==1.13.3
pdfshuffler==0.6.0
pgcli==2.1.1
pgsanity==0.2.9
pgspecial==1.11.7
prompt-toolkit==2.0.10
psutil==5.6.3
psycopg2==2.8.3
pycairo==1.16.2
pycrypto==2.6.1
pyflakes==1.6.0
Pygments==2.4.2
pygobject==3.26.1
PyPDF2==1.26.0
python-libdiscid==1.0
pyxdg==0.25
PyYAML==3.12
scour==0.36
SecretStorage==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.3.0
tabulate==0.8.5
terminaltables==3.1.0
unity-launcher-folders==14.9.4
unity-lens-photos==1.0
wcwidth==0.1.7
webencodings==0.5
```",on_error = RESUME stops on error inside executed file,2019-10-11 14:05:50,
95,1105,"## Description
I cannot describe a table using `\d` if it is not in the `public` schema.
E.g.
```psql
> \d myschema.my_table
Did not find any relation named myschema.my_table
```
Doing `select * from myschema.my_table` works, so I am not mistyping it!

Both of the following work for tables in the public schema:
```psql
\d my_other_table
\d public.my_other_table
```

Describing tables in other schemas used to work back in version 0.20.1.


## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
```sh
$ cat /etc/os-release
NAME=""Linux Mint""
VERSION=""18.2 (Sonya)""
ID=linuxmint
ID_LIKE=ubuntu
PRETTY_NAME=""Linux Mint 18.2""
VERSION_ID=""18.2""
HOME_URL=""http://www.linuxmint.com/""
SUPPORT_URL=""http://forums.linuxmint.com/""
BUG_REPORT_URL=""http://bugs.launchpad.net/linuxmint/""
VERSION_CODENAME=sonya
UBUNTU_CODENAME=xenial
```
```sql
select version()
PostgreSQL 9.6.9 on x86_64-pc-linux-gnu (Ubuntu 9.6.9-2.pgdg16.04+1), compiled by gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609, 64-bit
```
- [x] Please provide your CLI version.
```sh
$ pgcli --version
Version: 2.1.1
```
- [x] What is the output of ``pip freeze`` command.
```sh
$ pip freeze
cli-helpers==1.2.1
Click==7.0
configobj==5.0.6
humanize==0.5.1
pgcli==2.1.1
pgspecial==1.11.7
prompt-toolkit==2.0.10
psycopg2==2.8.3
Pygments==2.4.2
setproctitle==1.1.10
six==1.12.0
sqlparse==0.3.0
tabulate==0.8.5
terminaltables==3.1.0
wcwidth==0.1.7
```","Cannot describe a table using `\d` if it is not in the `public` schema
I am having the same issue. I have nothing else to add to the report above, but if you need to work around it you need to explicitly set the `search_path` to the schema you want to describe. Not great, but something.

```sql
set search_path to myschema;
```
this issue was fixed with https://github.com/dbcli/pgspecial/blob/master/changelog.rst#1118
Fixed via https://github.com/dbcli/pgspecial/pull/89. You should be good if you update pgspecial (`pip install -U pgspecial`).
Works - thanks!",2019-10-09 19:09:05,2020-03-02 17:32:29
96,1104,"I'm running into a test suite failure while building pgcli-2.1.1:

~~~
_________________________ test_application_name_db_uri _________________________

tmpdir = local('/build/pytest-of-nixbld/pytest-0/test_application_name_db_uri0')

    def test_application_name_db_uri(tmpdir):
        with mock.patch.object(PGExecute, ""__init__"") as mock_pgexecute:
            mock_pgexecute.return_value = None
            cli = PGCli(pgclirc_file=str(tmpdir.join(""rcfile"")))
            cli.connect_uri(""postgres://bar@baz.com/?application_name=cow"")
        mock_pgexecute.assert_called_with(
>           ""bar"", ""bar"", """", ""baz.com"", """", """", application_name=""cow""
        )

tests/test_main.py:336:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/nix/store/ay1sjj4k8dyp5kxqmlkn4gifx7zly6gx-python3.7-mock-2.0.0/lib/python3.7/site-packages/mock/mock.py:937: in assert_called_with
    six.raise_from(AssertionError(_error_message(cause)), cause)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = None, from_value = None

>   ???
E   AssertionError: Expected call: __init__('bar', 'bar', '', 'baz.com', '', '', application_name='cow')
E   Actual call: __init__('bar', 'bar', None, 'baz.com', '', '', application_name='cow')

<string>:3: AssertionError
------------------------------ Captured log call -------------------------------
~~~

The build environment looks like this:

~~~
Requirement already satisfied: pgspecial>=1.11.5 in /nix/store/hbjwfp5gpb8ajdp6mdxn7pmrim5nb6pg-python3.7-pgspecial-1.11.7/lib/python3.7/site-packages (from pgcli==2.1.1) (1.11.7)
Requirement already satisfied: humanize>=0.5.1 in /nix/store/r4qlchl4snk184pa8dz9zdhcajdy6aq7-python3.7-humanize-0.5.1/lib/python3.7/site-packages (from pgcli==2.1.1) (0.5.1)
Requirement already satisfied: configobj>=5.0.6 in /nix/store/j85bgcwp8kgbn7pjz9h5iycvslq42djj-python3.7-configobj-5.0.6/lib/python3.7/site-packages (from pgcli==2.1.1) (5.0.6)
Requirement already satisfied: setproctitle>=1.1.9 in /nix/store/p32fwxq9kb19jhpyc72ymd40m87ks1hp-python3.7-setproctitle-1.1.10/lib/python3.7/site-packages (from pgcli==2.1.1) (1.1.10)
Requirement already satisfied: psycopg2>=2.7.4 in /nix/store/srgzapws9p2js62nxb1dx7pb7xl4950x-python3.7-psycopg2-2.8.3/lib/python3.7/site-packages (from pgcli==2.1.1) (2.8.3)
Requirement already satisfied: Pygments>=2.0 in /nix/store/v7n8sbpknx2s8yxl3a2dxjzpw15px03q-python3.7-Pygments-2.4.2/lib/python3.7/site-packages (from pgcli==2.1.1) (2.4.2)
Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.6 in /nix/store/s0a1g6gvnrdmf99q0903bmb0l6rq8j64-python3.7-prompt_toolkit-2.0.9/lib/python3.7/site-packages (from pgcli==2.1.1) (2.0.9)
Requirement already satisfied: cli-helpers[styles]>=1.2.0 in /nix/store/31gqi05ljs0k9f2dkq6y7vdrwh7gvr1g-python3.7-cli_helpers-1.2.1/lib/python3.7/site-packages (from pgcli==2.1.1) (1.2.1)
Requirement already satisfied: sqlparse<0.4,>=0.3.0 in /nix/store/2yimphyzx11s41i4ppnk4b0i0mc99994-python3.7-sqlparse-0.3.0/lib/python3.7/site-packages (from pgcli==2.1.1) (0.3.0)
Requirement already satisfied: click>=4.1 in /nix/store/qzf3y7wmq8zd8a7ra1nyjgjylsyna299-python3.7-click-7.0/lib/python3.7/site-packages (from pgcli==2.1.1) (7.0)
Requirement already satisfied: six in /nix/store/yigzy18vhhmqqbpyxzb03crgn1xxaazr-python3.7-six-1.12.0/lib/python3.7/site-packages (from configobj>=5.0.6->pgcli==2.1.1) (1.12.0)
Requirement already satisfied: wcwidth in /nix/store/x7q8k6xzylmd02fhswfdikpzgn8i58fr-python3.7-wcwidth-0.1.7/lib/python3.7/site-packages (from prompt-toolkit<2.1.0,>=2.0.6->pgcli==2.1.1) (0.1.7)
Requirement already satisfied: tabulate[widechars]>=0.8.2 in /nix/store/8h0lj15kwnaw0sk0rdm0r8fjmxg1rafz-python3.7-tabulate-0.8.3/lib/python3.7/site-packages (from cli-helpers[styles]>=1.2.0->pgcli==2.1.1) (0.8.3)
Requirement already satisfied: terminaltables>=3.0.0 in /nix/store/xmd6c7rlb1izir2akna6j46xblgj6qp8-python3.7-terminaltables-3.1.0/lib/python3.7/site-packages (from cli-helpers[styles]>=1.2.0->pgcli==2.1.1) (3.1.0)
~~~

Is this a known problem?","Test suite failure
Hi @peti 

No, it looks odd to me. But I checked in my environment and it passed. It's not a problem if the CI passed but failed in your environment.

```
➜ pgcli pgcli git:(master) pytest tests/test_main.py::test_application_name_db_uri
====================================================== test session starts =======================================================
platform darwin -- Python 3.6.10, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /Users/laixintao/Program/pgcli/tests, inifile: pytest.ini
collected 1 item

tests/test_main.py .                                                                                                       [100%]

======================================================= 1 passed in 0.06s ========================================================
➜ pgcli pgcli git:(master) git rev-parse head
bc7a5d01001df69f9f0c3dfeb94cca92768ab696
➜ pgcli pgcli git:(master) pip freeze
appdirs==1.4.3
attrs==19.3.0
autopep8==1.3.3
behave==1.2.6
black==19.10b0
certifi==2019.11.28
cfgv==3.1.0
chardet==3.0.4
cli-helpers==1.2.1
click==6.7
codecov==2.0.16
configobj==5.0.6
coverage==4.3.4
distlib==0.3.0
docutils==0.16
filelock==3.0.12
humanize==2.0.0
identify==1.4.11
idna==2.9
importlib-metadata==1.5.0
importlib-resources==1.3.1
mock==4.0.1
more-itertools==8.2.0
nodeenv==1.3.5
packaging==20.3
parse==1.15.0
parse-type==0.5.2
pathspec==0.7.0
pexpect==3.3
-e git+https://github.com/dbcli/pgcli.git@bc7a5d01001df69f9f0c3dfeb94cca92768ab696#egg=pgcli
pgspecial==1.11.9
pkginfo==1.5.0.1
pluggy==0.13.1
pre-commit==2.1.1
prompt-toolkit==2.0.10
psycopg2==2.8.4
py==1.8.1
pycodestyle==2.5.0
Pygments==2.6.1
pyparsing==2.4.6
pytest==5.3.5
PyYAML==5.3
regex==2020.2.20
requests==2.23.0
requests-toolbelt==0.9.1
setproctitle==1.1.10
six==1.14.0
sqlparse==0.3.1
tabulate==0.8.6
terminaltables==3.1.0
toml==0.10.0
tox==3.14.5
tqdm==4.43.0
twine==1.11.0
typed-ast==1.4.1
urllib3==1.25.8
virtualenv==20.0.10
wcwidth==0.1.8
zipp==3.1.0
```

Can you try the latest pgcli? Going to close for now, feel free to reopen if it still fails.",2019-10-04 09:32:21,2020-03-12 15:31:58
97,1103,"## Description
`\ns` with multiline and Vim input mode saves the query when pressing Enter in Insert mode, when it should insert a newline instead

Usually when using multiline Vim input mode (in Insert mode signified by `(I)` in the footer) pressing the Enter key inserts a newline (when in Normal mode - `(N)`, Enter will submit/run the query).

For example (in Vim multiline mode):
```
\sn whatever SELECT 1 <ENTER>
```
will save the query immediately - however, a multiline query _can_ be saved by inserting a newline with the `o` command (begin new line below cursor) in Normal mode:
```
\sn whatever SELECT 1<ESC-o>
UNION <ESC-o>
SELECT 2
```

However this is a bit clunky and unintuitive.

## Your environment
- [x] Please provide your OS and version information.
Ubuntu Xenial x86_64
- [x] Please provide your CLI version.
`Version: 2.1.1`
- [x] What is the output of ``pip freeze`` command.
```
backports.csv==1.0.7
cli-helpers==1.2.1
Click==7.0
configobj==5.0.6
humanize==0.5.1
pgcli==2.1.1
pgspecial==1.11.7
prompt-toolkit==2.0.9
psycopg2==2.8.3
Pygments==2.4.2
setproctitle==1.1.10
six==1.12.0
sqlparse==0.3.0
tabulate==0.8.5
terminaltables==3.1.0
wcwidth==0.1.7
```
",`\ns` saving query on enter in multiline Vim mode rather than inserting a newline,2019-10-01 08:58:20,
98,1102,"## Description
<!--- Describe your problem as fully as you can. -->

When I played with pgcli I had a opinion so formatting result is slow. Is possible to disable formatting in Python? `pspg` can read csv files now, and can format to tabular output.


## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.
- [ ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.
","possible enhancing - using pspg for formatting
You can edit your config file (~/.config/pgcli/config) and set the `table_format = csv` and then uncomment the pager line and set `pager = /path/to/pspg`. 

Give that a shot and let us know if that works. 
Yes, it is working almost well. There are small issues, because pgcli doesn't produce 100% correct CSV. But it significantly faster. Original pg_cli formatting of full pg_proc table (about 3000) rows requires about 12 sec. Formatting to CSV format needs about 2 sec, and displaying by pspg is immediate. So it is 6x faster then default and 2sec are almost acceptable.

There are two issues:
* CSV output is corrupted by information about produced rows like `SELECT 2979`. This line should not be there - it is processing information, not data. 
* CSV is not valid if some values contains new line chars.
<pre>
postgres=# create table foo(a int, b text);
CREATE TABLE
postgres=# insert into foo values(10, e'AHOJ\nNAZDAR\nBAZAR');
INSERT 0 1
postgres=# insert into foo values(20, e'SERVUS');
INSERT 0 1
postgres=# select * from foo;
┌────┬────────┐
│ a  │   b    │
╞════╪════════╡
│ 10 │ AHOJ  ↵│
│    │ NAZDAR↵│
│    │ BAZAR  │
│ 20 │ SERVUS │
└────┴────────┘
(2 rows)
</pre>
CSV produced by pg_cli:
<pre>
a,b
10,AHOJ
NAZDAR
BAZAR
20,SERVUS
SELECT 2
</pre>
But should looks like
<pre>
a,b
10,""AHOJ
NAZDAR
BAZAR""
20,SERVUS
</pre>

I tried it yesterday, and I can confirm the considerable speedup. 

In addition to the issues mentioned by @okbob, it would be nice if we could have a configuration option to either _""use csv only when spawning the external pager""_ or _""always use the external pager""_, even when the number of rows is below the current threshold (or did I miss the configurability of such threshold?).
I'll try it out and see if I can adjust the output. We use a separate library for tabulating which provides the CSV format. But it is possible to override that. I'll see what I can do. 

Thanks for trying it and reporting back. 
@okbob I see that you're the author of pspg (it looks gorgeous on the screenshots). I can't compile the latest version of pspg. Ubutu repositories have an old version that doesn't support CSV formatting. 

This is the error I get when I run `./configure && make`

```
↪ ./configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables...
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking whether termios.h defines TIOCGWINSZ... no
checking whether sys/ioctl.h defines TIOCGWINSZ... yes
checking for gcc... (cached) gcc
checking whether we are using the GNU C compiler... (cached) yes
checking whether gcc accepts -g... (cached) yes
checking for gcc option to accept ISO C89... (cached) none needed
checking for pkg-config... /usr/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking for ncursesw via pkg-config... yes
checking for working ncursesw/curses.h... yes
checking for working ncursesw.h... no
checking for working ncurses.h... yes
checking for Curses Panel library with ncursesw/panel.h... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for a readline compatible library... no
checking for roundl in -lm... yes
checking for library containing clock_gettime... none required
configure: creating ./config.status
config.status: creating config.make
[~/D/pspg] (master|✔)
↪ make
gcc -O3 -c  src/pretty-csv.c -o csv.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
gcc -O3 -c  src/print.c -o print.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
gcc -O3 -c src/commands.c -o commands.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
gcc -O3 -c src/unicode.c -o unicode.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
gcc -O3 -c src/themes.c -o themes.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
gcc -O3 -c src/pspg.c -o pspg.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
src/pspg.c: In function ‘SigintHandler’:
src/pspg.c:147:2: error: ‘handle_sigint’ undeclared (first use in this function); did you mean ‘got_sigint’?
  handle_sigint = true;
  ^~~~~~~~~~~~~
  got_sigint
src/pspg.c:147:2: note: each undeclared identifier is reported only once for each function it appears in
src/pspg.c: In function ‘get_string’:
src/pspg.c:2183:9: warning: unused variable ‘t’ [-Wunused-variable]
  Theme *t = &scrdesc->themes[WINDOW_BOTTOM_BAR];
         ^
src/pspg.c: In function ‘get_event’:
src/pspg.c:2536:7: error: ‘handle_sigint’ undeclared (first use in this function); did you mean ‘got_sigint’?
   if (handle_sigint)
       ^~~~~~~~~~~~~
       got_sigint
src/pspg.c: In function ‘main’:
src/pspg.c:4835:78: error: ‘last_line’ undeclared (first use in this function); did you mean ‘last_sec’?
      get_string(&opts, &scrdesc, ""line: "", linenotxt, sizeof(linenotxt) - 1, last_line);
                                                                              ^~~~~~~~~
                                                                              last_sec
src/pspg.c:5198:76: error: ‘last_path’ undeclared (first use in this function); did you mean ‘last_sec’?
      get_string(&opts, &scrdesc, ""log file: "", buffer, sizeof(buffer) - 1, last_path);
                                                                            ^~~~~~~~~
                                                                            last_sec
src/pspg.c:5258:81: error: ‘last_row_search’ undeclared (first use in this function); did you mean ‘reset_search’?
      get_string(&opts, &scrdesc, ""/"", locsearchterm, sizeof(locsearchterm) - 1, last_row_search);
                                                                                 ^~~~~~~~~~~~~~~
                                                                                 reset_search
src/pspg.c:5559:83: error: ‘last_col_search’ undeclared (first use in this function); did you mean ‘reset_search’?
       get_string(&opts, &scrdesc, ""c:"", locsearchterm, sizeof(locsearchterm) - 1, last_col_search);
                                                                                   ^~~~~~~~~~~~~~~
                                                                                   reset_search
make: *** [Makefile:46: pspg.o] Error 1
```
ne 20. 10. 2019 v 16:38 odesílatel Amjith Ramanujam <
notifications@github.com> napsal:

> @okbob <https://github.com/okbob> I see that you're the author of pspg
> (it looks gorgeous on the screenshots). I can't compile the latest version
> of pspg. Ubutu repositories have an old version that doesn't support CSV
> formatting.
>
I have a bug in ifdef dependencies. It should be fixed now. But if you can,
please install readline-devel package. a) it fixes this issue, b) editing
of strings (searching strings, save path, ..) is much better with readline.



> This is the error I get when I run ./configure && make
>
> ↪ ./configure
>
> checking for gcc... gcc
>
> checking whether the C compiler works... yes
>
> checking for C compiler default output file name... a.out
>
> checking for suffix of executables...
>
> checking whether we are cross compiling... no
>
> checking for suffix of object files... o
>
> checking whether we are using the GNU C compiler... yes
>
> checking whether gcc accepts -g... yes
>
> checking for gcc option to accept ISO C89... none needed
>
> checking how to run the C preprocessor... gcc -E
>
> checking for grep that handles long lines and -e... /usr/bin/grep
>
> checking for egrep... /usr/bin/grep -E
>
> checking for ANSI C header files... yes
>
> checking whether termios.h defines TIOCGWINSZ... no
>
> checking whether sys/ioctl.h defines TIOCGWINSZ... yes
>
> checking for gcc... (cached) gcc
>
> checking whether we are using the GNU C compiler... (cached) yes
>
> checking whether gcc accepts -g... (cached) yes
>
> checking for gcc option to accept ISO C89... (cached) none needed
>
> checking for pkg-config... /usr/bin/pkg-config
>
> checking pkg-config is at least version 0.9.0... yes
>
> checking for ncursesw via pkg-config... yes
>
> checking for working ncursesw/curses.h... yes
>
> checking for working ncursesw.h... no
>
> checking for working ncurses.h... yes
>
> checking for Curses Panel library with ncursesw/panel.h... yes
>
> checking for sys/types.h... yes
>
> checking for sys/stat.h... yes
>
> checking for stdlib.h... yes
>
> checking for string.h... yes
>
> checking for memory.h... yes
>
> checking for strings.h... yes
>
> checking for inttypes.h... yes
>
> checking for stdint.h... yes
>
> checking for unistd.h... yes
>
> checking for a readline compatible library... no
>
> checking for roundl in -lm... yes
>
> checking for library containing clock_gettime... none required
>
> configure: creating ./config.status
>
> config.status: creating config.make
>
> [~/D/pspg] (master|✔)
>
> ↪ make
>
> gcc -O3 -c  src/pretty-csv.c -o csv.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
>
> gcc -O3 -c  src/print.c -o print.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
>
> gcc -O3 -c src/commands.c -o commands.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
>
> gcc -O3 -c src/unicode.c -o unicode.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
>
> gcc -O3 -c src/themes.c -o themes.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
>
> gcc -O3 -c src/pspg.c -o pspg.o  -g -O2 -DCOMPILE_MENU   -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DPACKAGE_NAME=\""pspg\"" -DPACKAGE_TARNAME=\""pspg\"" -DPACKAGE_VERSION=\""0\"" -DPACKAGE_STRING=\""pspg\ 0\"" -DPACKAGE_BUGREPORT=\""pavel.stehule@gmail.com\"" -DPACKAGE_URL=\""\"" -DSTDC_HEADERS=1 -DGWINSZ_IN_SYS_IOCTL=1 -DHAVE_NCURSESW=1 -DHAVE_CURSES=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSESW_CURSES_H=1 -DHAVE_CURSES_ENHANCED=1 -DHAVE_CURSES_COLOR=1 -DHAVE_CURSES_OBSOLETE=1 -DHAVE_NCURSES_H=1 -DHAVE_PANEL=1 -DHAVE_NCURSESW_PANEL_H=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBM=1 -Wall
>
> src/pspg.c: In function ‘SigintHandler’:
>
> src/pspg.c:147:2: error: ‘handle_sigint’ undeclared (first use in this function); did you mean ‘got_sigint’?
>
>   handle_sigint = true;
>
>   ^~~~~~~~~~~~~
>
>   got_sigint
>
> src/pspg.c:147:2: note: each undeclared identifier is reported only once for each function it appears in
>
> src/pspg.c: In function ‘get_string’:
>
> src/pspg.c:2183:9: warning: unused variable ‘t’ [-Wunused-variable]
>
>   Theme *t = &scrdesc->themes[WINDOW_BOTTOM_BAR];
>
>          ^
>
> src/pspg.c: In function ‘get_event’:
>
> src/pspg.c:2536:7: error: ‘handle_sigint’ undeclared (first use in this function); did you mean ‘got_sigint’?
>
>    if (handle_sigint)
>
>        ^~~~~~~~~~~~~
>
>        got_sigint
>
> src/pspg.c: In function ‘main’:
>
> src/pspg.c:4835:78: error: ‘last_line’ undeclared (first use in this function); did you mean ‘last_sec’?
>
>       get_string(&opts, &scrdesc, ""line: "", linenotxt, sizeof(linenotxt) - 1, last_line);
>
>                                                                               ^~~~~~~~~
>
>                                                                               last_sec
>
> src/pspg.c:5198:76: error: ‘last_path’ undeclared (first use in this function); did you mean ‘last_sec’?
>
>       get_string(&opts, &scrdesc, ""log file: "", buffer, sizeof(buffer) - 1, last_path);
>
>                                                                             ^~~~~~~~~
>
>                                                                             last_sec
>
> src/pspg.c:5258:81: error: ‘last_row_search’ undeclared (first use in this function); did you mean ‘reset_search’?
>
>       get_string(&opts, &scrdesc, ""/"", locsearchterm, sizeof(locsearchterm) - 1, last_row_search);
>
>                                                                                  ^~~~~~~~~~~~~~~
>
>                                                                                  reset_search
>
> src/pspg.c:5559:83: error: ‘last_col_search’ undeclared (first use in this function); did you mean ‘reset_search’?
>
>        get_string(&opts, &scrdesc, ""c:"", locsearchterm, sizeof(locsearchterm) - 1, last_col_search);
>
>                                                                                    ^~~~~~~~~~~~~~~
>
>                                                                                    reset_search
>
> make: *** [Makefile:46: pspg.o] Error 1
>
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102?email_source=notifications&email_token=AAEFO46WJL6UCXMIVOQQNN3QPRUNFA5CNFSM4I3XD2P2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBYLSBI#issuecomment-544258309>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO44NSVNDLPHIX3BYAD3QPRUNFANCNFSM4I3XD2PQ>
> .
>

I was able to get it working with linuxbrew. I tried it out and I see the issue. We make some choices about whether to use a pager or not based on the length of the output. So using pspg as a pager replacement isn't going to work well. 

My proposal is to make pspg a first-class formatter in pgcli. I'm thinking about having a table_format option in the config called `pspg`. This option use pspg as a pager as well as bypass some of the other checks we do to ensure correct formatting.

Thoughts? 
po 21. 10. 2019 v 2:26 odesílatel Amjith Ramanujam <notifications@github.com>
napsal:

> I was able to get it working with linuxbrew. I tried it out and I see the
> issue. We make some choices about whether to use a pager or not based on
> the length of the output. So using pspg as a pager replacement isn't going
> to work well.
>
> My proposal is to make pspg a first-class formatter in pgcli. I'm thinking
> about having a table_format option in the config called pspg. This option
> use pspg as a pager as well as bypass some of the other checks we do to
> ensure correct formatting.
>
> Thoughts?
>
I, think so it is possible - pspg can work like page, and can work like
formatter too - so usual setup should not be effective.

Python 3 has CSV support https://docs.python.org/3/library/csv.html so
generating csv can be fast




> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102?email_source=notifications&email_token=AAEFO43ZMY7SKGHAKYMNZALQPTZKHA5CNFSM4I3XD2P2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBYX4CI#issuecomment-544308745>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO443V4EHYMPUGX5DGQ3QPTZKHANCNFSM4I3XD2PQ>
> .
>

po 21. 10. 2019 v 4:48 odesílatel Pavel Stehule <pavel.stehule@gmail.com>
napsal:

>
>
> po 21. 10. 2019 v 2:26 odesílatel Amjith Ramanujam <
> notifications@github.com> napsal:
>
>> I was able to get it working with linuxbrew. I tried it out and I see the
>> issue. We make some choices about whether to use a pager or not based on
>> the length of the output. So using pspg as a pager replacement isn't going
>> to work well.
>>
>> My proposal is to make pspg a first-class formatter in pgcli. I'm
>> thinking about having a table_format option in the config called pspg.
>> This option use pspg as a pager as well as bypass some of the other checks
>> we do to ensure correct formatting.
>>
>> Thoughts?
>>
> I, think so it is possible - pspg can work like page, and can work like
> formatter too - so usual setup should not be effective.
>
> Python 3 has CSV support https://docs.python.org/3/library/csv.html so
> generating csv can be fast
>

http://www.lucainvernizzi.net/blog/2015/08/03/8x-speed-up-for-python-s-csv-dictwriter/

>
>
>
>
>> —
>> You are receiving this because you were mentioned.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/dbcli/pgcli/issues/1102?email_source=notifications&email_token=AAEFO43ZMY7SKGHAKYMNZALQPTZKHA5CNFSM4I3XD2P2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBYX4CI#issuecomment-544308745>,
>> or unsubscribe
>> <https://github.com/notifications/unsubscribe-auth/AAEFO443V4EHYMPUGX5DGQ3QPTZKHANCNFSM4I3XD2PQ>
>> .
>>
>

<pre>
import psycopg2
import csv
import sys

try:
    conn = psycopg2.connect(""dbname='postgres' user='pavel' host='/tmp'"")
except:
    print(""I am unable to connect to the database"")

cur = conn.cursor()
cur.execute(""""""SELECT * from pg_proc"""""")

rows = cur.fetchall()
fields_names = [i[0] for i in cur.description]

writer = csv.writer(sys.stdout)
writer.writerow(fields_names)
writer.writerows(rows)
</pre>

This code produces valid csv and this can be processed by pspg. Unfortunately I am not able to integrate it to pgcli 
I had a look at this. 

WRT to the handling of the new lines a possible fix is to change the default CSV dialect from ""excel"" to ""unix"". According to the [docs](https://docs.python.org/3/library/csv.html#csv.unix_dialect):

> The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e. using '\n' as line terminator and quoting all fields. It is registered with the dialect name 'unix'.

This can be done by applying the following patch to https://github.com/dbcli/pgcli/blob/936475258d501b7b1fed1c80080eabfae8179970/pgcli/main.py#L1389

``` diff
     if not settings.floatfmt:
         output_kwargs[""preprocessors""] = (align_decimals,)
 
+    if table_format == ""csv"":
+        # In order to handle newlines correctly we need to use the unix dialect.
+        # https://github.com/dbcli/pgcli/issues/1102
+        output_kwargs[""dialect""] = ""unix""
+
     if title:  # Only print the title if it's not None.
         output.append(title)
```

This `dialect` kwarg is eventually being passed to the `csv.writer` function:
https://github.com/dbcli/cli_helpers/blob/2ae90b0c579e604d53f6297255491e049d5029f6/cli_helpers/tabular_output/delimited_output_adapter.py#L38-L41

After applying this, the CSV output of pgcli is:
```
> select * from foo;                                                                                         
""a"",""b""
""10"",""AHOJ
NAZDAR
BAZAR""
""20"",""SERVUS""
```

Which seems to be handled correctly by pspg.

That being said, in case anyone is relying on parsing this output, this is a breaking change. On the other hand, not handling newlines is also a bug.
As far as the `SELECT #` goes, perhaps something like this could be applied in the same function:
``` diff
-    if status:  # Only print the status if it's not None.
+    # Only print the status if it's not None and we are not producing CSV
+    if status and table_format != ""csv"":
         output = itertools.chain(output, [status])
```
Alternatively, the printing of the status line could be controlled by a configuration option, 

@amjith if you can provide some feedback, i can make a Pull Request.
@pmav99 [this change](https://github.com/dbcli/pgcli/issues/1102#issuecomment-615887572) makes complete sense. You should make a PR with it.

Regarding [your csv dialect change](https://github.com/dbcli/pgcli/issues/1102#issuecomment-615886780), perhaps apply `excel` dialect when running on Windows, and `unix` otherwise?
@j-bennet you are right for using excel on Windows since the dialects have different line endings: https://github.com/python/cpython/blob/bfda4db0d2c05eef4e4ae90d899d0b67cb2e33e5/Lib/csv.py#L54-L77

I will make a pull request.
Hmm... After using this for a short while, there is a problem after all. When you configure pgcli to produce `csv` as output, regardless of the pager settings, if the query results can fit in the monitor you end up with actual `csv` output, which is obviously not what this issue is about. In order to circumvent this we need to somehow enforce the usage of the pager.

Setting `\pset pager always` within the interactive session works, but having to set this every time is not that appealing. I did experiment with adding the `enforce_pager` configuration option and it does work but I don't know if you are interested in adding extra config options. The idea is that setting `enforce_pager` to `True` will be calling `pset_pager` with `PGSpecial.main.PAGER_ALWAYS`. If `enable_pager` is `False` then `enforce_pager` is ignored.

This is what I came up with, but perhaps there is a better way to approach this. Let me know what you think:

<details>
  <summary>git diff</summary>

``` diff
diff --git a/pgcli/main.py b/pgcli/main.py
index 636f938d..39c34927 100644
--- a/pgcli/main.py
+++ b/pgcli/main.py
@@ -48,7 +48,7 @@ from prompt_toolkit.history import FileHistory
 from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
 from pygments.lexers.sql import PostgresLexer
 
-from pgspecial.main import PGSpecial, NO_QUERY, PAGER_OFF, PAGER_LONG_OUTPUT
+from pgspecial.main import PGSpecial, NO_QUERY, PAGER_ALWAYS, PAGER_OFF, PAGER_LONG_OUTPUT
 import pgspecial as special
 
 from .pgcompleter import PGCompleter
@@ -151,6 +151,20 @@ class PGCli(object):
         if not os.environ.get(""LESS""):
             os.environ[""LESS""] = ""-SRXF""
 
+    def set_interactive_pager(self, config):
+        enable_pager = config[""main""].as_bool(""enable_pager"")
+        enforce_pager = config[""main""].as_bool(""enforce_pager"")
+        if not enable_pager:
+            self.logger.info(""Pager disabled in config file"")
+            self.pgspecial.pset_pager(""off"")
+        else:
+            if enforce_pager:
+                self.logger.info(""Pager enforced in config file"")
+                self.pgspecial.pset_pager(""always"")
+            else:
+                self.logger.info(""Pager enabled in config file"")
+                self.pgspecial.pset_pager(""on"")
+
     def __init__(
         self,
         force_passwd_prompt=False,
@@ -180,9 +194,10 @@ class PGCli(object):
         self.logger = logging.getLogger(__name__)
         self.initialize_logging()
 
-        self.set_default_pager(c)
         self.output_file = None
         self.pgspecial = PGSpecial()
+        self.set_default_pager(c)
+        self.set_interactive_pager(c)
 
         self.multi_line = c[""main""].as_bool(""multi_line"")
         self.multiline_mode = c[""main""].get(""multi_line_mode"", ""psql"")
@@ -217,10 +232,6 @@ class PGCli(object):
         self.initialize_keyring()
         self.show_bottom_toolbar = c[""main""].as_bool(""show_bottom_toolbar"")
 
-        self.pgspecial.pset_pager(
-            self.config[""main""].as_bool(""enable_pager"") and ""on"" or ""off""
-        )
-
         self.style_output = style_factory_output(self.syntax_style, c[""colors""])
 
         self.now = dt.datetime.today()
@@ -1072,9 +1083,12 @@ class PGCli(object):
         return len(lines) >= (self.prompt_app.output.get_size().rows - 4)
 
     def echo_via_pager(self, text, color=None):
-        if self.pgspecial.pager_config == PAGER_OFF or self.watch_command:
+        pager_config = self.pgspecial.pager_config
+        if pager_config == PAGER_OFF or self.watch_command:
             click.echo(text, color=color)
-        elif self.pgspecial.pager_config == PAGER_LONG_OUTPUT:
+        elif pager_config == PAGER_ALWAYS:
+            click.echo_via_pager(text, color)
+        elif pager_config == PAGER_LONG_OUTPUT:
             lines = text.split(""\n"")
 
             # The last 4 lines are reserved for the pgcli menu and padding
diff --git a/pgcli/pgclirc b/pgcli/pgclirc
index 4918606c..2577384f 100644
--- a/pgcli/pgclirc
+++ b/pgcli/pgclirc
@@ -145,6 +145,10 @@ null_string = '<null>'
 # manage pager on startup
 enable_pager = True
 
+# Enforce the usage of the pager regardless of the size of the output.
+# This option is ignored when `enable_pager` is `False`
+enforce_pager = False
+
 # Use keyring to automatically save and load password in a secure manner
 keyring = True
 ```
</details>
@pmav99 How about always enabling pager when pager is set to `pspg`, since we know that `pspg` is a special case, it's not just a pager for longer results, but an alternative table formatter?
so 18. 4. 2020 v 22:27 odesílatel pmav99 <notifications@github.com> napsal:

> Hmm... After using this for a short while, there is a problem after all.
> When you configure pgcli to produce csv as output, regardless of the
> pager settings, you end up with actual csv output when the query results
> can fit in the monitor. In order to circumvent this we need to somehow
> enforce the usage of the pager.
>
> Setting \pset pager always within the interactive session works, but
> having to set this every time is not that appealing. I did experiment with
> adding the enforce_pager configuration option and it does work but I
> don't know if you are interested in adding extra config options. The idea
> is that setting enforce_pager to True will be calling pset_pager with
> PGSpecial.main.PAGER_ALWAYS.
>
> This is what I came up with, but perhaps there is a better way to approach
> this. Let me know what you think:
>

I understand well so work with \pset pager always is unfriendly. What
little bit different direction? It can fix a problem with csv dialect too.

Can pgcli implements a config variable pager_format

default can ""default"" -- use current format. But for pspg somebody can set
there

\pset pager_format csv-unix

what do you think about this idea?




> git diff
>
> diff --git a/pgcli/main.py b/pgcli/main.py
> index 636f938d..39c34927 100644--- a/pgcli/main.py+++ b/pgcli/main.py@@ -48,7 +48,7 @@ from prompt_toolkit.history import FileHistory
>  from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
>  from pygments.lexers.sql import PostgresLexer
>  -from pgspecial.main import PGSpecial, NO_QUERY, PAGER_OFF, PAGER_LONG_OUTPUT+from pgspecial.main import PGSpecial, NO_QUERY, PAGER_ALWAYS, PAGER_OFF, PAGER_LONG_OUTPUT
>  import pgspecial as special
>
>  from .pgcompleter import PGCompleter@@ -151,6 +151,20 @@ class PGCli(object):
>          if not os.environ.get(""LESS""):
>              os.environ[""LESS""] = ""-SRXF""
>  +    def set_interactive_pager(self, config):+        enable_pager = config[""main""].as_bool(""enable_pager"")+        enforce_pager = config[""main""].as_bool(""enforce_pager"")+        if not enable_pager:+            self.logger.info(""Pager disabled in config file"")+            self.pgspecial.pset_pager(""off"")+        else:+            if enforce_pager:+                self.logger.info(""Pager enforced in config file"")+                self.pgspecial.pset_pager(""always"")+            else:+                self.logger.info(""Pager enabled in config file"")+                self.pgspecial.pset_pager(""on"")+
>      def __init__(
>          self,
>          force_passwd_prompt=False,@@ -180,9 +194,10 @@ class PGCli(object):
>          self.logger = logging.getLogger(__name__)
>          self.initialize_logging()
>  -        self.set_default_pager(c)
>          self.output_file = None
>          self.pgspecial = PGSpecial()+        self.set_default_pager(c)+        self.set_interactive_pager(c)
>
>          self.multi_line = c[""main""].as_bool(""multi_line"")
>          self.multiline_mode = c[""main""].get(""multi_line_mode"", ""psql"")@@ -217,10 +232,6 @@ class PGCli(object):
>          self.initialize_keyring()
>          self.show_bottom_toolbar = c[""main""].as_bool(""show_bottom_toolbar"")
>  -        self.pgspecial.pset_pager(-            self.config[""main""].as_bool(""enable_pager"") and ""on"" or ""off""-        )-
>          self.style_output = style_factory_output(self.syntax_style, c[""colors""])
>
>          self.now = dt.datetime.today()@@ -1072,9 +1083,12 @@ class PGCli(object):
>          return len(lines) >= (self.prompt_app.output.get_size().rows - 4)
>
>      def echo_via_pager(self, text, color=None):-        if self.pgspecial.pager_config == PAGER_OFF or self.watch_command:+        pager_config = self.pgspecial.pager_config+        if pager_config == PAGER_OFF or self.watch_command:
>              click.echo(text, color=color)-        elif self.pgspecial.pager_config == PAGER_LONG_OUTPUT:+        elif pager_config == PAGER_ALWAYS:+            click.echo_via_pager(text, color)+        elif pager_config == PAGER_LONG_OUTPUT:
>              lines = text.split(""\n"")
>
>              # The last 4 lines are reserved for the pgcli menu and paddingdiff --git a/pgcli/pgclirc b/pgcli/pgclirc
> index 4918606c..2577384f 100644--- a/pgcli/pgclirc+++ b/pgcli/pgclirc@@ -145,6 +145,10 @@ null_string = '<null>'
>  # manage pager on startup
>  enable_pager = True
>  +# Enforce the usage of the pager regardless of the size of the output.+# This option is ignored when `enable_pager` is `False`+enforce_pager = False+
>  # Use keyring to automatically save and load password in a secure manner
>  keyring = True
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-615941099>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO4Z63JDU5TFUU4J437DRNIEKTANCNFSM4I3XD2PQ>
> .
>


@okbob I agree that adding `csv-unix` to the available `output_formats` can make sense, especially if backwards compatibility is relevant. As far as being able to change the `output_format` interactively, I think that this is already supported via `\T <format>`: https://github.com/dbcli/pgcli/blob/3071de14f55f7ea1a3df2dd5f42800363e225d2a/pgcli/main.py#L315-L320

> @pmav99 How about always enabling pager when pager is set to `pspg`, since we know that `pspg` is a special case, it's not just a pager for longer results, but an alternative table formatter?

So you mean something like this?

<details>
  <summary>git diff</summary>

```diff
diff --git a/pgcli/main.py b/pgcli/main.py
index 636f938d..d0b4e18f 100644
--- a/pgcli/main.py
+++ b/pgcli/main.py
@@ -151,6 +151,21 @@ class PGCli(object):
         if not os.environ.get(""LESS""):
             os.environ[""LESS""] = ""-SRXF""
 
+    def set_pager_mode(self, config):
+        if ""pspg"" in os.environ.get(""PAGER"", """"):
+            # https://github.com/dbcli/pgcli/issues/1102
+            self.logger.info(""Pager 'pspg' detected. Setting '\pset pager always'."")
+            pager_mode = ""always""
+        else:
+            enable_pager = config[""main""].as_bool(""enable_pager"")
+            if enable_pager:
+                self.logger.info(""Pager enabled. Setting '\pset pager on'."")
+                pager_mode = ""on""
+            else:
+                self.logger.info(""Pager disabled. Setting '\pset pager off'."")
+                pager_mode = ""off""
+        self.pgspecial.pset_pager(pager_mode)
+
     def __init__(
         self,
         force_passwd_prompt=False,
@@ -180,9 +195,10 @@ class PGCli(object):
         self.logger = logging.getLogger(__name__)
         self.initialize_logging()
 
-        self.set_default_pager(c)
         self.output_file = None
         self.pgspecial = PGSpecial()
+        self.set_default_pager(c)
+        self.set_pager_mode(c)
 
         self.multi_line = c[""main""].as_bool(""multi_line"")
         self.multiline_mode = c[""main""].get(""multi_line_mode"", ""psql"")
@@ -217,10 +233,6 @@ class PGCli(object):
         self.initialize_keyring()
         self.show_bottom_toolbar = c[""main""].as_bool(""show_bottom_toolbar"")
 
-        self.pgspecial.pset_pager(
-            self.config[""main""].as_bool(""enable_pager"") and ""on"" or ""off""
-        )
-
         self.style_output = style_factory_output(self.syntax_style, c[""colors""])
 
         self.now = dt.datetime.today()
```
</details>

Shouldn't we also check the `table_format`, though? In order to benefit from the fast `pspg` rendering we need to configure pgcli with:
```
pager = /usr/bin/pspg -bX --csv
table_format = csv
```
Nevertheless, pspg could be used without CSV too, e.g. `pager = /usr/bin/pspg -bX`, and in that case enabling `\pset pager always` is probably not that pleasant.

So, maybe we should use:
``` python
        pager = os.environ.get(""PAGER"", """")
        if ""pspg"" in pager and ""csv"" in pager and config[""main""][""table_format""] == ""csv"":
            # https://github.com/dbcli/pgcli/issues/1102
            self.logger.info(""Pager 'pspg' with CSV format detected. Setting '\pset pager always'."")
            pager_mode = ""always""
        else: 
            # ...
```

ne 19. 4. 2020 v 9:11 odesílatel pmav99 <notifications@github.com> napsal:

> @okbob <https://github.com/okbob> I agree that adding csv-unix to the
> available output_formats can make sense, especially if backwards
> compatibility is relevant. As far as being able to change the
> output_format interactively, I think that this is already supported via \T
> <format>:
> https://github.com/dbcli/pgcli/blob/3071de14f55f7ea1a3df2dd5f42800363e225d2a/pgcli/main.py#L315-L320
>
> @pmav99 <https://github.com/pmav99> How about always enabling pager when
> pager is set to pspg, since we know that pspg is a special case, it's not
> just a pager for longer results, but an alternative table formatter?
>
> So you mean something like this?
> git diff
>
> diff --git a/pgcli/main.py b/pgcli/main.py
> index 636f938d..d0b4e18f 100644--- a/pgcli/main.py+++ b/pgcli/main.py@@ -151,6 +151,21 @@ class PGCli(object):
>          if not os.environ.get(""LESS""):
>              os.environ[""LESS""] = ""-SRXF""
>  +    def set_pager_mode(self, config):+        if ""pspg"" in os.environ.get(""PAGER"", """"):+            # https://github.com/dbcli/pgcli/issues/1102+            self.logger.info(""Pager 'pspg' detected. Setting '\pset pager always'."")+            pager_mode = ""always""+        else:+            enable_pager = config[""main""].as_bool(""enable_pager"")+            if enable_pager:+                self.logger.info(""Pager enabled. Setting '\pset pager on'."")+                pager_mode = ""on""+            else:+                self.logger.info(""Pager disabled. Setting '\pset pager off'."")+                pager_mode = ""off""+        self.pgspecial.pset_pager(pager_mode)+
>      def __init__(
>          self,
>          force_passwd_prompt=False,@@ -180,9 +195,10 @@ class PGCli(object):
>          self.logger = logging.getLogger(__name__)
>          self.initialize_logging()
>  -        self.set_default_pager(c)
>          self.output_file = None
>          self.pgspecial = PGSpecial()+        self.set_default_pager(c)+        self.set_pager_mode(c)
>
>          self.multi_line = c[""main""].as_bool(""multi_line"")
>          self.multiline_mode = c[""main""].get(""multi_line_mode"", ""psql"")@@ -217,10 +233,6 @@ class PGCli(object):
>          self.initialize_keyring()
>          self.show_bottom_toolbar = c[""main""].as_bool(""show_bottom_toolbar"")
>  -        self.pgspecial.pset_pager(-            self.config[""main""].as_bool(""enable_pager"") and ""on"" or ""off""-        )-
>          self.style_output = style_factory_output(self.syntax_style, c[""colors""])
>
>          self.now = dt.datetime.today()
>
> Shouldn't we also check the table_format, though? In order to benefit
> from the fast pspg rendering we need to configure pgcli with:
>
> pager = /usr/bin/pspg -bX --csv
> table_format = csv
>
> Nevertheless, pspg could be used without CSV too, e.g. pager =
> /usr/bin/pspg -bX, and in that case enabling \pset pager always is
> probably not that pleasant.
>
> So, maybe we should use:
>
>         pager = os.environ.get(""PAGER"", """")
>         if ""pspg"" in pager and ""csv"" in pager and config[""main""][""table_format""] == ""csv"":
>             # https://github.com/dbcli/pgcli/issues/1102
>             self.logger.info(""Pager 'pspg' with CSV format detected. Setting '\pset pager always'."")
>             pager_mode = ""always""
>         else:
>             # ...
>
>
I don't think so using pager for small tables is good idea - if there are
some other ways. It is slower, because pager should be explicitly finished.



> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-616062962>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO43QUVML3Y4T5J4UC7TRNKPY3ANCNFSM4I3XD2PQ>
> .
>

I agree that always using a pager is not the perfect solution. There are many cases where you don't really want a pager. The perfect solution would be to use the default `table_format` when the output fits in the screen and switch to CSV + `pspg` when the output doesn't.

Nevertheless, to the extend that I can understand this, the problem is that pgcli decides if it is going to use a pager only after it has produced the output that will get displayed. And, when this decision is being made the output has already been formatted (how else would you know if the output fits the screen if you don't format it?). So if `table_format` has been set to anything else than `csv` then we are not going to be able to benefit from `pspg`'s fast rendering.

I think that there can be two ways of using `pspg` after all:

1. Configure `pgcli` with:
```
pager = /usr/bin/pspg -bX
table_format = psql
```
This will only use `pspg` as a pager on output that does not fit in the screen but it will also not benefit from `pspg`'s fast rendering.

2. Configure `pgcli` with:
```
pager = /usr/bin/pspg -bX --csv
table_format = csv
```
This one will be able to benefit from `pspg`'s fast rendering, but you are practically forced to always use a pager.
ne 19. 4. 2020 v 18:01 odesílatel pmav99 <notifications@github.com> napsal:

> I agree that always using a pager is not the perfect solution. There are
> many cases where you don't really want a pager. The perfect solution would
> be to use the default table_format when the output fits in the screen and
> switch to CSV + pspg when the output doesn't.
>
> Nevertheless, to the extend that I can understand this, the problem is
> that pgcli decides if it is going to use a pager only after it has produced
> the output that will get displayed. And, when this decision is being made
> the output has already been formatted (how else would you know if the
> output fits the screen if you don't format it?). So if table_format has
> been set to anything else than csv then we are not going to be able to
> benefit from pspg's fast rendering.
>
I don't know a structure of pgcli, but what you say has a sense to me.
Maybe you can use another feature of pspg

There is a option -F or --quit-if-one-screen. When the result can be
displayed without scrolling, then pspg do it, and immediately finish.

Pavel


> I think that there can be two ways of using pspg after all:
>
>    1. Configure pgcli with:
>
> pager = /usr/bin/pspg -bX
> table_format = psql
>
> This will only use pspg as a pager on output that does not fit in the
> screen but it will also not benefit from pspg's fast rendering.
>
>    1. Configure pgcli with:
>
> pager = /usr/bin/pspg -bX --csv
> table_format = csv
>
> This one will be able to benefit from pspg's fast rendering, but you are
> practically forced to always use a pager.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-616169963>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO45XOAOP7W3ZCGO657DRNMN4ZANCNFSM4I3XD2PQ>
> .
>

Thank you Pavel, that's exactly what was missing!

@j-bennet I merged the PRs. As it is `pspg` can be used in the following two ways:

1. Have `pgcli` output CSVs and render them using `pspg`. In order for this setup to work we need `pspg` to be configured to use the `--csv` and `--quit-if-one-screen` flags while `pgcli` must be configured with `table_format = csv`. Putting something like this in `pgcli`'s configuration file should do it:
``` conf
pager = /usr/bin/pspg --csv --quit-if-one-screen

table_format = csv
```

2. Have pgcli render output normally and use `pspg` as a `less` replacement. For this setup we only needs to set `pspg` as the pager.
po 20. 4. 2020 v 20:16 odesílatel pmav99 <notifications@github.com> napsal:

> Thank you Pavel, that's exactly what was missing!
>
> @j-bennet <https://github.com/j-bennet> I merged the PRs. As it is pspg
> can be used in the following two ways:
>
>    1. Have pgcli output CSVs and render them using pspg. In order for
>    this setup to work we need pspg to be configured to use the --csv and
>    --quit-if-one-screen flags while pgcli must be configured with table_format
>    = csv. Putting something like this in pgcli's configuration file
>    should do it:
>
> pager = /usr/bin/pspg --csv --quit-if-one-screen
>
> table_format = csv
>
>
>    1. Have pgcli render output normally and use pspg as a less
>    replacement. For this setup we only needs to set pspg as the pager.
>
>
I checked my code, and I found another option designed for pgcli - ""rr"" -
reserved rows -pgcli has one row as status bar, and this row should be
calculated when --quit-if-one-screen is processed.

so for pgcli the configuration should be pager = /usr/bin/pspg --csv
--quit-if-one-screen --rr=1

Regards

Pavel



>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-616726123>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO4ZIHCBOL24TCUYMLPLRNSGQRANCNFSM4I3XD2PQ>
> .
>

I am not 100% sure that I understand correctly what `--rr` does... 

One of the changes that my PR does is that the status is omitted when the output is CSV: https://github.com/dbcli/pgcli/pull/1173/commits/e0cff742372db327d7cdd6c222729f3bc687d181
For example when using the `table_format = psql`: 
```
\dn                                                                                                        
+------------+----------------+
| Name       | Owner          |
|------------+----------------|
| csw        | rpi_super_user |
| public     | rpi_super_user |
| rpi        | rpi_super_user |
| tiger      | rpi_super_user |
| tiger_data | rpi_super_user |
| topology   | rpi_super_user |
+------------+----------------+
SELECT 6
Time: 0.010s
```
while, when using `table_format = csv`:
```
> \dn                                                                                                        
""Name"",""Owner""
""csw"",""rpi_super_user""
""public"",""rpi_super_user""
""rpi"",""rpi_super_user""
""tiger"",""rpi_super_user""
""tiger_data"",""rpi_super_user""
""topology"",""rpi_super_user""
Time: 0.001s
``` 

i.e. the `SELECT 6` part is missing in the second case. Is that line what `--rr` is supposed to handle? If yes, then we probably don't need it.

Apart from that I have one question. With this configuration:
```
pager = /usr/bin/pspg -s15 --csv --quit-if-one-screen --ignore-case -X --double-header --border 0
table_format = csv
```
when the output fits in the screen then:
1. there is no header line for the labels of the columns.
2. The count of the rows is wrong.
E.g.: 
```
> \dn                                                                                                                                                                                                                                                  
Name       Owner         
csw        rpi_super_user
public     rpi_super_user
rpi        rpi_super_user
tiger      rpi_super_user
tiger_data rpi_super_user
topology   rpi_super_user
(7 rows)
Time: 0.001s
```
When the output does not fit in the screen, then I get the expected output. E.g.
```
oid               proname               pronamespace proowner prolang procost prorows provariadic      prosupport       prokind prosecdef proleakproof proisstrict proretset provolatile proparallel pronargs pronargdefaults prorettype     proargtypes               proallar
═════ ══════════════════════════════════ ════════════ ════════ ═══════ ═══════ ═══════ ═══════════ ═════════════════════ ═══════ ═════════ ════════════ ═══════════ ═════════ ═══════════ ═══════════ ════════ ═══════════════ ══════════ ════════════════════ ═════════════════
 1242 boolin                                       11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         16                 2275 <null>
 1243 boolout                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   16 <null>
 1244 byteain                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         17                 2275 <null>
   31 byteaout                                     11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   17 <null>
 1245 charin                                       11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         18                 2275 <null>
   33 charout                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   18 <null>
   34 namein                                       11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         19                 2275 <null>
   35 nameout                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   19 <null>
[ ... ]
 1632 bpcharnlike                                  11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  2               0         16              1042 25 <null>           
(1000 rows)

```
Does this has to do with the pspg config options? If you need me to open a ticket for this, please let me know.

po 20. 4. 2020 v 21:19 odesílatel pmav99 <notifications@github.com> napsal:

> I am not 100% sure that I understand correctly what --rr does...
>
It is used for calculation of rows available for displaying. Ncurses has
ROWS variable that holds number of rows on terminal.

When pspg does decision if table will be just printed or pspg should to
start in interactive mode, then it compare available rows with table rows.
Then it is ensured, so printed table is not scrolled up.

pgcli uses 1 row as status bar, so for this calculation, the ROWS variable
should decreased by one.

Without --rr option, the pspg can do bad decision if should to run to
interactive mode.


> One of the changes that my PR does is that the status is omitted when the
> output is CSV: e0cff74
> <https://github.com/dbcli/pgcli/commit/e0cff742372db327d7cdd6c222729f3bc687d181>
> For example when using the table_format = psql:
>
> \dn
>
> +------------+----------------+
>
> | Name       | Owner          |
>
> |------------+----------------|
>
> | csw        | rpi_super_user |
>
> | public     | rpi_super_user |
>
> | rpi        | rpi_super_user |
>
> | tiger      | rpi_super_user |
>
> | tiger_data | rpi_super_user |
>
> | topology   | rpi_super_user |
>
> +------------+----------------+
>
> SELECT 6
>
> Time: 0.010s
>
>
> while, when using table_format = csv:
>
> > \dn
>
> ""Name"",""Owner""
>
> ""csw"",""rpi_super_user""
>
> ""public"",""rpi_super_user""
>
> ""rpi"",""rpi_super_user""
>
> ""tiger"",""rpi_super_user""
>
> ""tiger_data"",""rpi_super_user""
>
> ""topology"",""rpi_super_user""
>
> Time: 0.001s
>
>
> i.e. the SELECT 6 part is missing in the second case. Is that line what
> --rr is supposed to handle? If yes, then we probably don't need it.
>
It is independent. But probably you need --rr=2 due printing time and
status bar. Without it is possible situation when pspg neinteractively
print table, and after returning focus to pgcli, the header rows of table
can scroll out of terminal.


> Apart from that I have one question. With this configuration:
>
> pager = /usr/bin/pspg -s15 --csv --quit-if-one-screen --ignore-case -X --double-header
>
> table_format = csv
>
>
> when the output fits in the screen then:
>
>    1. there is no header line for the labels of the columns.
>    2. The count of the rows is wrong.
>    E.g.:
>
>  \dn
>
> ┌────────────┬────────────────┐
>
> │ Name       │ Owner          │
>
> │ csw        │ rpi_super_user │
>
> │ public     │ rpi_super_user │
>
> │ rpi        │ rpi_super_user │
>
> │ tiger      │ rpi_super_user │
>
> │ tiger_data │ rpi_super_user │
>
> │ topology   │ rpi_super_user │
>
> └────────────┴────────────────┘
>
> (7 rows)
>
> Time: 0.001s
>
>
yes. In this situation the header autodection should to fail. There is not
possibility to decide if csv has or has not header row.

you can use a option --csv-header=on


>  When the output does not fit in the screen, then I get the expected
> output. E.g.
>
> oid               proname               pronamespace proowner prolang procost prorows provariadic      prosupport       prokind prosecdef proleakproof proisstrict proretset provolatile proparallel pronargs pronargdefaults prorettype     proargtypes               proallar
>
> ═════ ══════════════════════════════════ ════════════ ════════ ═══════ ═══════ ═══════ ═══════════ ═════════════════════ ═══════ ═════════ ════════════ ═══════════ ═════════ ═══════════ ═══════════ ════════ ═══════════════ ══════════ ════════════════════ ═════════════════
>
>  1242 boolin                                       11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         16                 2275 <null>
>
>  1243 boolout                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   16 <null>
>
>  1244 byteain                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         17                 2275 <null>
>
>    31 byteaout                                     11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   17 <null>
>
>  1245 charin                                       11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         18                 2275 <null>
>
>    33 charout                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   18 <null>
>
>    34 namein                                       11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0         19                 2275 <null>
>
>    35 nameout                                      11       10      12 1.0     0.0               0 -                     f       False     False        True        False     i           s                  1               0       2275                   19 <null>
>
>
> Does this has to do with the pspg config options? If you need me to open a
> ticket for this, please let me know.
>
there are different data. There is a columns with numbers, so it is clean
so this csv has header - there are different formats between first and
second row

> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-616756518>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO44DN2NTVPTU72B4723RNSN4NANCNFSM4I3XD2PQ>
> .
>

thank you @j-bennet
thank you @okbob 

@ anyone interested, these are the minimum `pspg` options that must be set in `pgcli`'s config file:
 ```
pager = /usr/bin/pspg --csv --rr=2 --quit-if-one-screen --ignore-case --csv-header on 
table_format = csv
```
čt 23. 4. 2020 v 19:29 odesílatel pmav99 <notifications@github.com> napsal:

> thank you @j-bennet <https://github.com/j-bennet>
> thank you @okbob <https://github.com/okbob>
>
> @ anyone interested, these are the minimum pspg options that must set in
> pgcli's config file:
>
> pager = /usr/bin/pspg --csv --rr=2 --quit-if-one-screen --ignore-case --csv-header on
> table_format = csv
>
> great, thank you

Pavel


>  —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-618535002>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO473JWAXZ25WZA63DTLROB3GFANCNFSM4I3XD2PQ>
> .
>

čt 23. 4. 2020 v 20:10 odesílatel Pavel Stehule <pavel.stehule@gmail.com>
napsal:

>
>
> čt 23. 4. 2020 v 19:29 odesílatel pmav99 <notifications@github.com>
> napsal:
>
>> thank you @j-bennet <https://github.com/j-bennet>
>> thank you @okbob <https://github.com/okbob>
>>
>> @ anyone interested, these are the minimum pspg options that must set in
>> pgcli's config file:
>>
>> pager = /usr/bin/pspg --csv --rr=2 --quit-if-one-screen --ignore-case --csv-header on
>> table_format = csv
>>
>> great, thank you
>

I tested it, and it is working very well

Thank you again

Pavel


> Pavel
>
>
>>  —
>> You are receiving this because you were mentioned.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-618535002>, or
>> unsubscribe
>> <https://github.com/notifications/unsubscribe-auth/AAEFO473JWAXZ25WZA63DTLROB3GFANCNFSM4I3XD2PQ>
>> .
>>
>

> @pmav99 [this change](https://github.com/dbcli/pgcli/issues/1102#issuecomment-615887572) makes complete sense. You should make a PR with it.

This was not a good idea after all... Without status, we don't see the actual errors in the queries...:

```
INSERT INTO actor(actor_upvs_id, full_name)  
       VALUES  ('740A28G3-FD13-4936-AFGA-5213EF3F4249','Jane Doe'),  
               ('E4442AE3-4DB8-41C6-8B9B-5D09B9B63E56','John Doe'), 
  ;                                                                                                                                                                                                                                           
Time: 0.001s
```
VS
```
INSERT INTO actor(actor_id, full_name) 
      VALUES  ('740A28G3-FD13-4936-AFGA-5213EF3F4249','Jane Doe'), 
              ('E4442AE3-4DB8-41C6-8B9B-5D09B9B63E56','John Doe'),
 ;                                                                                                                                                                                                                                            
syntax error at end of input
════════════════════════════
LINE 4:                    
^                           
(2 rows)
Time: 0.004s
```

ne 26. 4. 2020 v 21:30 odesílatel pmav99 <notifications@github.com> napsal:

> @pmav99 <https://github.com/pmav99> this change
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-615887572> makes
> complete sense. You should make a PR with it.
>
> This was not a good idea after all... Without status, we don't see the
> actual errors in the queries...:
>
> INSERT INTO actor(actor_upvs_id, full_name)
>
>        VALUES  ('740A28G3-FD13-4936-AFGA-5213EF3F4249','Jane Doe'),
>
>                ('E4442AE3-4DB8-41C6-8B9B-5D09B9B63E56','John Doe'),
>
>   ;
>
> Time: 0.001s
>
>
> VS
>
> INSERT INTO actor(actor_id, full_name)
>
>       VALUES  ('740A28G3-FD13-4936-AFGA-5213EF3F4249','Jane Doe'),
>
>               ('E4442AE3-4DB8-41C6-8B9B-5D09B9B63E56','John Doe'),
>
>  ;
>
> syntax error at end of input
>
> ════════════════════════════
>
> LINE 4:
>
> ^
>
> (2 rows)
>
> Time: 0.004s
>
>
status is good, just should not be part of CSV document. It can be printed
on standard output and should not be redirected to pipe to pager

>  —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-619611726>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO4ZJ7NCNHXD535RZDHTROSDT3ANCNFSM4I3XD2PQ>
> .
>

Hmm.. I had a brief look and it seems that it is not really straightforward to decouple the status from the table. Not unless some refactoring is involved, that is.

AFAI can tell, when you paste multiple queries, pgcli executes them one after the other, gathering the formatted results (+ the status) in an array which is then passed to the pager. 

https://github.com/dbcli/pgcli/blob/bcb0c8bce776a5eba9f5425c57c2ec8385f10e94/pgcli/main.py#L901-L932

When the pager is less, this works fine. For pspg though this is probably causing problems.

For example default pgcli:
```
> select oid, proname, pronamespace from pg_proc limit 3; select oid, proname, pronamespace from pg_proc limit 5;                                                                                                    
+-------+-----------+----------------+
| oid   | proname   | pronamespace   |
|-------+-----------+----------------|
| 1242  | boolin    | 11             |
| 1243  | boolout   | 11             |
| 1244  | byteain   | 11             |
+-------+-----------+----------------+
SELECT 3
+-------+-----------+----------------+
| oid   | proname   | pronamespace   |
|-------+-----------+----------------|
| 1242  | boolin    | 11             |
| 1243  | boolout   | 11             |
| 1244  | byteain   | 11             |
| 31    | byteaout  | 11             |
| 1245  | charin    | 11             |
+-------+-----------+----------------+
SELECT 5
Time: 0.023s
```
VS pspg:
```
> select oid, proname, pronamespace from pg_proc limit 3; select oid, proname, pronamespace from pg_proc limit 5;                                                                                                    
  oid    proname  pronamespace
════════ ════════ ════════════
1242     boolin   11          
1243     boolout  11          
1244     byteain  11          
SELECT 3                      
oid      proname  pronamespace
1242     boolin   11          
1243     boolout  11          
1244     byteain  11          
31       byteaout 11          
1245     charin   11          
SELECT 5                      
(11 rows)
Time: 0.001s
```
As you can see the second query has no header line, while the `(11 rows)` is obviously wrong.
po 27. 4. 2020 v 13:27 odesílatel pmav99 <notifications@github.com> napsal:

> Hmm.. I had a brief look and it seems that it is not really
> straightforward to decouple the status from the table. Not unless some
> refactoring is involved, that is.
>
> AFAI can tell, when you paste multiple queries, pgcli executes them one
> after the other, gathering the formatted results (+ the status) in an array
> which is then passed to the pager.
>
>
> https://github.com/dbcli/pgcli/blob/bcb0c8bce776a5eba9f5425c57c2ec8385f10e94/pgcli/main.py#L901-L932
>
> When the pager is less, this works fine. For pspg though this is probably
> causing problems.
>
> For example default pgcli:
>
> > select oid, proname, pronamespace from pg_proc limit 3; select oid, proname, pronamespace from pg_proc limit 5;
>
>
sure, this cannot to work with pspg - it cannot to work with any pager,
that fix header. There is not ensured same number of columns, same names.



>
> +-------+-----------+----------------+
>
> | oid   | proname   | pronamespace   |
>
> |-------+-----------+----------------|
>
> | 1242  | boolin    | 11             |
>
> | 1243  | boolout   | 11             |
>
> | 1244  | byteain   | 11             |
>
> +-------+-----------+----------------+
>
> SELECT 3
>
> +-------+-----------+----------------+
>
> | oid   | proname   | pronamespace   |
>
> |-------+-----------+----------------|
>
> | 1242  | boolin    | 11             |
>
> | 1243  | boolout   | 11             |
>
> | 1244  | byteain   | 11             |
>
> | 31    | byteaout  | 11             |
>
> | 1245  | charin    | 11             |
>
> +-------+-----------+----------------+
>
> SELECT 5
>
> Time: 0.023s
>
>
> VS pspg:
>
> > select oid, proname, pronamespace from pg_proc limit 3; select oid, proname, pronamespace from pg_proc limit 5;
>
>   oid    proname  pronamespace
>
> ════════ ════════ ════════════
>
> 1242     boolin   11
>
> 1243     boolout  11
>
> 1244     byteain  11
>
> SELECT 3
>
> oid      proname  pronamespace
>
> 1242     boolin   11
>
> 1243     boolout  11
>
> 1244     byteain  11
>
> 31       byteaout 11
>
> 1245     charin   11
>
> SELECT 5
>
> (11 rows)
>
> Time: 0.001s
>
>
> As you can see the second query has no header line, while the (11 rows)
> is obviously wrong.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/1102#issuecomment-619921377>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAEFO4YFYJEEGEYHQZ2T7QTROVT35ANCNFSM4I3XD2PQ>
> .
>
",2019-09-30 07:25:42,2020-04-23 17:17:43
99,1101,"## Description
<!--- Describe your changes in detail. -->

Remove reference to dead Google Group from pgcli app.



## Checklist

Change is trivial enough that I'm skipping these:
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
- [x] Please squash merge this pull request (uncheck if you'd like us to merge as multiple commits)
","rm Google Group from main.py
Thank you!

:icecream: ",2019-09-29 19:21:21,2019-10-01 19:37:57
100,1100,"## Description
Sometimes while multiline mode it is impossible to submit a query with single quotes inside multiline comments. After playing with that I was able to find a simple query to reproduce
```
select 1 /*'/* */'*/
;
```
Moreover it is impossible to finish editing this query (the only option I found is CTRL+C)

At the same time in case one-line mode the same query is submitted successfully

```
select 1 /*'/* */'*/
+------------+
| ?column?   |
|------------|
| 1          |
+------------+
SELECT 1
Time: 0.024s

```
## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
Ubuntu 19.04
- [x] Please provide your CLI version.
v2.1.1
- [x] What is the output of ``pip freeze`` command.
```
arandr==0.1.9
asn1crypto==0.24.0
backports.functools-lru-cache==1.5
beautifulsoup4==4.7.1
bs4==0.0.1
certifi==2019.6.16
click==6.7
configparser==3.5.0b2
cryptography==2.3
entrypoints==0.3
enum34==1.1.6
fuzzyfinder==2.1.0
httplib2==0.13.0
idna==2.6
ipaddress==1.0.17
keyring==17.1.1
keyrings.alt==3.1.1
kube-shell==0.0.23
kubernetes==2.0.0
lxml==4.3.3
oauth2client==4.1.3
prompt-toolkit==1.0.16
pyasn1==0.4.5
pyasn1-modules==0.2.5
pycairo==1.16.2
pycrypto==2.6.1
Pygments==2.4.2
PyGObject==3.32.0
python-dateutil==2.8.0
pyxdg==0.25
PyYAML==5.1.1
rsa==4.0
SecretStorage==2.3.1
six==1.12.0
snxvpn==1.2
soupsieve==1.9
urllib3==1.25.3
wcwidth==0.1.7
websocket-client==0.56.0
```","Not able to submit a query in multiline mode
Thanks for the report @snuyanzin.

The example is a bit tricky, since I don't think C-style comments can be nested, so the query actually _does_ contain an unmatched `'` as the first one is commented out. As I understand it:
```
select 
1 
/*'/* */ <- comment ends after first */
'*/      <- this ' is unmatched
;
```
Do you have another example without nested multi-line comment delimiters that exhibits the problem?

Without looking into it, I wonder if it's possible to indicate after pressing Enter that the query _wasn't_ executed due to an unmatched quote, which might help identify issues like this a bit more clearly, rather than Enter seemingly not working
> I don't think C-style comments can be nested

according postgresql documentation it could be
https://www.postgresql.org/docs/8.0/sql-syntax.html#SQL-SYNTAX-COMMENTS

there are a number of other more complicated examples with such comments. Here I just posted the simplest one. If it helps I could provide others
Thanks for the link @snuyanzin - I didn't know about this feature of C-style comments in SQL!

Having looked into it a bit more, the cause of this issue is a bug in the `sqlparse` library that we use - I've commented with some background on the open issue regarding nested comments https://github.com/andialbrecht/sqlparse/issues/410#issuecomment-547688075 and I had a quick look at the `sqlparse` code, but it wasn't going to be a quick fix for me to make.",2019-09-11 05:32:27,
101,1099,"## Description
I use multiline and simple query
```
select /*
this 
is
a
multiline comment
*/
1;
```
Completions are good thing but not when I'm inside the comments.
Each time I put new line inside the comment pgcli tries to autocomplete it with sql syntax which is useless and annoying.

## Your environment

- [x] Please provide your OS and version information.
Ubuntu 19.04
- [x] Please provide your CLI version.
v2.1.1 
- [x] What is the output of ``pip freeze`` command.
```
arandr==0.1.9
asn1crypto==0.24.0
backports.functools-lru-cache==1.5
beautifulsoup4==4.7.1
bs4==0.0.1
certifi==2019.6.16
click==6.7
configparser==3.5.0b2
cryptography==2.3
entrypoints==0.3
enum34==1.1.6
fuzzyfinder==2.1.0
httplib2==0.13.0
idna==2.6
ipaddress==1.0.17
keyring==17.1.1
keyrings.alt==3.1.1
kube-shell==0.0.23
kubernetes==2.0.0
lxml==4.3.3
oauth2client==4.1.3
prompt-toolkit==1.0.16
pyasn1==0.4.5
pyasn1-modules==0.2.5
pycairo==1.16.2
pycrypto==2.6.1
Pygments==2.4.2
PyGObject==3.32.0
python-dateutil==2.8.0
pyxdg==0.25
PyYAML==5.1.1
rsa==4.0
SecretStorage==2.3.1
six==1.12.0
snxvpn==1.2
soupsieve==1.9
urllib3==1.25.3
wcwidth==0.1.7
websocket-client==0.56.0
```",Annoying autocompletion while commenting,2019-09-10 17:07:46,
102,1098,"## Description
Could you please explain what do I do wrong?
I tried to install pgcli as written at https://www.pgcli.com/
```
pip install pgcli
```
also tried with sudo
```
sudo pip install pgcli
```
in both cases it failed as
```
Collecting pgcli
  Downloading https://files.pythonhosted.org/packages/5a/2a/9821c4a30d79fafdefeff7b071639b0968e1d54710430f2da16f8124fc37/pgcli-2.1.1.tar.gz (115kB)
    100% |████████████████████████████████| 122kB 1.1MB/s 
Requirement already satisfied: Pygments>=2.0 in /home/serg/.local/lib/python2.7/site-packages (from pgcli) (2.4.2)
Collecting cli_helpers[styles]>=1.2.0 (from pgcli)
  Downloading https://files.pythonhosted.org/packages/b1/7e/f2658b0e7cb3d4ab75d4dd5c275605ae89e56ba889dc086a0aefe6a89048/cli_helpers-1.2.1-py2-none-any.whl
Requirement already satisfied: click>=4.1 in /home/serg/.local/lib/python2.7/site-packages (from pgcli) (6.7)
Collecting configobj>=5.0.6 (from pgcli)
  Downloading https://files.pythonhosted.org/packages/64/61/079eb60459c44929e684fa7d9e2fdca403f67d64dd9dbac27296be2e0fab/configobj-5.0.6.tar.gz
Collecting humanize>=0.5.1 (from pgcli)
  Downloading https://files.pythonhosted.org/packages/8c/e0/e512e4ac6d091fc990bbe13f9e0378f34cf6eecd1c6c268c9e598dcf5bb9/humanize-0.5.1.tar.gz
Collecting pgspecial>=1.11.5 (from pgcli)
  Downloading https://files.pythonhosted.org/packages/0f/32/0a9808afefbf7a723be123065031089f51d1d6ff3f2595a10d8e7561ed6c/pgspecial-1.11.7.tar.gz (62kB)
    100% |████████████████████████████████| 71kB 986kB/s 
Collecting prompt_toolkit<2.1.0,>=2.0.6 (from pgcli)
  Downloading https://files.pythonhosted.org/packages/c8/ab/10d2c114828bd20ca0d757acee37ab5a7bae588139739b24d6cd3f45f8de/prompt_toolkit-2.0.9-py2-none-any.whl (337kB)
    100% |████████████████████████████████| 337kB 725kB/s 
Collecting psycopg2>=2.7.4 (from pgcli)
  Downloading https://files.pythonhosted.org/packages/5c/1c/6997288da181277a0c29bc39a5f9143ff20b8c99f2a7d059cfb55163e165/psycopg2-2.8.3.tar.gz (377kB)
    100% |████████████████████████████████| 378kB 597kB/s 
    Complete output from command python setup.py egg_info:
    running egg_info
    creating pip-egg-info/psycopg2.egg-info
    writing pip-egg-info/psycopg2.egg-info/PKG-INFO
    writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt
    writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt
    writing manifest file 'pip-egg-info/psycopg2.egg-info/SOURCES.txt'
    Error: You need to install postgresql-server-dev-NN for building a server-side extension or libpq-dev for building a client-side application.
    
    
    ----------------------------------------
Command ""python setup.py egg_info"" failed with error code 1 in /tmp/pip-install-aXjlLh/psycopg2/

```
## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.
Ubunu 19.04
- [ ] Please provide your CLI version.
no cli (just try to install it)
- [ ] What is the output of ``pip freeze`` command.
```
arandr==0.1.9
asn1crypto==0.24.0
backports.functools-lru-cache==1.5
beautifulsoup4==4.7.1
bs4==0.0.1
certifi==2019.6.16
click==6.7
configparser==3.5.0b2
cryptography==2.3
entrypoints==0.3
enum34==1.1.6
fuzzyfinder==2.1.0
httplib2==0.13.0
idna==2.6
ipaddress==1.0.17
keyring==17.1.1
keyrings.alt==3.1.1
kube-shell==0.0.23
kubernetes==2.0.0
lxml==4.3.3
oauth2client==4.1.3
prompt-toolkit==1.0.16
pyasn1==0.4.5
pyasn1-modules==0.2.5
pycairo==1.16.2
pycrypto==2.6.1
Pygments==2.4.2
PyGObject==3.32.0
python-dateutil==2.8.0
pyxdg==0.25
PyYAML==5.1.1
rsa==4.0
SecretStorage==2.3.1
six==1.12.0
snxvpn==1.2
soupsieve==1.9
urllib3==1.25.3
wcwidth==0.1.7
websocket-client==0.56.0
```","Installation fails with Command ""python setup.py egg_info"" failed with error code 1
pgcli depends on psycopg2, and by default, we specify dependency on source package, not the wheels. To build the source package, you need pg_config binary, and that's probably missing. You could try this workaround to force installing binary distribution of psycopg2:

https://github.com/dbcli/pgcli/issues/1080#issuecomment-520952176

Let me know if that helps.
mentioned workaround works, thanks
Good! I'm going to close the issue.
@j-bennet may be it makes sense to mention this workaround on the page with installation instructions?
Added those to install instructions:

https://www.pgcli.com/install
Te falta el paquete libpq-dev
solo tipea
sudo apt install libpq-dev
> Te falta el paquete libpq-dev
> solo tipea
> sudo apt install libpq-dev

This solved my issue. Thank you!!!",2019-09-09 22:11:14,2019-09-10 17:42:47
103,1097,"## Description
<!--- Describe your changes in detail. -->

Do not try to get pid when connecting to pgbouncer.

Attempt to fix #1093 .

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Another attempt to fix pgbouncer error (1093.)
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=h1) Report
> Merging [#1097](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/88b829aa824deef1166e01ee5fa0ab8813e25cac?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1097/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1097      +/-   ##
==========================================
- Coverage   84.48%   84.45%   -0.04%     
==========================================
  Files          21       21              
  Lines        2508     2509       +1     
==========================================
  Hits         2119     2119              
- Misses        389      390       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1097/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.16% <66.66%> (-0.27%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=footer). Last update [88b829a...8ccf424](https://codecov.io/gh/dbcli/pgcli/pull/1097?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-09-05 03:01:03,
104,1096,"## Description
SyntaxWarnings with Python 3.8

## Your environment

- [x] Windows 10, Python 3.8b3
- [x] pgcli 2.1.1.

```
c:\python\lib\site-packages\pgspecial\dbcommands.py:1504: SyntaxWarning: invalid escape sequence \d
  status.append(""Number of child tables: %d (Use \d+ to list""
c:\python\lib\site-packages\pgspecial\main.py:58: SyntaxWarning: invalid escape sequence \p
  'A limited version of traditional \pset', arg_type=PARSED_QUERY)
c:\python\lib\site-packages\pgspecial\main.py:127: SyntaxWarning: invalid escape sequence \h
  message += ""\nTry \h with no arguments to see available help.""
c:\python\lib\site-packages\pgspecial\iocommands.py:21: SyntaxWarning: invalid escape sequence \e
  """"""
c:\python\lib\site-packages\pgspecial\iocommands.py:50: SyntaxWarning: invalid escape sequence \s
  match = re.match(""(.*?)[\s]*\\\\watch (\d+);?$"", command)
c:\python\lib\site-packages\pgspecial\iocommands.py:65: SyntaxWarning: invalid escape sequence \e
  pattern = re.compile('(^\\\e|\\\e$)')
c:\python\lib\site-packages\pgspecial\iocommands.py:176: SyntaxWarning: invalid escape sequence \d
  match = re.search('\\$\d+', query)
```","SyntaxWarnings with Python 3.8
It looks to me that the issue has probably existed all the time but only Python 3.8 issues that warning. That issue could have easily been intercepted using for instance `pylint` (""Anomalous backslash in string: '\e'. String constant might be missing an r prefix."")
@thorstenkampe Thank you for testing this in Python 3.8. 

Would you be open to sending a PR with your suggested fix? 
The error is actually in `pgspecial`. With your consent I'm going to clone `pgspecial`, apply the fix and create a pull request.
I had a look at the warnings: the one in `dbcommands.py` is trivial to fix but the ones in `main.py` are not simple strings. They are assembled from throughout `main.py`. Same goes for `iocommands.py`. There are already triple backslashes`\\\` in those strings. Someone who really knows about the desired output needs to have a look at it, sorry.
@thorstenkampe Can you open the PR and tag some lines for me to take a look? 

I'll try to get python 3.8 installed and have a look.
`pgspecial` 1.11.6 and 1.11.7 have been released in quick succession. I can't reproduce the issue anymore.",2019-09-01 08:07:39,2019-09-03 06:30:41
105,1095,"## Description
add optional but default squash merge request to PULL_REQUEST_TEMPLATE

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.","add optional but default squash merge request to PULL_REQUEST_TEMPLATE
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1095?src=pr&el=h1) Report
> Merging [#1095](https://codecov.io/gh/dbcli/pgcli/pull/1095?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/b2ebe0e95c6b9f28574804d5f1ea8d689ccd5211?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1095/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1095?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1095   +/-   ##
=======================================
  Coverage   84.55%   84.55%           
=======================================
  Files          21       21           
  Lines        2519     2519           
=======================================
  Hits         2130     2130           
  Misses        389      389
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1095?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1095?src=pr&el=footer). Last update [b2ebe0e...f704bcb](https://codecov.io/gh/dbcli/pgcli/pull/1095?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Why not disallow merge commits instead? Is there a reason we want those?
I'm not sure if it's possible to disallow merge commits on github. But I guess you mean why I've made it optional. There are use cases for merge commits (like multiple authors, nicely crafted commits etc) and I'd like to warn contributors that their commits will be squashed.
We can disable merge commits in repo settings:

![image](https://user-images.githubusercontent.com/637013/64049192-df7aad00-cb28-11e9-9ac3-ecc78fa55f1a.png)

I wish there was a way to choose the default merge button option, but it does not look like it. Even so, I wrote to github support and asked the question, let's see what they say.
Good find! Looking forward to the support reply.
@meeuw Well that took a while but here is the response I got:

> The button will default to whatever settings you enable from top to bottom. We currently have feature request from other customers asking for the ability to set the default merge button and I have added you to the list of customers requesting as well. I can't say when this will be available as our roadmap is not publicly visible, so I recommend that you keep an eye on the GitHub Blog and our social media feeds for the latest announcements about new features. Please let me know if you have any other questions.

Sounds like right now there's no way to make one option default, without disabling any of them.

I'm still in favor of disabling merge commits. I don't remember any cases of them being specifically useful to us. What do you think?
Ok, let's start with asking nicely. Hopefully Github will add the ""default merge button"" feature at some point.",2019-08-30 07:26:49,2019-09-28 02:34:35
106,1094,"…xtra queries.

## Description
<!--- Describe your changes in detail. -->

Possibly fix https://github.com/dbcli/pgcli/issues/1093.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Get server params, such as is_superuser and server_version, without e…
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=h1) Report
> Merging [#1094](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/b2ebe0e95c6b9f28574804d5f1ea8d689ccd5211?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1094/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1094      +/-   ##
==========================================
- Coverage   84.55%   84.48%   -0.07%     
==========================================
  Files          21       21              
  Lines        2519     2508      -11     
==========================================
- Hits         2130     2119      -11     
  Misses        389      389
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1094/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.42% <100%> (-0.52%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=footer). Last update [b2ebe0e...04a74fc](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=h1) Report
> Merging [#1094](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/b2ebe0e95c6b9f28574804d5f1ea8d689ccd5211?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1094/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1094      +/-   ##
==========================================
- Coverage   84.55%   84.48%   -0.07%     
==========================================
  Files          21       21              
  Lines        2519     2508      -11     
==========================================
- Hits         2130     2119      -11     
  Misses        389      389
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1094/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.42% <100%> (-0.52%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=footer). Last update [b2ebe0e...04a74fc](https://codecov.io/gh/dbcli/pgcli/pull/1094?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks pretty straightforward. Is this ready to merge? 
I don't know if it fixes the `pgbouncer` issue (https://github.com/dbcli/pgcli/issues/1093). Otherwise it's ready to merge.
I'm fairly certain this will work because the suggestion made in the pgbouncer issue did say that libpq has these attributes available and looks like you're getting it from the connection object which is from libpq. 

Merging. :tropical_drink: ",2019-08-28 15:27:38,2019-09-02 19:36:16
107,1093,"## Description
I'm trying to connect to [`pgbouncer`](https://github.com/pgbouncer/pgbouncer) admin panel using pgcli, but the result is:

```
$ pgcli -h localhost -p 6432 -u cs pgbouncer
/home/br0ke/.local/lib/python2.7/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use ""pip install psycopg2-binary"" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.
  """""")
Password for cs: 
invalid command 'SHOW ALL', use SHOW HELP;
```

and then `pgcli` exits with error code. I'm able to connect to another actual databases proxied through pgbouncer, but not to `pgbouncer` virtual database. It seems that this virtual database lacks some functionality needed by `pgcli`.

I use `pgbouncer version 1.9.0`.

## Your environment
- [x] Please provide your OS and version information.
Linux, Fedora 30.
```
$ uname -a
Linux PC-004 5.2.9-200.fc30.x86_64 #1 SMP Fri Aug 16 21:37:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```

- [x] Please provide your CLI version.
`Version: 2.0.2`

- [x] What is the output of ``pip freeze`` command.
```
$ pip freeze
DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.
backports.csv==1.0.6
backports.ssl-match-hostname==3.7.0.1
bernhard==0.2.6
bottle==0.12.16
cassandra-driver==3.17.1
certifi==2018.11.29
chardet==3.0.4
cli-helpers==1.1.0
Click==7.0
configobj==5.0.6
CouchDB==1.2
dbus-python==1.2.8
docker==4.0.1
elasticsearch==7.0.1
enum-compat==0.0.2
enum34==1.1.6
futures==3.2.0
Glances==3.1.0
humanize==0.5.1
idna==2.8
influxdb==5.2.2
ipaddress==1.0.22
kafka-python==1.4.6
netifaces==0.10.9
nvidia-ml-py3==7.352.0
paho-mqtt==1.4.0
pbkdf2==1.3
pgcli==2.0.2
pgspecial==1.11.5
pika==1.0.1
pipenv==2018.11.26
ply==3.11
potsdb==1.0.3
prometheus-client==0.6.0
prompt-toolkit==2.0.7
protobuf==3.7.1
psutil==5.6.2
psycopg2==2.7.6.1
pwquality==1.4.0
py-cpuinfo==5.0.0
pyasn1==0.4.5
pycairo==1.18.1
pycryptodomex==3.8.1
pygal==2.4.0
Pygments==2.3.1
PyGObject==3.32.2
pymdstat==0.4.2
pysmi==0.3.4
pysnmp==4.4.9
pystache==0.5.4
python-dateutil==2.8.0
pytz==2019.1
pyxdg==0.26
pyzmq==18.0.1
requests==2.22.0
rpm==4.14.2.1
scandir==1.10.0
setproctitle==1.1.10
six==1.12.0
sqlparse==0.2.4
statsd==3.3.0
tabulate==0.8.2
terminaltables==3.1.0
typing==3.6.6
urllib3==1.25.2
vboxapi==1.0
virtualenv==16.2.0
virtualenv-clone==0.5.0
wcwidth==0.1.7
websocket-client==0.56.0
wifi==0.3.8
zeroconf==0.19.1
```
","Can't connect to pgbouncer database
Issue in pgbouncer repo: https://github.com/pgbouncer/pgbouncer/issues/409
PgBouncer devs closed the issue. They say that `pgcli` shouldn't make `SHOW ALL` query.
@and-semakin Thank for following that up with pgbouncer. I've asked the dev about an alternative. If I don't hear anything back I'll change the SHOW ALL query to be an opportunistic query and recover gracefully when we can't make that query.
@amjith Thank you for quick response and for awesome pgcli tool! I look forward to when I can use it to manage pgbouncer pool!
@amjith and @and-semakin,

I think the developer in pgbouncer was talking about this way to get extra parameters from connection:

http://initd.org/psycopg/docs/connection.html#connection.get_parameter_status

I did a quick experiment in a branch and it seems to work just fine. Here is the PR (still WIP):

https://github.com/dbcli/pgcli/pull/1094

In fact, I was also able to get rid of an extra query to retrieve server version.

I suggest you try out the branch, and we will see if all tests pass with the change.
Wow, awesome, @j-bennet! Will try to use your branch!
Here is how to install pgcli from git branch:

`pip install git+https://github.com/dbcli/pgcli.git@j-bennet/superuser-redundant-query`
@and-semakin Did you have the chance to try the fix (https://github.com/dbcli/pgcli/pull/1094)?
@j-bennet I've just installed pgcli from master, and tried again to connect to `pg_bouncer`, but with no success. Another error occurred:

```
(pgcli_test) ~/g/pgcli_test $ pgcli --version
Version: 2.1.1
(pgcli_test) ~/g/pgcli_test $ 
(pgcli_test) ~/g/pgcli_test $ 
(pgcli_test) ~/g/pgcli_test $ 
(pgcli_test) ~/g/pgcli_test $ pgcli -h localhost -p 6432 -u cs pgbouncer
Password for cs: 
invalid command 'select pg_backend_pid()', use SHOW HELP;
```
Should I open another issue for new error?
Different error, but still an issue related to `pgbouncer`. I'll reopen this case.
@and-semakin Can you try and see if this version works:

`pip install git+https://github.com/dbcli/pgcli.git@j-bennet/pgbouncer-1093`
@j-bennet sure, I will check it today!
@j-bennet another error occurred once again:

```
(pgcli_test) ~/g/pgcli_test $ pip install git+https://github.com/dbcli/pgcli.git@j-bennet/pgbouncer-1093
...
Successfully installed ...
(pgcli_test) ~/g/pgcli_test $ pgcli --version
Version: 2.1.1
(pgcli_test) ~/g/pgcli_test $ pgcli -h localhost -p 6432 -u cs pgbouncer
Password for cs: 
invalid command 'SELECT NULL::date', use SHOW HELP;
```
Contents of `~/.config/pgcli/log`: https://gist.github.com/and-semakin/ec4c9431fd843ce0ecd918830f31f9bf
@and-semakin It's like playing a game of whack-a-mole. :) I finally gave up and installed `pgbouncer`. It should be easier to debug things this way. Still working on it.
@and-semakin I made multiple fixes in https://github.com/dbcli/pgcli/pull/1097. Please try the branch again. Thanks!
@j-bennet wow, it works just fine! I can connect and manage pgbouncer! It misses autocompletion for pgbouncer commands (i.e. `SHOW CLIENTS`), but I don't think that it is possible to get this data automatically at all.
There's a way, but not sure if it is worth the trouble. My branch was more of a ""quick fix"", just for things not to break. Next, I'll see if I can at least add ""dumb"" keyword completion for this case. Also, I decided to stick to checking for `is_pgbouncer`, vs `try/except` things. I think this ""virtual pgbouncer database"" should be treated like a special snowflake, because it really is.
Probably it would be useful to handle all the things in one shot (i.e. there is another promising PostgreSQL pooler: https://github.com/yandex/odyssey which also has its own ""virtual"" database). Maybe it doesn't worth it.
Connection error fixed in 2.2.0 (released). Not closing the issue since it's only a partial fix.",2019-08-26 07:58:18,
108,1092,"Opening this PR instead of https://github.com/dbcli/pgcli/pull/1079.

The original PR had some extra commits in it, and I could not find a way to get rid of them.

## Description
I added the changes requested in #1018 to show only the `row_limit` amount of rows if there isn't a LIMIT clause in the query. If LIMIT exists, the output is not truncated.
Also, I completely removed the warning message.

I don't know why some tests regarding output fail, I'll check that and try to fix it.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Issue 1018 display first 1k rows
@sebojanko Merged! Thank you for the PR. I tried to clean up the original one, but `git rebase` defeated me this time around.
Thanks! Sorry I couldn't find the time to add more tests.",2019-08-23 20:39:49,2019-08-23 20:44:37
109,1091,"…(#1084)""

This reverts commit 19c3e0eeb81f4a231d0ebfd2c18c47215f85e572.

## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Revert ""Add key bindings to consistently move up and down in history …
Why the revert?
I'm not sure if this is an intentional PR. Closing. ",2019-08-22 03:04:53,2019-09-02 19:37:55
110,1090,"## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
",Remove build dir before running sdist,2019-08-22 02:53:12,2019-08-22 02:55:43
111,1089,"## Description
Azure specific postgres databases cannot be set as DSN
Azure Postgres users are in the format of user@server_name, and the extra @ confuses pgcli
For example one entry in config
```db001 = postgres://admin@dev-db001:password@dev-db001.postgres.database.azure.com:5432/postgres?sslmode=require```

Running `pgcli -D db001` returns `invalid port number: ""password@dev-db001.postgres.database.azure.com:5432""`

## Your environment
Running on Windows 10, Debian 9.6 WSL
````
$ pgcli --version
Version: 2.1.1
````
pip freeze
```
adal==1.2.1
aiven-client==2.2.3
anaconda-client==1.7.2
ansible==2.8.4
arrow==0.13.1
asn1crypto==0.24.0
atomicwrites==1.3.0
attrs==19.1.0
bcrypt==3.1.6
braceexpand==0.1.2
certifi==2019.3.9
cffi==1.11.5
chardet==3.0.4
cli-helpers==1.2.0
Click==7.0
clyent==1.2.2
conda==4.6.14
configobj==5.0.6
cryptography==2.4.2
decorator==4.3.2
docopt==0.6.2
fvi==1.2.0
humanize==0.5.1
idna==2.8
inform==1.15.0
ipython-genutils==0.2.0
isodate==0.6.0
Jinja2==2.10
jmespath==0.9.4
jmespath-terminal==0.2.1
jsonschema==2.6.0
jupyter-core==4.4.0
MarkupSafe==1.1.0
more-itertools==7.0.0
msrest==0.6.6
msrestazure==0.6.0
nbformat==4.4.0
oauthlib==3.0.1
paramiko==2.4.2
pathspec==0.5.9
pg-activity==1.5.0
pgcli==2.1.1
pgspecial==1.11.5
pluggy==0.11.0
prompt-toolkit==2.0.9
psutil==5.6.2
psycopg2==2.7.7
psycopg2-binary==2.8.1
py==1.8.0
pyasn1==0.4.5
pycosat==0.6.3
pycparser==2.19
Pygments==2.3.1
PyJWT==1.7.1
PyNaCl==1.3.0
pyOpenSSL==18.0.0
PySocks==1.6.8
pytest==4.4.2
python-dateutil==2.7.5
pytz==2018.9
PyYAML==3.13
requests==2.21.0
requests-oauthlib==1.2.0
ruamel-yaml==0.15.46
setproctitle==1.1.10
shlib==1.1.0
six==1.12.0
sqlparse==0.3.0
tabulate==0.8.3
terminaltables==3.1.0
traitlets==4.3.2
urllib3==1.24.1
urwid==1.2.2
wcwidth==0.1.7
xmltodict==0.12.0
yamllint==1.15.0
```
","Pgcli incompatible with Azure Postgres username
Try use code `%40` instead `@` symbol in username",2019-08-21 15:43:24,
112,1088,"it would be nice, to have colors for the pgcli prompt available like the `psql` command has.

for example, this is my prompt in psqlrc which looks more appealing.

```
\set PROMPT1 '%[%33[%0;33m%] 🐘 %`date +""%H:%M:%S""` %[%33[%0;34m%]» %[%33[%0;31m%]%n%[%33[%0;33m%]@%[%33[%0;36m%]%M:%> %[%33[%0;35m%]%x%# %[%33[%0;0m%]'
\set PROMPT2 '%[%33[%0;33m%] 🐘 %R » %[%33[%0;0m%]'
```

the `%` allows you to pass vt color codes thrugh with the `%[` `%]` syntax and even better, with 
 
    %`date`

you can execute commands, which results in a nice colored prompt with the current time.

can we have this in pgcli too?","colored prompt and commands executed
i tried to hack that change in like this:

```diff
diff --git a/pgcli/main.py b/pgcli/main.py
index 903966f4..3266f6a8 100644
--- a/pgcli/main.py
+++ b/pgcli/main.py
@@ -82,6 +82,7 @@ import psycopg2
 from collections import namedtuple

 from textwrap import dedent
+from prompt_toolkit.formatted_text import ANSI

 # Ref: https://stackoverflow.com/questions/30425105/filter-special-chars-such-as-color-codes-from-shell-output
 COLOR_CODE_REGEX = re.compile(r""\x1b(\[.*?[@-~]|\].*?(\x07|\x1b\\))"")
@@ -777,9 +778,11 @@ class PGCli(object):
                 prompt_format == self.default_prompt
                 and len(prompt) > self.max_len_prompt
             ):
+
                 prompt = self.get_prompt(""\\d> "")

-            return [(""class:prompt"", prompt)]
+
+            return ANSI(prompt)

         def get_continuation(width, line_number, is_soft_wrap):
             continuation = self.multiline_continuation_char * (width - 1) + "" ""
@@ -1019,7 +1022,11 @@ class PGCli(object):

     def get_prompt(self, string):
         # should be before replacing \\d
+
+        string = '\x1b[33m 🐘 \\t+ \x1b[34m» \x1b[31m\\u\x1b[33m@\x1b[36m\\H:\\p/\\d \x1b[35m» \x1b[0m'
+
         string = string.replace(""\\dsn_alias"", self.dsn_alias or """")
+        string = string.replace(""\\t+"", self.now.strftime(""%H:%M:%S""))
         string = string.replace(""\\t"", self.now.strftime(""%x %X""))
         string = string.replace(""\\u"", self.pgexecute.user or ""(none)"")
         string = string.replace(""\\H"", self.pgexecute.host or ""(none)"")

```

i added the `\t+` for timestamps like `16:45:21` which fits my needs and i do not need to add an external program. the prompt itself is hardcoded with colorcodes inserted via `\x1b[33m` for example.

the reason i hardcoded it, is that the escape character is lost when defined in the config and i could not bother, to figure out how to work around this.

maybe someone could pick this up as a startingpoint to use colors for nice promps!
colored prompts where added in 36605174a4b1aa45fd46788e6cb61c970185b9ea thanks!
Do you think the pull request will be included in the released version? Would be nice to have colored prompts.
its already been done! check out the last releases.
It's not working for me in that version, the characters from the code above just appear as they are. Could you give an example of a couple of different colors in your prompt and I can try that in mine to see if it works?
You can install directly from the master branch using:

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Here's an example of colored prompt in the config: 

```
prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
```

`\x1b[` followed by the color code. `35m` for purple, `32m` for green and `36m` for cyan. 

This is what the prompt looks like: 

![image](https://user-images.githubusercontent.com/49260/77861087-c70a6800-71c7-11ea-84fa-932bbd0e138b.png)

",2019-08-13 15:33:27,2020-03-29 15:04:57
113,1087,"Is there a way to make it, so pressing Enter would just pick up very first suggestion and use it? It's really annoying to have to press `→` and then Enter.","Autocomplete on Enter
This feature might end up doing more harm than good. In multiline mode, `enter` to complete the first choice would be annoying and inconvenient. In case of a destructive query (`DROP` or `DELETE`, it would make it too easy to select the wrong suggestion. I don't think we want to do this.
Can't we have a flag in the settings that's ignored in multiline mode?
We try very hard not to add extra config settings. Also, in addition to multiline mode, this would require special handling for destructive queries, and I'm sure there are other use cases I'm not thinking about right now where accidental first choice would be bad. There's not enough benefit to justify the potential danger.
Sorry to revive this old thread, but would it be that bad if, with the option manually set by the user, pressing ENTER would just type in the first suggestion but not actually execute it?

That would allow me to work with `pgcli` similarly to how I work with `DBeaver`, right now when I switch between them it feels really confusing.
@telmotrooper so basically you'd like Enter to work the same as Tab key?
Optionally, yes. 🙂️
@telmotrooper I have a branch with the change you requested. Can you give it a try and see if it works as you expect? Here is the command to install from branch:

`pip install git+https://github.com/dbcli/pgcli.git@j-bennet/enter-accept-first`
@telmotrooper Did you have the cnagce to try pgcli from the branch?
@j-bennet Hey, just tried it out in the branch. That's exactly what I had in mind! Thank you for implementing it. It feels way more natural to switch between DBeaver and pgcli this way.

I just think that, when this is enabled, **multiline mode should also select the first suggestion** on Enter (right now it still requires me to press tab first).

I'll be glad if you guys decide to implement it as a toggleable feature in the main branch, for now I'll be using the feature branch. 😁️
@telmotrooper Try reinstalling from branch - I made a change so that it should work in multiline mode as well. It would be great if you can run this branch for a while and report back whether or not you see any unexpected / weird keybinding behaviors.
@j-bennet Will do. Thanks!
@telmotrooper did the change work for you?
Actually I'm on vacation from work and haven't been using pgcli much, I had seem some weird behavior regarding multiline mode but I gotta take the time to write the instructions to reproduce. Sorry for taking so long!

By the way, @j-bennet, where do contributors usually discuss development? I wrote a message on Gitter early this month but haven't received any answers.
@telmotrooper I think communicating via Github issues is best. Most of us (maintainers) don't often check gitter.
@j-bennet Hey, been trying to test it this week. I had installed pgcli in development mode before (so when you edit the code it reflects your current installation) here in the company computer (which I was using at home because of the COVID-19 isolation).

Installing your branch with `pip install git+https://github.com/dbcli/pgcli.git@j-bennet/enter-accept-first` seems not to change anything (but I do remember it worked before!). I uninstalled the package from AUR and removed all settings related to pgcli I could find in my home directory, but I can't get it to work. Do you have any suggestion? Sorry for bothering you with that.


@telmotrooper hmm. I just tried this branch again (rebased on top of master) and it still works for me. Are you able to install it into a new virtualenv?

```
python -m venv /path/to/my-new-venv
source /path/to/my-new-venv/bin/activate
pip install git+https://github.com/dbcli/pgcli.git@j-bennet/enter-accept-first
```
Okay, sorry for the long delay. Had some time to test this at home today.

Mostly it seems to work nice both in single and multi line mode, but I noticed that if I type `*` and press ENTER, it selects the completion alternative and ENTER again makes it go away.

I recorded a short video:
![Short video showing issue](https://media.giphy.com/media/L3j8t3gOYVsYW93vOX/giphy.gif)
This does not seem to happen with other completions.

I also noticed that even if a previous command is suggested, auto complete will still complete to the first entry in the list:
![Short video showing this other issue](https://media.giphy.com/media/Za2CED4gN2sPeURKPf/giphy.gif)
That, even if a bit counter intuitive, isn't really an issue since pressing Right Arrow will still get to the suggestion.

I remember back when I first tried I had some issue with multi line, but I can't seem to reproduce it now. Mostly I think the current state of the branch is already pretty useful for someone coming from DBeaver, we would just need a setting somewhere to change to this behavior.

By the way, thank you for implementing it. 🙂️",2019-08-08 19:38:48,2019-08-08 21:01:48
114,1086,"## Description
`\d <tablename>` is way to slow:
```
depl1> \d company                                                        
+------------------+--------------------------+---------------------------------------------+
| Column           | Type                     | Modifiers                                   |
|------------------+--------------------------+---------------------------------------------|
| id               | uuid                     |  not null default public.uuid_generate_v4() |
| created          | timestamp with time zone |  not null default now()                     |
| rows ommitted ...  |                     |                                                           |
+------------------+--------------------------+---------------------------------------------+
Indexes:
    ""provider_pkey"" PRIMARY KEY, btree (id)
   indexes ommited...
Time: 57.093s (57 seconds), executed in: 57.083s (57 seconds)
```
It took a minute to complete, while psql with the same database and same table completes in a couple of seconds
## Your environment
<!-- This gives us some more context to work with. -->

```
denis:~ $ pgcli --version
/home/denis/anaconda3/lib/python3.7/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use ""pip install psycopg2-binary"" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.
  """""")
Version: 2.0.2
denis:~ $ uname -a
Linux denis-Aspire-VN7-791G 4.15.0-45-generic #48~16.04.1-Ubuntu SMP Tue Jan 29 18:03:48 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
denis:~ $ 
```
- [ ] What is the output of ``pip freeze`` command.
","\d takes a huge time to complete
@gantsevdenis If you execute the command a few times, do you see the same slow response every time, or is it intermittent?

Also, is the database local or remote?
Hi sorry for the delay
The performance varies wildly, it goes from 6 seconds to 1 min. However, requesting `\d` twice does not speed up the second time. So there are days where it's consistently slow, and there are days where it's consistently kinda fast
The database is remote, accessed through a VPN. I wouldn't account for network speed only though, because I ve made multiple attempts, and my distance from server (Europe vs US) doesn't seem to correlate with response time (at least not to a naked eye obviously...)

`psql`'s `\d` on the other hand, is consistently very fast (both from Europe and US)

Your log file might help us figure out what takes so long. Can you please do the following:

* set `log_level = DEBUG` in `~/.config/pgcli/config`
* restart pgcli
* run the `\d` command
* attach the log file (`~/.config/pgcli/log` to this issue.

After this is done, feel free to drop log level back to `INFO`.

Thank you for your patience! I hope we solve this eventually.
From your log file, it looks like pgcli does way too many queries on system database to repeatedly retrieve information about your table. I think this may be related to the issue fixed in this PR:

https://github.com/dbcli/pgspecial/pull/80

This fix was previously unreleased. I just released a new version of `pgspecial` that has it included. Please try updating `pgspecial`:

```
pip install -U pgspecial
```

You should see version 1.11.6 installed:

```
$ pip freeze | grep pgspecial
pgspecial==1.11.6
```

`pgcli` will need to be restarted for changes to take effect. Let me know if it resolves the problem.
I confirm I have now installed pgspecial 1.11.6 in the same environment as pgcli, but after trying it again, it took 32 seconds
Can you attach your log file again?
Ok, I understood the pb.. I wans't attentive enough, and actually `pgcli` was installed in `~/anaconda3/bin` instead of `~/anaconda3/envs/myenv/bin`, so even when I switched environments, it didn't affect the context for `pgcli`

I have removed the offending executable, so now it is really executed in virtual env with `pgspecial==1.11.6`.
After executing `\d table` it only took `0.9 seconds`, so I think the ticket could be closed
@gantsevdenis This is great news, thanks for letting us know! Closing the issue.

🎉 
Fixed in https://github.com/dbcli/pgspecial/pull/80.",2019-08-07 09:37:06,2019-09-02 17:36:08
115,1085,"## Description
I was reading the [tutorial](https://github.com/dbcli/pgcli/blob/master/DEVELOP.rst), trying to installing pgcli from the source code.

During the pip installation (pip install -e .), I received the following error:

```
ld: library not found for -lssl

clang: error: linker command failed with exit code 1 (use -v to see invocation)

error: command 'cc' failed with exit status 1
```

After googling a bit, I found [this](https://stackoverflow.com/questions/26288042/error-installing-psycopg2-library-not-found-for-lssl) StackOverflow question. I tried most of the answers (openssl and xcode were installed and updated), but this [answer](https://stackoverflow.com/a/56228387) turns out to solve the problem.

I'm reporting this because I'm not sure this is a known problem (or if it's a problem after all).

## Your environment

- I'm using macOS, version 10.14.4
- I'm using Terminal, version 2.9.4 (421.1.1)
- Output of ``pip freeze`` command.

aspy.yaml==1.3.0
attrs==19.1.0
autopep8==1.3.3
behave==1.2.6
certifi==2019.6.16
cfgv==2.0.1
chardet==3.0.4
click==6.7
codecov==2.0.15
coverage==4.3.4
docutils==0.15.2
filelock==3.0.12
identify==1.4.5
idna==2.8
importlib-metadata==0.19
mock==3.0.5
nodeenv==1.3.3
packaging==19.1
parse==1.12.0
parse-type==0.5.2
pexpect==3.3
pkginfo==1.5.0.1
pluggy==0.12.0
pre-commit==1.17.0
py==1.8.0
pycodestyle==2.5.0
pyparsing==2.4.2
pytest==3.0.7
PyYAML==5.1.2
requests==2.22.0
requests-toolbelt==0.9.1
six==1.12.0
toml==0.10.0
tox==3.13.2
tqdm==4.32.2
twine==1.11.0
urllib3==1.25.3
virtualenv==16.7.2
zipp==0.5.2
","Problems instally pgcli from source
I haven't personally encountered this issue but I develop using Linux.

There's an internal discussion going on about using psycopg2-binary instead of psycopg2 for pgcli. Hopefully this won't be a long term issue. 

/cc @j-bennet ",2019-08-04 20:02:43,
116,1084,"## Description
<!--- Describe your changes in detail. -->
Closes https://github.com/dbcli/pgcli/issues/1004


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Add key bindings to consistently move up and down in history
Looks good, and seems to work just fine. Please add your contribution to changelog and authors file, so I can merge it. We ask for formatting things with `black` as well, but I see your PR does not fail the build check.

Thank you!

https://github.com/dbcli/pgcli/blob/master/changelog.rst
https://github.com/dbcli/pgcli/blob/master/AUTHORS

🌟 
Added requested changelog and authors entries.
Lovely! Merging.
Thank you for the PR! 🍒 
Thank you!",2019-07-26 22:10:24,2019-07-29 20:00:34
117,1083,"_Also user shown in password prompt is incorrect_

## Description
`~/.pg_service` definitions should not override user flags (`-U, -u, --user, --username`).  Example where pg_service sets the user field to ""admin""
```
$ pgcli service=dev-db --user guest
Password for guest:
FATAL:  Password authentication failed for user ""admin""
```
For reference `psql service=dev-db guest` will log in as guest.  I also noticed the prompt will use my linux user and not the user defined in `~/.pg_service` if no user is manually specified.

## Your environment
Arch linux
```
$ python --version
Python 3.7.3
$ pgcli --version
Version: 2.1.1
$ pip freeze
ansible==2.8.2
anytree==2.6.0
appdirs==1.4.3
arrow==0.14.2
asn1crypto==0.24.0
attrs==19.1.0
backports.csv==1.0.7
bcrypt==3.1.7
beautifulsoup4==4.8.0
borgbackup==1.1.10
btrfsutil==1.1.1
CacheControl==0.12.5
cached-property==1.5.1
certifi==2019.6.16
cffi==1.12.3
chardet==3.0.4
cli-helpers==1.2.0
Click==7.0
colorama==0.4.1
configobj==5.0.6
cryptography==2.7
decorator==4.4.0
distlib==0.2.9
distro==1.4.0
docker==4.0.2
docker-compose==1.24.1
docker-pycreds==0.4.0
dockerpty==0.4.1
docopt==0.6.2
greenlet==0.4.15
html5lib==1.0.1
humanize==0.5.1
idna==2.8
isc==2.0
Jinja2==2.10.1
jsonschema==3.0.1
kitchen==1.2.5
lit==0.8.1.dev0
lockfile==0.12.2
louis==3.10.0
lxml==4.3.4
MarkupSafe==1.1.1
msgpack==0.6.1
oauthlib==3.0.1
packaging==19.0
paramiko==2.4.2
pep517==0.5.0
pew==1.2.0
pgcli==2.1.1
pgspecial==1.11.5
Pillow==6.1.0
pipenv==2018.11.15.dev0
ply==3.11
pocket==0.3.6
progress==1.5
prompt-toolkit==2.0.9
psycopg2==2.8.3
pwquality==1.4.0
pyasn1==0.4.5
pycparser==2.19
pyfiglet==0.8.post0
Pygments==2.4.2
PyGObject==3.32.2
PyNaCl==1.3.0
pynvim==0.3.2
PyOpenGL==3.1.0
pyparsing==2.4.0
pyPEG2==2.15.2
PyQt4-sip==4.19.16
PyQt5==5.13.0
PyQt5-sip==4.19.18
PyQtWebEngine==5.13.0
pyrsistent==0.15.3
PySocks==1.7.0
python-dateutil==2.8.0
pytoml==0.1.21
pytz==2019.1
PyYAML==5.1.1
qutebrowser==1.7.0
rainbowstream==1.4.0
ranger-fm==1.9.2
Reflector==2019.3.8.1.54.39
requests==2.22.0
requests-oauthlib==1.2.0
retrying==1.3.3
rtv==1.26.0
setproctitle==1.1.10
sip==4.19.18
six==1.12.0
soupsieve==1.9.2
sqlparse==0.2.4
tabulate==0.8.3
tasklib==1.1.0
team==1.0
terminaltables==3.1.0
texttable==1.6.2
twitter==1.18.0
tzlocal==1.5.1
urllib3==1.25.3
virtualenv==16.1.0
virtualenv-clone==0.5.3
wcwidth==0.1.7
webencodings==0.5.1
websocket-client==0.56.0
youtube-dl==2019.7.2
```
","-U should override service definitions
Close via https://github.com/dbcli/pgcli/pull/1155.

Available in 3.0.0.",2019-07-25 15:24:29,2020-06-29 22:42:46
118,1082,"## Description
pgcli crashes with segmentation fault on some queries:
```
goszakupki@(none):goszakupki> select * from purchase where publish_date > '2019-07-20'::date;
[1]    54595 segmentation fault  pgcli -U goszakupki goszakupki
```
No error after removing where clause:
```
goszakupki@(none):goszakupki> select * from purchase limit 3;
...
```

## Your environment
<!-- This gives us some more context to work with. -->

- System Version: macOS 10.12.5 (16F73)
- pgcli Version: 2.1.1
- pip freeze: 
```
cli-helpers==1.2.1
Click==7.0
configobj==5.0.6
humanize==0.5.1
pgcli==2.1.1
pgspecial==1.11.5
prompt-toolkit==2.0.9
psycopg2==2.8.3
Pygments==2.4.2
setproctitle==1.1.10
six==1.12.0
sqlparse==0.3.0
tabulate==0.8.3
terminaltables==3.1.0
wcwidth==0.1.7
```
",Segfault on macos,2019-07-22 09:28:05,
119,1081,"## Description
When I am running pgcli and try to list functions using \df I get following error 
`column p.proisagg does not exist
LINE 9:                         WHEN p.proisagg THEN 'agg'
                                     ^
HINT:  Perhaps you meant to reference the column ""p.prolang"".`

I don't have any issues running the command in `psql`
## Your environment
Debian buster 10, Postgresql 11.4, pgcli 1.9.1. 

![pg_cli_error](https://user-images.githubusercontent.com/673820/61201899-37c72e00-a6e6-11e9-8aec-15eff11fd3a5.png)
","\df cannot list functions
this is due to changed pg catalog tables in version 11.0 but already fixed in pgcli. ( i believe since version 2.0 ? )
Can you try upgrading pgcli?

```
pip install -U pgcli
```",2019-07-15 07:52:28,2019-10-17 04:09:26
120,1080,"## Description
I tried to install your package from pip and got a usual `Error: pg_config executable not found.`
because I don't have `libpq` or `postgres-devel` packages.

I cloned your repo, replaced `psycopg2 >= 2.7.4` with `psycopg2-binary` and installed it with
`python setup.py install` command.
It works like a charm and not requires postgres stuff now.

How about to move to `psycopg2-binary`?

## Your environment
- [x] Please provide your OS and version information.
OS: Manjaro 18.0.4 Illyria
Kernel: x86_64 Linux 5.1.16-1-MANJARO
- [x] Please provide your CLI version.
pgcli==2.1.1
- [x] What is the output of ``pip freeze`` command.
Clean virtualenv with pgcli==2.1.1 installed","move to `psycopg2-binary`?
Related: https://github.com/dbcli/pgcli/pull/1060#issuecomment-497190181.
The proposed workaround in #1060 doesn't work as `pip install pgcli` fails with the above error.
I already commented on making `psycopg2-binary` the default choice here:

https://github.com/dbcli/pgcli/pull/1059#issuecomment-497193739

Honestly, I have no idea why `psycopg2` maintainers still do not recommend wheels as the default option. At this point, I would really like to switch back to wheels. But I have absolutely no way to tell how many people will be affected / have pgcli broken if we do that. And there seems to be no way to let the user choose which option he wants, source or binary, during pgcli installation.
This one worked for me as a workaround:
```
pip install pgcli --only-binary psycopg2
```
Interestingly psycopg2 recommends not using the binary version for production:  http://initd.org/psycopg/docs/install.html#binary-install-from-pypi

> 

> If you are the maintainer of a publish package depending on psycopg2 you shouldn’t use ‘psycopg2-binary’ as a module dependency. For production use you are advised to use the source distribution.

> Note

> The binary packages come with their own versions of a few C libraries, among which libpq and libssl, which will be used regardless of other libraries available on the client: upgrading the system libraries will not upgrade the libraries used by psycopg2. Please build psycopg2 from source if you want to maintain binary upgradeability. 

This makes sense, as annoying as it is.

",2019-07-13 15:26:54,2019-09-05 19:45:17
121,1079,"## Description
I added the changes requested in #1018 to show only the `row_limit` amount of rows if there isn't a LIMIT clause in the query. If LIMIT exists, the output is not truncated.
Also, I completely removed the warning message.

I don't know why some tests regarding output fail, I'll check that and try to fix it.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Issue 1018 display first 1k rows
It would be nice to print a warning in the output that we have chosen to truncate the output.
@sebojanko Please rebase your branch on top of master. Thanks!
Hi,
I finally took some time and fixed the tests and other issues.

The only thing I don't get is the Python 3.6 build failing as I don't see any failed tests. Can somebody help me with that?
Also, I'm not sure if my black formats as the project's black (that was the case in a past PR of mine). Feel free to reformat correctly, thanks.
Yes, your PR is failing the `black` check, sorry:

https://travis-ci.org/dbcli/pgcli/jobs/567856574#L732

This is something that `black` configuration in pyproject.toml is supposed to solve, but apparently it does not. Maybe I need to pin `black`:

https://github.com/dbcli/pgcli/blob/master/pyproject.toml

Bottom line, don't worry about `black`, I'll poke at it.
I checked `black` and found out I was using a globally installed `black` instead of a virtualenv one. I guess that's why it wasn't using the `.toml` configuration. Now everything's okay! I could add a few more tests if you'd like.

And thank you for the fast response and support!
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=h1) Report
> Merging [#1079](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f85642da67285a2b1d991d1d0970d261a715efb1?src=pr&el=desc) will **decrease** coverage by `0.25%`.
> The diff coverage is `60%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1079/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1079      +/-   ##
==========================================
- Coverage   84.81%   84.55%   -0.26%     
==========================================
  Files          21       21              
  Lines        2509     2519      +10     
==========================================
+ Hits         2128     2130       +2     
- Misses        381      389       +8
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1079/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `40% <60%> (+0.86%)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1079/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.47% <60%> (-0.23%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1079/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=footer). Last update [f85642d...1588450](https://codecov.io/gh/dbcli/pgcli/pull/1079?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Opened https://github.com/dbcli/pgcli/pull/1092 instead of this PR.",2019-07-11 15:11:34,2019-08-23 20:38:55
122,1078,"## Description
Changes related to issue #1019.
As advised in the ticket, I added a simple check. After I added this check, I got an error saying the variable `is_special` is undefined so I defined it and set it to `None`.
The output looked like this on my system:
```
sebo@(none):osm_test> ;                                                                                                                                                                                                                      
can't execute an empty query
Time: 0.002s
```

and now it looks like this:
```
sebo@(none):osm_test> ;                                                                                                                                                                                                                      

Time: 0.000s
```


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Issue 1019 stacktrace on empty query
Looks good! Merging. Thank you for the PR! 🍓 

P.S. `black` seemed to work differently on your computer than in travis, not sure what's up with that, but it's now fixed.",2019-07-11 15:05:50,2019-07-13 00:24:40
123,1077,"## Description
When the postgres method `jsonb_pretty` is used on a jsonb object that is larger than ~15-20 lines, then the result is cut off. Not sure if it is cut off from a certain number of characters or certain number of lines.
i.e.
```
test@localhost:main>  select jsonb_pretty(object) from table;
+-------------------------------------------------------------------+
| jsonb_pretty                                                      |
|-------------------------------------------------------------------|
| [                                                                 |
|     {                                                             |
|         ""sample"": ""1"",                                            |
|         ""this"": {                                                 |
|             ""does"": true,                                         |
|             ""not"": null,                                          |
|             ""output"": null,                                       |
|             ""properly"": null,                                     |
|             ""and"": null,                                          |
|             ""is"": null,                                           |
|             ""cut"": null                                           |
|         },                                                        |
|         ""off"": ""false"",                                           |
|         ""prematurely"": false,                                     |
|         ""unfortunately"": true                                     |
+-------------------------------------------------------------------+

```
## Your environment
Connected to a local postgres database

- [ ] Please provide your OS and version information.
Running Mac OS 10.14.5

- [ ] Please provide your CLI version.
pgcli version 2.1.1 (latest)

- [ ] What is the output of ``pip freeze`` command.
No output.

To be clear, this issue does **_not_** happen when using the native psql cli tool for postgres.","jsonb_pretty method buffer ending prematurely
I think it's not `jsonb_pretty` issue, I can reproduce it using only `select`
```sql
select (jsonb_field_with_big_json) from your_table
```
@CubixSystem Yes, after further use, I can also confirm this. Even a simple `\sf function_name` will cut off printing an entire function definition. It ends prematurely after a similar amount of characters that are outputted.  It seems that the method to print out pretty values in pgcli is limiting the amount of characters it outputs. 
``` sql

+------------------------------------------------------------+
| source                                                     |
|------------------------------------------------------------|
| CREATE OR REPLACE FUNCTION public.build_object()  |
|  RETURNS jsonb                                             |
|  LANGUAGE sql                                              |
| AS $function$                                              |
|   select jsonb_build_object(                               |
|     'item_1', jsonb_build_object('type', 'string'),        |
|     'item_2', jsonb_build_object('type', 'string'),        |
|     'item_3', jsonb_build_object('type', 'string'),        |
|     'item_4', jsonb_build_object('type', 'string'),        |
|     'item_5', jsonb_build_object('type', 'string'),        |
|     'item_6', jsonb_build_object('type', 'string'),        |
|     'item_7', jsonb_build_object('typ                      |  -- this just stop printing mid-function and ends
+------------------------------------------------------------+
```
Can you try upgrading `cli_helpers`? 
```
pip install -U cli_helpers
```

`cli_helpers` is a dependency we use to print tabulated output and we made some choices that started truncating the output prematurely. It is now fixed and we have released a new version. 
@amjith  I tried upgraded it but it hasn't solved the issue. 
``` 
~ : pip list
Package        Version
-------------- -------
cli-helpers    1.2.1
configobj      5.0.6
pip            19.1.1
setuptools     28.8.0
six            1.12.0
tabulate       0.8.3
terminaltables 3.1.0
wcwidth        0.1.7
```

Running the latest version 1.2.1.
I have a suspicion that pgcli is still using the old version of cli_helpers. The latest version of cli_helpers adds an ellipsis when it truncates the output which I don't see in your output. 

Can you try uninstalling pgcli and reinstalling it? 

```
pip uninstall pgcli
```

and then ensure that pgcli is gone by trying to launch pgcli. Sometimes you might have another pgcli installed via brew or apt or something.

```
pip install pgcli
```
I actually had it installed through `brew` and it looks like the formula had not been updated yet. And when i uninstalled and reinstalled it the issue persisted. I then uninstalled it using `brew` and reinstalled it through `pip` instead and that installed the latest version with that fix you mentioned (from `cli-helper 1.2.1`). Thanks for your help! @amjith 🎉 
Strange, I am running on the latest pgcli and cli-helpers installed through pip3, on Ubuntu 19.04 and running into a very similar issue, where my whole table is just going beyond the screen when trying to print a large jsonb column. Interestingely enough `jsonb_pretty` doesn't change anything about the format of the result. Any idea what the issue could be?
If I use the normal `psql` client btw it can print the column just fine.",2019-07-10 17:27:14,2019-07-15 22:12:23
124,1076,"## Description
After installing `requirements-dev.txt` in a virtual env and running `py.test` I had three missing dependencies:
- `fixtures`
- `testscenarios`
- `testresources`

After installing them manually, these errors disappeared.
Should this packages be added to the `requirements-dev.txt`?

## Your environment
I installed the packages in a new virtual env, as per instructions.

- [x] What is the output of ``pip freeze`` command.
aspy.yaml==1.3.0
autopep8==1.3.3
behave==1.2.6
certifi==2019.6.16
cfgv==2.0.0
chardet==3.0.4
click==6.7
codecov==2.0.15
configparser==3.7.4
contextlib2==0.5.5
coverage==4.3.4
docutils==0.14
enum34==1.1.6
filelock==3.0.12
funcsigs==1.0.2
futures==3.2.0
identify==1.4.5
idna==2.8
importlib-metadata==0.18
importlib-resources==1.0.2
linecache2==1.0.0
mock==3.0.5
nodeenv==1.3.3
packaging==19.0
parse==1.12.0
parse-type==0.4.2
pathlib2==2.3.4
pexpect==3.3
pkginfo==1.5.0.1
pluggy==0.12.0
pre-commit==1.17.0
py==1.8.0
pycodestyle==2.5.0
pyparsing==2.4.0
pytest==3.0.7
PyYAML==5.1.1
requests==2.22.0
requests-toolbelt==0.9.1
scandir==1.10.0
six==1.12.0
toml==0.10.0
tox==3.13.2
tqdm==4.32.2
traceback2==1.4.0
twine==1.11.0
typing==3.7.4
urllib3==1.25.3
virtualenv==16.6.1
zipp==0.5.2
- [x] Please provide your OS and version information.
OS: Mint 18.3 sylvia
Kernel: x86_64 Linux 4.15.0-54-generic

- [x] Please provide your CLI version.
zsh 5.1.1 (x86_64-ubuntu-linux-gnu)

","Pytest tests missing dependencies
I now realize I accidentally run the tests on the virtualenv also. The mentioned packages are needed for tests inside the python/site-packages.

I'm therefore closing this issue as this problem does not exist.
Hmm. You should have your venv activated when running tests. I'm not sure why this is a problem. But glad you resolved it.",2019-07-08 17:15:12,2019-07-09 07:33:11
125,1075,"## Description
```
$ pgcli                                                                                                    
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli==1.6.0', 'console_scripts', 'console')()
  File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 480, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 2693, in load_entry_point
    return ep.load()
  File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 2324, in load
    return self.resolve()
  File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 2330, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/usr/share/pgcli/pgcli/main.py"", line 24, in <module>
    from prompt_toolkit import CommandLineInterface, Application, AbortAction
ImportError: cannot import name 'CommandLineInterface'
```

## Your environment

- [ ] Ubuntu 18.04

```
$ pip3 freeze                                                                                              
aiohttp==3.5.4
appdirs==1.4.3
asn1crypto==0.24.0
async-timeout==3.0.1
attrs==17.4.0
Automat==0.6.0
backcall==0.1.0
beautifulsoup4==4.7.1
blinker==1.4
bs4==0.0.1
certifi==2019.6.16
cffi==1.12.3
chardet==3.0.4
click==6.7
cloud-init==19.1
colorama==0.3.7
command-not-found==0.3
configobj==5.0.6
constantly==15.1.0
cryptography==2.7
cssselect==1.0.3
dataclasses==0.6
dateparser==0.7.1
decorator==4.4.0
distro-info===0.18ubuntu0.18.04.1
fake-useragent==0.1.11
future==0.17.1
greenlet==0.4.12
httplib2==0.9.2
humanize==0.5.1
hyperlink==17.3.1
idna==2.6
idna-ssl==1.1.0
incremental==16.10.1
ipython==7.5.0
ipython-genutils==0.2.0
jedi==0.14.0
Jinja2==2.10
jsonpatch==1.16
jsonpointer==1.10
jsonschema==2.6.0
keyring==10.6.0
keyrings.alt==3.0
language-selector==0.1
lxml==4.3.4
MarkupSafe==1.0
maya==0.6.1
msgpack==0.5.6
multidict==4.5.2
neovim==0.2.0
netifaces==0.10.4
oauthlib==2.0.6
PAM==0.4.2
parse==1.12.0
parso==0.5.0
pendulum==2.0.4
pexpect==4.7.0
pgspecial==1.9.0
pickleshare==0.7.5
prompt-toolkit==2.0.9
psycopg2==2.7.4
ptyprocess==0.6.0
py==1.8.0
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycparser==2.19
pycrypto==2.6.1
pyee==6.0.0
Pygments==2.4.2
pygobject==3.26.1
PyJWT==1.5.3
pynvim==0.3.2
pyOpenSSL==17.5.0
pyppeteer==0.0.25
pyquery==1.4.0
pyserial==3.4
pyTelegramBotAPI==3.6.3
python-apt==1.6.4
python-dateutil==2.8.0
python-debian==0.1.32
python-telegram-bot==12.0.0b1
pytz==2019.1
pytzdata==2019.1
pyxdg==0.25
PyYAML==3.12
regex==2019.6.8
requests==2.21.0
requests-html==0.10.0
requests-unixsocket==0.1.5
retry==0.9.2
SecretStorage==2.3.1
service-identity==16.0.0
setproctitle==1.1.10
six==1.12.0
snaptime==0.2.4
soupsieve==1.9.2
sqlparse==0.2.4
ssh-import-id==5.7
systemd-python==234
telegram==0.0.1
telegram-send==0.20
termcolor==1.1.0
timeoutcontext==1.2.0
tornado==6.0.3
tqdm==4.32.2
traitlets==4.3.2
Twisted==17.9.0
typing==3.6.6
typing-extensions==3.7.4
tzlocal==1.5.1
ufw==0.36
unattended-upgrades==0.1
urllib3==1.22
w3lib==1.20.0
wcwidth==0.1.7
websockets==7.0
yarl==1.3.0
zope.interface==4.3.2
```
","cannot import name 'CommandLineInterface'
It looks like you're using an old version of pgcli. Can you please try upgrading? 

I would recommend using `pip` to install pgcli. Take a look at the instructions on this page for linux: https://www.pgcli.com/install
",2019-06-28 22:23:02,2019-10-17 04:31:28
126,1074,"It is common practice to right align header and values in numeric columns, see for example https://ux.stackexchange.com/q/24066. Or more precisely, align to decimal point.

To reproduce:
```sql
SELECT name, salary FROM employees
```
Expected result:
```
+--------------------+
| name    |   salary |
|---------+----------+
| Alice   |      103 |
| Bob     |       42 |
+--------------------+

```
Actual result:
```
+--------------------+
| name    | salary   |
|---------+----------+
| Alice   | 103      |
| Bob     | 42       |
+--------------------+
```","Right align numbers
👍 Yes, please.

Right-alignment of numbers is default behavior of psql and is much more readable.",2019-06-28 11:18:00,
127,1073,"## Description
<!--- Describe your problem as fully as you can. -->

After installing via `conda` on Ubuntu 19.04, `psql` was working but `pgcli` wasn't:

![Screenshot from 2019-06-27 09-28-49](https://user-images.githubusercontent.com/38570962/60283446-ff3dec80-98bd-11e9-8da9-599ff0dee6be.png)

I *was* able to make things work, by adding `'/tmp'` to the `unix_socket_directories` variable in the `postgresql.conf`:

![Screenshot from 2019-06-27 09-30-48](https://user-images.githubusercontent.com/38570962/60283555-45934b80-98be-11e9-92fb-e76ab0126a8f.png)

and restarting the server with 
```
sudo /etc/init.d/postgresql restart
```
as seen below:

![Screenshot from 2019-06-27 09-32-37](https://user-images.githubusercontent.com/38570962/60283638-84290600-98be-11e9-8f57-e61e33acdabc.png)


## Your environment
<!-- This gives us some more context to work with. -->

- [ x] Please provide your OS and version information.
Ubuntu 19.04
- [ x] Please provide your CLI version.
`pgcli` 2.1.1
- [x ] What is the output of ``pip freeze`` command.
```
anaconda-client==1.7.2
anaconda-navigator==1.9.7
argcomplete==1.10.0
asn1crypto==0.24.0
astroid==2.2.5
attrs==19.1.0
aws-shell==0.2.1
awscli==1.16.179
backcall==0.1.0
backports.csv==1.0.5
bleach==3.1.0
boto3==1.9.169
botocore==1.12.169
certifi==2019.6.16
cffi==1.12.3
chardet==3.0.4
cli-helpers==1.2.1
Click==7.0
clyent==1.2.2
colorama==0.3.9
conda==4.7.5
conda-package-handling==1.3.10
configobj==5.0.6
cryptography==2.7
cycler==0.10.0
decorator==4.4.0
defusedxml==0.6.0
docutils==0.14
entrypoints==0.3
humanize==0.5.1
idna==2.8
ipykernel==5.1.1
ipython==7.5.0
ipython-genutils==0.2.0
isort==4.3.20
jedi==0.13.3
Jinja2==2.10.1
jmespath==0.9.4
jsonschema==3.0.1
jupyter-client==5.2.4
jupyter-core==4.4.0
jupyterlab==0.35.3
jupyterlab-server==0.2.0
kiwisolver==1.1.0
lazy-object-proxy==1.4.1
libarchive-c==2.8
litecli==1.0.0
MarkupSafe==1.1.1
matplotlib==3.0.2
mccabe==0.6.1
mistune==0.8.4
mkl-fft==1.0.12
mkl-random==1.0.2
nbconvert==5.5.0
nbformat==4.4.0
notebook==5.7.8
numpy==1.15.4
olefile==0.46
pandas==0.24.2
pandocfilters==1.4.2
parso==0.4.0
patsy==0.5.1
pexpect==4.7.0
pgcli==2.1.1
pgspecial==1.11.3
pickleshare==0.7.5
Pillow==6.0.0
powerline-status==2.7
prometheus-client==0.6.0
prompt-toolkit==2.0.9
psutil==5.6.2
psycopg2==2.7.6.1
ptyprocess==0.6.0
pyasn1==0.4.5
pycodestyle==2.5.0
pycosat==0.6.3
pycparser==2.19
pydocstyle==3.0.0
pyflakes==2.1.1
Pygments==2.3.1
pylama==7.6.6
pylint==2.3.1
pyOpenSSL==19.0.0
pyparsing==2.4.0
pyrsistent==0.14.11
PySocks==1.7.0
python-dateutil==2.8.0
pytz==2019.1
PyYAML==5.1
pyzmq==18.0.0
QtPy==1.7.1
requests==2.22.0
rsa==3.4.2
ruamel-yaml==0.15.46
s3transfer==0.2.0
scipy==1.1.0
seaborn==0.9.0
Send2Trash==1.5.0
setproctitle==1.1.10
six==1.12.0
snowballstemmer==1.2.1
sqlparse==0.2.4
statsmodels==0.9.0
tabulate==0.8.3
termcolor==1.1.0
terminado==0.8.2
terminaltables==3.1.0
testpath==0.4.2
tornado==6.0.2
tqdm==4.32.1
traitlets==4.3.2
urllib3==1.24.2
wcwidth==0.1.7
webencodings==0.5.1
wrapt==1.11.1
```
",Finding the socket on Ubuntu 19.04,2019-06-27 16:34:33,
128,1072,"## Description
I have been trying to use the Named Queries feature of pgcli and have not been able to use it correctly. I followed the documentation given in the pgcli website but to no avail, here is an example query that I am trying to make that takes a specific table (replace '$1' with your table name of interest) and displays its first 5 rows:

`\ns head Select * from '$1' limit 5`

I continue to get the error: 

> No named query: head mytable

After I type in `\n head mytable`.

What am I doing wrong? I doubt it is an error with pgcli but I have tried multiple different methods of getting the named query to work - I am able to make named queries work, but they just can't take an input value. 

Thanks for the help! 

## Your environment

- Ubuntu 16.04 LTS
- zsh 5.1.1 (x86_64-ubuntu-linux-gnu)
- pip freeze output (I installed pgcli via apt-get however, Version 0.20.1):

```
asn1crypto==0.24.0
astroid==2.2.5
certifi==2019.3.9
cffi==1.11.5
chardet==3.0.4
conda==4.6.11
cryptography==2.4.2
idna==2.8
isort==4.3.17
lazy-object-proxy==1.3.1
mccabe==0.6.1
pycodestyle==2.5.0
pycosat==0.6.3
pycparser==2.19
pydocstyle==3.0.0
pyflakes==2.1.1
Pygments==2.3.1
pylama==7.7.1
pylama-pylint==3.1.1
pylint==2.3.1
pyOpenSSL==18.0.0
PySocks==1.6.8
requests==2.21.0
ruamel-yaml==0.15.46
six==1.12.0
snowballstemmer==1.2.1
typed-ast==1.3.1
urllib3==1.24.1
wrapt==1.11.1
```

Please let me know if you need any more info
","Possible Error with Named Queries
You should update pgcli from `pip`: `pip install -U pgcli`. It looks like `apt-get` has a very old version.

Also, you don't want to single-quote the table name. Try this (after you update `pgcli`):

`\ns head select * from $1 limit 5`

and then to execute:

`n head mytable`.
Hey @j-bennet 

That worked perfectly! Maybe make a note for future users that the apt version of pgcli is very old? 

Also, thanks for fixing my named query. : ) Super helpful and am now able to make new queries.

I don't know what exactly happened but if anyone has the same issue, I ended up having to reinstall postgres using a modified command recommended by user ""hidemyname"" from [this stackoverflow conversation](https://stackoverflow.com/questions/31645550/why-psql-cant-connect-to-server/31647044):

`sudo apt-get --purge remove postgresql\* && sudo apt-get install postgresql postgresql-contrib postgresql-server-dev-9.5 -y`

**JUST BE ADVISED, THIS COMMAND DELETES EVERYTHING ABOUT YOUR POSTGRES INSTALL!**

Followed by:

`pip install -U pgcli`

And there ya go! ",2019-06-22 04:19:18,2019-06-22 17:12:53
129,1071,"It would be really helpful to warn the user who leaves his session (quitting pgcli) that in case of an existing transaction, he will need to **explicitly commit or rollback** in order not to lose the pending changes, hence blocking the exit

This feature might be related to #410",Warning of existing transaction when quitting pgcli (asking for COMMIT or ROLLBACK),2019-06-14 07:29:40,
130,1070,"## Description

In my .zshrc and .bashrc, vim is set as my $EDITOR.
When I type `<ctrl> X E`, I can edit my current line with vim.

But in pgcli REPL, the same command open nano instead of my favorite editor.

When I type \e, vim is launched as expected.


## Your environment

  

- [x] Ubuntu 18.04
- [x] pgcli 2.1.0 on zsh 5.4.2 (x86_64-ubuntu-linux-gnu)
- [x] ``pip freeze``

asn1crypto==0.24.0
cffi==1.12.2
cli-helpers==1.2.0
Click==7.0
configobj==5.0.6
cryptography==2.6.1
humanize==0.5.1
mycli==1.19.0
pgcli==2.1.0
pgspecial==1.11.5
pkg-resources==0.0.0
prompt-toolkit==2.0.9
psycopg2==2.7.7
pycparser==2.19
Pygments==2.3.1
PyMySQL==0.9.3
setproctitle==1.1.10
six==1.12.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
wcwidth==0.1.7
","CTRL xe doesn't open my favorite editor
Hi. I'm not able to reproduce this. Can you try upgrading prompt-toolkit? 

pip install -U prompt-toolkit

",2019-06-10 10:26:57,
131,1069,"## Description
<!--- Describe your problem as fully as you can. -->
![title](https://user-images.githubusercontent.com/46282492/59140839-19cb2700-89de-11e9-8d44-63ab56a2a574.PNG)

Title color of tables is white foreground with grey background so it's hard to distinguish.
This issue occurs in `mycli` too.

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Windows 10 18362.145
- [ ] 2.1.0
- [ ] What is the output of ``pip freeze`` command.
```
aniso8601==6.0.0
asn1crypto==0.24.0
beautifulsoup4==4.7.1
blinker==1.4
bs4==0.0.1
certifi==2019.3.9
cffi==1.12.2
chardet==3.0.4
cli-helpers==1.2.0
Click==7.0
colorama==0.4.1
configobj==5.0.6
cryptography==2.6.1
Django==2.2
Flask==1.0.2
Flask-Mail==0.9.1
Flask-MySQL==1.4.0
Flask-RESTful==0.3.7
httpie==1.0.2
humanize==0.5.1
idna==2.8
itsdangerous==1.1.0
Jinja2==2.10.1
MarkupSafe==1.1.1
mycli==1.19.0
pgcli==2.1.0
pgspecial==1.11.5
prompt-toolkit==2.0.9
psycopg2==2.7.7
pycparser==2.19
Pygments==2.3.1
PyJWT==1.7.1
pymongo==3.8.0
PyMySQL==0.9.3
pytz==2018.9
requests==2.21.0
selenium==3.141.0
setproctitle==1.1.10
six==1.12.0
soupsieve==1.9
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
urllib3==1.24.1
wcwidth==0.1.7
Werkzeug==0.15.2
```
","It's hard to distinguish column names of table
You can override table header style in your `~/.myclirc` (or `~/.config/pgcli/config`). See this line:

https://github.com/dbcli/mycli/blob/05a0e4ad9523d839c610574326030ad180acaafe/mycli/myclirc#L110

Try setting background color explicitly to override that grey, for example: `bg:#000000 #ff0000 bold`.

@jonathanslenders Where did that grey background color came from? It does not seem like it's a `mycli` default.",2019-06-08 02:11:14,
132,1068,"## Description
<!--- Describe your changes in detail. -->

Fixes crash when connecting to PostgreSQL 12 beta 1 (https://github.com/dbcli/pgcli/issues/1058).

Fix based on poking around with `psql -E` (namely `\\d <table name>`).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Partial fix for #1058.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=h1) Report
> Merging [#1068](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f27ac1c110da6ba117ce93c5631c779bd9683a8a?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1068/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1068   +/-   ##
=======================================
  Coverage   84.71%   84.71%           
=======================================
  Files          21       21           
  Lines        2506     2506           
=======================================
  Hits         2123     2123           
  Misses        383      383
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1068/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.15% <ø> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=footer). Last update [f27ac1c...ae3b54e](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=h1) Report
> Merging [#1068](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f27ac1c110da6ba117ce93c5631c779bd9683a8a?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1068/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1068   +/-   ##
=======================================
  Coverage   84.71%   84.71%           
=======================================
  Files          21       21           
  Lines        2506     2506           
=======================================
  Hits         2123     2123           
  Misses        383      383
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1068/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.15% <ø> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=footer). Last update [f27ac1c...4249f11](https://codecov.io/gh/dbcli/pgcli/pull/1068?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Tested using PostgreSQL 11.3 and PostgreSQL 12-beta-1, fixes:
```
Server: PostgreSQL 12beta1
Version: 2.1.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@172:postgres> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/lib64/python3.7/threading.py"", line 917, in _bootstrap_inner
    self.run()                                                                                                                                
  File ""/usr/lib64/python3.7/threading.py"", line 865, in runmode     Refreshing completions...                                                
    self._target(*self._args, **self._kwargs)
  File ""/home/meeuw/git/pgcli/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/home/meeuw/git/pgcli/pgcli/completion_refresher.py"", line 109, in refresh_tables
    completer.extend_columns(executor.table_columns(), kind=""tables"")
  File ""/home/meeuw/git/pgcli/pgcli/pgcompleter.py"", line 218, in extend_columns
    for schema, relname, colname, datatype, has_default, default in column_data:
  File ""/home/meeuw/git/pgcli/pgcli/pgexecute.py"", line 603, in table_columns
    for row in self._columns(kinds=[""r""]):
  File ""/home/meeuw/git/pgcli/pgcli/pgexecute.py"", line 598, in _columns
    cur.execute(sql)
psycopg2.ProgrammingError: column def.adsrc does not exist
LINE 7:                         def.adsrc as default
                                ^
```

Nice fix!",2019-06-06 05:44:44,2019-06-09 15:05:29
133,1067,"## Description
using the \df+ backslash command to [list functions with extra information](https://www.postgresql.org/docs/current/app-psql.html) behaves similar to `psql` but appears to limit values in the `Source code` column to 350 characters. This is inconsistent when comparing against the output of `psql` which shows the full value without truncation.

This issue is to consider:
* whether `pgcli` should behave exactly the same as `psql` and do no truncation.
* whether the truncation is sensible (I quite like it) but some warning text could be added to notify the end user that the column value has been restricted. 
* ... or something else entirely would be appropriate (including leaving things as they are)

Here is a mock up of what currently gets displayed:
```
> \df+ some_stored_procedure
 ... +------------------------+-...-+---------------------------------------------------------------------------------------+ ...
 ... | Name                   | ... | Source code                                                                           | ...
 ... +------------------------+-...-+---------------------------------------------------------------------------------------+ ...
 ... | some_stored_procedure  | ... |         SELECT                                                                        | ...
 ... |                        | ... |           col_name                                                                    | ...
 ... |                        | ... |          FROM                                                                         | ...
 ... |                        | ... |           table                                                                       | ...
 ... |                        | ... |          WH       <- this suddenly cuts out, apparent truncation at 350 characters(?) | ...
 ... +------------------------+-...-+---------------------------------------------------------------------------------------+ ...
```

## environment
-- CLI v2.1.1
-- psql 9.6.2 (for behavioural comparison)","\df+ (list functions with additional information) truncates source code at ~350 characters
There was a fix in `cli_helpers` that skips truncation for multi-line strings:

https://github.com/dbcli/cli_helpers/pull/55

e.g. in your case, function text has line breaks in it, so it would not be truncated.

The fix has not been released yet, but you can install `cli_helpers` from master to use it:

`pip install -U https://github.com/dbcli/cli_helpers/archive/master.zip`

I agree that we also need to add an ellipsis to truncated strings.
@j-bennet - nice, thanks!",2019-06-04 14:59:47,2019-10-17 04:31:44
134,1066,"## Description
Noob using `pgcli` here. I was trying to configure my environment, and at some point, I started getting always the same error, about a bad DSN in my config file. The problem is that I had not touched that file, and removing it would not solve the problem.

It turns out I had  configured the `DSN` environment variable (I wanted to call `pgcli $DSN` to easily connect to my database), but this variable is used by `pgcli` to lookup for a DSN in the config file. The problem is that this information is available neither in the manpage nor in the `--help` output. I had to give a look to the code for that.

Environment variables should be visible in the help and man. They could appear near the option they can replace, like what `gitlab-runner` does for example:
```
gitlab-runner register --help
NAME:
   gitlab-runner register - register a new runner

USAGE:
   gitlab-runner register [command options] [arguments...]

OPTIONS:
   -c value, --config value                              Config file (default: ""/home/luismenina/.gitlab-runner/config.toml"") [$CONFIG_FILE]
   --tag-list value                                      Tag list [$RUNNER_TAG_LIST]
   -n, --non-interactive                                 Run registration unattended [$REGISTER_NON_INTERACTIVE]
   --leave-runner                                        Don't remove runner if registration fails [$REGISTER_LEAVE_RUNNER]
   -r value, --registration-token value                  Runner's registration token [$REGISTRATION_TOKEN]

...
```
## Environment
- [X] Ubuntu 18.04
- [X] Pgcli 1.6.0
- [X] `pip freeze`: irrelevant
",Document environment variables that can replace command line options,2019-06-04 10:02:34,
135,1065,"## Description

Use Alt-Enter to insert a multi-line statement without switching to multi-line mode. Already did it by @amjith [on mycli](https://github.com/dbcli/mycli/pull/748/).

Requested in [#738 of mycli](https://github.com/dbcli/mycli/issues/738).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Add keybinding for alt-enter to introduce a line break
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=h1) Report
> Merging [#1065](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/77bd30dc95db2c901fc762b6b188e08479423b73?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `33.33%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1065/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1065      +/-   ##
==========================================
- Coverage   84.72%   84.66%   -0.07%     
==========================================
  Files          21       21              
  Lines        2494     2497       +3     
==========================================
+ Hits         2113     2114       +1     
- Misses        381      383       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1065/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `39.13% <33.33%> (-0.41%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=footer). Last update [77bd30d...abc0dc7](https://codecov.io/gh/dbcli/pgcli/pull/1065?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Lovely! Thanks for the PR!
That was fast. 

@pabloab Debian packages are not built by us, so it takes a while to get to the debian repos. 

If you'd like you can install directly from master using this command: 

```pip install -U https://github.com/dbcli/mycli/archive/master.zip```


Keep in mind that this can possibly break Vi mode. (make sure to test it.)

alt-enter is really the same sequence as escape followed by enter (there's no way to distinguish), and in Vi mode, escape is meant to return to navigation mode.
I just tried it out. It makes the escape key behave sluggish. I think it's
because it makes the escape key a non-eager event. That's a poor user
experience. Wonder how vim itself handles the scenario. I have alt key
mapped to do different things in vim and they all work fine without
interfering with the escape key.

On Mon, Jun 3, 2019, 00:38 Jonathan Slenders <notifications@github.com>
wrote:

> Keep in mind that this can possibly break Vi mode. (make sure to test it.)
>
> alt-enter is really the same sequence as escape followed by enter (there's
> no way to distinguish), and in Vi mode, escape is meant to return to
> navigation mode.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/pull/1065?email_source=notifications&email_token=AAAMA3CYLE4XS2L6MC7YN63PYTC75A5CNFSM4HSECOHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWYR6QY#issuecomment-498147139>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAAMA3HQU5N4NIBTXVL3WP3PYTC75ANCNFSM4HSECOHA>
> .
>

I think the delay after the escape key press was already there before this PR.

The reason for the delay is that stdin is a stream, so we can't distinguish between an escape key followed very quickly by an enter key press or the alt-enter combination. Similar we also can't distinguish between a left arrow key press, and an escape key press, followed by ""[D"". So, if we receive the escape key sequence, we have to wait for whatever follows.

Vim handles this with the ``timeoutlen`` and ``ttimeoutlen`` options, and prompt_toolkit implements it in the same way. See: https://python-prompt-toolkit.readthedocs.io/en/master/pages/advanced_topics/key_bindings.html#timeouts I think the default values are reasonable.


By the way, alt+enter was already configured in prompt_toolkit to always accept the input (also in multiline mode), regardless of where the cursor position is.

Many applications (like IPython, and I guess pgcli too) do some kind of validation when enter is pressed to see whether a new line should be inserted, or whether we should accept the input. alt+enter would always accept the input.

Further, I'm thinking about adding a key binding control-j to always insert a line ending. control-j corresponds to \n where control-m corresponds to \r, so I think it could make sense, but I need to do some testing to see whether this doesn't break on any terminal. I know some terminals also send control-j when shift+enter or control+enter is pressed, but this is certainly not standardized.

Folks, default delay to enter normal mode isn't great. Is there a simple setting I can use from `config` or should I patch pgcli?
@oblitum - the delay should have been removed on master by #1115 

You can install directly from master using:
```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
``` 
@owst I'm actually using master, default prompt-toolkit `ttimeoutlen` delay of `0.5` is really bad. I've patched it to `0.05`.",2019-06-03 02:04:32,2019-06-03 02:15:17
136,1064,"This feature is copied from mycli to enable temporary expanded mode. 

eg: `SELECT * FROM table_name \G` will show results in expanded mode. 

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [x] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Add \G as a temporary way to use expanded mode.
#1057 

@assembler FYI
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=h1) Report
> Merging [#1064](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/77bd30dc95db2c901fc762b6b188e08479423b73?src=pr&el=desc) will **increase** coverage by `0.17%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1064/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1064      +/-   ##
==========================================
+ Coverage   84.72%   84.89%   +0.17%     
==========================================
  Files          21       21              
  Lines        2494     2503       +9     
==========================================
+ Hits         2113     2125      +12     
+ Misses        381      378       -3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1064/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `68.42% <ø> (ø)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1064/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.15% <100%> (+0.41%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1064/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.66% <0%> (+4%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=footer). Last update [77bd30d...7da18ee](https://codecov.io/gh/dbcli/pgcli/pull/1064?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-06-03 01:02:21,2019-06-04 00:12:39
137,1063,"## Description
I am unable to switch to `Normal Mode` while I have selected the Vim mode in pgcli. Its always in Insert. Any ideas? (I pressed Escape a thousand times.)

This is what I see at the bottom of the window:

`[F2] Smart Completion: ON  [F3] Multiline: ON   (Semi-colon [;] will end the line) [F4] Vi-mode (I)`

Note: 
1. I am able to toggle the given settings using function keys (`Smart Completion`/`Multiline`/`Vi-mode`)
2. Neovim is my primary editor & I use it inside iTerm (so escape key works).
3. I have `tmux` installed
4. I have Vim mode in my CLI already

## Your environment
- [x] Mac 10.14.5
- [x] iTerm 2.1.4
- [x] `pip freeze`:

```
click==6.7
Flask==1.0.2
futures==3.0.3
gitdb2==2.0.0
GitPython==2.1.1
greenlet==0.4.9
itsdangerous==0.24
Jinja2==2.10
MarkupSafe==1.0
msgpack==0.6.1
msgpack-python==0.4.7
neovim==0.3.1
pynvim==0.3.2
six==1.10.0
smmap2==2.0.1
trollius==2.1
Werkzeug==0.14.1
```
","Vim mode: Always in Insert mode, can't switch to Normal mode.
What's your  pgcli version? It sounds like a duplicate of #1038.
In #1038 I advised to install pgcli from master, but the fix was released in 2.1.1. Try updating from pip:

`pip install -U pgcli`
@j-bennet & @oblitum thanks! That fixed it!",2019-06-01 13:09:40,2019-06-03 05:41:57
138,1062,Update changelog before a new release.,"Changelog update before release.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1062?src=pr&el=h1) Report
> Merging [#1062](https://codecov.io/gh/dbcli/pgcli/pull/1062?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/df4dd005857aba57353d7ff35040712ddc60c5bb?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1062/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1062?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1062   +/-   ##
=======================================
  Coverage   84.72%   84.72%           
=======================================
  Files          21       21           
  Lines        2494     2494           
=======================================
  Hits         2113     2113           
  Misses        381      381
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1062?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1062?src=pr&el=footer). Last update [df4dd00...7829240](https://codecov.io/gh/dbcli/pgcli/pull/1062?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-05-31 00:03:38,2019-05-31 00:10:16
139,1061,"Remove the README section which detailed how to force `psycopg2` 2.7 dependency installation from source rather than binary.

`psycopg2` 2.7 would automatically favour installation from binary. A bug affecting some users made it desirable to have the option to install from source instead. The README detailed how to do this using pip's `--no-binary` option (nice!).

`psycopg2` 2.8 has now split the binary and source dependencies into different packages with different names (source: [psycopg2 docs](http://initd.org/psycopg/docs/install.html#change-in-binary-packages-between-psycopg-2-7-and-2-8)) which makes the `--no-binary` instructions redundant. To specify source/binary you now need to explicitly specify the desired package.

As of #1060, installing `pgcli` from pip will result in the installation of `psycopg2` 2.8 from source.

## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","README.rst: tidy up redundant instructions
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=h1) Report
> Merging [#1061](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8c597751fdbc5a7082ec6f3053c1b066bbac5b3e?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1061/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1061      +/-   ##
==========================================
- Coverage   84.84%   84.72%   -0.13%     
==========================================
  Files          21       21              
  Lines        2494     2494              
==========================================
- Hits         2116     2113       -3     
- Misses        378      381       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1061/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=footer). Last update [8c59775...f5d50ce](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=h1) Report
> Merging [#1061](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8c597751fdbc5a7082ec6f3053c1b066bbac5b3e?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1061/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1061      +/-   ##
==========================================
- Coverage   84.84%   84.72%   -0.13%     
==========================================
  Files          21       21              
  Lines        2494     2494              
==========================================
- Hits         2116     2113       -3     
- Misses        378      381       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1061/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=footer). Last update [8c59775...25faa18](https://codecov.io/gh/dbcli/pgcli/pull/1061?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@j-bennet - thanks! I've added some extra description to the README for psycopg2 2.7.x users, and updated changelog and AUTHORS ... and changelog again to actually link my name to a  URL.

If you're happy with the above, then I think that this PR is good to merge.

Side-note: my experience is that pgcli won't work if we attempt to meet the psycopg2 dependency by installing from a binary.  For example, given the setup below:
```
➜  pip freeze | grep psycopg2
psycopg2-binary==2.8.2
```

Even though python can see it:
```
➜  python
>>> import psycopg2
>>>
```

Attempting to run pgcli still errors:
```
➜  pgcli
Traceback (most recent call last):
  File ""/opt/bats/bin/pgcli"", line 6, in <module>
    from pkg_resources import load_entry_point
  File ""/opt/bats/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 2991, in <module>
    @_call_aside
  File ""/opt/bats/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 2977, in _call_aside
    f(*args, **kwargs)
  File ""/opt/bats/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 3004, in _initialize_master_working_set
    working_set = WorkingSet._build_master()
  File ""/opt/bats/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 662, in _build_master
    ws.require(__requires__)
  File ""/opt/bats/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 970, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/opt/bats/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 856, in resolve
    raise DistributionNotFound(req, requirers)
pkg_resources.DistributionNotFound: The 'psycopg2>=2.7.4' distribution was not found and is required by pgcli
```

Which makes sense to me, given that the source and binary distributions have distinct names. 
It's always possible that I've got something strange with my configuration. Does your experience differ here?
Very interesting. It looks like this part is platform-dependent. I get the same `DistributionError` as you on a Mac, but not on my Pixelbook (Debian Linux). On Linux, I had to jump through a hoop to make things work, but they do:

```
(pgcli) --- src/pgcli ‹master* ?› » pip freeze | grep psycopg2 
psycopg2-binary==2.8.2
(pgcli) --- src/pgcli ‹master* ?› » 
(pgcli) --- src/pgcli ‹master* ?› » pgcli postgres postgres                                                        
Server: PostgreSQL 9.6.13
Version: 2.1.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres>                                                                                                                     
Goodbye!
```

What I had to do was:

1. `pip uninstall psycopg2`
2. `rm -rf ~/.pyenv/versions/3.6.5/envs//pgcli/lib/python3.6/site-packages/psycopg2`
3. `pip install psycopg2-binary`

The ""hoop"" is step 2. Without this step, I had an error starting pgcli:

```
(pgcli) --- src/pgcli ‹master* ?› » pgcli postgres postgres
Traceback (most recent call last):
  File ""/home/ichernyavska/.pyenv/versions/pgcli/bin/pgcli"", line 6, in <module>
    from pgcli.main import cli
  File ""/home/ichernyavska/src/pgcli/pgcli/main.py"", line 55, in <module>
    from .pgexecute import PGExecute
  File ""/home/ichernyavska/src/pgcli/pgcli/pgexecute.py"", line 4, in <module>
    import psycopg2.extras
ModuleNotFoundError: No module named 'psycopg2.extras'
```

Bottom line, it looks like installing from binary will indeed not work, at least on some platforms. So definitely better leave that out of README. I am happy with this documentation update.
Merged. Thank you for the PR! 🍒 Sorry about the confusion with https://github.com/dbcli/pgcli/pull/1059.
My pleasure! Kudos on running such a good project! I had been using `psql` daily, and `pgcli` is *so* much more friendly. ",2019-05-30 08:55:28,2019-05-30 17:03:48
140,1060,"This fixes the issue with pgcli not working on Arch Linux, since the package `python2-psycopg2` is already on 2.8.2.

## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","Allow psycopg2 up to 2.8.2
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=h1) Report
> Merging [#1060](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8cb7009bcd0f0062942932c853706a36178f566c?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1060/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1060      +/-   ##
==========================================
- Coverage   84.84%   84.72%   -0.13%     
==========================================
  Files          21       21              
  Lines        2494     2494              
==========================================
- Hits         2116     2113       -3     
- Misses        378      381       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1060/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=footer). Last update [8cb7009...2de6266](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=h1) Report
> Merging [#1060](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8cb7009bcd0f0062942932c853706a36178f566c?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1060/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1060      +/-   ##
==========================================
- Coverage   84.84%   84.72%   -0.13%     
==========================================
  Files          21       21              
  Lines        2494     2494              
==========================================
- Hits         2116     2113       -3     
- Misses        378      381       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1060/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=footer). Last update [8cb7009...1d58552](https://codecov.io/gh/dbcli/pgcli/pull/1060?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you for the PR! This is less involved than https://github.com/dbcli/pgcli/pull/1059. I can merge it as soon as you update the [changelog](https://github.com/dbcli/pgcli/blob/master/changelog.rst) and [AUTHORS file](https://github.com/dbcli/pgcli/blob/master/AUTHORS).

We did fluctuate from `psycopg2` to `psycopg2-binary` and back to `psycopg2` in our `setup.py`. The reason to revert back to the source package was that apparently, a subset of users had problems with the wheels:

http://initd.org/psycopg/articles/2018/02/08/psycopg-274-released/

Because of that article's reasoning, source package looked like a safer default choice. But it can still be overridden with a subsequent wheel install, i.e.:

```
pip install pgcli
pip install psycopg2-binary
```

`pgcli` will run with either one.
@j-bennet I've updated both AUTHORS and changelog as requested, I didn't figure such a small contribution deserved a citation in the authors list. I'm glad to be of help though!
In fact, we can probably stop pinning `psycopg2` as strictly, and simply do this:

`psycopg2 >= 2.7.4`
Sounds fair to me, presuming there won't be any breaking API changes soon. I'll update the branch.
I think the strict pinning was only done because of this change, and uncertainty around how we're going to recommend installing 2.8:

http://initd.org/psycopg/docs/install.html#change-in-binary-packages-between-psycopg-2-7-and-2-8

We did not set an upper pin on `psycopg2` before that. We can deal with breaking changes when something breaks.
Tests are passing. Merging. Thank you! 🍫 ",2019-05-30 00:19:51,2019-05-30 04:14:33
141,1059,"Motivation:
* use the The psycopg2 wheel (pre-compiled binary) for convenience where possible.
* allow use of psycopg2.8 (and greater!) now that it is available. 

The change effectively reverts the setup.py changes in dd579cd and b95ac55, although that the 'detailed instructions' section introduced in dd579cd becomes relevant. In fact the option to install with `--no-binary` is only meaningful when the default requirement is the psycopg2-binary.

I think that this is a reasonable proposal, but would like to know if there were any other reasons behind b95ac55 that would prevent using psycopg2 2.8 being usable.

## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
<!-- We would appreciate if you comply with our code style guidelines. -->
- [ ] I installed pre-commit hooks (`pip install pre-commit && pre-commit install`), and ran `black` on my code.
","setup.py: use wheel by default, latest psycopg2
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=h1) Report
> Merging [#1059](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8cb7009bcd0f0062942932c853706a36178f566c?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1059/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1059      +/-   ##
==========================================
- Coverage   84.84%   84.72%   -0.13%     
==========================================
  Files          21       21              
  Lines        2494     2494              
==========================================
- Hits         2116     2113       -3     
- Misses        378      381       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1059/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=footer). Last update [8cb7009...e77b7d5](https://codecov.io/gh/dbcli/pgcli/pull/1059?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Having looked a bit further around the conversation surrounding this:
#849
#974
#844

... this PR still seems like a reasonable change (and it would close #1036). 

The (recent) release of psycopg2 2.8 should get rid of the warning users have previously objected to. Depending on the wheel should be best for most users. Those who specifically need to build from source can still do so using the instructions specified in the 'detailed instructions'.

'course I may still be missing something - please let me know :)
From the psycopg docs [1]:

The psycopg2-binary package is meant for beginners to start playing with Python and PostgreSQL without the need to meet the build requirements.

If you are the maintainer of a publish package depending on psycopg2 **you shouldn’t use ‘psycopg2-binary’ as a module dependency.** For production use you are advised to use the source distribution.

The `install_requires` for this dependency should remain `psycopg2`, **not** `psychopg2-binary`

[1] http://initd.org/psycopg/docs/install.html#binary-install-from-pypi
@koobs  - good point

The project seemed split on which to use, with the README making it seem like the binary was the dependency, but then the actual dependency list using the source. And historically it looks like both had been used...

I'm definitely happy to abide by the official docs and change the dependency to use the source.

Given the change to depend on source, and with the README cleanup, does this now look better to you?
@zadacka Thanks for the quick turnaround! 

The real distinction is between 'user/application deployments' and 'packaging' (the same distinction as *_requires vs requirements files). [1][2] Unfortunately the distinction has been lost among the noise of cries of ""terrible packaging ecosystem"" over the years, made worse by everyone doing everything their own unique new way :)

But yes, I saw no test failure delta just unpinning psycopg2 in install_requires, so it should be good to go

From my FreeBSD port commit log message:

```
Upstream has an open PR to unpin psycopg2 [2][3] but it needs to be updated
to use psycopg2 (not psycopg2-binary) in install_requires.

This change patches out the psycopg2 max version. The test results shows
no test failure delta with 2.8.2 over 2.7.7 (the version before ports
r502646).
``` 

[1] https://packaging.python.org/discussions/install-requires-vs-requirements/
[2] https://caremad.io/posts/2013/07/setup-vs-requirement/
@koobs Thanks! And thanks also for the links to reading notes.

Some context: I previously had some problems (now solved) when trying to install psycopg2 from source; the pip error message contained the lines:
```
    If you prefer to avoid building psycopg2 from source, please install the PyPI
    'psycopg2-binary' package instead.
```
I initially read this as 'either option is fine' which seemed to contradict the psycopg docs, but it all makes more sense to me now in the context of `install_requires` / `requirements`. 

(Side note: my problem above was `pg_config` not being in the install user's path, fixing this allowed the installation to complete successfully and pgcli + source-built psycopg2 2.8 seems to work great so far.)
@zadacka You're welcome, and yeh, many C/extension based packages have the same issue as they overlap into system/thirdparty library land, and all the lovely challenges that come along with it like a multitude of include/library paths and supporting different compilers/toolchains. But, this is also the beauty of upstreams and downstreams working together, everyone gets to learn about the grass on the other side. 

We're all consumers (downstreams) after all, as your experience too shows :)
I was gonna add a merge request changing `psycopg2 >= 2.7.4,<2.8` to `psycopg2 >= 2.7.4,<=2.8.2`, just so pgcli will work on Arch Linux without any user-made changes, but it seems you guys have it covered.

If anyone is reading this while the issue hasn't been fixed, just edit that one line in `/lib/python3.7/site-packages/pgcli-2.1.0-py3.7.egg-info/requires.txt` and it should start working again.
Actually reading through all your conversation it seems you haven't decided on merging this. Guess I'll make the merge request with my workaround then.

Edit: [here it is (#1060)](https://github.com/dbcli/pgcli/pull/1060).
After digging through psycopg2 issues, it looks to me like the original segfault problem that caused the split of `psycopg2` and `psycopg2-binary` was fixed:

https://github.com/psycopg/psycopg2/issues/543

However, `psycopg2-binary` is still not recommended as the default choice:

https://github.com/psycopg/psycopg2/issues/921#issuecomment-494378693

The following PR bumps psycopg2 to 2.8.2:

https://github.com/dbcli/pgcli/pull/1060

I think we can merge that PR first, since jury is still out on ""can wheels be default again"" question.

The README update is good. The `--no-binary` instructions will not work with `psycopg2>=2.8` anymore:

http://initd.org/psycopg/docs/install.html#change-in-binary-packages-between-psycopg-2-7-and-2-8
~~Closing this out... this PR does two things:~~
~~* set the setup.py dependency ""psycopg2 >= 2.7.4"", (deciding against using the wheel as discussed above) - exactly the same as @telmotrooper and you settled on in #1060, so will now result in no change to trunk!~~
~~* update the README, which I think that we're agreed is sensible following the above.~~

~~@j-bennet would you like to merge this in order to get the README update? Or would you prefer that I submit a separate PR with just the README change?~~

For clarity, I've submitted the README changes as a separate PR: #1061 

This should make it clear that this pull request (with 'use wheel by default' in the title) is NOT getting merged. It'll also keep the git history a little cleaner.
Yikes! Sorry, I got tricked by the PR's title, and missed the fact that you don't actually switch to `psycopg2-binary`. My mistake.

I'm going to review https://github.com/dbcli/pgcli/pull/1061.",2019-05-27 10:34:48,2019-05-30 09:00:13
142,1058,"## Description
Error connecting to PostgreSQL 12beta1
```
Server: PostgreSQL 12beta1,
Version: 2.1.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@windows-db:/postgres dbcli>
  File ""c:\data\flash drive\portableapps\python\lib\threading.py"", line 917, in _bootstrap_inner
                                         self.run()
  File ""c:\data\flash drive\portableapps\python\lib\threading.py"", line 865, in run
    self._target(*self._args, **self._kwargs)
  File ""c:\data\flash drive\portableapps\python\lib\site-packages\pgcli\completion_refresher.py"", line 64, in _bg_refresh
    refresher(completer, executor)
  File ""c:\data\flash drive\portableapps\python\lib\site-packages\pgcli\completion_refresher.py"", line 106, in refresh_tables
    completer.extend_columns(executor.table_columns(), kind='tables')
  File ""c:\data\flash drive\portableapps\python\lib\site-packages\pgcli\pgcompleter.py"", line 203, in extend_columns
    for schema, relname, colname, datatype, has_default, default in column_data:
  File ""c:\data\flash drive\portableapps\python\lib\site-packages\pgcli\pgexecute.py"", line 568, in table_columns
    for row in self._columns(kinds=['r']):
  File ""c:\data\flash drive\portableapps\python\lib\site-packages\pgcli\pgexecute.py"", line 563, in _columns
    cur.execute(sql)
psycopg2.errors.UndefinedColumn: column def.adsrc does not exist
LINE 7:                         def.adsrc as default
                                ^
```
## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information: Windows  10
- [x] Please provide your CLI version: 2.1.0
- [ ] What is the output of ``pip freeze`` command.
","Error connecting to PostgreSQL 12beta1
Background: `The adsrc field is historical, and is best not used, because it does not track outside changes that might affect the representation of the default value. Reverse-compiling the adbin field (with pg_get_expr for example) is a better way to display the default value.` (https://www.postgresql.org/docs/current/catalog-pg-attrdef.html). In PostgreSQL 12 it has been dropped: https://www.postgresql.org/docs/12/catalog-pg-attrdef.html
Here's two hacks to get it going again, quite likely not the correct solution:

[diff for pgcli](https://github.com/dbcli/pgcli/compare/master...boerwastaken:postgresql-12)

[diff for pgspecial](https://github.com/dbcli/pgspecial/compare/master...boerwastaken:postgresql-12)
@boerwastaken The diffs seem reasonable, why do you think it's not the correct solution?
1. the warning against using `adsrc` is in the documentation  since PostgreSQL 8.0 (2005). It should have never been used
2. that means the solution should not be applied to PostgreSQL 12 exclusively but to all versions greater than 7.
3. the documentation recommends replacing `def.adsrc` with `pg_get_expr(def.adbin)`
4. pgspecial does not query `def.adsrc` so I can't see any need to patch pgspecial
> The diffs seem reasonable, why do you think it's not the correct solution?

@j-bennet i'll walk through it:

1. [here](https://github.com/dbcli/pgspecial/compare/master...boerwastaken:postgresql-12#diff-b4b65e8639b6f8f4d48ce903a6f0002dR731) `true` is just made up, I don't fully understand the OID situation and in particular how pgcli interacts with it

2. [here](https://github.com/dbcli/pgcli/compare/master...boerwastaken:postgresql-12#diff-36fcb873925169e72e8c5ca4e8a8a581R229) I suspect that those missing dictionary entries are supposed to be created elsewhere, as this used to work before without this, and I don't know if some other setup is done related to those entries.

So all in all, I think it's a hack that shows some of the areas for which pgcli needs adaptations for postgresql-12.
**Replace ""d.adsrc"" by ""pg_get_expr(d.adbin, d.adrelid) AS default""** in the query written in adminer.php file.
If the problem is while connecting pgsql via adminer.php
Any chance of releasing a new version with a fix, since psql 12 is out now?
Bumped into this as well. 
I'll see if I can do a release this weekend. In the meantime you can install from master directly using this command: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```
Somewhat related, in that @boerwastaken 's patch looks like it would fix it -- \d fails: 
```
Server: PostgreSQL 12.1 (Debian 12.1-1)
Version: 2.1.1
...
\d customer                                                                                                                                                                                         
column c.relhasoids does not exist
LINE 2: ...                 c.relhasrules, c.relhastriggers, c.relhasoi...
                                                             ^
```
Fixed in 2.2.0.
thx @j-bennet ! Do you know when will it be available on brew ? 
@goldo We don't maintain the brew formula for pgcli. I believe there exists a bot that runs periodically and updates the formula. 

Here's the relevant formula if you're inclined to send them a PR. 
https://github.com/Homebrew/homebrew-core/blob/master/Formula/pgcli.rb
@amjith thanks for the explanation !",2019-05-24 15:03:58,2019-12-04 17:33:49
143,1057,"Is there a way to support `\G` option at the end of the query so that results of single query can be returned in extended format? Mysql cli has this functionality and i use it all the time. Toggling extended mode with \x before each query is tedious.

Mysql example:

```
data> SELECT 1 as 'one', 2 as 'two' \G
***************************[ 1. row ]***************************
one | 1
two | 2
```","Supporting mysql-like \G option for temporary extended display
Awesome. Thanks for doing this so fast! ",2019-05-15 11:36:23,2019-10-17 04:32:12
144,1056,"## Description
Fixed the issue with spaces in password.

Started writing some behavioral tests for some of the command line args. Haven't figured out how to pass in a DSN yet. 
","Handle password spaces
> As for DSN case, you could create a mock .pg_service.conf during tests setup stage (delete after), and connect using service=xxx.

Are there any examples of this in current behave tests? I'm trying to figure out how to specify a pg_service.conf file that is not located at `~/.pg_service.conf` location.


There is no example doing exactly what you want to do (writing and deleting a temporary test config), but take a look at this:

https://github.com/dbcli/pgcli/blob/master/tests/features/environment.py

Here is where all the `before` and `after` setting up is done for those tests.

You can specify custom location for service file using a special env var:

`PGSERVICEFILE=foo.txt pgcli service=my_service`

(from https://www.postgresql.org/docs/current/libpq-envars.html)
I have added a new behave test for testing the password with spaces case. But unfortunately, the behave scenario that I added is failing for a completely unrelated reason and I'm not able to figure out why that is. 


# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=h1) Report
> Merging [#1056](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/300febccdd9f6ac36dd2124d35bf974cf950a703?src=pr&el=desc) will **increase** coverage by `0.12%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1056/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1056      +/-   ##
==========================================
+ Coverage    84.6%   84.72%   +0.12%     
==========================================
  Files          21       21              
  Lines        2494     2494              
==========================================
+ Hits         2110     2113       +3     
+ Misses        384      381       -3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1056/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.73% <100%> (+0.93%)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1056/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.67% <100%> (+0.42%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1056/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=footer). Last update [300febc...d661f63](https://codecov.io/gh/dbcli/pgcli/pull/1056?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I made a few changes to fix your behave test. Our testing setup has a few non-obvious things going on behind the scenes, making it difficult to debug. It could use a bit of refactor. I hope to get around to that at some point.",2019-05-14 07:03:09,2019-05-22 04:27:48
145,1055,"## Description
```
denis ~ $ pgcli -h localhost -U postgres -d postgres
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.20.1', 'console_scripts', 'console')()
  File ""/home/denis/.local/lib/python3.5/site-packages/click/core.py"", line 716, in __call__
    return self.main(*args, **kwargs)
  File ""/home/denis/.local/lib/python3.5/site-packages/click/core.py"", line 696, in main
    rv = self.invoke(ctx)
  File ""/home/denis/.local/lib/python3.5/site-packages/click/core.py"", line 889, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/home/denis/.local/lib/python3.5/site-packages/click/core.py"", line 534, in invoke
    return callback(*args, **kwargs)
  File ""/usr/share/pgcli/pgcli/main.py"", line 595, in cli
    pgcli.run_cli()
  File ""/usr/share/pgcli/pgcli/main.py"", line 278, in run_cli
    self.cli = self._build_cli()
  File ""/usr/share/pgcli/pgcli/main.py"", line 408, in _build_cli
    cli = CommandLineInterface(application=application)
  File ""/home/denis/.local/lib/python3.5/site-packages/prompt_toolkit/interface.py"", line 69, in __init__
    assert isinstance(eventloop, EventLoop), 'Passing an eventloop is required.'
AssertionError: Passing an eventloop is required.
denis ~ $ pgcli --version
Version: 0.20.1
denis ~ $ python --version
Python 3.6.3 :: Anaconda, Inc.
denis ~ $ uname -a
Linux denis-OMEN-by-HP-Laptop 4.4.0-53-generic #74-Ubuntu SMP Fri Dec 2 15:59:10 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

denis ~ $ psql -h localhost -U postgres -d postgres
psql (9.5.10, server 11.3 (Debian 11.3-1.pgdg90+1))
WARNING: psql major version 9.5, server major version 11.
         Some psql features might not work.
Type ""help"" for help.

```

","can't launch pgcli: assertion error
The latest version of pgcli is 2.1.0. Please try updating it from pip:

`pip install -U pgcli`",2019-05-12 16:23:57,
146,1054,"## Description
<!--- Describe your changes in detail. -->

Fixes https://github.com/dbcli/pgcli/issues/1053.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Dsn parameters not always present.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=h1) Report
> Merging [#1054](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/580639904c07c4b29376a144d15fa00f4cd39b9e?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1054/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1054   +/-   ##
=======================================
  Coverage   84.48%   84.48%           
=======================================
  Files          21       21           
  Lines        2494     2494           
=======================================
  Hits         2107     2107           
  Misses        387      387
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1054/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `83.8% <100%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=footer). Last update [5806399...d2e67dd](https://codecov.io/gh/dbcli/pgcli/pull/1054?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice and clean fix! Only `self.host = dsn_parameters.get('host')` and `self.port = dsn_parameters['port']` seem to be problematic for this issue, maybe only these should be optional? Would it make sense to also read the socket from dsn_parameters here?
> Only self.host = dsn_parameters.get('host') and self.port = dsn_parameters['port'] seem to be problematic for this issue, maybe only these should be optional?

True. But there's also no reason to not use ""safe"" getters for the rest of parameters.

> Would it make sense to also read the socket from dsn_parameters here?

I don't know if that's actually present in parameters. When I log in via a local socket, here are the parameters I see:

```
{'application_name': 'pgcli',
 'dbname': 'postgres',
 'krbsrvname': 'postgres',
 'options': '',
 'passfile': '/Users/irina/.pgpass',
 'port': '5432',
 'sslcompression': '1',
 'sslmode': 'prefer',
 'target_session_attrs': 'any',
 'tty': '',
 'user': 'postgres'}
```

And we already read socket name here:

https://github.com/dbcli/pgcli/blob/580639904c07c4b29376a144d15fa00f4cd39b9e/pgcli/pgexecute.py#L275-L276

(in our `pgexecute`, socket name is used interchangeably with `host`).
Allright, I couldn't test the socket using my docker container and I don't see it in your dump either. Nice work!",2019-05-09 00:29:17,2019-05-11 05:57:46
147,1053,"## Description

Connecting using socket is broken in current master.

Exception:

```
2019-05-08 17:15:32,804 (64021/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 477, in connect
    **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 203, in __init__
    self.connect(database, user, password, host, port, dsn, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 252, in connect
    conn = psycopg2.connect(**conn_params)
  File ""/Users/irina/.pyenv/versions/3.6.5/envs/pgcli/lib/python3.6/site-packages/psycopg2/__init__.py"", line 130, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 40, in _wait_select
    state = conn.poll()
psycopg2.OperationalError: fe_sendauth: no password supplied


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 484, in connect
    dsn, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 203, in __init__
    self.connect(database, user, password, host, port, dsn, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 271, in connect
    self.host = dsn_parameters[\'host\']
KeyError: \'host\'
'
> 2019-05-08 17:15:32,804 (64021/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 477, in connect
    **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 203, in __init__
    self.connect(database, user, password, host, port, dsn, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 252, in connect
    conn = psycopg2.connect(**conn_params)
  File ""/Users/irina/.pyenv/versions/3.6.5/envs/pgcli/lib/python3.6/site-packages/psycopg2/__init__.py"", line 130, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 40, in _wait_select
    state = conn.poll()
psycopg2.OperationalError: fe_sendauth: no password supplied


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 484, in connect
    dsn, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 203, in __init__
    self.connect(database, user, password, host, port, dsn, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 271, in connect
    self.host = dsn_parameters[\'host\']
KeyError: \'host\'
'
```
There is no exception when using `-h localhost`.

## Your environment

- [x] Please provide your OS and version information.

macOS Mojave

- [x] Please provide your CLI version.

Current master is 2.1.0.",Connecting using socket is broken in current master,2019-05-09 00:19:01,2019-05-11 05:57:46
148,1052,,"Upgrade to sqlparse 0.3.0
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=h1) Report
> Merging [#1052](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/30c788917bf083aae6c4331ee102f8785c69432a?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1052/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1052      +/-   ##
==========================================
- Coverage   84.67%   84.59%   -0.09%     
==========================================
  Files          21       21              
  Lines        2492     2492              
==========================================
- Hits         2110     2108       -2     
- Misses        382      384       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1052/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.67% <100%> (-0.67%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=footer). Last update [30c7889...8b14029](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=h1) Report
> Merging [#1052](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/30c788917bf083aae6c4331ee102f8785c69432a?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1052/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1052      +/-   ##
==========================================
- Coverage   84.67%   84.59%   -0.09%     
==========================================
  Files          21       21              
  Lines        2492     2492              
==========================================
- Hits         2110     2108       -2     
- Misses        382      384       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1052/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.67% <100%> (-0.67%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=footer). Last update [30c7889...8b14029](https://codecov.io/gh/dbcli/pgcli/pull/1052?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-05-06 16:06:16,2019-05-06 18:11:58
149,1051,"This is an update to PR #1035 


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
"," Fix usage of pgservice #1035 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=h1) Report
> Merging [#1051](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/30c788917bf083aae6c4331ee102f8785c69432a?src=pr&el=desc) will **decrease** coverage by `0.1%`.
> The diff coverage is `25%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1051/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1051      +/-   ##
==========================================
- Coverage   84.67%   84.56%   -0.11%     
==========================================
  Files          21       21              
  Lines        2492     2494       +2     
==========================================
- Hits         2110     2109       -1     
- Misses        382      385       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1051/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `83.8% <25%> (-0.84%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=footer). Last update [30c7889...dc43430](https://codecov.io/gh/dbcli/pgcli/pull/1051?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-05-06 14:29:21,2019-05-06 18:09:51
150,1050,"I've installed pgcli successfully and when I run it on windows 10,


I run using: 

pgcli -h localhost -p 5000 -U arun testdb

It says the following:

could not send data to server: Socket is not connected (0x00002749/10057)
could not send SSL negotiation packet: Socket is not connected (0x00002749/10057)
","Cant connect to pgcli on windows 10
So you're using SSL with Postgres.
What version of openssl do you have installed?
Can you post the output of your `pip freeze` command?

The closest I could find to your issue is this:

https://www.postgresql.org/message-id/DM5PR17MB149904D416723D5B77604CAADAB60%40DM5PR17MB1499.namprd17.prod.outlook.com

and there seems to be no response.

@meeuw I'd appreciate if you can take a look.
I have the same issue as well on Windows 10. Here's the output of 'pip freeze' command.  
The PGAdmin4 is working.

pip freeze
cli-helpers==2.0.1
click==7.1.2
configobj==5.0.6
humanize==2.4.0
pgcli==3.0.0
pgspecial==1.11.10
prompt-toolkit==3.0.5
psycopg2==2.8.5
Pygments==2.6.1
setproctitle==1.1.10
six==1.15.0
sqlparse==0.3.1
tabulate==0.8.7
terminaltables==3.1.0
wcwidth==0.2.4

Hi

you can test the connection, with a pgcli docker

```
docker run --rm -it dbcliorg/pgcli -h <YourIP> -p 5432 -U postgres -W 
```

<YourIp> is not localhost or 127.0.0.1 ",2019-05-05 06:01:11,
151,1049,"## Description

Run black on everything and add a pre-commit hook.

For the hook to work, install pre-commit:

https://pre-commit.com/#install

And then run: `pre-commit install`

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","black all the things.
I like the code style of black but won't this pollute blame when we merge this?

Awhile ago I've created this pep8radius like tool which can use any auto-fixing-linter and I could easily add black support. Would that be a good idea?

https://github.com/meeuw/vcscheck
It will pollute blame, but it will also solve our formatting / code style differences once and for all. With the additional benefit of not needing pep8radius anymore, so no need to tell people ""Your PR breaks because pep8radius, you have to run this command to fix it"". Even though the command is in our develop guide, people miss it.

I think it's worth it. We're not losing history here, just blame. History can still be used to look up who changed the file and why.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=h1) Report
> Merging [#1049](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a5e607b6fc889afd3f8960ca3903ae16b641c304?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `82.36%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1049/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1049   +/-   ##
=======================================
  Coverage   84.72%   84.72%           
=======================================
  Files          21       21           
  Lines        2494     2494           
=======================================
  Hits         2113     2113           
  Misses        381      381
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `68.42% <0%> (ø)` | :arrow_up: |
| [pgcli/pgtoolbar.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGd0b29sYmFyLnB5) | `23.33% <0%> (ø)` | :arrow_up: |
| [pgcli/magic.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvbWFnaWMucHk=) | `0% <0%> (ø)` | :arrow_up: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `100% <100%> (ø)` | :arrow_up: |
| [pgcli/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvX19pbml0X18ucHk=) | `100% <100%> (ø)` | :arrow_up: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.67% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/prompt\_utils.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcHJvbXB0X3V0aWxzLnB5) | `66.66% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/parseutils/tables.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy90YWJsZXMucHk=) | `97.72% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/parseutils/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9fX2luaXRfXy5weQ==) | `100% <100%> (ø)` | :arrow_up: |
| ... and [11 more](https://codecov.io/gh/dbcli/pgcli/pull/1049/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=footer). Last update [a5e607b...72bfe71](https://codecov.io/gh/dbcli/pgcli/pull/1049?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Hmm, that would indeed be very nice! But I don't see why people wouldn't forget to run/install `black` & `pre-commit` (like they do with `pep8radius`).
Good point. I added that checkbox to our PR template. :)
So in the end, I added a `black` check into our travis build, instead of `pep8radius` check that we had before. It only runs in 3.6 build. The reasons for that are:

* `black` cannot be run with python lower than 3.6.5 (even though it can lint python 2.7 files)
* failing one of the builds is enough, it does not really matter which one.
Here... we... go.

:)
2 days later ... I thought that it might amuse you both to know that I was trying to find the origin of the "" ""psycopg2 >= 2.7.4,<2.8"","" change when ""<2.8"" was introduced, and blame brought me here! 

That said, +1 for using black. Long term good move, for sure. Now I'll just trawl the history a little more to find the commit that introduced the change....",2019-05-04 02:36:39,2019-05-25 20:08:56
152,1048,"## Description
When autocompleting a column of an aliased table within a function call when the query joins multiple tables, the alias name is not used to filter the column list 

e.g. given 
```
CREATE TABLE test_table(foo text, bar text);
CREATE TABLE other_test_table(baz integer);
```

When the cursor is at `^` in:
```
SELECT length(tt. FROM test_table tt, other_test_table ott
                ^
```
the autocomplete options are given as
```
ott.baz column
tt.bar  column
tt.foo  column
```
Rather than the expected
```
bar column
foo column
```
If I pick `tt.bar` the query is malformed:
```
SELECT length(tt.tt.bar FROM test_table tt, other_test_table ott
                      ^
```

N.b. if I remove one of the tables, or I'm not calling a function, the suggestions are the expected:

Both
```
SELECT length(tt. FROM test_table tt
                ^
```
and
```
SELECT tt. FROM test_table tt, other_test_table ott
         ^
```

gives:
```
bar column
foo column
```
## Your environment

Fresh virtualenv install on MacOS 10.13.6, pgcli version 2.1.0 or 1.11.0
",Aliased table column autocomplete suggestions ignore alias if joining multiple tables,2019-05-03 13:38:37,2019-10-17 03:57:19
153,1047,"## Description

sqlparse 0.3.0 was released and does not have any notable changes to it. Unbreak it with the current release.

https://github.com/andialbrecht/sqlparse/blob/master/CHANGELOG

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X] I've added this contribution to the `changelog.rst`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","no longer depend on sqlparse as being less than 0.3.0
This would fix #1033.
@VVelox I see a lot of tests failing. Did you run them locally?
v0.3.0 of sqlparse changes some of the parsing behavior. I have created a new PR to accommodate for those changes. PR #1052 ",2019-05-03 09:26:42,2019-05-06 16:06:35
154,1046,"## Description

Load keyring only when keyring is enabled in the config file.
fix issue: https://github.com/dbcli/pgcli/issues/1041

## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","lazy load keyring.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=h1) Report
> Merging [#1046](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/3fd91012f20faef6f823cae3b0ba970181e30c75?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1046/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1046      +/-   ##
==========================================
- Coverage   84.51%   84.43%   -0.09%     
==========================================
  Files          21       21              
  Lines        2487     2492       +5     
==========================================
+ Hits         2102     2104       +2     
- Misses        385      388       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1046/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.24% <100%> (+0.17%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1046/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=footer). Last update [3fd9101...7dce108](https://codecov.io/gh/dbcli/pgcli/pull/1046?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@zzl0 P.S. you don't have to develop on a fork anymore. Branches are easier.
@j-bennet 
> P.S. you don't have to develop on a fork anymore. Branches are easier.

Thanks, next time I use a branch. ",2019-04-28 15:22:44,2019-05-01 15:53:56
155,1045,"## Description
<!--- Describe your changes in detail. -->

Fix for https://github.com/dbcli/pgcli/issues/1043.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","More intelligent dsn format
Pep8 failing.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=h1) Report
> Merging [#1045](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9a53fe859acbbf833c05f14e673d5cc76e5fe135?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1045/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1045   +/-   ##
=======================================
  Coverage   84.39%   84.39%           
=======================================
  Files          21       21           
  Lines        2487     2487           
=======================================
  Hits         2099     2099           
  Misses        388      388
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1045/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.26% <100%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=footer). Last update [9a53fe8...9884c56](https://codecov.io/gh/dbcli/pgcli/pull/1045?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-04-28 05:11:31,2019-04-28 22:06:01
156,1044,"## Description
We had existing invocations of pgcli like `pgcli postgres://bar@baz.com/?application_name=cow`.
8cd3309b18fc015fc89da3236330f7b35297a998 / https://github.com/dbcli/pgcli/pull/869 broke these with errors like

    Traceback (most recent call last):
      File ""[...]/lib/python2.7/site-packages/pgcli/ main.py"", line 466, in connect
        application_name='pgcli', **kwargs)
    TypeError: type object got multiple values for keyword argument 'application_name'

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file.","Allow application_name to be overridden
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=h1) Report
> Merging [#1044](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/4af4e33e31dc800a8ebaed517e0a781fa3dbb437?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1044/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1044      +/-   ##
==========================================
- Coverage   84.46%   84.39%   -0.07%     
==========================================
  Files          21       21              
  Lines        2485     2487       +2     
==========================================
  Hits         2099     2099              
- Misses        386      388       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1044/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <100%> (+0.17%)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1044/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.26% <100%> (+0.04%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1044/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=footer). Last update [4af4e33...bc3e39e](https://codecov.io/gh/dbcli/pgcli/pull/1044?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nicely done! Great to see a unit test as well. Merging - thank you for the PR! 🍒 
wow that was fast! would you accept a PR to backport this fix to the 1.x branch? (we use ipython which depends on prompt-toolkit<2 and pgcli 2.x depends on prompt-toolkit>=2)
> we use ipython which depends on prompt-toolkit<2 and pgcli 2.x depends on prompt-toolkit>=2

@raylu This has been the case for a while, but newer `ipython` (7.x) depends on `prompt_toolkit` 2.x:

https://ipython.readthedocs.io/en/stable/whatsnew/version7.html#prompt-toolkit-2-0

and:

https://github.com/ipython/ipython/blob/f14271fe2b0f9627f64848466de944befc7c29c9/setup.py#L192
",2019-04-27 00:23:50,2019-04-28 03:25:19
157,1043,"## Description
Since upgrading to version 2.1.0 I get the following error when logging in with a user who's password contains a space :
`invalid dsn: missing ""="" after ""<???>"" in connection info string`
Where `<???>` is the second word of the password. My login command is as follows :
`pgcli --host=<hostname> --port=5432 --dbname=<dbname> --password --username=<username>`

## My environment
iTerm2 v3.2.9
DB running on a local VirtualBox VM (v6.0) with a guest OS of Ubuntu 14.10
Running pgcli from host of MacOS 10.14.4
CLI is Bash version 3.2.57(1)-release (x86_64-apple-darwin18) 
I have no `pip` command (Installed pgcli with brew)
","no longer works with password containing spaces
Fixed via https://github.com/dbcli/pgcli/pull/1045.",2019-04-26 14:16:24,2019-05-04 22:23:15
158,1042,"## Description
<!--- Describe your changes in detail. -->

Catch the base `KeyringError` vs `KeyringLocked` that does not actually exist in version we require (12.2.0).

Fix for https://github.com/dbcli/pgcli/issues/1040.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Possibly fix #1040.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1042?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@eef0e0d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1042/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1042?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1042   +/-   ##
=========================================
  Coverage          ?   84.39%           
=========================================
  Files             ?       21           
  Lines             ?     2487           
  Branches          ?        0           
=========================================
  Hits              ?     2099           
  Misses            ?      388           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1042?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1042/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1042?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1042?src=pr&el=footer). Last update [eef0e0d...f7f34bd](https://codecov.io/gh/dbcli/pgcli/pull/1042?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice fix, tested with and without gnome-keyring.",2019-04-23 03:39:28,2019-04-28 06:00:40
159,1041,"## Description
Anytime I run pgcli, it takes forever to do anything. It almost seems like it hangs, but if I wait long enough, it eventually works. I initially suspected it was doing something with the keyring because the first time I left it running for a while, the kwallet menu came up. I tried to disable the keyring in the config file and it still takes a long time to load. It even takes a while when connecting to a local database. Everything connects instantly using psql. 

Even just running `pgcli --version` takes forever to load. It somehow looks like its still trying  to do something with the keyring, if I ctrl+c in the middle of hanging I get a stack trace that looks like this:

```python
^CTraceback (most recent call last):
  File ""/usr/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli==2.1.0', 'console_scripts', 'pgcli')()
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 489, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 2843, in load_entry_point
    return ep.load()
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 2434, in load
    return self.resolve()
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 2440, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/usr/lib/python3.7/site-packages/pgcli/main.py"", line 49, in <module>
    import keyring
  File ""/usr/lib/python3.7/site-packages/keyring/__init__.py"", line 1, in <module>
    from .core import (
  File ""/usr/lib/python3.7/site-packages/keyring/core.py"", line 187, in <module>
    init_backend()
  File ""/usr/lib/python3.7/site-packages/keyring/core.py"", line 91, in init_backend
    keyrings = filter(limit, backend.get_all_keyring())
  File ""/usr/lib/python3.7/site-packages/keyring/util/__init__.py"", line 21, in wrapper
    func.always_returns = func(*args, **kwargs)
  File ""/usr/lib/python3.7/site-packages/keyring/backend.py"", line 206, in get_all_keyring
    return list(rings)
  File ""/usr/lib/python3.7/site-packages/keyring/util/__init__.py"", line 31, in suppress_exceptions
    for callable in callables:
  File ""/usr/lib/python3.7/site-packages/keyring/util/properties.py"", line 26, in __get__
    return self.fget.__get__(None, owner)()
  File ""/usr/lib/python3.7/site-packages/keyring/backend.py"", line 63, in viable
    cls.priority
  File ""/usr/lib/python3.7/site-packages/keyring/util/properties.py"", line 26, in __get__
    return self.fget.__get__(None, owner)()
  File ""/usr/lib/python3.7/site-packages/keyring/backends/SecretService.py"", line 35, in priority
    list(secretstorage.get_all_collections(bus))
  File ""/usr/lib/python3.7/site-packages/secretstorage/collection.py"", line 153, in get_all_collections
    for collection_path in service.get_property('Collections'):
  File ""/usr/lib/python3.7/site-packages/secretstorage/util.py"", line 65, in get_property
    (signature, value), = self.send_and_get_reply(msg)
  File ""/usr/lib/python3.7/site-packages/secretstorage/util.py"", line 47, in send_and_get_reply
    return self._connection.send_and_get_reply(msg)
  File ""/usr/lib/python3.7/site-packages/jeepney/integrate/blocking.py"", line 47, in send_and_get_reply
    self.recv_messages()
  File ""/usr/lib/python3.7/site-packages/jeepney/integrate/blocking.py"", line 35, in recv_messages
    b = self.sock.recv(4096)
KeyboardInterrupt

```

## Your environment

Arch linux, pip installed pgcli. 
pip freeze shows:
```
aiodocker==0.14.0
aiohttp==3.4.4
ansible==2.7.10
anytree==2.6.0
appdirs==1.4.3
Archey3==0.4.1
asn1crypto==0.24.0
async-timeout==3.0.0
atomicwrites==1.2.1
attrs==18.1.0
awscli==1.16.14
awsebcli==3.14.13
backports.csv==1.0.7
bcrypt==3.1.6
Beaker==1.10.1
black==18.6b4
blessed==1.15.0
boto==2.49.0
boto3==1.9.96
botocore==1.12.96
bottle==0.12.16
Brlapi==0.7.0
btrfsutil==1.1.0
CacheControl==0.12.5
cached-property==1.5.1
cachy==0.2.0
cement==2.8.2
certifi==2019.3.9
cffi==1.12.3
chardet==3.0.4
cleo==0.6.8
cli-helpers==1.2.0
Click==7.0
colorama==0.3.9
configobj==5.0.6
cryptography==2.6.1
cycler==0.10.0
decorator==4.3.0
distlib==0.2.8
distro==1.4.0
dnspython==1.15.0
docker==3.7.2
docker-compose==1.24.0
docker-pycreds==0.4.0
dockerpty==0.4.1
docopt==0.6.2
docutils==0.14
dunderdoc==0.3.0
entrypoints==0.3
Flask==1.0.2
future==0.16.0
gi==0.1.0
Glances==3.1.0
gunicorn==19.9.0
h11==0.8.1
html5lib==1.0.1
httpie==1.0.2
httpie-jwt-auth==0.3.0
httplib2==0.12.1
httptools==0.0.13
humanize==0.5.1
idna==2.7
ifaddr==0.1.6
ipython-genutils==0.2.0
isc==2.0
itsdangerous==1.1.0
jedi==0.12.1
jeepney==0.4
Jinja2==2.10.1
jmespath==0.9.3
jsonschema==2.6.0
jupyter-core==4.4.0
keyring==19.0.1
kiwisolver==1.0.1
lensfun==0.3.2
lockfile==0.12.2
louis==3.9.0
lxml==4.3.3
Mako==1.0.9
mallard-ducktype==0.4
Markdown==3.0.1
MarkupSafe==1.1.1
matplotlib==3.0.3
meson==0.50.1
more-itertools==4.3.0
msgpack==0.6.1
multidict==4.3.1
natsort==6.0.0
nbformat==4.4.0
ncmpy==1.5.4
netifaces==0.10.9
numpy==1.16.3
packaging==19.0
paramiko==2.4.2
parso==0.3.1
pastel==0.1.0
pathspec==0.5.9
pep517==0.5.0
pgcli==2.1.0
pgspecial==1.11.5
Pillow==6.0.0
pkginfo==1.4.2
plaid-python==2.3.3
plotly==3.1.0
pluggy==0.7.1
ply==3.11
poetry==0.11.5
powerline-status==2.7
progress==1.5
prompt-toolkit==1.0.15
protobuf==3.7.0
psutil==5.6.1
psycopg2==2.7.7
ptpython==0.41
pudb==2018.1
pulsemixer==1.4.0
pwquality==1.4.0
py==1.6.0
pyasn1==0.4.5
pycairo==1.18.0
pycparser==2.19
pycryptodome==3.8.1
Pygments==2.3.1
PyGObject==3.32.1
pylev==1.3.0
PyNaCl==1.3.0
pyparsing==2.3.1
PyQt5==5.12.1
PyQt5-sip==4.19.16
pyrsistent==0.14.4
pytest==3.8.1
python-dateutil==2.8.0
python-mpd2==1.0.0
pytoml==0.1.20
pytz==2018.9
pyudev==0.21.0.dev20190330
pyxdg==0.26
PyYAML==3.13
pyzmq==18.0.1
rabbitmq-admin==0.2
requests==2.20.1
requests-toolbelt==0.8.0
retrying==1.3.3
rpm==4.14.2.1
rsa==3.4.2
s3transfer==0.2.0
scour==0.37
SecretStorage==3.1.1
semantic-version==2.5.0
setproctitle==1.1.10
shellingham==1.2.6
six==1.11.0
solaar==0.9.2
speedtest-cli==2.1.1
spotify-cli-linux==1.3.0
sqlparse==0.2.4
starlette==0.11.3
tabulate==0.8.3
team==1.0
termcolor==1.1.0
terminaltables==3.1.0
texttable==1.6.1
toml==0.9.4
tomlkit==0.4.4
tqdm==4.24.0
traitlets==4.3.2
twine==1.11.0
ujson==1.35
urllib3==1.24.1
urwid==2.0.1
uvicorn==0.5.2
uvloop==0.12.1
virtualenv==16.1.0
virtualfish==1.0.6
wcwidth==0.1.7
webencodings==0.5.1
websocket-client==0.56.0
websockets==7.0
Werkzeug==0.15.1
xonsh==0.8.12
yarl==1.2.6
zeroconf==0.21.3
```

PGCLI has version: Version: 2.1.0
arch linux: 5.0.2 kernal

Its also worth noting that for some reason its trying to use kwallet even though I don't use kde. I use i3, with no DM
","PGCLI takes a long time to start
@amjith @zzl0 talking about cli startup time... it looks like `keyring` was not present in your `importtime-waterfall` experiment. Was it installed?
@j-bennet I ran `pip install pgcli` to install pgcli on my Mac laptop last time. I just checked my virtualenv and `keyring` was not installed.  I installed `keyring` manually and cannot reproduce the problem: 

> Even just running pgcli --version takes forever to load

@nhumrich can you reproduce the problem on other machines?
@zzl0 I don't have other machines to test on, want to provide one for me ;)

I assume running in a fresh virtual environment or host wont have the same effect, because this isn't happening for everyone. My guess is its probably due to a weird setup where I have kwallet installed, but I don't use KDE.
@nhumrich I don't know the root cause of `keyring`'s long loading problem. Can you just try to run `import keyring` at your Python shell and see if it hangs there? If yes, then we might be able to get more information if we open an issue on `keyring` project.

For `pgcli`, we could change it to load `keyring` only when `keyring` is enabled in the config file. @j-bennet @amjith What do you think? If you agree, I can work on this.
yes, just running `import keyring` does hang for a while. Seems like that is the issue for some reason.
> For pgcli, we could change it to load keyring only when keyring is enabled in the config file.

@zzl0 I think this would be the best thing we can do on `pgcli` side. Please go ahead with it.
@nhumrich Our fix got merged, pgcli (master branch) should work properly if you disable keyring in your config.
Closed via https://github.com/dbcli/pgcli/pull/1046.
works now. Thank you.",2019-04-22 23:18:53,2019-05-07 15:42:16
160,1040,"## Description

After restarting my PC I got `module 'keyring.errors' has no attribute 'KeyringLocked'` when running `pgcli -D xxx`.

1. How to fix it?
2. How to disable the keyring? I don't want to input password anymore.

## Your environment

OS:
```
OS: Ubuntu 18.04.2 LTS x86_64 
Kernel: 4.18.0-18-generic 
Shell: zsh 5.4.2 
CPU: Intel i5-7500 (4) @ 3.800GHz 
GPU: NVIDIA GeForce GT 730 
Memory: 2432MiB / 7935MiB 
```
cli: 2.0.0
pip freeze:
```
appdirs==1.4.3
asn1crypto==0.24.0
astroid==2.1.0
attrs==17.4.0
Automat==0.6.0
autopep8==1.4.3
beautifulsoup4==4.6.3
black==18.9b0
blessings==1.7
blinker==1.4
bpython==0.17.1
bs4==0.0.1
certifi==2018.1.18
chardet==3.0.4
cli-helpers==1.1.0
Click==7.0
cloud-init==18.5
colorama==0.3.7
command-not-found==0.3
configobj==5.0.6
constantly==15.1.0
cryptography==2.1.4
curtsies==0.3.0
distro-info===0.18ubuntu0.18.04.1
django-admin==1.3.2
django-excel-response2==2.0.8
django-six==1.0.4
greenlet==0.4.12
httpie==0.9.8
httplib2==0.9.2
humanize==0.5.1
hyperlink==17.3.1
idna==2.6
incremental==16.10.1
isort==4.3.4
Jinja2==2.10
jsonify==0.5
jsonpatch==1.16
jsonpointer==1.10
jsonschema==2.6.0
keyring==10.6.0
keyrings.alt==3.0
language-selector==0.1
lazy-object-proxy==1.3.1
livereload==2.6.0
lxml==4.2.5
Markdown==3.0.1
MarkupSafe==1.0
mccabe==0.6.1
mkdocs==1.0.4
mkdocs-bootstrap==1.0.1
mkdocs-material==3.3.0
msgpack==0.5.6
mycli==1.19.0
neovim==0.2.0
netifaces==0.10.4
oauthlib==2.0.6
PAM==0.4.2
pbr==5.1.1
pgcli==2.0.0
pgspecial==1.11.2
pika==0.13.0
prompt-toolkit==2.0.7
psycopg2==2.7.5
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycodestyle==2.4.0
pycrypto==2.6.1
Pygments==2.2.0
pygobject==3.26.1
PyJWT==1.5.3
pylint==2.2.2
pymdown-extensions==6.0
PyMySQL==0.9.2
pyOpenSSL==17.5.0
pyserial==3.4
python-apt==1.6.3+ubuntu1
python-debian==0.1.32
pytz==2018.7
pyxdg==0.25
PyYAML==3.13
requests==2.18.4
requests-unixsocket==0.1.5
screen==1.0.1
SecretStorage==2.3.1
service-identity==16.0.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
ssh-import-id==5.7
stevedore==1.30.0
systemd-python==234
tabulate==0.8.2
terminaltables==3.1.0
toml==0.10.0
tornado==5.1.1
Twisted==17.9.0
typed-ast==1.1.0
typing==3.6.6
ufw==0.36
unattended-upgrades==0.1
urllib3==1.22
virtualenv==16.1.0
virtualenv-clone==0.4.0
virtualenvwrapper==4.8.2
wcwidth==0.1.7
wrapt==1.10.11
xlwt==1.3.0
zope.interface==4.3.2
```","module 'keyring.errors' has no attribute 'KeyringLocked'
To your second question, you can add (or alter) this in your config

```
# $HOME/.config/pgcli/config
keyring = False
```
@Qu4tro Thanks.
If you wanted to keep using keyring, the exception can be fixed by updating it:

`pip install -U keyring`.
@j-bennet Thanks. After updating the `keyring` package to `18.0.0`, `pgcli -D xxx` (whether or not `keyring = True`) print these traceback messages and connected to the database directly without letting me input the password.

![image](https://user-images.githubusercontent.com/17923071/56628974-7072e080-667e-11e9-86a7-db7dd9cc777f.png)
![image](https://user-images.githubusercontent.com/17923071/56628986-7d8fcf80-667e-11e9-9ab8-b0915a8f4e0d.png)


Oh, that doesn't look good. We have to fix this asap.",2019-04-22 08:16:33,2019-04-28 06:00:42
161,1039,"## Description

#1007, letting `escape` dismiss autocomplete dialogs, had the unintended side effect of disabling the use of `escape` to switch to vi navigation mode. This PR restores that.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Allow escape to switch to vi navigation mode
Lovely! I'll test it out asap.
Related issue: https://github.com/dbcli/pgcli/issues/1038.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=h1) Report
> Merging [#1039](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/098a2cf976dff387e324db334cc5fbd17cbd1bc1?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1039/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1039   +/-   ##
=======================================
  Coverage   84.34%   84.34%           
=======================================
  Files          21       21           
  Lines        2485     2485           
=======================================
  Hits         2096     2096           
  Misses        389      389
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1039/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `39.53% <100%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=footer). Last update [098a2cf...60a458b](https://codecov.io/gh/dbcli/pgcli/pull/1039?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Merged. Thank you! 🍓 ",2019-04-12 04:30:59,2019-04-13 20:22:04
162,1038,"## Description
I want to be able to use Vi commands within pgcli.
I have the following setting in my /.config/pgcli/config file: 
vi = True

Problem: Vi mode doesn't really work. F4 key does activate it, but I press ""esc"" and then ""b"" to go back one word, and am immediately in Insert mode. 

Current Behavior=
Pressing ""esc"" and ""bb"" results in moving back one word + inserting the letter ""b"" once. 
Expected behavior = 
move back two words.

I have the following in my .inputrc:
set editing-mode vi
set keymap vi-command

... and this in my .bash_profile:
set -o vi

...could there be a conflict?


## Your environment
MacOS 10.14.4
Bash Version = 3.2.57(1)-release
Installed pgcli using Homebrew

pip freeze
DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.
backports.csv==1.0.7
certifi==2019.3.9
cli-helpers==1.2.0
Click==7.0
configobj==5.0.6
enum34==1.1.6
GDAL==2.4.1
humanize==0.5.1
nose==1.3.7
numpy==1.16.2
pgcli==2.1.0
pgspecial==1.11.5
pipenv==2018.11.26
prompt-toolkit==2.0.9
psycopg2==2.7.7
Pygments==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
typing==3.6.6
virtualenv==16.4.3
virtualenv-clone==0.5.3
wcwidth==0.1.7

-------------------------------------------------------------------
pip3 freeze
certifi==2019.3.9
GDAL==2.4.1
nose==1.3.7
numpy==1.16.2
pipenv==2018.11.26
virtualenv==16.4.3
virtualenv-clone==0.5.3
","Vi Mode Does Not Work in pgcli
Vi mode now works.
I tried re-installing pgcli using homebrew and re-starting the terminal... vi mode still did not work.
I tried erasing ""set -o vi"" from my .bash_rc and re-starting the terminal... vi mode still did not work.

Then, at some point I was using pgcli and was messing around with using ""^"" to go to the beginning of a line, since the pgcli documentation explicitly says that vi command will work. ""you can use ^ to go to the beginning and $ to go to the end of a line..."" https://www.pgcli.com/keybindings

Right after I used ""^"" to go to the beginning of a line (I usually use ""0""), all of the normal vi keybindings began to work, and my problem described above was resolved.
After upgrading to the latest pgcli with brew (a few days ago), my vi-mode stopped working properly. It seems to always be in insert mode, can't seem to escape.

Setting the log level to debug I see
```
   1 2019-04-25 08:05:18,786 (80844/MainThread) pgcli.key_bindings DEBUG - Detected <Esc> key.
1759 2019-04-25 08:05:19,302 (80844/MainThread) pgcli.key_bindings DEBUG - Detected <Esc> key.
```
but the mode output is still : `[F4] Vi-mode (I)`
The fix has been merged into master, but not released. For now, please install `pgcli` from master:

`pip install -U https://github.com/dbcli/pgcli/archive/master.zip`

I'll have a new release out as soon as I can.
@j-bennet thanks! that worked perfectly!
I had the same issue. Thanks for the quick fix!",2019-04-11 18:45:21,2019-04-11 22:17:09
163,1037,"First -- great work on pgcli!  It's so much better than the native cli!

I have no problem connecting to db instances that use SSL when the client certs are in the default location.  When attempting to specify the sslrootcert, sslcert and sslkey, it does not seem to pick up the certs from the uri.

pgcli postgres://user:password@netloc:5432/db?sslmode=verify-ca&sslrootcert=%fullpathtorootcert%&sslcert=%fullpathtoclientcert%&sslkey=%fullpathtoclientkey%

When running the above command, it complains about a missing root.crt in the default client cert location ""~/.postgresql"".  I connect to a variety of Postgres database instances (each with differing certs and I need to specify certs (vs using the default location).

In addition -- it would be great if the client cert connection parameters were made first rate member parameters (so that you can specify as you would with -h for host/-p for port, etc.).","SSL Client Certs Not Reading from uri
Interesting. I'd like to determine if this is a problem with `pgcli` or `psycopg2`. See if you get the same error when you run this in Python console:

```
$ python

import psycopg2
conn = psycopg2.connect(dsn=""postgres://<your full dsn string here>"")
```
",2019-04-11 09:02:01,
164,1036,"## Description
After update to pgcli 2.1.0-3 from AUR it doesn't start anymore giving the error:
```
Traceback (most recent call last):
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 583, in _build_master
    ws.require(__requires__)
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 900, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 791, in resolve
    raise VersionConflict(dist, req).with_context(dependent_req)
pkg_resources.ContextualVersionConflict: (psycopg2 2.8.1 (/usr/lib/python3.7/site-packages), Requirement.parse('psycopg2<2.8,>=2.7.4'), {'pgcli'})

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 6, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 3241, in <module>
    @_call_aside
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 3225, in _call_aside
    f(*args, **kwargs)
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 3254, in _initialize_master_working_set
    working_set = WorkingSet._build_master()
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 585, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 598, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""/usr/lib/python3.7/site-packages/pkg_resources/__init__.py"", line 786, in resolve
    raise DistributionNotFound(req, requirers)
pkg_resources.DistributionNotFound: The 'psycopg2<2.8,>=2.7.4' distribution was not found and is required by pgcli
```

## Your environment

I'm using Manjaro Linux,
pgcli is installed from AUR and have version 2.1.0-3,
psycopg version is 2.8.1
","The 'psycopg2<2.8,>=2.7.4' distribution was not found
I understand that I can solve the problem by downgrading psycopg to earlier version. However, I'd like to know if it's possible to fix it in pgcli. Is it difficult? Can I help?
For those who needs fast solution, downgrade psycopg to the latest compatible version:
```
pip install --user -U psycopg2==2.7.7
```
That's right, `pgcli` was not updated or tested with pscopg2==2.8 yet. I understand this is annoying, but as a temporary workaround, you could install pgcli into a venv, and keep `psycopg2==2.8` system-wide.
Personally for me it's not a problem or blocker (I've already downgraded it globally, because I use venvs for projects anyways). I just thought that it'd be nice for other users of pgcli to end up in this page and find the solution if they face the same issue.
@Zebradil Sure, you're welcome to submit a PR to upgrade pgcli to `psycopg2>=2.8`. You may want to look at some related issues that talk about binary vs source package:

https://github.com/dbcli/pgcli/issues/849
https://github.com/dbcli/pgcli/issues/974
https://github.com/dbcli/pgcli/issues/844
",2019-04-09 19:51:49,
165,1035,"## Description
<!--- Describe your problem as fully as you can. -->
Using services don't work (but they did in the previous release):
`PGSERVICE=spacex pgcli` or `pgcli service=spacex`
By not working I mean: It tries to get a connection with my user account and this is the error message that I get: `FATAL:  database ""me"" does not exist`

Might be helpful to know the PR that caused the issue: #978 

This PR implements a quick fix for this issue.

Changes:
     First part removes defaults, if dsn is set. Hopefully they're not needed since we're using dsn (might be totally in the wrong here).
     Second part cleans the dict properly (as empty attributes are mostly empty strings and not None objects). Seems like an issue. Not sure if this was triggered by my use-case.

Like mentioned in #1034, this PR lacks some love at this moment. Feel free to suggest / push for improvements.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Fix usage of pgservice
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=h1) Report
> Merging [#1035](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/098a2cf976dff387e324db334cc5fbd17cbd1bc1?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `60%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1035/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1035      +/-   ##
==========================================
- Coverage   84.34%   84.31%   -0.04%     
==========================================
  Files          21       21              
  Lines        2485     2486       +1     
==========================================
  Hits         2096     2096              
- Misses        389      390       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1035/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.9% <ø> (-0.32%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1035/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `75.93% <60%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=footer). Last update [098a2cf...49582cc](https://codecov.io/gh/dbcli/pgcli/pull/1035?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I'm going to fix this up and update the PR. 
Looks like I can't update the existing PR. I'm going to create a new one.",2019-04-08 20:40:12,2019-05-06 14:23:55
166,1034,"## Description
<!--- Describe your problem as fully as you can. -->
Using services don't work (but they did in the previous release):
`PGSERVICE=spacex pgcli` or `pgcli service=spacex`
By not working I mean: It tries to get a connection with my user account and this is the error message that I get: `FATAL:  database ""me"" does not exist`

Might be helpful to know the PR that caused the issue: #978 

I also, kind of rely on pgcli (thanks for this gem), so I came up with a quick patch that might be helpful for anyone having the same issue:

```
From 49582ccb7c4ec98aa9736c02d300096952d065fe Mon Sep 17 00:00:00 2001
From: Xavier Francisco <xavier@yarilabs.com>
Date: Mon, 8 Apr 2019 19:46:29 +0100
Subject: [PATCH] Fix usage of pgservice

---
 pgcli/main.py      | 9 +++++----
 pgcli/pgexecute.py | 2 +-
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/pgcli/main.py b/pgcli/main.py
index d7853e47..adf42283 100644
--- a/pgcli/main.py
+++ b/pgcli/main.py
@@ -398,11 +398,12 @@ class PGCli(object):
                 dsn='', **kwargs):
         # Connect to the database.
 
-        if not user:
-            user = getuser()
+        if not dsn:
+            if not user:
+                user = getuser()
 
-        if not database:
-            database = user
+            if not database:
+                database = user
 
         # If password prompt is not forced but no password is provided, try
         # getting it from environment variable.
diff --git a/pgcli/pgexecute.py b/pgcli/pgexecute.py
index 8c3bfa82..6d94ccc6 100644
--- a/pgcli/pgexecute.py
+++ b/pgcli/pgexecute.py
@@ -233,7 +233,7 @@ class PGExecute(object):
         }
         new_params.update(kwargs)
         conn_params.update({
-            k: unicode2utf8(v) for k, v in new_params.items() if v is not None
+            k: unicode2utf8(v) for k, v in new_params.items() if v
         })
 
         if 'password' in conn_params and 'dsn' in conn_params:
-- 
2.21.0
```

First part removes defaults, if dsn is set. Second part cleans the dict properly (as empty attributes are mostly empty strings and not None objects).

I've opened an issue instead of a PR, since I'm not sure of the consequences these changes would have for other use cases. ""Works for me"" would be a good title for the patch.","Services from .pgservice.conf don't work in the new version
@Qu4tro Thank you for the bug report! I would suggest you open a PR anyway, because that gives us a base to start with. We also have a ton of tests and hopefully they might catch it if something is broken (although sadly they didn't in https://github.com/dbcli/pgcli/pull/978). Perhaps we need to add an integration test specifically for `service=xxx`.
Was fixed in #1051 . 

Thanks everyone.",2019-04-08 20:08:23,2019-05-22 00:07:56
167,1033,"Version 0.3.0 of sqlparse has been released last month, and apparently pgcli works well with it, although I could not run the test suite, because I'm currently focused on other things, sorry... maybe later this week.",sqlparse 0.3.0,2019-04-08 10:43:35,
168,1032,"```
> \dE mysql
syntax error at or near ""\""
LINE 1: \dE mysql
        ^
```

``\dE`` is used to list foreign tables.","Don't recognize new command
Did you mean to open this issue in `mycli`?
No, I mean pgcli.
``\dE`` can be used to list foreign tables in psql, ""mysql"" is my schema to store foreign tables linked to a mysql through mysql_fdw ;D
Looks like we don't have this command implemented in `pgspecial`. But we should handle something like this gracefully in `pgcli` (like saying ""this command is not implemented"" instead of throwing a syntax error).
Submitted https://github.com/dbcli/pgspecial/pull/81",2019-04-07 03:51:59,2019-05-06 19:22:57
169,1031,"# Description
I use `pgcli` in vi and multi-line mode. It seems that history search with an empty query buffer has regressed in v2, possibly due to the `prompt_toolkit` upgrade.

In v1.11.0 if I use history search with ctrl-r, having previously executed multi-line queries, I am shown the full query that matches the pattern. If I press ctrl-r again, I'm shown the full next query that matches. If I press ctrl-c the buffer is set to the first matching query.

In v2.1.0 after pressing ctrl-r and typing a pattern, I only see the _line_ that matches the search pattern, which means it's difficult to identify the correct query from my history. If I press ctrl-r again, the prompt is broken and just shows the pattern, but no matches (pressing ctrl-r again appears to do nothing in this state). If I exit the broken prompt with ctrl-c I'm shown a stacktrace, which I can exit with Enter - then the buffer is set to the first matching query.

# Desired behaviour

Ideally, the history search would behave the same whether or not anything has been typed in the buffer, and regardless of the number of times ctrl-r is pressed, namely:

- Show the full matched query, not just the matching line
- Ctrl-c should return the buffer to the state before ctrl-r was pressed the first time

The first is a regression, but I suppose the latter is a feature request.

# Reproduction

With `~/.config/pgcli/history` containing:
```

# 2019-04-06 00:00:00.000000
+SELECT a
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY a

# 2019-04-06 00:00:01.000000
+SELECT 1

# 2019-04-06 00:00:02.000000
+SELECT a
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY a DESC

# 2019-04-06 00:00:03.000000
+SELECT 2

# 2019-04-06 00:00:04.000000
+SELECT b
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY b

# 2019-04-06 00:00:05.000000
+SELECT 3

# 2019-04-06 00:00:06.000000
+SELECT b
+FROM (VALUES (1, 1), (1, 2)) v(a, b)
+ORDER BY b DESC
```

and an empty query buffer (so no partial query typed):

## `1.11.0`:
After pressing ctrl-r and typing `ORDER` I see:
```
postgres@localhost:postgres> SELECT b
                             FROM (VALUES (1, 1), (1, 2)) v(a, b)
                             ORDER BY b DESC

I-search backward: ORDER
```
pressing ctrl-r again, I see:
```
postgres@localhost:postgres> SELECT b
                             FROM (VALUES (1, 1), (1, 2)) v(a, b)
                             ORDER BY b

I-search backward: ORDER
```
If I press ctrl-c I see:
```
postgres@localhost:postgres> SELECT b
                             FROM (VALUES (1, 1), (1, 2)) v(a, b)
                             ORDER BY b DESC
```

## `2.1.0`:

After pressing ctrl-r and typing `ORDER` I see:
```
(reverse-i-search)`ORDER': ORDER BY b DESC
```
pressing ctrl-r again, I see:
```
ORDER
```
If I press ctrl-c I see:
```
Unhandled exception in event loop:
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/eventloop/posix.py"", line 154, in _run_task
    t()
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/eventloop/context.py"", line 115, in new_func
    return func(*a, **kw)
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/application/application.py"", line 562, in read_from_input
    self.key_processor.process_keys()
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/key_binding/key_processor.py"", line 273, in process_keys
    self._process_coroutine.send(key_press)
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/key_binding/key_processor.py"", line 180, in _process
    self._call_handler(matches[-1], key_sequence=buffer[:])
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/key_binding/key_processor.py"", line 323, in _call_handler
    handler.call(event)
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/key_binding/key_bindings.py"", line 78, in call
    return self.handler(event)
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/key_binding/bindings/search.py"", line 28, in abort_search
    search.stop_search()
  File ""/Users/owenstephens/.local/share/virtualenvs/pgcli_2.1.0-g_DKg-2C/lib/python2.7/site-packages/prompt_toolkit/search.py"", line 128, in stop_search
    del layout.search_links[search_buffer_control]

Exception <SearchBufferControl buffer=<Buffer(name=u'SEARCH_BUFFER', text=u'ORDER') at 4404687696> at 4404560272>
Press ENTER to continue...
```
If I press enter, I see:
```
postgres@localhost:postgres> SELECT b
                             FROM (VALUES (1, 1), (1, 2)) v(a, b)
                             ORDER BY b DESC
```

## With a non-empty query buffer

If the query buffer is _not_ empty at the point of pressing ctrl-r for the first time, the behaviour is the same in 1.11.0 and 2.1.0:

- If I ctrl-c after typing a pattern, my buffer is reset to its state prior to pressing ctrl-r,
- If I ctrl-c after typing a pattern and pressing ctrl-r again, the buffer is reset to the first matching query

# Your environment

- [x] Please provide your OS and version information.
MacOS 10.13.6
- [x] Please provide your CLI version.
1.11.0 and 2.1.0
- [x] What is the output of ``pip freeze`` command.

`1.11.0`:
```
backports.csv==1.0.7
cli-helpers==1.2.0
Click==7.0
configobj==5.0.6
humanize==0.5.1
pgcli==1.11.0
pgspecial==1.11.5
prompt-toolkit==1.0.15
psycopg2==2.7.7
Pygments==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
wcwidth==0.1.7
```
`2.1.0`:
```
backports.csv==1.0.7
cli-helpers==1.2.0
Click==7.0
configobj==5.0.6
humanize==0.5.1
pgcli==2.1.0
pgspecial==1.11.5
prompt-toolkit==2.0.9
psycopg2==2.7.7
Pygments==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
wcwidth==0.1.7
```
","History search regressions in v2
That's one well written bug report. Thank you!
Same problem here.
I started to read code, but it might be prompt_toolkit related bug.

What do you think ?
>  it might be prompt_toolkit related bug

It looks this way. @jonathanslenders, would you be able to help?
I tried to play a little on this : 
In this method
```python
# .pyenv/versions/3.7.2/envs/pgcli/lib/python3.7/site-packages/pgcli/main.py (line 766)
def _build_cli(self, history):
...
```

We instantiate a `PromptSession` class with `multiline=pg_is_multiline(self),`

If we force `multiline` to `True` then we can use `ctrl+r` just like it was before new prompt_toolkit (full query print).

Not sure how to implement proper fix. Any idea ?

@owst, do you notice the same bug also in this example: https://github.com/prompt-toolkit/python-prompt-toolkit/blob/2.0/examples/prompts/history/persistent-history.py
If so, it's indeed a bug in prompt_toolkit.
Hi @jonathanslenders, thanks - with a tweak to add `multiline=True` to the `session.prompt` call in your example, multi-line history search _works_ as expected with `prompt-toolkit==2.0.9` in terms of showing the full ""query"" after matching a single line.

For the record my test was with:

```python
#!/usr/bin/env python
""""""
Simple example of a CLI that keeps a persistent history of all the entered
strings in a file. When you run this script for a second time, pressing
arrow-up will go back in history.
""""""
from __future__ import unicode_literals

from prompt_toolkit import PromptSession
from prompt_toolkit.history import FileHistory


def main():
    our_history = FileHistory('.example-history-file')

    # The history needs to be passed to the `PromptSession`. It can't be passed
    # to the `prompt` call because only one history can be used during a
    # session.
    session = PromptSession(history=our_history)

    while True:
        text = session.prompt('Say something: ', multiline=True)
        print('You said: %s' % text)


if __name__ == '__main__':
    main()
```
and my example history in `.example-history-file`, which gives a working multi-line history search

Do you consider it a bug that this sequence:
```
Type ""123""
Ctrl-R
Type ""ORDER""
Ctrl-C
```
returns the prompt to `123`, but:
```
Type ""123""
Ctrl-R
Type ""ORDER""
Ctrl-R
Ctrl-C
```
returns it to the first matching query, deleting `123`? If so I can raise an issue directly on prompt-toolkit.

@j-bennet I guess this means the change in behaviour I observed is down to `pgcli`s use of prompt-toolkit 2.x?
> I guess this means the change in behaviour I observed is down to pgclis use of prompt-toolkit 2.x?

Yes, upgrading to prompt-toolkit v2 was pretty much the only reason to release pgcli 2.0, and a big deal, since `prompt-toolkit` v2 was rewritten from scratch and not compatible with v1. Later pgcli 2.x versions have comparatively minor changes.",2019-04-06 13:41:31,2019-10-17 03:54:30
170,1030,Updating changelog before release.,"Changelog update before release. Bump cli_helpers.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1030?src=pr&el=h1) Report
> Merging [#1030](https://codecov.io/gh/dbcli/pgcli/pull/1030?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a7632361c42b33e4474a4ca5363bddbf57484daa?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1030/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1030?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master    #1030   +/-   ##
=======================================
  Coverage   84.34%   84.34%           
=======================================
  Files          21       21           
  Lines        2485     2485           
=======================================
  Hits         2096     2096           
  Misses        389      389
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1030?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1030?src=pr&el=footer). Last update [a763236...066ecbc](https://codecov.io/gh/dbcli/pgcli/pull/1030?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2019-04-06 00:12:56,2019-04-06 00:24:11
171,1029,"## Description
It would be nice if pgcli supported using unicode symbols for table borders, like psql does if one sets ``\pset linestyle unicode`` in .psqlrc. Compare psql output:

![image](https://user-images.githubusercontent.com/205995/55449512-8d843880-5617-11e9-84f7-777f6b959af6.png)

with equivalent pg_cli:

![image](https://user-images.githubusercontent.com/205995/55449532-a12f9f00-5617-11e9-9ab0-7d304763931d.png)

## Your environment
Ubuntu Linux, pgcli 2.0.2","Support 'linestyle unicode' table borders
The good news is that we already support this. You can change the table format in the config file `~/.config/pgcli/config` or at runtime using the `\T [fomat_name]`. 

The format you're looking for is called `fancy_grid`. 
Nice - thanks!

I wonder if {{fancy_grid}} shouldn't be the default? Surely compatibility with ancient terminals isn't a concern (unlike ``psql``), as pgcli's autocomplete and colours already assume a capable terminal. If you're going with unicode, I'd also make ``null_string = '␀'`` the default.

We have windows users who use this with cmd.exe where the support for colors and unicode characters are less than stellar. 

It still manages to show the completion menu in those situations but not unicode. Making fancy_grid to be the default will make it less than ideal for those users.
Closed since the functionality exists.
Unfortunately `fancy_grid` isn't actually equivalent to `psql`'s `unicode` display: it puts a grid line between each row, halving the  number of records that fit on the screen:

`psql` with `unicode` lines:

![image](https://user-images.githubusercontent.com/598534/62204123-761a4980-b384-11e9-8e2a-902cd0c075f9.png)

`pgclie` with `fancy_grid`:

![image](https://user-images.githubusercontent.com/598534/62204160-8a5e4680-b384-11e9-9d24-b54794b2554f.png)

Please can this issue be re-opened for `pgcli` to have a fancy border style that doesn't include grid lines between each item? Thanks",2019-04-03 02:54:27,2019-05-04 18:48:39
172,1028,"## Description
<!--- Describe your changes in detail. -->

Ask for password in case provided password failed.

Fixes https://github.com/dbcli/pgcli/issues/1020.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Ask for password in case of incorrect password.
Looks nice and simple. Good work. :arrow_up: ",2019-03-22 16:52:09,2019-03-23 17:12:13
173,1027,"I'm working on an in-browser SQL-editor similar to sql-ops-studio. 
It would be nice to have autoComplete-functionality for PostgreSQL.  
Could the autoComplete in pgcli be split into a separate library, so it can be used by other programs as well ? 

e.g. like 

`
libpgautocomplete: string[] autoComplete(string connectionString, string sql_command, int line, int position)`

or something like that ?","Could autoComplete be separated as standalone library ? 
Argh, never mind, just saw it was writting in Python. ",2019-03-19 06:42:06,2019-03-19 06:43:51
174,1026,"## Description
<!--- Describe your changes in detail. -->

Python 3.7. Looks like this can only be done with `xenial` and `sudo` in travis right now.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","[WIP] Build pgcli with 3.7.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=h1) Report
> Merging [#1026](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/6d1b653e24278111d82b761c2ea1e66a0621a27d?src=pr&el=desc) will **increase** coverage by `0.36%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1026/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1026      +/-   ##
==========================================
+ Coverage   84.43%   84.79%   +0.36%     
==========================================
  Files          21       21              
  Lines        2492     2492              
==========================================
+ Hits         2104     2113       +9     
+ Misses        388      379       -9
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1026/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.63% <0%> (-0.63%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1026/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.66% <0%> (+4%)` | :arrow_up: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/1026/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `93.42% <0%> (+10.52%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=footer). Last update [6d1b653...f1fc864](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=h1) Report
> Merging [#1026](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/6d1b653e24278111d82b761c2ea1e66a0621a27d?src=pr&el=desc) will **increase** coverage by `0.24%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1026/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1026      +/-   ##
==========================================
+ Coverage   84.43%   84.67%   +0.24%     
==========================================
  Files          21       21              
  Lines        2492     2492              
==========================================
+ Hits         2104     2110       +6     
+ Misses        388      382       -6
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1026/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.63% <0%> (-0.63%)` | :arrow_down: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/1026/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `93.42% <0%> (+10.52%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=footer). Last update [6d1b653...99126bb](https://codecov.io/gh/dbcli/pgcli/pull/1026?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice!! 

:100: ",2019-03-18 04:12:32,2019-05-04 18:30:16
175,1025,"Sometimes I'll issue a command and postgres will have to wait until some other query is finished before starting mine. In this situation, pgcli just waits until the other query is done, and I'm not sure if my query is slow or it's waiting for another query.

When a query that I expect to be fast is stuck, I usually [do](https://medium.com/little-programming-joys/finding-and-killing-long-running-queries-on-postgres-7c4f0449e86d) 

```sql
SELECT
  pid,
  now() - pg_stat_activity.query_start AS duration,
  query,
  state
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '5 minutes';
```

to find out if there are any long-running queries that might be blocking mine, and if there are I might kill them, depending on the situation. 

When I'm waiting for another query to finish, or a lock to be released, I wonder if pgcli could indicate that fact, so that I know whether my query is just slow or I should consider dealing with the other query that's blocking me.","Show when my query is waiting for another query to finish
That's an interesting idea. It would not be very difficult to add something to the status bar, like a little counter to show number of active queries running on database, that could be refreshed with a background thread...
Apparently it's possible to check which queries are blocking which other queries: https://wiki.postgresql.org/wiki/Lock_Monitoring

So if I submit a query and it's blocked I could get an indication that I'm blocked, rather than just that there are other queries going on.",2019-03-17 05:08:24,
176,1024,"## Description
Currently, pgcli suggest all commands ever typed without any distinction.
In my opinion (and I can be wrong), it's more useful to limit suggestions on per-databse ,or per-host, or per-user basis, so that the suggestion list is not cluttered with irrelevant completions

Maybe there should be a simple way for the end user to limit the scope of completions",Feature Request: historic completion bound to a predefined scope,2019-03-17 00:43:14,
177,1023,"## Description
This is a follow up to #928.

Picking 4 spaces whenever a user presses the tab key. Removes the option from the config file.
","Remove the expand_tab option from pgclirc.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1023?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@b8f6974`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1023/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1023?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1023   +/-   ##
=========================================
  Coverage          ?   84.73%           
=========================================
  Files             ?       21           
  Lines             ?     2470           
  Branches          ?        0           
=========================================
  Hits              ?     2093           
  Misses            ?      377           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1023?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1023/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `39.53% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1023?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1023?src=pr&el=footer). Last update [b8f6974...83e17e8](https://codecov.io/gh/dbcli/pgcli/pull/1023?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@amjith Were you going to add a changelog message for this? If not, go ahead and merge.",2019-03-16 21:10:39,2019-03-17 00:50:12
178,1022,"## Description

Fixes #1021 



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Catch and ignore the system interrupt.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=h1) Report
> Merging [#1022](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1c66dece59d4595eee3fb33d2609e2e288a28ff4?src=pr&el=desc) will **decrease** coverage by `0.13%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1022/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1022      +/-   ##
==========================================
- Coverage   84.76%   84.62%   -0.14%     
==========================================
  Files          21       21              
  Lines        2468     2472       +4     
==========================================
  Hits         2092     2092              
- Misses        376      380       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1022/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.54% <0%> (-1.09%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=footer). Last update [1c66dec...9df9c22](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@80f440e`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1022/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1022   +/-   ##
=========================================
  Coverage          ?   84.59%           
=========================================
  Files             ?       21           
  Lines             ?     2474           
  Branches          ?        0           
=========================================
  Hits              ?     2093           
  Misses            ?      381           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1022/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.07% <0%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=footer). Last update [80f440e...3652134](https://codecov.io/gh/dbcli/pgcli/pull/1022?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

nice fix!",2019-03-16 03:32:38,2019-03-17 06:04:30
179,1021,"## Description

i work with a tiling window manager and every time, a long runnung query is active and i resize the terminal emulator i kill the current query:

    (4, 'Interrupted system call')

and i have to quit pgcli and reconnect

## Your environment

* i3-gaps
* alacritty terminal emulator
* pgcli version 2.0.2

```
$ neofetch
       _,met$$$$$gg.          easteregg@x250
    ,g$$$$$$$$$$$$$$$P.       --------------
  ,g$$P""     """"""Y$$."".        OS: Debian GNU/Linux buster/sid x86_64
 ,$$P'              `$$$.     Model: 20CM001RGE ThinkPad X250
',$$P       ,ggs.     `$$b:   Kernel: 4.20.14-towo.1-siduction-amd64
`d$$'     ,$P""'   .    $$$    Uptime: 6 days, 1 hour, 4 minutes
 $$P      d$'     ,    $$P    Packages: 3856 (dpkg)
 $$:      $$.   -    ,d$$'    Shell: bash 5.0.2
 $$;      Y$b._   _,d$P'      Resolution: 3840x2160, 1920x1080
 Y$$.    `.`""Y$$$$P""'         WM: i3
 `$$b      ""-.__              Terminal: alacritty
  `Y$$                        CPU: Intel i7-5600U (4) @ 3.200GHz
   `Y$$.                      GPU: Intel HD Graphics 5500
     `$$b.                    Memory: 5127MiB / 15765MiB
       `Y$$b.
          `""Y$b._
              `""""""

```","resizing pgcli kills the query and connection
That's awful. I just checked it on my machine and I'm able to reproduce it. I'll dig into this one. Sorry about the trouble.
no problem, i tend to give pgcli just its own workspace :D
This was a tricky problem. But I do have a solution. 

Can you try this branch? 

```
pip install -U https://github.com/dbcli/pgcli/archive/system-error.zip
```

BTW, this is only an issue in Python 2.7, this error does not happen in Python 3.4 and above due to this [PEP](https://www.python.org/dev/peps/pep-0475/). 
this works fine!

im not an python expert. the default python seems to be 2.7.16

```
$ python -V
Python 2.7.16
```

how can i switch this version on a per application basis?
This branch will be merged into master and will be part of the next release. So you don't need to worry about installing it via Python 3. 

Buf if you're generally interested in learning how to install this via Python3. Here's how I'd do it: 

1. Check if python3 is already available for your system. 
`    $ which python3`
2. If it is not available install it. 
`    $ sudo apt-get install python3`
3. Install pip for python3.
`    $ sudo apt-get install python3-pip`
4. Install pgcli using pip3
```
    $ pip uninstall pgcli   # Removes the old version of pgcli installed using python2.7
    $ pip3 install pgcli     # Installs pgcli using python3
```

Tada!


thank you very much with all your efforts and the great responsetime!",2019-03-15 09:39:59,2019-03-17 06:04:29
180,1020,"## Description
When trying to connect to Postgres with standard `postgres` user which has non-default (not `postgres`) password, error is thrown:
```bash
FATAL:  password authentication failed for user ""postgres""
```

Command I use:
```bash
pgcli --host localhost --port 5431 --dbname metabot --username postgres
```

`--password` argument does nothing (password prompt isn't shown either). Similar `psql` command (`psql --host localhost --port 5431 --dbname metabot --username postgres`) works without issues and shows password prompt. Installed `pgcli` via `pip` (v2.0.2). When installing with `sudo apt install pgcli`, it installs v1.6.0, and this version works well (shows password prompt and logs in after inputting the password). Tried to dump `pgcli` with config folder and reinstall but nothing changes.

## Your environment
Ubuntu 18.04, pgcli v2.0.2

`pip freeze` output:

```bash
asn1crypto==0.24.0
audioread==2.1.5
backports.csv==1.0.6
beautifulsoup4==4.6.0
certifi==2018.1.18
chardet==3.0.4
cli-helpers==1.1.0
Click==7.0
colorama==0.3.7
configobj==5.0.6
cryptography==2.1.4
decorator==4.1.2
enum34==1.1.6
html5lib==0.999999999
humanize==0.5.1
idna==2.6
ipaddress==1.0.17
keyring==10.6.0
keyrings.alt==3.0
lxml==4.2.1
mutagen==1.38
mysqlclient==1.3.10
numpy==1.13.3
pathlib2==2.3.0
pgspecial==1.11.5
pick-colour-picker==1.0
prompt-toolkit==2.0.9
psutil==5.4.2
psycopg2==2.7.7
puddletag==1.2.0
pyacoustid==1.1.2
pycairo==1.16.2
pycrypto==2.6.1
Pygments==2.3.1
pygobject==3.26.1
pymad==0.10
pyOpenSSL==17.5.0
pyparsing==2.2.0
python-apt==1.6.3+ubuntu1
python-Levenshtein==0.12.0
pyxdg==0.25
requests==2.18.4
scandir==1.7
scour==0.36
SecretStorage==2.3.1
setproctitle==1.1.10
six==1.12.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
urllib3==1.22
wcwidth==0.1.7
webencodings==0.5
wxPython==3.0.2.0
wxPython-common==3.0.2.0
```
","FATAL:  password authentication failed for user ""postgres"" when using non-default password
I can't reproduce the problem. I am on a Mac, but also tried with a docker container based on a `python:3.5.6-stretch` image. A couple more questions:

* which python version are you using?
* are you really connecting on a non-standard port (`--port 5431`), or is that a typo?
I'm having the same issue: `pgcli` doesn't even prompt for password, even with the `-W` switch enabled (what does the switch do then?)

In my case I have two almost identical setups, one of which runs a test system with a default password. I'm tunneling the db connection from both via ssh, then try to connect to their databases:

```
(separate shell) ssh <real-machine> -L 5433:...:5432
(separate shell) ssh <test-machine> -L 5434:...:5432

...>: pgcli -h localhost -U postgres -p 5433
FATAL:  password authentication failed for user ""postgres""
FATAL:  password authentication failed for user ""postgres""

...>: pgcli -h localhost -U postgres -p 5434
Server: PostgreSQL 9.4.21
Version: 2.0.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@localhost:postgres>                                
```

I can connect normally to the passworded db using regular `psql` and the same params:
```
...>: psql -h localhost -U postgres -p 5433
Password for user postgres: 
psql (11.2, server 9.6.10)
...
postgres=> 
```

pgcli version: 2.0.0 (just updated to 2.0.2 -- no changes)
python 3.6.6
gentoo linux
is there any more info that would be helpful?
@quezak Things that may be helpful:

* `pip freeze | grep -P ""(psycopg2|keyring|helpers|lick)""`
* what kind of auth you have configured in `pg_hba.conf`

@dbcli/pgcli-core Can you give me a hand with reproducing this?
```
...>: pip freeze | grep -P ""(psycopg2|keyring|helpers|lick)""
cli-helpers==1.1.0
Click==7.0
cupshelpers==1.0
keyring==13.2.1
psycopg2==2.7.5
```

I'll update when I get info about the db.
@quezak
* do you have any postgres env variables set (i.e. PGHOST, PGUSER, PGPASSWORD, etc)?
* do you have `keyring` enabled in pgcli config?
@quezak I have a theory. It is possible, if you are using keyring, that default password for `postgres` was previously stored there. Now you have changed it, the stored password is not correct anymore, but `pgcli` is not asking you for password because it only asks if you did not provide one, and you provided one via keyring:

https://github.com/dbcli/pgcli/blob/1c66dece59d4595eee3fb33d2609e2e288a28ff4/pgcli/main.py#L459-L463

Here is how you can confirm (or disprove) the theory:

```
$ python
import keyring
keyring.get_password('pgcli', 'postgres@localhost')
```

Do you see an incorrect stored password?

If yes, the quickest fix is either updating it in keyring:

```
$python
import keyring
keyring.set_password('pgcli', 'postgres@localhost', 'my correct password')
```

or disabling keyring in `~/.config/pgcli/config`.
@j-bennet your guess was right -- the keyring was enabled and had the default password stored. Changing it doesn't make sense, since in my case I'm connecting to different databases using the same `postgres@localhost` login (using tunneled connections), so I've disabled the keyring for now. Thanks for the help!

Solution proposal: maybe pgcli should prompt for password anyway when the keyring password fails?

I also have two questions left:
 * what's the intended behavior of the `-W` switch, described as `Force password prompt`? Especially when combined with the keyring. Right now it looks like it doesn't do anything in this configuration, which seems weird -- I'd expect it to either override the keyring and prompt for password, or print a message that keyring is enabled and that's why it doesn't prompt despite the switch.
 * this is more of a subjective matter -- should the keyring be enabled by default? I've never edited the pgcli config, so I had no idea that it remembers passwords by default (I just thought it doesn't need to prompt for the default `postgres` password, which, btw, may be a good idea). This looks like a security concern for me -- I'm sometimes entering sensitive production passwords there, and now I feel uneasy that they could be stored anywhere. Note that I'm not against (secure) password storage here, just against storing password without the user explicitly knowing about it :)
> Solution proposal: maybe pgcli should prompt for password anyway when the keyring password fails?

Yes, absolutely, that's the right way to handle it. It should prompt for password when existing password fails, and it should update stored password with the new one on successful connection. If you're willing to submit a PR, I'll happily merge that, otherwise I'll do the fix.

> what's the intended behavior of the -W switch, described as `Force password prompt`?

It should force password prompt in case if password is not provided. In context of keyring, this behavior gets a little weird, because even when you, the user, did not provide a password, `keyring` did behind the scenes, so `-W` gets ignored. I'm starting to think that maybe `-W` should force password no matter what. But I'm not quite sure about that yet.

> this is more of a subjective matter -- should the keyring be enabled by default?

Generally, when we add a new feature (and `keyring`, when works correctly, is a user-friendly feature), we want it enabled. Discoverability is important - what's the point of a new feature if it is buried in config file and nobody will ever dig through and think about enabling it.

By default, `keyring` flag in pgcli config is set to `True`, but `keyring` package is listed as an optional requirement, so first time pgcli runs with this flag == True, it will tell the user: ""if you want to use keyring to store passwords, you need to install the keyring package"". Passwords are only going to be stored if both requirements are met:

* keyring is enabled in config.
* keyring package is installed.

That lets us know that user made the conscious choice of using `keyring`. Except in your case, `pgcli` is installed system-wide and not in a venv, so I think `keyring` was installed by some other package and not `pgcli`. That makes it a bit less conscious! But I still think that we should stick to our discoverability principle, because it has more pros than cons, once all the wrinkles of the new feature are ironed out.
Thanks for the explanation! Discoverability is indeed an important thing. Maybe pgcli could ask if the user wants to store the passwords on the first login? (e.g. ask if the `use keyring` config is not set, and then set the config according to the answer). Up to you what will you want to do with it, I just wanted to raise the issue :)
Yes, that's something to think about. Thank you for the suggestion!
This command below worked for me

psql -h localhost -U postgres -p 5433
...
postgres=# \du",2019-03-09 19:57:26,2019-03-23 17:12:13
181,1019,"## Description
When accidentally typed `;;` at the end of a query I got pythonic stacktrace:

```
postgres@xxx> ;                                                                                                                                                                                                                  
ERROR:pgcli.pgexecute:sql: '', error: ProgrammingError(""can't execute an empty query"")
ERROR:pgcli.pgexecute:traceback: 'Traceback (most recent call last):\n  File ""/usr/lib/python3.7/site-packages/pgcli/pgexecute.py"", line 357, in run\n    yield self.execute_normal_sql(sql) + (sql, True, False)\n  File ""/usr/lib/python3.7/site-packages/pgcli/pgexecute.py"", line 389, in execute_normal_sql\n    cur.execute(split_sql)\npsycopg2.ProgrammingError: can\'t execute an empty query\n'
can't execute an empty query
```

This should be hidden for better UX, I don't need to know internals of the cli application when query ""failed""","Python stacktrace when quering for empty query
Yikes. I'm surprised we do not handle this better, but it should be an easy fix. I imagine all it would take is adding:

```
if not sql:
    continue
```

after this line:

https://github.com/dbcli/pgcli/blob/1c66dece59d4595eee3fb33d2609e2e288a28ff4/pgcli/pgexecute.py#L350

Feel free to submit a PR!
Thanks for pointing me, I don't know python, but I'll make a PR hopefully this week!
Closed via https://github.com/dbcli/pgcli/pull/1078.",2019-03-06 09:40:50,2019-07-13 00:25:22
182,1018,"> The result set has more than 1000 rows.
> Do you want to continue? [y/N]:

When I say `N`, I have to redo the query with a `LIMIT` clause. This can be annoying to wait when the query took a while. Instead of just `[y/N]` I'd like an option to display the first 1000 rows. ","Offer to display first 1000 rows
I think we want to do something like this:

* check and see if the query has LIMIT clause.
* if yes, do not change anything.
* if no, always limit to `row_limit = 1000` (https://github.com/dbcli/pgcli/blob/30c788917bf083aae6c4331ee102f8785c69432a/pgcli/pgclirc#L113), without any questions.
* change `row_limit` setting so that ""0"" means ""do not limit"".
Fixed in v2.2.0.",2019-03-05 04:40:08,2019-12-04 17:31:16
183,1017,"## Description
<!--- Describe your changes in detail. -->

Fixes https://github.com/dbcli/pgcli/issues/1014.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix for https://github.com/dbcli/pgcli/issues/1014.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=h1) Report
> Merging [#1017](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1c66dece59d4595eee3fb33d2609e2e288a28ff4?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `50%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1017/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master   #1017      +/-   ##
=========================================
- Coverage   84.76%   84.7%   -0.07%     
=========================================
  Files          21      21              
  Lines        2468    2471       +3     
=========================================
+ Hits         2092    2093       +1     
- Misses        376     378       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1017/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.12% <50%> (-0.5%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=footer). Last update [1c66dec...1601270](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=h1) Report
> Merging [#1017](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/72f6b6a5611c08ae22ee72d320995a35b6e45998?src=pr&el=desc) will **increase** coverage by `0.01%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1017/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1017      +/-   ##
==========================================
+ Coverage   84.59%   84.61%   +0.01%     
==========================================
  Files          21       21              
  Lines        2474     2477       +3     
==========================================
+ Hits         2093     2096       +3     
  Misses        381      381
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1017/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.22% <100%> (+0.14%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=footer). Last update [72f6b6a...a8739c8](https://codecov.io/gh/dbcli/pgcli/pull/1017?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

> What will happen in this case if the user executes a pgspecial command that needs a cursor?

It will throw an exception further down the line, in `pgspecial`. Right now, it just throws an exception earlier.

> I notice that \dp is NO_QUERY, but it might actually need a connection to execute. I guess it's fine since it's not actually implemented? I didn't notice any other pgspecial commands that might be problematic.

Whatever actually needs a connection, will break, but I think it's fine, because it also breaks now.

> Should some tests be added for what happens when the connection is closed but the prompt is still open? Should pgcli just exit at that point?

No need to exit. I recently merged a PR to auto-reconnect on connection dropped:

https://github.com/dbcli/pgcli/pull/1009

Automatic reconnect is a feature that `mycli` already had for a while, and it's much more convenient than asking the user if he wants to reconnect every time connection times out. After #1009 was merged, this change is only handling the edge case where auto-reconnect did not work.

Good point about testing. I will see if I can add a unit or integration test here. It may be a bit of a hassle, what with the additional complexity of killing the connection.
@maxrothman I added a unit test, would appreciate another look!
@j-bennet The test you added seems to be failing. Can you take a look? 
Will do.
Missed the pep8 problem. Perhaps it's time to black-ify this repo, just like you did for litecli. All good now!
:+1: 
Sorry I didn't have time to follow up with your comments. Thanks for getting this one across the finish line @amjith!",2019-03-05 00:53:44,2019-03-18 16:47:12
184,1016,"## Description
<!--- Describe your changes in detail. -->

Fixes the exception:

```
(pgcli) --- src/pgcli ‹master*M?› » pgcli postgres --single-connection                                                                   1 ↵
/Users/irina/.pyenv/versions/3.7.1/envs/pgcli/lib/python3.7/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use ""pip install psycopg2-binary"" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.
  """""")
Traceback (most recent call last):
  File ""/Users/irina/.pyenv/versions/pgcli/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli', 'console_scripts', 'pgcli')()
  File ""/Users/irina/.pyenv/versions/3.7.1/envs/pgcli/lib/python3.7/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/Users/irina/.pyenv/versions/3.7.1/envs/pgcli/lib/python3.7/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/Users/irina/.pyenv/versions/3.7.1/envs/pgcli/lib/python3.7/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Users/irina/.pyenv/versions/3.7.1/envs/pgcli/lib/python3.7/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 1062, in cli
    pgcli.run_cli()
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 621, in run_cli
    print('Server: PostgreSQL', self.pgexecute.get_server_version())
  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 222, in get_server_version
    pass
psycopg2.ProgrammingError: close cannot be used while an asynchronous query is underway
```

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix crash in get_server_version when using --single-connection.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=h1) Report
> Merging [#1016](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1c66dece59d4595eee3fb33d2609e2e288a28ff4?src=pr&el=desc) will **increase** coverage by `0.06%`.
> The diff coverage is `91.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1016/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1016      +/-   ##
==========================================
+ Coverage   84.76%   84.83%   +0.06%     
==========================================
  Files          21       21              
  Lines        2468     2466       -2     
==========================================
  Hits         2092     2092              
+ Misses        376      374       -2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1016/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <ø> (ø)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/1016/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `86.17% <100%> (+0.55%)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1016/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.77% <50%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=footer). Last update [1c66dec...c447ffc](https://codecov.io/gh/dbcli/pgcli/pull/1016?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice work!! 

:taco: ",2019-03-05 00:10:19,2019-03-16 20:44:41
185,1015,"pgcli depends on `humanize` which is https://github.com/jmoiron/humanize. 

The current version has a slightly odd behavior of rounding down unexpectedly:

```
In [11]: humanize.naturaltime(datetime.timedelta(seconds=120))                                                                         
Out[11]: '2 minutes ago'

In [12]: humanize.naturaltime(datetime.timedelta(seconds=119.9))                                                                       
Out[12]: 'a minute ago'

```
In the latter case I would have expected 2 minutes instead of 1.

The `humanize` package seems to be unmaintained, the last commit being two years ago. I wonder if dbcli might be a good home for a fork?
","humanize rounding down
Interesting. Both https://github.com/crsmithdev/arrow and https://github.com/sdispater/pendulum can humanize timespans, and they are actively developed. We could look into switching to one of those. They would both bring some extra requirements (`dateutil`, for one), but I think it would not be a ton.
I switched from arrow to pendulum after reading https://blog.eustace.io/please-stop-using-arrow.html and I'm *extremely* happy with it. For one thing, Pendulum introduces a Duration type, which seems like what's desired in the common case of asking ""how long did this query take"" - arrow doesn't have such a type.
Closing via https://github.com/dbcli/pgcli/pull/1199. Yay!",2019-03-05 00:00:07,2020-07-29 06:09:22
186,1014,"## Description
```
Connection reset. Reconnect (Y/n): \q
Error: \q is not a valid boolean
Connection reset. Reconnect (Y/n): n
wakapi_depl1> \q                                                                                                                                                                                                                             
connection already closed
wakapi_depl1>                                                                                                                                                                                                                                
wakapi_depl1> exit                                                                                                                                                                                                                           
connection already closed
wakapi_depl1> exit()                                                                                                                                                                                                                         
connection already closed
wakapi_depl1> quit                                                                                                                                                                                                                           
connection already closed
```
## Your environment
```
pgcli version: 2.0.2
postgres version: 10.5
OS: Linux 4.10.0-38-generic

```",cannot quit application without reconnecting to database?,2019-03-04 13:22:36,2019-03-18 16:47:12
187,1013,"```
webarchive> ALTER TABLE web_pages ADD CONSTRAINT test_unique_url UNIQUE (url);
You're about to run a destructive command.
Do you want to proceed? (y/n):
```

Adding a constraint isn't destructive. Why am I getting a warning? Is pgcli doing something else when I add a constraint?

## Your environment

- [x] Please provide your OS and version information.
```
durr@postgres-server ~> uname -a
Linux postgres-server 4.15.0-45-generic #48-Ubuntu SMP Tue Jan 29 16:28:13 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
durr@postgres-server ~> cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION=""Ubuntu 18.04.2 LTS""
```

- [x] Please provide your CLI version.
```
durr@postgres-server ~> sudo -H -u postgres pgcli
  """"""
Server: PostgreSQL 11.2
Version: 2.0.2
```

- [x] What is the output of ``pip freeze`` command.

```
durr@postgres-server ~> pip freeze
asn1crypto==0.24.0
attrs==17.4.0
Automat==0.6.0
bottle==0.12.13
certifi==2018.1.18
chardet==3.0.4
cli-helpers==1.1.0
click==6.7
colorama==0.3.7
configobj==5.0.6
constantly==15.1.0
cryptography==2.1.4
cycler==0.10.0
docker==2.5.1
docker-pycreds==0.2.1
Glances==2.11.1
humanize==0.5.1
hyperlink==17.3.1
idna==2.6
incremental==16.10.1
influxdb==4.1.1
iotop==0.6
matplotlib==2.1.1
netifaces==0.10.4
numpy==1.13.3
olefile==0.45.1
PAM==0.4.2
pgcli==2.0.2
pgspecial==1.11.5
Pillow==5.1.0
ply==3.11
prompt-toolkit==2.0.9
psutil==5.4.2
psycopg2==2.7.7
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycryptodomex==3.4.7
pycurl==7.43.0.1
Pygments==2.3.1
pygobject==3.26.1
pyOpenSSL==17.5.0
pyparsing==2.2.0
pyserial==3.4
pysmi==0.2.2
pysnmp==4.4.3
pystache==0.5.4
python-apt==1.6.3+ubuntu1
python-dateutil==2.6.1
pytz==2018.3
PyYAML==3.12
requests==2.18.4
service-identity==16.0.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
Twisted==17.9.0
unattended-upgrades==0.1
urllib3==1.22
wcwidth==0.1.7
websocket-client==0.44.0
zope.interface==4.3.2

```

I assume this is some sort of ""double check on `ALTER` commands"" thing, but well, it's sufficently dumb about it that it only serves to be annoying. Why was this even implemented?


If you're going to add warning popups with wording that make it sound like you're going to delete stuff, **make sure it only happens when you're *actually* going to delete stuff!**

If you can't fully disambiguate if a command is *actually* destructive, **don't call them destructive commands**.  

I still think this entire feature is dumb, but maybe say ""You're about to run a `ALTER/Whatever` command. This *may* irrevocably delete data. Continue?"", or some similar verbiage that at least is aware that not all ALTER commands delete stuff.","""You're about to run a destructive command"" for command that isn't destructive.
Hi. You're right it is implemented naively. We simply check if it is an ALTER command display the warning. 

I'm open to changing the verbiage, feel free to open a PR. If you want to turn off that warning you can also do that via your [config file](https://www.pgcli.com/config). Check for the words `destructive_warning`. 

",2019-03-03 08:11:16,2019-03-03 15:43:23
188,1012,"## Description
<!--- Describe your problem as fully as you can. -->

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.
- [ ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.
","How debug pgcli on Windows - Spyder
Hello, I am trying to run pgcli on Spyder from sources (github) with error
 ModuleNotFoundError: No module named '__main__.pgcompleter'; '__main__' is not a package
(after installing with pip). How can pgcli be run?

Windows 10, pgcli - Version: 2.0.2

JK",2019-02-26 23:24:28,2019-02-27 18:07:17
189,1011,"## Description
I've installed pgcli with pip using `pip install pgcli`. I then went to use pgcli and received the error:

```
$  pgcli messaging
zsh: /usr/local/bin/pgcli: bad interpreter: /usr/local/opt/python/bin/python3.6: no such file or directory
```

It seems the stub created for pgcli points to a specific directory for the python interpreter...

```
$ cat /usr/local/bin/pgcli
#!/usr/local/opt/python/bin/python3.6

# -*- coding: utf-8 -*-
import re
import sys

from pgcli.main import cli

if __name__ == '__main__':
    sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])
    sys.exit(cli())
```

## Your environment
I'm currently running OS X 10.14.3 with python installed using `asdf-python`. I have python 2.7 and python 3.7 installed.

```
$ pip freeze
...
pgcli==2.0.2
...
```

I love these command line tools and am currently using pgcli with a workaround by simply changing this line to use `#!/usr/bin/env python3`
","Bad Interpreter Path
This seems to be a mismatch between the pip and the default python on your system. Can you try this? 

```
python -m pip install pgcli 
```

That will use the pip from the current python. 

Or you can always use brew to install pgcli. For that you'll have to use `brew install pgcli`
Thanks for the response. It seems this would fix it and seems to be a common way to mitigate a issue like this. 

I have also realized I believe I had `pgcli` installed before I installed python using `asdf` and I actually think this might have been the cause. Possibly used brew to install python or another python version manager.

Either way thanks for the response and your awesome work on this project!",2019-02-19 14:23:15,2019-02-20 13:31:20
190,1010,"## Description
<!--- Describe your problem as fully as you can. -->

Hi, I wish to hide/remove/disable the footer with `[F2] Smart Completion: ON  [F3] Multiline: ON   (Semi-colon [;] will end the line) [F4] Vi-mode (I)`, is it possible?","Feature Request: Optional bottom_toolbar
I couldn't find an option for that in the default config.
You're correct, there's no such option right now.
@j-bennet thanks. For now I'm commenting out [`bottom_toolbar=get_toolbar_tokens`](https://github.com/dbcli/pgcli/blob/f614cef7ed63fd7f2a9c44600f4d3c84f96c59d2/pgcli/main.py#L703). I'll leave as a feature request to have an option around that available.
Duplicate of #939
@igorkaludjer thanks. Closing this one.",2019-02-14 17:36:19,2019-02-26 03:39:35
191,1009,"## Description

Adding the enhancement requested in #989 to automatically reconnect to the database when the server closes the connection.

I couldn't figure out how to add testing for this since I couldn't find a way to force a disconnect to trigger the auto reconnection. 

## Checklist

- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add reconnect automatically enhancement
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=h1) Report
> Merging [#1009](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bd0aaefdd277b7328ff5948d8621d34fb8f87dfd?src=pr&el=desc) will **decrease** coverage by `0.15%`.
> The diff coverage is `10%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1009/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1009      +/-   ##
==========================================
- Coverage   84.92%   84.76%   -0.16%     
==========================================
  Files          21       21              
  Lines        2467     2468       +1     
==========================================
- Hits         2095     2092       -3     
- Misses        372      376       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/1009/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.77% <10%> (-0.12%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/1009/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=footer). Last update [bd0aaef...d8cdc58](https://codecov.io/gh/dbcli/pgcli/pull/1009?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Brilliant! `mycli` already has this feature, and it's great. I wanted to add it to `pgcli` for months!

There's no need for the extra config flag. It's not like the extra prompt (""Connection reset. Reconnect?"") is a user-friendly feature. Let's just attempt to automatically reconnect by default.

Thank you for the PR!
Awesome! I made some changes to set this as the default/only behavior... If this isn't quite what you meant though, let me know and I'm happy to adjust however you would like it.

I'm excited to contribute! I love this tool, thanks for maintaining such clear contributor documentation and issue comments so that it was easy to jump in! 
Thanks for the great feedback and for the instructions on how to force the disconnect (much easier than just waiting an hour or so whenever I make changes). 

I put in all the output text updates you requested, all sound great! I'm also now passing `text` from the query that was just attempted to the retry opposed to getting the last successful run 😬great catch on that part. 
Looks good! I'll have some time and try it out tomorrow (2/21/19).
Works great. Merging! Thank you for the PR.

🍓 
Yay! Thanks for all your help getting this into its current state! I'm super excited to have been able to contribute back to a tool that I spend so much time using 🙌 
Thank you @808sAndBR and @j-bennet, works great! Would it be a good idea to also reconnect automatically in case of `SSL SYSCALL error: Operation timed out`?",2019-02-14 16:42:05,2019-02-24 00:37:27
192,1008,"```
pgcli ""sslmode=verify-ca sslrootcert=server-ca.pem \
      sslcert=client-cert.pem sslkey=client-key.pem \
      hostaddr=$IP \
      port=5432 \
      user=database-user dbname=postgres""
Password for system-user:
'host'
```

I'm using google cloudsql to generate certificate. Some errors happens when I run this command, first, it prompts Password for my local system user, not the specified user=database-user, this may mislead user to input mac user password, second, even if I input the correct password for database user, it will output 'host' but not allow me to enter the database. While if I run the same command with `psql`, all things right, and I entered database.


## Your environment
x86_64 i386 MacBookPro14,2 Darwin
pgcli --version    Version: 2.0.2",SSL BUG,2019-02-14 09:16:11,
193,1007,"## Description
<!--- Describe your changes in detail. -->

i added the esc key in `pgcli/key_bindings.py` to dismiss the autocomplete. The main reason for this, that it sometimes tends to get in the way of the source, especially if you have multiline selects pasted into pgcli.

since im not that profound into python and its libs you could maybe improve the current solution.

thank you for maintaining this greate piece of software!

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","keybinding for dismissing autocompletelist
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=h1) Report
> Merging [#1007](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/484abb6530b4d271b88d3b38b44f26e7ccd67650?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `20%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1007/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master    #1007      +/-   ##
==========================================
- Coverage   84.86%   84.79%   -0.07%     
==========================================
  Files          21       21              
  Lines        2464     2467       +3     
==========================================
+ Hits         2091     2092       +1     
- Misses        373      375       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/1007/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `41.02% <20%> (-0.65%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=footer). Last update [484abb6...9678f2a](https://codecov.io/gh/dbcli/pgcli/pull/1007?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you for the PR! I can't help but feel that autocomplete is the best part of pgcli, but people have different needs. :) It seems to work fine. Merging!

🍫 
the autocomplete is greate :) but if you dump a big function into the cli and want to verify it again, before hitting enter, the autocomplete tends to be in the way.",2019-02-11 09:14:03,2019-02-13 00:18:33
194,1006,"## Description
fix unhashable formatted text


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","fix unhashable formatted text
Do I need to refactor `metadata.result_set()` to use `utils.completions_to_set()` ? (Pro: I like to have it clear that `completions_to_set(one) == completions_to_set(two)`, Con: a lot of duplicate `completions_to_set(get_result())` calls)
Should `completions_to_set` be moved to `metadata` ?
Are all Completion fields extracted in `metadata.result_set()`? (`display_text` and `display_meta_text` are compared)
Shall I rewrite 
`assert result == completions_to_set(expected)` to 
`assert completions_to_set(result) == completions_to_set(expected)`?",2019-02-08 10:57:20,2019-02-08 20:25:03
195,1005,"## Description
1. connect to whatever database
2. set serch_path to whatever
3. `> \d table_name`
4. wait..
5. wait again...
6. Obtain the table description multiple times, concatenated
```
+------------------+---------+-----------------------------------------------------------------------------------------------------------------------
| Column           | Type    | Modifiers                                                                                                             
|------------------+---------+-----------------------------------------------------------------------------------------------------------------------
| organization_id  | uuid    |       stuff                                                                                                                
+------------------+---------+-----------------------------------------------------------------------------------------------------------------------
Triggers:
    forbid_deletion BEFORE DELETE ON .....blabla

+------------------+---------+-----------------------------------------------------------------------------------------------------------------------
| Column           | Type    | Modifiers                                                                                                             
|------------------+---------+-----------------------------------------------------------------------------------------------------------------------
| organization_id  | uuid    |                    stuff                                                                                                   blabla
+------------------+---------+-----------------------------------------------------------------------------------------------------------------------
Triggers:
    forbid_deletion BEFORE ... blablabla

Same stuff again...
```
I am not sure it's intended, it surely doesn't hurt, but feels wierd.
Should show only description once, scrollable only to the end of description, not rolling over to 

## Your environment
pgcli version: 2.0.2
postgres version: 10.5
OS: Linux 4.10.0-38-generic

- [ ] Please provide your OS and version information.
- [ ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.
","""describe table"" returns multiple redundant results",2019-01-29 14:47:07,2019-05-06 19:18:17
196,1004,"If I paste a multiline query such as 
```
SELECT
  anomaly_date,
  factor_val,
FROM dev_coseries
WHERE insertion_id = 23
  AND anomaly_date = '2019-01-20'
ORDER BY score_value
LIMIT 50;
```
into the prompt and then press `Ctrl-p`  I expect to go to the previous query. However both in Emacs and Vi (normal) mode ctrl-p takes me to the previous  line (i.e I have to repeatedly press `Ctrl-p` until I reach the top of query and only then I go back in history to the previous query). ","Ctrl-p not going to previous history with multiline queries in history
@jonathanslenders Can you tell if this is intended behavior?
The following snippet in keybindings.py might do the trick. Requires verification. 

```
from prompt_toolkit.filters import has_selection

@key_bindings.add('c-p', filter=~has_selection)
def _(event):
    event.current_buffer.history_backward(count=event.arg)
```
@amjith  Can this be added as a default (or optional) binding? I believe it's indeed a sensible  default to have
FWIW, PgUp and PgDown seems to do just that.
@petobens Yes. I left that comment as a direction for someone interested in contributing a PR. 

The file to add this is https://github.com/dbcli/pgcli/blob/master/pgcli/key_bindings.py
",2019-01-28 21:09:55,2019-07-29 20:00:34
197,1003,"## Description
I want to add application layer on top of your cli - will have to change 10% or your files.
How do i credit original authors?
Your LICENCE file is not very clear.


","can i use your code for my project?
Our license is a BSD 3 clause. You can do whatever the hell you want with the code. :smile: 

It's nice that you're asking us how to credit, maybe send us a link to your project and list our project in your readme. 

What are you planning to build?
great, thank you!
i'll send the link.",2019-01-27 02:47:36,2019-05-04 22:24:59
198,1002,"## Description
Remove build dir before running sdist
fixes #993

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Remove build dir before running sdist
👍 
I hope this finally does it. Nice find!",2019-01-25 19:48:17,2019-01-25 20:37:18
199,1001,"## Description
Missed logfile for earlier clean up and add behave logging changes. Thanks for finding this @saper!


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Missed logfile for earlier clean up and add behave logging changes
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1001?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@9306d94`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/1001/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/1001?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master    #1001   +/-   ##
=========================================
  Coverage          ?   84.86%           
=========================================
  Files             ?       21           
  Lines             ?     2464           
  Branches          ?        0           
=========================================
  Hits              ?     2091           
  Misses            ?      373           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1001?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/1001?src=pr&el=footer). Last update [9306d94...a88c693](https://codecov.io/gh/dbcli/pgcli/pull/1001?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:zap: ",2019-01-22 18:21:10,2019-01-22 18:46:31
200,1000,"## Description
So after getting a fresh installation of a PostgreSQL server and login into with pgcli I get the following error:

```
➜ pgcli -h localhost -p 5432 -U postgres -W postgres -d postgres
Password: 
Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/lib/python3.5/threading.py"", line 914, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.5/threading.py"", line 862, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/share/pgcli/pgcli/completion_refresher.py"", line 58, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/share/pgcli/pgcli/completion_refresher.py"", line 100, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/usr/share/pgcli/pgcli/pgcompleter.py"", line 133, in extend_functions
    for f in func_data:
  File ""/usr/share/pgcli/pgcli/pgexecute.py"", line 384, in functions
    cur.execute(self.functions_query)
psycopg2.ProgrammingError: column p.proisagg does not exist
LINE 6:                 p.proisagg is_aggregate,
                        ^
HINT:  Perhaps you meant to reference the column ""p.prolang"".
```
Nonetheless this error I can keep using pgcli.

## Your environment

Ubuntu 16.04.5 LTS


```
pgcli -v    
Version: 0.20.1
```
```
postgres> select version();
+----------------------------------------------------------------------------------------------------------------------------------+
| version                                                                                                                          |
|----------------------------------------------------------------------------------------------------------------------------------|
| PostgreSQL 11.1 (Debian 11.1-1.pgdg90+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516, 64-bit |
+----------------------------------------------------------------------------------------------------------------------------------+
```
","Column p.proisagg does not exist
It appears we should use `pg_proc.prokind` in Postgresql 11:

https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=fd1a421fe66173fb9b85d3fe150afde8e812cbe4
Which apparently was fixed here already https://github.com/dbcli/pgcli/issues/919 :thinking: 
Fixed,

I had installed pgcli via apt instead of using pip so I was using an old version (`0.20.1`). So removed it and installed again via pip (`2.0.2`)
👍 
Getting the same error:
```
[16:16:35 abhinickz@abhinickz -> ~$ pgcli test
Version: 1.9.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
test> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/lib/python3.7/threading.py"", line 917, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.7/threading.py"", line 865, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/share/pgcli/pgcli/completion_refresher.py"", line 68, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/share/pgcli/pgcli/completion_refresher.py"", line 146, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/usr/share/pgcli/pgcli/pgcompleter.py"", line 224, in extend_functions
    for f in func_data:
  File ""/usr/share/pgcli/pgcli/pgexecute.py"", line 612, in functions
    cur.execute(query)
psycopg2.ProgrammingError: column p.proisagg does not exist
LINE 8:                         p.proisagg is_aggregate,
                                ^
HINT:  Perhaps you meant to reference the column ""p.prolang"".
```
```
[16:17:30 abhinickz@abhinickz -> ~$ pgcli --version
Version: 1.9.1
```
```
[16:17:33 abhinickz@abhinickz -> ~$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 19.04
Release:	19.04
Codename:	disco
```
```
[16:18:02 abhinickz@abhinickz -> ~$ psql --version
psql (PostgreSQL) 11.3 (Ubuntu 11.3-1.pgdg18.10+1)
```

@Abhinickz Try updating: `pip install -U pgcli`. Your version is 1.9.1 and the fix was added in 2.0.2.",2019-01-22 15:11:44,2019-01-23 09:51:41
201,999,Also revert unfinished logging change from #956,"VISUAL overrides the value of EDITOR for the \e command
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/999?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@ef8aac6`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/999/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/999?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #999   +/-   ##
=========================================
  Coverage          ?   84.86%           
=========================================
  Files             ?       21           
  Lines             ?     2464           
  Branches          ?        0           
=========================================
  Hits              ?     2091           
  Misses            ?      373           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/999?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/999?src=pr&el=footer). Last update [ef8aac6...69118ed](https://codecov.io/gh/dbcli/pgcli/pull/999?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Uh, I'm fine with adding VISUAL and I see why you're reverting my extended logging, I forgot to port some code from mycli. These lines need to be copied: 

https://github.com/dbcli/mycli/blob/2538d3fe56eb7b274280cb9102abdd201ca74ccc/test/features/steps/wrappers.py#L82

Would you like to do this or shall I create a new PR and close this one?
Thanks @meeuw - I think this is a very useful addition, but we should think more about how to implemented it nicely. I am not sure why we need `logfile` in both `context` and `context.cli`? I also personally do not like the situation where the test code gets so complex that it needs its own tests :) I wonder how we could solve it better? Maybe this should be discussed in a separate PR....
I don't remember why I used a separate context.logfile, you could try to remove it and see if it still works.

In my opinion adding a logfile isn't testing, I agree the behave/expect tests are hard to debug (that's what I was trying to solve using the logfile).

Please rewrite this PR to only include the VISUAL addition and optionally add the logfile which I've missed while porting this feature from mycli.
:+1: thanks, also for finding the bug with logfile, I'll try to post a PR this evening to fix it.
I'll also add a contribution to the changelog for this.",2019-01-21 10:36:14,2019-01-22 15:25:00
202,998,"## Description

We are using `ex(1)` editor to check for interactive editing possibility. Unfortunately, there as a result of environment settings it may be difficult to make sure its behavior is consistent.

Examples:

- [x] if `VISUAL` environment variable is set, that editor will be invoked in preference to `EDITOR`. This does not have to be ex. Sumitted #999 to fix this.
- [ ] There are at least two `ex` implementations available - one coming from vim and the nex editor coming from nvi package (default on FreeBSD, can be made default on Debianlike systems and possibly others). Debian example, ""ex"" is from `vim-tiny`, ""nex"" is from `nex`:

````
$ ex /tmp/f
""/tmp/f"" [New File]
Entering Ex mode.  Type ""visual"" to go to Normal mode.
:q
$ nex /tmp/f
/tmp/f: new file: line 1
:q

````
- [ ] if `TERM` is xterm-like `ex` from vim will switch terminal buffers. I had to set `TERM` to `vt100` to quell this behavior (may or may not matter here). Related terminfo capabilities are `smcup`/`rmcup` (`ti`/`te` for termcap)
- [ ] if non-English locale is set, ""new file"" message will be translated:

````
> env LANG=pl_PL.UTF-8 ex /tmp/f
/tmp/f: nowy plik: linia 1
````

This could possibly be fixed by setting `LC_ALL` variable but it would require to check and known a good UTF-8 locale name, otherwise `click` package complains:

````
RuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment.  Consult http://click.pocoo.org/python3/for mitigation steps.

This system lists a couple of UTF-8 supporting locales that
you can pick from.  The following suitable locales where
discovered: af_ZA.UTF-8, am_ET.UTF-8, be_BY.UTF-8, bg_BG.UTF-8, ca_AD.UTF-8, ca_ES.UTF-8, ca_FR.UTF-8, ca_IT.UTF-8, cs_CZ.UTF-8, da_DK.UTF-8, de_AT.UTF-8, de_CH.UTF-8, de_DE.UTF-8, el_GR.UTF-8, en_AU.UTF-8, en_CA.UTF-8, en_GB.UTF-8, en_IE.UTF-8, en_NZ.UTF-8, en_US.UTF-8, es_ES.UTF-8, et_EE.UTF-8, eu_ES.UTF-8, fi_FI.UTF-8, fr_BE.UTF-8, fr_CA.UTF-8, fr_CH.UTF-8, fr_FR.UTF-8, he_IL.UTF-8, hr_HR.UTF-8, hu_HU.UTF-8, hy_AM.UTF-8, is_IS.UTF-8, it_CH.UTF-8, it_IT.UTF-8, ja_JP.UTF-8, kk_KZ.UTF-8, ko_KR.UTF-8, lt_LT.UTF-8, lv_LV.UTF-8, mn_MN.UTF-8, nb_NO.UTF-8, nl_BE.UTF-8, nl_NL.UTF-8, nn_NO.UTF-8, no_NO.UTF-8, pl_PL.UTF-8, pt_BR.UTF-8, pt_PT.UTF-8, ro_RO.UTF-8, ru_RU.UTF-8, sk_SK.UTF-8, sl_SI.UTF-8, sr_YU.UTF-8, sv_SE.UTF-8, tr_TR.UTF-8, uk_UA.UTF-8, zh_CN.UTF-8, zh_HK.UTF-8, zh_TW.UTF-8
````

Before taking a stab at this, maybe we should reconsider using ex.

## Your environment
PostgreSQL 11.1 Server

- [x] Please provide your OS and version information.

FreeBSD 11.1

- [x] Please provide your CLI version.

git master as of f614cef7ed63fd7f2a9c44600f4d3c84f96c59d2

- [x] What is the output of ``pip freeze`` command.

````
alabaster==0.7.6
args==0.1.0
arm==1.4.5.0
asn1crypto==0.22.0
attrs==17.3.0
Babel==2.5.3
blinker==1.4
boto==2.48.0
cdiff==1.0
certifi==2018.4.16
cffi==1.11.5
characteristic==14.3.0
chardet==3.0.4
clint==0.5.1
configparser==3.5.0
cryptography==2.1.4
cvs2svn==2.5.0
Cython==0.26
dnet==1.12
dnspython==1.15.0
docopt==0.6.2
docutils==0.14
ec2-cli-tools==1.5
enum34==1.1.6
feedparser==5.2.1
flake8==3.5.0
funcsigs==1.0.2
gdbm==0.0.0
gevent==1.2.2
greenlet==0.4.13
gyp==0.1
httplib2==0.11.3
idna==2.6
imagesize==0.7.1
ipaddr==2.2.0
ipaddress==1.0.22
isc==2.0
Jinja2==2.10
jsonpatch==1.21
jsonpointer==1.9
MarkupSafe==1.0
maxminddb==1.3.0
mccabe==0.6.1
mercurial==4.6
nyx==2.0.4
oauth2client==4.1.2
oauthlib==1.1.2
pep8==1.7.1
pexpect==4.2.0
Pillow==5.0.0
pipenv==2018.5.18
pluggy==0.6.0
ply==3.11
psycopg2==2.7.5
ptyprocess==0.5.1
py==1.5.3
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycodestyle==2.3.1
pycparser==2.18
pycrypto==2.6.1
pyflakes==1.5.0
pyhdb==0.3.1
PyJWT==1.4.0
pylibpcap==0.6.4
pyOpenSSL==17.5.0
PySocks==1.6.8
PyStemmer==1.3.0
pytest==3.4.2
python-potr==1.0.1
pytz==2018.4
PyYAML==3.12
requests==2.18.4
requests-oauthlib==0.6.2
rsa==3.4.2
scapy===unknown.version
schema==0.4.0
service-identity==17.0.0
six==1.11.0
snowballstemmer==1.2.0
sphinx-rtd-theme==0.2.4
sphinxcontrib-websupport==1.0.1
sqlite3==0.0.0
stem==1.6.0
Tkinter==0.0.0
tox==2.3.1
Twisted-Core==15.2.1
Twisted-Pair==15.2.1
txsocksx==1.15.0.2.post1
txtorcon==0.14.0
typing==3.6.4
ujson==1.35
urllib3==1.22
vcversioner==2.14.0.0
virtualenv==15.1.0
virtualenv-clone==0.3.0
webencodings==0.5.1
xmpppy==0.5.0
youtube-dl==2016.1.1
zope.interface==4.1.3
````",behave: ex editor behaviour needs to be consistent,2019-01-21 10:31:19,
203,997,"## Description

Running behave tests that fail causes behave to raise an exception:

````
Traceback (most recent call last):
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/model.py"", line 1329, in run
    match.run(runner.context)
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/matchers.py"", line 98, in run
    self.func(context, *args, **kwargs)
  File ""features/steps/iocommands.py"", line 20, in step_edit_file
    context, 'Entering Ex mode.  Type ""visual"" to go to Normal mode.', timeout=2)
  File ""/home/saper/sw/pgcli/tests/features/steps/wrappers.py"", line 42, in expect_exact
    context.logfile.getvalue()
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/runner.py"", line 321, in __getattr__
    raise AttributeError(msg)
AttributeError: 'Context' object has no attribute 'logfile'
````

## Your environment
PostgreSQL 11.1

- [x] Please provide your OS and version information.

FreeBSD 11.1

- [x] Please provide your CLI version.

git master as of f614cef7ed63fd7f2a9c44600f4d3c84f96c59d2

- [x] What is the output of ``pip freeze`` command.

````
alabaster==0.7.6
args==0.1.0
arm==1.4.5.0
asn1crypto==0.22.0
attrs==17.3.0
Babel==2.5.3
blinker==1.4
boto==2.48.0
cdiff==1.0
certifi==2018.4.16
cffi==1.11.5
characteristic==14.3.0
chardet==3.0.4
clint==0.5.1
configparser==3.5.0
cryptography==2.1.4
cvs2svn==2.5.0
Cython==0.26
dnet==1.12
dnspython==1.15.0
docopt==0.6.2
docutils==0.14
ec2-cli-tools==1.5
enum34==1.1.6
feedparser==5.2.1
flake8==3.5.0
funcsigs==1.0.2
gdbm==0.0.0
gevent==1.2.2
greenlet==0.4.13
gyp==0.1
httplib2==0.11.3
idna==2.6
imagesize==0.7.1
ipaddr==2.2.0
ipaddress==1.0.22
isc==2.0
Jinja2==2.10
jsonpatch==1.21
jsonpointer==1.9
MarkupSafe==1.0
maxminddb==1.3.0
mccabe==0.6.1
mercurial==4.6
nyx==2.0.4
oauth2client==4.1.2
oauthlib==1.1.2
pep8==1.7.1
pexpect==4.2.0
Pillow==5.0.0
pipenv==2018.5.18
pluggy==0.6.0
ply==3.11
psycopg2==2.7.5
ptyprocess==0.5.1
py==1.5.3
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycodestyle==2.3.1
pycparser==2.18
pycrypto==2.6.1
pyflakes==1.5.0
pyhdb==0.3.1
PyJWT==1.4.0
pylibpcap==0.6.4
pyOpenSSL==17.5.0
PySocks==1.6.8
PyStemmer==1.3.0
pytest==3.4.2
python-potr==1.0.1
pytz==2018.4
PyYAML==3.12
requests==2.18.4
requests-oauthlib==0.6.2
rsa==3.4.2
scapy===unknown.version
schema==0.4.0
service-identity==17.0.0
six==1.11.0
snowballstemmer==1.2.0
sphinx-rtd-theme==0.2.4
sphinxcontrib-websupport==1.0.1
sqlite3==0.0.0
stem==1.6.0
Tkinter==0.0.0
tox==2.3.1
Twisted-Core==15.2.1
Twisted-Pair==15.2.1
txsocksx==1.15.0.2.post1
txtorcon==0.14.0
typing==3.6.4
ujson==1.35
urllib3==1.22
vcversioner==2.14.0.0
virtualenv==15.1.0
virtualenv-clone==0.3.0
webencodings==0.5.1
xmpppy==0.5.0
youtube-dl==2016.1.1
zope.interface==4.1.3
````","behave: AttributeError: 'Context' object has no attribute 'logfile'
Closed via https://github.com/dbcli/pgcli/pull/992.",2019-01-21 09:52:16,2019-05-05 03:20:51
204,996,All pexpect submodules have been moved into the pexpect package as of version 3.0.,"Use pexpect.TIMEOUT instead of pexpect.exceptions.TIMEOUT
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/996?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@ef8aac6`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/996/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/996?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #996   +/-   ##
=========================================
  Coverage          ?   84.86%           
=========================================
  Files             ?       21           
  Lines             ?     2464           
  Branches          ?        0           
=========================================
  Hits              ?     2091           
  Misses            ?      373           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/996?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/996?src=pr&el=footer). Last update [ef8aac6...4542637](https://codecov.io/gh/dbcli/pgcli/pull/996?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@saper Nice catch! Looks like we're already pinning to 3.3 here:

https://github.com/dbcli/pgcli/blob/ef8aac61c476bd46747d3d4910a4d494a59fa375/requirements-dev.txt#L6

I'm surprised we didn't run into an error until now!
> @saper Nice catch! Looks like we're already pinning to 3.3 here:

Yes, what I mean that behaviour has been changed in 3.0 already. But this all comes from the #956 patch :(",2019-01-21 09:23:02,2019-01-22 18:23:38
205,995,"## Description
exclude tests as package from setup.py

fixes #993 

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","exclude tests as package from setup.py
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=h1) Report
> Merging [#995](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f614cef7ed63fd7f2a9c44600f4d3c84f96c59d2?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/995/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #995      +/-   ##
==========================================
- Coverage   84.94%   84.82%   -0.13%     
==========================================
  Files          21       21              
  Lines        2464     2464              
==========================================
- Hits         2093     2090       -3     
- Misses        371      374       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/995/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=footer). Last update [f614cef...6d07dad](https://codecov.io/gh/dbcli/pgcli/pull/995?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@meeuw Thank you for the PR! I really want to fix this problem too, but I think this fix did not do it.

Here is the process I used to test the PR (I also use pyenv so I had to work around that):

```
$ cd ~/src/pgcli

$ git checkout internal/exclude_tests_package

$ pyenv deactivate

# reset python back to system
$ pyenv global system

# check my python paths
$ python -m site
sys.path = [
    '/Users/irina/src/pgcli',
    '/Users/irina/bin/spark-2.3.0-bin-hadoop2.7/python/lib/pyspark.zip',
    '/Users/irina/bin/spark-2.3.0-bin-hadoop2.7/python/lib/py4j-0.10.6-src.zip',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload',
    '/usr/local/lib/python2.7/site-packages',
    '/usr/local/lib/python2.7/site-packages/geos',
    '/usr/local/Cellar/numpy/1.15.4/libexec/nose/lib/python2.7/site-packages',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages',
    '/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/geos',
]
USER_BASE: '/Users/irina/Library/Python/2.7' (doesn't exist)
USER_SITE: '/Users/irina/Library/Python/2.7/lib/python/site-packages' (doesn't exist)
ENABLE_USER_SITE: True

# build a wheel from branch
$ python setup.py sdist bdist_wheel

# do not install wheel while in pgcli dir. That does not work
$ cd ~

$ python -m pip install ~/src/pgcli/dist/pgcli-2.0.2-py2-none-any.whl

# check if I have pgcli in site-packages
$ ll /usr/local/lib/python2.7/site-packages/ | grep pgcli
drwxr-xr-x  30 irina  admin   960B Jan 20 10:30 pgcli
drwxr-xr-x   8 irina  admin   256B Jan 20 10:30 pgcli-2.0.2.dist-info

# check if I have tests in site-packages
$ ll /usr/local/lib/python2.7/site-packages/ | grep tests
drwxr-xr-x  39 irina  admin   1.2K Jan 20 10:30 tests

# Yikes! Tests are still there.

# Double-check by uninstalling pgcli. That shows which dirs will be removed.
$ python -m pip uninstall pgcli
Uninstalling pgcli-2.0.2:
  Would remove:
    /usr/local/bin/pgcli
    /usr/local/lib/python2.7/site-packages/pgcli-2.0.2.dist-info/*
    /usr/local/lib/python2.7/site-packages/pgcli/*
    /usr/local/lib/python2.7/site-packages/tests/*
Proceed (y/n)?
```

I still see that `tests` package.
agreed, doesn't seem to fix it, could you please have a look at #993 ?",2019-01-19 10:54:02,2019-01-22 19:57:08
206,994,"## Description
<!--- Describe your problem as fully as you can. -->
Moving around a multi-line query to edit it is extremely slow+laggy in Vi mode when a semicolon is present at the end of the line. Deleting the semicolon instantly speeds up movement for some reason. This is obnoxious in multiline mode when a semicolon is required to send a query and when one wants to move up to edit the query.
## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
MacOS 10.14.2
- [x] Please provide your CLI version.
2.0.2
- [x] What is the output of ``pip freeze`` command.
Empty for some reason","Cursor movement slow/laggy when semicolon present in Vi mode
I'm running into this as well.

OS: GNU/Linux (Solus)
CLI version: 2.02
`pip freeze`:
```
attrs==18.2.0
awscli==1.16.51
boltons==19.1.0
botocore==1.12.41
cli-helpers==1.1.0
Click==7.0
colorama==0.3.9
configobj==5.0.6
docutils==0.14
face==0.1.0
glom==19.2.0
gnupg==2.3.1
humanize==0.5.1
jmespath==0.9.3
pgcli==2.0.2
pgspecial==1.11.5
prompt-toolkit==2.0.8
psutil==5.4.8
psycopg2==2.7.7
pyasn1==0.4.4
pycairo==1.18.0
Pygments==2.3.1
PyGObject==3.30.1
pyopt==0.84
pyotp==2.2.7
python-dateutil==2.7.5
python-gnupg==0.4.3
pytotp==3
PyYAML==3.13
rsa==3.4.2
s3transfer==0.1.13
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.3
terminaltables==3.1.0
urllib3==1.24.1
wcwidth==0.1.7
```
@jonathanslenders Would you be able to have a look?
Getting this too, both in Vi and Emacs mode.

OS: Windows 10 Pro 1803
CLI version: 2.0.2
pip freeze: [gist](https://gist.github.com/Ovyerus/efeb08e0782ce5cd3b50b7b85cb756d8)
@jonathanslenders I have the same problem in emacs mode as well. It is quite pronounced.
I'm trying to reproduce it, but so far I don't have any issues. Can any of you reproduce it with a local, empty database?

I've added a sleep a 1 second in the completer as well, to be sure any latency there wouldn't block anything, but so far that doesn't affect cursor movement.
Haven't upgraded pgcli since, and I just tested it now on both a new empty db, and the same one as before and it seems to have fixed itself?
Weird, I can't reproduce it either right now. If it happens again I'll see if I will make note. I did mess around with my config file recently so maybe it has something to do with that...
Having the same issue. Did some cProfiling and by comparing the percall times I was able to trace it down to the `_is_complete` method in `pgbuffer.py` (see [here](https://github.com/dbcli/pgcli/blob/8cb7009bcd0f0062942932c853706a36178f566c/pgcli/pgbuffer.py#L28)). Looks like [`is_open_quote`](https://github.com/dbcli/pgcli/blob/8cb7009bcd0f0062942932c853706a36178f566c/pgcli/packages/parseutils/utils.py#L108) is slow (for being hot code), and it's only called when the `and` isn't short-circuited, which is when multi-line mode is on and there's a semicolon at the end of the statement.

Disabling the `and not is_open_quote(sql)` seems to fix the issue on my machine. Maybe there's a way to remove that check or improve the performance of it?
This should be fixed on master due to #1109 - @isobit's analysis was spot-on - we were unnecessarily calling the expensive `is_open_quote` method (way) too frequently due to the way the multi-line mode was being switched on/off dynamically. Now, we only run that method once, on Enter keypress
Did a quick test, and it does seem to not be happening anymore. 🎉 
Fixed in 2.2.0.",2019-01-18 21:56:44,2019-12-04 17:36:25
207,993,"## Description
You include `tests` dir in PyPi packages and they end up in my `site-packages` upon installing. 
Not sure how exactly you build and upload to PyPi, I could not build packages with the result you have. 

Problem:
```
$ cd $(mktemp -d)
$ # downloads from https://pypi.org/project/pgcli/#files
$ wget -q https://files.pythonhosted.org/packages/92/90/d22afd3a9e9ceae1095ae697fb1fdbaa1bf01b70b5706bb26cb6ae71851c/pgcli-2.0.2-py3-none-any.whl
$ wget -q https://files.pythonhosted.org/packages/a6/23/c3b9a86116b6d5d248a794fd2d874ae0e7f0efb6b3c8175c1e41cb7bde12/pgcli-2.0.2.tar.gz
$ sha256sum *
ef64fdf4d968f108953ebe0e106ce58ce5ce14a73c4f786641f44718881cc08b  pgcli-2.0.2-py3-none-any.whl
04f4d3f4dd61d2d165eb2fd8d77879357489a74ca1446cd09fa375c7561392dc  pgcli-2.0.2.tar.gz
$ unzip -t pgcli-2.0.2-py3-none-any.whl | grep tests | wc -l
33
$ tar -tvf pgcli-2.0.2.tar.gz | grep tests | wc -l
51
```
Problem as experienced in my project:
```
$ python -c 'import tests; print(tests)'
<module 'tests' from '...../backend/tests/__init__.py'>
# this is fine, now let's install pgcli
$ pip install pgcli==2.0.2 > /dev/null
$ python -c 'import tests; print(tests)'
<module 'tests' from '/home/bartek/.pyenv/versions/xtv/lib/python3.7/site-packages/tests/__init__.py'>
```
my env (rather not important):
```
$ cat /etc/issue
Ubuntu 18.04.1 LTS \n \l
$ pip freeze --all | egrep 'setuptools|pip='
pip==18.1
setuptools==40.6.3
```

Usually this is the solution:
```
# setup.py
packages=find_packages(exclude=['tests*']),
```","Don't include tests in PYPI packages
thanks! I've created a PR... I couldn't test the fix using virtualenv/pip so I hope this works.
It's kind of weird that tests is used as a package while there isn't a `tests/__init__.py` 
Yes, I wondered too. Checked, `MANIFEST.in` has it. Not sure why, maybe travis or similar tool needs it. If not, remove there too.

I don't remember well but there were differences in package contents ans reading manifest between sdist and bdist_wheel. Both should be checked. It's enough to build both and check resulting files. 

I see now that the build procedure is well documented, this is so helpful, still I am sorry I won't find time to verify this.
I added it to `MANIFEST.in` a year ago to run the test suite after building the rpms so I'd rather keep the tests in the distribution.
I see the benefit to your ease of testing :) but with all respect, you are shadowing a very important word in the namespace, for all of us, I can rename module `tests` in my own project but should I?
```
  File ""/home/bartek/workspace/regalix/xtv/backend/core/factories.py"", line 24, in <module>
    from tests.const import TEST_DOMAIN
ModuleNotFoundError: No module named 'tests.const'
```
Let's find a solution that works for both of us, why don't you just remove the tests as the step before `upload_distribution_files` in `release.py`:
```
zip -d dist/pgcli*.whl ""tests/*""
# with tar it is much more complex, so I start wondering if this compromise is a good way to go
```

:|, what would it take to convince you that tests should not go into package? Could you perhaps rename your tests to `pgcli_tests` or move to `pgcli/tests`?
I totally agree the tests shouldn't be in the bdist and when I run:
`$ python setup.py bdist bdist_wheel`
there are no tests in in the wheel on my system:
`$ unzip -l dist/pgcli-2.0.2-py3-none-any.whl|grep tests`
(no output)

https://files.pythonhosted.org/packages/92/90/d22afd3a9e9ceae1095ae697fb1fdbaa1bf01b70b5706bb26cb6ae71851c/pgcli-2.0.2-py3-none-any.whl
does have the tests...

@j-bennet could you please have a look at the above command on the system you're using to release a new version of pgcli?
For me, grep returns this:

```
(pgcli) --- src/pgcli ‹master*?› » unzip -l dist/pgcli-2.0.2-py3-none-any.whl | grep tests
        0  09-21-2018 19:30   tests/__init__.py
     1056  07-28-2018 06:12   tests/conftest.py
     8649  09-10-2018 20:11   tests/metadata.py
     2586  01-11-2018 20:31   tests/test_completion_refresher.py
      673  01-11-2018 20:31   tests/test_config.py
        0  01-11-2018 20:31   tests/test_exceptionals.py
     2866  01-11-2018 20:31   tests/test_fuzzy_completion.py
    10646  09-21-2018 19:18   tests/test_main.py
     2612  01-11-2018 20:31   tests/test_naive_completion.py
    13410  07-27-2018 23:52   tests/test_pgexecute.py
     2541  01-11-2018 20:31   tests/test_pgspecial.py
      657  01-11-2018 20:31   tests/test_prioritization.py
      312  06-16-2018 22:07   tests/test_prompt_utils.py
     2092  01-11-2018 20:31   tests/test_rowlimit.py
    21639  07-28-2018 06:12   tests/test_smart_completion_multiple_schemata.py
    31990  01-11-2018 20:31   tests/test_smart_completion_public_schema_only.py
    28513  01-11-2018 20:31   tests/test_sqlcompletion.py
     2255  06-17-2018 05:05   tests/utils.py
        0  01-11-2018 20:31   tests/features/__init__.py
     1982  01-11-2018 20:31   tests/features/db_utils.py
     5708  09-21-2018 22:13   tests/features/environment.py
      767  09-21-2018 22:12   tests/features/fixture_utils.py
      272  01-11-2018 20:31   tests/features/wrappager.py
        0  01-11-2018 20:31   tests/features/steps/__init__.py
     2309  09-21-2018 19:49   tests/features/steps/auto_vertical.py
     2187  09-21-2018 21:22   tests/features/steps/basic_commands.py
     2403  09-21-2018 19:50   tests/features/steps/crud_database.py
     2594  09-21-2018 19:50   tests/features/steps/crud_table.py
     2080  09-21-2018 19:50   tests/features/steps/expanded.py
     2768  09-21-2018 19:50   tests/features/steps/iocommands.py
     1416  09-21-2018 19:50   tests/features/steps/named_queries.py
      742  09-21-2018 19:50   tests/features/steps/specials.py
     1227  09-21-2018 19:33   tests/features/steps/wrappers.py
```

Here is the full output of `python setup.py bdist bdist_wheel` in master. It definitely packages tests:

https://gist.github.com/j-bennet/9a3f6051d90ff9315771ce9efe50db42
@j-bennet could you please retry after (re)moving the build dir? It seems bdist doesn't clean the build directory in advance...
@meeuw You're right! that did it!

This is so stupid that bdist does not do the cleanup. We should probably include `rm -rf ./build` into our release script.",2019-01-17 17:51:43,2019-01-25 20:37:18
208,992,"Avoid error message on the server side if hstore
extension is not installed in the current database.

Issue: https://github.com/dbcli/pgcli/issues/991","Determine hstore OID from the system view
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=h1) Report
> Merging [#992](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f614cef7ed63fd7f2a9c44600f4d3c84f96c59d2?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/992/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #992      +/-   ##
==========================================
- Coverage   84.94%   84.86%   -0.09%     
==========================================
  Files          21       21              
  Lines        2464     2464              
==========================================
- Hits         2093     2091       -2     
- Misses        371      373       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/992/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.62% <100%> (+0.31%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/992/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <0%> (-4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=footer). Last update [f614cef...f719973](https://codecov.io/gh/dbcli/pgcli/pull/992?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you for the PR - good catch! Please add your contribution to https://github.com/dbcli/pgcli/blob/master/AUTHORS and https://github.com/dbcli/pgcli/blob/master/changelog.rst.
I thought about adding a test for this, but I have never fiddled with behave.

Also, I get one pytest error and one behave error when running the tests; should I file bug reports for them?
The build is passing on your branch. Do the tests fail locally? Which ones?
Here is the full output of what I am trying to do.... sorry for the nice ANSI decorations (I hate these!)

https://gist.github.com/saper/ed1a93cfc187c1caa18508833e2b0f12
If you want behave to not colorize the output, you can run it with:

`behave --format plain`

This error:

```
      Traceback (most recent call last):
        File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/model.py"", line 1329, in run
          match.run(runner.context)
        File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/matchers.py"", line 98, in run
          self.func(context, *args, **kwargs)
        File ""features/steps/iocommands.py"", line 20, in step_edit_file
          context, 'Entering Ex mode.  Type ""visual"" to go to Normal mode.', timeout=2)
        File ""/home/saper/sw/pgcli/tests/features/steps/wrappers.py"", line 19, in expect_exact
          except pexpect.exceptions.TIMEOUT:
      AttributeError: module 'pexpect' has no attribute 'exceptions'
```

makes me think that you might not have the same pexpect version as specified here:

https://github.com/dbcli/pgcli/blob/f614cef7ed63fd7f2a9c44600f4d3c84f96c59d2/requirements-dev.txt#L6

Did you install dev reqs with this?

```
pip install -r requirements-dev.txt --upgrade --upgrade-strategy only-if-needed
```
yes, I have `pexpect` at 3.3 as required. It seems to me that this code path has not been taken recently, since pexpect has `TIMEOUT` now in the root module and there is no `pexpect.exceptions` package:

```
> python3.6
Python 3.6.5 (default, May 10 2018, 01:13:55) 
[GCC 4.2.1 Compatible FreeBSD Clang 3.4.1 (tags/RELEASE_34/dot1-final 208032)] on freebsd10
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import pexpect
>>> pexpect.__version__
'3.3'
>>> pexpect.exceptions
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
AttributeError: module 'pexpect' has no attribute 'exceptions'
>>> pexpect.TIMEOUT
<class 'pexpect.TIMEOUT'>
>>> 
```

Fixing this (#996) leads to another problem (two failures):

````
    Then we see database connected ... failed in 2.026s
Traceback (most recent call last):
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/model.py"", line 1329, in run
    match.run(runner.context)
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/matchers.py"", line 98, in run
    self.func(context, *args, **kwargs)
  File ""features/steps/crud_database.py"", line 99, in step_see_db_connected
    wrappers.expect_exact(context, 'You are now connected to database', timeout=2)
  File ""/home/saper/sw/pgcli/tests/features/steps/wrappers.py"", line 42, in expect_exact
    context.logfile.getvalue()
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/runner.py"", line 321, in __getattr__
    raise AttributeError(msg)
AttributeError: 'Context' object has no attribute 'logfile'
````

````
Feature: I/O commands

  Scenario: edit sql in file with external editor
    When we start external editor providing a file name ... failed in 2.111s
Traceback (most recent call last):
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/model.py"", line 1329, in run
    match.run(runner.context)
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/matchers.py"", line 98, in run
    self.func(context, *args, **kwargs)
  File ""features/steps/iocommands.py"", line 20, in step_edit_file
    context, 'Entering Ex mode.  Type ""visual"" to go to Normal mode.', timeout=2)
  File ""/home/saper/sw/pgcli/tests/features/steps/wrappers.py"", line 42, in expect_exact
    context.logfile.getvalue()
  File ""/home/saper/pgcli/lib/python3.6/site-packages/behave/runner.py"", line 321, in __getattr__
    raise AttributeError(msg)
AttributeError: 'Context' object has no attribute 'logfile'
````

I think the core of this problem is that FreeBSD's `ex` (`nvi`) behaves somewhat differently, but it is good to check this part of the code. This seems unrelated to the issue I was fixing there.

I'll continue to shave this yak
I have filed separate #997 for the context issue. It seems that both problems are fallout from probably incomplete #956 
The core issue (ex incompatibilities) has been filed as https://github.com/dbcli/pgcli/issues/998
Looks good. Merging - thanks a lot for the PR!

🌷 ",2019-01-17 15:25:44,2019-01-22 00:00:26
209,991,"## Description
PostgreSQL server logs the following when using pgcli on a database that does not have `hstore` extension enabled:

    ERROR:  type ""hstore"" does not exist at character 8
    STATEMENT:   SELECT 'hstore'::regtype::oid

## Your environment
PostgreSQL 11.1 Server, pgcli 1.11.0 (all running on FreeBSD 11)

Also confirmed on: PostgreSQL 9.5.1 server upgraded from 8.4 (all running on Debian Linux), pgcli 1.11.0 (FreeBSD 11)

- [x] Please provide your OS and version information.

FreeBSD 11.1

- [x] Please provide your CLI version.

1.11.0 from FreeBSD ports (py36-pgcli-1.11.0)

- [x] What is the output of ``pip freeze`` command.

````
alabaster==0.7.6
args==0.1.0
arm==1.4.5.0
asn1crypto==0.22.0
attrs==17.3.0
Babel==2.5.3
blinker==1.4
boto==2.48.0
cdiff==1.0
certifi==2018.4.16
cffi==1.11.5
characteristic==14.3.0
chardet==3.0.4
clint==0.5.1
configparser==3.5.0
cryptography==2.1.4
cvs2svn==2.5.0
Cython==0.26
dnet==1.12
dnspython==1.15.0
docopt==0.6.2
docutils==0.14
ec2-cli-tools==1.5
enum34==1.1.6
feedparser==5.2.1
flake8==3.5.0
funcsigs==1.0.2
gdbm==0.0.0
gevent==1.2.2
greenlet==0.4.13
gyp==0.1
httplib2==0.11.3
idna==2.6
imagesize==0.7.1
ipaddr==2.2.0
ipaddress==1.0.22
isc==2.0
Jinja2==2.10
jsonpatch==1.21
jsonpointer==1.9
MarkupSafe==1.0
maxminddb==1.3.0
mccabe==0.6.1
mercurial==4.6
nyx==2.0.4
oauth2client==4.1.2
oauthlib==1.1.2
pep8==1.7.1
pexpect==4.2.0
Pillow==5.0.0
pipenv==2018.5.18
pluggy==0.6.0
ply==3.11
psycopg2==2.7.5
ptyprocess==0.5.1
py==1.5.3
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycodestyle==2.3.1
pycparser==2.18
pycrypto==2.6.1
pyflakes==1.5.0
pyhdb==0.3.1
PyJWT==1.4.0
pylibpcap==0.6.4
pyOpenSSL==17.5.0
PySocks==1.6.8
PyStemmer==1.3.0
pytest==3.4.2
python-potr==1.0.1
pytz==2018.4
PyYAML==3.12
requests==2.18.4
requests-oauthlib==0.6.2
rsa==3.4.2
scapy===unknown.version
schema==0.4.0
service-identity==17.0.0
six==1.11.0
snowballstemmer==1.2.0
sphinx-rtd-theme==0.2.4
sphinxcontrib-websupport==1.0.1
sqlite3==0.0.0
stem==1.6.0
Tkinter==0.0.0
tox==2.3.1
Twisted-Core==15.2.1
Twisted-Pair==15.2.1
txsocksx==1.15.0.2.post1
txtorcon==0.14.0
typing==3.6.4
ujson==1.35
urllib3==1.22
vcversioner==2.14.0.0
virtualenv==15.1.0
virtualenv-clone==0.3.0
webencodings==0.5.1
xmpppy==0.5.0
youtube-dl==2016.1.1
zope.interface==4.1.3
````","ERROR:  type ""hstore"" does not exists at character 8
Looks like 

     select t.oid FROM pg_type t WHERE t.typname = 'hstore' and t.typisdefined

may provide `hstore` oid without generating an error message on the server.

Borrowed-from: [psycopg2](https://github.com/psycopg/psycopg2/blob/0236c68da94c7ca884e3ced1b2c53ad84812678a/lib/_json.py#L192)
Closed via https://github.com/dbcli/pgcli/pull/992.",2019-01-17 14:26:48,2019-05-05 02:50:40
210,990,"## Description

Given a database dump, in a `structure.sql` file for example, `pgcli` is unable to load the dump.

### Expected

Similar to `psql DB_NAME < structure.sql`, expected `pgcli DB_NAME < structure.sql` to work.

### Actual

```
$ pgcli example-db < ./db/structure.sql
Warning: Input is not to a terminal (fd=0).
Server: PostgreSQL 10.6
Version: 2.0.2
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
example-db> --
can't execute an empty query
Time: 0.002s
example-db> -- PostgreSQL database dump
can't execute an empty query
Time: 0.001s
example-db> --
can't execute an empty query
Time: 0.001s
example-db>

Time: 0.000s
example-db> -- Dumped from database version 9.6.8
can't execute an empty query
Time: 0.000s
example-db> -- Dumped by pg_dump version 9.6.8
can't execute an empty query
Time: 0.000s
example-db>

Time: 0.000s
example-db> SET statement_timeout = 0;
SET
Time: 0.003s
example-db> SET lock_timeout = 0;
SET
Time: 0.000s
example-db> SET idle_in_transaction_session_timeout = 0;
SET
Time: 0.000s
example-db> SET client_encoding = 'UTF8';
SET
Time: 0.000s
example-db> SET standard_conforming_strings = on;
SET
Time: 0.000s
example-db> SELECT pg_catalog.set_config('search_path', '', false);
+--------------+
| set_config   |
|--------------|
|              |
+--------------+
SELECT 1
Time: 0.014s
example-db> SET check_function_bodies = false;
SET
Time: 0.000s
example-db> SET client_min_messages = warning;
SET
Time: 0.000s
example-db> SET row_security = off;
SET
Time: 0.001s
example-db>

Time: 0.000s
example-db> --
can't execute an empty query
Time: 0.000s
example-db> -- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
can't execute an empty query
Time: 0.001s
example-db> --
can't execute an empty query
Time: 0.000s
example-db>

Time: 0.000s
example-db> CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;
CREATE EXTENSION
Time: 0.005s
example-db>

Time: 0.000s
example-db>

Time: 0.000s
example-db> --
can't execute an empty query
Time: 0.005s
example-db> -- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
can't execute an empty query
Time: 0.001s
example-db> --
can't execute an empty query
Time: 0.001s
example-db>

Time: 0.000s
example-db> COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';
COMMENT
Time: 0.011s
example-db>

Time: 0.000s
example-db>

Time: 0.000s
example-db> --
can't execute an empty query
Time: 0.000s
example-db> -- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
can't execute an empty query
Time: 0.001s
example-db> --
can't execute an empty query
Time: 0.000s
example-db>

Time: 0.000s
example-db> CREATE EXTENSION IF NOT EXISTS ""uuid-ossp"" WITH SCHEMA public;
CREATE EXTENSION
Time: 0.026s
example-db>

Time: 0.000s
example-db>

Time: 0.000s
example-db> --
can't execute an empty query
Time: 0.001s
example-db> -- Name: EXTENSION ""uuid-ossp""; Type: COMMENT; Schema: -; Owner: -
can't execute an empty query
Time: 0.001s
example-db> --
can't execute an empty query
Time: 0.001s
example-db>

Time: 0.000s
example-db> COMMENT ON EXTENSION ""uuid-ossp"" IS 'generate universally unique identifiers (UUIDs)';
COMMENT
Time: 0.002s
example-db>

Time: 0.000s
example-db>

Time: 0.000s
example-db> SET default_tablespace = '';
SET
Time: 0.002s
example-db>

Time: 0.000s
example-db> SET default_with_oids = false;
SET
Time: 0.000s
example-db>

Time: 0.000s
example-db> --
can't execute an empty query
Time: 0.001s
example-db> -- Name: background_logs; Type: TABLE; Schema: public; Owner: -
can't execute an empty query
Time: 0.001s
example-db> --
can't execute an empty query
Time: 0.001s
example-db>

Time: 0.000s
example-db> CREATE TABLE public.background_logs (
syntax error at end of input
LINE 1: CREATE TABLE public.background_logs (
                                             ^

Time: 0.001s
example-db>     id integer NOT NULL,
syntax error at or near ""id""
LINE 1: id integer NOT NULL,
        ^

Time: 0.001s
example-db>     job character varying,
syntax error at or near ""job""
LINE 1: job character varying,
        ^

Time: 0.001s
example-db>     category character varying,
syntax error at or near ""category""
LINE 1: category character varying,
        ^

Time: 0.001s
example-db>     finished_at timestamp without time zone,
syntax error at or near ""finished_at""
LINE 1: finished_at timestamp without time zone,
        ^

Time: 0.001s
example-db>     created_at timestamp without time zone NOT NULL,
syntax error at or near ""created_at""
LINE 1: created_at timestamp without time zone NOT NULL,
        ^

Time: 0.001s
example-db>     updated_at timestamp without time zone NOT NULL
syntax error at or near ""updated_at""
LINE 1: updated_at timestamp without time zone NOT NULL
        ^

Time: 0.001s
example-db> );
syntax error at or near "")""
LINE 1: )
        ^
```
and so on for the rest of interpreting the dump file.

## Environment

- [x] Please provide your OS and version information.
  - macOS 10.14.2
- [x] Please provide your CLI version.
  - pgcli 2.0.2, psql (PostgreSQL) 11.1
- [x] What is the output of ``pip freeze`` command.
```
aniso8601==3.0.2
astroid==2.0.2
autopep8==1.3.5
botocore==1.12.38
certifi==2018.4.16
click==6.7
docutils==0.14
Flask==0.12.2
Flask-RESTful==0.3.6
isort==4.3.4
itsdangerous==0.24
Jinja2==2.10
jmespath==0.9.3
lazy-object-proxy==1.3.1
MarkupSafe==1.0
mccabe==0.6.1
pipenv==2018.11.26
prettytable==0.7.2
pycodestyle==2.4.0
pylint==2.1.0
python-dateutil==2.7.5
pytz==2018.5
s3transfer==0.1.13
six==1.11.0
typed-ast==1.1.0
typing==3.6.4
urllib3==1.24.1
virtualenv==16.2.0
virtualenv-clone==0.3.0
Werkzeug==0.14.1
wrapt==1.10.11
```","Loading a db dump fails
`pgcli` was built for interactive use. It is best to still use `psql` for non-interactive tasks, like data export or import. I'm not saying this is impossible to implement, but our primary focus was not on this functionality. If someone decides to add it, we'd welcome the PR!
Duplicate of https://github.com/dbcli/pgcli/issues/307.",2019-01-16 11:58:47,2019-05-05 14:58:41
211,989,"## Description
When a redshift connection is idle for a couple of minutes and then a command is issued, pgcli hangs for several minutes (this is a psycopg2 issue) before it outputs ""SYSCALL error"". Then you have to issue to command again, after which it prompts ""Connection reset. Reconnect?"".  Then it outputs ""Reconnected! Try the command again"" and you have to issue the command the third time. mycli reconnects automatically without any prompts. It would be great if we could have the same in pgcli. Thanks for the great work!

## Your environment
MacOS 10.14.1
pgcli v2.0.2.

```
appnope==0.1.0
autopep8==1.4.3
awscli==1.16.81
backcall==0.1.0
boto3==1.9.69
botocore==1.12.71
cachetools==3.0.0
certifi==2018.11.29
chardet==3.0.4
colorama==0.3.9
configobj==5.0.6
decorator==4.3.0
docopt==0.6.2
docutils==0.14
et-xmlfile==1.0.1
future==0.17.1
google-api-python-client==1.7.7
google-auth==1.6.2
google-auth-httplib2==0.0.3
httplib2==0.12.0
idna==2.8
ipython==7.2.0
ipython-genutils==0.2.0
jdcal==1.4
jedi==0.13.2
jmespath==0.9.3
mccabe==0.6.1
mysql-connector==2.1.6
numpy==1.15.4
oauth2client==4.1.3
openpyxl==2.5.12
pandas==0.23.4
parso==0.3.1
pexpect==4.6.0
pickleshare==0.7.5
pluggy==0.8.0
prompt-toolkit==2.0.7
psycopg2==2.7.6.1
ptpython==2.0.4
ptyprocess==0.6.0
pyasn1==0.4.4
pyasn1-modules==0.2.2
pycodestyle==2.4.0
pydocstyle==3.0.0
pyflakes==2.0.0
Pygments==2.3.1
python-dateutil==2.7.5
python-jsonrpc-server==0.0.2
python-language-server==0.21.4
pytz==2018.7
PyYAML==3.13
requests==2.21.0
rope==0.11.0
rsa==3.4.2
s3transfer==0.1.13
scipy==1.2.0
six==1.12.0
snowballstemmer==1.2.1
SQLAlchemy==1.2.15
sqlalchemy-redshift==0.7.2
sqlparse==0.2.4
traitlets==4.3.2
uritemplate==3.0.0
urllib3==1.24.1
wcwidth==0.1.7
yapf==0.25.0
```","Reconnect automatically
I agree, that's annoying. For the reference for someone wanting to take this on, here is where mycli handles reconnection:

https://github.com/dbcli/mycli/blob/6a3b5f3200db1a00053b87e3c80ff0242dd7f069/mycli/main.py#L654-L668
Closed via https://github.com/dbcli/pgcli/pull/1009.",2019-01-15 11:24:50,2019-05-04 22:26:37
212,988,"## Description

I type `GRANT ALL PRIVILEGES ON DATABASE foo TO <tab>` and I expect a list of roles but pgcli offers me database names.

## Your environment

- pgcli 1.3.1
- Debian 9.6",Completion gives unexpected suggestion for GRANT… TO,2019-01-14 10:33:52,
213,987,"## Description

I type `GRANT ALL PRIVILEGES ON <tab>` and I expect the `DATABASE` keyword but nothing comes up.

## Your environment

- pgcli 1.3.1
- Debian 9.6 (stable)",Completion doesn't work for all of GRANT… ON,2019-01-14 10:31:54,
214,986,"## Description

It could be nice to be able to use the docker image without having to built it first.","feature request: official docker image
Hi you can see https://hub.docker.com/u/dbcliorg",2019-01-06 04:37:31,
215,985,"We want `dbcli` application to be as user-friendly as possible. To that end, supporting a unified approach of disabling color (`theme = bw` in our case) sounds like a good idea. From a reddit commenter:

> You may want to check out https://no-color.org/. It's not an official standard but a lot of CLI apps are supporting this convention. Makes it nice for users like /u/kst who want to easily disable colors on certain apps. (Usually you also want something like $MYAPPNAME_NO_COLOR to disable colors for only your app, instead of globally).

Source: https://www.reddit.com/r/programming/comments/ackccw/a_cli_for_sqlite_with_autocompletion_and_syntax/ed9c6u2",Consider supporting NO_COLOR env variable,2019-01-04 23:23:53,
216,984,"## Description
<!--- Describe your changes in detail. -->

Releasing 2.0.2
","Changelog update for bugfix release.
@lhw what's the news with updating `pgcli` debian packages?",2019-01-03 00:30:43,2019-01-03 00:31:06
217,983,"## Description
<!--- Describe your changes in detail. -->

Fix for the lag problem in v2, part 1 (https://github.com/dbcli/pgcli/issues/979).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
~- [ ] I've added this contribution to the `changelog.rst`.~
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Wrap pgcli completer into ThreadedCompleter.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=h1) Report
> Merging [#983](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d2aa09413411f346620a76f703573b2cecf2d17d?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/983/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #983      +/-   ##
==========================================
- Coverage    84.6%   84.48%   -0.13%     
==========================================
  Files          21       21              
  Lines        2468     2468              
==========================================
- Hits         2088     2085       -3     
- Misses        380      383       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/983/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.08% <100%> (ø)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/983/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.84% <0%> (-3.95%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=footer). Last update [d2aa094...f7303f6](https://codecov.io/gh/dbcli/pgcli/pull/983?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:mushroom: ",2018-12-27 18:40:53,2018-12-28 01:36:59
218,982,"## Description
<!--- Describe your changes in detail. -->

Fix for the lag problem in v2 (https://github.com/dbcli/pgcli/issues/979).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Remove some functions completions
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=h1) Report
> Merging [#982](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d2aa09413411f346620a76f703573b2cecf2d17d?src=pr&el=desc) will **decrease** coverage by `0.09%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/982/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #982     +/-   ##
=========================================
- Coverage    84.6%   84.51%   -0.1%     
=========================================
  Files          21       21             
  Lines        2468     2473      +5     
=========================================
+ Hits         2088     2090      +2     
- Misses        380      383      +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/982/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.53% <ø> (ø)` | :arrow_up: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/982/diff?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `96.95% <100%> (+0.01%)` | :arrow_up: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/982/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `82.89% <100%> (+0.46%)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/982/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.84% <0%> (-3.95%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/982/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.08% <0%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=footer). Last update [d2aa094...ed5dc2e](https://codecov.io/gh/dbcli/pgcli/pull/982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Cleaned up and ready to merge. This does not fix the problem completely, but it's an improvement. There's also https://github.com/dbcli/pgcli/pull/983 to address the same problem.
Here are the results that I got when removing either extension functions, or non-public functions, or both, from completions:

https://gist.github.com/j-bennet/f6181e28460916910433882abb8d2b75

In my case (I have postgis installed)

* initially, I get up to 3603 completions
* removing extensions gets rid of 1059 completions
* removing non-public functions gets rid of 2374 completions
* removing both gets rid of 3434 completions.

I did not add a filter for underscored function names. It was not necessary, they went away once I filtered out extensions.

I handle a case when the user explicitly types a non-public schema name here:

https://github.com/dbcli/pgcli/blob/ed5dc2e68ac373d69a949f13be48ab20b4d2161f/pgcli/pgcompleter.py#L648

The one case I'm not handling here is filtering extensions. What if a user explicitly wants an extension function and starts typing it? What is a good way to handle that?
Going to merge this and deal with edge cases after.",2018-12-27 18:40:06,2019-01-03 00:16:00
219,981,Update pgspecial req.,"bump pgspecial req.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=h1) Report
> Merging [#981](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9494ef705003a99b2053f2b4084e9346b6c279a0?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/981/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=tree)

```diff
@@          Coverage Diff           @@
##           master    #981   +/-   ##
======================================
  Coverage    84.6%   84.6%           
======================================
  Files          21      21           
  Lines        2468    2468           
======================================
  Hits         2088    2088           
  Misses        380     380
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=footer). Last update [9494ef7...1ba7368](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=h1) Report
> Merging [#981](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9494ef705003a99b2053f2b4084e9346b6c279a0?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/981/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=tree)

```diff
@@          Coverage Diff           @@
##           master    #981   +/-   ##
======================================
  Coverage    84.6%   84.6%           
======================================
  Files          21      21           
  Lines        2468    2468           
======================================
  Hits         2088    2088           
  Misses        380     380
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=footer). Last update [9494ef7...1ba7368](https://codecov.io/gh/dbcli/pgcli/pull/981?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-12-15 05:13:18,2018-12-20 19:33:37
220,980,As far as I can see (but might be terribly mistaken) pygments true color formatter is not being used (http://pygments.org/docs/formatters/?highlight=truecolor#TerminalTrueColorFormatter). Can a config option be added to do so? Thanks!,"Use pygments TrueColorFormatter 
@petobens Is there currently a way to use just the ordinary TerminalFormatter for syntax coloring?
You can create your own pygments style and place it in the pygments style folder. I do such thing here: https://github.com/petobens/dotfiles/blob/master/python/onedarkish.py and here: https://github.com/petobens/dotfiles/blob/master/setup-new/python.sh#L99
Thank you! It would be nice though to have a built-in option to use the terminal formatter.",2018-12-12 23:29:04,
221,979,"## Description
It's hard to demonstrate, but I have noticable lag when typing out a query in v2.0.1 compared to v1.11.0. It's usually at the end of a query, so i'll get as far as `update table set colum = value where...` and then it will start stuttering. Please let me know what information would be helpful to diagnose the problem.

## Your environment
<!-- This gives us some more context to work with. -->
- [ ] Please provide your OS and version information.
- [ ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.

MacOS `10.13.6`
pgcli `v2.0.1`

```
➜ pip freeze
awscli==1.16.13
boto3==1.7.70
botocore==1.12.3
certifi==2018.8.24
chardet==3.0.4
cli-helpers==1.1.0
Click==7.0
colorama==0.3.9
configobj==5.0.6
docutils==0.14
httpie==0.9.9
httpie-jwt-auth==0.3.0
humanize==0.5.1
idna==2.7
jmespath==0.9.3
pgcli==1.11.0
pgspecial==1.11.4
prompt-toolkit==1.0.15
psycopg2==2.7.6.1
pyasn1==0.4.4
Pygments==2.2.0
python-dateutil==2.7.3
python-magic==0.4.15
pytz==2018.5
PyYAML==3.13
requests==2.19.1
rsa==3.4.2
s3cmd==2.0.2
s3transfer==0.1.13
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
urllib3==1.23
wcwidth==0.1.7
You are using pip version 18.0, however version 18.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
```

","Lag when typing in v2
I think it's most likely a prompt-toolkit issue. Migrating to prompt-toolkit 2.0 was the only change in `pgcli` 2.0. @jonathanslenders can you advise?
One change in prompt_toolkit 2.0 is that completions are now synchronous by default. If they are expensive, they have to be wrapped into ``prompt_toolkit.completion.ThreadedCompleter``, otherwise they'll block the event loop and make the UI unresponsive. Could this be the cause?
Is there a reason for synchronous completion being the default?  
> If they are expensive, they have to be wrapped

By ""expensive"" you mean they take long to retrieve? Or there's a lot of them? From the timings that I logged, it seems that retrieving those values is fast (less than a milisecond), but is it possible that rendering a lot is problematic? In pgcli, we seem to be displaying ~3k items in autocomplete (mostly function names).
I've also seen this lag. It is very annoying.
For me pgcli is unusable right now.  I'm experience typing pauses in the range of seconds - even when there are only a few completions.
@loisch your case sounds like the worst one. Can you please provide a few more details: your OS, what plugins are installed in Postgres (`\dx`), and if you're using a VM?
Did you try to wrap this completer into ``ThreadedCompleter`` anyone?

See this line:
https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L729

Change it with:
```python
from prompt_toolkit.completion import ThreadedCompleter
....
completer=ThreadedCompleter(DynamicCompleter(lambda: self.completer)),
```

Are you doing any network I/O for generating the completions?
@jonathanslenders There's a few factors in play here:

* we have to query the database to retrieve metadata (tables, columns, functions). This could cause a slowdown with a remote database. If this is the problem, `ThreadedCompleter` could help.
* compared to `mycli` (for example), `pgcli` may end up pulling a ton of function names into the list of completions. Lots of those come from installed extensions. It is possible that we should exclude those from completions, as their usefulness is doubtful.

I'm trying to figure out what it can be, and then we can we start trying fixes. I also need a reliable way to reproduce the problem. I've seen the slowdown, but it was not very pronounced, and only appeared with a huge list of completions.
For those affected by the lag problem, can you install `pgcli` from branch:

`pip install git+https://github.com/dbcli/pgcli.git@j-bennet/threaded-completer`

and see if this improves things for you? Please give a 👍 or 👎 here.
It's better for me, but not as smooth as it was before prompt-toolkit 2 upgrade
@j-bennet I just started up pgcli again to gather some information and now everything is fine again (maybe slightly slower than with the older version but that's only guessing).  I'm sorry, I can't reproduce it anymore!  I've previously deleted my very large history (many many commands and very large commands) but restarted pgcli and it didn't have an effect then.
@loisch Very interesting! If you run into this problem again, please do not kill your history file, it could be useful to us to debug what's going on (unless you cannot share it for privacy reasons). I'm glad the problem is remedied for now. I'm still working on another, hopefully more complete fix.
This is another fix that is trying to target ""too many completions"" problem by removing non-public finctions and those added by extensions from the list of completions. Please try it if you are able, 👍 or 👎 
 are appreciated:

`pip install git+https://github.com/dbcli/pgcli.git@j-bennet/remove-some-functions-completions`
After some more digging, the lag is reproducible (and very pronounced) only when using multiline mode. (This may or may not be a different problem, because not only there's a lag on autocompletions, there's even a lag when typing things, but...) In single-line mode, things are quite speedy. Here is the multiline query I was using:

```
SELECT n.nspname as ""Schema"",
  p.proname as ""Name"",
  pg_catalog.pg_get_function_result(p.oid) as ""Result data type"",
  pg_catalog.pg_get_function_arguments(p.oid) as ""Argument data types"",
 CASE
  WHEN p.proisagg THEN 'agg'
  WHEN p.proiswindow THEN 'window'
  WHEN p.prorettype = 'pg_catalog.trigger'::pg_catalog.regtype THEN 'trigger'
  ELSE 'normal'
 END as ""Type""
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
WHERE pg_catalog.pg_function_is_visible(p.oid)
      AND n.nspname <> 'pg_catalog'
      AND n.nspname <> 'information_schema'
ORDER BY 1, 2, 4;
```

In multiline mode, I see the lag:

* even with the `ThreadedCompleter`
* even when querying a local database.

So here is another debugging question to everyone affected: do you see the lag only/mostly in multiline mode (click 👍 ), or in single line mode also (click 👎 )?
I haven't tried the ThreadCompleter branch, but i did try the `remove-some-functions` branch. 

The remove-some-functions branch is significantly faster in both single line mode and multi line mode. 

The performance improvement is significant in multi line mode but there is definitely a performance improvement in both modes.
I tried the `remove-some-functions-completions` and I can say it's almost as fast as it was before ! Thanks !
Both fixes has been merged and released as part of `pgcli` v2.0.2. Please update with:

`pip install -U pgcli`",2018-12-12 12:11:02,2019-05-05 03:19:55
222,978,"## Description
Hi there. I've found out that pgcli doesn't support postgres multihost connection string ([pg docs](https://www.postgresql.org/docs/current/libpq-connect.html#id-1.7.3.8.3.6)):
```
$ pgcli postgresql://host1:123,host2:456/somedb?target_session_attrs=any
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 11, in <module>
    sys.exit(cli())
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 764, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 717, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 956, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 555, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python3.5/dist-packages/pgcli/main.py"", line 1028, in cli
    pgcli.connect_uri(database)
  File ""/usr/local/lib/python3.5/dist-packages/pgcli/main.py"", line 392, in connect_uri
    port=fixup_possible_percent_encoding(uri.port),
  File ""/usr/lib/python3.5/urllib/parse.py"", line 158, in port
    port = int(port, 10)
ValueError: invalid literal for int() with base 10: '123,host2:456'
```

I've found out that `urlparse` used for connection URI parsing doesn't support multiple hosts. I think that it would be convenient to switch to [`parse_dsn`](http://initd.org/psycopg/docs/extensions.html#psycopg2.extensions.parse_dsn) URI parsing function that comes with psycopg2 as pgcli already uses it as pg driver. I also provided extra test for multihost connection string.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","Support multihost connection string
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=h1) Report
> Merging [#978](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a7650887bf9579ae71d0b100d62978132aabb5d1?src=pr&el=desc) will **increase** coverage by `0.3%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/978/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #978     +/-   ##
=========================================
+ Coverage   84.51%   84.82%   +0.3%     
=========================================
  Files          21       21             
  Lines        2473     2464      -9     
=========================================
  Hits         2090     2090             
+ Misses        383      374      -9
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/978/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.66% <100%> (-0.18%)` | :arrow_down: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/978/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `85.3% <100%> (+2.76%)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/978/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.88% <100%> (-0.2%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=footer). Last update [a765088...e0abcd3](https://codecov.io/gh/dbcli/pgcli/pull/978?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Very nice. Thank you for the PR! Tests are especially appreciated. 🍓 

I noticed that the prompt looks a little weird when specifying multiple hosts:

```
(pgcli) --- src/pgcli ‹wronglink-master*?› » pgcli postgresql://localhost,lo.co.com,127.0.0.1/test
Server: PostgreSQL 10.6
Version: 2.0.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
irina@localhost,lo:test>
```
Maybe it makes sense to just display the first value for the host and port?
Thanks for a quick answer.

> Maybe it makes sense to just display the first value for the host and port?

There could be a problem displaying the wrong host (not the one you have connected to), like if the first host didn't answer or if it is filtered by some query parameters. For example, you can add `?target_session_attrs=read-write` to connect only read-write replica. I think it would make more sense to display the actual host you have connected to. I'll dig how to support it.
@j-bennet I've investigated that there is no correct way to identify current connected host in psycopg yet. There is closed issue about it: https://github.com/psycopg/psycopg2/issues/726 and after psycopg v2.8 released, pgcli can switch to [connection.info](
http://initd.org/psycopg/docs/connection.html#connection.info) property that returns [ConnectionInfo](http://initd.org/psycopg/docs/extensions.html#psycopg2.extensions.ConnectionInfo) object and init (or event proxy) PGExecute connection properties through it. So I implemented your idea to pick up the first host from the list.

I also slightly refactored PGExecute init method, to specify all the connection parameters after the connection is established and moved the `short_host` generation logic to a `PGExecute.short_host` property. What do you think of these changes?
I'm not against the refactor. I'm just trying to figure out the impact of it, i.e. how the new flow is different from the old one, and if it's going to break somewhere unexpected.

The old pgexecute was written in a way that would allow it to support the following use cases:

* establish a connection on `__init__`
* store connection properties (user, database etc) within `pgexecute` and return them to the cli as needed
* execute queries with established connection
* connect to a different database (if asked) without recreating `pgexecute` object and store the new state
* reconnect with the same parameters if connection was dropped

Does the refactor affect any of the use cases?
> Does the refactor affect any of the use cases?

It brakes the only one case: 

> reconnect with the same parameters if connection was dropped

as it doesn't store the original parameters. In common cases initial parameters are the same as parameters of established connection, but they could be different in case of multi-host connection. Reconnection would require the list of all initial hosts, but the object now stores only the connected one. The current `PGExecute` implementation has a problem of storing 2 values in one place: the initial values (before connection) and the actual one (after connection).
So looks like there's 2 ways we could handle the dropped connection use case in your refactor PR:

1. Reconnect to the same host that we last connected to (no additional code changes)
2. Store the original parameters (multiple hosts and all) and use them to reconnect (more code changes).

Of course, 1 is already better than what we currently have in pgcli (since we do not handle the multi-host connection at all). But in my personal opinion, 2 is preferable. What do you think?
Hi threre, sorry for long response. I also like the idea of storring the original connection options and reuse it in case of reconnection or altering the connection.

I see these options:
1. Store all initial data as `PGExecute` properties, which is a little bit strange, as we would store 2 copy of all initial parameters (initial and actual) and will lead to some misunderstandings
2. Store data passed to `psycopg2.connect` in a dict and use it for next reconnections. Something like `connection_params`.

In that case there would be 2 kinds of connection properties: initial that are stored as is and used for connection and actual that are taken from the real established connection. After we switch to psycopg2 v2.8, we can turn them into read-only public properties. What do you think?
I like it. I think this way is best:

> 2. Store data passed to psycopg2.connect in a dict and use it for next reconnections. Something like `connection_params`.

because we don't need to parse and re-parse things more than once.

It may be tricky to do this change and keep the code readable and the intent clear, but it's certainly doable.
I'd like to make a try. What do you think, keep it in current PR or make a separate one?
Same PR is fine.
@j-bennet I've updated PR and added some logic to support initial connection parameters storing and added ability to update some parts of connection through additional `executor.connect()` calls. What do you think of this?
Nice! Looks clean, and +1 for the test. Please add some comments when you `.copy()` things to explain why this is done. Otherwise, I think it's ready to go!
> Nice! Looks clean, and +1 for the test. Please add some comments when you `.copy()` things to explain why this is done. Otherwise, I think it's ready to go!

Sorry, I didn't get you well. Do you mean adding some comments where the `copy()` is being called (actually the only place is `pgcli/completion_refresher.py` and it has [comment](https://github.com/dbcli/pgcli/pull/978/files#diff-632d320c84eb6e42c9ef7847b274c828R56)) or adding docstring to `PGExecute.copy()`?

@wronglink Yes, pgexecute's new `copy` method.
@j-bennet done :-)
Looks good to me! Please rebase on top of master, and I can merge it.
@j-bennet done
👍 Merging. Thank you! 🍒 ",2018-12-05 09:22:46,2019-01-03 22:27:47
223,977,"## Description
<!--- Describe your changes in detail. -->

This adds a separate timing for query execution. It is useful to see how long things take on database side, and how long on pgcli side (formatting etc.). I am slightly worried that seeing this may make some people unhappy, but on the other hand, it can help us make pgcli better.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Time execution separately.
When I pull down this branch and try it out I don't see the two separate timing output. Am I supposed to see two timing output? 
You'll see `Time: xxx, executed in: yyy` only if total time > 1 sec.
```
Time: 2.074s (2 seconds), executed in: 2.067s (2 seconds)
```

Looks good to me. 

:anchor: ",2018-12-02 02:27:37,2018-12-07 18:39:08
224,976,"## Description
<!--- Describe your problem as fully as you can. -->
I have a table with a postgis wkb_geometry column, whose entries are extremely long strings of bytes (e.g. 1,000,000 hex characters). 

I'll often do `SELECT * FROM table LIMIT 1`. I'm not especially interested in reading the geometry column, but I don't mind if it's included either, so `SELECT *` is usually fine.

psql executes the above  in 2.2 milliseconds.
pgcli does the same in 0.6 seconds.
With more rows, it takes longer.

This is too slow for me. I could manually exclude the column by selecting all the columns I want, but that's fairly tedious. What options do I have for this situation? 

## Your environment
<!-- This gives us some more context to work with. -->
Ubuntu 18.04
Python 3.6.6
pgcli 2.0.1
","Slow for wide postgis column
Thanks for reporting it. This sounds awful!

I have no geometry data to reproduce your problem, but the same thing happens with really long text data (I'm talking 1,000,000 chars). I timed execution time separately from formatting time, and almost all of this time is spent formatting, not retrieving data.

The problem needs to be fixed in `cli_helpers` (which is the library we use to deal with formatting). I'll see what we can do.

In the meantime, you could try:

* switching to csv formatter (`table_format = csv` in config)
* turning on expanded output (`\x`)
@jtrakk I wonder if you can get away with using a different table format. You can change the different table format at runtime using `\T <table_format_name>`. Once you find a format that works decent you can set that to be your default in your config file `~/.config/pgcli/config`. 

Let us know if that temporary workaround works for you.",2018-12-01 23:10:06,2018-12-17 20:03:46
225,975,"## Description
closes #776 

allows users to specify a username by passing a lowercase 'u', as in `pgcli -u username`

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","allow passing -u flag (lowercase) to specify username
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=h1) Report
> Merging [#975](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/3b9041fe36798639b4316fb3e413ac7a04c43da3?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/975/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #975      +/-   ##
==========================================
- Coverage   84.59%   84.46%   -0.13%     
==========================================
  Files          21       21              
  Lines        2466     2466              
==========================================
- Hits         2086     2083       -3     
- Misses        380      383       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/975/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.02% <100%> (ø)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/975/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.84% <0%> (-3.95%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=footer). Last update [3b9041f...f31a62c](https://codecov.io/gh/dbcli/pgcli/pull/975?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Very nice - thanks for the PR!",2018-11-30 21:23:42,2018-11-30 23:21:13
226,974,"## Description
<!--- Describe your problem as fully as you can. -->
I am not able to install pgcli via pip on Windows.
I have tried to install a binary of psycopg2 (as suggested in issue #108) in advance but to no avail. 
Does anybody have a step-by-step guide on how to do that?
## Your environment
<!-- This gives us some more context to work with. -->
- [ ] Please provide your OS and version information.
Windows 7 64bit
- [ ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.
","Getting pgcli to work on Windows 7
What kind of error are you getting?
This should be it:
running install
    running build
    running build_ext
    building 'setproctitle' extension
    error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual                                           C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

Just wondered if there is a general solution lurking somewhere and not just hints that it is possible.
Yes, newer versions of `pgcli` bumped psycopg requirement to `psycopg2 >= 2.7.4,<2.8`:

https://github.com/dbcli/pgcli/blob/3b9041fe36798639b4316fb3e413ac7a04c43da3/setup.py#L19

and I don't see any binaries for that in linked issue (previously the problem was solved with binaries from http://www.stickpeople.com/projects/python/win-psycopg/).

@dbcli/pgcli-core Any of you use Windows / able to help?
I haven't tried it but I'd recommend https://www.anaconda.com/download/#windows

Which includes a compiled version of psycopg2 (https://docs.anaconda.com/anaconda/packages/py3.6_win-64/)

After installing anaconda you should start an ""Anaconda Prompt""
https://conda.io/docs/user-guide/getting-started.html

And run the following command:
`pip install pgcli`

Then you should be able te start pgcli from the same anaconda prompt.
Thanks for the suggestion. Was hoping for something 'simpler' though.",2018-11-28 21:13:43,
227,973,"## Description
Added tests for special command completion.

Requires the latest changes from pgspecial master.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix special commands
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=h1) Report
> Merging [#973](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/ca2d96825b9444301972f0528eaaa98491bf35c5?src=pr&el=desc) will **increase** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/973/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #973      +/-   ##
==========================================
+ Coverage    84.5%   84.59%   +0.08%     
==========================================
  Files          21       21              
  Lines        2466     2466              
==========================================
+ Hits         2084     2086       +2     
+ Misses        382      380       -2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/973/diff?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `96.93% <0%> (-0.21%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/973/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.78% <0%> (+3.94%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=footer). Last update [ca2d968...92d22b6](https://codecov.io/gh/dbcli/pgcli/pull/973?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-11-27 06:46:11,2018-11-27 15:49:55
228,972,"## Description
<!--- Describe your changes in detail. -->

Bugfix release coming up, updating changelog.
","going to release.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/972?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@25a66ec`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/972/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/972?src=pr&el=tree)

```diff
@@           Coverage Diff            @@
##             master    #972   +/-   ##
========================================
  Coverage          ?   84.5%           
========================================
  Files             ?      21           
  Lines             ?    2466           
  Branches          ?       0           
========================================
  Hits              ?    2084           
  Misses            ?     382           
  Partials          ?       0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/972?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/972?src=pr&el=footer). Last update [25a66ec...1e64143](https://codecov.io/gh/dbcli/pgcli/pull/972?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-11-19 04:15:12,2018-11-19 04:16:30
229,971,"## Description
Fixes #902 


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix the StopIteration issue in Python 3.7
The fix is ported straight out of mycli. https://github.com/dbcli/mycli/pull/651/
@amjith Very nice, let me verify this real quick.
👍 Works great!
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=h1) Report
> Merging [#971](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/923f2d64417ed8ab3b778b87a517e64c0534b6ec?src=pr&el=desc) will **decrease** coverage by `0.06%`.
> The diff coverage is `90.9%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/971/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #971      +/-   ##
=========================================
- Coverage   84.57%   84.5%   -0.07%     
=========================================
  Files          21      21              
  Lines        2463    2466       +3     
=========================================
+ Hits         2083    2084       +1     
- Misses        380     382       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/tables.py](https://codecov.io/gh/dbcli/pgcli/pull/971/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy90YWJsZXMucHk=) | `97.72% <90.9%> (-2.28%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=footer). Last update [923f2d6...0142d4b](https://codecov.io/gh/dbcli/pgcli/pull/971?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-11-19 03:42:23,2018-11-19 04:11:16
230,970,"## Description
<!--- Describe your changes in detail. -->
In the new version of prompt-toolkit C-Z was not suspending the app. It is now fixed. 


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Enable suspend using C-Z.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/970?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@0f0be9d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/970/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/970?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #970   +/-   ##
=========================================
  Coverage          ?   84.57%           
=========================================
  Files             ?       21           
  Lines             ?     2463           
  Branches          ?        0           
=========================================
  Hits              ?     2083           
  Misses            ?      380           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/970?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/970/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.02% <ø> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/970?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/970?src=pr&el=footer). Last update [0f0be9d...66c9629](https://codecov.io/gh/dbcli/pgcli/pull/970?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-11-17 19:35:05,2018-11-18 03:41:35
231,969,"## Description
1. Open a function (or a view) to edit with \ef (or \ev) in the editor
2. Close the editor
3. Discard the code from the prompt with Ctrl-C
4. Boom! AssertionError.

Is there any other way to discard the code after \ef other than ""backspacing"" it? The current behaviour isn't consistent with Ctrl-C after typing the code directly into the prompt.

## Your environment
Linux, bash

pgcli 2.0.0

Thanks.
","Discarding \ef or \ev code results in AssertionError
I'm getting an `IndexError` just by entering `\ef` and `\ev` does literally nothing. Am I missing something here? `\e` works as expected.
I'm on Python 3.6, Ubuntu 18, PostgreSQL 10.6, pgcli 2.0
@mkcinu Upgrade to the latest pgcli it is now fixed. 

```pip install -U pgcli```

@igncampa Can you give me a little bit more info? When you type `\ef` it crashes immediately with IndexError? 

Do you press the `Enter` key after the `\ef` or `\ev` ? 

@igncampa I think I have figured out what you were experiencing. 

`\ef` and `\ev` are special commands for editing an existing function or an existing view. 

So they are supposed to be called with `\ev view_name` or `\ef function_name`. If you type in `\ev` without a view name as its argument nothing will happen.

If you type in `\ef` without any function name as its argument it will crash. I'm working on a fix for that. 
A new version of `pgspecial` is released that addresses the issue raised by @igncampa. 

`pgspecial` is a dependency of pgcli which handles the special commands such as `\ef` and `\ev`. 

You can upgrade it using `pip install -U pgspecial`. 

Thanks, it seems your fix did the trick after upgrading both `pgcli` and `pgspecial`.

When `\ev` and `\ef` are passed without arguments using `psql`, it opens a view or function template for the user to use as a starting point. Maybe we can mimic the functionality?

Should I open a new issue?
Let me know if I can help. I'm still getting familiar with the codebase but I'm also looking forward to contributing code.
Yeah. Let's open a new issue. That's a great idea to provide a template when a name is not provided.
@igncampa I'm glad you're looking to help.

The backslash commands are implemented as a separate package called `pgspecial`. You can find the code here: https://github.com/dbcli/pgspecial

You want to look at this file: https://github.com/dbcli/pgspecial/blob/master/pgspecial/iocommands.py

I just realized the issue had been already raised at #754 so I think we can handle it there. I'm hoping I can propose something by tomorrow. Thanks for the pointer.",2018-11-14 16:45:07,2018-11-19 06:20:02
232,968,"## Description
Require prompt_toolkit>=2.0.6, remove workaround


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Require prompt_toolkit>=2.0.6.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=h1) Report
> Merging [#968](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/589c2abdfb329d343f5fcc41f674993677f01607?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/968/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #968      +/-   ##
==========================================
- Coverage   84.71%   84.59%   -0.13%     
==========================================
  Files          21       21              
  Lines        2460     2460              
==========================================
- Hits         2084     2081       -3     
- Misses        376      379       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/968/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.03% <100%> (ø)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/968/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.84% <0%> (-3.95%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=footer). Last update [589c2ab...5403c17](https://codecov.io/gh/dbcli/pgcli/pull/968?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Verified, things work now. Thanks! 🍓 ",2018-11-11 13:16:46,2018-11-11 21:42:34
233,967,"Pgcli, Python and psycopg2 all on the the latest version. The issue does not occur on Linux.
```
pgcli --single-connection postgresql://postgres:password@localhost
Traceback (most recent call last):
  File ""f:\portableapps\python\lib\site-packages\pgcli\pgexecute.py"", line 204, in get_server_version
    cur.execute(self.version_query)
psycopg2.ProgrammingError: execute cannot be used while an asynchronous query is underway

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""f:\portableapps\python\lib\runpy.py"", line 193, in _run_module_as_main
    ""__main__"", mod_spec)
  File ""f:\portableapps\python\lib\runpy.py"", line 85, in _run_code
    exec(code, run_globals)
  File ""F:\PortableApps\Python\Scripts\pgcli.exe\__main__.py"", line 9, in <module>
  File ""f:\portableapps\python\lib\site-packages\click\core.py"", line 764, in __call__
    return self.main(*args, **kwargs)
  File ""f:\portableapps\python\lib\site-packages\click\core.py"", line 717, in main
    rv = self.invoke(ctx)
  File ""f:\portableapps\python\lib\site-packages\click\core.py"", line 956, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""f:\portableapps\python\lib\site-packages\click\core.py"", line 555, in invoke
    return callback(*args, **kwargs)
  File ""f:\portableapps\python\lib\site-packages\pgcli\main.py"", line 1058, in cli
    pgcli.run_cli()
  File ""f:\portableapps\python\lib\site-packages\pgcli\main.py"", line 627, in run_cli
    print('Server: PostgreSQL', self.pgexecute.get_server_version())
  File ""f:\portableapps\python\lib\site-packages\pgcli\pgexecute.py"", line 214, in get_server_version
    return self.server_version
psycopg2.ProgrammingError: close cannot be used while an asynchronous query is underway
```",Error with `--single-connection` on Windows,2018-11-10 10:57:47,
234,966,"## Description

After I type `insert into (` in pgcli there is an exception:

```
Unhandled exception in event loop:
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\eventloop\coroutine.py"", line 90, in step_next
    new_f = coroutine.throw(exc)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\buffer.py"", line 1637, in new_coroutine
    yield From(coroutine(*a, **kw))
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\eventloop\coroutine.py"", line 90, in step_next
    new_f = coroutine.throw(exc)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\buffer.py"", line 1495, in async_completer
    cancel=lambda: not proceed()))
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\eventloop\coroutine.py"", line 86, in step_next
    new_f = coroutine.send(None)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\eventloop\async_generator.py"", line 114, in consume_async_generator
    item = iterator.send(send)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\prompt_toolkit\completion\base.py"", line 166, in get_completions_async
    for item in self.get_completions(document, complete_event):
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\pgcompleter.py"", line 444, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\packages\sqlcompletion.py"", line 161, in suggest_type
    return suggest_based_on_last_token(stmt.last_token, stmt)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\packages\sqlcompletion.py"", line 393, in suggest_based_on_last_token
    Column(table_refs=stmt.get_tables('insert'), context='insert'),
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\packages\sqlcompletion.py"", line 110, in get_tables
    self.full_text if scope == 'full' else self.text_before_cursor)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\packages\parseutils\tables.py"", line 148, in extract_tables
    return tuple(i for i in identifiers if i.name)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\packages\parseutils\tables.py"", line 148, in <genexpr>
    return tuple(i for i in identifiers if i.name)
  File ""c:\users\myuser\appdata\local\programs\python\python37\lib\site-packages\pgcli\packages\parseutils\tables.py"", line 97, in extract_table_identifiers
    for item in token_stream:
```

After the opening parentheses, for each single character I type pgcli throws the same exception.

It might have something to do with my rows containing non-UTF-8 characters (not 100% sure). I changed the character encoding of the Powershell window using `chcp 65001`. Before doing this pgcli would output garbage instead of UTF-8 characters.

## Your environment

Windows 10 x64
Python 3.7.1 x64
pgcli 2.0.0
installed with `pip install pgcli`

pip freeze:
```
asn1crypto==0.24.0
cffi==1.11.5
cli-helpers==1.1.0
Click==7.0
configobj==5.0.6
cryptography==2.3.1
humanize==0.5.1
idna==2.7
mycli==1.18.2
pgcli==2.0.0
pgspecial==1.11.2
prompt-toolkit==2.0.4
psycopg2==2.7.6
pycparser==2.19
Pygments==2.2.0
PyMySQL==0.9.2
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
wcwidth==0.1.7
You are using pip version 10.0.1, however version 18.1 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.
```
",Unhandled exception in event loop,2018-11-09 16:52:43,
235,965,"The default prompt is not applied on Linux when using a Unix-domain socket connection neither implicitly through the config file
```
postgres@db:~$ pgcli
Server: PostgreSQL 11.0
Version: 2.0.0
[...]
postgres>
```
...nor explicitly via `--prompt`
```
postgres@db:~$ pgcli --prompt ""\u@\h:\d> ""
Server: PostgreSQL 11.0
Version: 2.0.0
[...]
postgres>
```
But when I modify the default prompt even slightly, it works:
```
postgres@db:~$ pgcli --prompt ""X-\u@\h:\d> ""
Server: PostgreSQL 11.0
Version: 2.0.0
[...]
X-postgres@/var/run/postgresql:postgres>
```","Default prompt not applied
I think your prompt might be too long. Pgcli does this when prompt length is > 30:

https://github.com/dbcli/pgcli/blob/3b9041fe36798639b4316fb3e413ac7a04c43da3/pgcli/main.py#L688-L690
So when the default prompt results in a prompt of more than thirty characters, only the database is prompted. But when I explicitly choose a  - non-default - prompt, this does not apply.

I'm closing this ticket.
Exactly!",2018-11-04 10:21:51,2018-11-28 21:11:53
236,964,"Pgcli shows the first octet of an IP address (""127"" for example) when giving an IP address as host name. The `\h` variable (""Short hostname of the server (up to first '.')"" is part of the default prompt. Since IP addresses don't have a short form, this should probably be the full IP address.

Psql shows the same behaviour (in case you aim for consistency with `psql` even in incorrect cases)
```
pgcli postgresql://postgres:password@127.0.0.1
Server: PostgreSQL 11.0
Version: 2.0.0
[...]
postgres@127:5432/postgres dbcli>
```","\h shows first octet of IP address
This sounds like an unintentional side effect of ""shortening"" host names. In many cases, such as AWS EC2 host names (example: `ec2-55-111-222-333.compute-1.amazonaws.com`), we want to trim those redundant / repetitive suffixes to display a smaller prompt. Does not work great for IP addresses though.
A patch for the issue below.

Please note that this aims to be a very simple solution: a name like `123.456.com` would not be shortened to `123`.

Numeric host (and domain) names are legal (except for the top level domain). Nevertheless numeric host names are very rare and entering IP addresses for the host connection is common.

Taking care of the `123.456.com` case would make the code more difficult to understand and verify (by using regular expressions or testing the right hand side of the host name while making sure it's not already a short name).
```diff
@@ -893,6 +893,8 @@
         host = self.pgexecute.host or '(none)'
         string = string.replace('\\H', host)
         short_host, _, _ = host.partition('.')
+        if short_host.isdigit():
+            short_host = host
         string = string.replace('\\h', short_host)
         string = string.replace('\\d', self.pgexecute.dbname or '(none)')
         string = string.replace('\\p', str(self.pgexecute.port) or '(none)')
```",2018-11-03 21:05:50,
237,963,"pgcli shows `/tmp` for unix domain socket connections (prompt is `\u@\H:\p/\d dbcli> `). `psql` shows `[local]` instead.

Port shows as 5432 while it probably should be ""(none)"" since domain sockets don't have ports. `psql` also shows `5432`.
```
> psql postgresql://postgres:password@
psql (11.0)
Type ""help"" for help.

postgres@[local]:5432/postgres psql> \q

> pgcli postgresql://postgres:password@
Server: PostgreSQL 11.0
Version: 2.0.0
[...]
postgres@/tmp:5432/postgres dbcli>
```","\H prompt variable shows /tmp for unix domain socket connection
Thank you for the bug report! `/tmp` is not a problem - I don't think we need to copy `psql` in everything. But yes, showing port in case of unix socket connection is a bit weird.
Well, `/tmp` is not a ""problem"" but also not what `\H` promises: ""\H - Hostname of the server"". The domain socket file is `/tmp/.s.PGSQL.5432` - that's where it comes from.

In that regard, `[local]` is more informative, in my opinion.
Perhaps - I don't have a strong opinion on this one. :) In case you'd like to take a stab at fixing it, here is the relevant code:

https://github.com/dbcli/pgcli/blob/589c2abdfb329d343f5fcc41f674993677f01607/pgcli/main.py#L888-L903
That should be it:
```diff
@@ -891,9 +891,13 @@
         string = string.replace('\\t', self.now.strftime('%x %X'))
         string = string.replace('\\u', self.pgexecute.user or '(none)')
         host = self.pgexecute.host or '(none)'
-        string = string.replace('\\H', host)
-        short_host, _, _ = host.partition('.')
-        string = string.replace('\\h', short_host)
+        if self.pgexecute.get_socket_directory() == host:
+            string = string.replace('\\H', '[local]')
+            string = string.replace('\\h', '[local]')
+        else:
+            string = string.replace('\\H', host)
+            short_host, _, _ = host.partition('.')
+            string = string.replace('\\h', short_host)
         string = string.replace('\\d', self.pgexecute.dbname or '(none)')
         string = string.replace('\\p', str(
             self.pgexecute.port) if self.pgexecute.port is not None else '5432')
```",2018-11-03 20:13:40,
238,962,"## Description
Load the named queries in a place, where the config from the user is given.
","Bugfix for #938: load named queries from provided config file
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=h1) Report
> Merging [#962](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/589c2abdfb329d343f5fcc41f674993677f01607?src=pr&el=desc) will **increase** coverage by `<.01%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/962/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #962      +/-   ##
==========================================
+ Coverage   84.59%   84.59%   +<.01%     
==========================================
  Files          21       21              
  Lines        2460     2461       +1     
==========================================
+ Hits         2081     2082       +1     
  Misses        379      379
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/962/diff?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.14% <ø> (-0.01%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/962/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.1% <100%> (+0.06%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=footer). Last update [589c2ab...b927433](https://codecov.io/gh/dbcli/pgcli/pull/962?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

This works great! 

Thank you for fixing the bug. Sorry, it took us a while to get to this PR. 

:ice_cream: ",2018-10-31 17:47:00,2018-11-17 19:26:06
239,961,"## Description
I tried to implement the behaviour of the options/arguments `dbname` and `username` to behave exactly as in `psql` with the same precedences.

This should fix #950

Here is a table with the details which I double checked in `pgcli` and `psql` with my changes:

| command | username | database |
| --- | --- | --- |
| `PGDATABASE=foo PGUSER=foo pgcli` | foo | foo |
| `PGDATABASE=foo PGUSER=foo pgcli bar` | bar | foo |
| `PGDATABASE=foo PGUSER=foo pgcli bar bar` | bar | bar |
| `PGDATABASE=foo PGUSER=foo pgcli bar bar -d abc` | bar | abc |
| `PGDATABASE=foo PGUSER=foo pgcli bar bar -U abc` | abc | bar |
| `PGDATABASE=foo PGUSER=foo pgcli bar bar -U abc -d abc` | abc | abc |
| `PGDATABASE=foo PGUSER=foo pgcli bar -U abc` | abc | bar |
| `PGDATABASE=foo PGUSER=foo pgcli bar -d abc` | bar | abc |
| `PGDATABASE=foo PGUSER=foo pgcli -d abc` | foo | abc |
| `PGDATABASE=foo PGUSER=foo pgcli -U abc` | abc | foo |
| `PGDATABASE=foo PGUSER=foo pgcli -U abc -d abc` | abc | abc |

I think this would be a good case to make some unittests for these. But I am not sure how and where. I did not see a unittest for the behaviour of the options/arguments parsing. Are there any specific tests for these?
","Refactor dbname and username options/arguments to match `psql`-behaviour
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=h1) Report
> Merging [#961](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/589c2abdfb329d343f5fcc41f674993677f01607?src=pr&el=desc) will **increase** coverage by `0.41%`.
> The diff coverage is `87.5%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/961/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #961      +/-   ##
==========================================
+ Coverage   84.14%   84.56%   +0.41%     
==========================================
  Files          21       21              
  Lines        2460     2462       +2     
==========================================
+ Hits         2070     2082      +12     
+ Misses        390      380      -10
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/961/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.95% <87.5%> (+1.52%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=footer). Last update [589c2ab...f71a70f](https://codecov.io/gh/dbcli/pgcli/pull/961?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I like the amount of thought you've put in to match the precedence of psql. 

Well done!",2018-10-30 22:22:36,2018-11-17 19:15:14
240,960,Missed changelog update in https://github.com/dbcli/pgcli/pull/959,"Missed changelog update.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/960?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@abb801e`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/960/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/960?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #960   +/-   ##
=========================================
  Coverage          ?   84.14%           
=========================================
  Files             ?       21           
  Lines             ?     2460           
  Branches          ?        0           
=========================================
  Hits              ?     2070           
  Misses            ?      390           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/960?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/960?src=pr&el=footer). Last update [abb801e...82bb73d](https://codecov.io/gh/dbcli/pgcli/pull/960?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-10-30 14:34:31,2018-10-30 14:41:39
241,959,"## Description
When there is no port given in a connection URI the sytem should assume the default port 5432.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Set default port in `connect_uri` when none is given, fixes #958
Hi, and thank you for the PR! I think this is fixing the problem in the slightly wrong place. We do not need to set the port before connecting, because `psycopg2` will connect without provided port just fine. We just need to change what we display in this case here:

https://github.com/dbcli/pgcli/blob/12ad10f6975d9651d0c696a021fc982c2c5de861/pgcli/main.py#L898
@j-bennet thanks for the hints. I changed it at the corresponding place in `get_prompt`.
As far as I researched also `psycopg2` will assume port 5432 when none is given, so display port 5432 in this case should make sense.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=h1) Report
> Merging [#959](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/12ad10f6975d9651d0c696a021fc982c2c5de861?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/959/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #959      +/-   ##
==========================================
- Coverage   84.26%   84.14%   -0.13%     
==========================================
  Files          21       21              
  Lines        2460     2460              
==========================================
- Hits         2073     2070       -3     
- Misses        387      390       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/959/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `75.43% <100%> (ø)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/959/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `86.84% <0%> (-3.95%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=footer). Last update [12ad10f...cb9952c](https://codecov.io/gh/dbcli/pgcli/pull/959?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good! 🎉 
Should not have been so quick to merge - forgot about changelog. :) Fixed here: https://github.com/dbcli/pgcli/pull/960

Thanks again!",2018-10-29 21:26:29,2018-10-30 14:28:29
242,958,"When no port in the connection string is given - like in...

`pgcli postgresql://postgres:password@localhost`

...`\p` resolves to `None` in the printed prompt:

`postgres@localhost:None/postgres pgcli>`

`Mssql-cli` and `Mycli` don't show this behaviour.",\p in prompt resolves to `None`,2018-10-22 05:55:54,2018-10-30 14:28:31
243,957,"## Description
No problem. Just thanks. 

I use the crap out of pgcli. Every day. It’s become my main method for running queries. And it’s glorious. 

The only time I interact with Postgres another way is if I need to visualize the schema, and it’s easier to use OmniDB or PgAdmin for that. 

So I just wanted to say thanks. 

## Your environment
Debian inside Crostini on a pixelbook

","Here’s to you guys
And thanks to @jerodsanto for suggesting the issue. It’s a great idea. 

https://changelog.com/posts/make-an-open-source-maintainers-day-with-this-one-weird-trick
Aww. Thank you for using `pgcli`!",2018-10-17 16:45:58,2019-05-05 11:53:47
244,956,"## Description
Clean up and add behave logging


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Clean up and add behave logging
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/956?src=pr&el=h1) Report
> Merging [#956](https://codecov.io/gh/dbcli/pgcli/pull/956?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/fcf0eb022ee81cc8e961c08c4a89742a9714cd63?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/956/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/956?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #956   +/-   ##
=======================================
  Coverage   84.26%   84.26%           
=======================================
  Files          21       21           
  Lines        2460     2460           
=======================================
  Hits         2073     2073           
  Misses        387      387
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/956?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/956?src=pr&el=footer). Last update [fcf0eb0...cab3f9c](https://codecov.io/gh/dbcli/pgcli/pull/956?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-10-14 09:30:44,2018-10-14 20:53:20
245,955,"Hi

On my mac - every command I execute within pgcli runs but ends with an (END) being displayed and the only way to continue working is to enter press the 'q' key.

Is the default behavior ?

I would like pgcli to work like psql in that when I execute a sql command - all the results are displayed and no extra/additional key command is necessary for me to continue using pgcli.

The way it works now - I always have to hit the 'q' key to continue using pgcli.  I would like to turn this off.  Is it possible ?  If so - how ?

Thanks
Dave
","Changing config so that every query doesn't require and extra carriage return
This is not pgcli. This is your pager. Try setting `LESS=-XFR` like described here https://www.pgcli.com/pager",2018-10-13 06:00:52,2019-05-05 14:54:28
246,954,"## Description
We have a table named `events`. Autocomplete doesn't work in query involving this table (at least for a JOIN condition and a SELECT column), _unless_ I quote the table name.

## Reproduction

```
postgres@localhost:postgres> CREATE TABLE events (description text);
CREATE TABLE
Time: 0.012s
```
Then
```
postgres@localhost:postgres> SELECT descri* FROM events; 
```
Cursor at `*`, having just typed `i` the completions I see are:
```
pg_describe_object()                    function  
col_description()                       function  
obj_description()                       function  
shobj_description()                     function  
binary_upgrade_set_record_init_privs()  function  
describe                                keyword   
```
If I change `s/events/""events""/` and retype the `i`:

```
postgres@localhost:postgres> SELECT descri FROM ""events""; 
```
then I see:
```
description                             column    
pg_describe_object()                    function  
col_description()                       function  
obj_description()                       function  
shobj_description()                     function  
binary_upgrade_set_record_init_privs()  function  
describe                                keyword   
```
as expected. 

I'm using Vi-mode, if that matters (I don't think it does). Is this expected, or is there something special about the table name `events`? Interestingly, if I call the table `not_events` I don't need to quote the table name for the columns to autocomplete.

## Your environment
- [x] Please provide your OS and version information.
`Ubuntu 16.04 x64`
- [x] Please provide your CLI version.
```
> pgcli --version
Version: 2.0.0
```
- [x] What is the output of ``pip freeze`` command.
```
(pgcli_issue) > pip freeze
backports.csv==1.0.6
cli-helpers==1.0.2
Click==7.0
configobj==5.0.6
humanize==0.5.1
pgcli==2.0.0
pgspecial==1.11.2
prompt-toolkit==2.0.5
psycopg2==2.7.5
Pygments==2.2.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
wcwidth==0.1.7
```","Autocomplete not working for ""events"" table if unquoted
Having dug into this, `sqlparse` is (incorrectly, for Postgres) treating `events` as a keyword, rather than an identifier. I've followed up on a [promising-sounding PR](https://github.com/andialbrecht/sqlparse/pull/389#issuecomment-609014700) that would allow us to use `sqlparse` in ""Postgres"" mode, where `events` _wouldn't_ be considered a keyword, but for now, I don't see an easy way to fix this issue",2018-10-11 16:27:15,
247,953,"when i run pgcli i get this error

`Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli==2.0.0', 'console_scripts', 'pgcli')()
  File ""/usr/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 484, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 2714, in load_entry_point
    return ep.load()
  File ""/usr/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 2332, in load
    return self.resolve()
  File ""/usr/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 2338, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/usr/lib/python3.6/site-packages/pgcli-2.0.0-py3.6.egg/pgcli/main.py"", line 41, in <module>
    from pygments.lexers.sql import PostgresLexer
  File ""/usr/lib/python3.6/site-packages/pygments/lexers/sql.py"", line 49, in <module>
    from pygments.lexers._postgres_builtins import KEYWORDS, DATATYPES, \
ModuleNotFoundError: No module named 'pygments.lexers._postgres_builtins'`


but i have already pygments installed","No module named 'pygments.lexers._postgres_builtins'
A few things to check:

* Do things work if you install pgcli in a fresh virtualenv?
* What is your `PYTHONPATH`, are you setting it in `.bashrc` somewhere?
* `which python`
* `which pip`
* `pip freeze | grep Pygments`

Does the import work from Python console?

```
--- ~ » python
Python 3.6.5 (default, Apr  5 2018, 18:08:15)
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from pygments.lexers.sql import PostgresLexer
>>>
```",2018-10-10 07:36:02,
248,952,"## Description
<!--- Describe your changes in detail. -->

Fix for https://github.com/dbcli/pgcli/issues/951.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix for pgcli --list.
~Not ready to merge yet because of test failures.~

Tests are now fixed.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=h1) Report
> Merging [#952](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/ec5131e1daf7b96549c743ba1b22d3d83657c159?src=pr&el=desc) will **decrease** coverage by `0.4%`.
> The diff coverage is `75%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/952/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #952      +/-   ##
==========================================
- Coverage   84.55%   84.14%   -0.41%     
==========================================
  Files          21       21              
  Lines        2454     2460       +6     
==========================================
- Hits         2075     2070       -5     
- Misses        379      390      +11
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/952/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `75.43% <75%> (-1.4%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=footer). Last update [ec5131e...872b958](https://codecov.io/gh/dbcli/pgcli/pull/952?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-10-02 04:31:36,2018-10-03 00:10:44
249,951,"## Description
<!--- Describe your problem as fully as you can. -->
Simply issuing pgcli --list, leads to 

```
$ pgcli --list
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 11, in <module>
    sys.exit(cli())
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pgcli/main.py"", line 1045, in cli
    pgcli.echo_via_pager('\n'.join(formatted))
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pgcli/main.py"", line 919, in echo_via_pager
    if len(lines) >= self.prompt_app.output.get_size().rows - 4 or any(self.is_wide_line(l) for l in lines):
AttributeError: 'NoneType' object has no attribute 'output'
```

This only happens if postgres server is running. Otherwise, normal error that connection could not be established is printed.

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.

macOS 10.14 Mojave, Python 3.7.0
```
$ hostinfo
Mach kernel version:
	 Darwin Kernel Version 18.0.0: Wed Aug 22 20:13:40 PDT 2018; root:xnu-4903.201.2~1/RELEASE_X86_64
Kernel configured for up to 4 processors.
4 processors are physically available.
4 processors are logically available.
Processor type: x86_64h (Intel x86-64h Haswell)
Processors active: 0 1 2 3
Primary memory available: 32.00 gigabytes
Default processor set: 335 tasks, 1079 threads, 4 processors
Load average: 0.77, Mach factor: 3.22
$
```

```
$ python3 --version
Python 3.7.0
$
```

- [ ] Please provide your CLI version.
```
$ pgcli --version
Version: 2.0.0
$
```
- [ ] What is the output of ``pip freeze`` command.
```
$ pip3 freeze
alabaster==0.7.11
altgraph==0.16.1
aniso8601==3.0.2
appnope==0.1.0
asn1crypto==0.24.0
astroid==2.0.4
attrs==18.2.0
autopep8==1.4
Babel==2.6.0
backcall==0.1.0
beautifulsoup4==4.6.3
bleach==2.1.4
blinker==1.4
bottle==0.12.13
brewer2mpl==1.4.1
brotlipy==0.7.0
certifi==2018.8.24
cffi==1.11.5
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
cloudpickle==0.5.5
configobj==5.0.6
cryptography==2.3.1
cssselect==1.0.3
cycler==0.10.0
Cython==0.28.5
dask==0.19.0
decorator==4.3.0
Distance==0.1.3
Django==2.1.2
docopt==0.6.2
docutils==0.14
entrypoints==0.2.3
fake-factory==9999.9.9
flake8==3.5.0
Flask==1.0.2
graphene==2.1.3
graphql-core==2.1
graphql-relay==0.4.5
h11==0.7.0
h2==3.0.1
hpack==3.0.0
html5lib==1.0.1
httpie==0.9.9
humanize==0.5.1
hyperframe==5.1.0
idna==2.7
imagesize==1.1.0
ipdb==0.11
ipykernel==4.9.0
ipyparallel==6.2.2
ipython==7.0.1
ipython-genutils==0.2.0
ipywidgets==7.4.1
iso8601==0.1.12
isodate==0.6.0
itsdangerous==0.24
jedi==0.12.1
Jinja2==2.10
jsonschema==2.6.0
jupyter-client==5.2.3
jupyter-core==4.4.0
kaitaistruct==0.8
keyring==13.2.1
kiwisolver==1.0.1
lazy-object-proxy==1.3.1
ldap3==2.5.1
lxml==4.2.5
MarkupSafe==1.0
matplotlib==3.0.0
mccabe==0.6.1
mistune==0.8.3
mitmproxy==4.0.4
modulegraph==0.17
mpmath==1.0.0
nbconvert==5.3.1
nbformat==4.4.0
networkx==2.2
nltk==3.3
nose==1.3.7
notebook==5.6.0
numpy==1.15.2
oauthlib==2.1.0
ortools==6.9.5824
packaging==17.1
pandas==0.23.4
pandocfilters==1.4.2
parso==0.3.1
passlib==1.7.1
patsy==0.5.0
pdfkit==0.6.1
pdfrw==0.4
pep8==1.7.1
pexpect==4.6.0
pgcli==2.0.0
pgspecial==1.11.2
pickleshare==0.7.4
Pillow==5.3.0
praw==6.0.0
prawcore==1.0.0
prometheus-client==0.3.1
promise==2.1
prompt-toolkit==2.0.4
protobuf==3.6.1
psycopg2==2.7.5
ptyprocess==0.6.0
pyasn1==0.4.4
pycodestyle==2.3.1
pycparser==2.18
pycrypto==2.6.1
pyflakes==1.6.0
Pygments==2.2.0
pyOpenSSL==18.0.0
pyparsing==2.2.0
pyperclip==1.6.4
pyquery==1.4.0
python-dateutil==2.7.3
python-igraph==0.7.1.post6
pytz==2018.5
PyWavelets==1.0.0
pyzmq==17.1.2
qtconsole==4.4.1
rdflib==4.2.2
requests==2.19.1
requests-oauthlib==1.0.0
ruamel.yaml==0.15.64
Rx==1.6.1
scikit-image==0.14.0
scikit-learn==0.20.0
scipy==1.1.0
Send2Trash==1.5.0
setproctitle==1.1.10
sh==1.12.14
simplegeneric==0.8.1
six==1.11.0
snowballstemmer==1.2.1
sortedcontainers==2.0.4
speedtest-cli==2.0.2
Sphinx==1.8.1
sphinxcontrib-websupport==1.1.0
sqlparse==0.2.4
statsmodels==0.9.0
sympy==1.3
tabulate==0.8.2
terminado==0.8.1
terminaltables==3.1.0
testpath==0.3.1
Theano==1.0.3
toolz==0.9.0
tornado==5.1.1
tqdm==4.26.0
traitlets==4.3.2
typed-ast==1.1.0
typing==3.6.6
update-checker==0.16
urllib3==1.23
urwid==2.0.1
wcwidth==0.1.7
webencodings==0.5.1
Werkzeug==0.14.1
widgetsnbextension==3.4.1
wrapt==1.10.11
wsproto==0.11.0
$
```","pgcli --list produces error when postgres server is running.
Fixed in the latest version by #952 ",2018-10-01 22:57:19,2020-03-12 15:41:39
250,950,"Right now: `PGDATABASE=bar pgcli -d foo` will connect to `bar`. However, `psql` will connect to `foo`.

What are your thoughts on changing it to match `psql`'s behavior? Or is that too big of a breaking change?

In case it matters:
- `psql (PostgreSQL) 10.5 (Ubuntu 10.5-0ubuntu0.18.04)`
- `pgcli`:`Version: 1.6.0`","-d should override PGDATABASE
Yes, I think command line arguments should override environment variables.",2018-09-30 06:12:53,2018-11-17 19:15:14
251,949,"Some integration tests fail way too often, mostly those:

- Scenario: edit sql in file with external editor
- Scenario: run the cli and exit (fails on Ctrl + D, how hard can that be?)
- Scenario: tee output from query
","Intermittent test failures
These haven't happen in a while. Closing.",2018-09-28 21:46:37,2019-05-05 14:53:41
252,948,"Changelog update to release 2.0.0.

The only change is updating to prompt-toolkit 2.0.","Changelog update to release 2.0.0.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/948?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@392491a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/948/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/948?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #948   +/-   ##
=========================================
  Coverage          ?   84.67%           
=========================================
  Files             ?       21           
  Lines             ?     2454           
  Branches          ?        0           
=========================================
  Hits              ?     2078           
  Misses            ?      376           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/948?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/948?src=pr&el=footer). Last update [392491a...029a1be](https://codecov.io/gh/dbcli/pgcli/pull/948?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:tada: 
Perfect. Now, to do the actual release. :)
@lhw, would you be able to release the new pgcli debian package? It would be good to release one for 1.11.0 also (previous version).
I could do an update. I probably should. But prompt_toolkit needs to be updated first. And apparently it can't be the newest release 2.1.0. Will have to see about that.
@lhw Just a fyi, 2.0.1 is the latest of pgcli now. I must be missing something about prompt-toolkit? Latest released prompt-toolkit is 2.0.7, and pgcli would have no problem with it.
I only checked the setup.py not the actual prompt_toolkit repo, thought there were some compatibility issues. I did the prompt_toolkit update on debian today. Will have to see what needs to be done to get it up-to-date in debian unstable. There were some changes and there could be hard dependencies on versions <2.0.0 in which case i need to make some changes.
Also yes the version i have locally is already 2.0.1. This was just the last thread i was cited in.",2018-09-28 21:26:41,2018-09-28 22:57:46
253,947,"I would like to use pgcli to execute sql statements from an application. Usually I use the postgres-client that comes with my debian distro. Is there something analogous to `psql -c STATEMENT` supported by pgcli? 
","Is there support for functionality analogous to psql -c STATEMENT?
Not really. The purpose of pgcli was always to provide the best possible UI for humans. Batch jobs, non-interactive usage etc. were not a priority.

We're not opposed to PRs if someone wants to add this feature to pgcli!

Related issue: https://github.com/dbcli/pgcli/issues/307",2018-09-27 17:30:39,2019-03-07 18:17:49
254,946,"## Description
clarified a few things in the development docs and added a section to troubleshoot running the tests



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Contrib guide improv
hmm, any idea what's going on here? I only touched the `DEVELOP.rst` file. I don't see how that can affect the tests in any way 
@igncampa We have a test or two that give intermittent failures. One day I (or someone) hopefully fixes that. I restarted the travis job for now.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=h1) Report
> Merging [#946](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/94475e62833b5db67ca668b4b95390c4b35edd03?src=pr&el=desc) will **increase** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/946/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #946      +/-   ##
==========================================
+ Coverage   84.59%   84.71%   +0.12%     
==========================================
  Files          21       21              
  Lines        2460     2460              
==========================================
+ Hits         2081     2084       +3     
+ Misses        379      376       -3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/946/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.78% <0%> (+3.94%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=footer). Last update [94475e6...3d2abbd](https://codecov.io/gh/dbcli/pgcli/pull/946?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Apologies for the amount of commits. I hope we find a common ground with these changes. Let me know otherwise!
@igncampa This PR is mostly good to go, except for one typo. Please rebase on top of master if possible. Thank you!
Sorry for being away for a while. I admit my git-fu is pretty weak and I'm hesitant to doing anything beyond the regular branching, commiting, pushing/pulling workflow. So I just did:

- `git rebase master`

- fixed the typo. `git commit`

- `git push -f ` as suggested [here](https://stackoverflow.com/questions/39399804/updates-were-rejected-because-the-tip-of-your-current-branch-is-behind#39400690)

hope I didn't screw anything up!
Nothing screwed up that I can see. :)

Please add your contribution to the changelog and update AUTHORS file!
I'd rather add myself to the AUTHORS file only after having contributed code (soon!), if that's ok with you
Merged. Thank you for the PR!

🍫 ",2018-09-26 22:58:46,2018-11-13 22:01:48
255,945,"## Description
I pulled the repo to my machine and followed the contributing guide. Running _behave_ and _py.test_ both gave me an error:

_behave_ command gives the following error:
```
package root: /home/igncampa/Repos/pgcli
fixture dir: /home/igncampa/Repos/pgcli/tests/features/fixture_data
HOOK-ERROR in before_all: OperationalError: fe_sendauth: no password supplied
HOOK-ERROR in after_all: AttributeError: 'Context' object has no attribute 'cn'

ABORTED: By user.
0 features passed, 0 failed, 0 skipped, 8 untested
0 scenarios passed, 0 failed, 0 skipped, 16 untested
0 steps passed, 0 failed, 0 skipped, 0 undefined, 85 untested
Took 0m0.000s
```
also running _py.test_ one of the tests fails:
`test_naive_completion.py:65: AssertionError`

in case it matters, on my _pg_hba.conf_ I have:
`local   all             postgres                                trust`


## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
Description:	Ubuntu 18.04.1 LTS

- [x] Please provide your CLI version.
psql (PostgreSQL) 10.5 (Ubuntu 10.5-1.pgdg18.04+1)

- [x] What is the output of ``pip freeze`` command.
autopep8==1.3.3
behave==1.2.6
certifi==2018.8.24
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
codecov==2.0.15
colorama==0.3.9
configobj==5.0.6
coverage==4.3.4
docformatter==1.0
docutils==0.14
humanize==0.5.1
idna==2.7
mock==2.0.0
parse==1.8.4
parse-type==0.4.2
pbr==4.2.0
pep8radius==0.9.2
pexpect==3.3
-e git+git@github.com:igncampa/pgcli.git@d3bdb891d309622cbf4e59244a698def8a8bbd2d#egg=pgcli
pgspecial==1.11.2
pkg-resources==0.0.0
pkginfo==1.4.2
pluggy==0.7.1
prompt-toolkit==1.0.15
psycopg2==2.7.5
psycopg2-binary==2.7.5
py==1.6.0
pycodestyle==2.4.0
Pygments==2.2.0
pytest==3.0.7
requests==2.19.1
requests-toolbelt==0.8.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
toml==0.9.6
tox==3.4.0
tqdm==4.26.0
twine==1.11.0
untokenize==0.1.1
urllib3==1.23
virtualenv==16.0.0
wcwidth==0.1.7
yapf==0.24.0
","fail to run initial behave and test error
I recently encountered this error when `local` connections had `trust` auth, but `host` didn't. Changing `host` to `trust` works:

```
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
```

What kind of error do you get in `test_naive_completion.py`? Try py.test with verbose flag:

`py.test -svv tests/test_naive_completion.py`
I started a fresh terminal after setting the lines to `trust` on my `pg_hba.conf` but the problem persists. No change in the output.

The output of running `test_naive_completion.py` is the following:

```
============================= test session starts ==============================
platform linux -- Python 3.6.5, pytest-3.0.7, py-1.6.0, pluggy-0.4.0 -- /home/igncampa/Repos/venvs/pgcli/bin/python3.6
cachedir: .cache
rootdir: /home/igncampa/Repos/pgcli/tests, inifile: pytest.ini
collecting ... collected 6 items

test_naive_completion.py::test_empty_string_completion PASSED
test_naive_completion.py::test_select_keyword_completion PASSED
test_naive_completion.py::test_function_name_completion PASSED
test_naive_completion.py::test_column_name_completion PASSED
test_naive_completion.py::test_paths_completion FAILED
test_naive_completion.py::test_alter_well_known_keywords_completion PASSED

=================================== FAILURES ===================================
____________________________ test_paths_completion _____________________________

completer = <pgcli.pgcompleter.PGCompleter object at 0x7f7aab17a2b0>
complete_event = <Mock id='140164833192144'>

    def test_paths_completion(completer, complete_event):
        text = '\i '
        position = len(text)
        result = set(completer.get_completions(
            Document(text=text, cursor_position=position),
            complete_event,
            smart_completion=True))
>       assert result > set([Completion(text=""setup.py"", start_position=0)])
E       AssertionError: assert {Completion(text='metadata.py', start_position=0), Completion(text='conftest.py', start_position=0), Completion(text='...=0), Completion(text='test_prioritization.py', start_position=0), Completion(text='pytest.ini', start_position=0), ...} > {Completion(text='setup.py', start_position=0)}
E        +  where {Completion(text='setup.py', start_position=0)} = set([Completion(text='setup.py', start_position=0)])

complete_event = <Mock id='140164833192144'>
completer  = <pgcli.pgcompleter.PGCompleter object at 0x7f7aab17a2b0>
position   = 3
result     = {Completion(text='metadata.py', start_position=0), Completion(text='conftest.py', start_position=0), Completion(text='...=0), Completion(text='test_prioritization.py', start_position=0), Completion(text='pytest.ini', start_position=0), ...}
text       = '\\i '

test_naive_completion.py:65: AssertionError
====================== 1 failed, 5 passed in 0.12 seconds ======================

```

Thanks for the help.
After changing `pg_hba.conf`, postgresql service needs a restart.
@igncampa I got it, you're running tests from the wrong directory. To run tests:

```
cd /home/igncampa/Repos/pgcli
py.test -sv
```

to run behave tests:

```
cd /home/igncampa/Repos/pgcli/tests
behave
```

That `test_paths_completion` tests actual paths, not mocked. It is not very well designed, sorry.
Thank you, @j-bennet. You were right on both cases!

Looking forward to contributing some code!",2018-09-25 21:03:53,2018-09-26 01:30:43
256,944,Changelog update.,Changelog update to release 1.11.0.,2018-09-24 23:24:08,2018-09-24 23:24:15
257,943,"## Description

Does not work this way:

```
logproc_beta> \d pixel_processor.hourly_processed_logs
Did not find any relation named pixel_processor.hourly_processed_logs.
```

but works this way:

```
logproc_beta> \d ""pixel_processor.hourly_processed_logs""
```

There's no space, so quoting should not be needed.

## Your environment
<!-- This gives us some more context to work with. -->

- [X] Please provide your OS and version information.

OSX, 

- [X] Please provide your CLI version.

```
Server: PostgreSQL 9.4.15
Version: 1.10.3
```

- [X] What is the output of ``pip freeze`` command.

```
appnope==0.1.0
astroid==1.6.5
atomicwrites==1.1.5
attrs==18.1.0
autopep8==1.3.3
awscli==1.15.2
backcall==0.1.0
behave==1.2.6
botocore==1.10.2
cassandra-driver==3.15.1
certifi==2018.4.16
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
click-plugins==1.0.3
codecov==2.0.15
colorama==0.3.7
configobj==5.0.6
coverage==4.3.4
cql==1.4.0
cssselect==1.0.3
decorator==4.2.1
docformatter==1.0
docker-py==1.10.6
docker-pycreds==0.2.3
docutils==0.14
entrypoints==0.2.3
fuzzyfinder==2.1.0
howdoi==1.1.13
humanize==0.5.1
idna==2.6
ipython-genutils==0.2.0
isort==4.3.4
jedi==0.11.1
jmespath==0.9.3
lazy-object-proxy==1.3.1
lxml==4.2.4
mccabe==0.6.1
mock==2.0.0
more-itertools==4.2.0
packaging==17.1
parse==1.8.4
parse-type==0.4.2
parso==0.1.1
pbr==4.2.0
pep8radius==0.9.2
pexpect==3.3
-e git+https://github.com/pyenv/pyenv.git@35f7ef8708ee92582a12142b9a7510d9b032acb7#egg=pgcli
pgspecial==1.11.2
pickleshare==0.7.4
pipdeptree==0.13.0
pkginfo==1.4.2
pluggy==0.6.0
prompt-toolkit==2.0.4
psycopg2==2.7.5
ptyprocess==0.5.2
py==1.5.4
py-pretty==1
pyasn1==0.4.2
pycodestyle==2.4.0
Pygments==2.2.0
pylint==1.9.2
pyparsing==2.2.0
pyquery==1.4.0
pytest==3.6.3
python-dateutil==2.6.1
python-magic==0.4.15
PyYAML==3.12
requests==2.18.4
requests-cache==0.4.13
requests-toolbelt==0.8.0
rsa==3.4.2
s3cmd==2.0.1
s3transfer==0.1.13
setproctitle==1.1.10
shodan==1.9.1
simplegeneric==0.8.1
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
thrift==0.11.0
tox==3.1.2
tqdm==4.24.0
traitlets==4.3.2
twine==1.11.0
untokenize==0.1.1
urllib3==1.22
virtualenv==16.0.0
wcwidth==0.1.7
websocket-client==0.47.0
wrapt==1.10.11
XlsxWriter==1.0.9
yapf==0.22.0
```
",`\d` can't find table name with a dot (unquoted),2018-09-24 21:11:13,
258,942,"This reverts `absolute_imports` change in tests, because that came with a drawback: `tests` having to be a package, being installed into and polluting `site-packages`. Should we perhaps have `tests` inside `pgcli` package? Challenge for another day.","Revert abs imports in tests.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=h1) Report
> Merging [#942](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7889b2838f8890122d0f9c4bc141e03cfc25d003?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/942/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #942      +/-   ##
==========================================
- Coverage   85.22%   85.18%   -0.05%     
==========================================
  Files          22       22              
  Lines        2443     2443              
==========================================
- Hits         2082     2081       -1     
- Misses        361      362       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/942/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.28% <0%> (-0.15%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=footer). Last update [7889b28...741a325](https://codecov.io/gh/dbcli/pgcli/pull/942?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-09-22 22:20:34,2018-09-22 22:42:45
259,941,Fixing tests that failed in https://github.com/dbcli/pgcli/pull/871.,"Attempt to fix failing tests
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=h1) Report
> Merging [#941](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/5834259535e1cf5a75204305b0533ac5559ff344?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/941/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #941   +/-   ##
=======================================
  Coverage   85.18%   85.18%           
=======================================
  Files          22       22           
  Lines        2443     2443           
=======================================
  Hits         2081     2081           
  Misses        362      362
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/941/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.28% <0%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=footer). Last update [5834259...7f2d831](https://codecov.io/gh/dbcli/pgcli/pull/941?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-09-22 04:04:29,2018-09-22 04:38:41
260,940,One of the few things I miss from `psql` is the `%x` prompt option that indicates the current transaction status (https://www.postgresql.org/docs/current/static/app-psql.html#APP-PSQL-PROMPTING). It's pretty handy to have a visual clue that there is a transaction pending so you don't walk away and potentially leave other database users locked out of whatever you were doing.,"Feature request: transaction status prompt option
<img width=""810"" alt=""screenshot 2018-09-21 14 42 52"" src=""https://user-images.githubusercontent.com/637013/45907424-ab412d00-bdac-11e8-8216-f6f8f5899430.png"">

We have a visual indicator of transaction in status bar. Does that help?
@j-bennet Excellent, yes, that helps a lot. I just noticed the transaction indication on my laptop; perhaps my configuration at work is different and I don't have this enabled. Or I simply missed it!",2018-09-21 19:40:25,2018-09-22 00:46:31
261,939,"## Description
Apparently prompt-toolkit has this option (https://github.com/jonathanslenders/python-prompt-toolkit/issues/498)
","Add the option of hiding the toolbar (statusbar)
Any updates on this?
Looks like nobody had the time to pick this up. Are you willing to submit a PR? You would need to add a new config option to pgclirc:

https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc

then read it on `init`:

https://github.com/dbcli/pgcli/blob/005fd2fcee258ae192ed01d503303068558b0e89/pgcli/main.py#L150

then set `bottom_toolbar` to None based on that option's value:

https://github.com/dbcli/pgcli/blob/005fd2fcee258ae192ed01d503303068558b0e89/pgcli/main.py#L795
No problem at all @j-bennet, PR for requested changes #1170 ",2018-09-16 17:02:35,
262,938,"Pgcli 1.10.3 running on Windows 10 with Python 3.7.0

When using a non-default config file (`--pgclirc`) named queries are neither loaded from nor saved to the config files. Instead they are loaded from and saved to the default config file.

The same issue happens with mssql-cli (https://github.com/dbcli/mssql-cli/issues/222).",Named queries not loaded from or saved to config file,2018-09-16 11:36:01,
263,937,"## Description
In psql I can use \i <path> to load a file which contains a series of additional \i <path> commands. This makes it simple to run commands from a single file, yet also compile groups of commands together into ""parent"" files that call a series of ""children"" files (for example, while setting up and debugging a new database).

In pgcli, running \i <path-to-parent> simply dumps a long string containing the concatenation of all other files to the screen, and stops.

## Your environment
OS: Ubuntu 18.04
Server: PostgreSQL 9.6.9
Version: 1.10.3

pip freeze:
argh==0.26.2
asn1crypto==0.24.0
atomicwrites==1.2.1
attrs==18.2.0
awscli==1.16.7
awsebcli==3.14.4
beautifulsoup4==4.6.3
bleach==2.1.4
blessed==1.15.0
blinker==1.4
boto3==1.8.7
botocore==1.11.7
bs4==0.0.1
cached-property==1.4.3
cement==2.8.2
certifi==2018.8.24
cffi==1.11.5
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
colorama==0.3.9
configobj==5.0.6
coverage==4.5.1
cryptography==2.3.1
csscompressor==0.9.5
docker==3.5.0
docker-compose==1.21.2
docker-pycreds==0.3.0
dockerpty==0.4.1
docopt==0.6.2
docutils==0.14
Flask==1.0.2
future==0.16.0
glob2==0.6
html5lib==1.0.1
humanize==0.5.1
idna==2.6
itsdangerous==0.24
Jinja2==2.10
jmespath==0.9.3
jsonschema==2.6.0
Mako==1.0.7
MarkupSafe==1.0
more-itertools==4.3.0
parse==1.8.4
parse-type==0.4.2
pathspec==0.5.5
pathtools==0.1.2
pgcli==1.10.3
pgspecial==1.11.2
Pillow==5.2.0
pipdeptree==0.13.0
pkg-resources==0.0.0
pluggy==0.7.1
prompt-toolkit==1.0.10
psycopg2-binary==2.7.5
py==1.6.0
pyasn1==0.4.4
pycparser==2.18
Pygments==2.2.0
pyOpenSSL==18.0.0
pytest==3.8.0
pytest-bdd==2.21.0
pytest-cov==2.6.0
pytest-html==1.19.0
pytest-metadata==1.7.0
python-dateutil==2.7.3
python-dotenv==0.9.1
python-slugify==1.2.6
PyYAML==3.13
requests==2.18.4
rsa==3.4.2
s3transfer==0.1.13
semantic-version==2.5.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
termcolor==1.1.0
terminaltables==3.1.0
texttable==0.9.1
Unidecode==1.0.22
urllib3==1.22
watchdog==0.9.0
wcwidth==0.1.7
webencodings==0.5.1
websocket-client==0.52.0
Werkzeug==0.14.1
","\i does not match psql functionality
This works with a file that contains plain sql commands in pgcli==2.1.0:

```
Server: PostgreSQL 10.6
Version: 2.1.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@/tmp:postgres> \i 1.sql
+-------+
| boo   |
|-------|
| 1     |
| 2     |
| 3     |
+-------+
SELECT 3
+-------+
| foo   |
|-------|
| 1     |
| 2     |
+-------+
SELECT 2
Time: 0.026s
```

file:

```
$ cat 1.sql
select 1 as boo
union select 2
union select 3;

select 1 as foo
union select 2;
```

What kind of commands does your file contain? Are they meta-commands (backslash-commands)? Are they `SET` statements (`pgcli` does not support all of those)? Do you get an ""error in your SQL"" at some point? Which point is it?
It has been some time, but as described I was loading a file with \i <filename> which contained a sequence of lines formatted as  \i <filename>. This allowed me easily execute sequences of commands using a single \i <filename> call. This worked in psql, but I could not get it to work in pgcli. As I recall the issue appeared to be improper handling of backslashes. I just tested again and got the following result from pgcli (which if memory serves is similar to the error last time):

```
gary> \i sql/test.sql                                                                                                                                                                                                            
[Errno 2] No such file or directory: 'sql/test/schema.sql\n\\i sql/test/main.sql\n\\i sql/test/other.sql'
Time: 0.001s
```

Note that pgcli consumed the first \i, then treated the rest of the file as a filename / path.

So, pgcli seems to assume that the file contains a single command, rather than (possibly) a sequence of slash commands, whereas psql seemed to handle this correctly.
",2018-09-11 22:58:27,
264,936,"## Description
After upgrading python3-sqlparse from 0.1.18-1 to 0.2.4-0.1~pgdg16.04+1 as soon as you enter select you get an exception. After that the program continues working but autocomplete is disabled.

`Traceback (most recent call last):
  File ""/usr/lib/python3.5/threading.py"", line 914, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.5/threading.py"", line 862, in runs-mode                                                                                                                                                                                                                
    self._target(*self._args, **self._kwargs)
  File ""/usr/lib/python3/dist-packages/prompt_toolkit/interface.py"", line 673, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""/usr/share/pgcli/pgcli/pgcompleter.py"", line 238, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 100, in suggest_type
    full_text, identifier)
  File ""/usr/share/pgcli/pgcli/packages/sqlcompletion.py"", line 192, in suggest_based_on_last_token
    token_v = token.value.lower()
AttributeError: 'tuple' object has no attribute 'value'
`
## Your environment

`LinuxMint 18.3 Sylvia`
`Linux 4.13.0-41-generic #46~16.04.1-Ubuntu SMP Thu May 3 10:06:43 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux`
`pgcli 0.20.1-3build1`

`apt-clone==0.2.1
apt-xapian-index==0.47
apturl==0.5.2
blinker==1.3
Brlapi==0.6.4
chardet==2.3.0
click==6.2
colorama==0.3.7
command-not-found==0.3
configobj==5.0.6
cryptography==1.2.3
defer==1.0.6
dirspec==13.10
greenlet==0.4.14
httplib2==0.9.1
idna==2.0
louis==2.6.4
lxml==3.5.0
Mako==1.0.3
MarkupSafe==0.23
msgpack==0.5.6
neovim==0.2.6
oauthlib==1.0.3
onboard==1.2.0
oneconf==0.3.9
pexpect==4.0.1
pgspecial==1.2.0
Pillow==3.1.2
piston-mini-client==0.7.5
prompt-toolkit==0.57
psutil==3.4.2
psycopg2==2.7.5
ptyprocess==0.5
pyasn1==0.1.9
pycrypto==2.6.1
pycups==1.9.73
pycurl==7.43.0
Pygments==2.1
pygobject==3.20.0
PyICU==1.9.2
PyJWT==1.3.0
python-apt==1.1.0b1+ubuntu0.16.4.2
python-debian==0.1.27
python-xapp==1.0.0
pyxdg==0.25
reportlab==3.3.0
requests==2.9.1
screen-resolution-extra==0.0.0
sessioninstaller==0.0.0
setproctitle==1.1.8
six==1.10.0
sqlparse==0.2.4
system-service==0.3
thin-client-config-agent==0.8
ubuntu-drivers-common==0.0.0
ufw==0.35
urllib3==1.13.1
vboxapi==1.0
virtkey==0.63.0
wcwidth==0.1.6
xkit==0.0.0
`","Newest python3-sqlparse breaks pgcli
It looks like you have an old version of `pgcli` (0.20.1). This error does not happen with the latest version (1.10.3). Are you able to update (`pip install -U pgcli`)?
That actually did it (had to use --ignore-installed, etc.). Thank you very much.
Great!",2018-09-10 19:26:35,2018-09-21 21:44:36
265,935,"![image](https://user-images.githubusercontent.com/228361/45196734-4821a780-b290-11e8-9429-6b37e92be94f.png)

After I press `q` on a output, it just disappears. I really want it stay on screen, so I can compare different commands' outputs.

## My environment
- [x] Ubuntu 16.04.5 LTS
- [ ] pgcli==1.10.3
- [ ] prompt-toolkit==1.0.15
","How can I leave the output of previous commands on screen?
@wonderbeyond, you can disable the `enable_pager` setting in the config file (usually located in `~/.config/pgcli/config`) and that way, instead of using a pager, when a query is executed, the results will just be printed in the pgcli's buffer.
Maybe the `-X` option of `less` or `pspg` does what you want? You can try it adding something like
```
pager = less -X
```
to your config. My personal config contains `pspg -XFs 4`.",2018-09-07 03:30:04,2018-12-21 03:38:32
266,934,"## Description
<!--- Describe your changes in detail. -->
Fixed most of the pep8 issues using command 'pycodestyle --config=.pycodestyle .' 
Following pep8 issues are still there:
- E402 module level import not at top of file. in pgcli/main.py
- E731 do not assign a lambda expression, use a def in (pgcli/main.py and pgcli/pgcompleter.py)
","Fixed pep8 issues using 'pycodestyle --config=.pycodestyle .'
@akshay-joshi Thank you for the contribution! We prefer not to make wide-sweeping pep8 fixes, as they can (potentially) break something, and there is no clear consensus on which rules we want to enforce. We do have a `pep8` checker that enforces the rules only for the new changes.

(a PR that attempted the same pep8 fixes in the past: https://github.com/dbcli/pgcli/pull/809)

I'm going to close the PR, but don't let this deter you from contributing.

🍫 ",2018-08-28 09:07:05,2018-08-28 09:23:53
267,933,"## Description
I don't see any option to disable the 
```
You're about to run a destructive command.
Do you want to proceed? (y/n):
```
prompt in the config at `~/.config/pgcli/config`.

I'd like to disable it cause I run these kinds of queries frequently and it's a bit annoying.

## Your environment
- [x] Please provide your OS and version information.
Kubuntu 18.04.1
- [x] Please provide your CLI version.
1.10.3
- [x] What is the output of ``pip freeze`` command.
appdirs==1.4.3
apt-xapian-index==0.47
arrow==0.10.0
asciinema==1.4.0
asn1crypto==0.23.0
astroid==1.6.0
attrs==17.3.0
autobahn==17.10.1
Automat==0.6.0
awscli==1.15.45
awslogs==0.10.0
babelfish==0.5.5
backports.csv==1.0.5
beautifulsoup4==4.6.0
binaryornot==0.4.4
boto3==1.7.45
botocore==1.10.45
cached-property==1.3.1
certifi==2017.11.5
cffi==1.11.2
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
colorama==0.3.7
command-not-found==0.3
configobj==5.0.6
constantly==15.1.0
cookiecutter==1.6.0
credstash==1.14.0
cryptography==2.0.3
cupshelpers==1.0
decorator==4.2.1
distro-info==0.18
docker==3.3.0
docker-compose==1.21.2
docker-pycreds==0.3.0
dockerpty==0.4.1
docopt==0.6.2
docutils==0.14
dogpile.cache==0.6.4
entrypoints==0.2.3
enzyme==0.4.1
first==2.0.1
future==0.16.0
greenlet==0.4.12
guessit==2.1.4
hkdf==0.0.3
httpie==0.9.9
httplib2==0.9.2
humanize==0.5.1
hyperlink==17.3.1
idna==2.6
incremental==17.5.0
ipaddress==1.0.18
isort==4.2.15
jedi==0.11.0
Jinja2==2.10
jinja2-time==0.2.0
jmespath==0.9.3
jsonschema==2.6.0
keyring==13.2.1
keyrings.alt==3.0
lambda-uploader==1.2.0
language-selector==0.1
lazy-object-proxy==1.3.1
magic-wormhole==0.10.3
MarkupSafe==1.0
mccabe==0.6.1
meld==3.18.0
msgpack==0.5.6
neovim==0.2.6
networkx==2.1
olefile==0.45.1
parso==0.1.0
pbr==3.1.1
pexpect==4.2.1
pgcli==1.10.3
pgspecial==1.11.2
Pillow==5.1.0
pip-tools==2.0.2
pipenv==2018.7.1
pkginfo==1.4.2
pluggy==0.6.0
poyo==0.4.1
prompt-toolkit==1.0.15
psycopg2==2.7.5
ptpython==0.41
pudb==2017.1.4
py==1.5.2
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycairo==1.16.2
pycparser==2.18
pycrypto==2.6.1
pycups==1.9.73
Pygments==2.2.0
pygobject==3.26.1
pylint==1.8.1
PyNaCl==1.2.0
pyOpenSSL==17.4.0
Pyro4==4.63
pysrt==1.1.1
python-apt==1.6.2
python-dateutil==2.6.1
python-debian==0.1.32
pytz==2017.3
pyusb==1.0.0
pyxdg==0.25
PyYAML==3.12
rarfile==3.0
rebulk==0.9.0
reportlab==3.4.0
requests==2.18.4
requests-toolbelt==0.8.0
requests-unixsocket==0.1.5
rsa==3.4.2
s3transfer==0.1.13
screen-resolution-extra==0.0.0
SecretStorage==2.3.1
serpent==1.23
service-identity==17.0.0
setproctitle==1.1.10
six==1.11.0
snakeviz==0.4.2
spake2==0.7
sqlparse==0.2.4
stevedore==1.27.1
subliminal==2.0.5
systemd-python==234
tabulate==0.8.2
termcolor==1.1.0
terminaltables==3.1.0
texttable==0.9.1
tornado==4.5.2
tox==3.0.0
tqdm==4.19.4
twine==1.11.0
Twisted==17.9.0
txaio==2.8.2
txtorcon==0.19.3
ubuntu-drivers-common==0.0.0
ufw==0.35
unattended-upgrades==0.1
urllib3==1.22
urwid==1.3.1
vboxapi==1.0
virtualenv==15.1.0
virtualenv-clone==0.2.6
virtualenvwrapper==4.8.2
virtualfish==1.0.5
wcwidth==0.1.7
websocket-client==0.44.0
whichcraft==0.4.1
wrapt==1.10.11
xkit==0.0.0
xonsh==0.6.0
zope.interface==4.4.3
","Option for disabling the ""destructive command"" prompt
@butla I'm curious, what kind of workflow requires running destructive queries a lot?
There is an option in the config file. 

https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L28
@j-bennet That would be optimizing queries on analytical data in a new product. Adding and dropping indices, constraints, and sometimes columns is quite common.

@amjith Thanks! I guess I needed to recreate the config to see that option appear. Do you think that adding the default values into the config when new options are added is a viable feature request?
@butla Yup. We've been thinking about doing this for a while.

The problem is when people edit their config file we need to preserve the comments and write the file in a non-destructive way. It is not hard, just a simple matter of programming. :smile: 
@amjith I know :) I actually haven't seen that in any tool that I'm using regularly as a part of my CLI. Then again, just adding not found options at the end of a section, for example, should be straighforward in an automated fashion, right?",2018-08-21 14:33:48,2018-08-21 16:24:12
268,932,"## Description
Today I noticed that sometimes when I run ""destructive"" commands and I answer with ""y"" I see an error, that still doesn't seem to affect the functionality. It's a bit off-putting, though, especially when I run some important stuff. And example:

```
XXX@Y:ZZZ> alter table bla1 ADD CONSTRAINT bla1_id_unique UNIQUE(id);
               alter table bla2 ADD CONSTRAINT bla2_id_unique UNIQUE(id);
You're about to run a destructive command.
Do you want to proceed? (y/n): y
Error: y is not a valid boolean
```

It seems to not happend when I provide only one command.

## Your environment

- [x] Please provide your OS and version information.
Kubuntu 18.04.1
- [x] Please provide your CLI version.
1.10.3
- [x] What is the output of ``pip freeze`` command.
```
appdirs==1.4.3
apt-xapian-index==0.47
arrow==0.10.0
asciinema==1.4.0
asn1crypto==0.23.0
astroid==1.6.0
attrs==17.3.0
autobahn==17.10.1
Automat==0.6.0
awscli==1.15.45
awslogs==0.10.0
babelfish==0.5.5
backports.csv==1.0.5
beautifulsoup4==4.6.0
binaryornot==0.4.4
boto3==1.7.45
botocore==1.10.45
cached-property==1.3.1
certifi==2017.11.5
cffi==1.11.2
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
colorama==0.3.7
command-not-found==0.3
configobj==5.0.6
constantly==15.1.0
cookiecutter==1.6.0
credstash==1.14.0
cryptography==2.0.3
cupshelpers==1.0
decorator==4.2.1
distro-info==0.18
docker==3.3.0
docker-compose==1.21.2
docker-pycreds==0.3.0
dockerpty==0.4.1
docopt==0.6.2
docutils==0.14
dogpile.cache==0.6.4
entrypoints==0.2.3
enzyme==0.4.1
first==2.0.1
future==0.16.0
greenlet==0.4.12
guessit==2.1.4
hkdf==0.0.3
httpie==0.9.9
httplib2==0.9.2
humanize==0.5.1
hyperlink==17.3.1
idna==2.6
incremental==17.5.0
ipaddress==1.0.18
isort==4.2.15
jedi==0.11.0
Jinja2==2.10
jinja2-time==0.2.0
jmespath==0.9.3
jsonschema==2.6.0
keyring==13.2.1
keyrings.alt==3.0
lambda-uploader==1.2.0
language-selector==0.1
lazy-object-proxy==1.3.1
magic-wormhole==0.10.3
MarkupSafe==1.0
mccabe==0.6.1
meld==3.18.0
msgpack==0.5.6
neovim==0.2.6
networkx==2.1
olefile==0.45.1
parso==0.1.0
pbr==3.1.1
pexpect==4.2.1
pgcli==1.10.3
pgspecial==1.11.2
Pillow==5.1.0
pip-tools==2.0.2
pipenv==2018.7.1
pkginfo==1.4.2
pluggy==0.6.0
poyo==0.4.1
prompt-toolkit==1.0.15
psycopg2==2.7.5
ptpython==0.41
pudb==2017.1.4
py==1.5.2
pyasn1==0.4.2
pyasn1-modules==0.2.1
pycairo==1.16.2
pycparser==2.18
pycrypto==2.6.1
pycups==1.9.73
Pygments==2.2.0
pygobject==3.26.1
pylint==1.8.1
PyNaCl==1.2.0
pyOpenSSL==17.4.0
Pyro4==4.63
pysrt==1.1.1
python-apt==1.6.2
python-dateutil==2.6.1
python-debian==0.1.32
pytz==2017.3
pyusb==1.0.0
pyxdg==0.25
PyYAML==3.12
rarfile==3.0
rebulk==0.9.0
reportlab==3.4.0
requests==2.18.4
requests-toolbelt==0.8.0
requests-unixsocket==0.1.5
rsa==3.4.2
s3transfer==0.1.13
screen-resolution-extra==0.0.0
SecretStorage==2.3.1
serpent==1.23
service-identity==17.0.0
setproctitle==1.1.10
six==1.11.0
snakeviz==0.4.2
spake2==0.7
sqlparse==0.2.4
stevedore==1.27.1
subliminal==2.0.5
systemd-python==234
tabulate==0.8.2
termcolor==1.1.0
terminaltables==3.1.0
texttable==0.9.1
tornado==4.5.2
tox==3.0.0
tqdm==4.19.4
twine==1.11.0
Twisted==17.9.0
txaio==2.8.2
txtorcon==0.19.3
ubuntu-drivers-common==0.0.0
ufw==0.35
unattended-upgrades==0.1
urllib3==1.22
urwid==1.3.1
vboxapi==1.0
virtualenv==15.1.0
virtualenv-clone==0.2.6
virtualenvwrapper==4.8.2
virtualfish==1.0.5
wcwidth==0.1.7
websocket-client==0.44.0
whichcraft==0.4.1
wrapt==1.10.11
xkit==0.0.0
xonsh==0.6.0
zope.interface==4.4.3
```
",y is not a valid boolean error is displayed sometimes when acknowledging a destructive command,2018-08-16 15:16:12,
269,931,"## Description
Python 3.7.0a4 Windows build fails.



Error message:
    safe = scan_module(egg_dir, base, name, stubs) and safe
  File ""C:\Users\OB66759\P\Python37-64\lib\site-packages\setuptools\command\bdis
t_egg.py"", line 392, in scan_module
    code = marshal.load(f)
ValueError: bad marshal data (unknown type code)



## Your environment
Python 3.7.0a4 (v3.7.0a4:07c9d85, Jan  9 2018, 07:07:02) [MSC v.1900 64 bit (AMD64)] on win32

- [ ] Please provide your OS and version information.
Windows 7 service pack 1
- [ ] Please provide your CLI version.

Microsoft Windows [Version 6.1.7601]

- [ ] What is the output of ``pip freeze`` command.
backcall==0.1.0
blessings==1.7
bpython==0.17.1
certifi==2018.8.13
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
colorama==0.3.9
configobj==5.0.6
curses==2.2+utf8
curtsies==0.3.0
cycler==0.10.0
decorator==4.3.0
docopt==0.6.2
future==0.16.0
greenlet==0.4.14
humanize==0.5.1
idna==2.7
ipython==6.5.0
ipython-genutils==0.2.0
jedi==0.12.1
kiwisolver==1.0.1
matplotlib==2.2.3
numpy==1.15.0
parso==0.3.1
pgcli==1.10.3
pgspecial==1.11.2
pickleshare==0.7.4
ply==3.11
prompt-toolkit==1.0.15
psycopg2==2.7.5
ptpython==0.41
Pygments==2.2.0
PyHive==0.6.0
pyparsing==2.2.0
python-dateutil==2.7.3
pytz==2018.5
requests==2.19.1
sasl==0.2.1
scipy==1.1.0
setproctitle==1.1.10
simplegeneric==0.8.1
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
thrift==0.11.0
thrift-sasl==0.2.1
thriftpy==0.3.9
traitlets==4.3.2
typing==3.6.4
urllib3==1.23
wcwidth==0.1.7

",ValueError: bad marshal data (unknown type code),2018-08-15 19:31:47,
270,930,"Changes for prompt-toolkit 2.0, based on current master.

Cherry-picked from https://github.com/dbcli/pgcli/pull/826.

@jonathanslenders I cherry-picked because I have no permissions to rebase your branch, but we can merge either PR, provided it's in line with current `pgcli` master.

**Problems noticed so far**:

* ~styles are not applied~ fixed
* cli takes longer to start. I had to increase ""show help"" integration test timeout.
* ~cli won't run under 2.7~ fixed, it was unicode literals
* ~`iocommands` integration test fail on editor command~ fixed
* ~`named_queries` integration test fail~ fixed

Named query integration test failed because of this warning printed under `pexpect` (which is not a real terminal):

https://github.com/jonathanslenders/python-prompt-toolkit/blob/b8d09e971e5fbad76d3c5bda4b47063e4c0644b8/prompt_toolkit/application/application.py#L706

@jonathanslenders Is there a way to suppress this kind of error output for tests? perhaps is you use `warnings` vs writing to stdout?","Cherry-picked prompt-toolkit 2.0 changes.
Here is what I mean by ""styles not applied""

pgcli with ptk 1.0:

![pgcli-1 0-style](https://user-images.githubusercontent.com/637013/43353874-5a4a3e82-91f6-11e8-95bd-ffe99d87a969.png)

pgcli with ptk 2.0:

![pgcli-2 0-style](https://user-images.githubusercontent.com/637013/43353885-6e0a6bfe-91f6-11e8-8d46-ed6c5fff74a8.png)

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/930?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@d3bdb89`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `62.96%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/930/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/930?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #930   +/-   ##
=========================================
  Coverage          ?   84.67%           
=========================================
  Files             ?       21           
  Lines             ?     2454           
  Branches          ?        0           
=========================================
  Hits              ?     2078           
  Misses            ?      376           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/930?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.78% <100%> (ø)` | |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.14% <100%> (ø)` | |
| [pgcli/packages/parseutils/ctes.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9jdGVzLnB5) | `92.4% <100%> (ø)` | |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `82.43% <100%> (ø)` | |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.33% <100%> (ø)` | |
| [pgcli/packages/prompt\_utils.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcHJvbXB0X3V0aWxzLnB5) | `66.66% <100%> (ø)` | |
| [pgcli/packages/prioritization.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcHJpb3JpdGl6YXRpb24ucHk=) | `100% <100%> (ø)` | |
| [pgcli/packages/parseutils/tables.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy90YWJsZXMucHk=) | `100% <100%> (ø)` | |
| [pgcli/pgtoolbar.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkvcGd0b29sYmFyLnB5) | `23.33% <20%> (ø)` | |
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `41.66% <54.54%> (ø)` | |
| ... and [3 more](https://codecov.io/gh/dbcli/pgcli/pull/930/diff?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/930?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/930?src=pr&el=footer). Last update [d3bdb89...9036c27](https://codecov.io/gh/dbcli/pgcli/pull/930?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Bugs found: 

*  When I do `\e` and my $EDITOR is pointed to a bogus program that doesn't exist pgcli crashes.

```
postgres@localhost:postgres> \e                     
/bin/sh: /usr/loca/bin/nvim: No such file or directory                                                   
Error: /usr/loca/bin/nvim: Editing failed!          
```

* When I launch the editor with `\e` and then immediately quit without entering anything in the editor, pgcli crashes. 

```
Version: 1.10.3           
Chat: https://gitter.im/dbcli/pgcli                 
Mail: https://groups.google.com/forum/#!forum/pgcli 
Home: http://pgcli.com    
postgres@localhost:postgres> \e                     
Traceback (most recent call last):                  
  File ""/home/amjith/.virtualenvs/pgcli/bin/pgcli"", line 11, in <module>                                 
    load_entry_point('pgcli', 'console_scripts', 'pgcli')()                                              
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)               
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/click/core.py"", line 697, in main    
    rv = self.invoke(ctx) 
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/click/core.py"", line 895, in invoke  
    return ctx.invoke(self.callback, **ctx.params)  
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/click/core.py"", line 535, in invoke  
    return callback(*args, **kwargs)                
  File ""/home/amjith/Dropbox/code/python/pgcli/pgcli/main.py"", line 1042, in cli                         
    pgcli.run_cli()       
  File ""/home/amjith/Dropbox/code/python/pgcli/pgcli/main.py"", line 636, in run_cli                      
    text = self.handle_editor_command(text)         
  File ""/home/amjith/Dropbox/code/python/pgcli/pgcli/main.py"", line 535, in handle_editor_command        
    text = self.prompt_app.prompt(default=sql)      
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/prompt_toolkit/shortcuts/prompt.py"", line 731, in prompt
    return run_sync()     
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/prompt_toolkit/shortcuts/prompt.py"", line 714, in run_sync
    self.default_buffer.reset(Document(self.default))                                                    
  File ""/home/amjith/.virtualenvs/pgcli/lib/python2.7/site-packages/prompt_toolkit/document.py"", line 86, in __init__
    assert isinstance(text, six.text_type), 'Got %r' % text                                              
AssertionError: Got ''    
```

That's all I got. But I don't think they are related to ptk2.0. 
I tried to debug the problem with styles again today. I did not get very far, but it seems to me that styles are kind of applied, albeit incorrectly. At least in case of bottom toolbar, they seem reversed. For example, when styling bottom toolbar with red text and blue background, here is what I get:

![red-blue-toolbar](https://user-images.githubusercontent.com/637013/43691062-dc344732-98ca-11e8-9dee-35497d9441a4.png)

here are my config colors:

```
Token.Toolbar = '#000000 bg:#0000ff'
Token.Toolbar.Off = '#000000 bg:#0000ff' 
Token.Toolbar.On = '#ff0000 bg:#0000ff' 
```

for the life of me, I can't find where this reversing happens.
I found the reversing bit:

https://github.com/jonathanslenders/python-prompt-toolkit/blob/b7ab3ba67df2e7dbf63463fb98f817878dfd256a/prompt_toolkit/styles/defaults.py#L129

and added an override for that.

Now to figure out what's wrong with other styles...
Latest commit (https://github.com/dbcli/pgcli/pull/930/commits/1922fc31c411a688a7c5b2bc0f98b0212c8f1c6a) fixes styles, but I really need @jonathanslenders here to tell me if it does the right thing, and if it needs to do more. I think out problem is that we relied on prompt toolkit's custom `TokenTypes`, and those are not there anymore. But it would be good to have some guidance as to what we should replace them with. I only migrated `Token.Menu.Completions`, but we have more in pgclirc:

https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc

Also, bottom toolbar is not completely fixed - it does not stretch all the way right:

![cutoff-toolbar](https://user-images.githubusercontent.com/637013/43696955-93708dbe-98f5-11e8-9816-4f4688a8109e.png)

Hi @j-bennet,

The bottom toolbar is reversed by default, in order to make it stand out on both dark and light background terminals. You can indeed override it like that.

The backward-compatible changes that you've added there, is that to support custom color schemes in the configuration files? I think it looks fine. Ideally (in the future), you want to switch to the new style dictionaries that don't use Pygments tokens.

@jonathanslenders Yes, I added changes to convert from old-style Pygments tokens to new-style class names, so that people don't have to change their existing config files. But I need you to tell me what other token names I should convert to what class names. I migrated 1):

```
Token.Menu.Completions.Completion.Current = 'bg:#ffffff #000000'
Token.Menu.Completions.Completion = 'bg:#008888 #ffffff'
Token.Menu.Completions.Meta.Current = 'bg:#44aaaa #000000'
Token.Menu.Completions.Meta = 'bg:#448888 #ffffff'
Token.Menu.Completions.MultiColumnMeta = 'bg:#aaffff #000000'
Token.Menu.Completions.ProgressButton = 'bg:#003333'
Token.Menu.Completions.ProgressBar = 'bg:#00aaaa'
```

but not 2):

```
Token.SelectedText = '#ffffff bg:#6666aa'
Token.SearchMatch = '#ffffff bg:#4444aa'
Token.SearchMatch.Current = '#ffffff bg:#44aa44'
Token.Toolbar = 'bg:#222222 #aaaaaa'
Token.Toolbar.Off = 'bg:#222222 #888888'
Token.Toolbar.On = 'bg:#222222 #ffffff'
Token.Toolbar.Search = 'noinherit bold'
Token.Toolbar.Search.Text = 'nobold'
Token.Toolbar.System = 'noinherit bold'
Token.Toolbar.Arg = 'noinherit bold'
Token.Toolbar.Arg.Text = 'nobold'
Token.Toolbar.Transaction.Valid = 'bg:#222222 #00ff5f bold'
Token.Toolbar.Transaction.Failed = 'bg:#222222 #ff005f bold'
```

What class/style names can I use for the list 2) above?
This contains a good overview of all tokens that had a certain style: https://github.com/jonathanslenders/python-prompt-toolkit/blob/1.0/prompt_toolkit/styles/defaults.py#L16
This contains the new default style rules: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/styles/defaults.py

The following tokens match to these class names:
```
Token.SelectedText -> 'selection'
Token.SearchMatch -> 'search'
Token.SearchMatch.Current -> 'search.current'
```

The other toolbar tokens were never defined in prompt_toolkit. They correspond to custom pgcli styling. I see that the bottom toolbar is wrapped in ``PygmentsTokens``. This means that these will be turned into the following prompt_toolkit classnames:
```

Token.Toolbar.Off = 'pygments.toolbar.off'
Token.Toolbar.On = 'pygments.toolbar.on'
Token.Toolbar.Search = 'pygments.toolbar.search'
Token.Toolbar.Search.Text = 'pygments.toolbar.search.text'
...
```
Ideally, in the future (or now?), we should convert that to a list of prompt_toolkit ``(style, text)`` tuples, where ``style`` is something like ``""class:toolbar.off""``. In that case, the pygments prefix is dropped.
@jonathanslenders Thanks, that helps a lot, especially the link to old token definitions! I re-mapped everything to new style names, even though we're still backwards compatible with tokens. I also got rid of `PygmentsTokens` when creating the cli toolbar.

@amjith @meeuw @tsroten I would appreciate another look from you at this PR.

@tsroten would you be able to migrate `cli_helpers` to 2.0? Right now I'm still passing a dict of `{pygments token -> style string}` to `formatter.format_output`, but we should probably get rid of tokens in `cli_helpers` now that they are phased out of `prompt_toolkit`. This does not have to be done right now.
Hmm in emacs mode `ctrl-x-ctrl-e` (open in editor) doesn't seem to work anymore (works in master)

Other than that I haven't found any problems, nice work!
@meeuw Nice find! It looks like it takes a non-default flag to open things in editor in 2.0.
I think this is ready to merge. Can I get some 👍 or 👎 from @dbcli/pgcli-core ?
I'm sorry Irina, but I could do only a very quick and simple check on the branch (unfortunately where I'd use it most there's another tool that depends on PT 1, so they cannot co-exist). I did not hit any problem, though :-)
From tomorrow I'll be testing these changes I've ported to mycli (I don't have any postgresql production database :cry:).
~~Pressing `F2` gives me `Exception 'DynamicCompleter' object has no attribute 'smart_completion'`~~
fixed!
> From tomorrow I'll be testing these changes I've ported to mycli (I don't have any postgresql production database).

I've been using https://www.elephantsql.com/ for testing pgcli. 

Their free plan is good enough for a toy database.
>I've been using https://www.elephantsql.com/ for testing pgcli.
>
>Their free plan is good enough for a toy database.

That looks nice, thanks! I already have a test postgresql database using https://hub.docker.com/_/postgres/ but what I meant was that I don't have a ""normal workflow"" with a production postgresql. When I test postgresql it's a bit like dry land swimming.
`ctrl-c` seems to Abort `pgcli`, I use this often when I want to cancel the query I'm typing.
Will it support prompt coloring with escapes? Propmt-tookit itself does and I'm asking on pgcli
@eirnym prompt toolkit supports formatted text in prompt:

https://python-prompt-toolkit.readthedocs.io/en/master/pages/asking_for_input.html#coloring-the-prompt-itself

and lots of way to create formatted text:

https://python-prompt-toolkit.readthedocs.io/en/master/pages/printing_text.html#formatted-text.

`pgcli` uses prompt toolkit to build a cli, so we support whatever is supported there.
whoops, @j-bennet you're right, I've found some Vi-mode regression.

Steps to reproduce:
- Enable Vi-mode (F4)
- enter `select`
- press `ESC` `v`
- exit editor

Expected result:
Vi commands should still work (like enter `select` and press `ESC` again)

Actual result:
Vi command don't work, Vi-mode is still enabled according to toolbar
@meeuw Nice find!

Jonathan also links to a pdf here (about vi mode in readline):

https://github.com/jonathanslenders/python-prompt-toolkit/blob/fc4d8a0f21077d25285779ed3abe750ea7ae2d28/prompt_toolkit/key_binding/bindings/vi.py#L304

http://www.catonmat.net/download/bash-vi-editing-mode-cheat-sheet.pdf

I'll try and see which of those cheatsheet commands work (if any).
@meeuw It's not just editor, it looks like the vi mode is never applied to this prompt session after the first invocation. This commit seems to fix the problem:

https://github.com/dbcli/pgcli/pull/930/commits/31b6eb1b2987e70314e24631df33f0f28a8602f6

but I think this fix should not be needed. Once we change vi mode here:

https://github.com/dbcli/pgcli/blob/31b6eb1b2987e70314e24631df33f0f28a8602f6/pgcli/key_bindings.py#L32

shouldn't it propagate from `Application` back to our `PromptSession`?

@jonathanslenders can you advise?
Good find @j-bennet! I've posted a PR for prompt_toolkit: https://github.com/jonathanslenders/python-prompt-toolkit/pull/720
@j-bennet Thank you for explanation. I've asked as you can request library to disable or enable some features programatically and I want to be aware about the particular one. 
After more poking at this PR, I don't see anything else broken. I feel like merging it. What do you think @meeuw? Sure, once it's released, people may find other problems, but at least we'll have more eyes out looking for those problems.
I think it's good to go!
Linking another regression here: https://github.com/dbcli/pgcli/pull/970",2018-07-28 00:33:08,2018-09-28 21:18:41
271,929,Changelog update for the next bugfix release.,Let's release more bugfixes.,2018-07-27 19:03:49,2018-07-27 19:04:19
272,928,"## Problem

Writing complicated queries on multiple lines can be quite frustrating because the `Tab` key _always_ triggers the auto-complete pop-up, instead of increasing the indentation when on empty lines.

This seems to be undesired behaviour as at these cases one would rarely want a general auto-completion window open. Far more useful would be to increase the indentation without resorting to the vi mode or using an external editor.

## Solution

This MR changes the `Tab` mapping behaviour, so that if it's pressed on an empty line (with or without whitespace), it simply inserts a `\t` character. The auto-completion behaviour is triggered in all the other cases.

Furthermore, since some users would prefer spaces instead of `\t` characters (for copy-pasting queries for example), an `expand_tab` option has been introduced: it it's enabled, 4 spaces are inserted instead.

## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Tab press on an empty line increases the indentation instead of triggering the auto-complete pop-up
Thank you for the PR! Your build fails on pep8 checks. You can fix pep8 problems with this command:
```
pip install git+https://github.com/hayd/pep8radius.git
pep8radius master --docformatter -i
```
@j-bennet, fixed the PEP8 problems, now the build should succeed.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=h1) Report
> Merging [#928](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0f0be9deab501b85f9d77d5233886505ba17abc5?src=pr&el=desc) will **decrease** coverage by `0.09%`.
> The diff coverage is `22.22%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/928/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #928     +/-   ##
=========================================
- Coverage   84.57%   84.48%   -0.1%     
=========================================
  Files          21       21             
  Lines        2463     2468      +5     
=========================================
+ Hits         2083     2085      +2     
- Misses        380      383      +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/928/diff?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `41.46% <22.22%> (-0.21%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=footer). Last update [0f0be9d...945461b](https://codecov.io/gh/dbcli/pgcli/pull/928?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@arturbalabanov I have a couple of problems with how this currently works:

* I can see how inserting whitespace can be useful in multiline mode. But not in single-line mode.
* In both single-line and multi-line mode, when the cursor is immediately at prompt (like `user@localhost> [HERE]`), I think the correct behavior is autocomplete, not insert whitespace.
@j-bennet, thank you for the feedback!

> In both single-line and multi-line mode, when the cursor is immediately at prompt (like `user@localhost> [HERE]`), I think the correct behavior is autocomplete, not insert whitespace.

Yes, this does make sense, fixed in 7602998 -- on the first line autocomplete is triggered always.

> I can see how inserting whitespace can be useful in multiline mode. But not in single-line mode.

I'm a bit reluctant to restrict the new `Tab` key behaviour to multi-line mode only -- the above fix should capture any reasonable single-line mode editing, and there is one weird edge case:

* Go to single-line mode
* Turn on vi-mode
* Hit `Esc` to go to Vi's normal mode
* Hit `o` to insert a new line

In this scenario, even though we're in single-line mode, the query consists of multiple lines and it seems reasonable and intuitive to me to allow the `Tab` key to increase the indentation. Though, I am not sure whether this is the correct behaviour of vi-mode. Please let me know your thoughts on that.
I did not forget about this PR, but I'm working on switching to prompt-toolkit 2.0: https://github.com/dbcli/pgcli/pull/930.

With 2.0, the multiline buffer behavior is not quite the same. I am going to leave this PR open until 2.0 is merged and then see if this change still makes sense / can be applied.
Merging this for now. I will remove the config option after the merge and I'll pick expand_tab as the default.",2018-07-27 16:29:55,2019-03-16 21:07:40
273,927,"## Description
<!--- Describe your changes in detail. -->

Fix for https://github.com/dbcli/pgcli/issues/920.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fixes keyring = False not honored.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=h1) Report
> Merging [#927](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/688f09c0916841d16697bc71b474b878830a83f8?src=pr&el=desc) will **increase** coverage by `<.01%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/927/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #927      +/-   ##
=========================================
+ Coverage   85.09%   85.1%   +<.01%     
=========================================
  Files          22      22              
  Lines        2442    2443       +1     
=========================================
+ Hits         2078    2079       +1     
  Misses        364     364
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/927/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.99% <100%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=footer). Last update [688f09c...c48a68c](https://codecov.io/gh/dbcli/pgcli/pull/927?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good. :elephant: 
oh boy... didn't test this, I'm sorry... Thanks for fixing!",2018-07-26 05:07:50,2018-07-27 00:17:36
274,926,Update pgspecial req to the latest.,"Bump pgspecial
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=h1) Report
> Merging [#926](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/688f09c0916841d16697bc71b474b878830a83f8?src=pr&el=desc) will **increase** coverage by `<.01%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/926/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #926      +/-   ##
=========================================
+ Coverage   85.09%   85.1%   +<.01%     
=========================================
  Files          22      22              
  Lines        2442    2443       +1     
=========================================
+ Hits         2078    2079       +1     
  Misses        364     364
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/926/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.99% <0%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=footer). Last update [688f09c...41a2b49](https://codecov.io/gh/dbcli/pgcli/pull/926?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-07-26 02:24:29,2018-07-27 17:31:12
275,925,"## Description
If the $symbol is included in the SQL statement:
```sql
\ns iuser insert into t_user (id, username, password, enabled) values ('1', 'user', '$2a$10$B4EuHii', true);
```
```
\n iuser
Bad arguments
```
I think it is not necessary to enter arguments, or provide another command execute SQL.

## Your environment
* MacOS use brew install
* pgcli version 1.10.2","Cannot save sql with has '$'
P.S. Old issue - this might work in newer `pgcli`, but has to be verified.",2018-07-25 08:27:45,
276,924,"## Description
In line with typical CLI conventions, when $EDITOR closes with a non-zero exit code, the edited procedure should not be completed.
To see an example:
1. Enter Vi-mode (F4)
2. Type a query
3. Press escape, then press ""v"" to open $EDITOR with your query
4. Exit the editor with a non-zero exit code (in Vi, `:cq` and enter)
5. The query will be executed anyway

## Your environment
<!-- This gives us some more context to work with. -->

- Please provide your OS and version information: macOS 10.13.6
- Please provide your CLI version: 1.10.2
- pip freeze - not relevant","$EDITOR exiting with a non-zero code should cause the edited query not to run
This seems to have been implemented somewhat recently",2018-07-25 05:01:40,2019-10-03 18:48:35
277,923,"## Description
<!--- Describe your changes in detail. -->

Fix for https://github.com/dbcli/pgcli/issues/922.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Change server version query.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=h1) Report
> Merging [#923](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/e4f02b247edf5c10b817e8d09879faff6b493781?src=pr&el=desc) will **decrease** coverage by `0.02%`.
> The diff coverage is `80%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/923/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #923      +/-   ##
==========================================
- Coverage   85.14%   85.12%   -0.03%     
==========================================
  Files          22       22              
  Lines        2437     2440       +3     
==========================================
+ Hits         2075     2077       +2     
- Misses        362      363       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/923/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.74% <80%> (-0.16%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=footer). Last update [e4f02b2...3b7f30d](https://codecov.io/gh/dbcli/pgcli/pull/923?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:flashlight: ",2018-07-24 22:15:50,2018-07-24 22:23:57
278,922,"## Description
When I try to connect to a Redshift database, pgcli exits with:

```
Traceback (most recent call last):
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli==1.10.2', 'console_scripts', 'pgcli')()
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 1067, in cli
    pgcli.run_cli()
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 629, in run_cli
    print('Server: PostgreSQL', self.pgexecute.get_server_version())
  File ""/usr/local/Cellar/pgcli/1.10.2/libexec/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 204, in get_server_version
    cur.execute(self.version_query)
psycopg2.ProgrammingError: must be superuser to examine ""server_version""
```
According to a Redshift engineer's post here, Redshift doesn't support server_version at all, even as superuser: https://stackoverflow.com/questions/51422236/what-role-permission-needed-for-the-user-to-get-the-server-version-in-amazon-red/51425825

He recommends `select version();` instead. I'm not sure how portable that is or how the output differs from server_version.

Here's what I see in my Redshift database, in case it's helpful:
```
readonly=> select current_setting('server_version');
ERROR:  must be superuser to examine ""server_version""
readonly=> show server_version;
ERROR:  must be superuser to examine ""server_version""
readonly=> select version();
                                                         version                                                          
--------------------------------------------------------------------------------------------------------------------------
 PostgreSQL 8.0.2 on i686-pc-linux-gnu, compiled by GCC gcc (GCC) 3.4.2 20041017 (Red Hat 3.4.2-6.fc3), Redshift 1.0.2915
(1 row)
```

## Environment
Mac OS
```
~ $ pgcli --version
Version: 1.10.2
```
Installed with brew, not pip.","""server_version"" error with Redshift
I'll get to this asap. In the meantime, you can work around the problem by running pgcli with `--less-chatty` to suppress the startup message.
Oh nice, thanks for the workaround!
Closed via https://github.com/dbcli/pgcli/pull/923.",2018-07-24 17:53:15,2018-07-27 19:14:18
279,921,,"Fix issue #919
AFAICT the failure is not related to my changes... that OTOH I think aren't even tested by Travis: we should activate a _matrix_ to check against different version of PostgreSQL. One project I know doing that is [asyncpg](https://github.com/MagicStack/asyncpg/blob/master/.travis.yml#L40).
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/921?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@9aae5ee`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/921/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/921?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #921   +/-   ##
=========================================
  Coverage          ?   85.09%           
=========================================
  Files             ?       22           
  Lines             ?     2442           
  Branches          ?        0           
=========================================
  Hits              ?     2078           
  Misses            ?      364           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/921?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/921/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.53% <66.66%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/921?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/921?src=pr&el=footer). Last update [9aae5ee...05ec05c](https://codecov.io/gh/dbcli/pgcli/pull/921?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@lelit Yes, that test failure is intermittent, things are fine now. Would you be able to rebase this PR on top of master? Otherwise, it looks good to me.
There it is, thank you!
👍 Looks good. Merging!",2018-07-24 15:55:00,2018-07-25 15:30:35
280,920,"This issue is created from Stack Overflow question:

https://stackoverflow.com/questions/51483945/avoid-keyring-messages-when-running-command-line-tools/51490602

> I have upgraded to v1.10.2. The ""No handlers ..."" message is gone, but everytime I run pgcli it keeps asking me ""Please enter password for encrypted keyring:"". I do not see there any option to disable the use of keyring in the updated pgcli. Please, clarify how can I avoid using keyring. Thanks – mljrg 7 hours ago

> I have configured the keyring = False under [main] in ~/.config/pgcli/config but still asks me for the encrypted keyring password. I even deleted ~/.local/share/python_keyring/crypted_pass.cfg and then when running pgcli I get the prompt ""Please set a password for you new keyring:"". – mljrg 6 hours ago

> Only if I create/edit the file ~/.local/share/python_keyring/keyringrc.cfg with the entry [backend] \n default-keyring=keyrings.alt.file.PlaintextKeyring, then it still uses keyring (and keyring.alt) but the backend does not require a password, so the previous prompt does not appear. HOWEVER, pgcli is still using keyring. Please, check again this situation in pgcli, so that the keyring = False is really working. – mljrg 6 hours ago
","Disabling keyring does not seem to work right
Closed via https://github.com/dbcli/pgcli/pull/927.",2018-07-24 15:14:04,2018-07-27 19:13:28
281,919,"The method `PGExecute.functions` will need some tweak to support PG 11 (now in beta): it queries the `pg_catalog.pg_proc` relation to extract a list of known functions, and in the coming version the `proisagg` and `proiswindow` columns have been collapsed into a single `prokind` enum, see [doc](https://www.postgresql.org/docs/11/static/catalog-pg-proc.html).

I can't promise, but I'll try to propose a fix if I find a couple of spare hours :smile:",PG 11 changed the structure of pg_catalog.pg_proc,2018-07-24 13:46:37,2018-07-25 15:30:37
282,918,Changelog for the bugfix release 1.10.2.,Changelog update to release 1.10.2.,2018-07-24 00:08:44,2018-07-24 00:09:14
283,917,"## Description
<!--- Describe your changes in detail. -->
Add autocommit mode. 
Add on error rollback. 
When autocommit_mode is set to false, users can manually commit or rollback the current transaction.
When on_error_rollback is set to true, if a statement in a transaction block generates an error, the error is ignored and the transaction continues.
In order to deactivate autocommit for users transactions, without messing up with intern pgcli transactions, we better use two different connections.
Requested here https://github.com/dbcli/pgcli/issues/410

## Limitation
Users are not able to activate/disable autocommit from the UI.
Autocommit has to be activated in order to use on error rollback.
No tests to cover the change.

## Ressource 
- https://www.postgresql.org/docs/current/static/ecpg-sql-set-autocommit.html
- https://www.postgresql.org/docs/current/static/tutorial-transactions.html
- https://www.endpoint.com/blog/2015/02/24/postgres-onerrorrollback-explained

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Autocommit mode
Unit tests are failing with a unicode error there in `tests/test_pgexecute.py`. Are you able to run them locally (running `py.test` in pgcli directory)?
I think that the reason of the failure is that the new `get_new_connection()` method should install the same typecasters as done by `connect()`... Maybe some refactor could be made, to avoid duplicating basically the same code to create the connection. 

Also, I'm not sure if those typecasters should be moved only onto the new `user_conn`: I would expect that only _user_ queries will involve `JSON` values...

Finally, in the method `execute_normal_sql()` (the only place where the new `user_conn` gets used), there's a loop that pops possible `notices`: shouldn't it targeting the same `user_conn` connection?
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=h1) Report
> Merging [#917](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0f0be9deab501b85f9d77d5233886505ba17abc5&el=desc) will **decrease** coverage by `0.51%`.
> The diff coverage is `59.09%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/917/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #917      +/-   ##
==========================================
- Coverage   84.57%   84.05%   -0.52%     
==========================================
  Files          21       21              
  Lines        2463     2496      +33     
==========================================
+ Hits         2083     2098      +15     
- Misses        380      398      +18     
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/917/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `78.90% <58.73%> (-3.64%)` | :arrow_down: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/917/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.08% <66.66%> (+0.06%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=footer). Last update [0f0be9d...59f0c77](https://codecov.io/gh/dbcli/pgcli/pull/917?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you for having a look at this PR.
I fixed the unicode error (due to typecasters) and notices, thank you.
It definitely need some refactor, in order to init all connections in the same place. I can have a look in the next days. This could be done in another PR, up to you.
[Edit] Made the refactor, any feedback welcome. Idk why `pep8radius` doesn't produce any output locally...
@gma2th I looked through the PR and I have 2 questions. Let me preface these comments by saying, I would like to minimize the number of configuration options in pgcli. It is wise to choose sensible defaults wherever possible. 

1. What is the purpose of surfacing the autocommit mode as a config? Is there an advantage in disabling autocommit mode? From my basic understanding we want to have the autocommit mode enabled at all times and the user can specify the `BEGIN` command to explicitly start a transaction.

2. Why is the on_error_rollback set to `off` by default? Wouldn't it make sense to have that `on` all the time? 


Hrm. Even when I set the `on_error_rollback` set to `True` it ends up aborting the transaction. I haven't traced the issue yet. Can you please verify if it works for you? 

Any updates on this?  I've been interested in this feature for quite a while.
@amjith @gma2th any updates on getting this through? Not being able to turn off autocommit for `pgcli` is basically a dealbreaker for me and many others who want some safety from fat-fingering!",2018-07-22 14:20:34,
284,916,"## Description
make keyring optional


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","make keyring optional
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=h1) Report
> Merging [#916](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/abc8d51dd3814cff0b5b015677904fc1939d236b?src=pr&el=desc) will **increase** coverage by `0.04%`.
> The diff coverage is `57.14%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/916/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #916      +/-   ##
==========================================
+ Coverage    85.1%   85.14%   +0.04%     
==========================================
  Files          22       22              
  Lines        2437     2437              
==========================================
+ Hits         2074     2075       +1     
+ Misses        363      362       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/916/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.95% <57.14%> (+0.14%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=footer). Last update [abc8d51...868b81a](https://codecov.io/gh/dbcli/pgcli/pull/916?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Merging! Release coming up.
This PR should be revisited since in my case it is not working. See my comments in [Avoid keyring messages when running command line tools](https://stackoverflow.com/questions/51483945/avoid-keyring-messages-when-running-command-line-tools). I am on:

```
$ uname -or
4.9.87-linuxkit-aufs GNU/Linux

$ lsb_release -irc
Distributor ID: Debian
Release:        9.5
Codename:   stretch
```
",2018-07-21 06:12:01,2018-07-24 00:04:56
285,915,"## Description
<!--- Describe your changes in detail. -->

Print server version, unless we're being ""less chatty"".

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Print server version as part of welcome message.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=h1) Report
> Merging [#915](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/2fa7b1458ad969c7017a07770acfd7ddd4d5c06b?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `91.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/915/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #915      +/-   ##
==========================================
+ Coverage   84.98%   85.02%   +0.03%     
==========================================
  Files          22       22              
  Lines        2425     2437      +12     
==========================================
+ Hits         2061     2072      +11     
- Misses        364      365       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/915/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.51% <100%> (+0.03%)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/915/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.9% <90.9%> (+0.29%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=footer). Last update [2fa7b14...7653ea9](https://codecov.io/gh/dbcli/pgcli/pull/915?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:dove: ",2018-07-20 22:50:23,2018-07-21 00:10:08
286,914,"## Description
Since today, when i try to install pgcli on a new (ubuntu 16.04) machine , the command does not work and exit directly after printing the message 

```
No recommended backend was available. Install the keyrings.alt package if you want to use the non-recommended backends. See README.rst for details.
```
installing `pip install keyrings.alt`  solve the problem, is it a missing dependencies ? 

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Ubuntu 16.04
- [ ] Please provide your CLI version.  =>  Version 1.10.0 
- [ ] What is the output of ``pip freeze`` command.
","No recommended backend was available. Install the keyrings.alt package if you want to use the non-recommended backends. See README.rst for details.
It is a missing dependency problem. We're going to make this dependency optional. Thank you for reporting!
Closed via https://github.com/dbcli/pgcli/pull/916 (released in 1.10.2).
Also linking issue from SO here:

https://stackoverflow.com/questions/51483945/avoid-keyring-messages-when-running-command-line-tools/51490602",2018-07-20 09:32:22,2018-07-24 04:48:20
287,913,"A couple of bugfixes. Keyring problem is the annoying one, so we better fix that.","Bugfix release.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/913?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@d2ab7c2`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/913/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/913?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #913   +/-   ##
=========================================
  Coverage          ?   84.98%           
=========================================
  Files             ?       22           
  Lines             ?     2425           
  Branches          ?        0           
=========================================
  Hits              ?     2061           
  Misses            ?      364           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/913?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/913?src=pr&el=footer). Last update [d2ab7c2...33936a8](https://codecov.io/gh/dbcli/pgcli/pull/913?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-07-20 05:12:46,2018-07-20 05:21:03
288,912,"Trying to figure out `AttributeError: _DistInfoDistribution__dep_map` in python 3.4 in travis.

Seems to be fixed by updating either pip or setuptools.","Update setuptools before install.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/912?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@992deef`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/912/graphs/tree.svg?width=650&src=pr&height=150&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/912?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #912   +/-   ##
=========================================
  Coverage          ?   84.98%           
=========================================
  Files             ?       22           
  Lines             ?     2425           
  Branches          ?        0           
=========================================
  Hits              ?     2061           
  Misses            ?      364           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/912?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/912?src=pr&el=footer). Last update [992deef...75e0bee](https://codecov.io/gh/dbcli/pgcli/pull/912?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-07-20 02:02:34,2018-07-20 02:50:14
289,911,"## Description
<!--- Describe your changes in detail. -->

Fix for this error:

`AttributeError: 'PGCli' object has no attribute 'watch_command'""`

see https://github.com/dbcli/pgcli/issues/909

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fixes ""object has no attribute watch_command""",2018-07-20 01:27:10,2018-07-20 01:51:22
290,910,"## Description
We run `pgcli` on a headless server, shared by many users.

With the release of 1.10.0 and its new dependency on `keyring`, we noticed that when we tried to connect to our database with username specified via `-U` and password specified via the `PGPASSWORD` environment variable, we would just get this error and then exit:
```
No recommended backend was available. Install the keyrings.alt package if you want to use the non-recommended backends. See README.rst for details.
```
We would really prefer not to have to set up `keyring` per use on headless systems per https://keyring.readthedocs.io/en/latest/?badge=latest#using-keyring-on-headless-linux-systems, since that'd require pulling in way more dependencies.

After we installed `keyring.alt` as the string specified, we were then prompted for an encryption password so that `keyring` could store the password onto the disk. This feature is not desired. And it doesn't look like there's any way to make keyring *not* do this, or to force it to use a different backend.

Based on the changelog entry about making keyring optional, it sounds like it's the case that `pgcli` should not have a hard dependency on using `keyring`'s features. This error about `keyring` not being able to find a backend is a `RuntimeError`, not a `keyring.errors.InitError`, so I added it to the try-catch to be ignored.

I've verified that this works by running
```
PGPASSWORD=... pgcli -h ...amazonaws.com -p 5439 -U kedo -d dbname
```
on my headless system with this branch installed and verifying I get the pgcli prompt instead of the process just ending.

## Checklist
- [ ] I've added this contribution to the `changelog.rst`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Fix bug that made `keyring` usage not optional when run headlessly
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=h1) Report
> Merging [#910](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1f98ce91de02a062ba3345c6bed2ebbe97d9e756?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/910/graphs/tree.svg?token=XdciEnQkL2&width=650&src=pr&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #910      +/-   ##
==========================================
- Coverage   85.06%   84.98%   -0.09%     
==========================================
  Files          22       22              
  Lines        2424     2424              
==========================================
- Hits         2062     2060       -2     
- Misses        362      364       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/910/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.44% <0%> (-0.3%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=footer). Last update [1f98ce9...83940d2](https://codecov.io/gh/dbcli/pgcli/pull/910?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

This was supposed to be fixed by https://github.com/dbcli/pgcli/pull/899, I wonder how that went missing. Good catch! I'll take a look and merge ASAP.
...because this catch was needed in 2 places, not one. Merging. 👍 ",2018-07-19 21:25:46,2018-07-20 01:16:23
291,909,"## Description
When trying to use ""pgcli -l"" the following error is raised: ""AttributeError: 'PGCli' object has no attribute 'watch_command'""

```
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 11, in <module>
    sys.exit(cli())
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python3.5/dist-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python3.5/dist-packages/pgcli/main.py"", line 1025, in cli
    pgcli.echo_via_pager('\n'.join(formatted))
  File ""/usr/local/lib/python3.5/dist-packages/pgcli/main.py"", line 901, in echo_via_pager
    if self.pgspecial.pager_config == PAGER_OFF or self.watch_command:
AttributeError: 'PGCli' object has no attribute 'watch_command'
```

## Environment
OS: Ubuntu 16.04.4 LTS x86_64 
Kernel: 4.4.0-130-generic
Shell: zsh 5.1.1
DE: GNOME 3.18.5 
WM: GNOME Shell
Terminal: gnome-terminal
CLI version: 1.10.0

## pip freeze
```
apturl==0.5.2
beautifulsoup4==4.3.1
blinker==1.3
Brlapi==0.6.4
chardet==2.3.0
chrome-gnome-shell==0.0.0
cli-helpers==1.0.2
click==6.7
command-not-found==0.3
configobj==5.0.6
cryptography==1.2.3
defer==1.0.6
entrypoints==0.2.3
feedparser==5.1.3
html5lib==0.999
httplib2==0.9.1
humanize==0.5.1
idna==2.0
jeepney==0.3.1
keyring==13.2.1
language-selector==0.1
louis==2.6.4
lxml==3.5.0
Mako==1.0.3
MarkupSafe==0.23
oauthlib==1.0.3
pexpect==4.0.1
pgcli==1.10.0
pgspecial==1.11.0
Pillow==2.1.0
prompt-toolkit==1.0.15
psycopg2==2.7.4
psycopg2-binary==2.7.4
ptyprocess==0.5
pyasn1==0.1.9
pycups==1.9.73
pycurl==7.43.0
Pygments==2.2.0
pygobject==3.20.0
PyJWT==1.3.0
python-apt==1.1.0b1+ubuntu0.16.4.1
python-debian==0.1.27
python-systemd==231
pyxdg==0.25
reportlab==3.3.0
requests==1.2.3
SecretStorage==3.0.1
sessioninstaller==0.0.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
ssh-import-id==5.5
system-service==0.3
tabulate==0.8.2
terminaltables==3.1.0
ubuntu-drivers-common==0.0.0
ufw==0.35
unattended-upgrades==0.1
unity-scope-calculator==0.1
unity-scope-chromiumbookmarks==0.1
unity-scope-colourlovers==0.1
unity-scope-devhelp==0.1
unity-scope-firefoxbookmarks==0.1
unity-scope-gdrive==0.7
unity-scope-manpages==0.1
unity-scope-openclipart==0.1
unity-scope-texdoc==0.1
unity-scope-tomboy==0.1
unity-scope-virtualbox==0.1
unity-scope-yelp==0.1
unity-scope-zotero==0.1
unity-tweak-tool==0.0.7
urllib3==1.13.1
usb-creator==0.3.0
wcwidth==0.1.7
xdiagnose==3.8.4.1
xkit==0.0.0
```
","""-l"" Flag Throws Error",2018-07-17 12:41:14,2018-07-20 01:51:22
292,908,"That note about tabulate formatting numbers is not relevant anymore.

See https://github.com/dbcli/pgcli/issues/617.",Reverted docs for 617 now it's fixed.,2018-07-16 15:19:40,2018-07-16 15:19:58
293,907,"## Description
<!--- Describe your changes in detail. -->

Changelog and some cleanup for 1.10.0.
","Changes to release 1.10.0
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/907?src=pr&el=h1) Report
> Merging [#907](https://codecov.io/gh/dbcli/pgcli/pull/907?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/5491d288fc7ea3a512a69c1da0b27d0d77c107e4?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/907/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/907?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #907   +/-   ##
=======================================
  Coverage   84.98%   84.98%           
=======================================
  Files          22       22           
  Lines        2424     2424           
=======================================
  Hits         2060     2060           
  Misses        364      364
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/907?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/907?src=pr&el=footer). Last update [5491d28...c17bcd6](https://codecov.io/gh/dbcli/pgcli/pull/907?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-07-14 19:54:34,2018-07-14 19:57:27
294,906,"## Description
<!--- Describe your changes in detail. -->

Updating changelog before release.
","Changelog update to release 1.10.0.
For this release, could we please:
- lower python3-keyring to >= 11.0.0 (untested) or make it an optional dependency?
- update MANIFEST.in to not include *.pyc files

https://github.com/dbcli/pgcli/commits/meeuw/release-1.10.0
Closing in favor of #907 .",2018-07-13 20:46:34,2018-07-14 19:54:59
295,905,Fixes #904 ,"Catch the ^D keybinding using EOFError exception.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=h1) Report
> Merging [#905](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d5b0b6527bb7d962de7a7494b8335008e15cf23d?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/905/graphs/tree.svg?src=pr&token=XdciEnQkL2&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #905   +/-   ##
=======================================
  Coverage   84.98%   84.98%           
=======================================
  Files          22       22           
  Lines        2424     2424           
=======================================
  Hits         2060     2060           
  Misses        364      364
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/905/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.44% <100%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=footer). Last update [d5b0b65...6eedf1b](https://codecov.io/gh/dbcli/pgcli/pull/905?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice! Was it something that changed in Click?
Nope. There was a PR that was created during the sprints that introduced
this.

On Wed, Jul 11, 2018 at 8:34 AM Irina Truong <notifications@github.com>
wrote:

> Nice! Was it something that changed in Click?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/pull/905#issuecomment-404213799>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AADAbGMN6CIlLCswxVhC3mKinMB_1jGHks5uFhsDgaJpZM4VKh7h>
> .
>
",2018-07-11 05:52:03,2018-07-11 15:33:42
296,904,"## Description

pgcli started saying `Aborted!` on `Ctrl + D`. It should say `Goodbye!`.

Master has this problem, released version does not.","pgcli says ""Aborted!"" instead of ""Goodbye!""",2018-07-10 19:08:27,2018-07-11 15:33:42
297,903,"## Description
Up to until now tab characters were rendered with the ugly `^I`. This is especially annoying for projects where the coding style is to use tabs instead of spaces and an external editor is being used or a query is copy-pasted into `pgcli`.

## Solution
The solution is quite simple -- `prompt_toolkit` already provides an input processor just for that, so I simply added it to `extra_input_processors` with some sane defaults.

## Further work
The `TabsProcessor` class can accept several arguments to give more control over the tab rendering. I opted out for a simple 4-space rendering as this will probably be desired behaviour in most use cases but, of course, we can extend the configuration to include some of them (most notably `tabstop` which describes the tab length). I thought it would be an overkill but if someone thinks this may be necessary, I can, of course, add it.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).

#346 ","Fixes #346: Tab characters are rendered with spaces instead of ""^I"" when entered in external editor
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=h1) Report
> Merging [#903](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d5b0b6527bb7d962de7a7494b8335008e15cf23d?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/903/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #903   +/-   ##
=======================================
  Coverage   84.98%   84.98%           
=======================================
  Files          22       22           
  Lines        2424     2424           
=======================================
  Hits         2060     2060           
  Misses        364      364
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/903/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.44% <ø> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=footer). Last update [d5b0b65...44d4275](https://codecov.io/gh/dbcli/pgcli/pull/903?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Very nice! Certainly an improvement over the current behavior.

Thank you for the PR! 🍒 ",2018-07-06 16:53:21,2018-07-13 20:24:45
298,902,"## Description
When trying to type in `INSERT` statement with explicit columns, e.g. ""`insert into courses (`..."", error is raised immediately after typing in the open bracket (probably while trying to show column names for completion). I presume python 3.7 isn't officially supported yet, I just wanted to report this so that you know about it. BTW huge thanks for the work you're doing, I love pgcli and couldn't imagine my life without it any more.

### full stack trace
```
Traceback (most recent call last):
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/parseutils/tables.py"", line 38, in extract_from_part
    raise StopIteration
StopIteration

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/home/jakub/.pyenv/versions/3.7.0/lib/python3.7/threading.py"", line 917, in _bootstrap_inner
    self.run()
  File ""/home/jakub/.pyenv/versions/3.7.0/lib/python3.7/threading.py"", line 865, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/prompt_toolkit/interface.py"", line 865, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/pgcompleter.py"", line 442, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/sqlcompletion.py"", line 159, in suggest_type
    return suggest_based_on_last_token(stmt.last_token, stmt)
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/sqlcompletion.py"", line 388, in suggest_based_on_last_token
    Column(table_refs=stmt.get_tables('insert'), context='insert'),
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/sqlcompletion.py"", line 108, in get_tables
    self.full_text if scope == 'full' else self.text_before_cursor)
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/parseutils/tables.py"", line 147, in extract_tables
    return tuple(i for i in identifiers if i.name)
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/parseutils/tables.py"", line 147, in <genexpr>
    return tuple(i for i in identifiers if i.name)
  File ""/home/jakub/.pyenv/versions/3.7.0/envs/django3.7/lib/python3.7/site-packages/pgcli/packages/parseutils/tables.py"", line 96, in extract_table_identifiers
    for item in token_stream:
RuntimeError: generator raised StopIteration
```

## Your environment
- [ ] Please provide your OS and version information.
`Ubuntu 18.04 LTS - GNU/Linux x86_64 4.15.0-23-generic`
- [ ] Please provide your CLI version.
`1.9.1`
- [ ] What is the output of ``pip freeze`` command.
```
backcall==0.1.0
certifi==2018.4.16
chardet==3.0.4
cli-helpers==1.0.2
click==6.7
configobj==5.0.6
coreapi==2.3.3
coreschema==0.0.4
decorator==4.3.0
Django==2.0.4
django-bootstrap3==9.1.0
django-cors-headers==2.2.0
django-extensions==2.0.7
django-filter==1.1.0
django-request-logging==0.5.5
django-rest-swagger==2.1.2
djangorestframework==3.7.7
dynamic-rest==1.8.0
Faker==0.8.13
httpie==0.9.9
humanize==0.5.1
idna==2.6
inflection==0.3.1
ipython==6.4.0
ipython-genutils==0.2.0
itypes==1.1.0
jedi==0.12.1
Jinja2==2.10
MarkupSafe==1.0
openapi-codec==1.3.2
parso==0.3.0
pexpect==4.6.0
pgcli==1.9.1
pgspecial==1.11.0
pickleshare==0.7.4
prompt-toolkit==1.0.15
psycopg2==2.7.4
ptyprocess==0.6.0
pydash==4.5.0
Pygments==2.2.0
python-dateutil==2.7.2
pytz==2018.4
PyYAML==3.12
requests==2.18.4
rules==1.3
setproctitle==1.1.10
simplegeneric==0.8.1
simplejson==3.13.2
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
text-unidecode==1.2
traitlets==4.3.2
uritemplate==3.0.0
urllib3==1.22
wcwidth==0.1.7
```","RuntimeError: generator raised StopIteration in python 3.7.0
https://github.com/PyCQA/pylint/issues/2241#issuecomment-402061974
MyCli had similar issue. 

With this issue this tool is completely unusable as it's easier to use `psql` to have no headache
Sorry guys. This is fixed in mycli. I'll see if I port over the fix to pgcli. :disappointed: ",2018-07-05 15:12:07,2018-11-19 04:11:16
299,901,"## Description
Instead of whitelisting all errors that do not require reconnecting, we simply
only reconnect if we detect a disconnect has occurred.

psql notably behaves in a similar way: https://git.io/fbxuc#L1461

Fixes #807

## Testing
1. In one shell:
    ```
    CREATE TABLE hello ( id integer, PRIMARY KEY(id));
    BEGIN;
    LOCK TABLE hello IN ACCESS EXCLUSIVE MODE;
    ```

2. In another shell:
    ```
    BEGIN;
    LOCK TABLE hello IN ACCESS EXCLUSIVE MODE;
    ```
3. Hitting Ctrl-C, results in: `^Ccanceling statement due to user request`
4. Hitting a lock timeout:
    ```
    ROLLBACK;
    BEGIN;
    SET lock_timeout = 3;
    LOCK TABLE hello IN ACCESS EXCLUSIVE MODE;
    ```
    similarly results in `canceling statement due to lock timeout`

5. Attempting to perform another statement behaves as expected:
    ```
    postgres@localhost:mytestdb> SELECT count(*) FROM hello;
    current transaction is aborted, commands ignored until end of transaction block
   ```
6. Running `SELECT count(*) FROM hello;` after stopping the database
    correctly prompts `Connection reset. Reconnect (Y/n):`

## Checklist
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Avoid reconnect prompt after error if connection is still valid
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=h1) Report
> Merging [#901](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/2e6e0e4acd66d4a29b64c9f3a5a08b5a9527ae80?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/901/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #901      +/-   ##
=========================================
- Coverage   85.02%   84.9%   -0.13%     
=========================================
  Files          22      22              
  Lines        2424    2424              
=========================================
- Hits         2061    2058       -3     
- Misses        363     366       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/901/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.6% <100%> (ø)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/901/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.14% <0%> (-0.45%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=footer). Last update [2e6e0e4...e5ced8d](https://codecov.io/gh/dbcli/pgcli/pull/901?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I realize #807 is already closed, but I think this fix avoids the issue more generally —  https://github.com/dbcli/pgcli/issues/807#issuecomment-392115598 reveals that the original fix doesn't handle Ctrl-C
This sounds like a more sensible way to handle the problem. Very nice. Let me test it out, and I'll merge.
@j-bennet : One worry is that this code path is no longer exercised:  https://codecov.io/gh/dbcli/pgcli/pull/901/changes

Unfortunately,  I don't have enough context to know if that is an unintended consequence of my change. From what I gather, if KeyboardException does cause the connection to close, and we're catching it in pgexecute.py, then we'd wouldn't be able to catch it in main.py. 
This works very well. I am going to merge it. We can deal with any new `KeyboardInterrupt` problems later, if they do come up.

Also, this PR wins the ""best first contributor PR"" award, because the description is amazing and I love the test cases being included! Here it is: 🥇

Thank you!
😊

Also, @j-bennet just wanted to say thanks for making it so easy to contribute and for building such a great tool. We recently made the switch from psql to pgcli... and you can literally hear the delight around the office ""What, we have syntax highlighting and autocomplete now?! This is the best.""",2018-07-04 07:48:45,2018-07-04 19:36:43
300,900,"## Description

Basically, for commands that have incremental output, the output seems to be buffered until the commands finish, and then displayed all at once. E.g.: 

 - `VACUUM VERBOSE <table>;`
 - \<Command blocks for the duration of the vacuum\>
 - All output shows up at once.

With `psql`:

 - `VACUUM VERBOSE <table>;`
 - \<Each index is vacuumed\>
 - \<Dead rows removed\>
 - \<Toast rows vacuumed\>
 - ... etc...
 - \<Command finished\>

For some vacuum operations, having indication of the progress is really, really important. I have some tables that take more then a week to vacuum, and being able to validate that the vacuum is doing *something* is really nice.

## Env:

 - Ubuntu 16.04 LTS
 - ~> pgcli --version
    Version: 1.9.1
 - Python 3.4.3

I ran `pip3 install --upgrade pgcli` immediately before filing this issue.","Executing operations with info output during execution do not output.
This is a shortcoming of the python database driver (psycopg2) that we're using. It doesn't have a way to send partial results in an async fashion. 

So we have to wait till the entire operation has finished and only then we get access to the output.",2018-06-30 19:31:45,
301,899,"## Description
Catch the exception thrown when the keyring backend is missing.


I'm not entirely happy with this code. I feel like it is way too nested for my comfort. I welcome a critical eye to the code changes. 

","Guard against missing keyring backend.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=h1) Report
> Merging [#899](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d403189db7a216093473f9677da7608fc4e8bcb3?src=pr&el=desc) will **decrease** coverage by `0.25%`.
> The diff coverage is `25%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/899/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #899      +/-   ##
=========================================
- Coverage   85.15%   84.9%   -0.26%     
=========================================
  Files          22      22              
  Lines        2418    2424       +6     
=========================================
- Hits         2059    2058       -1     
- Misses        359     366       +7
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/899/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.14% <25%> (-0.84%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=footer). Last update [d403189...4c173fd](https://codecov.io/gh/dbcli/pgcli/pull/899?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-06-25 20:57:51,2018-06-28 19:12:46
302,898,"Hi

Today I've just tried to use `pgcli`. Expected to replace `psql` by `pgcli` command in terminal and connect to PG. I had `--user` option there and pgcli asked me to use `--username`. Probably it would be easy for transitions to use the same option name as well for user.

This change will leave `--username` as it is, and add `--user` as optional argument for compatibility.

- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","Add --user option like psql has as well.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=h1) Report
> Merging [#898](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/3fbe8e7cb3ca57fd8656890ea7855da62d2ea03e?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/898/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #898      +/-   ##
==========================================
- Coverage   85.27%   85.24%   -0.04%     
==========================================
  Files          22       22              
  Lines        2384     2385       +1     
==========================================
  Hits         2033     2033              
- Misses        351      352       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/898/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.42% <100%> (-0.12%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=footer). Last update [3fbe8e7...e6506ee](https://codecov.io/gh/dbcli/pgcli/pull/898?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good to me! If you don't mind, please add a link to your user profile into changelog (see examples in the bottom of changelog) and into the ""thanks"" part?
@j-bennet done it. thank you!
Perfect. Thank you for the PR! 🌟 ",2018-06-15 06:16:32,2018-06-15 21:36:18
303,897,"## Description
<!--- Describe your changes in detail. -->
Fix unbound local error when destructive_warning is false.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Hotfix/output unbound local error
Thank you for your contribution! This is really an improvement although I personally don't like the tri-state of destroy (True, False, None). Could you please explain how to reproduce the error your fixing?

Please don't get me wrong, again, your code really is an improvement over the current situation.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=h1) Report
> Merging [#897](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9d2f11164c6c3a30c882cc418c69b114cdef6f8a?src=pr&el=desc) will **decrease** coverage by `0.09%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/897/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #897     +/-   ##
=========================================
- Coverage   85.32%   85.23%   -0.1%     
=========================================
  Files          22       22             
  Lines        2385     2384      -1     
=========================================
- Hits         2035     2032      -3     
- Misses        350      352      +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/897/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.38% <100%> (-0.34%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=footer). Last update [9d2f111...beca282](https://codecov.io/gh/dbcli/pgcli/pull/897?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

The error is raised when `destructive_warning` is set to False in `pgclirc`.
`confirm_destructive_query` should only be called if the query is destructive, what do you think?
Right, thanks!",2018-06-09 18:07:20,2018-06-10 11:07:39
304,896,"
## Description
Fix unbound local error when destructive_warning is false

<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Hotfix/output unbound local error
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=h1) Report
> Merging [#896](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9d2f11164c6c3a30c882cc418c69b114cdef6f8a?src=pr&el=desc) will **decrease** coverage by `0.09%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/896/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #896     +/-   ##
=========================================
- Coverage   85.32%   85.23%   -0.1%     
=========================================
  Files          22       22             
  Lines        2385     2384      -1     
=========================================
- Hits         2035     2032      -3     
- Misses        350      352      +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/896/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.38% <100%> (-0.34%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=footer). Last update [9d2f111...924eea2](https://codecov.io/gh/dbcli/pgcli/pull/896?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Wrong GitHub account, reopen later.",2018-06-09 17:45:22,2018-06-09 18:06:23
305,895,"## Description
<!--- Describe your changes in detail. -->
Error `not enough values to unpack` is raise when statement is an empty string.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Hotfix/not enough values to unpack
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=h1) Report
> Merging [#895](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/4505332fe53ebea0197e30efe66418f0fc92adbe?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/895/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #895   +/-   ##
=======================================
  Coverage   85.32%   85.32%           
=======================================
  Files          22       22           
  Lines        2385     2385           
=======================================
  Hits         2035     2035           
  Misses        350      350
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/895/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.81% <0%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=footer). Last update [4505332...99338e3](https://codecov.io/gh/dbcli/pgcli/pull/895?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice catch - thank you!",2018-06-06 16:28:02,2018-06-06 19:21:08
306,894,"## Description
<!--- Describe your changes in detail. -->

This warning gets old.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.rst`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Silence psycopg2 warning
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=h1) Report
> Merging [#894](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/da2c8e542da6ad684e2678f92f06af9cf6c98d82?src=pr&el=desc) will **increase** coverage by `0.01%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/894/graphs/tree.svg?height=150&token=XdciEnQkL2&width=650&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #894      +/-   ##
==========================================
+ Coverage   85.22%   85.24%   +0.01%     
==========================================
  Files          22       22              
  Lines        2383     2385       +2     
==========================================
+ Hits         2031     2033       +2     
  Misses        352      352
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/894/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.42% <100%> (+0.06%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=footer). Last update [da2c8e5...b8a6dfd](https://codecov.io/gh/dbcli/pgcli/pull/894?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I like the commit message. It captures the sentiment so very well. ✋ ",2018-06-01 21:03:28,2018-06-01 21:12:23
307,893,"## Description
<!--- Describe your changes in detail. -->

Fix for #891 .

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Fix for ipython sql connection. Fixes #891.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=h1) Report
> Merging [#893](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/908a8ddacf330b593540fc2c8a56ceed0f07f128?src=pr&el=desc) will **decrease** coverage by `0.15%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/893/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #893      +/-   ##
==========================================
- Coverage   85.42%   85.27%   -0.16%     
==========================================
  Files          22       22              
  Lines        2381     2383       +2     
==========================================
- Hits         2034     2032       -2     
- Misses        347      351       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/magic.py](https://codecov.io/gh/dbcli/pgcli/pull/893/diff?src=pr&el=tree#diff-cGdjbGkvbWFnaWMucHk=) | `0% <0%> (ø)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/893/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.5% <0%> (-0.31%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=footer). Last update [908a8dd...69364ab](https://codecov.io/gh/dbcli/pgcli/pull/893?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Hmm this certainly fixes something on my system (without this patch pgcli doesn't start) but when I quit pgcli I get the following exception:
```
---------------------------------------------------------------------------
EOFError                                  Traceback (most recent call last)
<ipython-input-2-1f248a2d5e84> in <module>()
----> 1 get_ipython().run_line_magic('pgcli', 'postgres://postgres:mysecretpassword@172.17.0.3:5432/')

/usr/lib/python3.6/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth)
   2129                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals
   2130             with self.builtin_trap:
-> 2131                 result = fn(*args,**kwargs)
   2132             return result
   2133

~/git/pgcli/pgcli/magic.py in pgcli_line_magic(line)
     47 
     48     try:
---> 49         pgcli.run_cli()
     50     except SystemExit:
     51         pass

~/git/pgcli/pgcli/main.py in run_cli(self)
    588         try:
    589             while True:
--> 590                 document = self.cli.run()
    591 
    592                 try:
/usr/lib/python3.6/site-packages/prompt_toolkit/interface.py in run(self, reset_current_buffer, pre_run)
    430         
    431         # Return result.
--> 432         return self.return_value()
    433     
    434     try:

/usr/lib/python3.6/site-packages/prompt_toolkit/interface.py in return_value(self)
    818         # exceptions.
    819         if self._return_value:
--> 820             return self._return_value()
    821
    822     @property

/usr/lib/python3.6/site-packages/prompt_toolkit/interface.py in eof_error()
    561         if on_exit == AbortAction.RAISE_EXCEPTION:
    562             def eof_error():
--> 563                 raise EOFError()
    564             self._set_return_callable(eof_error)
    565

EOFError:
```

Do you also get this exception?
Don't exit with `Ctrl + D`, exit with `\q`. I think this exception was always there. It's probably fixable, but I don't want to mix two problems in one PR.
:+1:",2018-06-01 15:24:42,2018-06-01 18:15:52
308,892,"# Pgcli bash completion
Bash completion script for pgcli.
## Description
It allows to <tab> complete database names, users and hosts, plus showing the other available options when calling pgcli from the terminal prompt.
In order to work it steals a couple of functions from psql (postgres CLI client installed by default). 
It is intended to be packaged with the debian package and to be copied on /usr/share/bash-completion/completions/pgcli (filename changes for consistency) upon installation of the package.
Please make the debian package mantainer (Lennart Weller lhw@ring0.de as per `apt-cache show`) aware of it and include it in the relevant section of the installation scripts/package.
I hope it is useful.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","pgcli bash completion script
@antoniotrkdz Thank you for the PR! Sorry it's been forever. Would you be able to rebase this on top of `master`, and provide some instructions about how to test it?
Hi
this is not a part of the pgcli code itself, but a script for unix systems to get useful pgcli command auto completion in the shell.
So if the pgcli command is called from the bash command line, when you press `tab tab` it autocompletes the names of the databases that are present on the local machine.
It has some context too so it can complete the database names and the user names based on the command option.

I don't know if or how it can be tested with your CI... 

However, you can test it by simply dropping the file into
`/usr/share/bash-completion/completions/pgcli`
(only if you are using bash)
and try to press `tab tab` when invoking pgcli from the shell to operate on local databases.
@antoniotrkdz I'm getting an error trying to use your script on macOS with this version of bash:

```
GNU bash, version 5.0.11(1)-release (x86_64-apple-darwin18.6.0)
```

When a type `pgcli <TAB>` I see:

```
pgcli -bash: _init_completion: command not found
```

Any suggestions?
Applying a patch similar to this one fixed it for me on macOS: https://gist.github.com/eparis/fd17b8fb4eb58efc2c12

Thanks for the script!
I think this is very useful! Wouldn't it be better to use click for this purpose?
https://click.palletsprojects.com/en/7.x/bashcomplete/
Should have merged this long ago. Thank you @ antoniotrkdz.",2018-06-01 14:05:13,2020-04-03 22:15:54
309,891,"## Description
I make a clean new virtualenv with Python 3.6.4
Then I run:
```
$ pip install ipython ipython-sql pgcli
```
Then i enter ipython shell:
```
ipython
```
In the ipython REPL I attempt to connect to a DB using pgcli (the syntax is valid):
```
%load_ext pgcli.magic
%pgcli postgres://someone@localhost:5432/world
```
Instead of connecting as expected, the second line throws an error:

```
.../pgcli/pgcli/magic.py in pgcli_line_magic(line)
     21     _logger.debug('pgcli magic called: %r', line)
     22     parsed = sql.parse.parse(line, {})
---> 23     conn = sql.connection.Connection.get(parsed['connection'])
     24 
     25     try:

AttributeError: type object 'Connection' has no attribute 'get'
```

I am guessing that this is using the ipython-sql ""Connection"" class? (https://github.com/catherinedevlin/ipython-sql/blob/master/src/sql/connection.py)

Sure enough, in that file, I cannot see any ""get"" attribute on the Connection class. Can you please advise? I would love to get some pgcli going in my ipython shell :)

## Your environment
Ubuntu 16.04 (kernel 4.13.0-43-generic)
pgcli version is 1.9.1
<!-- This gives us some more context to work with. -->

Output of pip freeze:
```
backcall==0.1.0
cli-helpers==1.0.2
click==6.7
configobj==5.0.6
decorator==4.3.0
humanize==0.5.1
ipdb==0.11
ipython==6.4.0
ipython-genutils==0.2.0
ipython-sql==0.3.9
jedi==0.12.0
parso==0.2.1
pexpect==4.6.0
pgcli==1.9.1
pgspecial==1.11.0
pickleshare==0.7.4
prettytable==0.7.2
prompt-toolkit==1.0.15
psycopg2==2.7.4
ptyprocess==0.5.2
Pygments==2.2.0
setproctitle==1.1.10
simplegeneric==0.8.1
six==1.11.0
SQLAlchemy==1.2.8
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
traitlets==4.3.2
wcwidth==0.1.7
```","ipython magic AttributeError in sql.connection.Connection.get
Yes! Thanks @j-bennet. This fixes it for me.",2018-05-30 14:34:59,2018-06-01 18:15:54
310,890,"## Description
Bump the version of pgspecial to 1.11.0


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Bump the version of pgspecial to 1.11.0
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=h1) Report
> Merging [#890](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a274c731fcd6482099d77c9ed4ca26995ebb67d1?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/890/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #890      +/-   ##
=========================================
- Coverage   85.49%   85.4%   -0.09%     
=========================================
  Files          22      22              
  Lines        2378    2378              
=========================================
- Hits         2033    2031       -2     
- Misses        345     347       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/890/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.7% <0%> (-0.31%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=footer). Last update [a274c73...5427ad9](https://codecov.io/gh/dbcli/pgcli/pull/890?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:rooster: ",2018-05-26 10:50:03,2018-05-26 19:49:48
311,889,"## Description
refactor destructive warning in behave tests


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Refactor destructive warning in behave tests
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=h1) Report
> Merging [#889](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a274c731fcd6482099d77c9ed4ca26995ebb67d1?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/889/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #889      +/-   ##
=========================================
- Coverage   85.49%   85.4%   -0.09%     
=========================================
  Files          22      22              
  Lines        2378    2378              
=========================================
- Hits         2033    2031       -2     
- Misses        345     347       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/889/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.7% <0%> (-0.31%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=footer). Last update [a274c73...95fda82](https://codecov.io/gh/dbcli/pgcli/pull/889?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Much nicer solution. :+1: ",2018-05-26 10:16:01,2018-05-26 19:48:22
312,888,"## Description
The keyring code seems to fail if you have gnome-keyring installed but aren't running the gnome-keyring-daemon.

Stack trace:
```
2018-05-26 11:22:50,043 (28714/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""pgcli/main.py"", line 436, in connect
    keyring.set_password(\'pgcli\', key, passwd)
  File ""/lib/python3.6/site-packages/keyring/core.py"", line 47, in set_password
    _keyring_backend.set_password(service_name, username, password)
  File ""/lib/python3.6/site-packages/keyring/backends/SecretService.py"", line 80, in set_password
    collection = self.get_preferred_collection()
  File ""/lib/python3.6/site-packages/keyring/backends/SecretService.py"", line 61, in get_preferred_collection
    raise InitError(""Failed to unlock the collection!"")
keyring.errors.InitError: Failed to unlock the collection!
```

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","make keyring optional
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=h1) Report
> Merging [#888](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a274c731fcd6482099d77c9ed4ca26995ebb67d1?src=pr&el=desc) will **decrease** coverage by `0.19%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/888/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=tree)

```diff
@@           Coverage Diff            @@
##           master    #888     +/-   ##
========================================
- Coverage   85.49%   85.3%   -0.2%     
========================================
  Files          22      22             
  Lines        2378    2381      +3     
========================================
- Hits         2033    2031      -2     
- Misses        345     350      +5
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/888/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.35% <0%> (-0.66%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=footer). Last update [a274c73...2ce2a87](https://codecov.io/gh/dbcli/pgcli/pull/888?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-05-26 09:31:34,2018-05-29 08:10:29
313,887,"
When I use `psql`, I can type `\dF` to get a list of text search configurations:

```
> \dF
               List of text search configurations
   Schema   |    Name    |              Description
------------+------------+---------------------------------------
 pg_catalog | danish     | configuration for danish language
 pg_catalog | dutch      | configuration for dutch language
 pg_catalog | english    | configuration for english language
 pg_catalog | finnish    | configuration for finnish language
 pg_catalog | french     | configuration for french language
 pg_catalog | german     | configuration for german language
...
```

However, doing the same in `pgcli` gives an error:

```
> \dF
syntax error at or near ""\""
LINE 1: \dF
```
","\dF does not work to list text search configurations
Yeah, we don't have full support for all the backslash commands. Looks like \dF is not yet implemented in pgspecial (the library used by pgcli to implement the backslash commands).

If you are interested in contributing, we have a pretty thorough documentation on how to get started.

https://github.com/dbcli/pgspecial/blob/master/DEVELOP.rst#adding-postgresql-special-meta-commands

We're also happy to help you guide through the process if you need it. ",2018-05-25 12:03:13,2018-12-12 16:24:29
314,886,"## Description

Supports \ev (edit view) and \ef (edit function) commands, using the same SQL that psql uses.

To work properly, depends on a pull request to `pg_special`: https://github.com/dbcli/pgspecial/pull/63; however, nothing will break without that pull request (these commands simply won't work).

Courtesy PyCon 2018 sprints.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","\ev and \ef commands
I have tested this PR in Python 3.6 and it works beautifully. But there is a syntax error when I try to use it in Python 2.7. 

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=h1) Report
> Merging [#886](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/aee99b9a40e17b07a252e388aff7a016691a043c?src=pr&el=desc) will **decrease** coverage by `0.25%`.
> The diff coverage is `75.67%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/886/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #886      +/-   ##
==========================================
- Coverage   85.32%   85.07%   -0.26%     
==========================================
  Files          22       22              
  Lines        2385     2418      +33     
==========================================
+ Hits         2035     2057      +22     
- Misses        350      361      +11
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/886/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.68% <46.15%> (-1.05%)` | :arrow_down: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/886/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.6% <91.66%> (+0.79%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=footer). Last update [aee99b9...10f190a](https://codecov.io/gh/dbcli/pgcli/pull/886?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

The PR is rebased, and things seem to work great. I'm going to merge it.

@catherinedevlin Nice work - thanks a lot!

❤️ 
How can I quit the editor opened through \ef ... without applying the changes? It openes VI for me, then I :quit and the function is displayed in the prompt waiting for me to hit Enter. How can I discard the query? Ctrl+C triggers AssertionError. Bug?
@mkcinu Sounds like a bug, yes - please open an issue so we can track it.",2018-05-21 02:39:54,2018-06-18 01:55:20
315,885,"## Description
This fixes the failing behave tests in PR #884.


","Add confirmation prompt to destructive commands in behave tests.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/885?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@644ad1a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/885/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/885?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #885   +/-   ##
=========================================
  Coverage          ?   85.23%           
=========================================
  Files             ?       22           
  Lines             ?     2378           
  Branches          ?        0           
=========================================
  Hits              ?     2027           
  Misses            ?      351           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/885?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/885?src=pr&el=footer). Last update [644ad1a...3c26ddf](https://codecov.io/gh/dbcli/pgcli/pull/885?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-05-19 04:31:44,2018-05-19 05:20:56
316,884,"## Description
* Modified main.py to confirm with the user if they want to run a destructive warning. This includes adding logic to the click config for destructive config


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X ] I've added this contribution to the `changelog.rst`.
- [X ] I've added my name to the `AUTHORS` file (or it's already there).
","Porting in Destructive Warning
I have managed to fix the failing tests locally. But I can't figure out how to amend your PR with my commits. So I'm going to merge this PR and then fix the failing tests with a subsequent PR. 

I appreciate you taking the time to add this feature to pgcli. I hope you'll continue to contribute. :)

:ice_cream: 
Of course, I apologise for not being able to get to the failing tests.
Tonight was our python user group meeting, and I was  the host. It has been
a busy week.

On Sat, May 19, 2018, 12:30 AM Amjith Ramanujam <notifications@github.com>
wrote:

> Merged #884 <https://github.com/dbcli/pgcli/pull/884>.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/pull/884#event-1635413212>, or mute the
> thread
> <https://github.com/notifications/unsubscribe-auth/ABeWKoyagDChLkAHKJZAELvaJp8oNpN-ks5tz6AAgaJpZM4UCyjt>
> .
>
",2018-05-17 10:15:35,2018-05-19 04:30:53
317,883,"## Description
https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/git-hyper-blame.html

This will be useful when we use hyper-blame to ignore certain revs (such as running `black` on the entire repo). ","Add git-blame-ignore revs in anticipation of hyper-blame.
PR is failing because of keyring 12.2.1 (12.2.0 works fine).
The release is young (2 days), I'll need more time to find out what's going on there.
Found it!
@amjith just rebase your branch, the fix is already in the master (we need `keyrings-alt` for travis)
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/883?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@8e12ea5`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/883/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/883?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #883   +/-   ##
=========================================
  Coverage          ?   85.38%           
=========================================
  Files             ?       20           
  Lines             ?     2333           
  Branches          ?        0           
=========================================
  Hits              ?     1992           
  Misses            ?      341           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/883?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/883?src=pr&el=footer). Last update [8e12ea5...8649f37](https://codecov.io/gh/dbcli/pgcli/pull/883?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-05-15 23:05:07,2018-05-17 13:20:41
318,882,"## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.rst`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Fix the commands for fixing lint errors.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/882?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@0ad1a9a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/882/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/882?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #882   +/-   ##
=========================================
  Coverage          ?   85.46%           
=========================================
  Files             ?       20           
  Lines             ?     2325           
  Branches          ?        0           
=========================================
  Hits              ?     1987           
  Misses            ?      338           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/882?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/882?src=pr&el=footer). Last update [0ad1a9a...197c11f](https://codecov.io/gh/dbcli/pgcli/pull/882?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Argh!",2018-05-15 18:26:12,2018-05-15 18:51:35
319,881,"## Description
Fixes #807.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Restrict the offer to reconnect.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/881?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@f8757c6`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/881/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/881?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #881   +/-   ##
=========================================
  Coverage          ?   85.54%           
=========================================
  Files             ?       20           
  Lines             ?     2325           
  Branches          ?        0           
=========================================
  Hits              ?     1989           
  Misses            ?      336           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/881?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/881/diff?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.81% <ø> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/881?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/881?src=pr&el=footer). Last update [f8757c6...bd1da49](https://codecov.io/gh/dbcli/pgcli/pull/881?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-05-15 14:10:06,2018-05-15 15:58:22
320,880,"## Description
Refactor the command execution pipeline to flag MetaQuery with is_special. If this flag is True, the command is a special command, otherwise it's plain SQL.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","Feature/get last sql query
@RishiRamraj You can fix the lint errors using pep8radius. 

`pep8radius master --docformatter --in-place`

That command will fix the style issues in the current diff. 

You will have to `pip install pep8radius`.
I'm going to merge this and fix the pep8 violations.",2018-05-15 05:38:04,2018-05-19 04:48:43
321,879,"## Description
Fix lint errors.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
",Fix lint complaints.,2018-05-14 21:32:48,2018-05-14 21:33:06
322,878,"## Description
Adds completion for table formats with \T.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add completion for table formats
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/878?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@7d0f866`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `62.5%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/878/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/878?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #878   +/-   ##
=========================================
  Coverage          ?   85.41%           
=========================================
  Files             ?       20           
  Lines             ?     2325           
  Branches          ?        0           
=========================================
  Hits              ?     1986           
  Misses            ?      339           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/878?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/878/diff?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.15% <60%> (ø)` | |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/878/diff?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.33% <66.66%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/878?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/878?src=pr&el=footer). Last update [7d0f866...9014d96](https://codecov.io/gh/dbcli/pgcli/pull/878?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Very nice! :champagne: ",2018-05-14 20:56:06,2018-05-14 21:03:09
323,877,"## Description

Enclosed the code to run the text editor in a try/finally, and moved the restoration of saved pre-run callables to the ""finally"", so that throwing an error won't result in losing the saved callables

## Checklist

- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Keep callables
Nice one. Thanks! 🍫 
Your tests are failing on pep8 checker. It's no big deal. Run this:

`pep8radius master --docformatter -i`

to fix the problem.

(`pep8radius` needs to be pip-installed).
I will send a new PR to fix the lint errors. Thank you for fixing the bug, Catherine. :icecream: ",2018-05-14 20:33:24,2018-05-14 21:32:12
324,876,"## Description
Disable pager when using watch (#850).


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Disable pager when using \watch
It's failing on lint checks. I'll fix the lint check. ",2018-05-14 18:22:49,2018-05-14 18:55:26
325,875,"## Description
Moves quit command to pgspecial.  This allows completion to work.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.rst`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add quit commands to completion
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=h1) Report
> Merging [#875](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/eabe9ac9001589b7936cdc2781786f581f77f7b3?src=pr&el=desc) will **decrease** coverage by `0.14%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/875/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #875      +/-   ##
=========================================
- Coverage   85.65%   85.5%   -0.15%     
=========================================
  Files          20      20              
  Lines        2314    2318       +4     
=========================================
  Hits         1982    1982              
- Misses        332     336       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/875/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.21% <66.66%> (-0.5%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=footer). Last update [eabe9ac...dd9432d](https://codecov.io/gh/dbcli/pgcli/pull/875?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks nicer this way. Thanks! 👍 ",2018-05-14 16:24:51,2018-05-14 17:04:56
326,874,"## Description
Changelog is `changelog.rst`, not `changelog.md`, this PR edits the GitHub PR template to use the correct filename.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Switch PR template changelog ext from .md to .rst
Thank you! :rocket: 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=h1) Report
> Merging [#874](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f36635f4dc1764fd3b29919e925b7681ddc28ffa?src=pr&el=desc) will **increase** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/874/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #874      +/-   ##
==========================================
+ Coverage   85.65%   85.73%   +0.08%     
==========================================
  Files          20       20              
  Lines        2314     2314              
==========================================
+ Hits         1982     1984       +2     
+ Misses        332      330       -2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/874/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `78.02% <0%> (+0.31%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=footer). Last update [f36635f...3e6f793](https://codecov.io/gh/dbcli/pgcli/pull/874?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-05-14 15:49:04,2018-05-14 15:51:08
327,873,"## Description
This PR adds support for remembering prompted passwords using [`keyring`](https://github.com/jaraco/keyring).

TODO:
  - [ ] Behave test
  - [ ] Add a way to disable using keyring in case a suitable backend isn't configurable
      - Via config file so it doesn't need to be specified each time it's invoked (document in README), CLI option/env var documents nicely but is cumbersome to specify on each usage

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Remember prompted passwords using keyring
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/873?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@f36635f`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `75%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/873/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/873?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #873   +/-   ##
=========================================
  Coverage          ?   85.51%           
=========================================
  Files             ?       20           
  Lines             ?     2326           
  Branches          ?        0           
=========================================
  Hits              ?     1989           
  Misses            ?      337           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/873?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/873/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.34% <75%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/873?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/873?src=pr&el=footer). Last update [f36635f...571bb5c](https://codecov.io/gh/dbcli/pgcli/pull/873?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@cfournie Would you prefer if I merged this now or would you prefer to add the behave tests to the PR before I merge it? 
> Would you prefer if I merged this now

Might as well merge this now, behave tests might be a bit far off.
Thank you for this nice feature. 

:trumpet: ",2018-05-14 15:34:13,2018-05-17 00:49:32
328,872,"## Description
There's already a code comment illustrating how you could use SSL with PostgreSQL. This PR:
  - Alters that comment to replace `ssl-cert` ([has an extra dash not found in PostgreSQL 1.0 settings](https://www.postgresql.org/docs/10/static/libpq-connect.html#LIBPQ-PARAMKEYWORDS)) with `sslrootcert` (which could be used to [connect securely to Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/connecting-ssl-support.html))
  - Documents how to use extra options (adds SSL to the example)

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Encourage users to use SSL
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=h1) Report
> Merging [#872](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/2f344ca6d27312bc47c2caff35a273590fb7b2ac?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/872/graphs/tree.svg?height=150&token=XdciEnQkL2&width=650&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #872      +/-   ##
==========================================
- Coverage   85.73%   85.65%   -0.09%     
==========================================
  Files          20       20              
  Lines        2314     2314              
==========================================
- Hits         1984     1982       -2     
- Misses        330      332       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/872/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.7% <ø> (-0.32%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=footer). Last update [2f344ca...b2a3a4b](https://codecov.io/gh/dbcli/pgcli/pull/872?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Awesome!

Our first PR from the sprint. Yay! 

:ice_cream: ",2018-05-14 14:06:58,2018-05-14 14:11:16
329,871,"`\pset pager` has three possible values: ""always"", ""on"", and ""off"".
pgcli previously treated all non-""off"" values as ""always"". This change
implements the expected behavior, which is to use the pager when the
output is larger than the terminal height (See \pset pager in
https://www.postgresql.org/docs/9.2/static/app-psql.html). Pgcli adds
to this and also uses the pager when the output is wider than the
terminal width.

Fixes #813

## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Respect \pset pager on expected behavior
I realize a behave test is probably in order, but I'm not terribly familiar with behave. Could someone point me in the right direction?

EDIT: tests are also failing, I'm guessing because the pager is being used (or not used) in unexpected places. Is there an easy fix for this? Should the rest of the tests just be run with `\pset always` instead of `\pset on`?
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=h1) Report
> Merging [#871](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/381869b72712310c05c5643dc89b7fe656e99255?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/871/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #871      +/-   ##
==========================================
+ Coverage   85.18%   85.21%   +0.03%     
==========================================
  Files          22       22              
  Lines        2443     2449       +6     
==========================================
+ Hits         2081     2087       +6     
  Misses        362      362
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/871/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.48% <100%> (+0.19%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=footer). Last update [381869b...172c9cd](https://codecov.io/gh/dbcli/pgcli/pull/871?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Ah, very interesting. Your test is a special ❄️ kind of test. In our other behave tests, we use this fake pager:

https://github.com/dbcli/pgcli/blob/master/tests/features/wrappager.py

This is because we 1) want to see full output to check it against expected, i.e. no paging and 2) want to add ""boundary"" characters on top and bottom of the output we are testing, to easily find it. This fake pager is set here:

https://github.com/dbcli/pgcli/blob/2f344ca6d27312bc47c2caff35a273590fb7b2ac/tests/features/environment.py#L69-L72

I pushed a change into your fork to work around the fake pager and fix the tests. It may be enough if you add a unit test like one of those here that test `PGCli` object:

https://github.com/dbcli/pgcli/blob/2f344ca6d27312bc47c2caff35a273590fb7b2ac/tests/test_main.py#L170-L178)

because testing paging with `behave` may turn out to be a hassle.
Huh, interesting. I'll take a look at adding that test.

How hard would it be to change the setup for the behave tests so they set `pset pager always` or `off`? That would avoid the need for the special case.
Alright, I've got a few tests written. There's a fair amount of repetition; I'm sure the repeated setup could be factored into a fixture somehow, but I'm not super familiar with pytest, so I'm very much open to suggestions.
It looks like tests are failing because `pytest.param` isn't available in the version of `pytest` that's being installed for Python 3.4. I could remove the uses of it, but it'd result in less clear test IDs. Before I go and do that, do you know if there's a different workaround?
We may want to pin pytest for the time being. Python 3.4 did not reach end-of-life yet.
Sorry for all the noise, I'll clean up the commit history once tests pass.
No problem! Unfortunately making changes to pager behavior is quite disruptive for all the behave tests.
I missed this question from you:

> How hard would it be to change the setup for the behave tests so they set pset pager always or off?

For tests, we use a temp dir as config location (see this PR: https://github.com/dbcli/pgcli/pull/796/files to figure out how it works). There's nothing in that dir, which means a default config will be used.

What you want to do is write a config file into that dir with the values you want. But there are drawbacks:

* tests run with default config because we want to make sure things work with default config.
* writing and then deleting your own config file for behave tests may be more complex than what you're doing.

Fair enough! Seems like this is the best approach then.
Nevermind, there's an easier way. Do this in `before_feature` handler:

```
context.cli.sendline('\pset pager always')
wrappers.wait_prompt(context)
```

If you do that, probably best to remove my hacky change here:

https://github.com/dbcli/pgcli/pull/871/commits/2d70c0262e73bf477ba7a72e2929e39ce595dc32
@j-bennet are you able to restart the Travis build? It looks like there's a flaky behave test failure and it appears that I'm not allowed to kick it off myself:

```
Closed connection: port=5432 host=localhost dbname=pgcli_behave_tests_2_7_14 user=postgres.
Created connection: port=5432 host=localhost dbname=postgres user=postgres.
HOOK-ERROR in after_all: OperationalError: database ""pgcli_behave_tests_2_7_14"" is being accessed by other users
DETAIL:  There is 1 other session using the database.
ABORTED: By user.
Failing scenarios:
  features/iocommands.feature:10  tee output from query
```
> Nevermind, there's an easier way. Do this in `before_feature` handler:

`before_feature` or `before_all`?
I think `before_all` will not give you `context.cli` object yet. Try it. If object is already there, then yes. Otherwise, `before_feature` looks like the next best thing.
@j-bennet it appears that `before_feature` won't give me `context.cli` either, and there's also a database timeout failure. Thoughts?
I'll take a look tonight.
@maxrothman So, I'm pretty sure there's a way to fix the problem, but it may not be as easy as I thought. Unfortunately, I'll be away for two weeks and have no time to help. Perhaps @meeuw or @tsroten or @amjith could take a look.

I did find the right place for `pset pager always`. It's the `run_cli` method in `basic_commands.py`. That's where we create the cli. Things still break though, even with setting pager to `always`.
Would it be better to leave the hack in for now and file a ticket to fix it
later?

On Wed, May 16, 2018 at 6:53 PM Irina Truong <notifications@github.com>
wrote:

> @maxrothman <https://github.com/maxrothman> So, I'm pretty sure there's a
> way to fix the problem, but it may not be as easy as I thought.
> Unfortunately, I'll be away for two weeks and have no time to help. Perhaps
> @meeuw <https://github.com/meeuw> or @tsroten <https://github.com/tsroten>
> or @amjith <https://github.com/amjith> could take a look.
>
> I did find the right place for pset pager always. It's the run_cli method
> in basic_commands.py. That's where we create the cli. Things still break
> though, even with setting pager to always.
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/pull/871#issuecomment-389691019>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ACfH7hWMBv8manknxbJnQJU35xal28aaks5tzK3agaJpZM4T8PVD>
> .
>

Catching up on this conversation. 

The changes look straightforward. I'm having a hard time figuring out why the tests are failing. Let me pull your branch locally and try it out. 


I see one issue with this approach. 

Right now you're checking just the height, not the width. If you have a really wide table with just a single row, we use the pager to display the output which lets the user scroll left/right using the arrow keys. 

But with the new change that you've done the default behavior is changed to not use a pager if the width is too large to fit in the window.
Sorry for the radio silence, I hit a busy patch. I'll try to pick this up again in a week or so.
I'm back! That was a long ""week or so"".

I've rebased against latest master, updated `AUTHORS` and the changelog appropriately, and addressed @amjith's concern about paging long horizontal outputs. A bunch of behave tests are failing, but I don't really understand why.
I'll try to take a look at those tests in the next few days.
Ping, any progress on this?
I still can't figure out the problem. I'll have some time tomorrow to look again.
It's odd that so many tests stopped working, but I guess that's what you get when releases / builds don't happen very often. 🤷‍♀️  I got tests to pass for this PR. I have a minor comment as to sharing the color code trimming regexp. Other than that, this should be fine to merge.
I'll take a look at that this weekend. In the meantime, I'm planning to squashing most (all?) of my commits down before merging, do you want to stick the new ones that make tests pass on master and have me rebase on them, or not a big deal?
That might be better. I'll cherry-pick those things into a separate branch and remove from yours.
Moved my fixes in https://github.com/dbcli/pgcli/pull/941 and merged into master.
Looks like you missed b30aab0?

EDIT: oh, I see, it just reformats new code. Never mind!
@maxrothman Yeah, that was pep8 fixer for your new code. If you like, you can drop my commit and run pep8 fixer yourself on this branch:
`pep8radius master --docformatter -i`
You'll need to `pip install -r requirements-dev` for that.
Apparently the regex I added is slightly more accurate than the one in the tests (or at least, the regex in the tests failed the test I wrote), so I used it instead of the existing one.
Looks like [this behave test](https://travis-ci.org/dbcli/pgcli/jobs/432154279#L865) is failing on Python 2.7, but it seems unrelated to my change. Mind taking a look?
The `tee` test fails intermittently. Fixed by restarting the build.
Done! Would you like me to squash, or do you want to control that process?
Yes, go ahead and squash it.
Looks like the same test failed again. Mind kicking it?
Merged! Nice work - thank you for sticking with it!

🍒 
Thanks for sticking with me! Any idea what the ETA for release will be?
I'll release within the next few days.
Thanks! Looking forward to it.",2018-05-12 02:10:27,2018-09-23 21:34:59
330,870,"can't create a connection with the recommend command
pgcli postgres://dbabc:pwd@8.8.2.12:5432/postgres
the error is:
authentication method 10 not supported

pgcli -h 8.8.2.12 -p 5432
authentication method 12 not supported
","can't create a connection with the recommend command
Hi @prolen 
Which version of pgcli are you using?
Can you provide the output of `pip list`?
This seems to have been an issue in `psycopg2` built with older `libpq` 9 for PostgreSQL 10:

https://github.com/psycopg/psycopg2/issues/601

The issue is now fixed in psycopg2, so I'm going to close it here, but feel free to reopen if you're still having problems.",2018-05-08 06:33:10,2018-07-24 04:54:58
331,869,"## Description
Adding `application_name` to help identify `pgcli` connections to postgres.

Fix #868

## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add application name
There might be a better way, since I'm adding this a few times. I'm not sure we need it on simple `connect()` calls, so I'm gonna run some more tests, and update the PR with my results.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=h1) Report
> Merging [#869](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f81243eb1c86598b020169e01a0738c68a4c74e0?src=pr&el=desc) will **decrease** coverage by `0.12%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/869/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #869      +/-   ##
==========================================
- Coverage   85.78%   85.65%   -0.13%     
==========================================
  Files          20       20              
  Lines        2314     2314              
==========================================
- Hits         1985     1982       -3     
- Misses        329      332       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/869/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.7% <ø> (-0.48%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=footer). Last update [f81243e...21bc100](https://codecov.io/gh/dbcli/pgcli/pull/869?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

In the end I only kept this parameter in case we are connecting to a specified host, as other cases are working fine without it (hence are displaying the `application_name` correctly)
I'm trying to write a test to run `SELECT * FROM pg_stat_activity WHERE application_name = 'pgcli'` but this needs to be run by `pgcli/main.py` and not `tests/utils.py`.
@meeuw A behave test can do that.
nice work @fpietka!
Well done, thank you guys! 🎉 ",2018-04-26 12:05:55,2018-04-28 05:31:32
332,868,"## Feature request
Hi, would it be possible to add `application_name=""pgcli""` connection parameter to all connections, for the sake of Postgres 9.x or 10.x? See https://www.postgresql.org/docs/9.0/static/runtime-config-logging.html#GUC-APPLICATION-NAME

With this, database administrators will be able to see ""pgcli"" connections explicitly in the list of connections for debugging reasons (ie. `SELECT * FROM pg_stat_activity`).

FYI, `psql` and many more UI clients add the application_name by default too.

Thanks for any comments! And thanks for this project, I use it every day 👍 ",Add application_name parameter for Postgres 9.x & 10.x connections,2018-04-25 19:14:47,2018-04-28 05:31:32
333,867,"## Description

The package `psycopg2` is being renamed to `psycopg2-binary` and currently throws the following warning:

```
>>> import psycopg2
/usr/local/lib/python3.5/dist-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use ""pip install psycopg2-binary"" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.
```

See more information at http://initd.org/psycopg/docs/install.html#binary-install-from-pypi

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Rename psycopg2 to psycopg2-binary
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=h1) Report
> Merging [#867](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f81243eb1c86598b020169e01a0738c68a4c74e0?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/867/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #867      +/-   ##
==========================================
- Coverage   85.78%   85.73%   -0.05%     
==========================================
  Files          20       20              
  Lines        2314     2314              
==========================================
- Hits         1985     1984       -1     
- Misses        329      330       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/867/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `78.02% <0%> (-0.16%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=footer). Last update [f81243e...19d5657](https://codecov.io/gh/dbcli/pgcli/pull/867?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

We already did this, for a brief period of time, in https://github.com/dbcli/pgcli/pull/846, and then reverted back in https://github.com/dbcli/pgcli/pull/859, because of https://github.com/dbcli/pgcli/issues/849.

As detailed in https://github.com/dbcli/pgcli/issues/849, there's a subset of users that can't run with psycopg2-binary installation. So we're currently not forcing it. This means that until 2.8 (first source-only version) is released, psycopg2 will spit out a warning. It's annoying, but at least it's not breaking things. Once 2.8 is released, the warning should go away. As far as I understand, users that wish to use psycopg2-binary will still be able to install that over psycopg2. If my understanding is not correct, we'll have to figure out a way for users to select binary vs source installation after 2.8 is out.

Thank you for the PR!
gotcha, thanks for the quick reply",2018-04-24 20:12:39,2018-04-24 20:43:01
334,866,"## Description
Mark tests requiring a running database server as dbtest


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Mark tests requiring a running database server as dbtest
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=h1) Report
> Merging [#866](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/b3088926068c02b3154e388af816dc65d365ef22?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/866/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #866      +/-   ##
==========================================
- Coverage   85.73%   85.65%   -0.09%     
==========================================
  Files          20       20              
  Lines        2314     2314              
==========================================
- Hits         1984     1982       -2     
- Misses        330      332       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/866/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.7% <0%> (-0.32%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=footer). Last update [b308892...eabf0b1](https://codecov.io/gh/dbcli/pgcli/pull/866?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Funny enough, both of those tests are for output formatting, so we could have mocked execution and not gone to database. But 👍 .",2018-04-05 19:15:50,2018-04-05 21:26:31
335,865,"## Description
I want to save a simple query that uses a LIKE operator. I can save it. But at call it returns ""Bad arguments"". I assume is trying to interpret the % on the query as parameters. But that is not what I want.
```
user@192.168.1.3:mydb> \ns a SELECT * from events WHERE description LIKE '%http%';
Time: 0.003s
user@192.168.1.3:mydb> \n a
Bad arguments
```

## Your environment
- Installed through pip
- Python 2.7
- Gentoo
- pgcli==1.9.0","cannot save query with LIKE operator
Try this:

`\ns a SELECT * from events WHERE description LIKE CONCAT('%%', 'http', '%%');`

NOTE: The double percent is used to escaping 
This issue has been fixed a while back. Can you try upgrading pgcli? 

```
pip install -U pgcli
```",2018-04-03 13:20:10,2018-11-19 06:24:14
336,864,Changelog update for 1.9.1 (a very small release).,"Changelog update to release 1.9.1.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/864?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@0feffcb`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/864/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/864?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #864   +/-   ##
=========================================
  Coverage          ?   85.65%           
=========================================
  Files             ?       20           
  Lines             ?     2314           
  Branches          ?        0           
=========================================
  Hits              ?     1982           
  Misses            ?      332           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/864?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/864?src=pr&el=footer). Last update [0feffcb...e814835](https://codecov.io/gh/dbcli/pgcli/pull/864?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-03-31 20:26:36,2018-04-04 15:56:27
337,863,"Tests started failing in travis intermittently because of shared user access. This is not supposed to happen, since we run tests for each python version  on a separate database. We need to look into this.

```
Closed connection: port=5432 host=localhost dbname=pgcli_behave_tests_2_7_14 user=postgres.
Created connection: port=5432 host=localhost dbname=postgres user=postgres.
HOOK-ERROR in after_all: OperationalError: database ""pgcli_behave_tests_2_7_14"" is being accessed by other users
DETAIL:  There is 1 other session using the database.
```
","Tests fail in travis because of database being accessed by other users
THis hasn't happened in a while. Closing.",2018-03-31 20:19:15,2019-05-05 11:54:39
338,862,"## Description
I wanted to run the behave tests, and had to go read `environment.py` to figure out what needed to go in the .ini file.  This patch gives an example in DEVELOP.rst.

(removing the checklist, as this is a minor change)","Give example behave.ini
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=h1) Report
> Merging [#862](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/6fe2c6a06171e6fdc54dfe71e4d649c53c1f0200?src=pr&el=desc) will **increase** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/862/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #862      +/-   ##
==========================================
+ Coverage   85.58%   85.67%   +0.08%     
==========================================
  Files          20       20              
  Lines        2290     2290              
==========================================
+ Hits         1960     1962       +2     
+ Misses        330      328       -2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/862/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.88% <0%> (+0.32%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=footer). Last update [6fe2c6a...8eef6bb](https://codecov.io/gh/dbcli/pgcli/pull/862?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Very nice, thank you! 👍 🍫 🌟 ",2018-03-28 18:35:38,2018-03-28 18:46:47
339,861,"## Description
This patch makes \h in the prompt only return the hostname up to the first period (i.e. db.orgname.org will be displayed as just 'db'), and adds \H which will return the whole hostname.  If there's no '.' in the hostname, \h and \H will produce identical results.

The `get_prompt()` method doesn't seem to have a test suite that exercises all of the format characters; should it?  I did verify that `get_prompt()` is at least invoked by the behave tests.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","#858: make \h in prompt return the first part of the hostname; add \H to return whole hostname
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=h1) Report
> Merging [#861](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/6fe2c6a06171e6fdc54dfe71e4d649c53c1f0200?src=pr&el=desc) will **increase** coverage by `0.1%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/861/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #861     +/-   ##
=========================================
+ Coverage   85.58%   85.69%   +0.1%     
=========================================
  Files          20       20             
  Lines        2290     2293      +3     
=========================================
+ Hits         1960     1965      +5     
+ Misses        330      328      -2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/861/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.99% <100%> (+0.42%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=footer). Last update [6fe2c6a...d0e68d0](https://codecov.io/gh/dbcli/pgcli/pull/861?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thanks for pointing that out.  I've added another commit to update pgclirc.
Works great! Merging.",2018-03-28 18:26:29,2018-03-28 22:45:01
340,860,"## Description
I get the following error when I start pgcli:
```
Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/lib64/python2.7/threading.py"", line 812, in __bootstrap_inner
    self.run()
  File ""/usr/lib64/python2.7/threading.py"", line 765, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 60, in _bg_refresh
    **e.extra_args)
  File ""/usr/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 173, in __init__
    self.connect()
  File ""/usr/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 198, in connect
    **kwargs)
  File ""/usr/lib64/python2.7/site-packages/psycopg2/__init__.py"", line 130, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
OperationalError: could not translate host name "" /tmp"" to address: Name or service not known
``` 
I can execute psql commands fine, but all queries just return the above error, as well.

## Your environment
Centos 7
Python 2.7.5
Installed pgcli via pip
Postgres version 10.3

I've tried installing pgcli on an empty virtualenv, but get the same results.

pip freeze:
``` 
backports.csv==1.0.5
backports.ssl-match-hostname==3.4.0.2
chardet==2.2.1
cli-helpers==1.0.1
click==6.7
configobj==5.0.6
decorator==3.4.0
fail2ban==0.9.7
humanize==0.5.1
iniparse==0.4
iotop==0.6
kitchen==1.1.1
langtable==0.0.31
perf==0.1
pgcli==1.9.0
pgspecial==1.10.0
prompt-toolkit==1.0.15
psycopg2-binary==2.7.4
pycurl==7.19.0
Pygments==2.2.0
pygobject==3.22.0
pygpgme==0.3
pyliblzma==0.5.3
python-augeas==0.5.0
python-dmidecode==3.10.13
python-linux-procfs==0.4.9
pyudev==0.15
pyxattr==0.5.1
schedutils==0.4
setproctitle==1.1.10
six==1.9.0
slip==0.4.0
slip.dbus==0.4.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
urlgrabber==3.10
virtualenv==15.2.0
wcwidth==0.1.7
yum-langpacks==0.4.2
yum-metadata-parser==1.1.4
```","OperationalError on all queries
Managed to get around it with tweaking the pg_hba.conf, needed to set a few local connections to ""trust"". Oh well.
I'm going to leave this open, because it's a bug, even though there's a workaround. Thanks for the report!
Cool! I also noticed I can only get pgcli to work properly using the -h flag (ex: pgcli -U postgres -h localhost), without that specific flag, I get the same error, even with the pg_hba.conf tweaks.
@joaodlf could you attach your `pg_hba.conf`? might be helpful to recreate the problem.
Sure!

```
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# ""local"" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     all             ::1/128                 trust

# Allow external connections with a password
host    all             all             0.0.0.0/0               md5
host    all             all             ::/0                    md5
```

This is from the same machine as expressed in my initial report: 
> PostgreSQL 10.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-16), 64-bit

pgcli will only work as expected with the following command:
`pgcli -U postgres -h localhost`
For what it's worth, I'm running into the same problem and @joaodlf's workaround is working.",2018-03-27 14:10:57,
341,859,"Revert to `psycopg2` package insteaf of forcing `psycopg2-binary`.

For 2.7, this will install from wheels by default, and from source if `--no-binary` flag is used.

For 2.8, we need to figure out something else, since `psycopg2` will become source only.

Related:
https://github.com/dbcli/pgcli/issues/849
https://github.com/dbcli/pgcli/issues/844","Revert to psycopg2, and add instructions for no-binary install.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=h1) Report
> Merging [#859](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7ea910236a39fc9aa74e64515c3795951ef5d502?src=pr&el=desc) will **decrease** coverage by `0.13%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/859/graphs/tree.svg?width=650&height=150&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #859      +/-   ##
==========================================
- Coverage   85.72%   85.58%   -0.14%     
==========================================
  Files          20       20              
  Lines        2290     2290              
==========================================
- Hits         1963     1960       -3     
- Misses        327      330       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/859/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.56% <0%> (-0.49%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=footer). Last update [7ea9102...b95ac55](https://codecov.io/gh/dbcli/pgcli/pull/859?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-03-23 18:15:28,2018-03-27 15:42:49
342,858,"## Description

I was puzzled when connecting to one server produced the `user@server:dbname>` prompt I expected, but another server produced just `dbname>`.  

It turns out that if the prompt ends up longer than `self.max_len_prompt`, which is set to 30 and isn't configurable, pgcli falls back to just `dbname>`.    I was using just 'docker' for one hostname and the other was 'db-dev.domainname.tld', which pushed the whole prompt over the limit.  (My username is always 'akuchling', so there's 9 characters right there!)

Two ideas:

1) bash's prompt formatting supports both the FQDN and just the local hostname.  Would you like me to write a patch adding a similar new formatting character?  Unfortunately bash uses \h for the up-to-the-first-'.' and \H for the full name.  This would be an incompatible change for pgcli, where \h is currently the full server name.  Would we want to change the meaning of \h in pgcli, have the opposite of bash's variables (\h for full, \H for shortened), or just pick some different character?

2) We could also make the max_len_prompt configurable.  Does that seem worth doing?

## Your environment

pgcli version 1.9.0.
","Customized prompt not used
A ""short host name"" formatting character would be great. I think it would be ok if we switch the meaning of `\h` to ""short host name"", and use `\H` for ""full host name"" (users might even appreciate shorter prompt). Perhaps with this change you would not need to increase `max_len_prompt`.
Closing this issue, because a fix was merged.",2018-03-23 17:06:36,2018-04-08 15:27:41
343,857,"## Description
Fixes #850



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix broken pgcli --list command line option
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=h1) Report
> Merging [#857](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9e46fbab324d887934628104e46472c711dad8b3?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/857/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #857      +/-   ##
==========================================
- Coverage   85.67%   85.58%   -0.09%     
==========================================
  Files          20       20              
  Lines        2290     2290              
==========================================
- Hits         1962     1960       -2     
- Misses        328      330       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/857/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.56% <0%> (-0.33%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=footer). Last update [9e46fba...9434b7f](https://codecov.io/gh/dbcli/pgcli/pull/857?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you @badanin-dmitry-playrix :+1: ",2018-03-22 10:16:28,2018-03-22 12:24:52
344,856,I honestly stole all @tsroten's release script tweaks.,"Ported release script improvements from mycli.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=h1) Report
> Merging [#856](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/97475bf5025aef5782b33a9956e37e86acaa1e8b?src=pr&el=desc) will **decrease** coverage by `0.08%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/856/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #856      +/-   ##
==========================================
- Coverage   85.67%   85.58%   -0.09%     
==========================================
  Files          20       20              
  Lines        2290     2290              
==========================================
- Hits         1962     1960       -2     
- Misses        328      330       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/856/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.56% <0%> (-0.33%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=footer). Last update [97475bf...a1864ff](https://codecov.io/gh/dbcli/pgcli/pull/856?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I've checked for differences in {mycli,pgcli}/release.py and found only replacements of pgcli/mycli :+1:",2018-03-21 22:46:21,2018-03-22 09:58:45
345,855,"Would be great to be able to invoke saved queries so that they are available to edit in the command line and then execute, rather than simply executing from memory.","Request: ability to restore saved query and edit
@davidrthorn Did you find a solution for this? (`Ctrl + R ` history search perhaps)?
@j-bennet I actually didn't, but I closed this issue thinking that `\e` was this. One option might be to run the saved query then use `\e` to edit it before resaving.",2018-03-21 10:19:38,2018-03-23 08:46:57
346,854,,"Fix/update link to tabulate
Indeed!

🍬 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/854?src=pr&el=h1) Report
> Merging [#854](https://codecov.io/gh/dbcli/pgcli/pull/854?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/cde420e271c3a00312431784559b45c12681491a?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/854/graphs/tree.svg?height=150&token=XdciEnQkL2&width=650&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/854?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #854   +/-   ##
=======================================
  Coverage   85.67%   85.67%           
=======================================
  Files          20       20           
  Lines        2290     2290           
=======================================
  Hits         1962     1962           
  Misses        328      328
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/854?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/854?src=pr&el=footer). Last update [cde420e...d8c2620](https://codecov.io/gh/dbcli/pgcli/pull/854?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-03-16 10:50:08,2018-03-16 17:45:50
347,853,"## Description
I am invoking pgcli as ``sudo su postgres -c pgcli``. If my SSH connection drops, the process keeps going regardless, and sometimes starts hogging all my CPU. 

## Your environment

Ubuntu 16.04
pgcli v 0.20.1
[pip freeze.txt](https://github.com/dbcli/pgcli/files/1813144/pip.freeze.txt)
","pgcli runs away and hogs all my CPU if I don't exit gracefully
Sorry about the inconvenience. 

I'm unable to reproduce. Can you try upgrading to the latest version? We've come a long way since v0.20.1.

You can upgrade using `pip install -U pgcli`. ",2018-03-14 21:33:27,2019-10-17 04:25:49
348,852,"## Description
I can't start pgcli after a fresh installation using pip:

```
$ pgcli 
Traceback (most recent call last):
  File ""/home/ionut/venv/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/home/ionut/venv/local/lib/python2.7/site-packages/distribute-0.6.24-py2.7.egg/pkg_resources.py"", line 2707, in <module>
    working_set.require(__requires__)
  File ""/home/ionut/venv/local/lib/python2.7/site-packages/distribute-0.6.24-py2.7.egg/pkg_resources.py"", line 686, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/home/ionut/venv/local/lib/python2.7/site-packages/distribute-0.6.24-py2.7.egg/pkg_resources.py"", line 584, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: cli-helpers[styles]>=1.0.1
```

## Your environment
Debian GNU/Linux 7.8 (wheezy)
```
backports.csv==1.0.5
cli-helpers==1.0.1
click==6.7
configobj==5.0.6
humanize==0.5.1
pgcli==1.9.0
pgspecial==1.10.0
prompt-toolkit==1.0.15
psycopg2-binary==2.7.4
Pygments==2.2.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
wcwidth==0.1.7
```","DistributionNotFound error on fresh install
@tsroten could you take a look?
Hello! It looks like the version of distribute that your pip is using is around 7 years old. It doesn’t appear to support the “extras_require” feature that pgcli uses.

Can you update pip to a newer version? It looks like there are quite a few guides online to update pip on Debian wheezy.

I believe that by updating pip, distribute will be updated with it.

I’m not at the computer right now, but if you have any issues updating pip/distribute, let us know.

Thanks!!

> On Mar 14, 2018, at 11:59, Irina Truong <notifications@github.com> wrote:
> 
> @tsroten could you take a look?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 

Upgrading, `distribute` fixed it. Thanks! 

FWIW, I was already on the latest pip version (9.0.1), with a fresh virtualenv. 
@tsroten thanks a lot - eagle eye!",2018-03-14 15:46:13,2018-03-16 10:26:03
349,851,"## Description
A psycopg type  of DateTimeTZRange is exposed for a TSTZRANGE column.  This type does not exist in Postgres.   It is misleading to use it in results. 

For instance:
select tstzrange(timezone('utc', now()), timezone('utc', now())+'1 week'::interval, '[]');


## Your environment
pg10

using: pgcli v1.8.1

",psycopg type DateTimeTZRange exposed in TSTZRANGE results,2018-03-11 00:37:02,
350,850,"## Description
Calling `psql -l` (it is a little L to list the known databases) results in a traceback:

```python
Traceback (most recent call last):
  File "".../pgcli/bin/pgcli"", line 11, in <module>
    sys.exit(cli())
  File "".../pgcli/lib/python2.7/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File "".../pgcli/lib/python2.7/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File "".../pgcli/lib/python2.7/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "".../pgcli/lib/python2.7/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File "".../pgcli/lib/python2.7/site-packages/pgcli/main.py"", line 947, in cli
    self.echo_via_pager('\n'.join(formatted))
NameError: global name 'self' is not defined
```

## Your environment

Mac OS 10.13.3
pgcli Version: 1.9.0
installed via: (same traceback)
* `pipsi` on Python 2.7 (fresh install)
* upgraded from previous installation in venv on Python 3.5

`pip freeze` for the Python 3.5 venv:
```
backports.csv==1.0.5
blessings==1.6
bpython==0.16
cli-helpers==1.0.1
click==6.7
configobj==5.0.6
curtsies==0.2.11
greenlet==0.4.11
humanize==0.5.1
pgcli==1.9.0
pgspecial==1.10.0
ply==3.8
prompt-toolkit==1.0.15
psycopg2==2.7.3.2
psycopg2-binary==2.7.4
Pygments==2.2.0
requests==2.12.5
setproctitle==1.1.10
six==1.11.0
sixer==1.6
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
wcwidth==0.1.7
xonsh==0.3.2
```

- [x] Please provide your OS and version information.
- [x] Please provide your CLI version.
- [x] What is the output of ``pip freeze`` command.
",pgcli -l is broken,2018-03-08 07:16:38,2018-03-22 12:24:52
351,849,"Hello, I'm psycopg2 maintainer.

I have developed wheel package of psycopg as a way to make tools like yours easier to install, but unfortunately the psycopg2 wheels has complex problems hard or impossible to eliminate, which forced us, in order to not get rid altogether of the wheel, to deploy them under a different pip name, as you have found seeing the requirements in your `setup.py`.

In psycopg/psycopg2#674 someone has reported though that the dependencies of pgcli cause problems to shared virtual envs. My suggestion would be to not have pgcli installed in the share virtualenv of other projects as it's a standalone executable, not a library. However I'm not sure about that. The existence of a -wheel package is a new strategy for us so I'd like to find the best way to tackle the problem.

Do you think there are scenarios where `pgcli` is meant to be installed as a Python library for other projects? If so how can we solve conflicts where other projects depend on the naked `psycopg2`? Glad to know your opinion.","Not sure about psycopg2-wheels dependency
`pgcli`'s primary purpose is to be an interactive tool, not a library. We worked on extracting shared functionality into libraries such as `pgspecial` and `cli_helpers`. However, many users install `pgcli` and `mycli` into venvs, to avoid changes to their system-wide packages. I wish we could specify `psycopg2` as either binary or source distribution, to be controlled with `pip install` flags, but I'm not sure if there's an existing way to do that.

@dbcli/pgcli-core @dbcli/mycli-core What do you think?

(Related issue: https://github.com/dbcli/pgcli/issues/844.)
If your userbase is already used to installing psycopg from source is maybe better to specify the dependency on the source package. Here is [how to do it in a requirements.txt file](http://initd.org/psycopg/docs/install.html#disabling-wheel-packages-for-psycopg-2-7) but I'm not sure it works in `setup.py` too.
@dvarrazzo how do you manage a `OR` dependency with setuptools ? Something like `psycopg2 | psycopg2-binary` ? How to let *user* choose whether they use binary or build from source ?


This is a bit annoying .. I install pgcli into a django docker container that runs in aws to use it as the ""manage.py dbshell"" program so I don't need to install the postgres client itself.

Now, both.. psycopg2 and psycopg-binary get installed .. but it looks like it still prefers the non-binary version so I now get the warning also for the django and celery processes that also run in the container.
@dvarrazzo I think the irritation on my side is that every time I run a cli command, I actually have the warning pop up.  It's not limited to just pgcli, but that is the primary use-case I do have.  So I probably see this warning more than a few dozen times in a day.  It gets old after the first 3 on the first day... it's to the point now that I want to patch psycopg2 every time its installed.  In the future, please consider handling something like this in a different way (perhaps just as a documentation notice).
@brianbruggeman we suppressed this warning in pgcli a version or two ago. Do you keep seeing it?
@j-bennet I do.

```
* pgcli==1.10.3
 - psycopg2 [required: >=2.7.4,<2.8, installed: 2.7.5 (dt dec pq3 ext lo64)]
```

We instruct our developers to run `pip install -e .[all]` for our projects, which completely sets up an environment for development.  For one of our projects, that also includes `pgcli` because it's super useful.  However, pip ends up installing both `psycopg2` and `psycopg2-binary`.   In my development environment, I end up manually uninstalling psycopg2 and psycopg2-binary, and then installing psycopg2-binary.   As a consequence, I see this line every time I run a command-line interface (our CLIs are extensively used for database access along with S3, EC2, etc.).  I see it every time I run a pytest invocation, etc.  So pretty much my every day is impacted by this:

```
UserWarning: The psycopg2 wheel package will be renamed from release 2.8...
```
I think your hitting the limits of `pip install -e .`, when the packages have conflicting requirements you can workaround this by patching setup.py of the packages. You can do this by forking pgcli on pypi.
I have a Flask project where  we use the psycopg2 driver and we simply use psycopg2-binary, it works well enough for our case and makes life simpler. But if I want to install pgcli , now everywhere I start seeing :
```
 UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use ""pip install psycopg2-binary"" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.
```
And this is very annoying.
I didn't get it. Why we can't just do the following?
```diff
diff --git a/setup.py b/setup.py
index 13c76c02..f4f11921 100644
--- a/setup.py
+++ b/setup.py
@@ -16,7 +16,7 @@ install_requirements = [
     'click >= 4.1',
     'Pygments >= 2.0',  # Pygments has to be Capitalcased. WTF?
     'prompt_toolkit>=2.0.6,<2.1.0',
-    'psycopg2 >= 2.7.4,<2.8',
+    'psycopg2 >= 2.7.4',
     'sqlparse >=0.2.2,<0.3.0',
     'configobj >= 5.0.6',
     'humanize >= 0.5.1',
```

I haven't noticed any problems with the latest `psycopg2` so far.",2018-03-07 16:29:54,
352,848,"## Description
Add tests, AUTHORS and changelog.rst to release.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","Add tests, AUTHORS and changelog.rst to release.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/848?src=pr&el=h1) Report
> Merging [#848](https://codecov.io/gh/dbcli/pgcli/pull/848?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/cde420e271c3a00312431784559b45c12681491a?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/848/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/848?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #848   +/-   ##
=======================================
  Coverage   85.67%   85.67%           
=======================================
  Files          20       20           
  Lines        2290     2290           
=======================================
  Hits         1962     1962           
  Misses        328      328
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/848?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/848?src=pr&el=footer). Last update [cde420e...d1e7d29](https://codecov.io/gh/dbcli/pgcli/pull/848?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-03-05 19:58:18,2018-03-16 17:39:15
353,847,"## Description
<!--- Describe your changes in detail. -->

Changelog update and pgspecial bump to release 1.9.0.
","Changelog update, and bump pgspecial for the release.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=h1) Report
> Merging [#847](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/ffb89614079d5c97c382299c61adde42c0304fce?src=pr&el=desc) will **decrease** coverage by `0.13%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/847/graphs/tree.svg?width=650&height=150&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #847      +/-   ##
==========================================
- Coverage   85.72%   85.58%   -0.14%     
==========================================
  Files          20       20              
  Lines        2290     2290              
==========================================
- Hits         1963     1960       -3     
- Misses        327      330       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/847/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.56% <0%> (-0.49%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=footer). Last update [ffb8961...10904ee](https://codecov.io/gh/dbcli/pgcli/pull/847?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2018-03-02 18:30:44,2018-03-02 22:35:21
354,846,"## Description
Fix for #844 

","Change to psycopg2-binary as a dependency.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=h1) Report
> Merging [#846](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/fa248655da620a70e94935541d50cebf440ea946?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/846/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #846      +/-   ##
==========================================
- Coverage   85.72%   85.67%   -0.05%     
==========================================
  Files          20       20              
  Lines        2290     2290              
==========================================
- Hits         1963     1962       -1     
- Misses        327      328       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/846/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.88% <0%> (-0.17%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=footer). Last update [fa24865...8cb7e21](https://codecov.io/gh/dbcli/pgcli/pull/846?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2018-03-02 06:03:51,2018-03-02 18:20:22
355,845,"I pretty often compose a set of queries I want to enter in `psql`/`pgcli` in a notepad, and then paste them into the terminal as a single block.

In `psql`, the entire block of queries executes normally. However, in `pgcli`, generally only *one* of the queries gets executed, and *which* query it is that gets run doesn't seem to make sense.

For instance, the following queries:

```

DROP TABLE  manga_releases;
DROP TABLE  manga_tags;
DROP TABLE  pg_stat_statements;
DROP TABLE  release_files;
```

 Causes *only* the *second* query to be executed (`DROP TABLE  manga_tags;`). The other queries show up on the console, but appear to be ignored.

![image](https://user-images.githubusercontent.com/1401239/36638075-3dc41226-199f-11e8-9dd6-3adc95615437.png)


Multi-line is on, otherwise I'm mostly running the defaults.

![image](https://user-images.githubusercontent.com/1401239/36638077-4666f5d8-199f-11e8-85b9-7c456664d0e3.png)


I'd expect `pgcli` to not simply drop statements on the floor. Ideally, every statement I enter should either result in a success output, or an error report.

This *seems* to be an effect of the fact that I'm pasting newlines into the console. if I remove the newlines in the SQL, it seems to function normally. 

The SSH terminal I'm using is Cygwin minitty.exe x64, if it's somehow relevant.

## Environment

 - Os: Ubuntu 14.04
 - Python 3.4.3
 - `pgcli` version: 1.8.2

```
durr@postgres-server ~> pip freeze
backports.csv==1.0.5
cli-helpers==1.0.1
click==6.7
configobj==5.0.6
humanize==0.5.1
pgcli==1.8.2
pgspecial==1.9.0
pgxnclient==1.2.1
prompt-toolkit==1.0.15
psycopg2==2.7.4
pycurl==7.19.3
Pygments==2.2.0
pygobject==3.12.0
python-apt===0.9.3.5ubuntu2
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
unattended-upgrades==0.1
wcwidth==0.1.7
```","Pasting multiple statements into the CLI can cause strange behaviour.
Hi. I just tried this on pgcli v1.8.2 in Fedora Linux, gnome-terminal. It works just fine.

I suspect that this is some incompatible behavior in cygwin. I understand that it works fine in psql. We are using [prompt-tookit](https://github.com/jonathanslenders/python-prompt-toolkit) to render our shell which handles all our copy/paste for us. 

It might be worthwhile to file a bug with prompt-toolkit about this. 
Hi, i use pgcli v1.8.2 on Debian (no Ubuntu) and it work fine. Can you indicate the name of your soft console, please? I use gnome-terminal
@fraoustin:

From the original report:

> The SSH terminal I'm using is Cygwin minitty.exe x64, if it's somehow relevant.
you can tested with putty client ?
I tested it with PuTTY without reproducing the issue.

@fake-name is the client you are using this one: https://mintty.github.io/ ?
@fpietka - It sounds like it. From  https://mintty.github.io/ :

> In Cygwin, it is installed as the default ""Cygwin Terminal"".
> you can tested with putty client ?

`putty.exe` is worse. It actually only ever even *shows* one of the 4 queries I tried to paste into the console.

Everything after the first newline in the clipboard input is completely discarded. If my clipboard starts with a newline, nothing whatsoever gets entered, aside from that one newline.

`psql` via `putty.exe` works fine.
Heh, looking at python-prompt-toolkit:

https://github.com/jonathanslenders/python-prompt-toolkit/issues/602, https://github.com/dbcli/mycli/issues/579",2018-02-25 04:12:49,
356,844,"## Description
The psycopg2 package display's a user warning when calling pgcli. They have a blog post describing why this warning is displayed: http://initd.org/psycopg/articles/2018/02/08/psycopg-274-released/.

### Warning Message
``` Text
UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use ""pip install psycopg2-binary"" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.
```

## Your environment
- pgcli is installed in a virtual environment in my home .local folder.  
- Symlink pgcli in my .local/bin folder to the virtual instance of pgcli.  

## System Information
- [x] Please provide your OS and version information.  
`Ubuntu 16.04.3 LTS (xenial, x86_64)`  
  
- [x] Please provide your CLI version.  
`pgcli Version: 1.8.2`  
  
- [x] What is the output of ``pip freeze`` command.  
``` Text
cli-helpers==1.0.1
click==6.7
configobj==5.0.6
humanize==0.5.1
pgcli==1.8.2
pgspecial==1.9.0
prompt-toolkit==1.0.15
psycopg2==2.7.4
Pygments==2.2.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
tabulate==0.8.2
terminaltables==3.1.0
wcwidth==0.1.7
```
","UserWarning: The psycopg2 wheel package will be renamed from release 2.8
Downgrading to psycopg2 v2.7.3.2 avoids the warning (`pip install psycopg2==2.7.3.2`). But, it would be preferable to stick with the most recent psycopg2 package.  
Do you guys know if this warning can be suppressed?

Thanks!
@pshlykov If you are running pglci from a virtual environment you can install psycopg2 v2.7.3.2 to get around the warning. By default, pgcli will install the [latest version][1] of psycopg2.

[1]:https://github.com/dbcli/pgcli/blob/fa248655da620a70e94935541d50cebf440ea946/setup.py#L19 
I'll change the dependency to `psycopg2-binary`. 

Thanks for reporting. 
Thanks @ncFoCo @amjith 
Released in 1.9.0.
@amjith Changing the dependency to `psycopg2-binary` excludes people that have problems with the psycopg2 binary wheel package from using pgcli >= 1.9.0.

Since binary wheels were introduced in psycopg2 just one year ago, I think it's more reasonable to continue to depend on psycopg2, which will be a source-only package starting from 2.8. This will emit a warning until psycopg2 2.8 is released, which is discussed in this ticket and on the psycopg2 homepage linked above.
pip install psycopg2 (2.7.4)
pip install psycopg2-binary (2.7.4)
 I install the 2.7.4 version，but the promble is not solve
pip list:
pbr (4.0.0)
pika (0.11.2)
pip (8.1.1)
psycopg2 (2.7.4)
psycopg2-binary (2.7.4)
pyasn1 (0.4.2)
pyasn1-modules (0.2.1)
python-ldap (3.0.0)
python-mimeparse (1.6.0)


help 
@GIS90 Uninstall the old psycopg2 package; your system should switch to using the -binary package automatically. 
pip install psycopg2-binary
this problem might be coz of you did not migrate your database 
-$ ./manage.py migrate (for djnago)
I know that adding to this post probably won't help, but I actually want to stick with psycopg2 (not use the binary) but get rid of that really annoying warning.

I actually ran into an unusual edge-case where the psycopg2-binary wheel didn't work properly for me in one particular project only (got some strange byte alignment error, I guess this is why the wheel version didn't work that well).

Does this really mean I have to put up with the warning until version 2.8 is released.

edit: I was actually forced to install 2.6.2 (the last version before the switch to wheels) in this project because the wheel version had the alignment error come up, so really the 2.8 release is quite important for me and hope it's soon as it fixes this mess.
The warning is silenced in pgcli (starting 1.10.0): https://github.com/dbcli/pgcli/pull/894.
> @GIS90 Uninstall the old psycopg2 package; your system should switch to using the -binary package automatically.

May I ask why this was downvoted? In the interest of education. 
The error message notification starting with version 2.8 of psycopg2 requires the following installation.

```bash
pip install psycopg2-binary
````

If you're using version  2.x being, can ignore this warning tip.
How do you silence this warning if you want to use psycopg2 source?
Not sure. I attempted to silence them before:

https://github.com/dbcli/pgcli/blob/a7632361c42b33e4474a4ca5363bddbf57484daa/pgcli/main.py#L8

that trick worked for a little bit and then stopped. You're welcome to try and poke around some more with warnings. If you find the right way to do that, we'll welcome a PR!
It still works @j-bennet it just has to be one of the first things that loads when your app starts up. I had to move some code to ensure the warnings.filterwarning(...) loaded first when starting the app and use this in several applications.

Edit: I don't know why pgcli imports from pgspecial.namedqueries before the filterwarnings statement, this also doesn't really follow python imports grouping convention where only standard lib imports should be first
Would it be possible to allow either to be used?  My project depends on the binary version and having to have both installed for pgcli is a bit of a nuisance.  Would be appreciated.
Because of I did rebuild from source of psycopg 2.8.3, then my project raised the message too.
I removed __pycache__, it was fine for me.
rm -rf __pycache__/
",2018-02-20 19:15:37,2018-03-04 03:03:06
357,843,"## Description
<!--- Describe your changes in detail. -->
Currently the build tests are broken. This PR fixes them.
There was a wrong assertion on the context when using `ex` external editor.

Also there seem to a bug in the last version of autopep8. Pinning the version to 1.3.3 seem to work.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix tests
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=h1) Report
> Merging [#843](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8138ae8e31ef2139774acf2d16d6a8f7e14f40cb?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/843/graphs/tree.svg?height=150&src=pr&token=XdciEnQkL2&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #843      +/-   ##
==========================================
- Coverage      86%   85.96%   -0.05%     
==========================================
  Files          20       20              
  Lines        2280     2280              
==========================================
- Hits         1961     1960       -1     
- Misses        319      320       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/843/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `78.82% <0%> (-0.17%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=footer). Last update [8138ae8...48ede44](https://codecov.io/gh/dbcli/pgcli/pull/843?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thanks for the PR! You can also now switch to installing `pep8radius` from pypi, like here:

https://github.com/dbcli/mycli/commit/1da113b5491dbf76a5dcd7c452be27e61e91462a
@j-bennet I tried this already but we need a version of pep8radius more recent than the one available on pypi since we rely on the `--error-status` option.
I see. Well done!",2018-02-15 11:03:31,2018-02-15 15:54:28
358,842,"## Description

The link to the `pgspecial` points to a 404 page (wrong organization).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).

No need to add my name for such a small fix in my opinion. Looking forward to contributing more.
","Fix link to pgspecial project
👍 ",2018-02-15 09:13:35,2018-02-15 15:51:33
359,841,"Description:
I tried the named query example in https://www.pgcli.com/features
```
> \ns foo select $1
Saved.

> \n foo 1
there is no parameter $1
```

Btw, using `%s` works.

Environment:
os: Mac OS High Sierra
pgcli: v1.8.2","Cannot pass parameters to Named Query
@yejianye Thanks for reporting this! It looks like that documentation was released a little too early 😄 That feature isn't in the newest version of pgcli, yet. We'll get that fixed! Thanks!

@yejianye this should now be working with newer 1.9.0 version.

Thanks for your patience.",2018-02-12 11:08:10,2018-03-03 12:59:31
360,840,"## Description
When a field is of type `interval` defined in _months_ or years, it will be displayed in _days_ instead, which is very confusing, as the amount of days may be varying depending on the current time. So `'1 month'::interval` is displayed as `30 days, 0:00:00` instead.

### Expected
```sql
db=> select now(), '1 month'::interval, '1 year'::interval;
             now              | interval | interval
------------------------------+----------+----------
 2018-02-12 10:14:34.95266+00 | 1 mon    | 1 year
```

### Actual
```sql
db> select now(), '1 month'::interval, '1 year'::interval;
+-------------------------------+------------------+-------------------+
| now                           | interval         | interval          |
|-------------------------------+------------------+-------------------|
| 2018-02-12 10:15:02.621136+00 | 30 days, 0:00:00 | 365 days, 0:00:00 |
+-------------------------------+------------------+-------------------+
```

## Your environment

- [ ] macOS 10.13.3 (17D47)
- [ ] pgcli: stable 1.8.2 (bottled)
","Interval type display is inconsistent with postgres.
You're right. Looks like this is an artifact of psycopg2 trying to convert the intervals into python timedeltas. 

https://github.com/psycopg/psycopg2/issues/449

The github issue linked above has listed a workaround. 

If you're interested in contributing you can take a look at this file ([pgexecute.py](https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py#L61)) where we register adapters to psycopg2 to do our own custom typecasting. 

If you're not interested, let us know and we'll try to get that in ourselves. ",2018-02-12 10:15:39,
361,839,"## Description
<!--- Describe your changes in detail. -->

add option list-dsn : get all alias in aliasdsn section of config file

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fraoustin/list dsn
Hi i don't understand the failure of Travis. Someone can help me, please
@fraoustin That version of pep8radius has a bug in a dependency, try making these changes:
https://github.com/dbcli/mycli/pull/574/commits/1da113b5491dbf76a5dcd7c452be27e61e91462a
@fraoustin Nice 👍 👨‍🚀 

Like I mentioned on the mycli pull request, it would be nice to mask or strip the password from the DSN output.
@fraoustin The problem with tests (autopep8) is fixed on master by https://github.com/dbcli/pgcli/pull/843. You should be good after you rebase. You still need to remove `.vscode/settings.json` from the PR.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=h1) Report
> Merging [#839](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8138ae8e31ef2139774acf2d16d6a8f7e14f40cb?src=pr&el=desc) will **decrease** coverage by `0.37%`.
> The diff coverage is `20%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/839/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #839      +/-   ##
==========================================
- Coverage      86%   85.63%   -0.38%     
==========================================
  Files          20       20              
  Lines        2280     2290      +10     
==========================================
  Hits         1961     1961              
- Misses        319      329      +10
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/839/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.72% <20%> (-1.27%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=footer). Last update [8138ae8...f671d2f](https://codecov.io/gh/dbcli/pgcli/pull/839?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Useful! 👍 ",2018-02-10 16:08:32,2018-02-17 21:42:18
362,838,"## Description
The format of array types is too pythonic - includes the `u''` prefix for strings, types for datetimes/decimals, etc. Need to format all the elements of the array the same way as they are formatted if they were outside of the array:
### Example:
*Actual*:
```
xxxdb> select '{""1"",""2""}'::text[];
+--------------+
| text         |
|--------------|
| [u'1', u'2'] |
+--------------+

xxxdb> select '{""2018-01-01""}'::timestamp[];
+---------------------------------------+
| timestamp                             |
|---------------------------------------|
| [datetime.datetime(2018, 1, 1, 0, 0)] |
+---------------------------------------+
```
*Expected*:
```
xxxdb=> select '{""1"",""2""}'::text[];
 text
-------
 {1,2}

xxxdb=> select '{""2018-01-01""}'::timestamp[];
        timestamp
-------------------------
 {""2018-01-01 00:00:00""}
```
## Your environment
```bash
$ pgcli -v
Version: 1.8.2
$ /usr/bin/python -V
Python 2.7.10
$ brew info pgcli
pgcli: stable 1.8.2 (bottled)
$ sw_vers
ProductName:	Mac OS X
ProductVersion:	10.13.3
BuildVersion:	17D47

xxxdb> select version();
+----------------------------------------------------------------------------------------------------------+
| version                                                                                                  |
|----------------------------------------------------------------------------------------------------------|
| PostgreSQL 9.6.1 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-16), 64-bit |
+----------------------------------------------------------------------------------------------------------+
```","Too pythonic formatting for array typed columns
I traced through the code a bit and cli_helper's tabular output code is at fault.  `TabularOutputFormatter._get_type()` doesn't check for lists and ends up falling through to the text type. It probably needs to be expanded to check for sequence-like types such as lists.
",2018-02-02 07:16:58,
363,837,"## Description

When using the default configuration, when the `\watch` command is used with `less`, you are prompted to continue after each query, limiting its usefulness.

```
example> select * from example; \watch 1
...
SELECT 0
(END)
```

Setting the pager to `less -E` automatically quits `less`, allowing `watch` to continue as expected.

```
example> \pager less -E
PAGER set to less -E.
Time: 0.000s
example> select * from example; \watch 1
...
SELECT 0
Time: 0.002s
Waiting for 1 seconds before repeating
```

This is obviously easy enough for the end user to change, but perhaps it could be done automatically, or suggested in the documentation?

## Your environment

- [ ] Linux 4.9.70-25.242.amzn1.x86_64 x86_64 GNU/Linux
- [ ] PGCLI 1.8.1
","Default pager (less) conflicts with \watch
Fixed in #876
If you'd like to try it out you can install directly from master as follows:

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```",2018-01-28 19:44:01,2018-08-18 05:54:56
364,836,"## Description
<!--- Describe your changes in detail. -->

Removed support for Python 3.3 (end-of-life).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Removed support for Python 3.3.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/836?src=pr&el=h1) Report
> Merging [#836](https://codecov.io/gh/dbcli/pgcli/pull/836?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/327f15afc3fcbd556b87a5b568b2b6c983519bdd?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/836/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/836?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #836   +/-   ##
=======================================
  Coverage   85.97%   85.97%           
=======================================
  Files          20       20           
  Lines        2275     2275           
=======================================
  Hits         1956     1956           
  Misses        319      319
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/836?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/836?src=pr&el=footer). Last update [327f15a...d072304](https://codecov.io/gh/dbcli/pgcli/pull/836?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:snake: ",2018-01-16 03:34:28,2018-01-16 04:51:59
365,835,"This is a plan for consolidating and cleaning up config options in pgclirc.

Remove:

* `smart_completion = True` (always True)
* `generate_aliases = False` (always True)
* `keyword_casing = auto` (always `auto`)
* `timing = True` (always True)
* [maybe] `asterisk_column_order = table_order` (do we really need `alphabetic`?)

Merge:

* set `expand ` to one `on|off|auto`, and remove `auto_expand`
* set `multi_line` to `psql|safe|off`, and remove `multi_line_mode`

(Optional) Rework:

* `on_error = STOP`: not well suited for a config option. Better ask the user after the first error occurred if he wants to continue.

cc @amjith @tsroten ","Consolidate config options
Another suggestion is to make a `pager_mode` setting to accompany the `pager` setting. So, `pager` is used to set the pager's command itself, but `pager_mode` is used to set if it's on, off, or set to automatic mode.

In mycli (I'm not sure about pgcli), the default automatic pager mode means that the pager will activate if the output is longer than one screen's length of content.

The recent mycli/pgcli pull requests for `pager_enabled` work well, but they only allow the user to turn the pager on or off, which rules out controlling the automatic mode.",2018-01-12 04:03:28,
366,834,"## Description
<!--- Describe your changes in detail. -->
Add feature Color of table by parameter

I add the possibility of use a name of token of syntax style (Token.Name.Tag, Token.Literal.String, ..) for parameter. The color of table is function of syntax style


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add feature Color of table. 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=h1) Report
> Merging [#834](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/e20d4754fab0b4aac7e797ef4e87327093447161?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `91.3%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/834/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #834      +/-   ##
==========================================
- Coverage   85.69%   85.65%   -0.05%     
==========================================
  Files          20       20              
  Lines        2293     2314      +21     
==========================================
+ Hits         1965     1982      +17     
- Misses        328      332       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/834/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `77.7% <100%> (-0.29%)` | :arrow_down: |
| [pgcli/pgstyle.py](https://codecov.io/gh/dbcli/pgcli/pull/834/diff?src=pr&el=tree#diff-cGdjbGkvcGdzdHlsZS5weQ==) | `87.09% <90.47%> (+5.27%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=footer). Last update [e20d475...dd0c721](https://codecov.io/gh/dbcli/pgcli/pull/834?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@fraoustin Nice work! It might be nice to move the style-related code to the `pgstyle.py` file, that way, we have very little color-related logic in the main pgcli itself. What do you think?

Here is the example from Mycli: 
https://github.com/dbcli/mycli/pull/462/files
I'm posting this info here so we have it in the comments and can either refer to it later or put it in the sample config file:

```
# How the styles are rendered is highly dependent on which terminal emulator you are
# using and its settings. Here are the recognized style rules:
# * bold - Render text as bold (some terminals render bold as a bright color instead).
# * italic - Render text as italic.
# * underline - Render text with an underline.
# * bg: - Transparent background.
# * bg:#000000 - Background color (in this case, black).
# * #ff0000 - text color (in this case, red).
#
# You can also use ANSI colors, specified as #ansi*, where * is one of the colors below.
# These are the ""light"" colors that will be rendered bold by most terminals:
# darkgray, red, green, yellow, blue, fuchsia, turquoise, white
# These are the ""dark"" colors that will be rendered non-bold:
# black, darkred, darkgreen, brown, darkblue, purple, teal, lightgray
```
@fraoustin I believe this is ready to merge - please add the contribution to changelog.
Looks good. Merging!

🍫 ",2018-01-11 21:12:34,2018-03-31 20:20:29
367,833,"Query the table, the table has the Chinese language to display the garbled code
![1](https://user-images.githubusercontent.com/16489791/34650546-d8d2eb4c-f3fd-11e7-82c2-1c22b9752ba2.PNG)
","Query the table, the table has the Chinese language to display the garbled code
It may be related to Windows, as I am using it on OSX with Japanese Kanji without any issue.
I'll check later on linux.
I'm using the Chinese language of the Windows 10 professional x64 system.
Is the character encoding used by pgcli UTF-8?
  ",2018-01-07 14:55:31,
368,832,"## Description
<!--- Describe your changes in detail. -->

manage command \pset pager [on/off] 
set \pset pager off next output don't use pager
set \pset pager on next output use pager

Add parameter in section ""main"" : pset-pager.
When I want to start pgcli with pset-pager is off,  output don't use pager

I's is a partial response for issue 813


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Nopager
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=h1) Report
> Merging [#832](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/327f15afc3fcbd556b87a5b568b2b6c983519bdd?src=pr&el=desc) will **decrease** coverage by `0.1%`.
> The diff coverage is `75%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/832/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #832      +/-   ##
==========================================
- Coverage   85.97%   85.87%   -0.11%     
==========================================
  Files          20       20              
  Lines        2275     2280       +5     
==========================================
+ Hits         1956     1958       +2     
- Misses        319      322       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/832/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `78.5% <75%> (-0.32%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=footer). Last update [327f15a...b0ca4a9](https://codecov.io/gh/dbcli/pgcli/pull/832?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@fraoustin Perhaps be a little more descriptive with commit comments?

I.e., ""enable_pager now accepts on/off"" is better than ""Update main.py"".

:)
It's ok for you?
Looks good, I'll try this out.
Works fine. Merging!

Thank you for the PR!",2018-01-06 11:04:10,2018-01-27 22:25:29
369,831,"## Description
<!--- Describe your changes in detail. -->

Small improvements for pgcli options:

* make sure port number is an int
* make sure pgclirc is a file name

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Add a couple missing click option types.
nice!",2018-01-06 01:30:34,2018-01-07 12:13:14
370,830,"## Description
<!--- Describe your changes in detail. -->

add command ""\t"" for change format output

usage: ""\t rst""

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Change format output
Hi i need some help: i don't understand why test is ko
just python3.3 is ko but i don't understand ... problem of Timeout exceeded.
  
Youpi !!!
@fraoustin Looks like you figured out the test problem. One question - why `\t` for changing format?
Hi, on mycli the command is \T (http://www.mycli.net/commands) ... but on pgcli all command is lowercase so ""\t"". I use that command when i need save the result in file (I change format for plain or csv)
It looks like `psql` has both `\t` and `\T`:

```
\t
Toggles the display of output column name headings and row count footer. This command is equivalent to \pset tuples_only and is provided for convenience.

\T table_options
Specifies attributes to be placed within the table tag in HTML output format. This command is equivalent to \pset tableattr table_options.
```

I think it's better to use `\T` here, because it aligns with `mycli`, but also because psql uses `\T` to configure table format.
I changed \t by \T but i have a problem of Timeout. I don't understand the problem ... can you help me please
it is ok ... but I have generate a commit ""null"" , no change ... mistake

So \T is a new command for change format table
Thank you for the PR!

🍬 ",2018-01-03 10:08:33,2018-01-04 18:47:12
371,829,"Hi there,

Thanks for the great work on `pgcli`! It's a great tool.

Apologies if this is a dupe issue. I searched and didn't find anything (other than saved & favorite queries, which isn't quite the same thing), but I may have missed it.

With `psql`, I regularly make use of `\set` in my scripts to set variables and use them as query parameters:

https://www.postgresql.org/docs/current/static/app-psql.html#APP-PSQL-VARIABLES

(Discovered via https://stackoverflow.com/questions/36959/how-do-you-use-script-variables-in-postgresql)

It would be great to have support for this in `pgcli` too.

Is there some other way though that people use query parameters/variables with `pgcli`?

Thanks again!","Support for query parameters/variables, like psql \set
I don't think psycopg2 supports this. We could do our own substitution, but that would be non-trivial. It sounds like a nice feature to have though.",2018-01-03 02:42:46,
372,828,"## Description
This PR is to a correct a small typo `DNS` -> `DSN` in a comment in the pgclirc. 


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","correct typo in pgclirc comment
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=h1) Report
> Merging [#828](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/22773b8b32803b6365874998a291ac8595f16e3d?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/828/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #828      +/-   ##
==========================================
- Coverage   86.42%   86.38%   -0.05%     
==========================================
  Files          20       20              
  Lines        2262     2262              
==========================================
- Hits         1955     1954       -1     
- Misses        307      308       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/828/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.2% <0%> (-0.17%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=footer). Last update [22773b8...cc48542](https://codecov.io/gh/dbcli/pgcli/pull/828?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Good catch! ",2017-12-23 13:10:31,2017-12-23 15:13:08
373,827,"## Description
<!--- Describe your changes in detail. -->

Use the same name everywhere.
",Changed my name in changelog.,2017-12-22 18:50:04,2017-12-22 18:50:18
374,826,"Attempt to convert to prompt_toolkit 2.0.

There is still an issue with the completer. After accepting the first input, the completer stops working. I'm not sure what's going on.

Prompt_toolkit 2.0 is not yet released, but this is an experiment to see what it takes to convert an application.

Questions I still have:
1. Shall we convert all prompt_toolkit application to 2.0? I'd very much like to see that.
2. How to deal with the incompatibilities? Linux distribution maintainers don't like this. I could rename the package to prompt_toolkit2 during a transition period. I don't like it that much, but I'm willing to do it if this is what works best for the community. The problem is that right now you can't have both prompt_toolkit 1 and 2 installed in the system wide Python installation, and this is often where these command line tools go...
","Added prompt_toolkit 2.0 support.
See: https://github.com/jonathanslenders/python-prompt-toolkit/issues/568
@jonathanslenders Oh wow. Yes, it would be good to convert to 2.0 as soon as we can (provided we fix the ""completer not working"" problem. :)).

The compatibility problem is tough. We always recommend installing pgcli/mycli in a venv, but for some, it's not an option. I''d like to know if @amjith, @tsroten and @meeuw have thoughts on that.
Hey Jonathan, It is great to see v2.0 progressing. :)

I want to encourage you to experiment with pgcli and keep it in a branch for now. We're happy to give you write permission to the repo so you can make a branch and do the development directly in pgcli repo instead of a fork. 

I'm wary of releasing a new pgcli version with prompt-toolkit-2.0. I've come to think of pgcli is a piece of software that people rely on to do their day to day job. It has grown out of being a toy side project. So I'd like to be cautious when we release new versions. Especially new versions with breaking changes. 

But we have a healthy set of beta testers (core devs and a few fervent followers). We can ask them to try out the branch build and gather feedback. 

Thoughts? 
Hi @amjith,

I completely agree. The same applied to IPython.
Maybe give this pull request a couple of months if needed. There's no hurry.

I added a second commit. This fixes the issue that I had with the completer. The problem was that the ``completer`` attribute was set while the prompt was running, but the ``prompt()`` function restores the settings when it's done. Using the ``DynamicCompleter`` made the fix pretty easy.

Please let me know if somebody comes across any issues.
Hi @j-bennet, I updated this merge request so that it's compatible with the ptk 2.0 version that is released and I rebased it on your latest master commit.

The completer issue that I noticed earlier, is fixed. (I'm not sure what happened back then.)

One issue, which still needs to be fixed is that if you press semi-colon in a multiline input mode, that the line continuation disappears. This is because the ``pg_is_multiline`` function in ``pgbuffer.py`` return ``False`` at that point. Further, I think this requires some more testing.
Closed in favor of https://github.com/dbcli/pgcli/pull/930 (cherry-picking was easier than rebasing).",2017-12-21 21:09:47,2018-09-28 21:19:25
375,825,I waited on https://github.com/dbcli/pgcli/pull/820 to release 1.8.2 - now that (and one more change is in).,"More changes added to 1.8.2 release.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/825?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@460d9a4`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/825/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/825?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #825   +/-   ##
=========================================
  Coverage          ?   86.29%           
=========================================
  Files             ?       20           
  Lines             ?     2262           
  Branches          ?        0           
=========================================
  Hits              ?     1952           
  Misses            ?      310           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/825?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/825?src=pr&el=footer). Last update [460d9a4...4cbb0f4](https://codecov.io/gh/dbcli/pgcli/pull/825?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

☯️ ",2017-12-21 04:46:37,2017-12-21 04:50:23
376,824,"## Description
As described in ticket #823, this is useful for matching prompt for
different usernames and auto populating passwords. iTerm2 has password
manager that is capable of doing this, but other terminal managers might
be able to do it as well.

`behave`, `pytest` and `pep8radius` are passing locally. I have not tried building `deb` or `rpm` packages, but these changes should not affect that in any way.

I am opened for any feedback you might have. 

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Include username to password prompt. #823
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=h1) Report
> Merging [#824](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/b2e572bf8291c54ea0ced8a6e43444ed6ed2c744?src=pr&el=desc) will **increase** coverage by `0.08%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/824/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #824      +/-   ##
==========================================
+ Coverage   86.29%   86.38%   +0.08%     
==========================================
  Files          20       20              
  Lines        2262     2262              
==========================================
+ Hits         1952     1954       +2     
+ Misses        310      308       -2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/824/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.2% <0%> (+0.33%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=footer). Last update [b2e572b...8bd7a7a](https://codecov.io/gh/dbcli/pgcli/pull/824?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👾 ",2017-12-20 19:53:07,2017-12-20 23:01:26
377,823,"This is suggestion for improvement, not a bug.

I am using `pgcli` quite often. My terminal app is iTerm2 which has builtin password manager. It recognizes regex in terminal and, when triggered, offers to enter password read from KeyChain. Quite handy feature.

Problem is that, with `pgcli`, there is no single regex to use for different databases, since prompt is ""Password:"". I would like to make distinction based on user I am using to connect.

Currently I patch local installation of `pgcli` to include username (which solves my problem, but more generic solution would probably include both username and database, maybe even host) in password prompt. 

These are two places that I have modified:
https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L368
https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L386

My modification looks something like this:
```python
passwd = click.prompt('%s password' % user, hide_input=True,
                       show_default=False, type=str)
```

I understand if you do not want to change default behavior, but would you consider adding flag that would modify password prompt to include username (and maybe database and host)? If yes, I might be able to provide PR.

Thanks.
","Optionally including username to password promp
Certainly! This is a valid use case. If you wanted to change the default behavior to ask for `Password (<username>):` (or something along those lines) instead of `Password:`, I don't think it would be a problem either. It's a one-time prompt that quickly goes away, and even if someone does not like extra verbosity, it's not staying on screen long enough to be annoying.
@delicb If you have a local patch that you're currently using why not make it a PR. If we have modifications or suggestions we can discuss it in the PR. It is easier (faster) to get a feature in if there is a PR. 😄 
@j-bennet Great, thank you. I will go with changing default behavior then, since it seem as most straight forward way, no unnecessary complications. 

@amjith Certainly, I will prepare PR promptly. 

Thank you both for being so cooperative :).
Included in 1.8.2 (just released).",2017-12-20 14:42:19,2017-12-21 05:11:27
378,822,"## Description
After a connection I receive the error below
`night@nights-MacBook-Pro:~$ pgcli postgres://user:pass@host:5432/my_schema
Version: 1.8.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
swpmbc_des> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
    self.run()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 763, in runhing completions...                                                                          
    self.__target(*self.__args, **self.__kwargs)
  File ""/Library/Python/2.7/site-packages/pgcli/completion_refresher.py"", line 68, in _bg_refresh
    refresher(completer, executor)
  File ""/Library/Python/2.7/site-packages/pgcli/completion_refresher.py"", line 109, in refresh_tables
    completer.extend_relations(executor.tables(), kind='tables')
  File ""/Library/Python/2.7/site-packages/pgcli/pgcompleter.py"", line 181, in extend_relations
    data = [self.escaped_names(d) for d in data]
  File ""/Library/Python/2.7/site-packages/pgcli/pgexecute.py"", line 414, in tables
    for row in self._relations(kinds=['r']):
  File ""/Library/Python/2.7/site-packages/pgcli/pgexecute.py"", line 408, in _relations
    cur.execute(sql)
ProgrammingError: syntax error at or near ""schema_name""
LINE 2:         SELECT  n.nspname schema_name,
                                  ^


my_schema >                                                                                                                                                                                                
my_schema > exit
Goodbye!`

For solve this I prefixed all alias on file /Library/Python/2.7/site-packages/pgcli/pgexecute.py with ""AS"".
Do I have another way?

Thanks.

## Your environment
- [ ] Please provide your OS and version information.
MacOS 10.13.2
`my_schema > select version();
+-----------------------------------------------------------------------------------------------------------+
| version                                                                                                   |
|-----------------------------------------------------------------------------------------------------------|
| PostgreSQL 8.2.23 on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.4.6 20120305 (Red Hat 4.4.6-4) |
+-----------------------------------------------------------------------------------------------------------+
SELECT
Time: 0.005s`

- [ ] Please provide your CLI version.
Version: 1.8.1

- [ ] What is the output of ``pip freeze`` command.
night@nights-MacBook-Pro:~$ pip freeze
altgraph==0.10.2
backports.csv==1.0.5
bdist-mpkg==0.5.0
bonjour-py==0.3
cli-helpers==0.2.3
click==6.7
configobj==5.0.6
humanize==0.5.1
macholib==1.5.1
matplotlib==1.3.1
modulegraph==0.10.4
numpy==1.8.0rc1
pgcli==1.8.1
pgspecial==1.9.0
prompt-toolkit==1.0.15
psycopg2==2.7.3.2
py2app==0.7.3
Pygments==2.2.0
pyobjc-core==2.5.1
pyobjc-framework-Accounts==2.5.1
pyobjc-framework-AddressBook==2.5.1
pyobjc-framework-AppleScriptKit==2.5.1
pyobjc-framework-AppleScriptObjC==2.5.1
pyobjc-framework-Automator==2.5.1
pyobjc-framework-CFNetwork==2.5.1
pyobjc-framework-Cocoa==2.5.1
pyobjc-framework-Collaboration==2.5.1
pyobjc-framework-CoreData==2.5.1
pyobjc-framework-CoreLocation==2.5.1
pyobjc-framework-CoreText==2.5.1
pyobjc-framework-DictionaryServices==2.5.1
pyobjc-framework-EventKit==2.5.1
pyobjc-framework-ExceptionHandling==2.5.1
pyobjc-framework-FSEvents==2.5.1
pyobjc-framework-InputMethodKit==2.5.1
pyobjc-framework-InstallerPlugins==2.5.1
pyobjc-framework-InstantMessage==2.5.1
pyobjc-framework-LatentSemanticMapping==2.5.1
pyobjc-framework-LaunchServices==2.5.1
pyobjc-framework-Message==2.5.1
pyobjc-framework-OpenDirectory==2.5.1
pyobjc-framework-PreferencePanes==2.5.1
pyobjc-framework-PubSub==2.5.1
pyobjc-framework-QTKit==2.5.1
pyobjc-framework-Quartz==2.5.1
pyobjc-framework-ScreenSaver==2.5.1
pyobjc-framework-ScriptingBridge==2.5.1
pyobjc-framework-SearchKit==2.5.1
pyobjc-framework-ServiceManagement==2.5.1
pyobjc-framework-Social==2.5.1
pyobjc-framework-SyncServices==2.5.1
pyobjc-framework-SystemConfiguration==2.5.1
pyobjc-framework-WebKit==2.5.1
pyOpenSSL==0.13.1
pyparsing==2.0.1
python-dateutil==1.5
pytz==2013.7
scipy==0.13.0b1
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
terminaltables==3.1.0
wcwidth==0.1.7
xattr==0.6.4
zope.interface==4.1.1
","Error on connect: ProgrammingError: syntax error at or near ""schema_name""
Thank you for the bug report! PostgreSQL 8.2 is pretty old, and I think it does not support `SELECT <table> <alias>`, only `SELECT <table> AS <alias>`. Should be easy enough to fix. If you already have a fix that's working, don't hesitate to submit a PR!",2017-12-19 13:14:40,
379,821,"…al' DB

## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fixed #816 The --list command line option tries to connect to 'person…
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/821?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@a3c0d13`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `50%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/821/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/821?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #821   +/-   ##
=========================================
  Coverage          ?   86.29%           
=========================================
  Files             ?       20           
  Lines             ?     2262           
  Branches          ?        0           
=========================================
  Hits              ?     1952           
  Misses            ?      310           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/821?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/821/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `79.86% <50%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/821?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/821?src=pr&el=footer). Last update [a3c0d13...437dc14](https://codecov.io/gh/dbcli/pgcli/pull/821?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@isank Lovely! 🎉 

Please add your name and contribution to the changelog and AUTHORS. Otherwise, this is ready to merge.
@j-bennet Done :)
👍 ",2017-12-16 15:39:59,2017-12-17 03:02:45
380,820,"## Description
It's related to other PR: https://github.com/dbcli/pgcli/pull/815

And it's a result of discussion with @j-bennet (https://github.com/dbcli/pgcli/pull/815#issuecomment-349180420)


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Use other prompt (prompt_dsn) when connecting using --dsn parameter (attempt 2)
@msztolcman Thank you for the PR! I want to try it out before merging, but looks good so far. I should be able to review tonight.
@msztolcman You're missing the reference link in changelog.rst (that's why the build breaks in travis). Please add that:
```
.. _`Marcin Sztolcman`: https://github.com/msztolcman
```
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=h1) Report
> Merging [#820](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/ee3ea177a8550d43e8dc2020dfb3f86045d3d5a8?src=pr&el=desc) will **decrease** coverage by `0.04%`.
> The diff coverage is `80%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/820/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #820      +/-   ##
==========================================
- Coverage   86.36%   86.32%   -0.05%     
==========================================
  Files          20       20              
  Lines        2252     2260       +8     
==========================================
+ Hits         1945     1951       +6     
- Misses        307      309       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/820/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `79.96% <80%> (-0.07%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=footer). Last update [ee3ea17...df2bb2b](https://codecov.io/gh/dbcli/pgcli/pull/820?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

All good now. Merging!

@msztolcman Thank you for sticking with it, despite all the  changes. 🍫 ",2017-12-11 03:53:01,2017-12-16 22:14:58
381,819,"## Description
<!--- Describe your changes in detail. -->

Changelog update before releasing 1.8.2.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Changelog update to release 1.8.2.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/819?src=pr&el=h1) Report
> Merging [#819](https://codecov.io/gh/dbcli/pgcli/pull/819?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/c664738a79f20e2c2919177a667d586e4f802368?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/819/graphs/tree.svg?width=650&height=150&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/819?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #819   +/-   ##
=======================================
  Coverage   86.36%   86.36%           
=======================================
  Files          20       20           
  Lines        2252     2252           
=======================================
  Hits         1945     1945           
  Misses        307      307
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/819?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/819?src=pr&el=footer). Last update [c664738...4d6a934](https://codecov.io/gh/dbcli/pgcli/pull/819?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

:ok_hand: ",2017-12-05 03:13:07,2017-12-12 07:05:32
382,818,"## Description
<!--- Describe your changes in detail. -->

There was a bugfix in cli_helpers (https://github.com/dbcli/cli_helpers/pull/32).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","cli_helpers bump (fixes a python 2.7 bug).
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=h1) Report
> Merging [#818](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/5f88e8a042900337e55efb5083e84410c37cbd3c?src=pr&el=desc) will **decrease** coverage by `0.17%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/818/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #818      +/-   ##
==========================================
- Coverage   86.54%   86.36%   -0.18%     
==========================================
  Files          20       20              
  Lines        2252     2252              
==========================================
- Hits         1949     1945       -4     
- Misses        303      307       +4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/818/diff?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.03% <0%> (-0.69%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=footer). Last update [5f88e8a...f7726be](https://codecov.io/gh/dbcli/pgcli/pull/818?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice! Merged.",2017-12-01 03:19:14,2017-12-02 01:37:21
383,817,"## Description
The result opens in a new window rather than the current window. So every time I run a query I have to close the new window(press `q`) to get back to writing queries. Please see attached screencast. The results used to show in the current window but after a system update a couple of months ago it started showing results in a new window.

## Your environment
python `3.6.3`
![screencast_11-27-2017_03_42_40-pm](https://user-images.githubusercontent.com/6215982/33256045-41d1671a-d38b-11e7-95be-8d082aa2d26f.gif)


Tried it in bash and zsh. Tried using fresh `bashrc`. Tried a different terminal emulator.

-  OS: Arch Linux (4.13.12-1-ARCH)
-  pgcli version: `1.8.1`
-  `pip freeze` output:
```
backports.csv==1.0.5
cli-helpers==0.2.3
click==6.7
configobj==5.0.6
humanize==0.5.1
pgcli==1.8.1
pgspecial==1.9.0
prompt-toolkit==1.0.15
psycopg2==2.7.3.2
Pygments==2.2.0
setproctitle==1.1.10
six==1.11.0
sqlparse==0.2.4
terminaltables==3.1.0
wcwidth==0.1.7
```","Results are appearing in a new window
That's not a new window but your pager, probably `less`, that helps you to scroll through a large result.

What behaviour do you expect?
This -> ![pgcli demo](https://github.com/dbcli/pgcli/blob/master/screenshots/pgcli.gif)

Where query results are shown inline instead of a new window.

As you can see in the screencast, even if I'm connecting to a new database(which is a one line output), less is being invoked.
Yup. That is the pager. @lutzhorn was right on the money. 
The good news is you can configure that pager to do what the pgcli demo does. 
Looks like you're using the latest version of pgcli. If you open up your config file (~/.config/pgcli/config) you'll see a line that is commented out: https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L79

Just uncomment the line and restart pgcli and viola. 

If that line doesn't exist in your config file just copy that line into the config file and uncomment it, and you'll be good to go. 

Older versions of pgcli used to enforce that config option, but it is generally frowned upon to mess with a user's environment vars. So we decided to make it an option.

I hope that helps.
I ran into this issue too. Is this the new default behavior?

Ah so it uses the `$PAGER` env var, which I had set to `less` for some reason - no idea where this is being set though. Wouldn't it be better to name it `PGCLI_PAGER`, or is this for compatibility with `psql`, or is it a unix standard thing?

---

So it looks like its a standard unix thing used by `man` and others to view the contents of a file. It doesn't feel like it makes sense to use it for a repl though - because we are not viewing files per-se.

---

So `oh-my-zsh` appears to set the `PAGER` variable to `less` using:

```
env_default PAGER ""less""
```
@vjpr It's just that pgcli and mycli stopped overriding `less` options if those are already set in the environment, because that was intrusive. Now LESS is only set if it's unset. For more information, see here:

http://www.mycli.net/pager

But it's possible to use `export LESS=""-XFR""`, or override the pager in `pgclirc` like @amjith mentioned above, to get the same behavior as before.
I'm going to close the issue - please flee to reopen if you still have problems, @afm-sayem!",2017-11-27 07:56:42,2017-12-14 22:20:45
384,816,"## Description
When running `pgcli --list` to get a list of my databases I get an error:
```
$ pgcli --list
FATAL: database ""andrew"" does not exist
```

I think the expected behaviour is that it connects to a known standard database such as ""postgres"" rather than my non-existent personal database.

A workaround is:
```
$ pgcli --list postgres
```

## Your environment
<!-- This gives us some more context to work with. -->

```
$ uname -a
Linux zhaan 4.13.0-16-generic #19-Ubuntu SMP Wed Oct 11 18:35:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
```
```
$ pgcli --version
Version: 1.8.1
```
<details>
  <summary>pip freeze</summary>
  <pre>
agate==1.6.0
agate-dbf==0.2.0
agate-excel==0.2.1
agate-sql==0.5.2
asn1crypto==0.22.0
Babel==2.4.0
backports.csv==1.0.5
backports.ssl-match-hostname==3.5.0.1
cached-property==1.3.0
certifi==2017.4.17
cffi==1.10.0
chardet==3.0.4
cli-helpers==0.2.3
click==6.7
colorama==0.3.7
configobj==5.0.6
cryptography==2.0.2
csvkit==1.0.2
dbfread==2.0.7
docker-compose==1.8.0
docker-py==1.9.0
dockerpty==0.4.1
docopt==0.6.2
enum34==1.1.6
et-xmlfile==1.0.1
funcsigs==1.0.2
functools32==3.2.3.post2
future==0.16.0
futures==3.1.1
greenlet==0.4.11
httplib2==0.9.2
humanize==0.5.1
idna==2.5
ipaddress==1.0.18
isodate==0.5.4
jdcal==1.3
jrnl==1.9.8
jsonschema==2.5.1
kaptan==0.5.8
keyring==10.4.0
keyrings.alt==2.2
leather==0.3.3
libtmux==0.6.3
mock==2.0.0
msgpack-python==0.4.8
mycli==1.11.0
neovim==0.1.13
openpyxl==2.4.8
parsedatetime==2.4
pbr==2.0.0
pgcli==1.8.1
pgspecial==1.9.0
prompt-toolkit==1.0.15
psycopg2==2.7.3.2
pyasn1==0.1.9
pycparser==2.18
pycrypto==2.6.1
pycurl==7.43.0
Pygments==2.2.0
pygobject==3.24.1
PyMySQL==0.7.11
python-apt==1.4.0b3
python-dateutil==1.5
python-debian==0.1.30
python-debianbts==2.6.1
python-slugify==1.2.4
pytimeparse==1.1.6
pytz==2017.2
pyxdg==0.25
PyYAML==3.12
ranger==1.8.1
requests==2.18.1
seashells==0.1.2
SecretStorage==2.3.1
setproctitle==1.1.10
six==1.11.0
SQLAlchemy==1.1.12
sqlparse==0.2.4
terminaltables==3.1.0
test==2.3.4.5
texttable==0.9.1
tmuxp==1.2.6
trollius==2.0.1
tzlocal==1.4
Unidecode==0.4.21
urllib3==1.21.1
wcwidth==0.1.7
websocket-client==0.44.0
xlrd==1.0.0
</pre>
</details>
","The --list command line option tries to connect to 'personal' DB
And `psql` actually does the right thing in this case, so that's embarrassing. Good bug report!
It's because the code tries to connect to database before moving on to check if `--list` argument has been provided or not
```
    if dsn is not '':
        ...
    else:
        pgcli.connect(database, host, user, port)

    if list_databases:
        cur, headers, status = pgcli.pgexecute.full_databases()

        title = 'List of databases'
        settings = OutputSettings(
            table_format='ascii',
            missingval='<null>'
        )
        formatted = format_output(title, cur, headers, status, settings)
        click.echo_via_pager('\n'.join(formatted))

        sys.exit(0)
```
@isank Do you want to submit a PR for that? Looks like you have investigated the issue already!",2017-11-20 10:44:31,2017-12-17 03:02:46
385,815,"## Description
I use `--dsn`/`-D` and dsn_aliases very often, and I am connecting often to databases called identically but on different hosts (for example on testing env, on stage env etc). There is no host specified in this case (dsn_alias isn't parsed by pgcli itself, but passed to PGExecute, so it's unusable). But I found dsn alias very useful in prompt. I decided to use different prompts for both cases (connecting with --dsn option and without).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Use other prompt (prompt_dsn) when connecting using --dsn parameter
@msztolcman When connecting with `-D` or dsn, pgexecute does not know the connection details, so it reads them:

https://github.com/dbcli/pgcli/blob/5f88e8a042900337e55efb5083e84410c37cbd3c/pgcli/pgexecute.py#L208-L216

So after that read, you're supposed to have host, user etc. to display in prompt. Is it not working?
@msztolcman Thank you for the PR! It is a useful feature. Could we perhaps keep the part with parsing `\\dsn` in command prompt and replacing it with dsn name, but not add a new config option? I'm reluctant to add new config options, as that makes `pgclirc` grow out of control and become intimidating. Instead, you could use an alias script to connect to these databases with `pgcli --prompt ""\dsn >"" -D dsn_name`.

What do you think?
Hi @j-bennet,
Sorry, I missed your previous answer :(
So, answering first question:

> So after that read, you're supposed to have host, user etc. to display in prompt. Is it not working?

No, it's not. But theoretically I can parse DSN by myself and set this data, but I don't know there is no caveats for it. Or use library like https://github.com/gruns/furl (or similar), to not reinvent the wheel :) What do you think?

About second one:
There is few solutions.
First (and IMHO best one) I described above (parsing dsn). It gives us all tokens we need and support in ""normal"" prompt.
Second is proposed by you, but it's a little uncomfortable, because maintaining this require always to add new dsn to pgcli's config file and create new shell alias/script for this.
Third is to leave my original version.
Fourth is to allow to use environment variables for this kind of stuff you don't want to put in config file :)
And last one is to expand prompt parser to handle some conditions (if dsn use dsn, instead use other one). It has some advantages (do not show '(none)' as port if none is specified for example), but also complexity of this is a little to big like for me.
@msztolcman So what do you see in prompt when connecting with dsn alias?

> Second is proposed by you, but it's a little uncomfortable, because maintaining this require always to add new dsn to pgcli's config file and create new shell alias/script for this.

For the solution I had in mind, you'd only need one generic alias, for example:

`alias pgclid=""pgcli --prompt '\\dsn >'""`

Then you'd call `pgclid -D some_alias` instead of `pgcli -D some_alias`, and `\\dsn` placeholder would be replaced with the alias.

You would have to add dsn aliases to pgcli config file, yes, but you already do that.

> Third is to leave my original version.

This is still an option.

> Fourth is to allow to use environment variables for this kind of stuff you don't want to put in config file :)

Yeah, those two are equally bad. :)

> And last one is to expand prompt parser to handle some conditions (if dsn use dsn, instead use other one). It has some advantages (do not show '(none)' as port if none is specified for example), but also complexity of this is a little to big like for me.

I was thinking about always using dsn alias in prompt if one is specified, but that seems like a feature a lot of people may dislike.
@j-bennet OK, it's a little bit embarrassing... it looks like it works, but with small issue :( I missed it, and you pointed me in a right direction.

It works fine. I missed there is database name in my prompt after logging into my database using dsn aliases. But my vhost name is quite long, and whole prompt is longer then PGCli.max_len_prompt, and my promt is shortened to only '\d'.

So, there is other issue: there is a condition that is verifying prompt is default or not. My is default, so it just change my prompt :( And even passing prompt as argument to pgcli it doesn't use it, just use '\d'. But I will report it in other issue.
@msztolcman I think `dsn_alias` in prompt can still be a useful change!
@j-bennet OK, I've changed this a little and it's in other PR: https://github.com/dbcli/pgcli/pull/820",2017-11-17 05:41:59,2017-12-04 04:34:41
386,814,"## Description
<!--- Describe your problem as fully as you can. -->

Given this table as seen by psql:

```
icp=# \d pgcli_test
  Table ""public.pgcli_test""
 Column |  Type   | Modifiers
--------+---------+-----------
 points | point[] |

icp=# select * from pgcli_test ;
      points
-------------------
 {""(1,2)"",""(3,4)""}
(1 row)
```

pgcli complains when performing the same select:

```
jw35@/tmp:icp> select * from pgcli_test;
could not convert string to float: '(1,2)'
```

I'd note that I'm new to Postgres arrays and point types and I'm finding the syntax challenging. So it's entirely possible I'm doing something stupid, but I don't think so. In particular ```select points[1]``` works as expected in psql and pgcli so I'm fairly sure I'm correctly creating an array of points.

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.

MacOS Sierra 10.12.6

- [ ] Please provide your CLI version.

1.8.1

- [ ] What is the output of ``pip freeze`` command.

```
$ pip3 freeze
appdirs==1.4.2
arrow==0.10.0
backports.csv==1.0.5
cli-helpers==0.2.3
click==6.7
configobj==5.0.6
cycler==0.10.0
graphviz==0.8.1
humanize==0.5.1
matplotlib==2.0.2
numpy==1.13.1
packaging==16.8
pandas==0.20.3
pgcli==1.8.1
pgspecial==1.8.0
prompt-toolkit==1.0.15
psycopg2==2.7.3.1
Pygments==2.2.0
pyparsing==2.2.0
python-dateutil==2.6.1
pytz==2017.2
setproctitle==1.1.10
six==1.10.0
sqlparse==0.2.3
terminaltables==3.1.0
wcwidth==0.1.7
xmltodict==0.11.0
```

p.s. Many thanks for pgcli - it's awesome and I'm really only reporting this in the hope it can be fixed because having to work on databases containing arrays of points with psql is going to be tedious...","Problem displaying arrays of 'point' data types
Further investigation shows that plain psycopg2 does the same thing, so I think the problem may be there rather than in pgcli. I'll open the issue there and see what happens.
https://github.com/psycopg/psycopg2/issues/613
@jw35 good news, it got fixed with latest release (1.9.0):

```
03/03/18 14:03:27 postgres@localhost:tests> create table psycopg2_test (points point[]);
CREATE TABLE
Time: 0.030s
03/03/18 14:03:28 postgres@localhost:tests> insert into psycopg2_test values ('{""(1,2)"",""(3,4)""}');
INSERT 0 1
Time: 0.011s
03/03/18 14:03:41 postgres@localhost:tests> select * from psycopg2_test;
+-------------------+
| points            |
|-------------------|
| {""(1,2)"",""(3,4)""} |
+-------------------+
SELECT 1
Time: 0.004s
```",2017-11-07 20:09:27,2018-03-03 13:04:37
387,813,"## Description
It gets annoying that the pager is either on (set to `less`) or off (set to `cat`). When the query has a large number of output lines, it's helpful to have the pager on, but when doing a bunch of small queries in preparation for a larger query, it's helpful to have the pager off so you can see the query results in scrollback.

Would it be possible to have a pager option similar to `\x auto` that decides whether to use the pager based on the size of the output?

## Your environment
<!-- This gives us some more context to work with. -->

- OS: Mac OS 10.12.6
- pgcli version: 1.8.1
","Option to intelligently enable pager based on output size (pset is not working)
@maxrothman `export LESS=-XFR` may help here. See [this](http://www.mycli.net/pager) for more information.
Thanks for the tip, but that doesn't match my use-case. I _want_ the screen to clear after I quit the pager, since the whole point is to avoid queries with lots of output from cluttering my scrollback. `less` doesn't seem to have an option for ""exit if less than one screen but leave the file contents on the screen only in that case""
@maxrothman Oh I see, thanks for clarifying that.
@maxrothman: IIUC, that seems possible with `pspg -F`, and I'm effectively surprised that `less -F` does not support that.

https://github.com/okbob/pspg
I'm going to close the issue, because it's not really a bug in `pgcli`, but something that can be managed with the help of pager(s).
@j-bennet though you're correct in theory, in practice, I'm not aware of a standard pager that covers this usecase. I think the usecase is probably common enough to warrant re-opening this issue, and I think there are a few paths to solving it:

* Implement an option in pgcli that only enables the pager for a certain amount of output
* Add documentation for, or ship and point to by default a pager that implements this feature. [This](https://unix.stackexchange.com/questions/107315/less-quit-if-one-screen-without-no-init/205260#205260) is a bash script that might be a good starting point, or writing one in Python might avoid the need for a temp file.
* Contribute to less by fixing [issue 303](http://www.greenwoodsoftware.com/less/bugs.html)

Whatever your preference, I'd be happy to make a pull request.
Out of the options above, I think I'd select 3. I still think it makes more sense to handle this in the pager.
FWIW, [psql handles this with an option](https://www.postgresql.org/docs/7.4/static/app-psql.html):

> When the pager is off, the pager is not used. When the pager is on, the pager is used only when appropriate, i.e. the output is to a terminal and will not fit on the screen. (psql does not do a perfect job of estimating when to use the pager.) \pset pager turns the pager on and off. Pager can also be set to always, which causes the pager to be always used.
@maxrothman `pgcli` also has `pset on/off/auto`. From what I understand, the only behavior you're missing with `pgcli + less` is clearing the screen after long queries, while keeping the output of short queries on screen. Is that right?
I'm looking for `pgcli` to implement the same behavior for `\pset pager` that `psql` has. For example, in `psql`:
```
postgres> \pset pager on
postgres> SELECT table_name from information_schema.tables;
...pager used...
postgres> SELECT table_name from information_schema.tables LIMIT 1;
...pager not used...
```
As expected, with `\pset pager always`, the pager is always used, and with  `\pset pager off`, the pager is never used. In cases where the pager is used, whether the screen is cleared or not afterwards depends on the pager. In cases where it is not, the pager is never invoked.

However, `\pset pager` seems to be completely ignored by `pgcli`:
```
postgres> \pset pager off
postgres> SELECT table_name from information_schema.tables LIMIT 1;
...pager used...
```
So perhaps this issue would be more accurately titled ""pgcli ignores \pset pager value""?
Are y'all still interested in getting this change? I'm happy to contribute it if so.
PRs are always welcome - go ahead!",2017-11-06 20:51:29,2018-09-23 21:34:59
388,812,"## Description
<!--- Describe your changes in detail. -->

Bump pgspecial so it's updated with the next pgcli release.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Bump pgspecial to 1.9.0.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=h1) Report
> Merging [#812](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f17888d8256ebaa409abf4503a95b08b904f076d?src=pr&el=desc) will **decrease** coverage by `0.13%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/812/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #812      +/-   ##
==========================================
- Coverage   86.58%   86.45%   -0.14%     
==========================================
  Files          20       20              
  Lines        2252     2252              
==========================================
- Hits         1950     1947       -3     
- Misses        302      305       +3
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.37% <0%> (-0.52%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=footer). Last update [f17888d...ca14764](https://codecov.io/gh/dbcli/pgcli/pull/812?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Look good! ⛵️ ",2017-10-27 18:58:03,2017-10-29 20:18:28
389,811,"Is it possible to add two options?
- to replace newline characher to whitespace. (eg /newline);
- to cut very long text values;

It would be very useful, because my app stores tracelogs of errors in db, and it's pretty hard to read results of query.","Remove newlines and cut long strings
2nd option (truncate long text values) sounds like it could be a useful feature. I'd be reluctant to replace anything within the fields though - too easy to break things.
I think this would be a cool feature. Something to make this more readable https://dba.stackexchange.com/q/174513/2639
I would like to have this feature too. Maybe I could even make a PR for the issue if it still considered useful. BTW `csvlook` utility from `csvkit` has a similar option `--max-column-width` and it's really helpful.
I don't know if this works for you, but if your using the less pager (which is sort of our default) you can enter `-S` and less stops wrapping lines.
Yeah, I use this trick but it isn't very helpful for really huge
text-cells.
On Sat, 1 Sep 2018 at 11:59, Dick Marinus <notifications@github.com> wrote:

> I don't know if this works for you, but if your using the less pager
> (which is sort of our default) you can enter -S and less stops wrapping
> lines.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/811#issuecomment-417880275>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAAwJNwQPQ1VvLK3vJzWeK5AWrGFoYgMks5uWtkigaJpZM4QJD-S>
> .
>

Closed via https://github.com/dbcli/cli_helpers/pull/48.",2017-10-27 13:31:20,2019-05-05 15:45:43
390,810,"## Description
Increase timeout for quitting pgcli

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Increase timeout for quitting pgcli
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/810?src=pr&el=h1) Report
> Merging [#810](https://codecov.io/gh/dbcli/pgcli/pull/810?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f6742261719662d71439abe9b83dc1f103a2337a?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/810/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/810?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #810   +/-   ##
=======================================
  Coverage   86.54%   86.54%           
=======================================
  Files          20       20           
  Lines        2252     2252           
=======================================
  Hits         1949     1949           
  Misses        303      303
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/810?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/810?src=pr&el=footer). Last update [f674226...c5a0e94](https://codecov.io/gh/dbcli/pgcli/pull/810?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

looks safe to me 👍 
time will tell if that issue is definitely gone",2017-10-22 18:10:45,2017-10-24 12:12:04
391,809,"## Description
Attempt to solve all PEP8 related issues



## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","[Proposal] Fpietka/pep8
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=h1) Report
> Merging [#809](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f6742261719662d71439abe9b83dc1f103a2337a?src=pr&el=desc) will **increase** coverage by `0.01%`.
> The diff coverage is `84.93%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/809/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #809      +/-   ##
==========================================
+ Coverage   86.54%   86.55%   +0.01%     
==========================================
  Files          20       20              
  Lines        2252     2254       +2     
==========================================
+ Hits         1949     1951       +2     
  Misses        303      303
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/tables.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy90YWJsZXMucHk=) | `100% <ø> (ø)` | :arrow_up: |
| [pgcli/pgstyle.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGdzdHlsZS5weQ==) | `81.81% <ø> (ø)` | :arrow_up: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.78% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/parseutils/ctes.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9jdGVzLnB5) | `92.3% <ø> (ø)` | :arrow_up: |
| [pgcli/pgtoolbar.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGd0b29sYmFyLnB5) | `28.12% <0%> (ø)` | :arrow_up: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.55% <100%> (+0.01%)` | :arrow_up: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `82.19% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.65% <100%> (ø)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.81% <100%> (ø)` | :arrow_up: |
| [pgcli/config.py](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree#diff-cGdjbGkvY29uZmlnLnB5) | `93.47% <100%> (ø)` | :arrow_up: |
| ... and [2 more](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=footer). Last update [f674226...e941a0d](https://codecov.io/gh/dbcli/pgcli/pull/809?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@dbcli/pgcli-core I took care of splitting each type of change so we can discuss together if this is something we want, or partially want.

This is of course open for discussion.
Whoa @fpietka, that's one large PR! Out of curiosity, what prompted it?
@fpietka I don't mind the rest of the fixes, but I would rather not enforce [binary operator position](https://github.com/dbcli/pgcli/pull/809/commits/64771cb8e4a875bfbaf083df2c08ed543c08ef9a). @dbcli/pgcli-core - any strong opinions here? We can move the discussion to slack if you prefer.
@j-bennet my opinion is that we should avoid ""multi-line-one-liners"" in the first place.
@meeuw What do you replace those with? :)
It really depends, `if`'s with long conditions could be rewritten by introducting some variables:
```
if (prev_tok and prev_tok.value and
        prev_tok.value.lower().split(' ')[-1] == 'using'):
```
could be rewritten to (A):
```
lastword = prev_tok.value.lower().split(' ')[-1]
if (prev_tok and prev_tok.value and lastword == 'using'):
```
or, using nested `if`'s (B)
```
if (prev_tok and prev_tok.value):
    if prev_tok.value.lower().split(' ')[-1] == 'using'):
```
I think this improves the readability and could help when running the code in a debugger.

I'd prefer (A) btw.

Oh I think this is mostly nitpicking, I'd propose to rewrite this only when doing serious refactors and even then; I think I'd be guilty to add conditions ""as a oneliner"" as well...
@meeuw 👍 

*Readability counts.*
> Oh I think this is mostly nitpicking, I'd propose to rewrite this only when doing serious refactors and even then; I think I'd be guilty to add conditions ""as a oneliner"" as well...

👍 too. Don't pollute commit history with lintwar :-)
@j-bennet what triggered it is one part my editor prompting me the issues, one (big) part my OCD ^^ also I found pep8radius failing me from time to time.
Concerning the binary operator position, maybe we can than change/ignore the rule.

@dbcli/pgcli-core concerning multiline splits I didn't make any decision, nor have strong preference. I think it would be nice to agree on a pattern for the code to come (and we can discard what I've done here) since linter do not enforce anything.

I wasn't intending a lint-war, so I limited my changes to the lint rule of the project and I have no problem discarding part/all of the changes. For myself I'm more interested in the discussion we are now having to know where everybody stand 😁 
To me, these fixes can be split into 2 main groups:

1. Changes that improve code readability.
* Blank lines.
* Whitespaces.
* Adding two spaces before inline comment.
* Removing accidental duplicated spaces.
* Removing unnecessary backslash.
* Fixing long lines.
* Removing unused imports/vars.

2. Changes that are a matter of taste.
* Binary operator position.
* Replacing lambda with def

I'd fix Group 1 and skip Group 2.",2017-10-22 16:37:44,2018-03-01 05:47:06
392,808,"## Description
<!--- Describe your changes in detail. -->

An attempt to fix https://github.com/dbcli/pgcli/issues/805. The `unix_socket_directories` setting may not be present in `pg_settings` view. I'm not sure if this will fully fix the problem, as I was not able to completely reproduce the conditions. But the safeguard is needed when retrieving the setting anyway.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","The unix_socket_directories setting may not be present.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=h1) Report
> Merging [#808](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/6b75bc272768879ba1043da2acf84913477bf7a0?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/808/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #808      +/-   ##
==========================================
- Coverage   86.62%   86.58%   -0.04%     
==========================================
  Files          20       20              
  Lines        2251     2252       +1     
==========================================
  Hits         1950     1950              
- Misses        301      302       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `81.81% <0%> (-0.3%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=footer). Last update [6b75bc2...d3bb129](https://codecov.io/gh/dbcli/pgcli/pull/808?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Right, `fetchone` can return `None` so that should be handled. Nice fix.",2017-10-21 18:12:40,2017-10-22 05:59:55
393,807,"## Description
<!--- Describe your problem as fully as you can. -->

On any OperationalError, such as an invalid SQL query, pgsql says ""Connection reset. Reconnect?"", even though there should be no need to reconnect.

Here is an example of issuing a query to modify `pg_settings` view, for the parameter that cannot be modified in real time:

```
2017-10-21 10:29:05,537 (45148/MainThread) pgcli.pgexecute ERROR - traceback: 'Traceback (most recent call last):\n  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 319, in run\n    yield self.execute_normal_sql(sql) + (sql, True)\n  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 355, in execute_normal_sql\n    cur.execute(split_sql)\nOperationalError: parameter ""unix_socket_directories"" cannot be changed without restarting the server\n\n'
2017-10-21 10:29:05,537 (45148/MainThread) pgcli.main ERROR - sql: u""update pg_settings set setting = null where name = 'unix_socket_directories'"", error: OperationalError('parameter ""unix_socket_directories"" cannot be changed without restarting the server\n',)
```

## Your environment
<!-- This gives us some more context to work with. -->

pgcli 1.8.1 from master (https://github.com/dbcli/pgcli/tree/6b75bc272768879ba1043da2acf84913477bf7a0).","pgcli says ""connection reset"" on any OperationalError
Still happens with 1.8.2 from homebrew.
Same here,  this is very annoying and hides the actual error.
Seems to still be swallowing some recoverable errors. Two examples:

```
select count(1) from some_big_table; -- or any other long running query
Ctrl-C
```
```
copy some_table from 'non-existent-file';
```",2017-10-21 17:40:15,2018-05-15 15:58:22
394,806,"## Description
On running pgcli -h <host_name> -p 5432 -U <user> -d <database> the app crashes with the following traceback:

```
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.20.1', 'console_scripts', 'console')()
  File ""/home/aleksey/.local/lib/python3.5/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/home/aleksey/.local/lib/python3.5/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/home/aleksey/.local/lib/python3.5/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/home/aleksey/.local/lib/python3.5/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""/usr/share/pgcli/pgcli/main.py"", line 595, in cli
    pgcli.run_cli()
  File ""/usr/share/pgcli/pgcli/main.py"", line 278, in run_cli
    self.cli = self._build_cli()
  File ""/usr/share/pgcli/pgcli/main.py"", line 408, in _build_cli
    cli = CommandLineInterface(application=application)
  File ""/home/aleksey/.local/lib/python3.5/site-packages/prompt_toolkit/interface.py"", line 69, in __init__
    assert isinstance(eventloop, EventLoop), 'Passing an eventloop is required.'
AssertionError: Passing an eventloop is required.
```

## Environment

- Ubuntu 16.04.3 LTS
- zsh 5.1.1 (x86_64-ubuntu-linux-gnu)
» pip freeze
adium-theme-ubuntu==0.3.4
asn1crypto==0.23.0
astroid==1.5.3
attrs==17.2.0
autobahn==17.9.3
Automat==0.6.0
autopep8==1.3.2
backports.csv==1.0.5
backports.functools-lru-cache==1.4
certifi==2017.7.27.1
cffi==1.11.1
chardet==3.0.4
cli-helpers==0.2.3
click==6.7
configobj==5.0.6
configparser==3.5.0
constantly==15.1.0
cryptography==2.0.3
docutils==0.12
dodgy==0.1.9
enum34==1.1.6
flake8==3.4.1
future==0.16.0
gyp==0.1
hkdf==0.0.3
httpie==0.9.2
httplib2==0.10.3
humanize==0.5.1
hyperlink==17.3.1
idna==2.6
incremental==17.5.0
ipaddress==1.0.18
isort==4.2.15
lazy-object-proxy==1.3.1
logilab-common==1.1.0
M2Crypto==0.22.6rc4
magic-wormhole==0.10.3
mccabe==0.6.1
ndg-httpsclient==0.4.0
pep257==0.7.0
pep8==1.7.0
pep8-naming==0.4.1
pgcli==1.8.1
pgspecial==1.8.0
Pillow==3.1.2
prompt-toolkit==1.0.15
prospector==0.12.7
psycopg2==2.7.3.1
pyasn1==0.3.6
pyasn1-modules==0.1.4
pycodestyle==2.3.1
pycparser==2.18
pydocstyle==2.0.0
pyflakes==1.6.0
Pygments==2.2.0
pygobject==3.20.0
pylint==1.7.2
pylint-celery==0.3
pylint-common==0.2.5
pylint-django==0.7.2
pylint-flask==0.5
pylint-plugin-utils==0.2.6
PyNaCl==1.1.2
pyOpenSSL==17.3.0
pyroma==2.0.0b2
PyYAML==3.12
requests==2.18.4
requirements-detector==0.5.2
roman==2.0.0
salesforce-bulkipy==1.0
service-identity==17.0.0
setoptconf==0.2.0
setproctitle==1.1.10
simple-salesforce==0.73.0
singledispatch==3.4.0.3
six==1.10.0
snowballstemmer==1.2.1
spake2==0.7
sqlparse==0.2.4
terminaltables==3.1.0
tqdm==4.19.1.post1
Twisted==17.9.0
txaio==2.8.2
txtorcon==0.19.3
unicodecsv==0.14.1
unity-lens-photos==1.0
urllib3==1.22
virtualenv==15.1.0
vulture==0.8.1
wcwidth==0.1.7
wrapt==1.10.11
yapf==0.18.0
zope.interface==4.4.3","Can't start the app: ""AssertionError: Passing an eventloop is required.""
have you tried using a fresh (new) virtualenv? you might need to add `--upgrade` to `pip install` ...
I got the same error :'(
The latest pgcli version with Prompt Toolkit 1.0 is 1.11.0, and with Prompt Toolkit 2.0 is 2.0.0. I would suggest installing one of those.

The command above, `pgcli -h <host_name> -p 5432 -U -d`, looks malformed. I assume you mean it to be `pgcli -h <host_name> -p 5432 -U <username> -d <database name>`, correct?
I updated using pip and now it works properly (I got the error using the version installed with apt-get on Ubuntu 16.04).
Thanks",2017-10-20 14:55:01,2018-10-05 21:52:04
395,805,"## Description
<!--- Describe your problem as fully as you can. -->
`pgcli` crashes immediately after starting when I install it with `pip`.
``` 
$ pgcli
zsh: command not found pgcli

$ pip install pgcli
...
Successfully installed pgcli-1.8.1

$ pgcli
'NoneType' object is not subscriptable
```

After installing with `apt install pgcli` I can run the program, but then I run into the problem described in #466.

## Your environment
<!-- This gives us some more context to work with. -->

OS: Linux Mint 18.2 
Python version: 3.5.2
CLI version: 1.8.1
```
$ pip freeze
alabaster==0.7.9
anaconda-clean==1.0
anaconda-client==1.5.1
anaconda-navigator==1.3.1
argcomplete==1.9.2
astroid==1.4.7
astropy==1.2.1
Babel==2.3.4
backports.csv==1.0.5
backports.shutil-get-terminal-size==1.0.0
beautifulsoup4==4.5.1
bitarray==0.8.1
blaze==0.10.1
bokeh==0.12.2
boto==2.42.0
Bottleneck==1.1.0
cffi==1.7.0
chest==0.2.3
cli-helpers==0.2.3
click==6.7
cloudpickle==0.2.1
clyent==1.2.2
colorama==0.3.7
conda==4.3.29
conda-build==2.0.2
configobj==5.0.6
contextlib2==0.5.3
cryptography==1.5
cycler==0.10.0
Cython==0.24.1
cytoolz==0.8.0
dask==0.11.0
datashape==0.5.2
decorator==4.0.10
dill==0.2.5
docutils==0.12
dynd==0.7.3.dev1
et-xmlfile==1.0.1
fastcache==1.0.2
filelock==2.0.6
Flask==0.11.1
Flask-Cors==2.1.2
gevent==1.1.2
greenlet==0.4.10
h5py==2.6.0
HeapDict==1.0.0
humanize==0.5.1
idna==2.1
imagesize==0.7.1
ipykernel==4.5.0
ipython==5.1.0
ipython-genutils==0.1.0
ipywidgets==5.2.2
itsdangerous==0.24
jdcal==1.2
jedi==0.9.0
Jinja2==2.8
jsonschema==2.5.1
jupyter==1.0.0
jupyter-client==4.4.0
jupyter-console==5.0.0
jupyter-core==4.2.0
lazy-object-proxy==1.2.1
line-profiler==2.0
llvmlite==0.13.0
locket==0.2.0
lxml==3.6.4
MarkupSafe==0.23
matplotlib==1.5.3
mistune==0.7.3
mpmath==0.19
multipledispatch==0.4.8
nb-anacondacloud==1.2.0
nb-conda==2.0.0
nb-conda-kernels==2.0.0
nbconvert==4.2.0
nbformat==4.1.0
nbpresent==3.0.2
networkx==1.11
nltk==3.2.1
nose==1.3.7
notebook==4.2.3
numba==0.28.1
numexpr==2.6.1
numpy==1.11.1
odo==0.5.0
openpyxl==2.3.2
pandas==0.18.1
partd==0.3.6
path.py==0.0.0
pathlib2==2.1.0
patsy==0.4.1
pep8==1.7.0
pexpect==4.0.1
pgcli==1.8.1
pgspecial==1.8.0
pickleshare==0.7.4
Pillow==3.3.1
pkginfo==1.3.2
pluggy==0.5.2
ply==3.9
prompt-toolkit==1.0.15
psutil==4.3.1
psycopg2==2.7.3.1
ptyprocess==0.5.1
py==1.4.34
pyasn1==0.1.9
pycosat==0.6.1
pycparser==2.14
pycrypto==2.6.1
pycurl==7.43.0
pyflakes==1.3.0
Pygments==2.2.0
pylint==1.5.4
pyOpenSSL==16.2.0
pyparsing==2.1.4
pysqlcipher3==1.0.2
pytest==3.2.1
python-bitcoinlib===0.8.1-PENDING
python-dateutil==2.5.3
pytz==2016.6.1
PyYAML==3.12
pyzmq==15.4.0
QtAwesome==0.3.3
qtconsole==4.2.1
QtPy==1.1.2
redis==2.10.5
requests==2.14.2
rope-py3k==0.9.4.post1
ruamel-yaml===-VERSION
scikit-image==0.12.3
scikit-learn==0.17.1
scipy==0.18.1
seaborn==0.8.1
setproctitle==1.1.10
simplegeneric==0.8.1
singledispatch==3.4.0.3
six==1.11.0
snakeviz==0.4.1
snowballstemmer==1.2.1
sockjs-tornado==1.0.3
Sphinx==1.6.3
sphinxcontrib-websupport==1.0.1
spyder==3.0.0
SQLAlchemy==1.0.13
sqlparse==0.2.4
statsmodels==0.6.1
sympy==1.0
tables==3.2.3.1
terminado==0.6
terminaltables==3.1.0
toolz==0.8.0
tornado==4.4.1
tox==2.9.1
traitlets==4.3.0
typing==3.6.2
unicodecsv==0.14.1
virtualenv==15.1.0
wcwidth==0.1.7
Werkzeug==0.11.11
widgetsnbextension==1.2.6
wrapt==1.10.6
xlrd==1.0.0
XlsxWriter==0.9.3
xlwt==1.1.2
```
","Cannot start program after installing with pip
That is very odd. There is a log file located at ~/.config/pgcli/log. 

Would you mind checking that file to see if there were any errors? If so, can you post the contents? 
```
2017-10-13 23:55:24,998 (11138/MainThread) pgcli.main INFO - Default pager found in PAGER environment variable: ""less""
2017-10-13 23:55:25,005 (11138/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/home/torkel/anaconda3/lib/python3.5/site-packages/pgcli/main.py"", line 380, in connect\n    **kwargs)\n  File ""/home/torkel/anaconda3/lib/python3.5/site-packages/pgcli/pgexecute.py"", line 173, in __init__\n    self.connect()\n  File ""/home/torkel/anaconda3/lib/python3.5/site-packages/pgcli/pgexecute.py"", line 225, in connect\n    self.host = self.get_socket_directory()\n  File ""/home/torkel/anaconda3/lib/python3.5/site-packages/pgcli/pgexecute.py"", line 509, in get_socket_directory\n    return cur.fetchone()[0]\nTypeError: \'NoneType\' object is not subscriptable\n'
```

These are the lines concerning my latest session. 
That's really bizarre. Here's what's happening; when you launch pgcli and not provide any arguments (such as hostname), pgcli tries to guess the hostname (or the socketname). In order to find the socket it tries to find where the sockets are stored. It finds out that information by running a postgres command 

```        SELECT setting
        FROM pg_settings
        WHERE name = 'unix_socket_directories'
```

But for some reason this command is returning nothing which results in the error you're seeing. 

Remedy: You can try providing a host such as `pgcli -h 0.0.0.0` to circumvent the problem.

Root cause: I'd like to find out what caused this error to happen in the first place. Can you tell me the following information: 

1. Are you running Postgres on your local system? 
2. What version of Postgres are you running? 
3. Can you launch `psql` and run the SQL command `SELECT setting FROM pg_settings WHERE name = 'unix_socket_directories'`? What does it output?

If you'd like to have a realtime conversation, you can always jump on to gitter and have a chat. 
https://gitter.im/dbcli/pgcli
```
$ pgcli -h 0.0.0.0
Password:  <usual sudo password>
FATAL:  password authentication failed for user ""torkel""
FATAL:  password authentication failed for user ""torkel""
```

I'm running Postgres on my local system, yes. 

```
$ postgres --version
postgres (PostgreSQL) 9.5.9
```
```
$ psql
psql (9.5.9)
Type ""help"" for help.

torkel=> SELECT setting FROM pg_settings WHERE name = 'unix_socket_directories';
 setting 
---------
(0 rows)
```
Hi, 

Fedora26 + current Anaconda + pip-installed pgcli

Also no `unix_socket_directories` in the settings, also the same NoneType error. Circumventing with `-h 0.0.0.0` allows me to use the app properly.
It is possible that `unix_socket_directories` is not present if postgresql server is only listening  on TCP. But it's surprising to me that you can get this far without providing a hostname. If I disable listening on socket, I get an error before `get_socket_directory` is even called:

```
could not connect to server: No such file or directory
	Is the server running locally and accepting
	connections on Unix domain socket ""/tmp/.s.PGSQL.5432""?
```",2017-10-13 21:42:50,2017-10-22 05:59:55
396,804,"## Description
https://github.com/dbcli/cli_helpers/issues/25 breaks pip on some environments due to an incorrect `setup.py`. They released version 1.0.0 which fixes the issue...
","Upgrade cli_helpers dependency to 1.0.0
Opened PR #803 to address it, but it fails CI. Not sure what to do about that...
(This was upgraded).",2017-10-13 18:49:47,2018-02-03 20:36:50
397,803,"This is in order to deal with https://github.com/dbcli/cli_helpers/issues/25, which breaks builds  under some environments

## Description
https://github.com/dbcli/cli_helpers/issues/25 breaks installation due to the usage of a nonexistent `tasks` module. It works in some cases, but on some virtualenvs it does not. cli_helpers released 1.0.0 in which their setup was updated

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Bump cli_helpers dependency to 1.0.0
I've fixed the tests in https://github.com/vmalloc/pgcli/pull/1

There is some weird alignment of the headers here:
https://github.com/vmalloc/pgcli/compare/master...meeuw:patch-1?expand=1#diff-3e5146a0bd380b51a3c6f1307f045616R82

might be due to the tabulate update @tsroten ?
The weird alignment is also in cli_helpers: https://github.com/dbcli/cli_helpers/pull/31
I haven't been able to create a fix for tabulate which is used by cli_helpers for some output formats.
Until this is fixed I think we shouldn't update cli_helpers for pgcli.

Please see my bug report for tabulate at:
https://bitbucket.org/astanin/python-tabulate/issues/131/misalignment-for-wide-characters-in-header
I've created a fix for tabulate; I hope it will be accepted and released soon:
https://bitbucket.org/astanin/python-tabulate/pull-requests/44
@meeuw Nice job working with tabulate on this 😄 
tabulate bump to 0.8.2 now, I think it is time to support cli_helpers 1.0 release.
Superseded by https://github.com/dbcli/pgcli/pull/818.",2017-10-13 18:43:58,2017-12-14 22:12:25
398,802,"## Description
<!--- Describe your changes in detail. -->

This uses Ctrl + C to clean up after test scenario (thanks @meeuw).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- ~[ ] I've added my name to the `AUTHORS` file (or it's already there)~.
","Use ctrl + c instead of ctrl + u to clean up command line after tests.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/802?src=pr&el=h1) Report
> Merging [#802](https://codecov.io/gh/dbcli/pgcli/pull/802?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9c87b79f4b1966ee357011ca4e0efa709f5418bc?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/802/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/802?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #802   +/-   ##
=======================================
  Coverage   86.49%   86.49%           
=======================================
  Files          20       20           
  Lines        2251     2251           
=======================================
  Hits         1947     1947           
  Misses        304      304
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/802?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/802?src=pr&el=footer). Last update [9c87b79...e118003](https://codecov.io/gh/dbcli/pgcli/pull/802?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-10-13 18:04:17,2017-10-13 18:20:47
399,801,"## Description
<!--- Describe your changes in detail. -->
Pretty self explanatory. Wouldn't say this requires a mention in `changelog.md` or credit in `AUTHORS`.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Adds install command for Debian
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/801?src=pr&el=h1) Report
> Merging [#801](https://codecov.io/gh/dbcli/pgcli/pull/801?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d1866191b8e7c4e4f9279ebff5de2628a7656289?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/801/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/801?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #801   +/-   ##
=======================================
  Coverage   86.49%   86.49%           
=======================================
  Files          20       20           
  Lines        2251     2251           
=======================================
  Hits         1947     1947           
  Misses        304      304
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/801?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/801?src=pr&el=footer). Last update [d186619...6d85264](https://codecov.io/gh/dbcli/pgcli/pull/801?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thanks for the PR @torkelrogstad!
@lhw I noticed that the debian package for pgcli is on 1.6.0 would you mind updating that to the latest version? ",2017-10-13 00:00:24,2017-10-13 00:23:25
400,800,"## Description
Don't quote the database names regardless of the mixed case.


## Checklist
- [X] I've added this contribution to the `changelog.md`.

","Do NOT escape database names.
Addresses #799 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=h1) Report
> Merging [#800](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7c720a07652d705376af6bf4fcfe6a65e0df3ddc?src=pr&el=desc) will **decrease** coverage by `<.01%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/800/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #800      +/-   ##
==========================================
- Coverage    86.5%   86.49%   -0.01%     
==========================================
  Files          20       20              
  Lines        2252     2251       -1     
==========================================
- Hits         1948     1947       -1     
  Misses        304      304
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.54% <ø> (-0.01%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=footer). Last update [7c720a0...614a42f](https://codecov.io/gh/dbcli/pgcli/pull/800?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-10-11 19:59:05,2017-10-11 20:22:48
401,799,"pgcli==1.8.1
Tryin to connect to database:
`\c ""Kkar.Billing""`
and get this error:
`FATAL:  database """"Kkar.Billing"""" does not exist`

And if I connect this way:
`\c Kkar.Billing`
there is no error

The problem is that database autocomplete adds quotes by default if db name contains mixed case.
![image](https://user-images.githubusercontent.com/6605234/31445033-f8048536-aea5-11e7-8c5c-b492ca89adac.png)
","Autocomplete adds extra quotes to database name
This is an oversight on our part. pgcli tries to be helpful by quoting mixed case table names and column names but we didn't think about database names. :disappointed: 

I'll see what I can do about this. Thanks for reporting the bug. :)
It has appeared in 1.8.1, in 1.8.0 everything was fine.
Fixed by #800",2017-10-11 14:02:36,2018-05-14 15:11:50
402,798,"## Description

This is an attempt to fix the `tee` test breaking: https://github.com/dbcli/pgcli/issues/795.

Also, this fixes the error in `notee` test which should not be `notee` (that's a mycli command) but `\o`: https://github.com/dbcli/pgcli/issues/797.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Fix for tests breaking after tee.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=h1) Report
> Merging [#798](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/915ffb70a70a855bfc8cbc2d3b7ab9828e102775?src=pr&el=desc) will **increase** coverage by `0.09%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/798/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #798      +/-   ##
==========================================
+ Coverage   86.31%   86.41%   +0.09%     
==========================================
  Files          19       20       +1     
  Lines        2244     2252       +8     
==========================================
+ Hits         1937     1946       +9     
+ Misses        307      306       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/pgliterals/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9fX2luaXRfXy5weQ==) | | |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.2% <0%> (ø)` | |
| [pgcli/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=tree#diff-cGdjbGkvX19pbml0X18ucHk=) | `100% <0%> (ø)` | |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `100% <0%> (+19.96%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=footer). Last update [915ffb7...952eb9f](https://codecov.io/gh/dbcli/pgcli/pull/798?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-10-06 18:22:06,2017-10-06 19:25:21
403,797,"Here is a `pgcli` session output when setting an output file name to `zzz`, writing some output and issuing `notee`:

```
(pgcli) --- src/pgcli» pgcli world
irina@/tmp:world> \o zzz
Writing to file ""/Users/irina/src/pgcli/zzz""
Time: 0.001s
irina@/tmp:world> select 'foo'
Time: 0.001s
irina@/tmp:world> notee
Time: 0.001s
irina@/tmp:world>
Goodbye!
```

Let's see what we wrote to file:

```
(pgcli) --- src/pgcli» cat zzz
select 'foo'
+------------+
| ?column?   |
|------------|
| foo        |
+------------+
SELECT 1

notee
syntax error at or near ""notee""
LINE 1: notee
        ^
```

pgcli errors out on `notee` here:

```
notee
syntax error at or near ""notee""
LINE 1: notee
```",Issuing notee command writes an error to output file,2017-10-06 17:55:01,
404,796,"## Description
Use temporary directory as config directory.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Use termporary config in tests
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@5435b46`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/796/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=tree)

```diff
@@           Coverage Diff            @@
##             master    #796   +/-   ##
========================================
  Coverage          ?   86.5%           
========================================
  Files             ?      20           
  Lines             ?    2252           
  Branches          ?       0           
========================================
  Hits              ?    1948           
  Misses            ?     304           
  Partials          ?       0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/config.py](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=tree#diff-cGdjbGkvY29uZmlnLnB5) | `93.47% <66.66%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=footer). Last update [5435b46...e1f066c](https://codecov.io/gh/dbcli/pgcli/pull/796?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@oxitnik This looks fine, but it look me some time to understand what's going on. Please add some comments to make it easier for other people working with this code later.
@j-bennet  Added some comments. Also made XDG_CONFIG_HOME variable to be restored after test.
Very nice. Thanks!

🍫 ",2017-10-03 19:41:06,2017-10-06 19:51:46
405,795,"pgcli build breaks on `tee` test case all the time:

https://github.com/dbcli/pgcli/blob/915ffb70a70a855bfc8cbc2d3b7ab9828e102775/tests/features/iocommands.feature#L10-L17

We need to figure out how to make that test better.","Build constantly breaks on the same test case in end-to-end tests
Maybe we should raise all timeouts to 5 in:
https://github.com/dbcli/pgcli/blob/915ffb70a70a855bfc8cbc2d3b7ab9828e102775/tests/features/steps/iocommands.py
I haven't seen this one lately. Closing for now.",2017-09-25 16:43:12,2018-07-27 21:06:27
406,794,"## Description
Similar to the configurable NULL output @avdd added last year, this adds two config settings, `false_string` and `true_string`, which control how bools are displayed. The defaults are a red ""false"" and a green ""true"", respectively.

![0029-09-24 15 32 45](https://user-images.githubusercontent.com/18589234/30783074-b29541ae-a13d-11e7-8080-6f76d89ec9fb.png)


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Coloured and customizable boolean output
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=h1) Report
> Merging [#794](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/915ffb70a70a855bfc8cbc2d3b7ab9828e102775?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/794/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #794      +/-   ##
==========================================
+ Coverage   86.31%   86.35%   +0.03%     
==========================================
  Files          19       19              
  Lines        2244     2250       +6     
==========================================
+ Hits         1937     1943       +6     
  Misses        307      307
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.23% <0%> (+0.2%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=footer). Last update [915ffb7...821e7a5](https://codecov.io/gh/dbcli/pgcli/pull/794?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@koljonen I've been reviewing the PR and I have a few concerns about the way the coloring in implemented. 

I'd prefer to use a more standard way of coloring the output, say using the pygments library instead of using the terminal escape keys. They are not portable and they make it cryptic for the user to change in the future.

You've seen how we provide a way for the user to override the colors of our drop down menu in the config file (see [here](https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L131)). I would prefer to take that approach.

I know that @tsroten has implemented a similar concept for mycli. https://github.com/dbcli/mycli/pull/462. It would be nice to match the behavior. 

Thoughts? 
I wonder if we should modify the [`style_output` preprocessor](https://github.com/dbcli/cli_helpers/blob/master/cli_helpers/tabular_output/preprocessors.py#L145) in CLI Helpers to be more generic and be able to handle field-by-field coloring instead of just row-by-row coloring.",2017-09-24 13:44:13,2018-03-01 05:46:54
407,793,"## Description
<!--- Describe your changes in detail. -->

Changelog update for a bugfix release 1.8.1.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- ~[ ] I've added my name to the `AUTHORS` file (or it's already there)~.
","Changelog update to release 1.8.1.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=h1) Report
> Merging [#793](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d651b9508df416e095cb13d9abaa72f02f42e243?src=pr&el=desc) will **increase** coverage by `0.17%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/793/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #793      +/-   ##
==========================================
+ Coverage   86.14%   86.31%   +0.17%     
==========================================
  Files          19       19              
  Lines        2244     2244              
==========================================
+ Hits         1933     1937       +4     
+ Misses        311      307       -4
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.65% <0%> (+0.33%)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.11% <0%> (+0.36%)` | :arrow_up: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <0%> (+16.66%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=footer). Last update [d651b95...2205dba](https://codecov.io/gh/dbcli/pgcli/pull/793?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good! 🚢 ",2017-09-19 18:30:20,2017-09-19 19:21:14
408,792,"## Description
Require cli_helpers 0.2.3 (fix #513)


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Require cli_helpers 0.2.3 (fix #513)
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/792?src=pr&el=h1) Report
> Merging [#792](https://codecov.io/gh/dbcli/pgcli/pull/792?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/64f056c61f512c81b71a8b18a23d7907d9b02549?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/792/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/792?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #792   +/-   ##
=======================================
  Coverage   86.31%   86.31%           
=======================================
  Files          19       19           
  Lines        2244     2244           
=======================================
  Hits         1937     1937           
  Misses        307      307
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/792?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/792?src=pr&el=footer). Last update [64f056c...ea6a505](https://codecov.io/gh/dbcli/pgcli/pull/792?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@meeuw are you sure it's #513 you're fixing?
No, it's #791 ",2017-09-18 18:42:13,2017-09-18 23:27:11
409,791,"## Description
<!--- Describe your problem as fully as you can. -->

<img width=""1135"" alt=""screen shot 2017-09-17 at 15 06 21"" src=""https://user-images.githubusercontent.com/3106990/30524510-cc7f85e4-9bba-11e7-9708-758d0af7dd70.png"">

For some queries (could not narrow it down, other than it seems to happen when the results are less then 1000) results are not shown.

I attached a screenshot (left Postico, right pgcli).

I only experience this since 1.8.0, which gave me really nice ""shadow autocomplete"", but seemingly also this bug.

I really love pgcli! Thanks to all maintainers and contributors.



## Your environment
<!-- This gives us some more context to work with. -->

- MacOS High Sierra 10.13 Beta
- PGcli 1.8.0
- iTerm2 3.0.15

```
agate==1.6.0
agate-dbf==0.2.0
agate-excel==0.2.1
agate-sql==0.5.2
astroid==1.5.3
Babel==2.4.0
*Confidential repo removed*
certifi==2017.7.27.1
chardet==3.0.4
click==6.7
csvkit==1.0.2
csvtools==0.5.1
dbfread==2.0.7
et-xmlfile==1.0.1
flake8==3.4.1
future==0.16.0
idna==2.5
isodate==0.5.4
isort==4.2.15
jdcal==1.3
lazy-object-proxy==1.3.1
leather==0.3.3
mccabe==0.6.1
openpyxl==2.4.8
parsedatetime==2.4
pycodestyle==2.3.1
pyflakes==1.5.0
pylint==1.7.2
python-dotenv==0.6.4
python-slugify==1.2.4
pytimeparse==1.1.6
pytz==2017.2
requests==2.18.3
six==1.10.0
sparkpost==1.3.5
SQLAlchemy==1.1.13
Unidecode==0.4.21
urllib3==1.22
wrapt==1.10.10
xlrd==1.0.0
```
","Bug: Results sometimes get not shown
@meeuw Do you think this may be a result of switching to a generator vs list for displaying results? From this issue it seems like the generator is exhausted somewhere, or reading and swallowing the first few lines.
It surely smells like it, but I cannot reproduce this, @brasilikum could you please tell us which version of cli_helpers is installed? We've had this with mycli but that was in the conditional pager support (which isn't in pgcli).
@meeuw How do I do that?
I installed pgcli via brew
I can reproduce your error by using an older version of cli_helpers. I've updated the dependencies for setup.py and @tsroten is working on getting it updated on homebew.
The pull request has been submitted to Homebrew. Once, it's merged, I'll post here.
@brasilikum Ok, Homebrew has been updated! You should be able to do:
```bash
brew update
brew upgrade pgcli
```
Can confirm, it works! Thanks",2017-09-17 20:15:33,2017-09-21 11:53:23
410,790,"## Description
Remove shebang and git execute permission from pgcli/main.py.

pgcli/main.py can't be executed directly because of the package structure.
removal of the shebang is required for packaging in Fedora


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Remove shebang and git execute permission from pgcli/main.py.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=h1) Report
> Merging [#790](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/31305e560072883a4a54b21b60806a8c3958cc95?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/790/graphs/tree.svg?height=150&token=XdciEnQkL2&width=650&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #790   +/-   ##
=======================================
  Coverage   86.31%   86.31%           
=======================================
  Files          19       19           
  Lines        2244     2244           
=======================================
  Hits         1937     1937           
  Misses        307      307
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.03% <0%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=footer). Last update [31305e5...d81faef](https://codecov.io/gh/dbcli/pgcli/pull/790?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-09-15 18:48:16,2017-09-15 21:46:14
411,789,"## Description

It is typical for command-line tools to show the help message when a `-h` is passed in. In pgcli we use the -h switch to pass in the host name. But if now argument is passed after the `-h` option it is a good chance that the user wants to see the help message. So it'll be nice to show the help message instead of presenting an error that says we need a hostname. 

The idea came from [Laura](https://twitter.com/codingcatgirl/status/908393026996797442) via Twitter.


","Show help for -h option without any parameters
I checked this one a bit, but it seems we can't do this with click.
First I tried to customize help parameter (http://click.pocoo.org/5/documentation/#help-parameter-customization), but it got overloaded by our host parameter.
Then I thought about having an optional parameter for host, to fallback on help message, but it seems click can't do that: https://github.com/pallets/click/issues/528#issuecomment-192224795
You're right the limitations of click makes it extremely difficult to implement this. I'm going to close this since it's a nice to have feature.",2017-09-14 18:26:31,2017-12-28 13:48:22
412,788,"## Description
<!--- Describe your changes in detail. -->

Changelog update before releasing 1.8.0.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- ~[ ] I've added my name to the `AUTHORS` file (or it's already there)~.
","Changelog update to release 1.8.0.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/788?src=pr&el=h1) Report
> Merging [#788](https://codecov.io/gh/dbcli/pgcli/pull/788?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a58349dd34f024ef446869456a3256ba2fb2dc3e?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/788/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/788?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #788   +/-   ##
=======================================
  Coverage   86.31%   86.31%           
=======================================
  Files          19       19           
  Lines        2244     2244           
=======================================
  Hits         1937     1937           
  Misses        307      307
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/788?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/788?src=pr&el=footer). Last update [a58349d...148f8c2](https://codecov.io/gh/dbcli/pgcli/pull/788?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-09-13 03:11:22,2017-09-14 20:00:09
413,787,"## Description
I would like to check in my pgclirc file, but do NOT want to keep sensitive DB URLs in the file.

Wondering if there's a way to support something like
```
[alias-dsn]
mydb = $MYDBURL
```

as opposed to having the actual URL in the config file.","Is there a way to use ENV variables for DSNs in the config file?
+1
We're using `configobj` module to parse config files, and it looks like it has no support for env variables. There's a feature request open, but I don't see it attempted:

https://github.com/DiffSK/configobj/issues/144",2017-09-12 20:39:12,
414,786,"## Description
Drop wcwidth dependency (this is only used in cli_helpers which is a dependency for pgcli)

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Drop wcwidth dependency
👍 ",2017-09-10 13:16:42,2017-09-10 16:03:21
415,785,"## Description
Remove the workaround present for importing `OrderedDict` in python versions prior to 2.7.

[OrderedDict docs showing it was added in 2.7](https://docs.python.org/2/library/collections.html#collections.OrderedDict)



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Remove OrderedDict workaround for python < 2.7
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=h1) Report
> Merging [#785](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/b136196f29599c223db5323a8020ce3aad40d41c?src=pr&el=desc) will **increase** coverage by `3.39%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/785/graphs/tree.svg?token=XdciEnQkL2&width=650&src=pr&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #785      +/-   ##
=========================================
+ Coverage   82.91%   86.3%   +3.39%     
=========================================
  Files          20      19       -1     
  Lines        2329    2234      -95     
=========================================
- Hits         1931    1928       -3     
+ Misses        398     306      -92
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `90.78% <100%> (+2.18%)` | :arrow_up: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.54% <100%> (+0.38%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=footer). Last update [b136196...82d84ec](https://codecov.io/gh/dbcli/pgcli/pull/785?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Ah yes, it's about time.

Thanks for the PR!",2017-08-20 13:42:37,2017-08-21 00:56:06
416,784,"## Description
Starting from 1.7.0 pgcli show results of every command in less (pager). Rolling back to 1.6.0 or earlier helps to get results ""in place"". It affects commands like ""\l"" and results of queries too.

## Your environment
macOS, pgcli 1.7.0, python 3.6.2
","Command results in less in 1.7.0
This happens because from 1.7.0, `pgcli` will not interfere with `LESS` environment variable unless it is set, and the default for `less` is not the best.

You may want to set it as follows:

```
$ export LESS=""-XFR""
```

More about pager configuration:

https://www.mycli.net/pager
It helps! Thank you :)",2017-08-17 21:41:02,2017-08-17 22:04:41
417,783,"## Description
When using `\df`, autocomplete do not show database function (those displayed in the result of the command.

## Your environment
- OSX 10.12.5
- pgcli master","Function autocomplete do not autocomplete database functions
Not sure when this was fixed, but it's working in 1.10.3.

<img width=""644"" alt=""pgcli-df"" src=""https://user-images.githubusercontent.com/637013/43346473-18935a50-91a6-11e8-953c-fc6b843ff8e0.png"">
",2017-08-12 13:55:48,2018-07-27 21:05:23
418,782,"## Description
Port auto_vertical feature test from mycli to pgcli


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.","Port auto_vertical feature test from mycli to pgcli
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=h1) Report
> Merging [#782](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/8c8b6816ca9bea1d4611e23ad73a22018605371a?src=pr&el=desc) will **increase** coverage by `<.01%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/782/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #782      +/-   ##
==========================================
+ Coverage   86.31%   86.31%   +<.01%     
==========================================
  Files          19       19              
  Lines        2243     2244       +1     
==========================================
+ Hits         1936     1937       +1     
  Misses        307      307
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.03% <0%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=footer). Last update [8c8b681...ca88e62](https://codecov.io/gh/dbcli/pgcli/pull/782?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@meeuw Good work!

I think the command-line argument name should match the config option in the config file (`expand` and `auto_expand`). I know that @amjith and @j-bennet talked about removing one of those config options, so it might be good to hear from them what the final wording will be.
@meeuw @tsroten Yes, we were talking about having `expand` set to one of `""on"", ""off"", ""auto""`, and removing `auto_expand`. I think it would be a good change, to keep the exploding number of config options at bay.
@meeuw Sorry this PR has been sitting a while, I think it's fine to merge. We can refactor `expand` and `auto_expand` separately from this. This branch only needs merge conflicts resolved.
@j-bennet thanks for the reminder; I've rebased the branch
👍 Thank you!",2017-08-12 11:05:05,2017-09-05 21:12:42
419,781,"## Description
Fix TODO, optionally use POSTGRES_USER, POSTGRES_HOST POSTGRES_PASSWORD from environment

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.","Fix TODO, optionally use POSTGRES_USER, POSTGRES_HOST POSTGRES_PASSWORD from environment
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/781?src=pr&el=h1) Report
> Merging [#781](https://codecov.io/gh/dbcli/pgcli/pull/781?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1e77eab21b8e3b6592007123bf1daec759bdb5e5?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/781/graphs/tree.svg?height=150&width=650&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/781?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #781   +/-   ##
=======================================
  Coverage   82.85%   82.85%           
=======================================
  Files          20       20           
  Lines        2321     2321           
=======================================
  Hits         1923     1923           
  Misses        398      398
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/781?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/781?src=pr&el=footer). Last update [1e77eab...5ab0dbf](https://codecov.io/gh/dbcli/pgcli/pull/781?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-08-12 07:38:14,2017-08-18 14:38:22
420,780,"## Description
Preliminary work for a future change in outputting results that uses less memory

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.","Preliminary work for a future change in outputting results that uses less memory
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=h1) Report
> Merging [#780](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/386838b31fa4928dbbca8df1330f23df977f9b23?src=pr&el=desc) will **increase** coverage by `0.05%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/780/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #780      +/-   ##
==========================================
+ Coverage   82.85%   82.91%   +0.05%     
==========================================
  Files          20       20              
  Lines        2321     2329       +8     
==========================================
+ Hits         1923     1931       +8     
  Misses        398      398
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `79.86% <0%> (+0.28%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=footer). Last update [386838b...d2ecbde](https://codecov.io/gh/dbcli/pgcli/pull/780?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@meeuw Is this WIP or done?
done, please review and merge.
👍 ",2017-08-10 09:21:12,2017-08-18 22:27:44
421,779,"## Description
<!--- Describe your changes in detail. -->
This feature is currently undocumented. This pull request adds `null_string` to the sample config file.

See https://github.com/dbcli/pgcli/issues/778


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~~I've added this contribution to the `changelog.md`.~~
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add null_string to config file.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/779?src=pr&el=h1) Report
> Merging [#779](https://codecov.io/gh/dbcli/pgcli/pull/779?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/03b9c9b720e30e51893fc1b85eac41362ff7ceda?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/779/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/779?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #779   +/-   ##
=======================================
  Coverage   83.21%   83.21%           
=======================================
  Files          20       20           
  Lines        2300     2300           
=======================================
  Hits         1914     1914           
  Misses        386      386
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/779?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/779?src=pr&el=footer). Last update [03b9c9b...70db642](https://codecov.io/gh/dbcli/pgcli/pull/779?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-08-09 17:55:12,2017-08-09 18:06:50
422,778,"There's a [pgcasts episode](https://www.pgcasts.com/episodes/2/a-better-null-display-character/) about setting a more readable null display character using `\pset null 'Ø'`.

**Comparison:**
_pgcli_
```sql
+--------+--------+--------+--------+
| id     | name   | id     | name   |
|--------+--------+--------+--------|
| 1      | Pirate | 2      | Pirate |
| 2      | Monkey | <null> | <null> |
| 3      | Ninja  | 4      | Ninja  |
| 4      | Spaget | <null> | <null> |
| <null> | <null> | 3      | Dv     |
| <null> | <null> | 1      | Rut    |
+--------+--------+--------+--------+
```
_psql_
```sql
 id |  name  | id |  name
----+--------+----+--------
  1 | Pirate |  2 | Pirate
  2 | Monkey |  ø | ø
  3 | Ninja  |  4 | Ninja
  4 | Spaget |  ø | ø
  ø | ø      |  3 | Dv
  ø | ø      |  1 | Rut
```

It possible to add support to for this?","Request: add support for \pset null?
Hi @jdsutherland! This is configurable via the pgcli config file. It doesn't appear to be documented in the config file (we'll get that fixed!). In your `~/.config/pgcli/config` file, add `null_string` to your `[main]` section:
```
[main]
null_string = 'ø'
```

I hope that helps!
@tsroten, thanks for the response. After adding the above to the config, the output remains the same. I tried setting to other values such as `null_string = """"` but output remains `<null>`.

Am I missing something?
I found the problem. `null_string` is stored in config key value `data_formats` - not`main`
```python
self.null_string = c['data_formats'].get('null_string', '<null>')
```

I'll submit a PR.
@jdsutherland I'm seeing it pulled from `main`:
https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L154
@jdsutherland It looks like you might have added `null_string` to the wrong spot in your config file. Could you double-check that you didn't add it beneath the section `[data_formats]`? It needs to be in the section `[main]`. The config file has multiple sections that are indicated by square brackets.
@tsroten D'oh. Sorry about that.
@jdsutherland No problem! Easy mistake to make 😄 ",2017-08-09 07:33:45,2017-08-09 19:00:59
423,777,"## Description
use cursor from psycopg in pgcli

I'm not sure if you should/can use hardcoded numbers to match the `type_code` of Cursor.description

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.","use cursor from psycopg in pgcli
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/777?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@2fe9fe8`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/777/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/777?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #777   +/-   ##
=========================================
  Coverage          ?   86.31%           
=========================================
  Files             ?       19           
  Lines             ?     2243           
  Branches          ?        0           
=========================================
  Hits              ?     1936           
  Misses            ?      307           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/777?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/777?src=pr&el=footer). Last update [2fe9fe8...223eec9](https://codecov.io/gh/dbcli/pgcli/pull/777?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@meeuw Looks like this is ready to merge?
Sure, I'm sure the undocumented `psycopg2.extensions.*` constants will cause a regression but I hope that will give us a suggesion how to do this properly. :crossed_fingers:
Hmm. I suppose we could pin `psycopg2` to a specific version, but I'd rather not do that. We can fix it when it breaks.
🌸 ",2017-08-08 10:46:27,2017-08-28 17:02:17
424,776,"## Description
`pgcli` takes `-U` as the option flag to specify the user; `mycli` uses `-u`. This is confusing (I had to check before writing this issue, to make sure I got them right).

Could those two be unified?","Specifiying username: inconsistency with mycli
@shtrom Thanks for pointing this out. This was intentional in order to make pgcli act like psql and mycli act like mysql. The idea was that users from the official client would have less of a transition to the dbcli alternative.

I'd be interested in @amjith and @j-bennet's thoughts on whether it's more important to a) make the dbcli projects provide a consistent user-experience with configs/options or b) continue to make dbcli projects act like their official counterparts.
I think it's important to make our clients behave similarly to the official clients, because people would want to use them as drop-in replacements.
> I think it's important to make our clients behave similarly to the official clients, because people would want to use them as drop-in replacements.

This was the original reason. My goal was to make pgcli or mycli so compelling and fully-featured that people will never have to use the official clients. It will grow to a point where they will alias `psql` and `mysql` to `pgcli` and `mycli` in their bashrc files. 

Having said that I don't see why we can't support both `-u` and `-U` for both clients. I don't see a conflict in pgcli if we use the lowercase `-u` and no conflict in mycli if we use `-U` for user. So I don't mind supporting both uppercase and lowercase `-u` for user option. 
That'd be awesome!
@amjith although `-u` wouldn't be an issue with pgcli, `-U` would conflict with one option of mysql:
```
  -u, --user=name     User for login if not current user.
  -U, --safe-updates  Only allow UPDATE and DELETE that uses keys.
  -U, --i-am-a-dummy  Synonym for option --safe-updates, -U.
```

I must say I never used that parameter, but maybe some people has.
Let's stay out of using `-U` in mycli then. I think that's a useful feature that we may implement in the future.",2017-08-07 06:58:52,2018-11-30 23:21:13
425,775,"## Description
Fix #769
Add missing keyword COLUMN after DROP.

## Checklist
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Add COLUMN as possible keyword after DROP
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/775?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@244043b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/775/graphs/tree.svg?token=XdciEnQkL2&width=650&src=pr&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/775?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #775   +/-   ##
=========================================
  Coverage          ?   83.13%           
=========================================
  Files             ?       20           
  Lines             ?     2289           
  Branches          ?        0           
=========================================
  Hits              ?     1903           
  Misses            ?      386           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/775?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/775?src=pr&el=footer). Last update [244043b...962f53f](https://codecov.io/gh/dbcli/pgcli/pull/775?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

🚀",2017-08-06 22:21:13,2017-08-07 03:09:47
426,774,"## Description
<!--- Describe your changes in detail. -->

This adds an IPython section to the README, to document using pgcli from within IPython console.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Documentation for pgcli magic in ipython
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=h1) Report
> Merging [#774](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9d59fa5a8ac85f0699daeb51f8602b7d01d31882?src=pr&el=desc) will **increase** coverage by `0.01%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/774/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #774      +/-   ##
==========================================
+ Coverage    83.1%   83.12%   +0.01%     
==========================================
  Files          20       20              
  Lines        2285     2287       +2     
==========================================
+ Hits         1899     1901       +2     
  Misses        386      386
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.16% <0%> (-0.02%)` | :arrow_down: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.65% <0%> (+0.01%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=footer). Last update [9d59fa5...d941274](https://codecov.io/gh/dbcli/pgcli/pull/774?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@amjith Fixed.
🍳",2017-08-06 21:02:05,2017-08-07 05:19:52
427,773,"## Description
Fix #716 


## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Add \conninfo command
So far it kinda work, except the error handling of the `\c` command I'm not happy with.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=h1) Report
> Merging [#773](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/c69d4c200ace6304767289bc72654a381779e7c7?src=pr&el=desc) will **decrease** coverage by `0.36%`.
> The diff coverage is `37.5%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/773/graphs/tree.svg?height=150&token=XdciEnQkL2&src=pr&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #773      +/-   ##
==========================================
- Coverage   83.21%   82.85%   -0.37%     
==========================================
  Files          20       20              
  Lines        2300     2321      +21     
==========================================
+ Hits         1914     1923       +9     
- Misses        386      398      +12
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `82.11% <37.5%> (-1.35%)` | :arrow_down: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `79.57% <0%> (-0.79%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=footer). Last update [c69d4c2...902fe94](https://codecov.io/gh/dbcli/pgcli/pull/773?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@j-bennet thanks for your input, it was really helpful.
For `\conninfo` I couldn't find a way of getting socket directory (if connected through socket) with psycopg2.
According to the docs [here](https://www.postgresql.org/docs/current/static/functions-info.html), if the user is connected via unix socket, functions `inet_client_addr()`, `inet_client_port()`, `inet_client_port()`, `inet_server_port()` will all return empty.

Once you know that, you can retrieve `unix_socket_directories` setting with a query:

```
postgres=# select name, setting from pg_settings where name = 'unix_socket_directories';
          name           | setting
-------------------------+---------
 unix_socket_directories | /tmp
(1 row)
```
Nice! Wasn't aware of the second part. I'll do the changes later today. Thanks 
@j-bennet thanks for the query, I made the changes
Reference to pgcode being sometimes `None`: http://initd.org/psycopg/docs/module.html#psycopg2.Error.pgcode
Thank you! 🍨 ",2017-08-06 18:03:32,2017-08-14 00:21:43
428,772,"## Description
Before:
```
vagrant@vagrant:vagrant> SELECT
                                 array[1, 2, 3]::bigint[] as bigint_array,
                                 '{{1,2},{3,4}}'::numeric[] as nested_numeric_array,
                                 '{å,魚,текст}'::text[] as 配列
                             UNION ALL
                             SELECT '{}', NULL, array[NULL]
+----------------+--------------------------------------------------------------+---------------------------------------------------------+
| bigint_array   | nested_numeric_array                                         | 配列                                                    |
|----------------+--------------------------------------------------------------+---------------------------------------------------------|
| [1L, 2L, 3L]   | [[Decimal('1'), Decimal('2')], [Decimal('3'), Decimal('4')]] | [u'\xe5', u'\u9b5a', u'\u0442\u0435\u043a\u0441\u0442'] |
| []             | NULL                                                         | [None]                                                  |
+----------------+--------------------------------------------------------------+---------------------------------------------------------+
```
After:
```
vagrant@vagrant:vagrant> SELECT
                                 array[1, 2, 3]::bigint[] as bigint_array,
                                 '{{1,2},{3,4}}'::numeric[] as nested_numeric_array,
                                 '{å,魚,текст}'::text[] as 配列
                             UNION ALL
                             SELECT '{}', NULL, array[NULL]
+----------------+------------------------+--------------+
| bigint_array   | nested_numeric_array   | 配列         |
|----------------+------------------------+--------------|
| {1,2,3}        | {{1,2},{3,4}}          | {å,魚,текст} |
| {}             | NULL                   | {NULL}       |
+----------------+------------------------+--------------+
```



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Better formatting for array output
@tsroten You've been pretty involved in these parts of the code, so mind having a look?
@koljonen I think you forgot the tests here, some are failing. Or is it a WIP?
@koljonen Sure, I'll take a look tonight 😄 
@koljonen The new output looks much better 👍 .

The tests are failing. I'll have time to help look at it a bit later tonight. Good work so far!
As for the tests failing, I'm rather confused. They're passing for me on this setup: `platform darwin -- Python 2.7.10, pytest-2.9.1, py-1.4.31, pluggy-0.3.1`. I've never had the tests work locally and then fail on Travis's 2.7 before. The Travis test output looks like the rows are missing from the result sets. I'll see if I can replicate it in a virtual machine and find out what's going on.
@koljonen So, in CLI Helpers (latest version), generators are passed around internally, so `row[:]` is not actually updating the row in `data`.

I'll push an update to the branch that should fix it.
Ok, tests are passing, now there is a minor lint issue
@koljonen Ok, I think the only thing left is the lint issue: https://travis-ci.org/dbcli/pgcli/jobs/261656805#L673
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@99c9040`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/772/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #772   +/-   ##
=========================================
  Coverage          ?   83.21%           
=========================================
  Files             ?       20           
  Lines             ?     2300           
  Branches          ?        0           
=========================================
  Hits              ?     1914           
  Misses            ?      386           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=footer). Last update [99c9040...887a826](https://codecov.io/gh/dbcli/pgcli/pull/772?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@koljonen Thanks for your work on this! The new array output is so much better than the old 👍 .",2017-08-06 17:35:39,2017-08-07 13:28:56
429,771,"## Description
Keep track of which keywords are reserved, and quote identifiers that coïncide with those. 
The list of reserved words is from https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Don't quote identifiers that are non-reserved keywords
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=h1) Report
> Merging [#771](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9d59fa5a8ac85f0699daeb51f8602b7d01d31882?src=pr&el=desc) will **decrease** coverage by `0.01%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/771/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #771      +/-   ##
==========================================
- Coverage    83.1%   83.09%   -0.02%     
==========================================
  Files          20       20              
  Lines        2285     2283       -2     
==========================================
- Hits         1899     1897       -2     
  Misses        386      386
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.16% <100%> (-0.02%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=footer). Last update [9d59fa5...b90beeb](https://codecov.io/gh/dbcli/pgcli/pull/771?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

🍅",2017-08-06 07:50:53,2017-08-07 03:14:41
430,770,"## Description
E.g. after `\df`, we want to suggest only function names.
@amjith, you feel like merging this?


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Don't include args in function suggestions for backslash commands
@koljonen you have a small lint issue. If you could take a look, it would be great!
This puzzles me a bit. Wouldn't be nicer to show the args for custom functions so a user can differentiate between two fuctions with same names but different args? 

Old behavior: 
<img width=""665"" alt=""1__0_1_python2_7_-__pgcli___users_amjith_code_python_pgcli____tmux_"" src=""https://user-images.githubusercontent.com/49260/29006472-00e02d58-7aae-11e7-81bf-93eff7c9a1fc.png"">

New behavior:

<img width=""724"" alt=""1__0_1_python2_7_-__pgcli___users_amjith_code_python_pgcli____tmux_"" src=""https://user-images.githubusercontent.com/49260/29006473-117c9818-7aae-11e7-9462-fbf5ed340bb2.png"">

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=h1) Report
> Merging [#770](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9d59fa5a8ac85f0699daeb51f8602b7d01d31882?src=pr&el=desc) will **increase** coverage by `0.02%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/770/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #770      +/-   ##
==========================================
+ Coverage    83.1%   83.13%   +0.02%     
==========================================
  Files          20       20              
  Lines        2285     2289       +4     
==========================================
+ Hits         1899     1903       +4     
  Misses        386      386
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.17% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.65% <100%> (+0.01%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=footer). Last update [9d59fa5...0fdf0b0](https://codecov.io/gh/dbcli/pgcli/pull/770?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@amjith The problem is this:
```
vagrant@vagrant:vagrant> \df sum
╒════════════╤════════╤════════════════════╤═══════════════════════╤════════╕
│ Schema     │ Name   │ Result data type   │ Argument data types   │ Type   │
╞════════════╪════════╪════════════════════╪═══════════════════════╪════════╡
│ pg_catalog │ sum    │ numeric            │ bigint                │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ double precision   │ double precision      │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ bigint             │ integer               │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ interval           │ interval              │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ money              │ money                 │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ numeric            │ numeric               │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ real               │ real                  │ agg    │
├────────────┼────────┼────────────────────┼───────────────────────┼────────┤
│ pg_catalog │ sum    │ bigint             │ smallint              │ agg    │
╘════════════╧════════╧════════════════════╧═══════════════════════╧════════╛
SELECT 8
Time: 0.006s
vagrant@vagrant:vagrant> \df sum(int)
╒══════════╤════════╤════════════════════╤═══════════════════════╤════════╕
│ Schema   │ Name   │ Result data type   │ Argument data types   │ Type   │
╞══════════╪════════╪════════════════════╪═══════════════════════╪════════╡
╘══════════╧════════╧════════════════════╧═══════════════════════╧════════╛
SELECT 0

```

I see, that is a problem. I think for `\df` it makes sense to not show the args but for `\ef` (whenever we get around to implementing that) we should keep the args in the completion. ",2017-08-06 06:34:20,2017-08-07 02:57:50
431,769,"## Description
PG's [`ALTER TABLE`](https://www.postgresql.org/docs/9.6/static/sql-altertable.html) supports dropping individual columns with

```
ALTER TABLE foo DROP COLUMN bar;
```

where `bar` is the name of a column on the table `foo` but pgcli does not suggest `COLUMN` after `DROP`:

![screen shot 2017-08-05 at 7 26 49 pm](https://user-images.githubusercontent.com/4861023/28999654-5e94bb2a-7a14-11e7-8e30-3a806affe645.png)


## Your environment
<!-- This gives us some more context to work with. -->

macOS 10.12.4 (16E195)
pgcli 1.7.0
Installed via brew: Poured from bottle on 2017-08-05 at 12:43:38
",'COLUMN' is not suggested after 'DROP' in 'ALTER TABLE' query,2017-08-06 00:36:20,2017-08-07 03:09:47
432,768,Have recently switched to vi-mode (on dev from a few days ago) and pressing ctrl+p doesn't bring up the previous history like it does in emacs mode. Is there a config setting to bring back that behaviour? esc+k just isn't quite the same muscle memory!,"Is there a way to ctrl+p in vim mode?
Hmm, this is how vim works, it isn't implemented yet (in prompt_toolkit which is used by pgcli) but vim supports `ctrl`-`o` `k` as a single shot command key in insert mode, would that match your muscle memory?
@cazgp Looks like C-P brings up the previous history if you're in the normal mode. Are you asking if there is a way to do that in the insert mode? 


Yes. When pgcli loads it loads straight into insert mode. I then type Ctrl+p and only USE appears in a pop-up, which is a tad annoying. No worries if it can't be done, I was just wondering! Thank you :)",2017-08-02 10:17:37,2019-05-05 15:44:22
433,767,Is pgcli support [\ev](http://pgci.eisentraut.org/jenkins/job/postgresql_master_world/Documentation/app-psql.html) command? I want replace view in editor. How can I do?,"Edit view in editor
It is not yet supported.
It would be a nice addition, along with `\ef` to edit functions as well.",2017-08-02 05:34:18,
434,766,"## Description
Use psycopg2 to get database details when connected.

Fix #765 

## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Use psycopg2 to get database details
This is a good idea. I'd like to do some manual testing to make sure we're not introducing any change in behavior. I'll do a bit of testing today and hopefully merge it in tonight. 
Ok. I think it can be used to get the `\conninfo` from #716 pretty easily too.

(I restarted one of the travis tests, it seems it randomly timeout the exact same test everytime)
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=h1) Report
> Merging [#766](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/323fda4b9cad52f5fbfe491f54fbe27b746c5b06?src=pr&el=desc) will **increase** coverage by `0.02%`.
> The diff coverage is `0%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/766/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master    #766      +/-   ##
=========================================
+ Coverage   83.07%   83.1%   +0.02%     
=========================================
  Files          20      20              
  Lines        2281    2285       +4     
=========================================
+ Hits         1895    1899       +4     
  Misses        386     386
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `83.45% <0%> (-0.9%)` | :arrow_down: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.63% <0%> (+0.34%)` | :arrow_up: |
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <0%> (+18.18%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=footer). Last update [323fda4...f630814](https://codecov.io/gh/dbcli/pgcli/pull/766?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice one.
Works great for me when connecting with `-D`:

```
(pgcli) --- src/pgcli ‹fpietka/get-infos-when-dsn› » pgcli -D logproc
Version: 1.7.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
logproc@lo.co.com:logproc>
```

However, I get an error when connecting without `-D` and with `-h`:

```
(pgcli) --- src/pgcli ‹fpietka/get-infos-when-dsn› » pgcli -h localhost postgres
ERROR:  No such database: postgres
ERROR:  No such database: postgres
```

I for sure have a database `postgres`. I don't know if the error is connected to this PR, but looks like a bug in any case.
It's odd as this code is supposed to be executed only when DSN is passed. 
Let me check that one.
Can't reproduce that one. Can you check again with the master?
Will do.
I checked out master, and the error disappeared. I checked out your branch again, and the error is not there anymore. Not sure what it was! But I think you're good. :)
Can one of you check if this affects the reconnect behavior? 
I'm not able to verify things at the moment. If that checks out this PR is good to merge .
I don't think this kind of a change would affect reconnecting, but if it did, how would you test it?
So I let pgcli sit idle and then when I tried to run a query I got this:

```
2017-07-29 16:17:08,926 (32692/MainThread) pgcli.main ERROR - sql: u""select source, started, apikeys, rq_job_id from  rebuild_jobs_beta where finished is null and started > '2017-07-28' limit 100;"", error: InterfaceError('connection already closed',)
2017-07-29 16:17:08,926 (32692/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 405, in execute_command\n    output, query = self._evaluate_command(text)\n  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 621, in _evaluate_command\n    for title, cur, headers, status, sql, success in res:\n  File ""/Users/irina/src/pgcli/pgcli/pgexecute.py"", line 299, in run\n    for result in pgspecial.execute(cur, sql):\nInterfaceError: connection already closed\n'
```

It did not prompt me to reconnect. I think we'll have the same problem in master though. It was just not fully fixed in https://github.com/dbcli/pgcli/pull/743. We have to handle `InterfaceError` in more than that one spot.
Verified there's the same problem with master - won't prompt me to reconnect. I think this PR is safe to merge.
Thank you! 🌹 ",2017-07-29 14:06:01,2017-07-30 00:31:46
435,765,"## Description
When connecting with `pgcli` ""normally"", i.e. `pgcli -h hostname...`, upon connection the prompt usually shows the hostname:app which is extremely useful given that I'm often connected to multiple production databases.

However, when using `service=servicename` with the same details, the prompt instead shows IP address:database. This makes it very difficult to see at a glance which database I'm connected to.

Is there any config that I'm missing or is that the nature of using service to connect -- the hostname information is lost?

## Your environment

- [x] Ubuntu 16.10
- [x] 1.7.0
- [x] What is the output of ``pip freeze`` command.
chardet==2.3.0
click==6.7
colorama==0.3.9
command-not-found==0.3
defer==1.0.6
distro-info===0.14build1
docopt==0.6.2
feedparser==5.2.1
gitsome==0.7.2
greenlet==0.4.12
language-selector==0.1
lightdm-gtk-greeter-settings==1.2.1
lxml==3.6.4
Mako==1.0.4
MarkupSafe==0.23
msgpack-python==0.4.8
neovim==0.1.13
numpydoc==0.6.0
pexpect==4.2.0
Pillow==3.3.1
ply==3.10
prompt-toolkit==1.0.14
ptyprocess==0.5.1
pycups==1.9.73
Pygments==2.2.0
pygobject==3.22.0
python-apt==1.1.0b5
python-debian==0.1.29
pytz==2016.10
pyxdg==0.25
PyYAML==3.11
reportlab==3.3.0
requests==2.10.0
six==1.10.0
ssh-import-id==5.6
ubuntu-drivers-common==0.0.0
ufw==0.35
uritemplate==3.0.0
uritemplate.py==3.0.2
urllib3==1.15.1
usb-creator==0.3.3
wcwidth==0.1.7
xkit==0.0.0
","Prompt hostname when using `service=`
The way we were getting the host (amongst other things) made that we lost the hostname, and only could get the IP.

I made a little patch that is fixing that.
Thanks!",2017-07-29 09:14:59,2017-07-30 00:31:46
436,764,"## Description
This is rather not really an issue as it is, but this changes allow to avoid ambiguity in slashes interpretation in strings (W1401).

## Checklist
- [ ] I've added this contribution to the `changelog.md`.
- [ ] ~~I've added my name to the `AUTHORS` file (or it's already there).~~
","Use raw strings where needed to avoid backslash ambiguity
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=h1) Report
> Merging [#764](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1a2932ec0459325be1a531c280d3f26ec5d6cd7f?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `50%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/764/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #764   +/-   ##
=======================================
  Coverage   83.25%   83.25%           
=======================================
  Files          20       20           
  Lines        2281     2281           
=======================================
  Hits         1899     1899           
  Misses        382      382
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/utils.py](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy91dGlscy5weQ==) | `97.67% <ø> (ø)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.73% <0%> (ø)` | :arrow_up: |
| [pgcli/pgbuffer.py](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree#diff-cGdjbGkvcGdidWZmZXIucHk=) | `70% <0%> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.63% <100%> (ø)` | :arrow_up: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.17% <100%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=footer). Last update [1a2932e...7baa76f](https://codecov.io/gh/dbcli/pgcli/pull/764?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

⚽",2017-07-27 12:10:41,2017-07-27 17:09:43
437,763,"## Description
I like working with http://editorconfig.org/ to get my editor configured for each project. I think it would be a nice addition (I'm using it locally).

## Checklist
- [ ] I've added this contribution to the `changelog.md`.
- [ ] ~~I've added my name to the `AUTHORS` file (or it's already there).~~
","Add editorconfig
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/763?src=pr&el=h1) Report
> Merging [#763](https://codecov.io/gh/dbcli/pgcli/pull/763?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/1a2932ec0459325be1a531c280d3f26ec5d6cd7f?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/763/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/763?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #763   +/-   ##
=======================================
  Coverage   83.25%   83.25%           
=======================================
  Files          20       20           
  Lines        2281     2281           
=======================================
  Hits         1899     1899           
  Misses        382      382
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/763?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/763?src=pr&el=footer). Last update [1a2932e...ab487cd](https://codecov.io/gh/dbcli/pgcli/pull/763?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you! ☯️ ",2017-07-27 11:36:45,2017-07-27 16:59:56
438,762,"## Description
Fix CodeCov link (was broken)
Add Landscape badge for code quality


## Checklist
- [ ] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fpietka badges
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/762?src=pr&el=h1) Report
> Merging [#762](https://codecov.io/gh/dbcli/pgcli/pull/762?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/60f280b5ad6b2cc4c2419b2c7634d4ae253b53d6?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/762/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/762?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #762   +/-   ##
=======================================
  Coverage   83.25%   83.25%           
=======================================
  Files          20       20           
  Lines        2281     2281           
=======================================
  Hits         1899     1899           
  Misses        382      382
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/762?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/762?src=pr&el=footer). Last update [60f280b...13b403f](https://codecov.io/gh/dbcli/pgcli/pull/762?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-07-27 05:56:37,2017-07-27 10:56:58
439,761,"## Description
<!--- Describe your changes in detail. -->

Fixes the problem with behave tests disregarding PGHOST and PGPORT. This is needed if using a dockerized postgres instance for testing.

Example command that did not work before:

`PGHOST=localhost PGUSER=postgres PGPORT=8432 behave`

(note the non-standard port because it's forwarded from the docker container).

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Behave tests should also accept pgport.
@j-bennet fixes the problem for me. You just have a slight lint issue on a doc block.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/761?src=pr&el=h1) Report
> Merging [#761](https://codecov.io/gh/dbcli/pgcli/pull/761?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/0d7f901482bc59abdaa06cd93b7ed22b7e26b997?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/761/graphs/tree.svg?width=650&height=150&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/761?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #761   +/-   ##
=======================================
  Coverage   83.25%   83.25%           
=======================================
  Files          20       20           
  Lines        2281     2281           
=======================================
  Hits         1899     1899           
  Misses        382      382
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/761?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/761?src=pr&el=footer). Last update [0d7f901...8547694](https://codecov.io/gh/dbcli/pgcli/pull/761?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-07-25 17:18:58,2017-07-25 22:34:06
440,760,"## Description
GNU read line allows to globally map `jj` key sequence to `ESC` for quick insert mode -> command mode transition.  
I'm not aware of any global configuration for `prompt_toolkit`.

## Your environment
```bash
> pgcli --version  

Version: 1.7.0

> uname -a  

Linux myuser 4.11.9-1-ARCH #1 SMP PREEMPT Wed Jul 5 18:23:08 CEST 2017 x86_64 GNU/Linux
```

Currently I've patched the `key_bindings.py` like so:

```diff
diff --git a/pgcli/key_bindings.py b/pgcli/key_bindings.py                                                                                                                                                                                    
index 646e6f7..b623c62 100644
--- a/pgcli/key_bindings.py
+++ b/pgcli/key_bindings.py
@@ -2,7 +2,8 @@ import logging
 from prompt_toolkit.enums import EditingMode
 from prompt_toolkit.keys import Keys
 from prompt_toolkit.key_binding.manager import KeyBindingManager
-from prompt_toolkit.filters import Condition
+from prompt_toolkit.key_binding.input_processor import KeyPress
+from prompt_toolkit.filters import Condition, ViInsertMode
 from .filters import HasSelectedCompletion
 
 _logger = logging.getLogger(__name__)
@@ -22,6 +23,14 @@ def pgcli_bindings(get_vi_mode_enabled, set_vi_mode_enabled):
         enable_search=True,
         enable_abort_and_exit_bindings=True)
 
+    @key_binding_manager.registry.add_binding('j', 'j', filter=ViInsertMode())
+    def _(event):
+        """"""
+        Typing 'jj' in Insert mode, should go back to navigation mode.
+        """"""
+        _logger.debug('Detected jj keys.')
+        event.cli.input_processor.feed(KeyPress(Keys.Escape))
+
     @key_binding_manager.registry.add_binding(Keys.F2)
     def _(event):
         """"""

```
","[Feature] Allow to configure additional vi mode Escape mapping
Can we do a more general solution to that -- to enable any arbitrary key bindings (in vi mode or not) from a config file? PtPython allows it but its config file is a python file, so you can simply put your mappings as they are like in the proposed solution. In pgcli's case I am not sure where would be the place of these mappings though.

I'll be happy to implement it when I have time as soon as we agree on how would the user specify their key bindings.
The new version uses `prompt_toolkit` 2.0, which no longer uses `KeyBindingManager`. Any idea on how to hack `key_bindings.py` to allow for custom vi mode key bindings? Or does the 2.0 version of `promt_toolkit` have a readline-style configuration for vi mode?
Answering my own question, here's a patch that adds a `jk` binding to switch to vi normal/navigation mode. It's got no testing to see if the user is even *in* vi mode, so use at your own risk.

```diff
diff --git a/pgcli/key_bindings.py b/pgcli/key_bindings.py
index f1eaaa39..0e21904c 100644
--- a/pgcli/key_bindings.py
+++ b/pgcli/key_bindings.py
@@ -4,6 +4,7 @@ import logging
 from prompt_toolkit.enums import EditingMode
 from prompt_toolkit.key_binding import KeyBindings
 from prompt_toolkit.filters import completion_is_selected
+from prompt_toolkit.key_binding.vi_state import InputMode

 _logger = logging.getLogger(__name__)

@@ -12,6 +13,12 @@ def pgcli_bindings(pgcli):
     """"""Custom key bindings for pgcli.""""""
     kb = KeyBindings()

+    @kb.add('j', 'k')
+    def _(event):
+        """"""vi Normal mode.""""""
+        _logger.debug('Detected jk keystroke.')
+        event.cli.vi_state.input_mode = InputMode.NAVIGATION
+
     @kb.add('f2')
     def _(event):
         """"""Enable/Disable SmartCompletion Mode.""""""
```

@jonathanslenders , do you have any advice here?
Any updates on the progress of this feature? The above patch seems to work as a temporary fix.

I found this project a few hours ago and I am loving it!
Would maintainers be interested in merging this patch?
Providing a way to override specific features in pgcli is one thing, but overriding how vi keybindings are handled in pgcli seems sufficiently obscure that I'm not sure it is worth adding complexity to the code base. 

I wonder if we can have a prompt-toolkit level configuration that will apply to all apps that use prompt-toolkit as readline replacement. @jonathanslenders Thoughts?
This is a feature that can be configured in ptpython.

Ideally if you have a Python configuration file, it should be possible to define a function in that file (lets call it ``def custom_bindings()``, which returns a ``prompt_toolkit.key_binding.Keybindings`` object. 

These key bindings can then be merged into the main pgcli key bindings like this:
https://python-prompt-toolkit.readthedocs.io/en/master/pages/advanced_topics/key_bindings.html#merging-key-bindings

The configuration function should then look something like this:

```python
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.input_processor import KeyPress
from prompt_toolkit.filters import vi_insert_mode

def create_key_bindings():
    bindings = KeyBindings()

    @bindings.add('j', 'j', filter=vi_insert_mode)
    def esc(event):
        event.cli.input_processor.feed(KeyPress(Keys.Escape))

    return bindings
````

In the ptpython config, you can see that the key bindings are registered in a ``KeyBindings`` object that we already have. It was a decision I made back then, but I think it's not really better. Something else you can see in the ptpython config is that the key bindings have access to the ""repl"" object. That's the main application object. That's useful, because then the custom bindings can change about anything to the application.

One question maybe for everyone: would it make sense to have a global ``.prompt_toolkit.config.py`` file or something like this, were these custom bindings could be configured for every prompt_toolkit application. Similar to .inputrc for all GNU readline applications? (edit: of course, key bindings in the global configuration file don't have access to application specific objects.)

@jonathanslenders 

> One question maybe for everyone: would it make sense to have a global .prompt_toolkit.config.py file or something like this, were these custom bindings could be configured for every prompt_toolkit application. Similar to .inputrc for all GNU readline applications?

For my part that would be optimal, and I think it's pretty likely that anyone going to the trouble to configure a `vi_insert_mode` key combination for one application is going to want it for every application using prompt_toolkit, just like the way it works with readline.
Yes, global configuration would be great as I patch multiple projects that use prompt_toolkit, eg. `mycli` as well..
@jonathanslenders This function would be in its own standalone file?

And in which file do I put the merging function from the link?
Could anyone please explain how to get this to work?
You'll need to edit key_binding.py

After modifying the above examples (btw thanks everyone for sharing those snippets), the following worked for me:
The changes appear to be necessary due to updates to the prompt-toolkit library. 

```diff
diff --git a/pgcli/key_bindings.py b/pgcli/key_bindings.py
index 23174b6..9437a83 100644
--- a/pgcli/key_bindings.py
+++ b/pgcli/key_bindings.py
@@ -1,7 +1,10 @@
 import logging
 from prompt_toolkit.enums import EditingMode
+from prompt_toolkit.keys import Keys
 from prompt_toolkit.key_binding import KeyBindings
+from prompt_toolkit.key_binding.key_processor import KeyPress
 from prompt_toolkit.filters import (
+    ViInsertMode,
     completion_is_selected,
     is_searching,
     has_completions,
@@ -124,4 +127,12 @@ def pgcli_bindings(pgcli):
         """"""Move down in history.""""""
         event.current_buffer.history_forward(count=event.arg)

+    @kb.add(""k"", ""j"", filter=ViInsertMode())
+    def _(event):
+        """"""
+        Typing 'kj' in Insert mode, should go back to navigation mode.
+        """"""
+        _logger.debug('Detected kj keys.')
+        event.cli.key_processor.feed(KeyPress(Keys.Escape))
+
     return kb
```",2017-07-25 13:31:45,
441,759,,"WIP: Complete SHOW setting
@bersace Looks like you left an `ipdb` statement in there. :) That's why all the tests fail.
Let's close this. It's noise now.",2017-07-25 07:24:36,2018-06-13 13:01:47
442,758,"## Description
Change the continuation char from `....` to empty string. This allows folks to copy and paste sql statements easily from the REPL.


## Checklist
- [x] I've added this contribution to the `changelog.md`.
~- [ ] I've added my name to the `AUTHORS` file (or it's already there).~
","Amjith/remove continuation char
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/758?src=pr&el=h1) Report
> Merging [#758](https://codecov.io/gh/dbcli/pgcli/pull/758?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/78365a362449179b2671d80ccc07fd5f6a4092f5?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/758/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/758?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #758   +/-   ##
=======================================
  Coverage   83.25%   83.25%           
=======================================
  Files          20       20           
  Lines        2281     2281           
=======================================
  Hits         1899     1899           
  Misses        382      382
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/758?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/758?src=pr&el=footer). Last update [78365a3...a79db9d](https://codecov.io/gh/dbcli/pgcli/pull/758?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-07-24 17:35:15,2017-07-25 05:32:32
443,757,I suggest to communicate on test coverage to encourage quality and increase confidence in project.,"Add coverage badge
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/757?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@5a8e5d2`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/757/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/757?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #757   +/-   ##
=========================================
  Coverage          ?   83.25%           
=========================================
  Files             ?       20           
  Lines             ?     2281           
  Branches          ?        0           
=========================================
  Hits              ?     1899           
  Misses            ?      382           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/757?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/757?src=pr&el=footer). Last update [5a8e5d2...575ee09](https://codecov.io/gh/dbcli/pgcli/pull/757?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍  on this one",2017-07-21 07:05:28,2017-07-24 11:51:49
444,756,"Hi,

This code has undefined variables. It's guaranteed to fail. There is no test nor documentation. I suggest to drop it and let's us use history if ever the use case arise.","Drop ipython integration
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/756?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@5a8e5d2`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/756/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/756?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #756   +/-   ##
=========================================
  Coverage          ?   84.66%           
=========================================
  Files             ?       19           
  Lines             ?     2243           
  Branches          ?        0           
=========================================
  Hits              ?     1899           
  Misses            ?      344           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/756?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/756?src=pr&el=footer). Last update [5a8e5d2...2b8c7bf](https://codecov.io/gh/dbcli/pgcli/pull/756?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Hi @bersace, this was added by @darikg and it seems he described it quite well in his [original PR](https://github.com/dbcli/pgcli/pull/91) and [this one](https://github.com/dbcli/pgcli/pull/104). I'm not sure if @darikg has some bandwidth to document it and finish up the TODO items he had. If the feature works though, I think it's useful, and we should document it and test-case it, rather than dropping it.
@j-bennet that's ok. I guess that `get_ipython` is implicitly imported when loaded by `ipython`.",2017-07-21 06:41:36,2017-07-21 15:14:59
445,755,"## Description
<!--- Describe your changes in detail. -->

Update the docs to reflect pgcli moving back to the homebrew-hosted formula.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- ~[ ] I've added my name to the `AUTHORS` file (or it's already there)~.
","Removed instructions for custom brew tap.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/755?src=pr&el=h1) Report
> Merging [#755](https://codecov.io/gh/dbcli/pgcli/pull/755?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/ab08c496f07a596b9c32925e51739d52988f91bb?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/755/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/755?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #755   +/-   ##
=======================================
  Coverage   83.07%   83.07%           
=======================================
  Files          20       20           
  Lines        2198     2198           
=======================================
  Hits         1826     1826           
  Misses        372      372
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/755?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/755?src=pr&el=footer). Last update [ab08c49...f67d50c](https://codecov.io/gh/dbcli/pgcli/pull/755?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-07-20 14:31:33,2017-07-20 14:47:15
446,754,"## Description

### Desired behavior

In psql, `\ef my function_name` opens the definition of a function in your text editor, allowing you to change function definitions easily. `\ef` with no function name opens a text editor session pre-populated with a function skeleton for convenience. I think it would be nice to implement both behaviors in pgcli.

### Compatibility note

pgcli too has an `\ef` command, but it appears to be equivalent to pgcli's `\e` (which is substantially like psql's `\e`). So I think it would be good to replace pglcli's current `\ef` behavior with the desired behavior described above, although this would mean an incompatible UI change.","Add support for psql-style \ef
Handling `\ef` and `\ev` as `\e` was actually a bug just fixed in https://github.com/dbcli/pgspecial/pull/44 (thanks to @fpietka).",2017-07-19 19:11:27,2019-05-05 15:43:20
447,753,"## Description

In psql, sometimes I want to edit a function by name using `\ef`, or I want to DROP it, but this is laborious because there are multiple functions with that name.

In pgcli, it would be nice to have an autocomplete list showing each ""version"" of the function with its type signature. It would be even nicer if I could type, for instance, `my_function(text` and then hit tab to get a list of the subset of type signatures for which the first argument is of type TEXT.

In order for this to work with `\ef` issue #754 would need to be implemented first. But even before that, this would be useful for DROP.","Completion for polymorphic functions
See PR https://github.com/dbcli/pgcli/pull/677",2017-07-19 19:07:37,
448,752,"Hi,

## Description

I am running pgcli in Windows 10 within Git Bash (specifications and versions below).
I am having some - what I call - graphical issues. They seem to appear when I type SQL code and use the auto completion then some parts of the completion just freeze in the screen and only disappear when I press the return key. Here are some snap shots:

![image](https://user-images.githubusercontent.com/4294168/28338188-71a7e6e8-6c08-11e7-8ccc-f59270294ec0.png)
In this image you can see the cursor next to the word 'public' which is actually where he is althoug he should be one line above including the word 'public'. The ""information_schema.[...]"" was left from auto completion although I did not choose it as well as the teal background color.

![image](https://user-images.githubusercontent.com/4294168/28338312-d62ff3e4-6c08-11e7-8031-712ccc8fffd8.png)
Here is another issue. The ""round()"" from the autocompletion was left after I chose ""count(*)"" and it did not disappear.

I can attach further issues if I stumble upon some.

Best regards
Jascha

## Your environment

- Windows 10 Education Version 1607 Build 14393.1480
- pgcli version 1.7.0 within Git Bash using winpty
- Python Version 3.6.1 / winpty version 0.2.2-dev
- pip freeze output:
backports.csv==1.0.5
cli-helpers==0.2.2
click==6.7
configobj==5.0.6
h5py==2.7.0
humanize==0.5.1
numpy==1.13.0
pgcli==1.7.0
pgspecial==1.8.0
prompt-toolkit==1.0.14
psycopg2==2.7.1
Pygments==2.2.0
six==1.10.0
sqlparse==0.2.3
terminaltables==3.1.0
wcwidth==0.1.7

","Win10 / Git Bash / winpty - Several ""graphical"" issues
That's really odd. 

@JaschaK What terminal program do you use? Is it cmd.exe or [cmder](http://cmder.net/)? 

@darikg  or @jonathanslenders Either of you have any thoughts on this issue? 


I'm using Git Bash from git-scm.com .
I just updated to Version 2.13.3 from 2.7.1 and it seems that by that the problem was solved. I just tried it a little and there where no further immediate issues. If it happens again I will reopen this Issue again.",2017-07-18 20:33:44,2017-07-20 20:27:19
449,751,"## Description
User `auto` as the default casing in config file.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
~~[ ] I've added this contribution to the `changelog.md`.~~
~~[ ] I've added my name to the `AUTHORS` file (or it's already there).~~
","Change the casing default to 'auto'.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=h1) Report
> Merging [#751](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/64f1a6d317d0ecaa620ebb586fc9a62fa2a4f318?src=pr&el=desc) will **increase** coverage by `<.01%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/751/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #751      +/-   ##
==========================================
+ Coverage   83.06%   83.07%   +<.01%     
==========================================
  Files          20       20              
  Lines        2197     2198       +1     
==========================================
+ Hits         1825     1826       +1     
  Misses        372      372
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `79.92% <0%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=footer). Last update [64f1a6d...2c80a8c](https://codecov.io/gh/dbcli/pgcli/pull/751?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-07-17 03:27:48,2017-07-17 04:15:49
450,750,"## Description
Fish-style auto-suggestion.

## Checklist
- [x] I've added this contribution to the `changelog.md`.

Reviewer: @j-bennet ","Add fish-style autosuggestion.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=h1) Report
> Merging [#750](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/69daf3ae0c20fdaa2a5140d74a6f61ca43029ce0?src=pr&el=desc) will **increase** coverage by `<.01%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/750/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #750      +/-   ##
==========================================
+ Coverage   83.06%   83.07%   +<.01%     
==========================================
  Files          20       20              
  Lines        2197     2198       +1     
==========================================
+ Hits         1825     1826       +1     
  Misses        372      372
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/key\_bindings.py](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=tree#diff-cGdjbGkva2V5X2JpbmRpbmdzLnB5) | `42.85% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `79.92% <0%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=footer). Last update [69daf3a...925341c](https://codecov.io/gh/dbcli/pgcli/pull/750?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Well! That looked easy! I like it. ❤️ ",2017-07-16 22:10:34,2017-07-17 00:48:35
451,749,"## Description
Typing `\h` without any arguments returns an error: 

```
amjith@(none):world> \h
list index out of range
```

## Your environment
macOS
Installed via pip
pgcli version 1.6.0
pgspecial 1.8.0","`\h` is broken
@stuartquin I think you might be interested in this one. :)
Hi @amjith 

I've done some digging on this one and it seems the issue comes from way down in `cli_helpers`: https://github.com/dbcli/cli_helpers/blob/master/cli_helpers/tabular_output/preprocessors.py#L88
and
https://github.com/dbcli/cli_helpers/blob/master/cli_helpers/tabular_output/preprocessors.py#L95

I'm not familiar with this area so am hesitant to jump in and hack it but it seems adding a guard solves the issue:

```
if i < len(column_types) and column_types[i] is float and type(v) in float_types:
```

Perhaps @tsroten can suggest a cleaner solution?

Thanks
@stuartquin It looks like the problem is that the data does not have even rows. The last row only has 4 items, and the rest have 6 items.

~~This produces two different bugs depending which pgcli version you use.~~
1. ~~In pgcli < 1.7.0, you only see two-thirds of the output since the last two (out of six) columns are truncated by tabulate.~~
2. In pgcli 1.7.0, you get the error about the list index.

I've got a fix in CLI Helpers to make the behavior match < 1.7.0. ~~The output looks fine if you use `ascii` as your `table_format` in pgcli. So, it looks like we'll need to address the other issue with tabulate.~~
@stuartquin Nevermind what I said about truncating output 😄 , looks like my pager settings were messed up. I released a CLI Helpers update, so this should be fixed now.",2017-07-16 17:28:58,2017-07-16 22:08:57
452,748,"## Description
<!--- Describe your changes in detail. -->

Fixed the release script; `tag -s` command won't work (will get stuck expecting user input) if a message is not provided.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- ~[ ] I've added my name to the `AUTHORS` file (or it's already there)~.
","Signed tags also need a message. Mhm.
🍸 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/748?src=pr&el=h1) Report
> Merging [#748](https://codecov.io/gh/dbcli/pgcli/pull/748?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/da48bdd6a427c78975a41081660a1e8f0b9a82a8?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/748/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/748?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #748   +/-   ##
=======================================
  Coverage   83.06%   83.06%           
=======================================
  Files          20       20           
  Lines        2197     2197           
=======================================
  Hits         1825     1825           
  Misses        372      372
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/748?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/748?src=pr&el=footer). Last update [da48bdd...8ba9c34](https://codecov.io/gh/dbcli/pgcli/pull/748?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-07-16 03:26:57,2017-07-16 03:28:09
453,747,"## Description
<!--- Describe your changes in detail. -->

Updated the changelog before releasing 1.7.0.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Changelog update to release 1.7.0.
👍 
",2017-07-16 02:21:47,2017-07-16 03:08:04
454,746,"## Description
Add an option to list databases from command line.
Should fix #206 .
My modifications are open for discussion, I tried my best to fit into existing code, but it may not be perfect.

## Checklist
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","List databases
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=h1) Report
> Merging [#746](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/534c0de47e8b1f11304c76578c32bb4323711b60?src=pr&el=desc) will **decrease** coverage by `0.38%`.
> The diff coverage is `28.57%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/746/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #746      +/-   ##
==========================================
- Coverage   83.45%   83.06%   -0.39%     
==========================================
  Files          20       20              
  Lines        2182     2197      +15     
==========================================
+ Hits         1821     1825       +4     
- Misses        361      372      +11
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.73% <28.57%> (-1.55%)` | :arrow_down: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `79.88% <0%> (-0.83%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=footer). Last update [534c0de...90fd160](https://codecov.io/gh/dbcli/pgcli/pull/746?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

It works beautifully. Ignore my previous comment about returning the cursor it won't work since the cursor is closed by the time format_output() gets to it. ",2017-07-14 23:10:09,2017-07-15 05:27:55
455,745,"## Description

I've been struggling with installation of `pgcli` because it was failing on building wheel for `psycopg2`. After environment fixes (`pg_config`) I've managed to install it.

However, when I want to run pgcli I get:

```
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 7, in <module>
    from pgcli.main import cli
  File ""/usr/lib/python3.6/site-packages/pgcli/main.py"", line 39, in <module>
    from pgspecial.main import (PGSpecial, NO_QUERY, content_exceeds_width)
  File ""/usr/lib/python3.6/site-packages/pgspecial/__init__.py"", line 12, in <module>
    from . import iocommands
  File ""/usr/lib/python3.6/site-packages/pgspecial/iocommands.py"", line 9, in <module>
    import psycopg2
  File ""/usr/lib/python3.6/site-packages/psycopg2/__init__.py"", line 50, in <module>
    from psycopg2._psycopg import (                     # noqa
ImportError: No such file or directory
```

There is `_psycopg.cpython-36m-x86_64-cygwin.dll` under `/usr/lib/python3.6/site-packages/psycopg2`

## Your environment
Windows 7
Cygwin 2.8.2(0.313/5/3)

`pip freeze` output:
```
ansible==2.2.2.0
appdirs==1.4.3
asn1crypto==0.22.0
cffi==1.9.1
chardet==2.3.0
click==6.7
configobj==5.0.6
cryptography==1.8.1
docutils==0.13.1
humanize==0.5.1
idna==2.5
Jinja2==2.9.6
lockfile==0.12.2
lxml==3.7.3
MarkupSafe==1.0
packaging==16.8
paramiko==2.1.2
pgcli==1.6.0
pgspecial==1.8.0
Pillow==4.1.1
ply==3.9
prompt-toolkit==1.0.14
psycopg2==2.7.1
pyasn1==0.2.3
pycparser==2.17
pycrypto==2.6.1
Pygments==2.2.0
pyOpenSSL==16.2.0
pyparsing==2.1.10
PyYAML==3.12
requests==2.13.0
six==1.10.0
sqlparse==0.2.3
urllib3==1.20
wcwidth==0.1.7
```","Can't run on Cygwin
Although it is problematic, I'm not entirely sure it is related to pgcli.

Can you try and see what happen if you try to run `import psycopg2` right out of a python shell?
```
-> % python
Python 3.6.1 (default, Mar 21 2017, 21:49:16)
[GCC 5.4.0] on cygwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import psycopg2
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/lib/python3.6/site-packages/psycopg2/__init__.py"", line 50, in <module>
    from psycopg2._psycopg import (                     # noqa
ImportError: No such file or directory
```

Probably it's more `psycopg2` error, but I thought someone could help me with getting `pgcli` running..
I could test to install it on Windows if I can get my hands on one (having Windows 10 ATM, although I do not dev on it), but your issue seems related to psycopg2 itself. 

I did run a search on their github, but couldn't find anything related to your issue, but I think they will be more skilled than me to handle this.

Anyway, if I can manage to test it on Win7 + 3.6.1 I'll let you know if I have the same issue.
@Wirone I have sent this http://www.stickpeople.com/projects/python/win-psycopg/ to the users to try in the past. 


FYI I no longer develop on Windows, so I won't be helpful on this anymore. Feel free to close it.
Closing. We can always reopen this if someone else is affected.",2017-07-14 10:20:44,2018-03-06 18:40:08
456,744,"## Description
When expanding * for `INSERT INTO tbl(*`, skip columns that have a default value of either some sequence (`nextval(...`) or of `now()`.


## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Better * expansion for inserts
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=h1) Report
> Merging [#744](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/3081caa1aafde076a8472d62091d131dd8ee72c8?src=pr&el=desc) will **increase** coverage by `0.09%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/744/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #744      +/-   ##
==========================================
+ Coverage   83.36%   83.45%   +0.09%     
==========================================
  Files          20       20              
  Lines        2176     2182       +6     
==========================================
+ Hits         1814     1821       +7     
+ Misses        362      361       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `86.27% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.58% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `86.48% <100%> (+0.77%)` | :arrow_up: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.38% <100%> (+0.24%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=footer). Last update [3081caa...28a3afc](https://codecov.io/gh/dbcli/pgcli/pull/744?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Should this skip columns of type SERIAL as well? Right now I see `id` being suggested by `id` is of type `SERIAL` which should be auto-incremented. 
How do I trigger this feature? Here's what I'm seeing: 

<img width=""829"" alt=""1__dbcli_0_python2_7_-__pgcli___users_amjith_code_python_pgcli____tmux__and_postgresql_-_add_timestamp_column_with_default_now___for_new_rows_only_-_stack_overflow"" src=""https://user-images.githubusercontent.com/49260/27997627-7334e410-64b1-11e7-92e3-1ef342d49100.png"">


I have a column with default set to now() and a column that has a nextval() but both of them are suggested by completion. 
@amjith I think `serial` columns are just syntactic sugar for `integer` with a `nextval(...` default, so they should be covered? I get these results on 9.1.24 and 9.6.2:
```
vagrant@vagrant:vagrant> CREATE TABLE bar(id serial);
........................ SELECT att.atttypid::regtype, def.adsrc
........................ FROM pg_attribute att
........................ LEFT OUTER JOIN pg_attrdef def
........................     ON def.adrelid = att.attrelid
........................     AND def.adnum = att.attnum
........................ WHERE att.attrelid = 'bar'::regclass AND att.attname = 'id';
NOTICE:  CREATE TABLE will create implicit sequence ""bar_id_seq"" for serial column ""bar.id""

CREATE TABLE
╒════════════╤═════════════════════════════════╕
│ atttypid   │ adsrc                           │
╞════════════╪═════════════════════════════════╡
│ integer    │ nextval('bar_id_seq'::regclass) │
╘════════════╧═════════════════════════════════╛
SELECT 1
```
@amjith You enter `INSERT INTO test (*` and trigger completion.
Awesome! That works as expected. 👍 

Reading through the code now.
Is there an advantage in even suggesting the column that have `nextval()` and `now()` in the completion menu? 
Code looks good. Merging. 👍 

",2017-07-07 13:50:40,2017-07-09 21:28:54
457,743,"## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Added InterfaceError handling for closed connection
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/743?src=pr&el=h1) Report
> Merging [#743](https://codecov.io/gh/dbcli/pgcli/pull/743?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/3081caa1aafde076a8472d62091d131dd8ee72c8?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/743/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/743?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #743   +/-   ##
=======================================
  Coverage   83.36%   83.36%           
=======================================
  Files          20       20           
  Lines        2176     2176           
=======================================
  Hits         1814     1814           
  Misses        362      362
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/743?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/743?src=pr&el=footer). Last update [3081caa...928d043](https://codecov.io/gh/dbcli/pgcli/pull/743?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you for your contribution! Could you please remove `.DS_Store`, add a space before your name in `AUTHORS`, and update the [changelog](https://github.com/dbcli/pgcli/blob/master/changelog.rst)?
Merging this now. I'll make the necessary edits once it is merged. 

Thank you again for the contribution @donnell794. ",2017-07-06 05:00:27,2017-07-09 20:49:06
458,742,,"Fix link
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/742?src=pr&el=h1) Report
> Merging [#742](https://codecov.io/gh/dbcli/pgcli/pull/742?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/82a47be23c107ed401cbbf40273b0df42e1f312b?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/742/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/742?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #742   +/-   ##
=======================================
  Coverage   83.36%   83.36%           
=======================================
  Files          20       20           
  Lines        2176     2176           
=======================================
  Hits         1814     1814           
  Misses        362      362
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/742?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/742?src=pr&el=footer). Last update [82a47be...da88e34](https://codecov.io/gh/dbcli/pgcli/pull/742?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@lwm Thanks for making pgcli better!",2017-07-01 18:33:22,2017-07-01 21:34:57
459,741,Fix some incorrectly formatted links using markdown syntax.,"Use RST style links
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/741?src=pr&el=h1) Report
> Merging [#741](https://codecov.io/gh/dbcli/pgcli/pull/741?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/82a47be23c107ed401cbbf40273b0df42e1f312b?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/741/graphs/tree.svg?src=pr&width=650&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/741?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #741   +/-   ##
=======================================
  Coverage   83.36%   83.36%           
=======================================
  Files          20       20           
  Lines        2176     2176           
=======================================
  Hits         1814     1814           
  Misses        362      362
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/741?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/741?src=pr&el=footer). Last update [82a47be...0e5bca6](https://codecov.io/gh/dbcli/pgcli/pull/741?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good. Thanks!",2017-07-01 18:05:23,2017-07-01 21:48:38
460,740,"## Description
<!--- Describe your changes in detail. -->

End-to-end tests for `\x on, \x off, \x auto`.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~[ ] I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Added functional tests for expanded mode.
@j-bennet This looks great. Once the PEP8 errors are fixed, it will be ready.
@tsroten Ah yes. It's all pep8-ed now!
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/740?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@018f495`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/740/graphs/tree.svg?height=150&src=pr&token=XdciEnQkL2&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/740?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #740   +/-   ##
=========================================
  Coverage          ?   83.36%           
=========================================
  Files             ?       20           
  Lines             ?     2176           
  Branches          ?        0           
=========================================
  Hits              ?     1814           
  Misses            ?      362           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/740?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/740?src=pr&el=footer). Last update [018f495...25dd036](https://codecov.io/gh/dbcli/pgcli/pull/740?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-06-26 18:29:46,2017-06-26 20:18:46
461,739,"## Description
Now that we don't vendor in tabulate or ordereddict we can call pgcli purely 'BSD' licensed. 



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
~~- [ ] I've added this contribution to the `changelog.md`.~~
~~- [ ] I've added my name to the `AUTHORS` file (or it's already there).~~
","Task/update license
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/739?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@018f495`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/739/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/739?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #739   +/-   ##
=========================================
  Coverage          ?   83.18%           
=========================================
  Files             ?       20           
  Lines             ?     2176           
  Branches          ?        0           
=========================================
  Hits              ?     1810           
  Misses            ?      366           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/739?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/739?src=pr&el=footer). Last update [018f495...8d024a8](https://codecov.io/gh/dbcli/pgcli/pull/739?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-06-26 17:48:15,2017-06-26 20:20:43
462,738,"You should to tap the formula repo first

## Description
<!--- Describe your changes in detail. -->



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Fixed installation instructions via brew
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=h1) Report
> Merging [#738](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a7a7d09f446cad7f34be04ceb47bd8512b9cd344?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/738/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #738      +/-   ##
==========================================
- Coverage   80.07%   80.03%   -0.04%     
==========================================
  Files          22       22              
  Lines        2554     2554              
==========================================
- Hits         2045     2044       -1     
- Misses        509      510       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.52% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=footer). Last update [a7a7d09...7094741](https://codecov.io/gh/dbcli/pgcli/pull/738?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you for the thoughtful fix. 🍬 ",2017-06-26 08:02:31,2017-06-26 13:45:15
463,737,"I've recently upgraded from Debian to Debian 9 and suddenly pgcli stopped working. I tried to reinstall it, reinstall pip3, delete and reinstall all packages, but in all cases it resulted in the same error:

    Traceback (most recent call last):
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 655, in _build_master
        ws.require(__requires__)
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 963, in require
        needed = self.resolve(parse_requirements(requirements))
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 854, in resolve
        raise VersionConflict(dist, req).with_context(dependent_req)
    pkg_resources.VersionConflict: (pgcli 1.6.0 (/home/webuser/.local/lib/python3.5/site-packages), Requirement.parse('pgcli==1.5.1'))

    During handling of the above exception, another exception occurred:

    Traceback (most recent call last):
      File ""/usr/local/bin/pgcli"", line 5, in <module>
        from pkg_resources import load_entry_point
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 3019, in <module>
        @_call_aside
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 3003, in _call_aside
        f(*args, **kwargs)
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 3032, in _initialize_master_working_set
        working_set = WorkingSet._build_master()
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 657, in _build_master
        return cls._build_from_requirements(__requires__)
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 670, in _build_from_requirements
        dists = ws.resolve(reqs, Environment())
      File ""/usr/lib/python3/dist-packages/pkg_resources/__init__.py"", line 849, in resolve
        raise DistributionNotFound(req, requirers)
    pkg_resources.DistributionNotFound: The 'pgcli==1.5.1' distribution was not found and is required by the application

(this error occurs whatever CLI args are specified).

Debian 9 x64, python3 version 3.5.3, pgcli version 1.6.0

`pip3 freeze` output:

    chardet==2.3.0
    click==6.7
    colorama==0.3.7
    configobj==5.0.6
    cryptography==1.7.1
    distlib==0.2.4
    html5lib==0.999999999
    httplib2==0.9.2
    humanize==0.5.1
    idna==2.2
    iotop==0.6
    keyring==10.1
    keyrings.alt==1.3
    pgcli==1.6.0
    pgspecial==1.8.0
    prompt-toolkit==1.0.14
    psycopg2==2.7.1
    pyasn1==0.1.9
    pycrypto==2.6.1
    pycurl==7.43.0
    Pygments==2.2.0
    pygobject==3.22.0
    python-apt==1.4.0b3
    python-debian==0.1.30
    python-debianbts==2.6.1
    pyxdg==0.25
    reportbug==7.1.7
    requests==2.12.4
    SecretStorage==2.3.1
    setproctitle==1.1.10
    six==1.10.0
    sqlparse==0.2.3
    unattended-upgrades==0.1
    urllib3==1.19.1
    wcwidth==0.1.7
    webencodings==0.5

It probably has something to do with my environment, as it was working before the upgrade, but still, can somebody tell me what's going on and why it won't run?","pgcli 1.6.0 crashes saying it requires pgcli 1.5.1
@serge1peshcoff Sorry about the trouble. 

Did you install pgcli previously using apt-get? 

Here are some methods to verify. First uninstall pgcli that was installed using pip. 

`pip uninstall pgcli`

Then check if pgcli is installed: 

```
which pgcli
```

Check to make sure it is absolutely not installed on your system: 

```
locate pgcli
```

If is it is installed via apt-get you can remove it using `sudo apt-get remove pgcli`. 

Once you've thoroughly cleansed your system of all traces of pgcli, you can try again to install pgcli using pip. 

```
pip3 install pgcli
```

I hope that helps. 
@amjith yep, that totally worked! Apparently I had some stuff left from python-3.4 (there was the pgcli folder in python3.4 folder), while I was using python-3.5. I've removed it and everything is working now.
Thanks for help!",2017-06-21 16:05:17,2017-06-21 17:21:09
464,736,"## Description
I often write a query, run it, check the results, then type ""\e"" to repeat.
If it all possible, is there a command one could run that would send the text to SQL, output it in the pager, and then ""q"" to take you back into vim?

## Your environment
<!-- This gives us some more context to work with. -->

- [X] Please provide your OS and version information.
Linux lubuntu 16.04

- [x] Please provide your CLI version.
1.5.1

- [x] What is the output of ``pip freeze`` command.
```
chardet==2.3.0
click==6.7
colorama==0.3.9
command-not-found==0.3
defer==1.0.6
distro-info===0.14build1
docopt==0.6.2
feedparser==5.2.1
gitsome==0.7.2
greenlet==0.4.11
language-selector==0.1
lightdm-gtk-greeter-settings==1.2.1
lxml==3.6.4
Mako==1.0.4
MarkupSafe==0.23
msgpack-python==0.4.8
neovim==0.1.12
numpydoc==0.6.0
pexpect==4.2.0
Pillow==3.3.1
ply==3.10
prompt-toolkit==1.0.14
ptyprocess==0.5.1
pycups==1.9.73
Pygments==2.2.0
pygobject==3.22.0
python-apt==1.1.0b5
python-debian==0.1.29
pytz==2016.10
pyxdg==0.25
PyYAML==3.11
reportlab==3.3.0
requests==2.10.0
six==1.10.0
ssh-import-id==5.6
ubuntu-drivers-common==0.0.0
ufw==0.35
uritemplate==3.0.0
uritemplate.py==3.0.2
urllib3==1.15.1
usb-creator==0.3.3
wcwidth==0.1.7
xkit==0.0.0
```
","Running queries from vim
Instead of using vim to edit your queries you can set pgcli in VI command mode?

Else I'd suggest you use a VIM plugin to execute queries.
dbext is a great VIM plugin for this: https://mutelight.org/dbext-the-last-sql-client-youll-ever-need
dbext + pgcli is delightful. Thank you for the suggestion.",2017-06-20 17:27:00,2017-07-29 09:03:45
465,735,"## Description
<!--- Describe your changes in detail. -->

This pull request moves all output formatting to CLI Helpers. It fixes https://github.com/dbcli/pgcli/issues/617.

It removes:
- the packaged tabulate library.
- the expanded output module.

One other change is that the expanded output starts the record numbers at 1 instead of 0, which actually makes it behave like psql. So, instead of:
`-[ RECORD 0 ]-------------------------`
you see:
`-[ RECORD 1 ]-------------------------`

~~**Note: The tests will fail until CLI Helpers v2.0 is released.**~~


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Use CLI Helpers for output formatting
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=h1) Report
> Merging [#735](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a7a7d09f446cad7f34be04ceb47bd8512b9cd344?src=pr&el=desc) will **increase** coverage by `3.1%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/735/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #735     +/-   ##
=========================================
+ Coverage   80.07%   83.18%   +3.1%     
=========================================
  Files          22       20      -2     
  Lines        2554     2176    -378     
=========================================
- Hits         2045     1810    -235     
+ Misses        509      366    -143
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.52% <0%> (-0.36%)` | :arrow_down: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.52% <0%> (+0.03%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=footer). Last update [a7a7d09...d26a193](https://codecov.io/gh/dbcli/pgcli/pull/735?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

This looks great!! Fantastic work. 👏  🍰 ",2017-06-19 17:10:37,2017-06-26 17:37:26
466,734,"Hi,

Standard `NullHandler` is here for a while. It's implementation is even more complete than our own. I suggest to use it.
","Use standard NullHandler
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/734?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@9d74cd1`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/734/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/734?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #734   +/-   ##
=========================================
  Coverage          ?   80.03%           
=========================================
  Files             ?       22           
  Lines             ?     2554           
  Branches          ?        0           
=========================================
  Hits              ?     2044           
  Misses            ?      510           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/734?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/734?src=pr&el=footer). Last update [9d74cd1...e517525](https://codecov.io/gh/dbcli/pgcli/pull/734?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-06-15 07:51:43,2017-06-15 14:00:59
467,733,"Closes: #37 

As suggested in the description of the issue, I just use the first existing socketdir found from a list of well known candidates. This should be enough.","Search socket dir before falling back to psycopg2 guess
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/733?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@9d74cd1`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/733/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/733?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #733   +/-   ##
=========================================
  Coverage          ?   80.09%           
=========================================
  Files             ?       22           
  Lines             ?     2562           
  Branches          ?        0           
=========================================
  Hits              ?     2052           
  Misses            ?      510           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/733?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/733?src=pr&el=footer). Last update [9d74cd1...de7f76b](https://codecov.io/gh/dbcli/pgcli/pull/733?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@j-bennet Ready for merge.
🆙 @j-bennet 
@bersace This change made my connection experience worse. I connect to my local instance via localhost:5432. But this change give preference to socket over port. 

Previously I used to type `pgcli` and nothing else it will correctly connect to postgres. Now if I type `pgcli` I get the following error: 

```
could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket ""/usr/local/var/postgres/.s.PGSQL.5432""?
```
@amjith That's not the goal ^^

What is the behaviour of psql for you ? Do you want `pgcli` to glob for `.PGSQL*` socket ?

For the sharing, I run simple docker compose file and use `direnv` to setup `PGHOST` when I cd to `pgcli` directory.

``` yaml
# cat /my-docker-compose.yml
version: '2'

services:
  pg96:
    image: postgres:9.6
```

``` bash
# cat .envrc
export PGHOST=postgres.docker
export PGUSER=postgres
. ${WORKON_HOME}/pgcli/bin/activate
export COMPOSE_FILE=my-docker-compose.yml
```

Right now the behavior pgcli mimics the behavior of psql. I don't think there is a standard name for postgres socket files.

I'm inclined to say that we stick with psycopg2's order of detection to connect to a database and not do anything fancy ourselves. 
I think this PR was caused by https://github.com/dbcli/pgcli/issues/37, where `pgcli` failed to connect to a socket, while `psql` did the right thing. It would be good to fix that. I think it should be possible to check for being able to connect on those sockets first, and if that fails, delegate to psycopg2 to do the rest.
So I verified the current `pgcli` vs `psql` behavior, and it seems to me that pgcli actually does the right thing. It can connect to the UNIX socket if it is correctly specified in `postgresql.conf` as `unix_socket_directory` or `unix_socket_directories`. If it's not correctly specified there, then `psql` would not be able to connect either (see https://dba.stackexchange.com/questions/21587/postgresql-is-running-locally-but-i-cannot-connect-why).

I think this change is not needed, sorry @bersace.
Closing this in favor of existing behavior.",2017-06-14 16:44:18,2017-08-07 03:39:33
468,732,"``` console
$ pep8 --select=E302,W391  pgcli tests/
$
```

:-)","Fix empty line lint
@meeuw pep8radius is wrong :/
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=h1) Report
> Merging [#732](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/f4d6adfc2c7c34799711c5ed7d425c55f9719e4a?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/732/graphs/tree.svg?token=XdciEnQkL2&width=650&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #732   +/-   ##
=======================================
  Coverage   80.01%   80.01%           
=======================================
  Files          22       22           
  Lines        2557     2557           
=======================================
  Hits         2046     2046           
  Misses        511      511
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/encodingutils.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvZW5jb2Rpbmd1dGlscy5weQ==) | `100% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/prioritization.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcHJpb3JpdGl6YXRpb24ucHk=) | `100% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/expanded.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvZXhwYW5kZWQucHk=) | `100% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/tabulate.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvdGFidWxhdGUucHk=) | `59.2% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/ordereddict.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvb3JkZXJlZGRpY3QucHk=) | `0% <ø> (ø)` | :arrow_up: |
| [pgcli/pgtoolbar.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGd0b29sYmFyLnB5) | `28.12% <ø> (ø)` | :arrow_up: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.14% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/pgliterals/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9fX2luaXRfXy5weQ==) | `100% <ø> (ø)` | :arrow_up: |
| [pgcli/filters.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvZmlsdGVycy5weQ==) | `85.71% <ø> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.52% <ø> (ø)` | :arrow_up: |
| ... and [5 more](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=footer). Last update [f4d6adf...a7f2b79](https://codecov.io/gh/dbcli/pgcli/pull/732?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

This looks good to me @bersace. Is it ready to merge?
@j-bennet ready :-)
Good! Merging. :)",2017-06-14 14:34:54,2017-06-14 16:45:57
469,731,"Hello, I was trying to update the pgcli formula, but I have no idea where the tarballs come from, can someone explain to me how to get newer versions of the package urls?

``` rb
class Pgcli < Formula
  desc ""CLI for Postgres with auto-completion and syntax highlighting""
  homepage ""https://pgcli.com/""
  url ""https://files.pythonhosted.org/packages/44/c7/a3a1df56b7eefdbf2aaf833d2856262f075ece87530d98936d4147d3e32e/pgcli-1.5.1.tar.gz""
  sha256 ""10d7334a9a90c8eec107dca89f8bde0a5dbfa10bfc5f187402c3f1adffee36d7""

  bottle do
    cellar :any
    sha256 ""35a4ff3b9518553243f79ed230e0da38a1318fc0cab59003da3e347741499183"" => :sierra
    sha256 ""12eabe80aafb6a9be527cee2d39295c706539f2ed0f8c59293398dc2eabe7e11"" => :el_capitan
    sha256 ""0173793349867ee9fcefe023862f9b8cb1dff2f99858bddf8f2b26ee454661d2"" => :yosemite
  end

  depends_on :python if MacOS.version <= :snow_leopard
  depends_on ""openssl""
  depends_on :postgresql

  resource ""click"" do
    url ""https://files.pythonhosted.org/packages/95/d9/c3336b6b5711c3ab9d1d3a80f1a3e2afeb9d8c02a7166462f6cc96570897/click-6.7.tar.gz""
    sha256 ""f15516df478d5a56180fbf80e68f206010e6d160fc39fa508b65e035fd75130b""
  end

  resource ""configobj"" do
    url ""https://files.pythonhosted.org/packages/64/61/079eb60459c44929e684fa7d9e2fdca403f67d64dd9dbac27296be2e0fab/configobj-5.0.6.tar.gz""
    sha256 ""a2f5650770e1c87fb335af19a9b7eb73fc05ccf22144eb68db7d00cd2bcb0902""
  end

  resource ""humanize"" do
    url ""https://files.pythonhosted.org/packages/8c/e0/e512e4ac6d091fc990bbe13f9e0378f34cf6eecd1c6c268c9e598dcf5bb9/humanize-0.5.1.tar.gz""
    sha256 ""a43f57115831ac7c70de098e6ac46ac13be00d69abbf60bdcac251344785bb19""
  end

  resource ""pgspecial"" do
    url ""https://files.pythonhosted.org/packages/71/cc/93ee525a00e5ad6306945529d6f9c7ea0058d2f7a72ad25759c21e558780/pgspecial-1.7.0.tar.gz""
    sha256 ""297e231caf77e129c4d0b71f97ca022be8d32684928af5959050de727245db4a""
  end

  resource ""prompt_toolkit"" do
    url ""https://files.pythonhosted.org/packages/23/be/4876b52d5cc159cbd4b0ff6e7aa419a26470849a43a8f647857a4a24467b/prompt_toolkit-1.0.13.tar.gz""
    sha256 ""33d68ca09f76cd73287fde7df5748ffacf26a8238dd61ee81ac50860ea7c6776""
  end

  resource ""psycopg2"" do
    url ""https://files.pythonhosted.org/packages/f8/e9/5793369ce8a41bf5467623ded8d59a434dfef9c136351aca4e70c2657ba0/psycopg2-2.7.1.tar.gz""
    sha256 ""86c9355f5374b008c8479bc00023b295c07d508f7c3b91dbd2e74f8925b1d9c6""
  end

  resource ""Pygments"" do
    url ""https://files.pythonhosted.org/packages/71/2a/2e4e77803a8bd6408a2903340ac498cb0a2181811af7c9ec92cb70b0308a/Pygments-2.2.0.tar.gz""
    sha256 ""dbae1046def0efb574852fab9e90209b23f556367b5a320c0bcb871c77c3e8cc""
  end

  resource ""setproctitle"" do
    url ""https://files.pythonhosted.org/packages/5a/0d/dc0d2234aacba6cf1a729964383e3452c52096dc695581248b548786f2b3/setproctitle-1.1.10.tar.gz""
    sha256 ""6283b7a58477dd8478fbb9e76defb37968ee4ba47b05ec1c053cb39638bd7398""
  end

  resource ""six"" do
    url ""https://files.pythonhosted.org/packages/b3/b2/238e2590826bfdd113244a40d9d3eb26918bd798fc187e2360a8367068db/six-1.10.0.tar.gz""
    sha256 ""105f8d68616f8248e24bf0e9372ef04d3cc10104f1980f54d57b2ce73a5ad56a""
  end

  resource ""sqlparse"" do
    url ""https://files.pythonhosted.org/packages/45/67/14bdaeff492e6d03a055fe80502bae10b679891c25a0dc59be2fe51002f8/sqlparse-0.2.3.tar.gz""
    sha256 ""becd7cc7cebbdf311de8ceedfcf2bd2403297024418801947f8c953025beeff8""
  end

  resource ""wcwidth"" do
    url ""https://files.pythonhosted.org/packages/55/11/e4a2bb08bb450fdbd42cc709dd40de4ed2c472cf0ccb9e64af22279c5495/wcwidth-0.1.7.tar.gz""
    sha256 ""3df37372226d6e63e1b1e1eda15c594bca98a22d33a23832a90998faa96bc65e""
  end

  def install
    ENV.prepend_create_path ""PYTHONPATH"", libexec/""vendor/lib/python2.7/site-packages""
    resources.each do |r|
      r.stage do
        system ""python"", *Language::Python.setup_install_args(libexec/""vendor"")
      end
    end

    ENV.prepend_create_path ""PYTHONPATH"", libexec/""lib/python2.7/site-packages""
    system ""python"", *Language::Python.setup_install_args(libexec)

    bin.install Dir[""#{libexec}/bin/*""]
    bin.env_script_all_files(libexec/""bin"", :PYTHONPATH => ENV[""PYTHONPATH""])
  end

  test do
    system bin/""pgcli"", ""--help""
  end
end
```","Pgcli formula
@lifeiscontent Hello! I just responded to you on Gitter. I just use the PyPI download links and change the host name from pypi to pythonhosted.
@lifeiscontent You might be interested to know that we maintain our own brew formula. 

https://github.com/dbcli/homebrew-tap


@tsroten oh, that's all? Wow. I guess I should of payed attention to the signature of the URL. Haha 😅  Thanks!",2017-06-10 07:17:58,2017-06-12 14:38:58
470,730,"## Description
<!--- Describe your changes in detail. -->

Fixes https://github.com/dbcli/pgcli/issues/469. Schema name should be quoted in `SET SCHEMA` statement.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Schema name should be single-quoted in SET SCHEMA.
The test failures look legitimate. 
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=h1) Report
> Merging [#730](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/6c814acd5f891fceacb38ca9012676d16195a3bc?src=pr&el=desc) will **decrease** coverage by `0.02%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/730/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #730      +/-   ##
==========================================
- Coverage   79.99%   79.96%   -0.03%     
==========================================
  Files          22       22              
  Lines        2549     2556       +7     
==========================================
+ Hits         2039     2044       +5     
- Misses        510      512       +2
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.52% <100%> (-0.34%)` | :arrow_down: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.14% <100%> (+0.02%)` | :arrow_up: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.18% <0%> (-0.19%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=footer). Last update [6c814ac...422ea6e](https://codecov.io/gh/dbcli/pgcli/pull/730?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Excellent :shipit:
Thanks!",2017-06-09 21:42:39,2017-06-10 23:53:23
471,729,"## Description
<!--- Describe your changes in detail. -->

Only set LESS environment variable if it's not already set.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Only change LESS in env if not already configured.
Related issue:

https://github.com/dbcli/pgcli/issues/399
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/729?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@af27c34`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/729/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/729?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #729   +/-   ##
=========================================
  Coverage          ?   80.05%           
=========================================
  Files             ?       22           
  Lines             ?     2557           
  Branches          ?        0           
=========================================
  Hits              ?     2047           
  Misses            ?      510           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/729?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/729?src=pr&el=footer). Last update [af27c34...d060de9](https://codecov.io/gh/dbcli/pgcli/pull/729?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@j-bennet Great job :)",2017-06-09 18:14:33,2017-06-11 17:00:44
472,728,"## Description

As part of creating conda-forge packages for pgcli and pgspecial we should include the license in
the source distribution.

ref: https://github.com/dbcli/pgspecial/pull/38


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Update manifest to include license in source distribution
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/728?src=pr&el=h1) Report
> Merging [#728](https://codecov.io/gh/dbcli/pgcli/pull/728?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/ec9873fa85fddc330e55de4ab792bff799fe7c29?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/728/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/728?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #728   +/-   ##
=======================================
  Coverage   79.99%   79.99%           
=======================================
  Files          22       22           
  Lines        2549     2549           
=======================================
  Hits         2039     2039           
  Misses        510      510
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/728?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/728?src=pr&el=footer). Last update [ec9873f...868d797](https://codecov.io/gh/dbcli/pgcli/pull/728?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thank you! :ice_cream: ",2017-06-03 23:43:23,2017-06-04 01:43:40
473,727,"## Description
<!--- Describe your changes in detail. -->
Updates the macOS installation instructions to use dbcli's Homebrew tap.

This address #718.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Update Homebrew install instructions
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/727?src=pr&el=h1) Report
> Merging [#727](https://codecov.io/gh/dbcli/pgcli/pull/727?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/837c8051e42d9de458c60a2ac55ab1eeeac33021?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/727/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/727?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #727   +/-   ##
=======================================
  Coverage   79.96%   79.96%           
=======================================
  Files          22       22           
  Lines        2551     2551           
=======================================
  Hits         2040     2040           
  Misses        511      511
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/727?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/727?src=pr&el=footer). Last update [837c805...95358a1](https://codecov.io/gh/dbcli/pgcli/pull/727?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-06-02 19:15:25,2017-06-02 19:31:32
474,726,"## Description
This removes Python 2.6 from `setup.py` and adds 3.5 and 3.6 (both of which are tested via Travis).



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- ~I've added this contribution to the `changelog.md`.~ Not required.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Use correct Python versions for setup.py metadata.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/726?src=pr&el=h1) Report
> Merging [#726](https://codecov.io/gh/dbcli/pgcli/pull/726?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/837c8051e42d9de458c60a2ac55ab1eeeac33021?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/726/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/726?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #726   +/-   ##
=======================================
  Coverage   79.96%   79.96%           
=======================================
  Files          22       22           
  Lines        2551     2551           
=======================================
  Hits         2040     2040           
  Misses        511      511
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/726?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/726?src=pr&el=footer). Last update [837c805...f2cf710](https://codecov.io/gh/dbcli/pgcli/pull/726?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-06-02 19:10:39,2017-06-02 19:23:02
475,725,"## Description
Connection reset by database but no prompt presented to user to reconnect. 

reported by @lazycoder-ru via gitter

## Your environment

python 2.7 
pgcli version 1.6

```
2017-06-01 16:03:43,580 (13669/MainThread) pgcli.pgexecute ERROR - sql: u'SELECT statement', error: OperationalError('server closed the connection unexpectedly\n\tThis probably means the server terminated abnormally\n\tbefore or while processing the request.\n',)
2017-06-01 16:03:43,581 (13669/MainThread) pgcli.pgexecute ERROR - traceback: 'Traceback (most recent call last):\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 298, in run\n    yield self.execute_normal_sql(sql) + (sql, True)\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 333, in execute_normal_sql\n    cur.execute(split_sql)\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 40, in _wait_select\n    state = conn.poll()\nOperationalError: server closed the connection unexpectedly\n\tThis probably means the server terminated abnormally\n\tbefore or while processing the request.\n\n'
2017-06-01 16:03:43,581 (13669/MainThread) pgcli.main ERROR - sql: u'SELECT statement', error: KeyError(None,)
2017-06-01 16:03:43,582 (13669/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 403, in execute_command\n    output, query = self._evaluate_command(text)\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 618, in _evaluate_command\n    for title, cur, headers, status, sql, success in res:\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 303, in run\n    if (self._must_raise(e)\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 327, in _must_raise\n    psycopg2.errorcodes.lookup(e.pgcode) != \'LOCK_NOT_AVAILABLE\')\n  File ""/usr/local/lib/python2.7/dist-packages/psycopg2/errorcodes.py"", line 52, in lookup\n    return _cache[code]\nKeyError: None\n'
2017-06-01 16:03:50,152 (13669/MainThread) pgcli.main ERROR - sql: u'SELECT statement', error: InterfaceError('connection already closed',)
2017-06-01 16:03:50,152 (13669/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 403, in execute_command\n    output, query = self._evaluate_command(text)\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 618, in _evaluate_command\n    for title, cur, headers, status, sql, success in res:\n  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 285, in run\n    cur = self.conn.cursor()\nInterfaceError: connection already closed\n'
2017-06-01 16:03:51,663 (13669/MainThread) pgcli.main ERROR - sql: u'SELECT statement', error: InterfaceError('connection already closed',)

```","Connection reset but no prompt to reconnect
Looks like catching the OperationalError is not sufficient. We need to be catching the `InterfaceError` as well. 

Needs a little bit of digging to find out why. But the simple fix is to add `InterfaceError` to the except statement here: https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L349
I can take care of this addition if it has not been fulfilled 
Closing via https://github.com/dbcli/pgcli/pull/743.",2017-06-01 15:40:50,2017-07-09 22:01:54
476,724,"## Description
<!--- Describe your changes in detail. -->

We have to refresh completions after COMMIT or ROLLBACK, since those may change the database schema. See also #711.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Refresh completions after COMMIT or ROLLBACK.
I think the tests are failing because of pep8radius but I can't tell why. 
Yes, I'll have a look tomorrow.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=h1) Report
> Merging [#724](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/85167d3589643b9dcf8ef7b35937f2ff0d036efb?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/724/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=tree)

```diff
@@          Coverage Diff          @@
##           master   #724   +/-   ##
=====================================
  Coverage      80%    80%           
=====================================
  Files          22     22           
  Lines        2551   2551           
=====================================
  Hits         2041   2041           
  Misses        510    510
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/config.py](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=tree#diff-cGdjbGkvY29uZmlnLnB5) | `91.3% <0%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=footer). Last update [85167d3...bdf0d88](https://codecov.io/gh/dbcli/pgcli/pull/724?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks like pep8radius wanted a period at the end of the sentence 😲 

This seem to work great 😄 . Merged.
> Looks like pep8radius wanted a period at the end of the sentence

That's the most hilarious flagging of a violation. I didn't realize pep8radius was such a grammar police. ;)",2017-05-29 00:58:12,2017-05-29 13:18:46
477,723,"## Description
<!--- Describe your changes in detail. -->

Addresses https://github.com/dbcli/pgcli/issues/542.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] ~I've added this contribution to the `changelog.md`~.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Create signed tags in release script.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=h1) Report
> Merging [#723](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/265c063159d62bb5fb0a911b0a9749a25ee3f207?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/723/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #723      +/-   ##
==========================================
- Coverage      80%   79.96%   -0.04%     
==========================================
  Files          22       22              
  Lines        2551     2551              
==========================================
- Hits         2041     2040       -1     
- Misses        510      511       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.5% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=footer). Last update [265c063...2211c98](https://codecov.io/gh/dbcli/pgcli/pull/723?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

🛴 ",2017-05-28 22:41:35,2017-05-29 02:53:51
478,722,"## Description
<!--- Describe your changes in detail. -->

Fix for #717.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Fix alias dsn from custom rcfile
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=h1) Report
> Merging [#722](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/9d3fa4c81f03acf6616551e6aab5b78fec4e06ae?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/722/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=tree)

```diff
@@          Coverage Diff          @@
##           master   #722   +/-   ##
=====================================
  Coverage      80%    80%           
=====================================
  Files          22     22           
  Lines        2551   2551           
=====================================
  Hits         2041   2041           
  Misses        510    510
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/config.py](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=tree#diff-cGdjbGkvY29uZmlnLnB5) | `91.3% <ø> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=footer). Last update [9d3fa4c...bc04775](https://codecov.io/gh/dbcli/pgcli/pull/722?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks good. 🌮 ",2017-05-28 22:06:05,2017-05-29 03:50:14
479,721,"## Description
This adds support for additional url query params which make stuff like

```
pgcli ""postgres://user:pass@host.invalid/db?\
sslmode=verify-full&sslcert=my.pem&sslkey=my-key.pem&sslrootcert=ca.pem""
```

work. More generally it allows one to pass through various extra connection
options.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Make it possible to use SSL with pgcli
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=h1) Report
> Merging [#721](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/666aeee79f849d4a8d02d2860b2f33a9bd105e93?src=pr&el=desc) will **increase** coverage by `0.04%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/721/graphs/tree.svg?height=150&src=pr&token=XdciEnQkL2&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=tree)

```diff
@@           Coverage Diff            @@
##           master   #721      +/-   ##
========================================
+ Coverage   79.96%    80%   +0.04%     
========================================
  Files          22     22              
  Lines        2545   2551       +6     
========================================
+ Hits         2035   2041       +6     
  Misses        510    510
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `88.6% <ø> (ø)` | :arrow_up: |
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `86.27% <100%> (+0.1%)` | :arrow_up: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.44% <0%> (+0.14%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=footer). Last update [666aeee...52e47f3](https://codecov.io/gh/dbcli/pgcli/pull/721?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Looks great! Thank you for your contribution and thanks for taking the time to add tests. 🍨 ",2017-05-25 12:47:35,2017-05-26 20:52:15
480,720,"Hi!
I am using pgcli 1.5.1 on ubuntu trusty from pip and still lowercase autocompletion doesn't work for me. 
I found that this problem seems to be fixed in issue #569 but it still doesn't work for me.
```
s<tab>SELECT
S<tab>SELECT
```
Was this issue really implemented? Or may be I am doing something wrong?","Reopen lowercase autocompletion issue #569
it was easy... keyword_casing = auto in pgclirc solved my problem
👍 ",2017-05-25 12:44:11,2017-05-25 12:55:34
481,719,"## Description
<!--- Describe your changes in detail. -->

Updated changelog and bumped pgspecial to release pgcli 1.6.0.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Preparing to release 1.6.0.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/719?src=pr&el=h1) Report
> Merging [#719](https://codecov.io/gh/dbcli/pgcli/pull/719?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bc6883a308055bd76f6ec82d5d2afdd3d911d528?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/719/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/719?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #719   +/-   ##
=======================================
  Coverage   79.96%   79.96%           
=======================================
  Files          22       22           
  Lines        2545     2545           
=======================================
  Hits         2035     2035           
  Misses        510      510
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/719?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/719?src=pr&el=footer). Last update [bc6883a...567e16f](https://codecov.io/gh/dbcli/pgcli/pull/719?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-05-18 03:10:31,2017-05-27 03:34:39
482,718,"## Description
Hi there,

I discovered pgcli yesterday and gave it a shot (like it so far).
I installed it via Homberew and unfortunately it seems that Homebrew also updated Postgres during the installation process. I can not start the Postgres server with my existing database files anymore. PostgreSQL server log says:
```
FATAL:  database files are incompatible with server
DETAIL:  The data directory was initialized by PostgreSQL version 9.4, which is not compatible with this version 9.6.3.
```
I've checked my ``/usr/local/bin`` directory - the timestamps of the pgcli and postgres symlinks are equal, whereas Python related symlinks and all of my other Homebrew installed programs are of an older date.
Could it be, that there is a bug in the Homebrew formula and Postgres will be always installed in bundle with pgcli? I couldn't find the formula for pgcli in this repository and don't have time ATM to investigate further.

## Your environment
macOS 10.12.4
pgcli 1.5.1
PostgreSQL 9.4 yesterday, and 9.6.3 today 🙈 
pip freeze says:
```
backports-abc==0.4
certifi==2016.8.31
click==6.6
Jinja2==2.8
livereload==2.4.1
Markdown==2.6.6
MarkupSafe==0.23
mkdocs==0.15.3
mkdocs-bootstrap==0.1.1
mkdocs-bootswatch==0.4.0
PyYAML==3.12
singledispatch==3.4.0.3
six==1.10.0
tornado==4.4.1
vboxapi==1.0
wheel==0.26.0
```

","PostgreSQL update during pgcli installation via Homebrew
`pgcli` brew formula [specifies postgresql as a dependency](https://github.com/Homebrew/homebrew-core/blob/master/Formula/pgcli.rb#L16), but without attaching to any particular version. I'm not sure if that is the source of the problem; have to look into it.
So for `pgcli` in the brew formula, we specify `python`, `openssl` and `postgresql` as dependencies. For `mycli`, we only specify `python` and `openssl`. Looks like we could safely leave out `postgresql` from `pgcli` formula.
Some context from @amjith:

> So the reason for having postgresql as a dependency is because otherwise the formula won’t pass in their pull request tests. You’re welcome to remove it and give it a shot. Things have changed with homebrew since I originally created that formula.
> mycli uses pymysql which is a pure python implementation of the mysql driver. So we don’t need mysql installed on the system. But pgcli uses psycopg2 which uses libpq which is a C-binding for postgresql driver. That libpq is only installed if it has postgresql on that system.
I tried removing `postgresql` from formula completely, but that does not work, fails on `brew install --build-from-source pgcli`. So instead, I specified postgresql as dependency that has to be present at runtime: https://github.com/Homebrew/homebrew-core/pull/13659. This seem to have the desired effect of homebrew not updating the existing installation.
Wow, didn't expect the fix so fast. Thank you very much.
Should I try to reproduce the mentioned behavior later when a new version of PostgreSQL is released? Do you wish any feedback for it?
@pboschmann Yes, it would be great to hear about your experience after the formula is merged. Thank you!
Attempt #2: https://github.com/Homebrew/homebrew-core/pull/14004.
@pboschmann Did you use `brew install --build-from-source pgcli`, or `brew install pgcli`? Supposedly, the latter should not have updated your postgresql.
My zsh history says it was `brew install pgcli` I've used.
I have an another machine with Postgres 9.4 installed. If you wish: I could try to reproduce (in a couple of hours) the behavior by executing `brew install pgcli` on it.

No need, thanks! I already verified that the update is happening when you run `brew install pgcli`.
So after an unproductive back and forth with the Homebrew developers, we switched to hosting our own brew formula (courtesy of @tsroten, hosted at https://github.com/dbcli/homebrew-tap). This is how you would install pgcli using our repo, instead of the default homebrew repo:

```
brew tap-pin dbcli/tap && brew install pgcli
```

Hope this helps.
@j-bennet the tap doesn't work for me.

```
Error: No available tap dbcli/tap.
```
@lifeiscontent It's possible you have to do a `brew update` first.
@lifeiscontent 
Works for me if I run `brew update` and tap the formula repo first:
`brew tap dbcli/tap && brew tap-pin dbcli/tap && brew install pgcli`

@j-bennet @tsroten 
This also installed pgcli 1.5.1 on a machine with Postgres 9.4.5 **without** updating Postgres itself.
Thank you very much for your effort and have a nice week. :)
Perfect! Thanks for the feedback!
The homebrew developers updated `pgcli` formula in homebrew-core to not depend on postgresql anymore (see https://github.com/Homebrew/homebrew-core/pull/15725 - thanks to @ilovezfs). This removes the need for us to host our own formula. `pgcli` can now be installed from `homebrew-core`.

cc @tsroten @amjith 
Let's update the readme and the website. 
@j-bennet just saw this now. You're welcome! :) And thanks for updating the readme.

If at least one more formula needs just `libpq`, we may even make `libpq` its own formula.
Thanks @pboschmann  it just worked for me ! i was facing the same error but lucky i found the solution. Thanks once again.
",2017-05-16 21:50:35,2017-06-12 15:25:42
483,717,"## Description
<!--- Describe your problem as fully as you can. -->

I'm loading the config specifying `PGCLIRC` in the environment. The DNS aliases defined in the custom location pgclirc are ignored and loaded from the standard location pgclirc instead (`~/.config/pgcli/config`). Other config options like `multi_line` are successfully loaded from custom location pgclirc. The same thing happens when specifying pgclirc from CLI options.


## Your environment
<!-- This gives us some more context to work with. -->

```console
$ uname -v
Darwin Kernel Version 16.5.0: Fri Mar  3 16:52:33 PST 2017; root:xnu-3789.51.2~3/RELEASE_X86_64
```

```console
$ pgcli --version
Version: 1.5.1
```

```
$ pip freeze
pipg freeze
alabaster==0.7.6
appnope==0.1.0
argcomplete==0.8.9
Babel==1.3
backports.shutil-get-terminal-size==1.0.0
backports.ssl-match-hostname==3.4.0.2
blindspin==2.0.0
certifi==2015.4.28
click==6.7
click-completion==0.2.1
colorama==0.3.7
configparser==3.5.0
crayons==0.1.2
cycler==0.10.0
decorator==4.0.10
delegator.py==0.0.8
docutils==0.12
enum34==1.1.6
filemagic==1.6
flake==0.1.9
flake8==3.2.1
flake8-docstrings==1.0.2
functools32==3.2.3.post1
gnureadline==6.3.3
httpie==0.9.4
icalendar==3.0
ipykernel==4.2.0
ipython==5.1.0
ipython-genutils==0.1.0
ipywidgets==4.1.1
jedi==0.9.0
Jinja2==2.7.3
jsonschema==2.5.1
jupyter==1.0.0
jupyter-client==4.1.1
jupyter-console==4.0.3
jupyter-core==4.0.6
kaptan==0.5.8
libtmux==0.6.3
log-colorizer==1.6
Mako==1.0.6
MarkupSafe==0.23
matplotlib==1.5.1
mccabe==0.5.2
mistune==0.7.1
nbconvert==4.1.0
nbformat==4.0.1
nodeenv==0.13.3
nose==1.3.7
notebook==4.0.6
numpy==1.11.0
numpydoc==0.5
parse==1.6.6
path.py==8.1.2
pathlib==1.0.1
pathlib2==2.1.0
pbr==3.0.0
pep8==1.5.7
pew==0.1.26
pexpect==4.2.1
pickleshare==0.7.4
Pillow==3.4.2
pipenv==3.3.6
pipfile==0.0.1
pojson==0.3
powerline-status==2.3
prompt-toolkit==1.0.9
protobuf==3.2.0
psutil==3.0.1
ptyprocess==0.5.1
pyatom==1.4
pycodestyle==2.2.0
pydocstyle==1.1.1
pyflakes==1.3.0
Pygments==2.1.3
pync==1.6.1
pyparsing==2.1.1
pyPdf==1.13
python-dateutil==2.5.0
pythonz-bd==1.11.4
pytz==2015.4
PyYAML==3.12
pyzmq==14.7.0
qtconsole==4.1.1
requests==2.10.0
requirements-parser==0.1.0
shutilwhich==1.1.0
simplegeneric==0.8.1
simplejson==3.10.0
six==1.10.0
snowballstemmer==1.2.0
Sphinx==1.3.1
sphinx-rtd-theme==0.1.8
stevedore==1.21.0
terminado==0.5
tmuxp==1.2.6
toml==0.9.2
tornado==4.2
tornado-systemd==1.0.1
traitlets==4.3.1
virtualenv==15.1.0
virtualenv-clone==0.2.6
virtualenvwrapper==4.7.2
wcwidth==0.1.7
wdb==2.1.2
wdb.server==2.1.2
xkcdpass==1.9.5
zc.queue==2.0.0a1
```","alias_dns not loading from custom PGCLIRC
@OmeGak `pgcli` reads one standard config file and one custom config file. It looks for the custom file in two locations, in this order of preference:

* location specified in `--pgclirc` file. 
* location specifies in `PGCLIRC` environment variable

So you can use either `PGCLIRC` environment variable or `--pgclirc` option to specify the custom configuration file location, but not both of them. If both are specified, `--pgclirc` will be used.
@j-bennet, maybe I explained myself wrong.

I have a custom `pgclirc` file that gets successfully loaded by specifying it in `PGCLIRC` env var. I know it is loaded because I can see the configuration options (`multi_line`, for instance) being reflected when I invoke `pgcli`.

Now, when I specify DNS aliases in my custom config file, they are completely ignored.

```ini
[alias_dsn]
docker = postgresql://postgres@localhost:15432
```

```console
$ pgcli -D docker
Invalid DSNs found in the config file. Please check the ""[alias_dsn]"" section in pgclirc.
```

Conversely, if I specify the same DNS alias in the standard config file `~/.config/pgcli/config`:

```console
$ pgcli -D docker
Version: 1.5.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@localhost:postgres>
```

I don't know if I'm doing anything wrong, but it looks like a bug to me.
@OmeGak Got it, thanks for the clarification. I'll look into it.
This was fixed in master and will be available in the next release.

To install pgcli from master:

`pip install -U https://github.com/dbcli/pgcli/archive/master.zip`
Great, thanks!",2017-05-15 09:13:18,2017-05-30 15:39:15
484,716,"Copied from the mailing list.

## Description

I am having difficulty connecting to a different DB as a different user after successfully connecting to postgres.  psql exhibits the behavior I expect, however pgcli does not.

1. connecting to new database with new user,  same host, port, etc

From Postgres documentation, 
https://www.postgresql.org/docs/9.6/static/app-psql.html

\c or \connect [ -reuse-previous=on|off ] [ dbname [ username ] [ host ] [ port ] | conninfo ]
Establishes a new connection to a PostgreSQL server. The connection parameters to use can be specified either using a positional syntax, or using conninfo connection strings as detailed in Section 32.1.1.

Where the command omits database name, user, host, or port, the new connection can reuse values from the previous connection. By default, values from the previous connection are reused except when processing a conninfo string. Passing a first argument of -reuse-previous=on or -reuse-previous=off overrides that default. When the command neither specifies nor reuses a particular parameter, the libpq default is used. Specifying any of dbname, username, host or port as - is equivalent to omitting that parameter.

If the new connection is successfully made, the previous connection is closed. If the connection attempt failed (wrong user name, access denied, etc.), the previous connection will only be kept if psql is in interactive mode. When executing a non-interactive script, processing will immediately stop with an error. This distinction was chosen as a user convenience against typos on the one hand, and a safety mechanism that scripts are not accidentally acting on the wrong database on the other hand.


sah209: ~$ psql -p 5436 postgres postgres
Password for user postgres: 
psql (9.6.2)
Type ""help"" for help.

postgres=# \conninfo
You are connected to database ""postgres"" as user ""postgres"" via socket in ""/var/run/postgresql"" at port ""5436"".


postgres=# \c account_bill account_bill
Password for user account_bill: 
You are now connected to database ""account_bill"" as user ""account_bill"".

account_bill=> \conninfo
You are connected to database ""account_bill"" as user ""account_bill"" via socket in ""/var/run/postgresql"" at port ""5436"".



sah209: ~$ pgcli -p 5436 postgres postgres
Password: 
Version: 1.5.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@(none):postgres> 


postgres@(none):postgres> \c account_bill 
You are now connected to database ""account_bill"" as user ""postgres"" 


But I want to connect as -U account_bill

postgres@(none):account_bill> \c account_bill account_bill
Connection reset. Reconnect (Y/n): Y
Reconnected!
Try the command again.



Any suggestions on what I am doing wrong or if this is not yet implemented would be appreciated.



2.  Is there an pgcli equivalent to psql's \conninfo  ?

pgcli ->

postgres@(none):account_bill> \conninfo
syntax error at or near ""\""
LINE 1: \conninfo
        ^

## Your environment



pgcli --version 
Version: 1.5.1

OS:
Distributor ID: Ubuntu 
Description: Ubuntu 16.04.2 LTS 
Release: 16.04 
Codename: xenial

Postgres version = 9.6.2-1.pgdg16.04+1
host = localhost
port = 5436

","Allow \c to take in more options and add support for \conninfo
Hey @amjith,

We did a quick check and this issue looks very darn similar to

* [#715 - Adding time option for the Prompt Format](715)
* [#714 - add behave to tox](714)
* [#712 - Describe domain](712)

This could be a coincidence, but if any of these issues solves your problem then I did a good job :smile:

If not, the maintainers will get to this issue shortly.

Cheers,
Your Friendly Neighborhood ProBot
",2017-05-10 16:36:07,2017-08-14 00:21:43
485,715,"## Description
I added a date option for the prompt (as asked for in #580 ). To use it, you just have to add ""\\t"" to the Prompt Format option.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Adding time option for the Prompt Format
Sorry about the question, I'm quite new to open-source contributing, but I guess I should take a look at the fact that one check has failed? I actually created it in the european format, but it seems this can be easily fixed, there are parameters that actually do this, I will change it too.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=h1) Report
> Merging [#715](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/d62f1e5030fc5fca0428144b5b98b6438631b018?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/715/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #715      +/-   ##
==========================================
- Coverage   79.96%   79.92%   -0.04%     
==========================================
  Files          24       22       -2     
  Lines        3069     2545     -524     
==========================================
- Hits         2454     2034     -420     
+ Misses        615      511     -104
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.5% <0%> (-0.36%)` | :arrow_down: |
| [pgcli/\_\_init\_\_.py](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=tree#diff-cGdjbGkvX19pbml0X18ucHk=) | | |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `80.3% <0%> (+0.14%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=footer). Last update [d62f1e5...6fba603](https://codecov.io/gh/dbcli/pgcli/pull/715?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@gustavo-castro Oh good! I only saw the initial `'%d/%m/%y %H:%M:%S'`. Yes, the `'%x %X'` is better.

Once you add your contribution to AUTHORS and changelog, this PR should be good to merge.

Thank you!
@gustavo-castro Oh, and the tests fail because you added your name to changelog, but it refers to a missing link, which should go in the end of changelog file, like this:

```
.. _`Gustavo Castro`: https://github.com/gustavo-castro
```

@gustavo-castro, you are so close. :) Just add that missing link to the changelog.
@j-bennet Thanks for the help and the incentive! :) I didn't have access to my home computer during the day (european time), I was intending to finish it earlier.
Perfect. :) Merging.

Thank you for the PR, and congratulations on your first contribution to `pgcli`!

🍬 ",2017-05-09 22:00:33,2017-05-11 17:05:11
486,714,"## Description
add behave to tox


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- ~[ ] I've added my name to the `AUTHORS` file (or it's already there).~
","add behave to tox
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=h1) Report
> Merging [#714](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bc6883a308055bd76f6ec82d5d2afdd3d911d528?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/714/graphs/tree.svg?height=150&token=XdciEnQkL2&src=pr&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #714      +/-   ##
==========================================
- Coverage   79.96%   79.92%   -0.04%     
==========================================
  Files          22       22              
  Lines        2545     2545              
==========================================
- Hits         2035     2034       -1     
- Misses        510      511       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.5% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=footer). Last update [bc6883a...c6ae43a](https://codecov.io/gh/dbcli/pgcli/pull/714?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@meeuw According to https://github.com/dbcli/mycli/pull/427, it is not necessary to multiply the number of the test environments (`{pytest,behave}`), is that right?
true, I've changed tox.ini but the behave scripts need some modifications (to be able to run from `PACKAGE_ROOT` instead of `tests` directory). ~I will create a new PR for that.~ Will update this branch.
Looks good to me, but I'd like to try this out before merging. I'll do that as soon as possible.
:+1: take your time.
@meeuw I'll merge it after you remove py26. :)
done
👍 ",2017-05-07 19:28:51,2017-05-23 22:43:37
487,713,"## Description
fix pgspecial update in behave tests


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","fix pgspecial update in behave tests
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/713?src=pr&el=h1) Report
> Merging [#713](https://codecov.io/gh/dbcli/pgcli/pull/713?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bb9d8ac38ef76599b39942835bcd82694f7b4f53?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/713/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/713?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #713   +/-   ##
=======================================
  Coverage   79.95%   79.95%           
=======================================
  Files          23       23           
  Lines        2544     2544           
=======================================
  Hits         2034     2034           
  Misses        510      510
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/713?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/713?src=pr&el=footer). Last update [bb9d8ac...0031814](https://codecov.io/gh/dbcli/pgcli/pull/713?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 
thank you!",2017-05-06 13:52:22,2017-05-06 21:36:59
488,712,"## Description
There doesn't appear to be any way to describe domains in a similar way to postgresql cli's `\dD`:

```
> \dD ""shippingId""
syntax error at or near ""\""
LINE 1: \dD ""shippingId""
        ^

```

An example query to see a domain:

```
> SELECT * FROM pg_catalog.pg_type JOIN pg_catalog.pg_namespace ON pg_namespace.oid = pg_type.typnamespace WHERE typname='shipmentId' and typtype = 'd'
+------------+----------------+------------+----------+------------+-----------+---------------+------------------+----------------+------------+------------+-----------+------------+------------+-------------+-----------
| typname    |   typnamespace |   typowner |   typlen | typbyval   | typtype   | typcategory   | typispreferred   | typisdefined   | typdelim   |   typrelid |   typelem |   typarray | typinput   | typoutput   | typreceive
|------------+----------------+------------+----------+------------+-----------+---------------+------------------+----------------+------------+------------+-----------+------------+------------+-------------+-----------
| shipmentId |            200 |        384 |        8 | True       | d         | N             | False            | True           | ,          |          0 |         0 |          0 | domain_in  | int8out     | domain_rec
+------------+----------------+------------+----------+------------+-----------+---------------+------------------+----------------+------------+------------+-----------+------------+------------+-------------+-----------
SELECT 1
```
","Describe domain
Closed via https://github.com/dbcli/pgspecial/pull/50.",2017-05-05 14:57:00,2019-05-05 15:42:10
489,711,"## Description
Awesome tool!

If I create a table in the current session, there is no autocompletion for that table. 

`> create table foo (id int, xx int);`
`> select * from f`
""foo"" doesn't show up in expansion list.

`> select foo. from foo`
Nothing is suggested after typing "".""

This applies for temp tables, too.

## environment
OS: CentOS release 6.9
CLI: bash
$ pip freeze
Babel==2.4.0
Flask==0.12.1
Flask-Migrate==2.0.3
Flask-SQLAlchemy==3.0.dev-20170428
Flask-Script==2.0.5
Jinja2==2.9.6
Mako==1.0.6
MarkupSafe==1.0
Pillow==4.1.1
Pygments==2.2.0
SQLAlchemy==1.1.9
SQLAlchemy-Utils==0.32.14
Sphinx==1.5.5
Werkzeug==0.12.1
alabaster==0.7.10
alembic==0.9.1
aniso8601==1.2.0
arrow==0.10.0
boto==2.46.1
boto3==1.4.4
botocore==1.5.44
click==6.7
configobj==5.0.6
dnspython==1.15.0
docutils==0.13.1
flake8==3.3.0
flask-marshmallow==0.7.0
flask-restplus==0.10.1
freezegun==0.3.8
httpretty==0.8.10
humanize==0.5.1
imagesize==0.7.1
inflection==0.3.1
itsdangerous==0.24
jmespath==0.9.2
jsonschema==2.6.0
livereload==2.5.1
marshmallow==2.13.5
marshmallow-sqlalchemy==0.13.1
mccabe==0.6.1
mock==2.0.0
moto==0.4.31
olefile==0.44
pbr==3.0.0
pdfrw==0.3
pep8-naming==0.4.1
petl==1.1.1
pgcli==1.5.1
pgspecial==1.7.0
pprintpp==0.3.0
prompt-toolkit==1.0.14
psutil==5.2.2
psycopg2==2.7.1
py==1.4.33
py-buzz==0.1.12
pycodestyle==2.3.1
pyflakes==1.5.0
pyftpdlib==1.5.2
pytest==3.0.7
pytest-catchlog==1.2.2
pytest-flask==0.10.0
python-dateutil==2.6.0
python-editor==1.0.3
python-etcd==0.4.5
pytz==2017.2
reportlab==3.4.0
requests==2.13.0
rst2pdf==0.93.dev
s3transfer==0.1.10
setproctitle==1.1.10
six==1.10.0
snakeviz==0.4.1
snowballstemmer==1.2.1
sphinx-view==0.1.4
sphinxcontrib-httpdomain==1.5.0
sqlalchemy-postgres-copy==0.5.0
sqlparse==0.2.3
tornado==4.5.1
uWSGI==2.0.15
urllib3==1.21
wcwidth==0.1.7
xmltodict==0.11.0
","No Auto-complete for tables created during current session
Hey @jprodman,

We did a quick check and this issue looks very darn similar to

* [#710 - Edit last-run query in external editor.](710)
* [#690 - Missing dependency when upgrading through Homebrew](690)
* [#677 - Include arguments in function suggestions](677)

This could be a coincidence, but if any of these issues solves your problem then I did a good job :smile:

If not, the maintainers will get to this issue shortly.

Cheers,
Your Friendly Neighborhood ProBot

@jprodman We trigger an auto-completion refresh anytime the user runs a command that could change database structure. For example, we run it after `CREATE`, `DROP` etc. 

I just tried it out on my local instance I created a new table (called 'foo') and in the next statement `SELECT * FROM f` does list `foo`. So I have a couple of questions: 

1. Did you create the table using pgcli in the same session or was the table created outside of pgcli?
2. While the completion refresh is going on in the background, we usually display a message in the toolbar that says ""Refreshing completions"", do you see that message right after you run the `CREATE` command?


If the object creation hasn't been committed, the object won't be seen by the connection that's used for refreshing completions. I don't think we can do much about that while using a separate connection for the completer. What we could do something about is that the new object won't be seen after `COMMIT` either, by doing another refresh.

You can however avoid the problem by starting pgcli with the `--single-connection` flag, which will use the same connection for metadata as for user queries/commands. 

EDIT: We should also do a refresh after `ROLLBACK`. In single-connection mode, we get phantom completions after rolling back object creation. 
Closed via https://github.com/dbcli/pgcli/pull/724.",2017-05-05 00:50:59,2019-05-05 15:41:08
490,710,"## Description
<!--- Describe your changes in detail. -->

This addresses #434. It relies on https://github.com/dbcli/pgspecial/pull/33.

If a query has been run in the current session, opening the external editor `\e` will bring the last-run query into the editor. Otherwise, the editor will be blank.

The behavior remains the same for editing a current query (e.g. `select \e`).


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Edit last-run query in external editor.
Related mycli pull request: https://github.com/dbcli/mycli/pull/425
Tests are failing until the pgspecial change is released: https://github.com/dbcli/pgspecial/pull/33
pgspecial was released, but the tests appear to be failing until #713 is merged.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=h1) Report
> Merging [#710](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/bb9d8ac38ef76599b39942835bcd82694f7b4f53?src=pr&el=desc) will **decrease** coverage by `0.01%`.
> The diff coverage is `75%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/710/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #710      +/-   ##
==========================================
- Coverage   79.95%   79.93%   -0.02%     
==========================================
  Files          23       23              
  Lines        2544     2547       +3     
==========================================
+ Hits         2034     2036       +2     
- Misses        510      511       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.07% <75%> (-0.08%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=footer). Last update [bb9d8ac...cdec31d](https://codecov.io/gh/dbcli/pgcli/pull/710?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

This works fine, and the tests now pass also. Merging.",2017-05-03 04:34:25,2017-05-06 22:25:18
491,709,"## Description
Behave remove boiler plate code


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Behave remove boiler plate code
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=h1) Report
> Merging [#709](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/81fb73f4b0343162f2ccc4d2d97893d4a0d2ee29?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/709/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #709      +/-   ##
==========================================
+ Coverage   79.95%   79.99%   +0.03%     
==========================================
  Files          23       23              
  Lines        2544     2544              
==========================================
+ Hits         2034     2035       +1     
+ Misses        510      509       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.85% <0%> (+0.35%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=footer). Last update [81fb73f...f39dda5](https://codecov.io/gh/dbcli/pgcli/pull/709?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Very nice.",2017-05-02 18:09:38,2017-05-02 22:06:35
492,708,"## Description
<!--- Describe your changes in detail. -->

Fix for #697.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","User option should take precedence over environment variable.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@2e4b907`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/708/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #708   +/-   ##
=========================================
  Coverage          ?   79.95%           
=========================================
  Files             ?       23           
  Lines             ?     2544           
  Branches          ?        0           
=========================================
  Hits              ?     2034           
  Misses            ?      510           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.15% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=footer). Last update [2e4b907...b0d77c1](https://codecov.io/gh/dbcli/pgcli/pull/708?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice and simple. :1st_place_medal: ",2017-04-30 23:44:32,2017-05-01 16:51:44
493,707,"## Description
the psql client includes a useful slash command to output results to a file or pipe. 

This is especially useful for older postgres (e.g. Redshift) that do not support the /copy command.

From psql man page:
` \o [FILE]              send all query results to file or |pipe`

","[feature request] implement `\o` option from psql
Hey @bobcolner,

We did a quick check and this issue looks very darn similar to

* [#704 - document named query parameters](704)
* [#701 - Fix handling of failure to obtain lock](701)
* [#700 - Client disconnects upon failing to acquire a lock](700)

This could be a coincidence, but if any of these issues solves your problem then I did a good job :smile:

If not, the maintainers will get to this issue shortly.

Cheers,
Your Friendly Neighborhood ProBot

I see this is already implemented. 
",2017-04-30 18:17:13,2017-05-01 01:46:11
494,706,"## Description
Test using behave the tee command


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Test using behave the tee command
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=h1) Report
> Merging [#706](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/fb25e4b923c14fc71bc496b45caf78ec2c5124a7?src=pr&el=desc) will **increase** coverage by `0.9%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/706/graphs/tree.svg?token=XdciEnQkL2&src=pr&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##           master     #706     +/-   ##
=========================================
+ Coverage   79.01%   79.92%   +0.9%     
=========================================
  Files          23       23             
  Lines        2535     2535             
=========================================
+ Hits         2003     2026     +23     
+ Misses        532      509     -23
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/tabulate.py](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvdGFidWxhdGUucHk=) | `59.2% <0%> (+0.84%)` | :arrow_up: |
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `80.34% <0%> (+3.81%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=footer). Last update [fb25e4b...5a60402](https://codecov.io/gh/dbcli/pgcli/pull/706?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-04-29 19:36:24,2017-04-29 21:51:49
495,705,"## Description
When using the `/copy` command as documented I get a syntax error.

```
> \copy myschema.mytable to './out.csv'
syntax error at or near ""STDOUT""
LINE 1: copy myschema.mytable to  STDOUT
                                 ^
Time: 0.097s
```

```
> \copy (select 1) to stdout
syntax error at or near ""(""
LINE 1: copy (select 1) to  STDOUT
             ^

Time: 0.096s

```

## Your environment
macOS, python3.6, redshift pgcli Version: 1.5.1



","unexpected /copy syntax error
I'll see if I can reproduce this.
I never used redshift before, but from what I see, it is based on postgresql 8.0.2. That version of postgresql allows copying table -> file (or table -> stdout), but not query -> file (or query -> stdout). Documentation for 8.0:

https://www.postgresql.org/docs/8.0/static/sql-copy.html

Vs current:

https://www.postgresql.org/docs/current/static/sql-copy.html

I tried connecting to an 8.0.2 database (in docker) using `psql`. Here is what I get:

```
docker=> \copy abc to stdout;
1	a
2	b
3	c
docker=> \copy abc to 'aaa.txt';
COPY
docker=> copy (select 1) to stdout;
ERROR:  syntax error at or near ""(""
LINE 1: copy (select 1) to stdout;
             ^
docker=>
```

If I use `pgcli`, I get exactly the same result:

```
docker@127.0.0.1:docker> \copy abc to 'aaa.txt'

Time: 0.002s
docker@127.0.0.1:docker> \copy abc to stdout
1	a
2	b
3	c

Time: 0.001s
docker@127.0.0.1:docker> \copy (select 1) to stdout
syntax error at or near ""(""
LINE 1: copy (select 1) to  STDOUT
             ^

Time: 0.003s
docker@127.0.0.1:docker>
```

`abc` is the name of my test table.
This is redshift limitation and not an pgcli bug. I also confirmed that the `\copy` does not with with redshift when using the `psql` client either.",2017-04-29 16:42:39,2017-04-30 17:34:34
496,704,"## Description
I'm trying to use named query bind parameters. I can't find any documentation on the correct syntax to use in my query to define a parameter.

","document named query parameters
I have tried parameterizing my query with the common syntax `{{variable}}`. 

This does not seem to be the correct syntax. Does anyone know the correct syntax?
Did you mean:

    mysz@(none):mysz> \ns test select %s, %s
    Saved.
    Time: 0.001s
    mysz@(none):mysz> \n test 1 2
    > select %s, %s
    +------------+------------+
    | ?column?   | ?column?   |
    |------------+------------|
    | 1          | 2          |
    +------------+------------+
    SELECT 1
    Time: 0.001s
Yes, this is what I was looking for. Thank you.

I will try to find a place to document this nice feature.
I've been struggling with this. I've been unable to find clear reference on creating them or using parameters. I have a situation where I'd like to repeat one parameter in the query but '%s' doesn't support that so I have to write the argument twice. Not the end of the world but it would be nice to work around it.

But then I wanted the parameter substituted inside a json blob and then single quotes  added around the parameter cause problems. 

This is what I was trying to do:
```
addPermission = '''update users set privs = jsonb_set(privs::jsonb, array['%s'], (privs->'%s')::jsonb || '[""%s""]'::jsonb) where email = '%s';'''
```
It would be nice to call it with:
```
\n addPermission section myPermission email@example.com
```
Perhaps someone will be able to help me.

I don't want to complain though. I love love love this project. Such a nice user experience especially for someone like me that is unfamiliar with SQL.",2017-04-29 16:37:24,2017-04-30 18:22:42
497,703,"## Description
In an earlier commit I've changed the current working directory and
the removal of a temporary file didn't take that into account.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","behave fix clean up
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/703?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@b2a2258`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/703/graphs/tree.svg?width=650&token=XdciEnQkL2&height=150&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/703?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #703   +/-   ##
=========================================
  Coverage          ?   79.92%           
=========================================
  Files             ?       23           
  Lines             ?     2541           
  Branches          ?        0           
=========================================
  Hits              ?     2031           
  Misses            ?      510           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/703?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/703?src=pr&el=footer). Last update [b2a2258...e604096](https://codecov.io/gh/dbcli/pgcli/pull/703?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Good one. I noticed the file not being deleted and was going to look into that. You beat me to it. :)",2017-04-29 06:21:14,2017-04-29 22:27:45
498,702,"## Description
Just noticed that it was ""type"" instead of ""typ"" in the list comprehension.
I'm not sure what cases this issue was covering, so sorry, I have no idea what to write in changelog.
It's also too minor to add myself to the `AUTHORS` :)

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Fix typo in parseutils.meta.FunctionMetadata
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=h1) Report
> Merging [#702](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/2c89329b93fe02f94b9bb8a6c39c1d8243a6a9a0?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/702/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #702      +/-   ##
==========================================
- Coverage   79.05%   79.01%   -0.04%     
==========================================
  Files          23       23              
  Lines        2535     2535              
==========================================
- Hits         2004     2003       -1     
- Misses        531      532       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `85.71% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.49% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=footer). Last update [2c89329...8d8c3b1](https://codecov.io/gh/dbcli/pgcli/pull/702?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Nice catch! Thank you for the PR.",2017-04-29 02:50:06,2017-04-29 22:33:16
499,701,"## Description
<!--- Describe your changes in detail. -->
Fixes #700.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix handling of failure to obtain lock
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@e78aa8e`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/701/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #701   +/-   ##
=========================================
  Coverage          ?   79.95%           
=========================================
  Files             ?       23           
  Lines             ?     2544           
  Branches          ?        0           
=========================================
  Hits              ?     2034           
  Misses            ?      510           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `86.16% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=footer). Last update [e78aa8e...110f13f](https://codecov.io/gh/dbcli/pgcli/pull/701?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Hi @j-bennet - let me know if this is any better?

A link to https://github.com/psycopg/psycopg2/blob/master/psycopg/pqpath.c#L80 would probably do a better job than my docstring of explaining exactly what psycopg2 classifies as an `OperationalError`, but it'd also go stale...
Better! I would also add a comment that we don't want to raise an OperationalError in case of `LOCK_NOT_AVAILABLE `, since we handle those errors by reconnecting, and there's no point to reconnect in this case.
👍 ",2017-04-28 23:19:41,2017-04-30 23:12:27
500,700,"## Description
<!--- Describe your problem as fully as you can. -->
When I fail to acquire a lock (via `SELECT [...] FOR UPDATE NOWAIT;`), pgcli prompts me to reconnect:

    db> select * from user u where id = 1 for update nowait;
    Connection reset. Reconnect (Y/n)

More-verbose repro instructions: run two instances of `pgcli` (in, say, two Terminal.app windows). Run the following in each of them:

    db> begin;
    db> select * from user u where id = 1 for update nowait;

The second `pgcli` instance (the one that failed to grab the lock) will prompt you to reconnect.

## Your environment
<!-- This gives us some more context to work with. -->
- [x] Please provide your OS and version information.
macOS 10.12.4
- [x] Please provide your CLI version.
1.5.1
- [x] What is the output of ``pip freeze`` command.

```    backports.ssl-match-hostname==3.5.0.1
    botocore==1.5.44
    click==6.7
    colorama==0.3.7
    configobj==5.0.6
    docutils==0.13.1
    feedparser==5.2.1
    futures==3.1.1
    greenlet==0.4.9
    humanize==0.5.1
    jedi==0.10.0
    jmespath==0.9.2
    mock==1.0.1
    msgpack-python==0.4.7
    neovim==0.1.7
    pathlib==1.0.1
    pgcli==1.5.1
    pgspecial==1.7.0
    pika==0.10.0
    Pillow==3.1.1
    prompt-toolkit==1.0.9
    psycopg2==2.7.1
    py==1.4.26
    pyasn1==0.2.3
    Pygments==2.2.0
    pypandoc==1.3.3
    pytest==2.7.0
    python-dateutil==2.6.0
    pytz==2016.7
    PyYAML==3.12
    Pyzotero==1.1.19
    rauth==0.7.2
    requests==2.12.1
    rsa==3.4.2
    s3transfer==0.1.10
    setproctitle==1.1.10
    six==1.10.0
    sqlparse==0.2.3
    trollius==2.1
    virtualenv==14.0.5
    wcwidth==0.1.7
    websocket-client==0.40.0
    -e git+git@github.com:jbaiter/zotero-cli.git@5ad46e8388a109ab6afc8d31d28297e742e48528#egg=zotero_cli```

psycopg treats this particular error (`55P03`, `lock_not_available`) as an `OperationalError`, and pgcli prompts to reconnect when it hits one of those. I have a fix; I'll make a PR soon.",Client disconnects upon failing to acquire a lock,2017-04-28 23:14:27,2017-04-30 23:12:27
501,699,"## Description
behave test source command


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","behave test source command
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=h1) Report
> Merging [#699](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7eef21e3d371bd2a87bcd8a170e162991fa9cef1?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/699/graphs/tree.svg?token=XdciEnQkL2&src=pr&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #699      +/-   ##
==========================================
- Coverage   79.05%   79.01%   -0.04%     
==========================================
  Files          23       23              
  Lines        2535     2535              
==========================================
- Hits         2004     2003       -1     
- Misses        531      532       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.49% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=footer). Last update [7eef21e...8fa3d18](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=h1) Report
> Merging [#699](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7eef21e3d371bd2a87bcd8a170e162991fa9cef1?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/699/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #699      +/-   ##
==========================================
- Coverage   79.05%   79.01%   -0.04%     
==========================================
  Files          23       23              
  Lines        2535     2535              
==========================================
- Hits         2004     2003       -1     
- Misses        531      532       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.49% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=footer). Last update [7eef21e...8fa3d18](https://codecov.io/gh/dbcli/pgcli/pull/699?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

One of the tests actually breaks for me, I think we need to update expected help output [here](https://github.com/dbcli/pgcli/blob/6f1f4bfa8e96cfadded02ac8c7554f1c61c5446f/tests/features/fixture_data/help_commands.txt#L5):

```
Scenario: run source command  # features/basic_commands.feature:15
    When we run dbcli           # features/steps/basic_commands.py:16 0.003s
    And we wait for prompt      # features/steps/basic_commands.py:28 0.361s
    And we send source command  # features/steps/basic_commands.py:53 0.240s
    Then we see help output     # features/steps/crud_database.py:72 1.001s
      Traceback (most recent call last):
        File ""/Users/irina/.pyenv/versions/2.7.12/envs/pgcli/lib/python2.7/site-packages/behave/model.py"", line 1456, in run
          match.run(runner.context)
        File ""/Users/irina/.pyenv/versions/2.7.12/envs/pgcli/lib/python2.7/site-packages/behave/model.py"", line 1903, in run
          self.func(context, *args, **kwargs)
        File ""features/steps/crud_database.py"", line 75, in step_see_help
          wrappers.expect_exact(context, expected_line, timeout=1)
        File ""/Users/irina/src/pgcli/tests/features/steps/wrappers.py"", line 15, in expect_exact
          actual))
      Exception: Expected:
      ---
      u'\d [pattern]'
      ---

      Actual:
      ---
      u""             | Change to a new database.                     |
      | \copy [tablename] to/from [filename] | Copy data between a file and a table.         |
      | \d[+] [pattern]                      | List or describe tables, views and sequences. |
      | \dT[S+] [pattern]                    | List data types                               |
```

How did it not break in travis?
Could you please have a look at ```/tmp/dmtest``` what's exactly outputted in the help output? I don't get this error either on my system.
So I think my tests broke because of this:

https://github.com/dbcli/pgspecial/pull/31

Before testing this PR, I installed pgspecial into pgcli venv to test the pgspecial PR. It's not a problem.
All good now. Merging.",2017-04-28 19:16:42,2017-04-29 06:28:51
502,698,"## Description
behave quit pgcli nicely so that coverage can be collected, before this patch pgcli was killed by pexpect at the end of a feature test


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","behave quit pgcli nicely
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=h1) Report
> Merging [#698](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7858cbc4736a9caaa3cfb0274695a29cf04eb319?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/698/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #698      +/-   ##
==========================================
- Coverage   79.05%   79.01%   -0.04%     
==========================================
  Files          23       23              
  Lines        2535     2535              
==========================================
- Hits         2004     2003       -1     
- Misses        531      532       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.49% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=footer). Last update [7858cbc...6f1f4bf](https://codecov.io/gh/dbcli/pgcli/pull/698?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-04-28 15:22:50,2017-04-28 16:27:15
503,697,"## Description

`PGUSER=postgres pgcli -U user -h localhost -p 54325 db` will use `postgres` for the user, while `PGUSER=postgres pgcli -U user -h localhost -p 54325 db arg_user` will use `arg_user`.

I think that both `-U` and the positional argument should override `PGUSER` from the environment.

## Your environment

- Arch Linux, Python 3.6.1
- pgcli from master (1.5.1+)

### pip freeze
```
appdirs==1.4.3
click==6.7
configobj==5.0.6
humanize==0.5.1
packaging==16.8
-e git+https://github.com/dbcli/pgcli@7858cbc4736a9caaa3cfb0274695a29cf04eb319#egg=pgcli
pgspecial==1.7.0
prompt-toolkit==1.0.14
psycopg2==2.7.1
Pygments==2.2.0
pyparsing==2.2.0
setproctitle==1.1.10
six==1.10.0
sqlparse==0.2.3
wcwidth==0.1.7
```
",PGUSER should not override -U/--username,2017-04-28 15:09:42,2017-05-01 16:51:46
504,696,"## Description
<!--- Describe your changes in detail. -->
I made a mistake in the original README syntax.


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [n/a] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Fix readme monospace syntax
Thank you!
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=h1) Report
> Merging [#696](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/7858cbc4736a9caaa3cfb0274695a29cf04eb319?src=pr&el=desc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/696/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #696      +/-   ##
==========================================
- Coverage   79.05%   79.01%   -0.04%     
==========================================
  Files          23       23              
  Lines        2535     2535              
==========================================
- Hits         2004     2003       -1     
- Misses        531      532       +1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.49% <0%> (-0.36%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=footer). Last update [7858cbc...94d8091](https://codecov.io/gh/dbcli/pgcli/pull/696?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-04-28 09:50:33,2017-04-28 23:26:21
505,695,"Hi,

While working on #693 , i hit a bug in `test_statements_with_cursor_after_function_body`. Here is just the diff making CI fails. Can you help me debugging this ?

Regards,
Étienne","Bug in test_statements_with_cursor_after_function_body
@bersace Looks like a valid test failure to me, because `len(set(suggestions))` should be `== 2` [here](https://github.com/dbcli/pgcli/blob/293b6b3a412255cc2c12f0fe94d41760d4f47d8e/tests/test_sqlcompletion.py#L716) and not `== 1`. Is this still a problem?
@j-bennet yep, but I find the `set` comparison bellow misleading.",2017-04-27 15:44:22,2017-05-02 22:07:29
506,694,"Changelog is currently broken in master. This lead to raw changelog rendering in GitHub and error if included in Sphinx.

I suggest to check diff to Changelog in travis.","Check changelog.rst markup
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/694?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@a56ff81`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/694/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/694?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #694   +/-   ##
=========================================
  Coverage          ?   79.01%           
=========================================
  Files             ?       23           
  Lines             ?     2535           
  Branches          ?        0           
=========================================
  Hits              ?     2003           
  Misses            ?      532           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/694?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/694?src=pr&el=footer). Last update [a56ff81...ef09622](https://codecov.io/gh/dbcli/pgcli/pull/694?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

This is awesome! Thank you! 

🍰 ",2017-04-27 14:15:34,2017-04-27 18:05:30
507,693,"I extracted the *well known following keywords* mechanism from #689 in a dedicated PR.

The basic idea is to store keywords as a dict of *keyword* -> list of *well known following keywords*.  This allow to provide a smarter set of candidates e.g. after `CREATE `.","Complete well known following keywords
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@7858cbc`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/693/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #693   +/-   ##
=========================================
  Coverage          ?   79.06%           
=========================================
  Files             ?       23           
  Lines             ?     2541           
  Branches          ?        0           
=========================================
  Hits              ?     2009           
  Misses            ?      532           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.11% <100%> (ø)` | |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.5% <100%> (ø)` | |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `100% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=footer). Last update [7858cbc...4912ff8](https://codecov.io/gh/dbcli/pgcli/pull/693?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Green :green_heart: :)",2017-04-27 13:53:59,2017-04-29 19:47:34
508,692,`DEVELOP.rst` is wrong since pgspecial has been extracted in a dedicated project. I suggest to simply point to pgspecial project.,"Update DEVELOP.rst with external pgspecial project
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/692?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@a56ff81`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/692/graphs/tree.svg?src=pr&token=XdciEnQkL2&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/692?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #692   +/-   ##
=========================================
  Coverage          ?   79.01%           
=========================================
  Files             ?       23           
  Lines             ?     2535           
  Branches          ?        0           
=========================================
  Hits              ?     2003           
  Misses            ?      532           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/692?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/692?src=pr&el=footer). Last update [a56ff81...2224cbd](https://codecov.io/gh/dbcli/pgcli/pull/692?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-04-27 13:45:10,2017-04-27 18:04:28
509,691,"## Description
<!--- Describe your changes in detail. -->

Travis keeps running scrip steps, even after one of the steps fails (see https://github.com/travis-ci/travis-ci/issues/1066). No need to do that.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] ~~I've added this contribution to the `changelog.md`.~~ (not needed)
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Fail on first error in travis script.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/691?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@bad238f`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/691/graphs/tree.svg?src=pr&token=XdciEnQkL2&height=150&width=650)](https://codecov.io/gh/dbcli/pgcli/pull/691?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #691   +/-   ##
=========================================
  Coverage          ?   79.05%           
=========================================
  Files             ?       23           
  Lines             ?     2535           
  Branches          ?        0           
=========================================
  Hits              ?     2004           
  Misses            ?      531           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/691?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/691?src=pr&el=footer). Last update [bad238f...12de175](https://codecov.io/gh/dbcli/pgcli/pull/691?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-04-26 23:57:33,2017-04-27 05:31:31
510,690,"## Description
I'm trying to run `brew upgrade pgcli`, but I'm getting a following error: `Error: No available formula with the name ""postgresql93"" (dependency of pgcli)`

## Your environment
OS X El Capitan 10.11.6
pgcli version 1.0.0
postgresql: stable 9.6.2 (bottled), HEAD (installed via Homebrew)
pip freeze:
```
appdirs==1.4.3
asn1crypto==0.22.0
backports.functools-lru-cache==1.2.1
boto==2.38.0
cffi==1.10.0
cryptography==1.8.1
datadog==0.13.0
decorator==4.0.10
enum34==1.1.6
Fabric==1.13.1
flake8==2.5.1
futures==3.0.5
gitpath==0.2
idna==2.5
ipaddress==1.0.18
mccabe==0.3.1
mercurial==3.7.3
msgpack-python==0.4.7
packaging==16.8
paramiko==2.1.2
pbr==1.10.0
pep8==1.7.0
powerline-status==2.3
psycopg2==2.7.1
pyasn1==0.2.3
pycparser==2.17
pycrypto==2.6.1
pyflakes==1.0.0
pyparsing==2.2.0
python-dateutil==2.5.3
readline==6.2.4.1
requests==2.11.1
shopspring==0.1
simplejson==3.8.2
six==1.10.0
stevedore==1.18.0
trollius==2.1
vboxapi==1.0
virtualenv==15.1.0
virtualenv-clone==0.2.6
virtualenvwrapper==4.7.2
```","Missing dependency when upgrading through Homebrew
@bl-nero Did you try `brew update`?

Also, please be aware of this: https://github.com/dbcli/pgcli/issues/718.

It is not fixed yet. Until we fix it, I would advise to `pip install pgcli`, instead of using the brew formula.

Sorry about the inconvenience.
We have now switched to hosting our own brew formula (courtesy of @tsroten, hosted at https://github.com/dbcli/homebrew-tap). The new formula will not try to install or update postgresql if you already have it. This is how you would install pgcli using our repo, instead of the default homebrew repo:

`brew tap-pin dbcli/tap && brew install pgcli`

Hope this helps.",2017-04-26 12:21:14,2019-05-05 15:41:26
511,689,"Hi,

This PR add completion for keywords defined in https://www.postgresql.org/docs/9.4/static/sql-altersystem.html . As a side effect, `ALTER` is now easier to use for `ALTER DATABASE`, `ALTER USER`, etc. other than `ALTER TABLE`.

Is it possible to reduce keywords suggested depending on previous keywords ?

I want to complete settings too. Do you want to make this in another PR ?","WIP - Complete ALTER SYSTEM
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/689?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@1e1d980`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/689/graphs/tree.svg?src=pr&width=650&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/689?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #689   +/-   ##
=========================================
  Coverage          ?   79.02%           
=========================================
  Files             ?       23           
  Lines             ?     2536           
  Branches          ?        0           
=========================================
  Hits              ?     2004           
  Misses            ?      532           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/689?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/689?src=pr&el=footer). Last update [1e1d980...d8455c7](https://codecov.io/gh/dbcli/pgcli/pull/689?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@bersace I don't think we have keyword filtering based on previous keywords yet. If you wanted to add that functionality, you'd be looking at these two files, where the completion logic resides:

https://github.com/dbcli/pgcli/blob/master/pgcli/pgcompleter.py
https://github.com/dbcli/pgcli/blob/master/pgcli/packages/sqlcompletion.py

[These lines](https://github.com/dbcli/pgcli/blob/5da1a4154cdba3e5b4462627a049b8d361c27e66/pgcli/packages/sqlcompletion.py#L497-L498) currently tell the completer that when it sees an `ALTER` token, it should return keyword matches. You'd probably want to make changes to `Keyword` named tuple and to [`get_keyword_matches` here](https://github.com/dbcli/pgcli/blob/0df6e37dcafa0fde7d9bcadfb6c85f7a504eb43d/pgcli/pgcompleter.py#L652-L666).

@bersace Oh, and to address your other question, what do you mean by completing settings?
@j-bennet i would like to complete settings from `pg_catalog.pg_settings` when typing `SHOW ` or `ALTER SYSTEM SET `.
More sophisticated suggestions based more than just the last token are a good idea. I wonder if it might be sufficient to check the _first_ token around [here](https://github.com/dbcli/pgcli/blob/a238f0a891031261dd735e82d7713937155f1384/pgcli/packages/sqlcompletion.py#L154) somewhere and delegate to a more specific function. I'm imagining something like

```
first_tok = get_first_token_somehow()
if first_tok == 'ALTER':
    return suggest_based_on_last_token_in_alter_context(stmt.last_token, stmt)
elif first_tok == 'CREATE':
    return suggest_based_on_last_token_in_create_context(stmt.last_token, stmt)
else:
    return suggest_based_on_last_token(stmt.last_token, stmt)
```

This might maintain the simplicity of only looking at the previous token but increase suggestion power

fyi you can get the first token with

```first_tok = stmt.parsed.token_next(-1, skip_ws=True, skip_cm=True)[1].value.upper()```

(There's probably a couple of degenerate cases like empty statements you'll have to look for first)
@j-bennet i will do another PR to complete pg_settings.

@darikg I did update pgliterals to describe *following* keywords. What do you think of this ? This is quite naïve but improve the situation.
I think there's a small mistake here that is causing a lot of unnecessary changes to the tests.

The problem is around [here](https://github.com/dbcli/pgcli/pull/689/files#diff-36fcb873925169e72e8c5ca4e8a8a581R653)
```
keywords = self.keywords_tree.keys()
if last_token:
    sub_keywords = self.keywords_tree.get(last, [])
    if sub_keywords:
        keywords = sub_keywords
```
If `last_token` is empty, or `sub_keywords` is empty, `keywords` remains equal to `keywords_tree.keys()`.

However, a lot of the tests compare to [`MetaData.keywords()`](https://github.com/dbcli/pgcli/blob/a56ff81b19fb112f5559a6fa56f7d9293450ed8a/tests/metadata.py#L68) which returns `[keyword(kw, pos) for kw in self.completer.keywords]` rather than `[keyword(kw, pos) for kw in self.completer.keyword_tree.keys()]`

You might want to change one or the other depending on you think the suggestions should behave

@darikg yes, I prefer to narrow default keywords suggestions to *root* keywords. e.g. we don't want to suggest `TABLE` other than in `ALTER`, `CREATE`, etc.

And yes, all tests are based on allways-all-keywords.
Is this PR still valid, considering that we've just merged this PR https://github.com/dbcli/pgcli/pull/693? 
no we can close it",2017-04-25 14:59:58,2017-04-30 12:47:33
512,688,"This requires https://github.com/dbcli/pgspecial/pull/29, but shouldn't hurt even before it gets integrated.","Configure suggestions for \sf
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@1e1d980`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/688/graphs/tree.svg?height=150&width=650&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #688   +/-   ##
=========================================
  Coverage          ?   79.03%           
=========================================
  Files             ?       23           
  Lines             ?     2537           
  Branches          ?        0           
=========================================
  Hits              ?     2005           
  Misses            ?      532           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.5% <100%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=footer). Last update [1e1d980...5da1a41](https://codecov.io/gh/dbcli/pgcli/pull/688?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-04-25 09:41:34,2017-04-25 21:08:50
513,687,"## Description
behave pager wrapper


## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","behave pager wrapper
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/687?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@1e1d980`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/687/graphs/tree.svg?src=pr&width=650&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/687?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #687   +/-   ##
=========================================
  Coverage          ?   79.02%           
=========================================
  Files             ?       23           
  Lines             ?     2536           
  Branches          ?        0           
=========================================
  Hits              ?     2004           
  Misses            ?      532           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/687?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/687?src=pr&el=footer). Last update [1e1d980...bc47a07](https://codecov.io/gh/dbcli/pgcli/pull/687?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

👍 ",2017-04-24 19:00:46,2017-04-25 15:10:51
514,686,"## Description
Having typed an alias name in an `ORDER BY` or (`SELECT`) `DISTINCT` clause,
the alias was not taken account of, and the completion simply listed all
columns. This change fixes that, and makes the autocompletion behave the
same as in `SELECT` and `WHERE` clauses.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Suggest columns for `ORDER BY` and `DISTINCT` (fixes #685)
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@a238f0a`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/686/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #686   +/-   ##
=========================================
  Coverage          ?   79.05%           
=========================================
  Files             ?       23           
  Lines             ?     2535           
  Branches          ?        0           
=========================================
  Hits              ?     2004           
  Misses            ?      531           
  Partials          ?        0
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.84% <ø> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=footer). Last update [a238f0a...3d560ba](https://codecov.io/gh/dbcli/pgcli/pull/686?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

Thanks for taking the time to make pgcli better. Sorry I haven't had time to look into this. I won't have time till end of this week, but if none of the other core devs have reviewed it by then, I'll take a look. Sorry about the delay. 
No worries about taking your time @amjith! Thanks for the review @j-bennet - I've addressed the comment and squashed it into one commit since it was a small tweak (I hope that's ok for this project!) 
@owst Also, the line in changelog:

> Completion suggestions for ORDER BY and DISTINCT clauses now take account of partially-typed identifiers as per WHERE.

is not very clear. I would suggest something like:

> Fixed completions after ORDER BY and DISTINCT when using table aliases.
Yeah, fair enough, I'm certainly not wedded to the current wording. The only thing is ""fixed"" to me suggests it was ""broken"" before, when I think it was just a missing feature. Perhaps 
> Completions after ORDER BY and DISTINCT now take account of table aliases.

?
@owst Yes, that is better!
Looks good. Merging.

Thank you!

🌷 ",2017-04-23 11:23:44,2017-04-26 18:01:33
515,685,"## Description
When I write a simple `SELECT` query `JOIN`ing an aliased table, the autocompletion of the `ORDER BY` clause incorrectly includes the alias name twice.

In particular, given tables:
```
> \d foo
+----------+---------+-------------+
| Column   | Type    | Modifiers   |
|----------+---------+-------------|
| id       | integer |             |
+----------+---------+-------------+
Indexes:
    ""iduniq"" UNIQUE CONSTRAINT, btree (id)
Referenced by:
    TABLE ""stuff"" CONSTRAINT ""foofk"" FOREIGN KEY (foo_id) REFERENCES foo(id) MATCH FULL
```
and
```
> \d stuff
+-----------+--------------------------+-------------+
| Column    | Type                     | Modifiers   |
|-----------+--------------------------+-------------|
| foo_id    | integer                  |             |
| some_time | timestamp with time zone |             |
+-----------+--------------------------+-------------+
Foreign-key constraints:
    ""foofk"" FOREIGN KEY (foo_id) REFERENCES foo(id) MATCH FULL
```

if I write:
```
SELECT * FROM foo JOIN stuff s ON s.foo_id = foo.id ORDER BY s.
```
and hit tab and then select `s.some_time` the query is completed as
```
SELECT * FROM foo JOIN stuff s ON s.foo_id = foo.id ORDER BY s.s.time
```
rather than 
```
SELECT * FROM foo JOIN stuff s ON s.foo_id = foo.id ORDER BY s.time
```
it looks like the auto complete ""hasn't recognised"" the `s.` context as the options it offers me are:
```
foo.id
s.foo_id
s.some_time
```
rather than what I would expect:
```
foo_id
some_time
```
(i.e. columns on `s` without the alias prefix)

Interestingly, the autocompletion works fine for the `WHERE` clause.
## Your environment
- [x] Please provide your OS and version information.
OSX 10.10.5
- [x] Please provide your CLI version.
HEAD (`66cd634`)
- [x] What is the output of ``pip freeze`` command.
```
>pip freeze
appdirs==1.4.3
click==6.7
configobj==5.0.6
humanize==0.5.1
packaging==16.8
-e git+git@github.com:dbcli/pgcli.git@66cd634de462c685cd11d08b56e39289dbdd109e#egg=pgcli
pgspecial==1.7.0
prompt-toolkit==1.0.14
psycopg2==2.7.1
Pygments==2.2.0
pyparsing==2.2.0
setproctitle==1.1.10
six==1.10.0
sqlparse==0.2.3
wcwidth==0.1.7
```
","Autocompletion includes alias name twice for `ORDER BY` clause in `SELECT`
Hey @owst,

We did a quick check and this issue looks very darn similar to

* [#677 - Include arguments in function suggestions](677)
* [#675 - KeyError in thread completion_refresh](675)
* [#674 - \list does not work and \l only has one column](674)

This could be a coincidence, but if any of these issues solves your problem then I did a good job :smile:

If not, the maintainers will get to this issue shortly.

Cheers,
Your Friendly Neighborhood ProBot
",2017-04-21 08:37:19,2017-04-26 18:01:34
516,684,"## Description
Update author and email.
","Change author name and email.
@amjith pep8radius seems to be unhappy with the change.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=h1) Report
> Merging [#684](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/da434103cc3d61180b876bc965b4bf71f670a83b?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/684/graphs/tree.svg?height=150&width=650&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #684      +/-   ##
==========================================
+ Coverage   78.93%   78.97%   +0.03%     
==========================================
  Files          23       23              
  Lines        2526     2526              
==========================================
+ Hits         1994     1995       +1     
+ Misses        532      531       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.85% <0%> (+0.35%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=footer). Last update [da43410...7445961](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=h1) Report
> Merging [#684](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/da434103cc3d61180b876bc965b4bf71f670a83b?src=pr&el=desc) will **increase** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/684/graphs/tree.svg?height=150&width=650&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #684      +/-   ##
==========================================
+ Coverage   78.93%   78.97%   +0.03%     
==========================================
  Files          23       23              
  Lines        2526     2526              
==========================================
+ Hits         1994     1995       +1     
+ Misses        532      531       -1
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `97.85% <0%> (+0.35%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=footer). Last update [da43410...0e2e793](https://codecov.io/gh/dbcli/pgcli/pull/684?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
",2017-04-19 04:11:45,2017-04-19 22:34:50
517,683,"Thank you, Amjith. I appreciate it 😄 .
### Checklist
- [x] I've added my name to the `AUTHORS` file (or it's already there).","Add AlexTes to AUTHORS
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/683?src=pr&el=h1) Report
> Merging [#683](https://codecov.io/gh/dbcli/pgcli/pull/683?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/a85b68962e0ae5cc2e10db4f0da09f1ac856a758?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/683/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/683?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #683   +/-   ##
=======================================
  Coverage   78.93%   78.93%           
=======================================
  Files          23       23           
  Lines        2526     2526           
=======================================
  Hits         1994     1994           
  Misses        532      532
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/683?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/683?src=pr&el=footer). Last update [a85b689...7906355](https://codecov.io/gh/dbcli/pgcli/pull/683?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
:tada: ",2017-04-13 07:45:19,2017-04-13 17:33:08
518,682,"## Description
Hi, Thank you for this project. How do I change the color of the green, gray and red text? Gnome terminal appearance is below.

![pgcli-screen](https://cloud.githubusercontent.com/assets/1070077/24992287/3ce5502e-2029-11e7-93e9-df770dd24570.png)


## My environment
<!-- This gives us some more context to work with. -->

- Linux Mint 18.1 Cinnamon x64
- GNOME Terminal 3.18.3
- PostgresSQL 9.6.1
","GNOME Terminal Colors
Syntax coloring is done by the Pygments library. The highlight colors depend on the style you specify in `pgclirc`:

https://github.com/dbcli/pgcli/blob/e5d3d5d63f404df4478de6201a36bf380cdb4b1f/pgcli/pgclirc#L86-L89
The config file is located in `~/.config/pgcli/config`. 

If you'd like to see a preview of various themes, check out: http://mycli.net/syntax

Thanks @j-bennet  and @amjith. This color themes are very good.",2017-04-13 06:22:40,2017-04-14 07:13:09
519,681,"## Description
It took me a little long to find the config options.
Reasons to make it more visible I think are:
* The location is not in the help text
* Not everyone is familiar with the convention of .rc files going in `XDG_CONFIG_HOME`.
* Often options are explained in the readme; I thought it nice to at least mention where one could find a description of them.

On the flipside, the readme becomes a little longer.
This contribution isn't noteworthy of course, so I took the liberty to skip the checklist 😁.
","Make it easier to find config option documentation
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/681?src=pr&el=h1) Report
> Merging [#681](https://codecov.io/gh/dbcli/pgcli/pull/681?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/dc7e73524f7c9c6c9456ec1aa5499da84f8b7386?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/681/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/681?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #681   +/-   ##
=======================================
  Coverage   78.93%   78.93%           
=======================================
  Files          23       23           
  Lines        2526     2526           
=======================================
  Hits         1994     1994           
  Misses        532      532
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/681?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/681?src=pr&el=footer). Last update [dc7e735...6c6c53b](https://codecov.io/gh/dbcli/pgcli/pull/681?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
Haha. Thanks for the PR, I appreciate it. It definitely adds clarity. I'm happy to merge this in, but I think your name deserves to be in the AUTHORS file. So if you make another PR with the addition to the AUTHORS file, I'll be happy to merge that one as well. :ice_cream: ",2017-04-12 09:45:30,2017-04-13 03:22:59
520,680,"## Description

Ported from mycli. Discussion: https://github.com/dbcli/mycli/issues/392.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Ported pep8radius addition from mycli.
@dbcli/pgcli-core This PR adds [pep8radius](https://pypi.python.org/pypi/pep8radius) to the build step. This will check the lines that were modified for pep8 compliance. The only exception from pep8 is the line length (you can have up to 99 chars in a line). 

So if the code you're modifying or adding doesn't comply with pep8 you might see PRs failing. ",2017-04-08 00:02:38,2017-04-09 01:41:38
521,679,"This standardizes on the same names as psql and removes some
conflicts.

## Description
I was using a database tool that was launching pgcli (thinking it was psql) with the `--username` option. This failed as pgcli expected the username option as `--user`. Since pgcli has extra and different functionality than psql it makes sense to have additional command line options but I think it's important for compatibility purposes to mimic psql's command line interface.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Standardize command line option names
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=h1) Report
> Merging [#679](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/56af64585f4f033c25cd574072185c85c26e52a2?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `100%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/679/graphs/tree.svg?height=150&width=650&token=XdciEnQkL2&src=pr)](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #679   +/-   ##
=======================================
  Coverage   78.93%   78.93%           
=======================================
  Files          23       23           
  Lines        2526     2526           
=======================================
  Hits         1994     1994           
  Misses        532      532
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/main.py](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=tree#diff-cGdjbGkvbWFpbi5weQ==) | `76.07% <100%> (ø)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=footer). Last update [56af645...f8597b7](https://codecov.io/gh/dbcli/pgcli/pull/679?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
I agree with `--username`, but I think `-V` in psql is very annoying. I would not want to copy that.
The `-v` option conflicts with psql's `-v assignment` but I suppose if you don't see it conflicting in the future then I can revert it.
Yes, how about we leave `-v` in pgcli until someone actually implements `-v VAR_NAME=var_value`.
Okay, I've updated the commit with that change.
Thank you!
🎈 ",2017-04-05 16:19:40,2017-04-07 17:38:45
522,678,"## Description
Makes the character used for continuing multi-line queries configurable. To me, having a space rather than '.' is cleaner, (particularly when pasting the query/output for others to read). 

Now, setting `multiline_continuation_char = ' '` changes:
```
postgres@localhost:testdb1> SELECT *
........................... FROM foo
........................... WHERE bar = 1;
```
to
```
postgres@localhost:testdb1> SELECT *
                            FROM foo
                            WHERE bar = 1;
```

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).","Allow configurable multiline continuation char
Very nice! 

Thank you for the contribution. 🍨 ",2017-03-30 10:14:24,2017-03-31 04:19:54
523,677,"## Description
E.g. instead of suggesting `my_func()`, suggest `my_func(your_arg:=)` or `my_func(your_arg text)`, depending on the context. There are config settings in the form of template strings (e.g. `{arg_name} := {arg_default}`) for customizing the formatting of the arguments and a setting for at what number of args to switch from oneliners to multiline arg lists.

## Checklist
- [x] I've added this contribution to the `changelog.md`.
- [x] I've added my name to the `AUTHORS` file (or it's already there).
","Include arguments in function suggestions
I'm sorry, I haven't been intentionally ignoring this! Just super swamped the past couple weeks. I'll try to have a look this weekend
Just starting to look at this now. Did you consider instead suggesting argument names as a distinct suggestion type? E.g. `select my_func(` and `select my_func(y` would suggest `your_arg:=`? That might sidestep having to tailor pgclirc to the perfect formatting strings
I did consider it briefly, but it seemed more complicated to code and like more typing/thinking to use, especially with overloaded functions. I actually started working on this for the `DROP FUNCTION` case (where suggesting args one at a time would not be very useful) but realized I could easily expand the functionality to function calls. 
Oh yeah, 'drop function' is a perfect case where it's better to suggest the arguments all at once. For calling functions i'm not so sure though. I don't have a good feel for when most people use named arguments or not, or if they do so consistently.
@koljonen What is the status of this PR? Are you still working on it? It would be great to have this functionality in the new release.
Sorry about the delay; been really busy and didn't notice the comments until now. I'm having a look now.
@darikg I'll do a squash and rebase once you've had a look.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=h1) Report
> Merging [#677](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/534c0de47e8b1f11304c76578c32bb4323711b60?src=pr&el=desc) will **decrease** coverage by `0.2%`.
> The diff coverage is `90.67%`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/677/graphs/tree.svg?width=650&src=pr&token=XdciEnQkL2&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #677      +/-   ##
==========================================
- Coverage   83.45%   83.24%   -0.21%     
==========================================
  Files          20       20              
  Lines        2182     2280      +98     
==========================================
+ Hits         1821     1898      +77     
- Misses        361      382      +21
```


| [Impacted Files](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [pgcli/pgexecute.py](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree#diff-cGdjbGkvcGdleGVjdXRlLnB5) | `84.73% <100%> (-1.55%)` | :arrow_down: |
| [pgcli/completion\_refresher.py](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree#diff-cGdjbGkvY29tcGxldGlvbl9yZWZyZXNoZXIucHk=) | `88.6% <100%> (ø)` | :arrow_up: |
| [pgcli/packages/sqlcompletion.py](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvc3FsY29tcGxldGlvbi5weQ==) | `98.63% <100%> (+0.05%)` | :arrow_up: |
| [pgcli/packages/parseutils/meta.py](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGFyc2V1dGlscy9tZXRhLnB5) | `82.19% <76.92%> (-4.3%)` | :arrow_down: |
| [pgcli/pgcompleter.py](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree#diff-cGdjbGkvcGdjb21wbGV0ZXIucHk=) | `97.17% <96.77%> (-0.22%)` | :arrow_down: |
| [pgcli/packages/pgliterals/main.py](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=tree#diff-cGdjbGkvcGFja2FnZXMvcGdsaXRlcmFscy9tYWluLnB5) | `79.88% <0%> (-0.83%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=footer). Last update [534c0de...a326e54](https://codecov.io/gh/dbcli/pgcli/pull/677?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

I've now squashed and rebased, fixed an obscure bug (the completer crashed if one tried to use a column named `function`), made the Travis CI linter happy and added tests.
Also, I might add I've been using this at work for a couple of months now, so it's gotten a fair bit of manual testing.
@darikg Are you satisfied with the changes pushed by the recent commits? Can we merge this PR? 
@koljonen I'll take over the review from @darikg. I think he might be busy. 

Can you give me an example query to trigger this feature? 
Assuming you have a function like `create function test_func(_arg1 int, _arg2 text default 'foo', _arg3 numeric default 42) returns int language sql as $$ select 23$$`, trigger completions for e.g. `select test_func` or `drop function test_func`.
Does this not work with built-in functions? Say `sum()` or `count()` etc.
`pg_proc.proargnames` appears to be NULL for builtins.
Works beautifully. 👍 

![1__0_1__tmux__-__pgcli___users_amjith_code_python_pgcli____tmux_](https://user-images.githubusercontent.com/49260/28429142-8c8c64c4-6d30-11e7-9a52-7524d325390b.png)


/cc @qdw",2017-03-29 02:26:16,2017-07-20 16:48:28
524,676,"## Description

This is required to actually fix https://github.com/dbcli/pgcli/pull/670.

`reset_current_buffer` was deprecated in 1.0.10 and `pre_run_callables` added instead.



## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [X] I've added this contribution to the `changelog.md`.
- [X] I've added my name to the `AUTHORS` file (or it's already there).
","Bumped minimal requirement of prompt-toolkit to 1.0.10
Now that PR template keeps bugging me about it, I also added fix to changelog. :)
> Now that PR template keeps bugging me about it, I also added fix to changelog. :)

Haha the PR template is working.",2017-03-22 04:31:59,2017-03-22 05:23:34
525,675,"## Description
I get this error occasionally here and there. I ^C and things work again.
```
Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/local/lib/python2.7/threading.py"", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 105, in refresh_tables
    completer.extend_columns(executor.table_columns(), kind='tables')
  File ""/usr/local/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 158, in extend_columns
    metadata[schema][relname][colname] = column
KeyError: u'_stmp_3fc53b90_a'
```

## Your environment
<!-- This gives us some more context to work with. -->

- [x] Please provide your OS and version information.
I see it on ubuntu test server and os x machine when connecting to different databases so I think this is irrelevant
-  pgcli -v
Version: 1.3.1
- `pip freeze`
https://gist.github.com/tejasmanohar/ba53787fa736c95e6e867833e08db804
","KeyError in thread completion_refresh
Hi @tejasmanohar , thanks for the problem report. Is there anything specific to your workflow when this exception happens
 (making a lot of schema changes for example)? Are you working with the local or remote server?
it's often the first query-- not making a lot of schema changes. remote server
I just encountered a very similar issue after adding foreign keys to a partitioned table. Without the foreign keys partitioned tables work like a charm in pgcli. Turns out it can be reproduced quite easily:

```
$ createdb dev
$ pgcli dev
Server: PostgreSQL 11.3
Version: 2.1.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
kenneth@/tmp:dev> create table cities (id serial primary key not null, ""name"" text);
CREATE TABLE
Time: 0.009s
kenneth@/tmp:dev> CREATE TABLE measurement (
     city_id         bigint references cities (id),
     logdate         date not null,
     peaktemp        int,
     unitsales       int
 ) PARTITION BY RANGE (logdate);
CREATE TABLE
Time: 0.006s
kenneth@/tmp:dev> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py"", line 917, in _bootstrap_inner
    self.run()
  File ""/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py"", line 865, in runompletions...
    self._target(*self._args, **self._kwargs)
  File ""/usr/local/Cellar/pgcli/2.1.1/libexec/lib/python3.7/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/local/Cellar/pgcli/2.1.1/libexec/lib/python3.7/site-packages/pgcli/completion_refresher.py"", line 110, in refresh_tables
    completer.extend_foreignkeys(executor.foreignkeys())
  File ""/usr/local/Cellar/pgcli/2.1.1/libexec/lib/python3.7/site-packages/pgcli/pgcompleter.py"", line 278, in extend_foreignkeys
    childcolmeta = meta[childschema][childtable][childcol]
KeyError: 'measurement'

kenneth@/tmp:dev> \d measurement;
+-----------+---------+-------------+
| Column    | Type    | Modifiers   |
|-----------+---------+-------------|
| city_id   | bigint  |             |
| logdate   | date    |  not null   |
| peaktemp  | integer |             |
| unitsales | integer |             |
+-----------+---------+-------------+
Partition key: RANGE (logdate)

Time: 0.024s
```

Note the output doesn't show the foreign key, where `psql` displays it:

```
$ ~ psql dev
psql (11.3)
Type ""help"" for help.

dev=# \d measurement
              Table ""public.measurement""
  Column   |  Type   | Collation | Nullable | Default
-----------+---------+-----------+----------+---------
 city_id   | bigint  |           |          |
 logdate   | date    |           | not null |
 peaktemp  | integer |           |          |
 unitsales | integer |           |          |
Partition key: RANGE (logdate)
Foreign-key constraints:
    ""measurement_city_id_fkey"" FOREIGN KEY (city_id) REFERENCES cities(id)
Number of partitions: 0
```",2017-03-21 23:06:15,
526,674,"## Description

I expected `\list` to return a list of databases, instead it gives this error:

```
syntax error at or near ""\""
LINE 1: \list
        ^

Time: 0.001s
```

If I use `psql`, `\list` behaves like `\l`, it gives a list of databases with these column headers:

```
                                           List of databases
          Name          |   Owner    | Encoding |   Collate   |    Ctype    |     Access privileges
------------------------+------------+----------+-------------+-------------+---------------------------
 example                | example    | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
```

In pgcli, `\l` only has one column:

```
+------------------------+
| datname                |
|------------------------|
| example                |
+------------------------+
```

I think pgcli should be have like psql: both `\list` and `\l` should be supported, and it should output all the columns ""name"", ""owner"", ""encoding"", etc.

## Your environment

I'm using version: 1.3.1 of pgcli and comparing it to version 9.6.2 of psql.","\list does not work and \l only has one column
Oooh. This must be new behavior for psql. It used to show only one column. You're right we should try to duplicate this behavior in pgcli. 

Thank you for the issue. 👍 
@amjith I really can't remember when psql showed only one column, but at least in 9.5+ it aways shows all those columns. The query I added in #746 is the query to list all those, so we can use it (maybe replace the old one?)

note that with psql `\l+`/`\list+` also returns more columns: `Size`, `Tablespace` and `Description`
I'd be glad to merge a PR with the new query you've got. Would you like to make a PR or shall I create one on your behalf? 
I'll be glad to do it.
Fixed since 1.8.2",2017-03-20 16:10:09,2017-12-28 09:28:52
527,673,"## Description

* Removes an unnecessary step from functional tests.
* Splits test steps into different files.
* Adds support for coverage.

Work in progress.

## Checklist
<!--- We appreciate your help and want to give you credit. Please take a moment to put an `x` in the boxes below as you complete them. -->
- [ ] I've added this contribution to the `changelog.md`.
- [ ] I've added my name to the `AUTHORS` file (or it's already there).
","Functional tests housekeeping
@meeuw I did the rename, but I don't see any syntax errors in that line. Can you take another look? Thanks!
Hi @j-bennet, thanks for the rename. This test is wrong because it's matching the nano buffer and not the output in pgcli. It should read something like `wrappers.expect_exact(context, 'select\x1b[0m \x1b[0;38;5;241m*\x1b[0m \x1b[0;38;5;28;1mfrom\x1b[0m \x1b[0mabc', timeout=2)` to match the correct output.
I've made some fixes for the functional tests please have a look: 1ed8333e5d4da1d7a17e3df3e61c675bc4874648
@meeuw Ah, now I see what you're saying. Yes, I was trying to avoid checking for unreadable strings like that. I wish that there was an option to run the cli with color output disabled. I asked @jonathanslenders about it, but he said there's no such thing. I'll see if I can use a regex there.
@meeuw So I added a regexp instead. I don't want to bother checking color codes for correctness, so I'm allowing anything between actual query tokens.
@meeuw That was a very nice catch. :) Apparently this test never even worked in travis, because nano was not installed. Checking for colored output revealed the problem.
@j-bennet I don't have nano installed on my system so I've switched to ex as editor for mycli:
https://github.com/dbcli/mycli/blob/meeuw/pgcli_behave_framework/tests/features/steps/iocommands.py
@j-bennet please have a look at the other changes I've made:
https://github.com/meeuw/pgcli/commit/5e2bbd62e3e69bcdcfff898b1e58d8dd3af9fdbb

PGPASS should be PGPASSWORD and pgcli should be run in tests/.. to get the coverage output files in the right directory. I've also updated .travis.yml to combine the coverage files.
@meeuw I never worked with ex editor. Do you think that it's better than nano for functional tests? Why?

Thanks for the other change, https://github.com/meeuw/pgcli/commit/5e2bbd62e3e69bcdcfff898b1e58d8dd3af9fdbb. I'll port that over to my branch.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/673?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@1b50f04`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/673/graphs/tree.svg?width=650&height=150&src=pr&token=XdciEnQkL2)](https://codecov.io/gh/dbcli/pgcli/pull/673?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #673   +/-   ##
=========================================
  Coverage          ?   78.88%           
=========================================
  Files             ?       22           
  Lines             ?     2520           
  Branches          ?        0           
=========================================
  Hits              ?     1988           
  Misses            ?      532           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/673?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/673?src=pr&el=footer). Last update [1b50f04...578a36a](https://codecov.io/gh/dbcli/pgcli/pull/673?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
I think ex is better because
1. I think ex is POSIX (and installed on every unix system)
2. ex is built for scripting (an editor like nano might have surprises for different versions)
3. We are testing pgcli and not the editor, I think we should choose what can be scripted best.

But I'm not very known to functional tests and in the end the nano code is less than what I've written for ex so it's open for discussion what's better.
@meeuw Like you said, we're not testing the editor. I chose `nano` because command sequences are short (only send one sequence to write out the file, one to exit). But I don't mind switching to `ex`. If it's available on most systems (including travis) without an additional install, that's a good argument. Would you be able to commit the `nano` -> `ex` change into this branch?
sure, here it is: f1e0da998ebdf6753e3917ec8b6895f5a24db035 ([meeuw/pgcli.git j-bennet/behave-tests-housekeeping](/meeuw/pgcli/commits/j-bennet/behave-tests-housekeeping)) (I don't have commit access to pgcli)
Thank you @meeuw. I think it's time to add you to the `pgcli-core` team as well.
> Thank you @meeuw. I think it's time to add you to the pgcli-core team as well.

👍 

@meeuw You're now a member of pgcli-core team. Congratulations. :) 🎈 

I think the housekeeping should be good to go. What do you think?
😀 thanks. I think this is a big improvement. After merging this I'll refresh mycli's PR and then that is also ready to merge. I'm working on a follow up PR with a custom pager (which add a starting and trailing boundary like mime mail) so the results can be matched better.
Merged!",2017-03-19 21:04:27,2017-04-01 17:11:06
528,672,"## Description
<!--- Describe your problem as fully as you can. -->

## Your environment
<!-- This gives us some more context to work with. -->

- [ ] Please provide your OS and version information.
- [ ] Please provide your CLI version.
- [ ] What is the output of ``pip freeze`` command.
",",
- MacOS 10.12.3
- Version: 1.5.1
- `pip freeze output`:
- - appdirs==1.4.3
- - click==6.7
- - configobj==5.0.6
- - humanize==0.5.1
- - packaging==16.8
- - pgcli==1.5.1
- - pgspecial==1.7.0
- - prompt-toolkit==1.0.13
- - psycopg2==2.7.1
- - Pygments==2.2.0
- - pyparsing==2.2.0
- - setproctitle==1.1.10
- - six==1.10.0
- - sqlparse==0.2.3
- - wcwidth==0.1.7
@jose2190 I think you forgot to describe your issue. LOL. 

You wanna tell us what problem you're having? 
I'm confused by this issue. It says I created it but I don't remember creating it and there is a comment by @jose2190. 
Hahaha, i was think you opened this question for data analysis or something else.
I don't have any problem, pgcli is awesome!
Haha. My bad. I'll close this issue. 

> I don't have any problem, pgcli is awesome!

Awww. Pgcli has the best users ever. 😃 ",2017-03-19 19:49:49,2017-03-20 16:27:10
529,671,"Based on discussion in mycli Google group.

Also see the same in mycli: https://github.com/dbcli/mycli/pull/372","PR and issue templates.
🚀 ",2017-03-18 21:26:30,2017-03-19 19:49:33
530,670,"This is an attempt to fix #668 .

There's another PR to do the same: https://github.com/dbcli/pgcli/pull/669, but it does not fix the problem completely, because we need to reset the cli buffer in most cases. Editor command seems to be the special case where we don't want the reset.

This PR is work in progress, because I dislike using internal `prompt_toolkit` API like this. I would like very much for @jonathanslenders to weigh in on this.

cc @amjith @jdpopkin","Attempt to fix #668 (not pretty).
I don't know enough about this change to say whether it is the right call or not. But it looks like Jonathan agrees that there is no ideal solution. So if this fixes the issue let's merge this. 

Thoughts? 
I'm going to merge it with an additional FIXME comment. Jonathan was talking about some major refactorings in his next release of `prompt_toolkit`, so I want to mark the potentially breakable spot.
I'll let you know in advance when 2.0 is going to be released. There's still some work to do, but probably I'll synchronize it with an IPython release and maybe other prompt_toolkit applications.
Right now, the 2.0 branch feel stable, but I'm going to rewrite at least ptpython, pymux and pyvim against 2.0 first in order to see whether the API is good enough.",2017-03-16 04:24:27,2017-03-20 16:31:57
531,669,,"Fix \e
There's probably a better way to do this, or at least a better place to put this code. Do let me know. (Or just close it and fix it in a cleaner way; I just want my pgcli to work again 😿)

This fixes #668 by working around changes introduced by jonathanslenders/python-prompt-toolkit@9030182.
Actually, there's a place where pgcli expects a reset to happen: https://github.com/dbcli/pgcli/pull/669/files#diff-38f3aeda57742756afa677ca09dcea43R446

So maybe we should overwrite cli.accept_action both before and after that call to cli.run. But that sounds awkward to me.

Edit: I figured out what goes wrong because that reset doesn't go through - after you run a query and exit your pager, your query is still there - you have to manually call ^C to clear the query. That seems Bad.
Perhaps @jonathanslenders could advise.
Ok, I see what's going on.
One possibility would be to use indeed a custom ``AcceptAction``. But rather then calling ``set_return_value``, check whether the input equals ``\e``. If so, call ``buffer.open_in_editor``. If not, return as usual. (like ``AcceptAction.RETURN_DOCUMENT`` does.)

I agree that no approach is ideal. I'm working on prompt_toolkit 2.0 which refactors a lot of internal stuff. This should make things like this easier. (But that'll probably take half a year before the release.)
Closing this in favor of #670 - thanks, everyone! 🎈 ",2017-03-15 22:01:07,2017-03-17 14:04:19
532,668,"Conversation from gitter: 

> When I write `select 1 \e`, I correctly see `select 1` in my editor. When I edit and quit, I don't see `select 2`. I don't see anything at all. If I type `;<RET>`, I get the can't execute an empty query error message.
> 
> nvim 0.1.7, macOS Sierra (10.12.1). nvim exits normally when I do the same thing from bash. And it works with psql. I believe it also worked fine in pgcli prior to my last brew upgrade, but I'm not sure what version I was on previously.
> Judging by `brew list --versions pgcli`, I was probably on 1.3.1_1.
> 

I'm unable to reproduce it since my brew setup is screwed up. 

Steps to reproduce:

1. brew update && brew install pgcli
2. Launch pgcli
3. Type `select 1 \e`
4. Change the query to `select 2` in the editor. 
5. Save and quit the editor. 
6. Check to see if the prompt shows `select 2`. 

","\e is not working on pgcli 1.5.0 installed via brew
I have this problem. Editing `setup.py` to use version 1.0.0 of `prompt_toolkit` solves it. (But presumably 7827790cd2d433e33caaf10c292fbc479b6bc7d4 happened for a reason.)
That version bump happened because of crash described here: https://github.com/dbcli/pgcli/pull/620
I guess pip gave me a newer version of `prompt_toolkit` - when I install with `prompt_toolkit==1.0.9`, `\e` works as expected; when I install with `prompt_toolkit==1.0.10`, I run into the problem described above.
I'm ignorant of these libraries and Python in general, so I crammed a bunch of printlns into `handle_editor_command` to try to figure out what's going on here.

    def handle_editor_command(self, cli, document):
        """"""
        Editor command is any query that is prefixed or suffixed
        by a '\e'. The reason for a while loop is because a user
        might edit a query multiple times.
        For eg:
        ""select * from \e""<enter> to edit it in vim, then come
        back to the prompt with the edited query ""select * from
        blah where q = 'abc'\e"" to edit it again.
        :param cli: CommandLineInterface
        :param document: Document
        :return: Document
        """"""
        while special.editor_command(document.text):
            self.logger.error(""XYZZY initial document text: "" + document.text)
            filename = special.get_filename(document.text)
            sql, message = special.open_external_editor(filename,
                                                          sql=document.text)
            self.logger.error(""XYZZY "" + sql)
            if message:
                # Something went wrong. Raise an exception and bail.
                self.logger.error(""XYZZY message: "" + message)
                raise RuntimeError(message)
            cli.current_buffer.document = Document(sql, cursor_position=len(sql))
            self.logger.error(""XYZZY no message"")
            self.logger.error(""XYZZY middle-of-loop current-buffer-document text: "" + cli.current_buffer.document.text)
            document = cli.run(False)
            self.logger.error(""XYZZY tail-of-loop document text: "" + document.text)
            self.logger.error(""XYZZY tail-of-loop current-buffer-document text: "" + cli.current_buffer.document.text)
            continue
        self.logger.error(""XYZZY post-loop document text: "" + document.text)
        return document

As a test case, I entered `select * from information_schema.columns limit \e`, then edited to `select * from information_schema.columns limit 1;` and exited the editor.

When `prompt_toolkit==1.0.9`, I see this in my `~/.pgcli.log`:

    2017-03-15 17:00:18,074 (23614/MainThread) pgcli.main ERROR - XYZZY initial document text: select * from information_schema.columns limit \e
    2017-03-15 17:00:23,055 (23614/MainThread) pgcli.main ERROR - XYZZY select * from information_schema.columns limit 1;
    2017-03-15 17:00:23,056 (23614/MainThread) pgcli.main ERROR - XYZZY no message
    2017-03-15 17:00:23,056 (23614/MainThread) pgcli.main ERROR - XYZZY middle-of-loop current-buffer-document text: select * from information_schema.columns limit 1;
    2017-03-15 17:00:27,442 (23614/MainThread) pgcli.main ERROR - XYZZY tail-of-loop document text: select * from information_schema.columns limit 1;
    2017-03-15 17:00:27,443 (23614/MainThread) pgcli.main ERROR - XYZZY tail-of-loop current-buffer-document text: select * from information_schema.columns limit 1;
    2017-03-15 17:00:27,443 (23614/MainThread) pgcli.main ERROR - XYZZY post-loop document text: select * from information_schema.columns limit 1;```

When `prompt_toolkit==1.0.10`, I see this:

    2017-03-15 17:15:23,597 (24079/MainThread) pgcli.main ERROR - XYZZY initial document text: select * from information_schema.columns limit \e
    2017-03-15 17:15:28,452 (24079/MainThread) pgcli.main ERROR - XYZZY select * from information_schema.columns limit 1;
    2017-03-15 17:15:28,452 (24079/MainThread) pgcli.main ERROR - XYZZY no message
    2017-03-15 17:15:28,452 (24079/MainThread) pgcli.main ERROR - XYZZY middle-of-loop current-buffer-document text: select * from information_schema.columns limit 1;
    2017-03-15 17:15:29,763 (24079/MainThread) pgcli.main ERROR - XYZZY tail-of-loop document text:
    2017-03-15 17:15:29,763 (24079/MainThread) pgcli.main ERROR - XYZZY tail-of-loop current-buffer-document text:
    2017-03-15 17:15:29,763 (24079/MainThread) pgcli.main ERROR - XYZZY post-loop document text:

It looks like CommandLineInterface.run doesn't return what it used to?
Maybe it's jonathanslenders/python-prompt-toolkit@903018201e0b0f5ad4090c08879fa83f665413b3, which disables the `reset_current_buffer` parameter that pgcli sets to `False` here.

(Take this with a grain of salt, as I don't know anything about either of these libraries or Python in general.)
Damn! That's some excellent code sleuthing for someone who doesn't know these libraries 😄. I might have time tonight to look into this when I get back from work.
The fix is merged to master. To install from master:

`pip install -U https://github.com/dbcli/pgcli/archive/master.zip`
When I do this `master` (bc6883a as of the time of this writing), I get the error `AttributeError: module 'pgspecial' has no attribute 'get_editor_query'`. Full error below.

```
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/usr/lib/python3.6/site-packages/click/core.py"", line 722, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/lib/python3.6/site-packages/click/core.py"", line 697, in main
    rv = self.invoke(ctx)
  File ""/usr/lib/python3.6/site-packages/click/core.py"", line 895, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/lib/python3.6/site-packages/click/core.py"", line 535, in invoke
    return callback(*args, **kwargs)
  File ""/usr/lib/python3.6/site-packages/pgcli/main.py"", line 838, in cli
    pgcli.run_cli()
  File ""/usr/lib/python3.6/site-packages/pgcli/main.py"", line 475, in run_cli
    document = self.handle_editor_command(self.cli, document)
  File ""/usr/lib/python3.6/site-packages/pgcli/main.py"", line 372, in handle_editor_command
    query = (special.get_editor_query(document.text) or
AttributeError: module 'pgspecial' has no attribute 'get_editor_query'
```
@giodamelio This works for me with `pgspecial==1.8.0`. Please try updating that: `pip install pgspecial==1.8.0`.",2017-03-15 20:30:24,2017-06-09 16:13:46
533,667,"Instead of having a bunch of hard-coded completer fixtures (with different configs) in tests/test_smart_completion_multiple_schemata.py and tests/test_smart_completion_public_schema_only.py, let's have a completer factory in tests/metadata.py. Also, instead of running a test case for one completer config, let's run it for a bunch of different completer configs. That's the basic idea.

Also, I noticed there was some room for deduplication of the smart_completion code, so I moved a bunch of duplicated code from the test functions into metadata.py. There's no change in function for any commit except the first (""Parametrize ..."").","Parametrize completer in tests + deduplicate test code
Sorry I haven't had time to look at this. I'll get to it soon-ish, if no one else picks it up. 
I looked at this briefly, but I want to take a better look as well. It does make the test code less complex and more readable. I'm a little concerned that it may make debugging a broken test less clear - you'll have a longer stack trace, more calls to subroutines to get through - but it may be a worthwhile tradeoff.
I only skimmed it, but +1 from me
I think this PR looks great. I only have nitpicks about pep8-compliant formatting (like two line breaks between function defs; no space around `=` in `method_call(kwarg_name = kwarg_value)`; docstrings should be `""""""Docstring""""""` and not `'''Docstring'''` etc.)
@j-bennet I haven't been following strict pep-8 or even not so strict pep-8 in my code. 

Should we? If so, we need an automatic way of enforcing it instead of a human check. 
I don't think it is fair to hold up this PR for PEP-8. Especially since we never expressed that as a requirement in the past. 
I think it's more or less assumed for any Python code. We do not have an automatic checker, because there's no reason to enforce it strictly, this is true, but ""not so strict"" and still close to the guidelines would be good. And especially on bigger PRs (on smaller one, I would not bring it up).

It's your project @amjith, so I can agree to disagree.
> It's your project @amjith, so I can agree to disagree.

Nope. 

It is our project. I'm not even the lead anymore. I'm just expressing opinions not enforcing them (and never will). 
> I think it's more or less assumed for any Python code. We do not have an automatic checker, because there's no reason to enforce it strictly, this is true, but ""not so strict"" and still close to the guidelines would be good.

:+1: ",2017-03-15 02:27:54,2017-04-21 14:40:13
534,666,"Bugfix release, mostly just to fix #665.

@amjith Please review.","Changelog for bugfix release 1.5.1.
Looks good! :shipit: ",2017-03-14 05:53:42,2017-03-14 06:04:03
535,665,Addresses #664 ,"Fix set_session cannot be used inside a transaction when using dsn.
Good find. 👍 

Do you think this will also address https://github.com/dbcli/pgcli/issues/657? 
I don't think so, different exception. They already fixed this in psycopg2 though (https://github.com/psycopg/psycopg2/issues/524).
@amjith Please merge if looks ok?
Nicely done! 

🎸 ",2017-03-13 18:02:48,2017-03-13 18:16:35
536,664,"I've seen this raised and closed in #646, #652 and #658  but i'm experiencing this in v1.5.0 when using a service (which was working in 1.3.1):
`pgcli service=foo_db`

I've tried `pip install psycopg2==2.6.2` and this is returned: 
`Requirement already satisfied: psycopg2==2.6.2 in /usr/local/lib/python2.7/site-packages`
","set_session cannot be used inside a transaction in v1.5.0
What else does your `pip freeze` show?
```
altgraph==0.12
awscli==1.10.13
botocore==1.4.4
click==6.6
colorama==0.3.3
configobj==5.0.6
Django==1.8.2
docutils==0.12
futures==3.0.5
git-sweep==0.1.1
gitdb2==2.0.0
GitPython==2.1.0
Glances==2.7.1
humanize==0.5.1
jmespath==0.9.0
macholib==1.7
modulegraph==0.12.1
pgcli==1.2.0
pgspecial==1.6.0
prompt-toolkit==1.0.7
psutil==4.4.0
psycopg2==2.6.2
py2app==0.9
pyasn1==0.1.9
pyfiglet==0.7.5
Pygments==2.1.3
pyobjc==3.0.4
pyobjc-core==3.0.4
pyobjc-framework-Accounts==3.0.4
pyobjc-framework-AddressBook==3.0.4
pyobjc-framework-AppleScriptKit==3.0.4
pyobjc-framework-AppleScriptObjC==3.0.4
pyobjc-framework-Automator==3.0.4
pyobjc-framework-CalendarStore==3.0.4
pyobjc-framework-CFNetwork==3.0.4
pyobjc-framework-Cocoa==3.0.4
pyobjc-framework-Collaboration==3.0.4
pyobjc-framework-CoreData==3.0.4
pyobjc-framework-CoreLocation==3.0.4
pyobjc-framework-CoreText==3.0.4
pyobjc-framework-CoreWLAN==3.0.4
pyobjc-framework-DictionaryServices==3.0.4
pyobjc-framework-DiskArbitration==3.0.4
pyobjc-framework-EventKit==3.0.4
pyobjc-framework-ExceptionHandling==3.0.4
pyobjc-framework-FSEvents==3.0.4
pyobjc-framework-InputMethodKit==3.0.4
pyobjc-framework-InstallerPlugins==3.0.4
pyobjc-framework-InstantMessage==3.0.4
pyobjc-framework-LatentSemanticMapping==3.0.4
pyobjc-framework-LaunchServices==3.0.4
pyobjc-framework-PreferencePanes==3.0.4
pyobjc-framework-PubSub==3.0.4
pyobjc-framework-QTKit==3.0.4
pyobjc-framework-Quartz==3.0.4
pyobjc-framework-ScreenSaver==3.0.4
pyobjc-framework-ScriptingBridge==3.0.4
pyobjc-framework-SearchKit==3.0.4
pyobjc-framework-ServiceManagement==3.0.4
pyobjc-framework-Social==3.0.4
pyobjc-framework-StoreKit==3.0.4
pyobjc-framework-SyncServices==3.0.4
pyobjc-framework-SystemConfiguration==3.0.4
pyobjc-framework-WebKit==3.0.4
python-dateutil==2.5.0
rsa==3.3
s3transfer==0.0.1
setproctitle==1.1.10
six==1.10.0
smmap2==2.0.1
speedtest-cli==1.0.0
sqlparse==0.2.0
termdown==1.12.0
virtualenv==15.0.0
wcwidth==0.1.7
```
It says `pgcli==1.2.0` in there though.
Huh. I must have installed it via pip initially, but i've been using brew since then. `pgcli -v` was definitely returning 1.5.0.

I've uninstalled it through pip now, and reinstalled via brew and it's the same:


<img width=""690"" alt=""screen shot 2017-03-13 at 17 25 52"" src=""https://cloud.githubusercontent.com/assets/8026009/23866937/3ebb71fa-0812-11e7-830e-412e0f4f4bd7.png"">

Can you uninstall brew version of pgcli and reinstall it using pip? 

```
brew remove pgcli
pip install -U pgcli
```

Then try again? 

Also what is the alias `pgs` set to? 

```
alias pgs
```

I think this will be the fix:

https://github.com/dbcli/pgcli/pull/665

Still confusing, because I don't get the exception with `psycopg2==2.6.2`. I only get the exception if `psycopg2` is updated to latest.
Fix was just merged to master. Try installing directly from master: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```
Perfect, installing from master works - thanks so much for your help @j-bennet & @amjith!",2017-03-13 13:03:14,2017-03-14 14:04:38
537,663,Let's see if we can track changes as we go.,"Track recent changes in changelog.
Great idea.",2017-03-11 23:24:34,2017-03-11 23:31:55
538,662,`\pset format wrapped` works on `psql` but not `pgcli`,"pset command missing
@jontsai You're right we don't yet support that. In fact the only `\pset` that is supported is pager. 

There are a couple of problems with the wrapped mode. First, we need to rewrite the output with newlines based on the terminal size, which sounds a bit complicated. Second, the tabulate library that we're using doesn't support multi-line values, so even if we manage to achieve the first goal the table will render really weird. 

So this is a hard problem but not impossible. I'm currently working on replacing our tabulate library with one that does support multi-line values. Once that is done we'll revisit the idea of auto-wrapping. I hope that gives you an idea of where the priorities are right now. 
I'd like to add that the `\pset pager` that's supposedly supported does not have the expected behavior (setting paging to `on`, `off` or `always`). Instead, it tries to set the pager program to invoke.",2017-03-11 20:29:32,
539,661,Reviewer: @j-bennet ,"Update AUTHORS
Fixed! 😄 
Thank you @amjith !",2017-03-11 16:11:11,2017-03-11 22:52:54
540,660,"Simple Dockerfile to allow running this tool in docker. I've tested it manually, but I can't get the automated test suite to run. I've been trying to, but I don't want to let this linger while I work on that.","Docker
If you want to test it, I've uploaded a build to dockerhub:

```
docker run --rm -ti luyat/pgcli:docker pgcli --help
```

(more comments more comments)

With this you can create a dockerhub account yourself and create an automated build for pgcli. That way, people don't have to download or install anything (if they have docker), they can just do `docker run --rm -ti dbcli/pgcli pgcli -something -something`.
Very interesting. I dockerized pgcli before, to test it on different OS:

https://github.com/j-bennet/dockerized

but didn't realize other people may want to do that also.

There should be more detailed instructions about how to use it. For example, I have a database called `boo`. I normally connect like this:

```
$ pgcli boo
```

But when I run with the docker container, no such luck:

```
$ docker run --rm -ti luyat/pgcli:docker pgcli boo
could not connect to server: No such file or directory
	Is the server running locally and accepting
	connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5432""?
```

Is boo a host name defined in your /etc/hosts?

On Fri, 10 Mar 2017 at 17:40, Irina Truong <notifications@github.com> wrote:

> Very interesting. I dockerized pgcli before, to test it on different OS:
>
> https://github.com/j-bennet/dockerized
>
> but didn't realize other people may want to do that also.
>
> There should be more detailed instructions about how to use it. For
> example, I have a database called boo. I normally connect like this:
>
> $ pgcli boo
>
> But when I run with the docker container, no such luck:
>
> $ docker run --rm -ti luyat/pgcli:docker pgcli boo
> could not connect to server: No such file or directory
> 	Is the server running locally and accepting
> 	connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5432""?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/pull/660#issuecomment-285734507>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAIafK1hFI6qIHli8L1Y4EPHu32VY59Zks5rkYrvgaJpZM4MZUx4>
> .
>

No, this is actually a database name. I connect to database boo on localhost.
What I was getting at, pgcli running in docker probably needs ports forwarded, and possibly a UNIX socket bound, and maybe changes in postgres config to allow external TCP connections.
@hraban I think this PR is fine to merge, but it needs a little more information in readme about running `pgcli` in docker. I'd probably explain why a user may want to do that (""in case you want to try out pgcli without installing it on your system...""), and what additional steps may be required for pgcli to connect from under docker container (""you postgres server should allow external TCP/IP connections..."").
yes, good points. sorry for not getting back on this. I'll try to write something up.

in related news, if you use `--net host` you can connect to a postgresql server running (and listening) on localhost:

```
docker run --rm -ti --net host luyat/pgcli:docker pgcli -h localhost
```

And if your postgresql DB is, itself, running in docker, you could mount it from a shared named volume:

```
docker run -v pgsock:/var/run/postgresql postgres
# and:
docker run --rm -ti -v pgsock:/var/run/postgresql luyat/pgcli:docker pgcli
```

I haven't tested running postgresql DB as a first-class app on your host, mounting host /var/run/postgresql to a docker host and connecting through that, but it... might work?? probably? needs testing.

anyway this all needs proper writing up but it's something to play with.
Done and rebased onto master.
# [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/660?src=pr&el=h1) Report
> Merging [#660](https://codecov.io/gh/dbcli/pgcli/pull/660?src=pr&el=desc) into [master](https://codecov.io/gh/dbcli/pgcli/commit/dd4586d3e09507130f057421a9c7d626905ae827?src=pr&el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/dbcli/pgcli/pull/660/graphs/tree.svg?src=pr&token=XdciEnQkL2&width=650&height=150)](https://codecov.io/gh/dbcli/pgcli/pull/660?src=pr&el=tree)

```diff
@@           Coverage Diff           @@
##           master     #660   +/-   ##
=======================================
  Coverage   78.93%   78.93%           
=======================================
  Files          23       23           
  Lines        2526     2526           
=======================================
  Hits         1994     1994           
  Misses        532      532
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/dbcli/pgcli/pull/660?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/dbcli/pgcli/pull/660?src=pr&el=footer). Last update [dd4586d...9a3d2ad](https://codecov.io/gh/dbcli/pgcli/pull/660?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

@hraban Looks great - thank you! Please add your name to [authors](https://github.com/dbcli/pgcli/blob/master/AUTHORS) and your contribution to the ""Upcoming"" ones in [changelog](https://github.com/dbcli/pgcli/blob/master/changelog.rst), and I'll merge it.
Thanks a lot!
haha we just pushed and merged simultaneously :D 
no p. also, this is completely up to you, but a great next step would be to create a ""automated build"" in hub.docker.com. It will make it even easier for people to try out pgcli---just one docker line, done. no git clone or docker build.

anyway thanks for taking the time. cheers!
@hraban If you're willing to take care of that, we'll definitely appreciate it!
gladly, but we'll need to coordinate auth between github and dockerhub. shoot me an e-mail at hraban@0brg.net and I can help you through the process.",2017-03-10 12:21:41,2017-04-19 17:08:37
541,659,I saw this issue labeled Easy. I took a stab at it and I'm open to feedback.,"Add a command line option for --less-chatty. Fix #626.
# Manual testing

## --less-chatty listed in --help

```
$ pgcli --help
Usage: pgcli [OPTIONS] [DATABASE] [USERNAME]

Options:
  -h, --host TEXT          Host address of the postgres database.
  -p, --port INTEGER       Port number at which the postgres instance is
                           listening.
  -U, --user TEXT          User name to connect to the postgres database.
  -W, --password           Force password prompt.
  -w, --no-password        Never prompt for password.
  --single-connection      Do not use a separate connection for completions.
  -v, --version            Version of pgcli.
  -d, --dbname TEXT        database name to connect to.
  --pgclirc TEXT           Location of pgclirc file.
  -D, --dsn TEXT           Use DSN configured into the [alias_dsn] section of
                           pgclirc file.
  -R, --row-limit INTEGER  Set threshold for row limit prompt. Use 0 to
                           disable prompt.
  --less-chatty            Skip intro on startup and goodbye on exit.
  --prompt TEXT            Prompt format (Default: ""\u@\h:\d> "").
  --help                   Show this message and exit.
```

## less_chatty is not in config

```
$ pgcli
Version: 1.5.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
tk@(none):tk>
Goodbye!

$ pgcli --less-chatty
tk@(none):tk>
```

## less_chatty = False in config

```
$ pgcli
Version: 1.5.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
tk@(none):tk>
Goodbye!

$ pgcli --less-chatty
tk@(none):tk>
```

## less_chatty = True in config

```
$ pgcli
tk@(none):tk>

$ pgcli --less-chatty
tk@(none):tk>
```

Well done. Thanks!
🌷 ",2017-03-10 08:49:03,2017-03-11 23:13:08
542,658,"I use postgres in a docker environment for development. When I try to connect with pgcli I'm getting ""set_session cannot be used inside a transaction"". Any hint how to solve the problem. Normal ""psql"" work fine.","Issue with dockered postgresql
This is now fixed in the latest version. Please upgrade to 1.5.

On Mar 8, 2017 1:30 AM, ""Danilo Kühn"" <notifications@github.com> wrote:

> I use postgres in a docker environment for development. When I try to
> connect with pgcli I'm getting ""set_session cannot be used inside a
> transaction"". Any hint how to solve the problem. Normal ""psql"" work fine.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/dbcli/pgcli/issues/658>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AADAbH-_WO2ggrFeB0FOgB-GEhC-l68xks5rjnVJgaJpZM4MWjiI>
> .
>

Great its working, thanks.",2017-03-08 09:30:49,2017-03-08 13:41:59
543,657,"Currently dsn in form:

    somename = postgresql://postgres:password@host/eden

is invalid, after running pgcli `pgcli -D somename` it prints:

    invalid port number: ""None""

It should be required (wasn't in previous versions). I didn't verified other fields.","port shouldn't be required for DSN's in alias_dsn section
Looks like this is also caused by latest psycopg2. See if this fixes it:

`pip install psycopg2==2.6.2`
Aha. Found it. https://github.com/psycopg/psycopg2/issues/524
Yep, after downgrading psycopg it's better now, thanks :)
Sigh. We should fix this. ☹️ 
Fixed in psycopg2==2.7.1.",2017-03-08 06:27:56,2017-05-28 22:29:45
544,656,"Reviewer: @koljonen 

This fixes #651 ","Add support for unicode chars in expanded mode.
Super! Merging.",2017-03-07 03:21:40,2017-03-07 14:02:53
545,655,"Consider this script
```
CREATE FUNCTION foo() returns text LANGUAGE SQL AS $func$
SELECT 1 FROM Bar;
SELECT <cursor> FROM Baz;
$func$;
```
The change here is that `SELECT <cursor> FROM Baz;` will be seen as the
current statement, instead of the whole function definition.
This means we'll no longer get column suggestions from `Bar`.","Parse function bodies
I'll review this later tonight. 
Looks good to me. Thank you! 🚗 

Would you mind updating the changelog with a one line description of this PR? 

I'm trying to see if we can update the changelog as we go instead of waiting to update it right before release. 
I've rebased it and amended the commit with an update to the change.
Awesome!! Thank you!",2017-03-07 01:11:12,2017-03-09 02:51:00
546,654,"I think it's a lot nicer looking.
```
koljonen@localhost:koljonen> SELECT transferid, parenttransferid, amount from transfers
╒══════════════╤════════════════════╤══════════╕
│ TransferID   │ ParentTransferID   │ Amount   │
╞══════════════╪════════════════════╪══════════╡
...
...
...
```","Casing of column headers (using casing file)
Popping the dict and checking that it's empty is the cleanest way I could think of.
I've rebased as there was a conflict with master.
I think this request from @j-bennet requires a little bit of context. She was looking for a way to do static checking where the IDE (such as PyCharm) could alert you when you mistype the name of a certain variable. When you pass in a dictionary there is no way to do static checking because the keys could be anything.

What you have implemented is a nice way to do runtime checking. This guarantees that the function will crash if called incorrectly. But to me it feels like a python anti-pattern. We shouldn't be mutating a dictionary passed into a function unless absolutely necessary.

So here's a compromise, why not use `namedtuple`? Define a namedtuple called settings or something equally descriptive and pass that in as an argument. This will achieve the desired outcome of doing static checking without having a zillion function arguments.
Thanks @amjith, you explained it better.
Oh, I see. That makes perfect sense. I've squashed it all into two new commits.
Oops, sorry, I seem to have misplaced some code when rebasing. 😳 
Fixed now.
",2017-03-07 00:07:02,2017-04-21 14:39:20
547,653,"For issue #650.
","Add MATERIALIZED VIEW keywords
Since we're so close to releasing, can we merge this after the release? I don't feel like this is an urgent fix. 
That was one quick release @amjith .",2017-03-06 22:12:25,2017-03-07 00:57:50
548,652,"Hi, I used pgcli for a couple months, presumably on top of psycopg2. I installed SQLAlchemy and now pgcli won't even start, and will stop with the following message:

""set_session cannot be used inside a transaction""

What info can I give to help debugging?

Thanks","""set_session cannot be used inside a transaction"" after installing SQLAlchemy
What OS are you on?
Can you provide `pip freeze` output?
Are you running `pgcli` in virtualenv?
OS: Linux 4.9.11-1-ARCH x86_64 GNU/Linux

Not using virtualenv.

Python version 3.6.0

pip3 freeze

```
appdirs==1.4.2
astroid==1.4.9
attrs==16.3.0
Beaker==1.8.1
beautifulsoup4==4.5.3
Brlapi==0.6.5
chardet==2.3.0
click==6.7
configobj==5.0.6
cupshelpers==1.0
cycler==0.10.0
Cython==0.25.2
decorator==4.0.11
format-sql==0.12.0
greenlet==0.4.11
humanize==0.5.1
ipykernel==4.5.2
ipython==5.1.0
ipython-genutils==0.1.0
ipywidgets==5.2.2
isc==2.0
isort==4.2.5
Jinja2==2.9.5
jsonschema==2.6.0
jupyter-client==4.4.0
jupyter-console==5.1.0
jupyter-core==4.2.1
lazy-object-proxy==1.2.2
louis==3.0.0
Mako==1.0.6
Markdown==2.6.8
MarkupSafe==0.23
matplotlib==2.0.0
mccabe==0.6.1
mistune==0.7.3
msgpack-python==0.4.8
nbformat==4.2.0
neovim==0.1.13
notebook==4.3.1
numpy==1.12.0
packaging==16.8
pandas==0.19.2
pexpect==4.2.1
pgcli==1.4.0
pgspecial==1.7.0
pickleshare==0.7.4
prompt-toolkit==1.0.13
psutil==5.1.3
psycopg2==2.7
ptyprocess==0.5.1
pycups==1.9.73
pycurl==7.43.0
pyenchant==1.6.8
Pygments==2.2.0
pygobject==3.22.0
pygtkspellcheck==4.0.5
pylint==1.6.5
pyparsing==2.1.10
PyQt5==5.8
python-dateutil==2.6.0
python-libtorrent==1.1.1
pytz==2016.10
pyxdg==0.25
pyzmq==16.0.2
ranger==1.8.1
requests==2.13.0
setproctitle==1.1.10
simplegeneric==0.8.1
simplejson==3.10.0
sip==4.19.1
six==1.10.0
SQLAlchemy==1.1.6
sqlparse==0.2.3
team==1.0
termcolor==1.1.0
terminado==0.6
tornado==4.4.2
traitlets==4.3.2
ufonormalizer==0.1
urllib3==1.20
wcwidth==0.1.7
widgetsnbextension==1.2.6
wrapt==1.10.8
```
Hi. It is fixed in master. Haven't released it yet. You can install directly from master: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

If you're not comfortable installing directly from master you can downgrade the psycopg2 version to 2.6.2. It's an issue with the latest pscyopg2. 
Fixed by https://github.com/dbcli/pgcli/pull/647.

Available in 1.5.0.",2017-03-06 20:11:15,2017-03-07 01:48:16
549,651,"I've tried to debug this but haven't really gotten anywhere, so I'm hoping someone else has a better understanding of these things. It crashes in [expanded.py](https://github.com/dbcli/pgcli/blob/2fb030b72ac4cf1cfe8e1d6a875fb8393b82674e/pgcli/packages/expanded.py#L16) in the call to `_text_type()`.
```
vagrant@vagrant:vagrant> \x on; select 'ö'::tsvector
'ascii' codec can't decode byte 0xc3 in position 1: ordinal not in range(128)
```
```
vagrant@vagrant:vagrant> \x on; select 'ö'::tsquery
'ascii' codec can't decode byte 0xc3 in position 1: ordinal not in range(128)
```

This is on Python 2.7.12 on Mac OS, on the latest master of pgcli.","Decode error for non-ASCII of certain types in expanded mode
I'm on it. ",2017-03-06 16:03:31,2017-03-07 14:02:53
550,650,"pgcli does not suggest/complete the following:

```
CREATE MATERIALIZED VIEW ...
DROP MATERIALIZED VIEW ...
REFRESH MATERIALIZED VIEW ...
```","Completion for materialized views.
Implemented in #653.",2017-03-06 09:27:48,2017-05-27 03:26:06
551,649,"I keep typing e.g. `SELECT mff` and getting annoyed when `someschema.my_fancy_function()` isn't suggested because I forgot to type the schema first. So this fixes that, for tables, views functions and datatypes.
There's a config option for getting the old behaviour.

I added some rudimentary tests. I'm working on another branch where I'll make it more convenient to run the same test for different completer configs, which will add some more test cases for this feature as well.

Sending this to you @darikg, as it's related to a bunch of my other stuff you've reviewed.","Suggest objects from schemas not in search_path
Sorry I'm on vacation right now, I'll definitely have a look when I get
back next week

Pushed some changes.
Looks good!",2017-03-05 01:37:50,2017-03-14 20:36:37
552,648,"@dbcli/pgcli-core Can you please review the changelog and make any necessary edits? 

@j-bennet Can you do a release once this is approved by core team? ","Changelog update for 1.5.0
@amjith Reviewing.
Looks good to me. There was one more thing, docs for tabulate's number formatting, but that's neither a bugfix nor a feature, so it's fine to omit.
👍 
Alright people, @dbcli/pgcli-core let's get this reviewed and release a new version. 
I've been using it for the past few days, no issues, things seem really stable.
The version flag is still set to `1.4`, does that get updated after merge?

:+1: 
@stuartquin I usually bump the version when it's in master but I think @j-bennet does it the other way around. Either way it'll get bumped before published. 😄 
I think this is ready to merge. @j-bennet Can you do the honors? 
I'll release this tonight.",2017-03-03 23:56:44,2017-03-07 00:18:21
553,647,"Reviewer: @darikg 

This fixes #646 

Looks like psycopg2 released a new version yesterday that broke us. 😞 

The change was you can't change the `autocommit` status while a cursor is still active. So I moved the sql execution after we set the `autocommit` to `True`. ","Adjust the connection order to work around psycopg2 restriction.
👍 ",2017-03-03 14:06:47,2017-03-03 18:26:25
554,646,"Just freshly installed `pgcli` and upon trying to connect to my local postgres database I get:

   orf@mean-lean-dev-machine:~|⇒  pgcli -d doge doge -U doge
   set_session cannot be used inside a transaction

Does this mean anything?","set_session cannot be used inside a transaction
Same here too. Cannot connect, only message is the following (which returns nothing on Google search)..

    set_session cannot be used inside a transaction
I'm able to reproduce it. Looks like it is caused by the latest version of `psycopg2`. I'll try to find out why this is happening, but in the mean time you can install an older version of psycopg2 and continue using pgcli. Here's how you can install an older version of psycopg2. 

```
pip install psycopg2==2.6.2
```
Thanks for quick response @amjith
I found the issue. I've created a PR #647. We'll get that merged in soon and release a new version. Sorry about the trouble.",2017-03-03 10:13:27,2017-03-03 18:26:25
555,645,Reviewer: @stuartquin ,"Add python 3.5 and 3.6 to test suite.
The test failures are caused by the latest psycopg2. It is now fixed in #647. Once that is merged to master, I'll rebase this PR to fix the test failures.
3.6? Getting fancy there.",2017-03-03 06:08:47,2017-03-03 19:19:34
556,644,"Reviewer: @j-bennet 

This addresses #643. 

We should have been reconnecting on all OperationalErrors. 

Docs: http://initd.org/psycopg/docs/module.html#psycopg2.OperationalError","Reconnect on OperationalError.
I have no idea why this is failing in travis. 😞 
The test failures are caused by the latest psycopg2. It is now fixed in #647. Once that is merged to master, I'll rebase this PR to fix the test failures.

Yay for integration tests. 
Looks good.",2017-03-03 06:02:38,2017-03-03 19:17:51
557,643,"The ability to reconnect was added in #210  but it doesn't seem to reconnect when `SSL SYSCALL error: EOF detected` is received.

```
foo@mydb:mydb> SELECT count(1) FROM account;
SSL SYSCALL error: EOF detected

foo@mydb:mydb> SELECT count(1) FROM account;
connection already closed
```","pgcli doesn't reconnect on SSL SYSCALL error: EOF detected
@relistan Good to hear from you. 😄 

Sorry about the error. Would you be able to give me a repro case for this? I can't trigger a `SSL SYSCALL error`. 
I'm able to semi-reproduce it. 

1. I launched pgcli and then killed postgres. 
2. Tried a command in pgcli.
3. Pgcli asks me if I'd like to reconnect.
4. I say 'Yes'. But reconnect fails since postgres is still not running.
5. Now I launch postgres and try a different command in pgcli.
6. Pgcli returns `connection already closed`. 

Is this what you see? Or do you not get a prompt to reconnect when you get the first error?

BTW, what version of pgcli are you running `pgcli --version`? 

The latest version is 1.4.0, if you installed it via brew I'd recommend upgrading `brew update && brew upgrade pgcli`
Hey man! Good to hear from you, too 😃 . It seems to be when the network connection goes away under it. Yes, what you describe is what I see except it never asks to reconnect. I was on 1.3.1 which is the latest that `brew update` can find. But I removed it with brew and was able to `pip install` 1.4.0.

Using 1.4.0 I still don't get a request to reconnect. What I see is:
```
foo@mydb:mydb> SELECT ""count""(1) FROM account
SSL SYSCALL error: EOF detected

foo@mydb:mydb>

Time: 0.000s
foo@mydb:mydb> SELECT ""count""(1) FROM account
connection already closed
foo@mydb:mydb> SELECT ""count""(1) FROM account
connection already closed
```

Looks like on Linux I can reproduce by:

1. Connecting pgcli
2. Inserting an IPtables rule to block outbound packets
3. Running a query in pgcli, waiting for failure message 
4. Removing the IPtables rule

```
<in another terminal, connect pgcli>
kmatthias@ubuntu:~$ sudo iptables -I OUTPUT 1 --proto tcp --dport 5432 -j DROP
<in another terminal run a query, wait for SSL SYSCALL error>
kmatthias@ubuntu:~$ sudo iptables -D OUTPUT 1
```
Thanks Karl. I'll take a stab at this tonight. I appreciate the commands to repro this case. :)
I have fixed this in a PR #644. Once that gets merged we'll start a new release. 
Awesome, @amjith! That was quick!
Fixed in 1.5.0.
Thanks @amjith @j-bennet !",2017-02-28 13:17:25,2017-03-07 01:49:43
558,642,"By default we only reserve 4 lines for the suggestion menu, which feels cramped to me. This just makes the number of lines user-configurable","User config to reserve more menu space
👍 
Thanks @j-bennet  !",2017-02-25 14:19:40,2017-02-25 22:23:36
559,641,This is super simple I just wanted `ALTER TABLE foo ALTER ` to suggest `COLUMN`,"Suggest keywords after ALTER
Looks good. Merging.",2017-02-25 14:02:51,2017-02-25 22:16:13
560,640,"When the database password contains ""!"" the connection won't work. I tried escaping it, without any success.
`$ pgcli postgres://tester:test123!@localhost:5432/test`
`-bash: !@localhost: event not found`","issues when the database password contains ""!""
@blandonfrank Did you find a way to resolve this?
It's bash issue (in fact, it's feature - ! has special meaning in bash), not pgcli. Just put dsn into single quotes, and it will work.
> It's bash issue (in fact, it's feature - ! has special meaning in bash), not pgcli. Just put dsn into single quotes, and it will work.

You're completely right. I figured that out right after opening the issue. Hence I closed it right away.
Also, it turns out that I was escaping it incorrectly.  Using \ to escape it works just fine. Not sure why it didn't work for me at first.
`pgcli postgres://tester:test123\!@localhost:5432/test`

Anyway, this is a non-issue.
Thanks, good to know!",2017-02-17 22:31:47,2017-02-17 22:42:34
561,639,Connect #587 : switch the shorted prompt when prompt length is too long (if using the default prompt).,"Switch the shorted prompt when prompt length is too long. 
Nice work! I love it. 💯 ",2017-02-08 09:33:42,2017-02-10 04:40:56
562,638,"This does not fix issue #617, but at least documents the behavior.","Added documantation about tabulate's number formatting. Connect #617.
@amjith Could you review?
👍 ",2017-02-05 02:57:41,2017-02-05 03:42:06
563,637,"pgcli doesn't report server messages synchronously, and report all of them in one pass which can be not relevant when we need to follow a function execution with many RAISE statements.
As an example 
```
CREATE FUNCTION public.test() RETURNS VOID AS $$
BEGIN
	RAISE INFO 'Current timestamp: %', timeofday()::TIMESTAMP;
	PERFORM pg_sleep(1);
  RAISE INFO 'Current timestamp: %', timeofday()::TIMESTAMP;
	PERFORM pg_sleep(1);
  RAISE INFO 'Current timestamp: %', timeofday()::TIMESTAMP;
	PERFORM pg_sleep(1);
END;
$$ LANGUAGE 'plpgsql' STRICT;
```
In psql, the messages of this function will be displayed as they come, but not in pgcli.

","Messages in real time
You're right. This is a shortcoming of pgcli. The library used by pgcli to fetch the messages from Postgres doesn't happen synchronously. It happens after the query has finished execution. 

I'm not sure if there is a better way to implement this. 😞 
Closing as a duplicate of #430. I definitely agree it would be nice if we could do something about this, though.",2017-02-02 15:37:06,2017-03-05 00:16:12
564,636,"I'm using pgcli 1.4.0 on Windows 10

Everything works fine, I can connect to my Postgres DB, but **when I type the ""v"" letter I get a new line/carriage return, the same as if I press ""Enter""** !!?!

Please note that:
- same happens if I just past the ""v"" letter inside pgcli 
- capital ""V"" works fine!!

Already tried with no success:
- run pgcli under cmd, Powershell, git bash, Windows 10 bash: ""v"" key works as expected inside any of these shells, but inside pgcli it turns into ""Enter"".
- reboot workstation
- full reinstall of pgcli with `pip install --upgrade --force-reinstall -I --ignore-installed pgcli`

Any ideas?!?? This is driving me crazy","Crazy behavior: ""v"" key results in new line 😕
Same here. On macOS typing ""v"" letter makes pgcli 1.4.0 open vim, just like \e, but without ""# Type your query above this line."" line.
This bug is somewhere in prompt_toolkit 1.0.10. @cristoforo you can do ""pip install prompt_toolkit==1.0.9"" to avoid ""v"" bug.
@azinoviev Thanks for digging into that. I just reproduced the same bug with the latest prompt_toolkit. I'll file a bug with prompt_toolkit. In the meantime, your workaround is the best way to get around this issue.
@azinoviev Thank you very much, your workaround solves the issue!
Bug filed: https://github.com/jonathanslenders/python-prompt-toolkit/issues/460
Hi everyone, the bug should now be fix. Try upgrading to ``prompt_toolkit==1.0.11``.
Please let me know if you still experience any issues.
And excuse me for the inconvenience.
Thanks @jonathanslenders. That fixed the issue for me. 
",2017-02-02 09:52:02,2017-03-07 01:51:10
565,635,"The `/usr/bin/python3 /usr/bin/pgcli postgresql://xxxxx` process uses 100% of one of my CPUs, whether I'm typing commands or not.

Maybe all that energy is not required just to maintain a connection to a Postres server?","High CPU usage
Definitely doesn't sound normal. What's your hardware and OS?
@mathieurodic That's surprising. 

Here are the possible reasons that could contribute to this:

1. We collect metadata about a database by running a couple of SQL commands. The results are then used to populate a few data-structures in pgcli. This runs in a background thread when you launch pgcli or when you change to a new database. If the database has a lot of tables and columns (say 1000s of tables), it can be stressful on the CPU and Memory. 

2. If you do have an enormous database with 1000s of tables, then when you start typing something the completion engine will have to iterate through the list of table names to narrow down the entries based on what you've typed so far. 

3. If a query returns a large output with a ton of rows, then we'll warn you that you have more than 1000 rows and ask if you want to display them all. If you said yes, then we'll try to tabulate the results which can also be CPU intensive since we're iterating through all the rows to find out how to format the columns and pad the columns with spaces.

Other than those scenarios, pgcli doesn't really do much.

Does any of those scenarios match your case? Or does it drive the CPU to 100% all the time? 

If you keep pgcli open for say 5 mins, does the CPU usage go down after the first few minutes or is it consistently high?
@j-bennet I'm using Xubuntu 16.04, on an Intel i7 processor with 8GB RAM.

@amjith After more careful examination, the two processes that were each constantly using 100% CPU were both running as background processes, not related in any way to the CLI I was using at that time. As if something was left running after quitting the process.

The databases I'm using are development versions for microservices (i.e., few tables and little data).

I experience frequent disconnections with my network, could that be the origin of the bug?

What would you advise me to do to try and reproduce the bug?
One thing I can think of is completion refresher thread. It runs in the background and refreshes tables / column names and query history. I'm not sure how to verify that; I'll poke around.
I am seeing high CPU usage when I up-arrow through history and load/edit a multiline query. With a query that is only 40 lines long it immediately hits 100% CPU for me and I can't edit it further.
Could this be related to https://github.com/dbcli/pgcli/issues/994?
> I am seeing high CPU usage when I up-arrow through history and load/edit a multiline query. With a query that is only 40 lines long it immediately hits 100% CPU for me and I can't edit it further.

Smae here. Going back in history through little long queries makes it quite slow.
This has been addressed with newer version of prompt-toolkit which is a dependency of pgcli. 

Can you try upgrading pgcli to the latest version and report back if this is still an issue? 

### Upgrade: 

```
pip install -U pgcli
```
@amjith any idea what version is it?
There were a few improvements to very large text input in prompt-toolkit. I don't know the version number and the chagelog doesn't seem to list it. 

Could you try installing pgcli from master branch? There was a PR (#1109) that was merged in last night that made the multi-line query handling significantly faster. 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```
@amjith confirmed. Just tried master and it's fixed.
Well done @owst :champagne: ",2017-01-26 07:43:30,2019-10-17 20:43:05
566,634,"When I try to do an insert or other query with some string written in Russian pgcli displays each character as a `?` as I type it or after pasting from the clipboard, but the same query is rendered correctly inside psql.

I'm using WIndows 10 and pgcli 1.4.0 (installed via pip).","When I type non-ASCII characters they appear as question marks
@sryze What terminal are you using? Are you able to type in Russian in your terminal outside of pgcli? (for example, `echo ""русский""`).
Yes, I can type in Russian outside of pgcli. I'm using ConEmu (tried various shells there with no luck).
What version of python are you using? If you're not using 3.6, can you try that? It recently improved unicode handling in Windows.
Indeed it does work with Python 3.6.",2017-01-22 20:42:56,2017-01-29 17:56:09
567,633,"This makes it possible to enable through the configuration the always
expand and automatic expansion modes in pgcli.","Per #298, make expand modes configurable.
Looks good. Thanks for the PR.",2017-01-21 18:09:56,2017-01-21 21:56:39
568,632,Addresses #627.,Bumped pgspecial to 1.7.0. Connect #627.,2017-01-13 00:59:47,2017-01-13 00:59:53
569,631,@dbcli/pgcli-core Please review.,"Changelog and version update for release v1.4.0.
The changelog looks good. 

I noticed that you've bumped the version number in `__init__.py`. The `release.py` scripts won't work correctly if the version is already bumped. The way it is written it will need the `__init__.py` file updated but uncommited. So the script will commit that file with the appropriate commit message.
Thanks for the tip @amjith, I'll keep that in mind.",2017-01-11 00:37:31,2017-01-12 01:54:32
570,630,"Fixes #629 

Reviewer: @stuartquin ","Set default data_formatting to nothing.
:+1: ",2017-01-06 17:47:54,2017-01-07 11:53:01
571,629,"Right now the data-formats in the config file default to `,g` and `,d` for float and int. This makes it hard to copy and paste.

We should default this to none. ",The data-formats should default to none,2017-01-06 17:46:42,2017-01-07 11:53:01
572,628,"Executing this SQL: 

select * from trunk.str where str_name = 'abc'

Gives me this callstack (seems like an encoding issue):

Traceback (most recent call last):
  File ""C:\Programs\Python\Scripts\pgcli-script.py"", line 9, in <module>
    load_entry_point('pgcli==1.1.0', 'console_scripts', 'pgcli')()
  File ""c:\programs\python\lib\site-packages\click\core.py"", line 716, in __call__
    return self.main(*args, **kwargs)
  File ""c:\programs\python\lib\site-packages\click\core.py"", line 696, in main
    rv = self.invoke(ctx)
  File ""c:\programs\python\lib\site-packages\click\core.py"", line 889, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""c:\programs\python\lib\site-packages\click\core.py"", line 534, in invoke
    return callback(*args, **kwargs)
  File ""c:\programs\python\lib\site-packages\pgcli\main.py"", line 745, in cli
    pgcli.run_cli()
  File ""c:\programs\python\lib\site-packages\pgcli\main.py"", line 417, in run_cli
    click.echo_via_pager('\n'.join(output))
  File ""c:\programs\python\lib\site-packages\click\termui.py"", line 213, in echo_via_pager
    return pager(text + '\n', color)
  File ""c:\programs\python\lib\site-packages\click\_termui_impl.py"", line 287, in pager
    return _tempfilepager(text, 'more <', color)
  File ""c:\programs\python\lib\site-packages\click\_termui_impl.py"", line 357, in _tempfilepager
    f.write(text.encode(encoding))
  File ""c:\programs\python\lib\encodings\cp852.py"", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can't encode character '\u2026' in position 997: character maps to <undefined>","UnicodeEncodeError: 'charmap' codec can't encode character '\u2026' in position 997: character maps to <undefined>
@darikg Looks like a Windows issue to me. Would you be able to take a look (I don't run Windows)?
hi @ohYesOhNo what version of windows are you using? 32 or 64 bit? What console, cmd.exe or something else? And how did you install pgcli? (edit: also, python 2 or 3?)

If you're using cmd.exe, it might be worth trying instead something like [cmder](http://cmder.net/)
This is on Windows 10 64bit; I see the same error with either ConEmu (https://conemu.github.io/) or with vanilla cmd; the Python version is 3.5.2, and I think I installed pgcli through 'pip install pgcli'.


I don't have Windows 10 handy to test this, but on Windows 7 I've had problems with the default system pager `more.exe` which apparently tries to guess text encodings. Do you have a different pager handy? I have `less.exe` which came with Git for windows. For me that looks like this:

```
temp> \pager less
PAGER set to less.
temp> select generate_series(1,10), round(random());
+-------------------+---------+
|   generate_series |   round |
|-------------------+---------|
|                 1 |       1 |
|                 2 |       1 |
|                 3 |       0 |
|                 4 |       0 |
|                 5 |       0 |
|                 6 |       0 |
|                 7 |       1 |
|                 8 |       1 |
|                 9 |       1 |
|                10 |       0 |
+-------------------+---------+
SELECT 10
temp> \pager more
PAGER set to more.
temp> select generate_series(1,10), round(random());
?????????????????+?????????+?????????????????????++++++++??+++%??++++++++'?+++%??++++++++??+++%??++++++++??+++???++++++++`?+++???++++++++??+++???++++++++??+++???++++++++??+++???++++++++<?+++???+++++++?%?+++%??????????????????????
```

You can see that the `more` pager makes a bizarre encoding error. I wonder a similar thing is happening to you.
Here's what I did instead, because '\pager' doesn't do anything on my system:

1/ Created test.txt with '… … …' (these are the \u2026 characters that happened in the error)

2/ cat test.txt | less – prints '… … …' – ok

3/ cat test.txt | more – prints 'ÔÇŽ ÔÇŽ ÔÇŽ' – weird

(I also have the less/more that came with Git for Windows)
Nice, I think we're on the right track. You should be able to either set the system environmental variable `PAGER`  to `less`, or if you don't want to change the system default, add a `pager = less` line to the pgclirc file (`AppData\Local\dbcli\pgcli\config`). I think the `\pager` special command was added in pgcli 1.2 or 1.3.
I updated my pgcli to 1.3.1 and now I can do '\pager less' and it confirms that 'PAGER set to less'. However, strangely, the original issue still persists.
Ok, thanks for trying that. I can reproduce the problem on my end now:

```
C:\Users\dg> python -c ""import click; click.echo_via_pager('… … …')""

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""C:\Users\dg\Anaconda3\envs\pgcli3\lib\site-packages\click\termui.py"", line 203, in echo_via_pager
    return pager(text + '\n', color)
  File ""C:\Users\dg\Anaconda3\envs\pgcli3\lib\site-packages\click\_termui_impl.py"", line 262, in pager
    return _tempfilepager(text, os.environ['PAGER'], color)
  File ""C:\Users\dg\Anaconda3\envs\pgcli3\lib\site-packages\click\_termui_impl.py"", line 337, in _tempfilepager
    f.write(text.encode(encoding))
  File ""C:\Users\dg\Anaconda3\envs\pgcli3\lib\encodings\cp437.py"", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can't encode character '\u2026' in position 0: character maps to <undefined>
```

I'll try to poke around in click and see if I can reduce it further.
Actually it's got nothing to do with click at all:

```
python -c ""print('…')""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""C:\Users\dg\Anaconda3\envs\pgcli3\lib\encodings\cp437.py"", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_map)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u2026' in position 0: character maps to <undefined>
```
Can you try this minimal example on your machine?
This produces exactly the same output on my end as well.
Are you able to upgrade to Python 3.6? It fixed the issue for me. According to [this](http://stackoverflow.com/a/32176732), 3.6 changed how unicode is handled on windows. ~~To install pgcli, I used the psycopg2 binaries from [here](http://www.stickpeople.com/projects/python/win-psycopg/).~~ (edit: this is unnecessary, pip installs psycopg2 just fine) If it's not possible or preferable to upgrade, it looks like you can install [win-unicode-console](https://github.com/Drekin/win-unicode-console) and enable that globally in site-packages somehow.



I upgraded to Python 3.6 and here's the status:

- `python -c ""print('…')""` now correctly outputs '…'
- With '…' in test.txt, `cat test.txt | more` outputs '╗┐ÔÇŽ'
- With '…' in test.txt, `cat test.txt | less` correctly outputs '…'
- In pgcli with the default pager, `select '…'` outputs 'ÔÇŽ'
- In pgcli with `\pager less`, `select '…'` correctly outputs '…'

So the issue seem to be related to `more` rather than to `pgcli`. I switched my default pager in `pgcli`'s  `config` to `less` (which, conveniently, was already there and just needed to be uncommented).

Thanks a lot for guiding me through this.
Thanks for the summary!",2017-01-02 11:20:06,2017-01-09 15:52:58
573,627,Few months ago I added to pgspecial new feature: parametrized named queries. It would be nice to have this feature enabled in pgcli.,"update pgspecial to use parametrized named queries
Noted. I'll release new version of pgspecial for that.
@j-bennet Thanks!
pgspecial 1.7.0 is now released to pypi: https://github.com/dbcli/pgspecial/pull/27. There's been a few PR merges after pgcli 1.3.1, and I think pgcli will be ready for another release after #624 is merged.
Available in 1.5.0.",2016-12-19 18:04:06,2017-03-07 01:51:43
574,626,"This should suppress the startup message when supplied.

",Add a command line option for --less-chatty,2016-12-15 17:44:38,2017-03-11 23:13:08
575,624,"The basic idea is that we should be able to type a table alias and have it completed to the table name with just one key press. E.g. I type `SELECT * FROM ufg<tab>` and the result is `SELECT * FROM UserFunctionGroups UFG`. I expanded this idea a bit, so that I can type `select gdm<tab>` and get `select get_department_manager()`, or type `SELECT ... ORDER BY ttn<tab>` and get`SELECT ... ORDER BY TransferTypes.TransferTypeName`.

@darikg I added you as a reviewer (not sure how that feature works). It's quite possible that every line of code I touch in this PR is one you've reviewed before in some old PR of mine.","Search suggestions by initialism
Sure, I'll have a look later this week
Sorry about the delay (been busy vacationing ^^). 
You're correct that this should only affect the sorting. Everything else should be unaffected.
I've added code comments to clarify the questions you raised in your inline comments.
Happy new year! :fireworks: 
Yay! Time for a new release. I'll get that out as soon as I can.",2016-12-12 03:16:34,2017-01-09 15:54:32
576,623,"`copy (select 1) to stdout` works fine in psql while blocking in pgcli.

Version: 1.3.1","copy (select 1) to stdout blocks.
In pgcli, copy is implemented as a ""special command"" (part of [pgspecial](https://github.com/dbcli/pgspecial)). This will work:

```
\copy (select 1) to stdout
```
Actually there is a subtle difference between `\copy` and `copy`. `\copy` runs on the client filesystem whereas `copy` statement runs on the server. The difference is only apparent if you're running your server elsewhere and trying to connect from your local machine.",2016-12-08 02:16:45,
577,622,Related to #620.,"Increased minimum prompt_toolkit requirement to 1.0.9.
Rapid response. :) 👍 ",2016-12-07 18:23:20,2016-12-07 18:43:42
578,621,"This adds a red ""Failed transaction"" text to the toolbar if the the current transaction is doomed, and a green ""Transaction"" text if we're in a non-doomed transaction. 

I'd especially welcome any improvement on the choice of colours/styling, as I feel it's not quite what I wanted (I'd want the text to ""pop"" more), and I suspect we'll be stuck with whatever initial choice we make.","Add transaction status to toolbar
@koljonen How do you reproduce those status messages?
I like it. 😄 

Here's how I reproduced it: 

```
amjith@(none):expenses> begin
BEGIN
Time: 0.000s
amjith@(none):expenses> drop table joint_checking;
cannot drop table joint_checking because other objects depend on it
DETAIL:  view all_accounts depends on table joint_checking
HINT:  Use DROP ... CASCADE to drop the dependent objects too.

Time: 0.118s

```

<img width=""830"" alt=""1__0_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli____tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/20957494/092da714-bc05-11e6-8958-053e766d1649.png"">

This is what I see in the status bar.

I like this feature quite a bit. 

Regarding the colors if you'd like to get the colors to pop, try changing the background color to something other than black. You can even make it blinking (which I'm sure people will hate).
Goodness me, please no blinking. :)
Suggestion:

```
Token.Toolbar.Transaction.Valid = ""bg:#222222 #00ff5f bold""
Token.Toolbar.Transaction.Failed = ""bg:#222222 #ff005f bold""
```

Failed:

<img width=""152"" alt=""pgcli-transaction-failed"" src=""https://cloud.githubusercontent.com/assets/637013/20985870/2b1d8f6c-bc7b-11e6-8c50-cf34189e6269.png"">

Good:

<img width=""100"" alt=""pgcli-transaction"" src=""https://cloud.githubusercontent.com/assets/637013/20985871/2b20fd28-bc7b-11e6-9bb0-30bd15224b31.png"">

Thanks, @j-bennet! I knew someone would be better than me at finding good colours.
No problem, very nice PR! Verified that it's working, merging.",2016-12-07 04:01:08,2016-12-12 23:06:51
579,620,,"Display vi mode in the toolbar
This is quite useful.
When I switch to vi mode from emacs mode it crashes with the following error message: 

```
  File ""/Users/amjith/Dropbox/code/python/pgcli/pgcli/pgtoolbar.py"", line 42, in get_toolbar_tokens
    result.append((token.On, '[F4] Vi-mode (' + _get_vi_mode(cli) + ')'))
  File ""/Users/amjith/Dropbox/code/python/pgcli/pgcli/pgtoolbar.py"", line 10, in _get_vi_mode
    InputMode.INSERT_MULTIPLE: 'M',
AttributeError: type object 'InputMode' has no attribute 'INSERT_MULTIPLE'
```

I'm using prompt-toolkit==1.0.7


I think this needs an upgrade of prompt-toolkit. After I upgraded from 1.0.7 to 1.0.9, this works fine. 

Let's bump the minimum version number for prompt_toolkit in setup.py. 
Oh, good catch @amjith. Because I verified this PR with a new venv, it all worked for me. I'll bump it.",2016-12-07 02:09:06,2016-12-07 05:41:45
580,619,"@darikg Do you have time to look at yet another of my tweaks to the completion engine?

> Support for table-qualifying column suggestions
> 
> ... i.e. suggesting foo.fooid instead of just fooid
> Controlled using a config-file setting:
> **qualify_columns**: always/never/**if_more_than_one_table**.
> 
> To enable the proper sorting of qualified column suggestions, we
> introduce the concept of synonyms for suggestions
> (in `pgcompleter.find_matches`). They way synonyms work is that a
> number of synonyms may be provided for a suggestion sent to
> `find_matches`. If synonyms are provided, sorting is based on how
> well the best synonym matches the input, instead of only comparing
> the input to the suggestion text.
> In this case, the unqualified name acts as a synonym.
> I have a couple of other ideas of use cases where we can use synonyms
> to get better completions with less typing for the user, which I intend
> to explore later.","Table-qualifying column suggestions
Yes, will do!
This is great! Very ergonomic to use and the cleanup of the find_matches signature is a relief. I just left one minor suggestion inline",2016-12-05 02:21:30,2016-12-10 15:42:26
581,618,"When trying to use `\!` to execute a shell command, it results in an error. For example:

```
my_db> \! pwd
syntax error at or near ""\""
LINE 1: \! pwd
```","`\!` escape to execute shell command does not work
Yes. This would definitely be nice to have. Thanks for the request. 
Additionally, if the user executes a special command that we don't support, it would be good to handle that gracefully (""This special command is not supported in pgcli yet.""). What do you think @amjith?",2016-11-30 15:19:54,
582,617,"I'm using `pgcli` version: 1.3.1

This is the output using `pgcli`:
![1480184973](https://cloud.githubusercontent.com/assets/7363250/20642431/2cf60846-b3d4-11e6-9f0e-cf58c174da7b.png)

And the output for the same query, using `psql`:
![1480184890](https://cloud.githubusercontent.com/assets/7363250/20642430/289aee7e-b3d4-11e6-8b1d-ffa81e8990fd.png)

------------------------

This is a better test that anyone can replicate:

`pgcli`:
![1480185134](https://cloud.githubusercontent.com/assets/7363250/20642444/9a85ebe2-b3d4-11e6-8c2a-67ff6d04905b.png)

`psql`:
![1480185172](https://cloud.githubusercontent.com/assets/7363250/20642449/a245f20a-b3d4-11e6-8642-bb71107c0ec6.png)

------------------------

The behavior is new; at least 4 months ago it was working as intended.","Numeric output is not showed correctly
I didn't found any relevant commit that could change that behaivour, just this one: https://github.com/dbcli/pgcli/pull/591
Formatting in pgcli is done by `tabulate`. Pgcli keeps its own slightly tweaked version of tabulate [here](https://github.com/dbcli/pgcli/blob/master/pgcli/packages/tabulate.py). Tabulate tries to be smart about formatting numbers.

```
>>> print tabulate.tabulate([['x'], [1.00000000]], headers='firstrow')[0]
  x
---
  1
```

Thank you, @j-bennet, I'll give it a check.
I'm not sure what the good solution is here, have to think about it. In a lot of cases, ""simplifying"" numbers like tabulate does is a good thing, but not when you explicitly format it to certain precision.
Maybe putting an option in the configuration file to turn off _numeric_simplification_.
Also, it would be nice to have a bullet about this simplification in the [features section](https://github.com/dbcli/pgcli#features).
Just spend a couple of hours trying to figure out why values become rounded. This option (or at least explicitly explain this behaviour on README.md) could be helpful!
👍 thanks!
Hi, I got to this issue from the readme, where I'm guessing it shouldn't be mentioned anymore...
@shaib good catch - thanks!",2016-11-26 18:34:36,2017-06-26 17:37:26
583,616,"Either its my mistake or lack of docs. I installed with pip `pip install --user pgcli`. Added the `~/Python2.7/lib/python/site-packages` to `PATH`.

This is how I normally connect:
```
authentication-service git:master ❯ psql -U postgres -d authentication_service                                                                               psql (9.5.3)
Type ""help"" for help.

authentication_service=# \q
```

I did this: (but none worked)

```
authentication-service git:master ❯ pgcli postgres://postgres:5432/authentication_service
zsh: permission denied: pgcli

authentication-service git:master ❯ pgcli postgres://postgres::5432/authentication_service 
zsh: permission denied: pgcli

authentication-service git:master ❯ pgcli -U postgres -d authentication_service 
zsh: permission denied: pgcli
```","Can't connect to postgres database.
Looks like pgcli is not executable. 

Can you run ```ls -l `which pgcli` ```? That should tell you if the executable permissions are set correctly. If it is not, I'd recommend reinstalling pgcli. 

`pip uninstall pgcli && pip install -U pgcli`

It's been a while with this issue and no update. I'm going to close it. Feel free to reopen if you're still experiencing it @argentum47 .",2016-11-22 05:17:33,2017-03-07 05:33:00
584,615,"I find SQL keywords in all caps to be easier to read than when lowercased (even with pgcli's syntax coloring).  Would it be difficult to add an auto-capitalization feature, so that when `select ` is typed, it's replaced with `SELECT `?","Feature suggestion: Auto-capitalization of key words
There are config settings for that already:

https://github.com/dbcli/pgcli/blob/9584c82a354c5ef6fe94080447c5f506a3376c16/pgcli/pgclirc#L34-L45


Oh, wonderful! Thank you.
The config file is located at `~/.config/pgcli/config`
@amjith Thank you.
@j-bennet I've added the lines you referenced into my `~/.config/pgcli/config` file, but pgcli isn't auto-capping keywords.  What am I missing?
@danielyli This is a new feature that was added recently. Can you try upgrading? 

```
pip install -U pgcli
```
I'm using Homebrew to manage my packages, and it still has pgcli at 1.1.0.  Who normally updates the Homebrew formulas?  Can we ask her to update?
@amjith did it before, but I'll see if I can help out.
@j-bennet I took a look at the formula myself to see if I could update it.  I don't know the library dependencies well enough to do it with any assurance that I won't break anything.

Thank you!
For myself and others, instructions from @amjith (awesome as always) about how to create that formula:

> 
> Create a new virtualenv. Let's call it `poet`. 
> 
> Now install mycli inside the `poet` virtualenv. Then install this python package: https://pypi.python.org/pypi/homebrew-pypi-poet. 
> 
> Run: 
> 
> ```
> poet -r mycli > mycli_snippet
> ```
> 
> This will generate the necessary snippet for the formula and write it to the `mycli_snippet` file. 
> 
> Now fork the homebrew repo: https://github.com/Homebrew/homebrew-core and clone it locally. 
> 
> Edit the mycli formula: https://github.com/Homebrew/homebrew-core/blob/master/Formula/mycli.rb
> 
> Copy the resource stanzas in the formula from the generated snippet.
> 
> You'll see that mycli is listed in the generated snippet, you'll have to move that to these lines: https://github.com/Homebrew/homebrew-core/blob/master/Formula/mycli.rb#L4-L5
> 
> Then you're all done.
> 
> Make a commit. They have some suggestions about the commit message. It should be ""mycli 1.8.0"".
> 
> Then submit a PR. 
> 
Opened a PR in homebrew-core to update pgcli to 1.3.1:

https://github.com/Homebrew/homebrew-core/pull/7163
Homebrew PR was merged, pgcli 1.3.1 now available.
@j-bennet Thank you!!

I'm using v1.3.1 now with the `keyword_casing = upper` setting, but that only affects the casing of tab-completed keywords, not regularly typed words.  I must not have been clear from the start; my apologies.  Let me explain what I originally suggested as a feature:

In the pgcli prompt, it would be great to have pgcli automatically correct the casing of keywords, without having to use the tab completion menu.  For example, I would type `s` `e` `l` `e` `c` `t`, all in lowercase, and when I hit `(space)`, pgcli recognizes that word as a keyword and capitalizes it.

Currently, to do something like this, I'd have to watch the tab-completion menu, hit `(tab)` to complete, and then `(space)`.
Hmm, I see. Not sure how feasible this is, but reopened the issue to look again later.
> For example, I would type s e l e c t, all in lowercase, and when I hit (space), pgcli recognizes that word as a keyword and capitalizes it.

@danielyli That is a dangerous precedent that we'd like to avoid. If a user chooses an entry from the menu by using the up/down arrow or tab key then it is a choice made by the user. But if we go in and modify what the user has typed in, it can lead to undesired behavior. For example, I've seen table named `session` which is a reserved keyword in postgres. If we took this approach of auto-capitalization of keywords then anytime the user types `session` we'll replace it with `SESSION`. This is just one example. 

In general we'd like to avoid changing the query typed by the user. So the closest solution to your request is what we have implemented already.
@amjith I thought pgcli knows the context of words typed on the command line?  For example, if I create a table named `session`, I get the following in the auto-complete menu when typing a SELECT statement:

    > select * from session|     <--- the pipe at the end indicates where the cursor is
                            ""session""                                 table
                            session_user()                            function
                            pg_replication_origin_session_is_setup()  function
                            pg_replication_origin_session_progress()  function
                            pg_replication_origin_session_reset()     function
                            pg_replication_origin_session_setup()     function
                            pg_stat_reset_single_function_counters()  function
                            pg_stat_reset_single_table_counters()     function

None of the suggestions are of the keyword `SESSION`, and the only correct suggestion, `""session""`, is correctly identified as a table.
It does know the context for the most part. It works great for nearly 90% of inputs (probably more). But writing auto-completers is hard since we're working with partial statements. So the syntax is not fully formed which makes it hard to compensate for parser shortcomings. I guess what I'm saying is when the sql statement gets complicated it can cause unexpected behavior. 

So we can't rely on the parser to do a good job in discerning a table name vs a keyword. This becomes especially relevant when you start writing nested SQL such as 

```
WITH RECURSIVE search_graph(id, link, data, depth) AS (
        SELECT g.id, g.link, g.data, 1
        FROM graph g
      UNION ALL
        SELECT g.id, g.link, g.data, sg.depth + 1
        FROM graph g, search_graph sg
        WHERE g.id = sg.link
)
SELECT * FROM search_graph;
```

Obviously I'm giving you a worst case scenario but my attempt is to demonstrate why it is undesirable to rewrite a query that a user has typed in with insufficient context.
I think @amjith is right. Currently, it's only pgcli completer that has to know where it is in the query and make intelligent guesses. But even so, the completer leaves the final choice to the user. It can't be 100% sure what user wants at this point in query. The formatter won't have this opportunity for the user to go back and correct the formatting. There's less room to be unsure. We're pretty much certain to have some of the case changing done wrong, and bugs filed.
That makes sense.  I can see how such a feature would hurt more than help.  @amjith, thanks for the comprehensive explanation!",2016-11-21 22:42:00,2017-03-07 05:20:52
585,614,"We were suggesting all CTE columns regardless of whether the CTE in
question was included in the FROM clause.

This also makes populate_scoped_columns output `TableRefence` namedtuples for CTEs, like it does for tables/views/functions. Previously it would emit strings for CTEs.","Fix scoping for columns from CTEs
@koljonen what's the benefit of returning tuples vs strings for CTEs?

Mostly it's that I think it's confusing for a function's return type to vary like that. I actually found the scoping problem while investigating a crash caused by getting a string where I expected a `TableReference` (while developing something unrelated to CTEs). 

👍 
Merging.",2016-11-20 22:14:13,2016-11-20 23:31:32
586,613,Anyone feel like merging this tiny fix?,"Fix crash after `with`
Looks good to me.
",2016-11-20 20:52:42,2016-11-20 21:13:07
587,612,Related to #611.,"Added --prompt option.
Reviewer: @darikg. 
",2016-11-15 01:20:00,2016-11-15 16:12:19
588,611,mycli supports `-R` or `--prompt` were pgcli does not.,"No way to customize prompt
That would be a nice feature to add. In the meantime, you can customize prompt in pgcli config file (`~/.config/pgcli/config`).

@j-bennet That PR is awesome! Thank you!
",2016-11-10 22:52:47,2016-11-20 07:26:08
589,610,"Is it possible to use an editor other than vim as the external editor, the one which is opened with the \e command. I would like to use NeoVim without having to mess with Vim which is installed on my system, the command which I use to launch NeoVim is ""nvim""","Using an external editor other than Vim
The default editor is controlled by the `$EDITOR` variable in your shell. So if you set you`$EDITOR` to `nvim` then the `\e` will respect that setting and launch the appropriate editor for you.

Thank you
",2016-11-10 16:03:28,2016-11-10 18:21:57
590,608,"Python 3 forbids comparisons between different types: use a tuple
containing a single 0 (zero) as the priority for path matches so that it
can be compared with those generated by the workhorse method find_matches().","Fix issue #603
Looks good. Merging. And 👍  for the unit test.
",2016-10-31 17:39:35,2016-11-01 22:29:05
591,607,"Reviewer: @darikg

Can you review and merge? I'll push out a new release as soon as this is merged. 
","Update changelog for version 1.3.1
looks good to me
",2016-10-26 19:39:02,2016-10-26 20:21:36
592,606,"See #605 
","Bump sqlparse to 0.2.2
Looks like I released a broken version to PyPI 😢. 

Thanks for the quick fix for the broken build @darikg. It works great. 🚠 
",2016-10-26 15:18:04,2016-10-26 19:36:31
593,605,"Recently released version 0.2.2 of sqlparse [changed](https://github.com/andialbrecht/sqlparse/blob/0.2.2/CHANGELOG#L19) two methods of the `Token` class into properties, in particular `is_group()`, used [here](https://github.com/dbcli/pgcli/blob/master/pgcli/packages/parseutils/tables.py#L17), so the following happens:

```
user@testdb> select * from Exception in thread Thread-14:
Traceback (most recent call last):
  File "".../python3.6/threading.py"", line 916, in _bootstrap_inner
    self.run()
  File "".../python3.6/threading.py"", line 864, in run
    self._target(*self._args, **self._kwargs)
  File ""/tmp/e/lib/python3.6/site-packages/prompt_toolkit/interface.py"", line 841, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File "".../pgcli/pgcli/pgcompleter.py"", line 358, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File "".../pgcli/pgcli/packages/sqlcompletion.py"", line 152, in suggest_type
    return suggest_based_on_last_token(stmt.last_token, stmt)
  File "".../pgcli/pgcli/packages/sqlcompletion.py"", line 366, in suggest_based_on_last_token
    tables = extract_tables(stmt.text_before_cursor)
  File "".../pgcli/pgcli/packages/parseutils/tables.py"", line 147, in extract_tables
    return tuple(i for i in identifiers if i.name)
  File "".../pgcli/pgcli/packages/parseutils/tables.py"", line 147, in <genexpr>
    return tuple(i for i in identifiers if i.name)
  File "".../pgcli/pgcli/packages/parseutils/tables.py"", line 96, in extract_table_identifiers
    for item in token_stream:
  File "".../pgcli/pgcli/packages/parseutils/tables.py"", line 34, in extract_from_part
    if is_subselect(item):
  File "".../pgcli/pgcli/packages/parseutils/tables.py"", line 17, in is_subselect
    if not parsed.is_group():
TypeError: 'bool' object is not callable
```
","Completion raises an error with sqlparse 0.2.2
Thanks for the heads up. I can fix that but it looks like a couple more things broke... Looking into it now

Fixed in 1.3.1.",2016-10-26 12:56:13,2017-01-12 06:27:21
594,604,"One thing that I miss from the official PSQL client is that, if I am mid-query and I forget the column names for the current table, (e.g. right after typing **WHERE**,) I can double-tab TAB to see all possibilities listed out.

Unfortunately, the pgcli autocomplete popup lists not only column names, but function names and keywords as well.  On a production database with hundreds of functions defined, autocomplete is basically worthless until I have typed the first 2 or 3 characters of what I want (which of course is difficult if I don't remember the column names in the first place.)

Right now I handle this by backing out of my current query, running `\d <table name>`, and then typing my query again, but this is quite clumsy.  I think a hotkey to either

a) toggle some sort of ""column-only""  autocomplete mode, or
b) simply print out available columns

would be very helpful in terms of usability.

(Technically this should be context sensitive, e.g. it should use table names instead of column names after a **FROM**, but column names are the only case I personally care about.  :smile: )
","Option to see all column names during autocomplete
@Gollum999 Can you tell me what version of pgcli you're using? 

You should see all the columns listed before we move on to listing functions. I know this was temporarily broken in version 1.0.0 but we've fixed it in the latest version. Can you try the newer version and let us know if the problem still persists? 

You can upgrade using `pip install -U pgcli`

@amjith I am currently on version 1.1.0.  I'm having SSL issues while trying to upgrade; I'll let you know when I get it working and am able to test.

I like the idea to list columns before functions; that sounds much better than my suggestion.

Got it working.  Yes, this is fixed in version 1.2.0.

Thanks for the help!  Really excited to see that this is already available.  I'll close this issue.
",2016-10-24 14:14:34,2016-10-24 15:38:28
595,603,"With Python 3.6b2, I got the following immediately after entering `\i` followed by a space:

```
postgres@mydb> \i Exception in thread Thread-4:                            
Traceback (most recent call last):                                              
  File ""/usr/local/lib/python3.6/threading.py"", line 916, in _bootstrap_inner   
    self.run()                                                                  
  File ""/usr/local/lib/python3.6/threading.py"", line 864, in run                
    self._target(*self._args, **self._kwargs)                                   
  File ""/usr/local/lib/python3.6/site-packages/prompt_toolkit/interface.py"", line 841, in run
    completions = list(buffer.completer.get_completions(document, complete_event))                                                                                                                                 
  File ""/usr/local/lib/python3.6/site-packages/pgcli/pgcompleter.py"", line 371, in get_completions
    reverse=True)                                                               
TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'     
```

I cannot investigate further right now, but I will try to narrow the case.
","\i raises a TypeError
Hmm, I can't even get this far. For me, running in 3.6 breaks when importing sqlparse.

```
Traceback (most recent call last):
  File ""/Users/irina/.venvs/pgcli36/bin/pgcli"", line 11, in <module>
    load_entry_point('pgcli', 'console_scripts', 'pgcli')()
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 564, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 2608, in load_entry_point
    return ep.load()
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 2268, in load
    return self.resolve()
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/pkg_resources/__init__.py"", line 2274, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/Users/irina/src/pgcli/pgcli/main.py"", line 38, in <module>
    from pgspecial.main import (PGSpecial, NO_QUERY, content_exceeds_width)
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/pgspecial/__init__.py"", line 12, in <module>
    from . import iocommands
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/pgspecial/iocommands.py"", line 7, in <module>
    import sqlparse
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/sqlparse/__init__.py"", line 15, in <module>
    from sqlparse import filters
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/sqlparse/filters/__init__.py"", line 16, in <module>
    from sqlparse.filters.tokens import KeywordCaseFilter
  File ""/Users/irina/.venvs/pgcli36/lib/python3.6/site-packages/sqlparse/filters/tokens.py"", line 26, in <module>
    class KeywordCaseFilter(_CaseFilter):
TypeError: '_TokenType' object is not callable
```

What version of sqlparse do you have installed @lelit ? (so I can maybe move past sqlparse and look at your issue).

I'm using Python 3.6b2 and sqlparse 0.2.1.

sqlparse 0.2.2, just released, requires current tip version of Python, due to https://github.com/andialbrecht/sqlparse/issues/286, the fix of which has been reverted in latest sqlparse.

Thank you for looking!

Finally got through that hurdle. Surprisingly, `\i` works fine:

```
(pgcli36b2) --- src/pgcli ‹master*?› » pgcli boo
Version: 1.1.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
boo> \i ~/data/basic.sql
+------+--------+
|   id | name   |
|------+--------|
|    1 | John   |
|    2 | Mary   |
|    3 | Suzie  |
|    4 | Mike   |
+------+--------+
SELECT 4
Time: 0.002s
```

Here is how my `pip freeze` looks. See if anything is different with yours:

```
(pgcli36b2) --- src/pgcli ‹master*?› » pip freeze
click==6.6
configobj==5.0.6
humanize==0.5.1
-e git+git@github.com:dbcli/pgcli.git@10a4f9c46ab9dc07dac5b2d58b9465f88625f095#egg=pgcli
pgspecial==1.6.0
prompt-toolkit==1.0.8
psycopg2==2.6.2
Pygments==2.1.3
setproctitle==1.1.10
six==1.10.0
sqlparse==0.2.2
wcwidth==0.1.7
```

Very strange indeed! I just created a new virtualenv using exactly your pinnings, and a space after `\i` immediately triggers the problem.
I will try to investigate further on my part and let you know.
BTW, do you know if there is some trick to debug the tool with `pdb`? When entering an interactive debug session, there seems to be a fight between the `pgcli` input routines and `pdb` ones, contending the same stdin stream...

Inserting a `print(matches)` when the exception happens in pgcompleter.py, I see the following:

```
[Match(completion=Completion(text='bin', start_position=0, display='bin/'), priority=None), Match(completion=Completion(text='include', start_position=0, display='include/'), priority=None), Match]
```

so effectively the `priority` is `None`, and that's what triggers the problem in the expression `sorted(matches, key=operator.attrgetter('priority'), reverse=True)`

@lelit That's something! For debugging, I usually do it on a checkout of pgcli code. Then inserting `import ipdb; ipdb.set_trace()` works just fine. If you feel like exploring it by yourself, PRs are always welcome! To me, this looks like a culprit:

https://github.com/dbcli/pgcli/blob/master/pgcli/pgcompleter.py#L640

it actually yields matches with `None`. I have no idea how this does not break things for me.

For the record, here is the difference between python 2.7 and 3.6 when sorting `None`.

2.7:

```
Python 2.7.12 (default, Oct 20 2016, 10:17:35)
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> sorted([None, None, None])
[None, None, None]
```

3.6:

```
Python 3.6.0b2 (default, Oct 30 2016, 15:05:01)
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> sorted([None, None, None])
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'
```

Yes, that seems the culprit. Replacing that line with `yield Match(completion=c, priority=0)` fixes the issue.
The [previous version](https://github.com/dbcli/pgcli/commit/f83044f2f0f30e872471c63eca4844511ca7ae93#diff-36fcb873925169e72e8c5ca4e8a8a581L385) of that code used the underlying `find_matches()` to actually build the result, and that always (not checked all the code paths, but seems so) inserts a _not_ `None` priority.

Also [this line](https://github.com/dbcli/pgcli/blob/master/pgcli/pgcompleter.py#L412) is suspicious: in general, under Python 3 you cannot compare different types, so even that case may generate the error

```
Python 3.6.0b2+ (default, Oct 31 2016, 08:51:43) 
[GCC 6.2.0 20161027] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> sorted([1, (1,1,1)])
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: '<' not supported between instances of 'tuple' and 'int'
```

Yes, I think we should always make priority a tuple. In this case, `(0,)`.

Ok, working on a PR right now.

🍫 

https://github.com/dbcli/pgcli/issues/603 was merged.

Hi,

I'm getting this same error using pgcli 1.3.1 on python 3.4.3. immediately after typing `\i ` I get:

```
\i Exception in thread Thread-23:
Traceback (most recent call last):                                                                       
  File ""/usr/local/lib/python3.4/threading.py"", line 920, in _bootstrap_inner                            
    self.run()                                                                                           
  File ""/usr/local/lib/python3.4/threading.py"", line 868, in run                                         
    self._target(*self._args, **self._kwargs)                                                            
  File ""/usr/local/lib/python3.4/site-packages/prompt_toolkit/interface.py"", line 840, in run            
    completions = list(buffer.completer.get_completions(document, complete_event))                       
  File ""/usr/local/lib/python3.4/site-packages/pgcli/pgcompleter.py"", line 371, in get_completions       
    reverse=True)                                                                                        
TypeError: unorderable types: NoneType() < NoneType()
```

Was this fix officially released, or would I need to install from the github master?

Thanks,

Tom
There was no release after that merge. I'm planning a new release after https://github.com/dbcli/pgcli/pull/624 is merged, but for now, install from master.
You can install from master using this command: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```
Fixed in 1.4.0.",2016-10-22 08:23:44,2017-01-12 06:24:16
596,602,"@dbcli/pgcli-core Can you please approve? 
","Changelog and authors update for 1.3.0
👍 

Thanks @darikg. I'll release a new version soon. 
",2016-10-22 03:53:11,2016-10-26 14:46:18
597,601,"@dbcli/pgcli-core 

I'd like to propose that we remove support for Python 2.6. This PR removes Python 2.6 from travis test runs. 

Please let me know if there are any objections. 

Reasons:
- When Python 2.6 first came out George W. Bush was the president of United States. (Let that sink in).
- The official Python 2.6 support ended in Oct 2013. (Three years ago).
- The real reason is I don't have the time to maintain support for it anymore. 
","Remove python 2.6 from travis.
:+1: I think its time!
As a plus, in future releases we can remove any hacky work-arounds specifically for 2.6.

Agreed. It's also a mild bottleneck for PRs

Yes. I agree that we should start removing hacks to support Python 2.6. 

👍 

Thanks for the input everyone. Merging.
",2016-10-20 03:53:26,2016-10-21 01:36:37
598,600,"When I leave pgcli running for a few hours, but without any actions/queries, it disconnect silently from server and cannot connect again. I observed it only after putting laptop in sleep mode, in other case I didn't leave computer not used for so long time :)

After wake up, I go to pgcli, and there:

> eden> table brand_smtp_config
> could not receive data from server: Operation timed out
> 
> eden> table brand_smtp_config
> connection already closed
> eden> \?
> connection already closed
> eden> \c eden
> connection already closed
> eden>

I must exit from pgcli and run it again, then everything works OK.
","""connection already closed""
This is now fixed in pgcli 1.5. Can you upgrade and try again? 

```
pip install -U pgcli
```
@amjith verified, working fine, thanks :)",2016-10-18 06:21:41,2017-03-07 02:28:44
599,599,,"Fix typo in the decimal representation example
Thanks :8ball: 
",2016-10-17 18:29:21,2016-10-17 23:29:24
600,598,"See #597 
","Darikg/unrecognized keywords
👍 
",2016-10-17 17:50:05,2016-10-20 03:46:42
601,597,"I've been working in a database that uses the word 'session' as a column name everywhere. It's pretty annoying that pgcli wants to escape it as `""session""` in suggestions, and even more annoying that suggestions will break if it's used without being escaped earlier. E.g. 
`select * from sessions where session = 1 and`
 fails to suggest columns as it should. According to [the postgresql docs](https://www.postgresql.org/docs/9.4/static/sql-keywords-appendix.html) session is a non-reserved keyword, so this seems non-ideal. I'm not sure how best to address it though.

There's two pain points to address:
1. sqlparse lists `SESSION` as a keyword [here](https://github.com/andialbrecht/sqlparse/blob/1e4a4775d1f1c82cecc297938e9b29287c52014d/sqlparse/keywords.py#L492)
   - I think this could be handled by introducing a new sqlparse token subclass `Token.Keyword.Nonreserved`
   - Then `pgcli.packages.parseutils.utils.find_prev_keyword` would skip over non-reserved keywords
2. We list `SESSION` in [pgliterals.json](https://github.com/dbcli/pgcli/blob/1b6fee1f6e5ad1686f622758d6cecf2996dd3050/pgcli/packages/pgliterals/pgliterals.json#L117)
   - Add a field to pgclirc that points to a non-default pgliterals.json file where the user can remove keywords at will?

Any better ideas?
","better handling of non-reserved keywords?
Ahh, I think the solution is much less complicated than I was making it out to be here

Looks like this was fixed a while ago.",2016-10-17 15:28:37,2017-03-07 05:14:16
602,596,"All behaviors and tests pass, with Python 3.6b2. I did not exercise them on previous versions, but I can surely do it, if needed.
","Fix for issue #595
The failures with Python 2.6 do not seem related with my change. Please let me know if I should investigate further on them.

Yes the Python 2.6 failure is expected. I need to either fix that or ignore that test or drop 2.6 support. 

I just haven't found the time this past few weeks to do one of those. 

Thank you for taking the time to dig in and fix the issue. I appreciate it. It makes sense that the raw string qualifiers are enforced in Python 3.6 since `f-strings` are being introduced. 

🍨 
",2016-10-15 11:34:43,2016-10-16 17:41:36
603,595,"Hi all,

this is just an alert, because I think the culprit is Python, not pgcli. Nevertheless, digging into the problem I found what seems an _innocent_ glitch, read below.

I quote here a [message](https://mail.python.org/pipermail/python-list/2016-October/715462.html) I just sent to the Python user list:

> Hi all,
> 
> trying out pgcli with Python 3.6.0b2 I got an error related to what seem a
> different behaviour, or even a bug, of re.sub().
> 
> The original intent is to replace spaces within a string with the regular expression
> \s+ (see https://github.com/dbcli/pgcli/blob/master/pgcli/packages/prioritization.py#L11,
> ignore the fact that the re.sub() call seem underoptimal).
> 
> With Python 3.5.2 is straightforward:
> 
>   $ python3.5
>   Python 3.5.2+ (default, Sep 22 2016, 12:18:14) 
>   [GCC 6.2.0 20160927] on linux
>   Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
> 
> > > > import re
> > > > re.sub(r'\s+', r'\s+', 'foo bar')
> > > >   'foo\s+bar'
> 
> While Python 3.6.0b2 gives:
> 
>   $ python3.6
>   Python 3.6.0b2+ (default, Oct 11 2016, 08:30:05) 
>   [GCC 6.2.0 20160927] on linux
>   Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
> 
> > > > import re
> > > > re.sub(r'\s+', r'\s+', 'foo bar')
> > > >   Traceback (most recent call last):
> > > >     File ""/usr/local/python3.6/lib/python3.6/sre_parse.py"", line 945, in parse_template
> > > >       this = chr(ESCAPES[this][1])
> > > >   KeyError: '\s'
> 
>   During handling of the above exception, another exception occurred:
> 
>   Traceback (most recent call last):
>     File ""<stdin>"", line 1, in <module>
>     File ""/usr/local/python3.6/lib/python3.6/re.py"", line 191, in sub
>       return _compile(pattern, flags).sub(repl, string, count)
>     File ""/usr/local/python3.6/lib/python3.6/re.py"", line 326, in _subx
>       template = _compile_repl(template, pattern)
>     File ""/usr/local/python3.6/lib/python3.6/re.py"", line 317, in _compile_repl
>       return sre_parse.parse_template(repl, pattern)
>     File ""/usr/local/python3.6/lib/python3.6/sre_parse.py"", line 948, in parse_template
>       raise s.error('bad escape %s' % this, len(this))
>   sre_constants.error: bad escape \s at position 0
> 
> Accordingly to the documentation (https://docs.python.org/3.6/library/re.html#re.sub) 
> “unknown escapes [in the repl argument] such as & are left alone”.
> 
> Am I missing something, or is this a regression?

That said, I think the mentioned `_compile_regex()` should call the `sub()` method on the already compiled pattern `white_space_regex`, instead of passing it to the `re.sub()` function: in other words, the line:

```
  pattern = '\\b' + re.sub(white_space_regex, '\\s+', keyword) + '\\b'
```

could/should be written as

```
  pattern = '\\b' + white_space_regex.sub('\\s+', keyword) + '\\b'
```
","Problem with Python 3.6.0b2
The mentioned thread clarified the issue: Python 3.6+ makes a shift toward rejecting _unknown_ escaped chars.

The simplest fix is to use a _raw string_ for the replacement above, containing **two** backslashes. The line should then be something like

```
pattern = '\\b' + re.sub(white_space_regex, r'\\s+', keyword) + '\\b'
```

I tested it on Python 2.7, 3.5 and 3.6.0b2 and verified that it works flawlessly:

```
$ python2.7
Python 2.7.12+ (default, Sep  1 2016, 20:27:38) 
[GCC 6.2.0 20160927] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import re
>>> keyword_name = 'create database'
>>> kn_regexp = re.sub(r'\s+', r'\\s+', keyword_name)
>>> re.match(kn_regexp, keyword_name)
<_sre.SRE_Match object at 0x7fe892c57648>
>>> re.match(kn_regexp, 'create    database')
<_sre.SRE_Match object at 0x7fe892c576b0>

$ python3.5
Python 3.5.2+ (default, Sep 22 2016, 12:18:14) 
[GCC 6.2.0 20160927] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import re
>>> keyword_name = 'create database'
>>> kn_regexp = re.sub(r'\s+', r'\\s+', keyword_name)
>>> re.match(kn_regexp, keyword_name)
<_sre.SRE_Match object; span=(0, 15), match='create database'>
>>> re.match(kn_regexp, 'create    database')
<_sre.SRE_Match object; span=(0, 18), match='create    database'>

$ python3.6
Python 3.6.0b2+ (default, Oct 11 2016, 08:30:05) 
[GCC 6.2.0 20160927] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import re
>>> keyword_name = 'create database'
>>> kn_regexp = re.sub(r'\s+', r'\\s+', keyword_name)
>>> re.match(kn_regexp, keyword_name)
<_sre.SRE_Match object; span=(0, 15), match='create database'>
>>> re.match(kn_regexp, 'create    database')
<_sre.SRE_Match object; span=(0, 18), match='create    database'>
```

Awesome! Thank you for following up on this and staying on the forefront of the bleeding edge. 

Would you mind opening a PR with the changes you recommended? 

Amjith Ramanujam notifications@github.com writes:

> Would you mind opening a PR with the changes you recommended? 

Yes, sure!
",2016-10-14 15:59:08,2016-10-16 17:41:38
604,594,"When I cannot run pgcli.
When I use command `pgclic --help`. It shows me that
**failed to create process**
","Cannot run pgcli on windows 10
@cmoon2000 Are you still having problems? If so, it would help to know more about your environment (what terminal application you're using, how pgcli was installed, are you running Bash for Windows, etc.)",2016-10-11 16:34:09,2019-05-05 15:23:47
605,593,"```
tomb@(none):sqlpractice> SELECT name, salary from employees
```

![badhighlight](https://cloud.githubusercontent.com/assets/458879/19023713/0c9547e2-88c3-11e6-8db9-fdc320886191.png)

For me `name` is highlighted, despite it appearing here not as a keyword but as a column name. Is this something worth fixing? I don't know sql very well, is it standard not to use keywords like `name` as column names?
","Select bad syntax highlighting
The syntax highlighting provided by Pygments uses a regex based matching algorithm. It doesn't try to parse the structure of the sql to find the appropriate highlighting. 

I haven't dug into changing this behavior.

name is a postgresql function/type. Hence it gets highlighted. I don't think this is an issue.
I agree with @blandonfrank here.",2016-10-02 21:11:18,2017-03-07 05:06:23
606,592,"It'd be great if `COPY <tablename> from <filename>` had filename completion! This is mentioned in #146 but that issue is closed.

I'd be happy to take a look!
","\copy filename completion
I guess the same thing applies to `\copy`

Please feel free to take it on. 

Here's a pointer to how we did the filename completion for the `\i` command. 

https://github.com/dbcli/pgcli/blob/master/pgcli/packages/sqlcompletion.py#L134

Returning the completion type as `Path` will use the appropriate completer which are defined here: https://github.com/dbcli/pgcli/blob/master/pgcli/pgcompleter.py#L683

Some thoughts now that I understand this better
- This only makes sense for `\copy`, not `COPY`, unless pgcli can ask the server about paths that exist there.
- `\copy` allows queries in lieu of `table [ ( column_list ) ]`, but I'll ignore that for now.
- The simplest thing to do would be to just add path completion for `\copy` at all times like `\i`, but it would make sense to hook up table/column completion for before the `to`/`from` and options as well.

You're right. We can't do filename completion for `COPY` since that is supposed to run on the server and not on the client.

With respect to `\copy` it seems like the completion is always suggestion keywords. For example when I type `\copy SELECT * FROM` it is not recommending tables. 

Your suggestion was to always use path file completion after the `\copy` prefix. My recommendation is, when we see `\copy` we strip out the prefix and let the completion engine take over the user input and suggest the right things based on context. 

There is precedent for this in the form of named queries. https://github.com/dbcli/pgcli/blob/master/pgcli/packages/sqlcompletion.py#L158

Named query is not a very well documented feature, but here's the summary: 

```
Named Queries are a way to save frequently used queries
with a short name. Think of them as favorites.
Examples:

    # Save a new named query.
    > \ns simple select * from abc where a is not Null;

    # List all named queries.
    > \n
    +--------+----------------------------------------+
    | Name   | Query                                  |
    |--------+----------------------------------------|
    | simple | SELECT * FROM xyzb where a is not null |
    +--------+----------------------------------------+

    # Run a named query.
    > \n simple
    +-----+
    |   a |
    |-----|
    |  50 |
    +-----+

    # Delete a named query.
    > \nd simple
    simple: Deleted

Time: 0.000s
```

But this doesn't add file path completion, that's when we enhance the completion engine to add support for path completion based on the previous keyword such as `TO`.

Thanks so much for the guidance! This approach looks good for the case of copying a query to a file. As a reminder to myself, in addition to subqueries we'll want just table names with columns in parens.
",2016-10-02 20:11:32,
607,591,"issue #590
","Minimal fix for #590
This probably isn't the correct thing to do -- numeric formatting shouldn't apply to string types, even if they look like numbers. But it looks like tabulate is happy to treat strings as numbers if they look like numbers

I thought about definition of value type. Is it right to define '1234' like int? Could be better to make some fixes in _column_type method? But @darikg  decision will work to.

@foxyterkel agreed. I updated the PR

Thanks @darikg!

🔨 
",2016-10-02 17:50:36,2016-10-04 03:42:49
608,590,"This seems to be an issue with the new comma formatting cc @foxyterkel 

```
dg@z.db:zdb_110z> select '123'
Unknown format code 'd' for object of type 'unicode'
```
","Formatting error with string-typed numbers
@amjith isn't it fixed now? seems the fix got merged.
You're right - this is not a problem anymore. Closing.",2016-10-02 17:42:51,2017-07-19 22:46:56
609,589,,"fixes #588 invalid setting for redshift
I wonder if amazon would be willing to donate resources for the travis build to run with redshift.

Closed and reopend to trigger flaky travis build again.

I will try and review this later today. Sorry things are a little bit tight
on the homefront.

On Sep 21, 2016 10:38 AM, ""mbarkhau"" notifications@github.com wrote:

> Closed and reopend to trigger flaky travis build again.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/dbcli/pgcli/pull/589#issuecomment-248686418, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AADAbPxuMZ8UkKhLOLMNxfuWEukxFlZQks5qsWuWgaJpZM4KDESj
> .

I've tested this on a non-redshift db and it works fine. 

Thanks for the PR. 🚀 
",2016-09-21 17:25:04,2016-09-26 04:35:20
610,588,"Introduced by https://github.com/dbcli/pgcli/commit/3f310f5070d45852afda29ed50ba656ff1cb7465#diff-8859be39408e4fbeea82b923784d9e65R163

```
> select current_setting('is_superuser')::bool
cannot cast type text to boolean
```

Leaving away the cast

```
> select current_setting('is_superuser')
must be superuser to examine ""is_superuser""
```

Which I'm guessing means I'm not a superuser :-)
","pgcli v1.2.0 not working for redshift
I'll see if I can get a fix working.

I'm also seeing this issue when trying to connect to redshift on pgcli v1.20

`cannot cast type text to boolean`

Yes the version on pypi is still broken, but you can install directly from the repository 

```
pip install ""https://github.com/dbcli/pgcli/archive/master.zip""
```
",2016-09-21 17:08:03,2016-09-26 04:35:21
611,587,"Most of the complaints we receive about the pgcli prompt is that it is too big when people are using it with AWS hosts. 

It would be nice to automatically switch to database name only when the prompt size is bigger than a certain threshold. Say 30 chars (this will need a bit of experimentation to get right).
","Switch the shorted prompt when prompt length is too long
Fixed in 1.5.0.",2016-09-21 14:07:57,2017-03-07 01:43:57
612,586,"Reviewer: @darikg 

Addresses: #585 
","Set sqlparse version dependency to >0.2.0, <0.3.0.",2016-09-21 03:58:44,2016-09-21 12:27:25
613,585,"Today there was an update to sqlparse to 0.20.1 and pgcli failed to start after update since it expects exact version, not at least version.

Can the dependencies be loosened a bit so there is minimal version needed instead of exact version, otherwise pgcli is going to be broken a lot when dependencies are updated independently of pgcli.
","pgcli depnds on exact version of sqlparse
Hi Mario, sorry about the inconvenience. The reason for being strict about the dependency is that we used to have a relaxed dependency on sqlparse and when 0.2.0 was release it broke everything. Since we got burned by that we've been cautious about having relaxed dependencies. Is this restricting you in some way? 

Thank you for the reply. I normally update all outdated packages periodically, and normally nothing breaks because of dependencies. pgcli is the first package I encountered that did break out of 211 packages I have installed. 

It's not a big deal I can work around this, it's just that it was a bit unexpected. 

But for pgcli it really comes down to figuring out which is more likely and desirable scenario:
1. every sqlparse update will introduce non-backward compatible changes and break pgcli
2. every sqlparse update will break pgcli, regardless if it is backward compatible or not

The outcome of 2 is that pgcli is broken every time sqlparse is updated. Outcome of 1. is that pgcli is broken only when sqlparse introduces non-backward compatible changes. One would expect this to happen way less often?

While sqlparse is still in major version 0, we could at least pin the major and minor version number, and allow the bugfix version to vary. I.e. `0.2.0 <= sqlparse < 0.3` or however you specify that in setup.py

@darikg You're right. Watch for an incoming PR.
",2016-09-19 22:00:01,2017-05-28 22:45:25
614,584,"if I run pgcli with a database url string such as

```
~ $ pgcli postgres://uk96oqkdlqoiu:********@ec2-52-208-73-133.eu-west-1.compute.amazonaws.com:5432/d1vh7hb3u2qrhp
Version: 1.2.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
uk96oqkdlqoiu@ec2-52-208-73-133.eu-west-1.compute.amazonaws.com:d1vh7hb3u2qrhp>
```

the prompt is super long and has the full database url whereas I expect it be just the db name

```
d1vh7hb3u2qrhp>
```
","prompt doesn't display only the database name when using database url
@diwu1989 Sorry about that. You can adjust the prompt in your config file located at ~/.config/pgcli/config. 

Take a look at the [prompt specification](https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L101).
",2016-09-16 01:20:01,2017-01-19 23:09:28
615,583,"I apologize in advance for possible mistakes, first time trying to take part in open source project.  All decimal columns defined as text field, I change this behavior. Now decimal defined as float. Changed default formatting for float and int. And separate int and text cases.
","master: numbers division for int and float
@foxyterkel I'll take a look at this PR over this weekend. I'm slammed at the moment. 

@dbcli/pgcli-core If you folks have time, please take this for a spin and provide your feedback.

Unit tests fail on python 2.6 that doesn't have format specifiers like `,d` or `,g`. Do we still care about python 2.6, or can we remove it from our test suite since it's deprecated?

I'm using the same logic in the task so if we need to support python 2.6 my updates need to be refactored in format method

The changes look good to me. It works as expected. 

I have two requests. 
1. Can we make this behavior optional via a config value? (Have this enabled by default).
2. How hard is it to make it python 2.6 compatible? 

Comment:
If you have to spend more than 30 mins to make it 2.6 compatible, don't bother. We will drop support for 2.6. 

1. I think we can make some sort of config file. But i don't see conf files in project, so it will be only for this formatting, or we need to create conf file with some structure? Also we can make it dependent from environment variable
2. I'll spend some time on weekend to look for some old fashion formatting style which well be compatible with 2.6.

@foxyterkel pgcli reads settings from pgclirc file. Defaults are here:

https://github.com/dbcli/pgcli/blob/fa9e01cd858da6c2087ddd8e0c3230de704109f8/pgcli/pgclirc

Here is the code that reads config file and sets pgcli properties accordingly:

https://github.com/dbcli/pgcli/blob/fa9e01cd858da6c2087ddd8e0c3230de704109f8/pgcli/main.py#L113-L139

I would suggest adding a new config section. Something like:

```
[data_formats]
Decimal = ""g""
```

(just an example).

Also, in 2.6 "",g"" does not work, but ""g"" does. See here:

In 2.6:

```
(pgcli26) irina@irina-macbook ~> bpython
/Users/irina/.venvs/pgcli26/lib/python2.6/site-packages/cryptography/__init__.py:26: DeprecationWarning: Python 2.6 is no longer supported by the Python core team, please upgrade your Python. A future version of cryptography will drop support for Python 2.6
  DeprecationWarning
bpython version 0.15 on top of Python 2.6.9 /Users/irina/.venvs/pgcli26/bin/python2.6
>>> format(float(100000000), 'g')
'1e+08'
```

In 2.7:

```
(pgcli) irina@irina-macbook ~> bpython
bpython version 0.15 on top of Python 2.7.11 /Users/irina/anaconda/bin/python
>>> format(float(100000000), 'g')
'1e+08'
```

As for thousand separator on 2.6. I don't see easy way to make it compatible. In format specification "",g"", exactly "","" makes local independent thousand separator. It was added from 2.7.

@foxyterkel Are you still working on this? 

If you're too busy, I'm happy to merge this in and implement the config file change myself. Let me know. 

@amjith I'm working on it in me free time. Last days i have a lot of work but still i'm going to finish it, when i'll have free minutes. But if you wanna finish it faster, you can fell free.

There is absolutely no hurry. I wasn't trying to rush you. I just wanted to know if you needed some help to pick it up if you were feeling uninterested.

Decimal and float format now taking from config file. But problem with python 2.6 still exists. 

Changes look good. I'm going to merge this in and tackle Python 2.6 in a separate PR.

Thank you for the contribution. 🌺 
",2016-09-15 17:16:52,2016-09-29 13:57:02
616,582,,"XDG_CONFIG_HOME support for config file location
@amigrave Thank you for the PR. Can you tell me what you use for your XDG_CONFIG_HOME? 

One of the reasons I'm reluctant to add this change is because it make support issues harder to resolve. There is no reliable way for me to say change this in your config file which is located at ~/.config/pgcli/config or look at the log file under ~/.config/pgcli/log etc. 

Also this change will break existing installations if the user has a different XDG_CONFIG_HOME than the `~/.config`, because previous versions of pgcli would have written it to ~/.config/pgcli/config and the user might have edited it to their desire. Now pgcli will try to read the config file from $XDG_CONFIG_HOME/pgcli/config and it will be empty thus reverting to defaults.

I'm not saying I won't merge this, but I'd like to hear more thoughts before I make a decision.

@amjith Hi Amjith and thanks for that fine piece of software !

I can reassure you that this PR won't break other people's config because the default value of XDG_CONFIG_HOME is actually ""$HOME/.config"" as defined in the specification:
https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html

So it won't change for anyone who does not configure it's `XDG_CONFIG_HOME` variable (eg: 99% of people I guess).
The people who actually change the value of `XDG_CONFIG_HOME` does that for a particular purpose and they are aware of the consequence (they just want their configuration files to be stored elsewhere than in `~/.config`) whether they are running Linux or OSX.

So if you still haven't got this PR before, it's just because none of your users customise the value of `XDG_CONFIG_HOME` (yet)... or they where too lazy to do a PR :-)

That's a fair reasoning. Thanks for taking the time to explain as well as send a PR to improve pgcli. 🍧 
",2016-09-13 20:51:10,2016-09-16 05:30:06
617,581,"@amjith , you want to merge this in?
","Fix crash bug with leading parenthesis
🐨 
",2016-09-12 21:40:25,2016-09-12 21:57:40
618,580,"I'd like my prompt to be prepended with `[`date ""+%d/%m/%y %H:%M:%S""`]` so I could see how long queries take and when they finish. How could I do that most easily?
","How to display time in prompt?
@d33tah We currently don't have that available in the prompt specifiers. But it is trivial to add. Here's the relevant code snippet. https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L687-L694

I wouldn't be opposed to the idea if you want to send a PR. 😄 

ps: We do time the queries and print the results at the end of each query. In fact we fixed a bug recently to fix a bug in the calculation #578. 

I would like to be assigned this issue if possible
@gustavo-castro Absolutely! Thank you for your help!
@gustavo-castro So looks like we can't assign an issue to a non-collaborator (https://github.com/isaacs/github/issues/100), but go ahead and send a PR anyway. PRs are always welcome.
@j-bennet Great! I'll send it by the week.
Fixed via https://github.com/dbcli/pgcli/pull/715.",2016-09-12 11:05:32,2017-05-11 17:05:51
619,579,"```
$ psql
psql (9.3.5, server 9.5.3)
WARNING: psql major version 9.3, server major version 9.5.
         Some psql features might not work.
Type ""help"" for help.

dbname=# \dm
                                    List of relations
 Schema |                       Name                        |       Type        | Owner
--------+---------------------------------------------------+-------------------+--------
(cut)

$ pgcli
\Version: 1.2.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
d33tah@(none):dbname> \dm
syntax error at or near ""\""
LINE 1: \dm
        ^

Time: 0.002s
```
","Implement \dm
Fixed in https://github.com/dbcli/pgspecial/pull/31.",2016-09-12 09:49:57,2017-05-27 03:29:58
620,578,"Reviewer: @koljonen 

This addresses #575. 

We were inaccurately reporting timing data by aggregating the time stamp. 
","Remove cumulative addition of timing data.
Sorry about the delay. Looks super.
",2016-09-06 03:27:06,2016-09-10 16:15:32
621,577,"Basically, having to go to the end of the input to delete the semicolon, then back to wherever you want to insert your newline, and then back to the end to re-add the semicolon before executing your edited query is way too complicated, and I keep getting it wrong, resulting in half-written queries being executed and me getting frustrated. 
My suggested solution is to (1) remove the power of the semicolon to decide what [Enter] does, and (2) make the UI (toolbar) tell the user about [Esc] [Enter].

The reason it's [Esc] [Enter] and not [Alt]-[Enter] in the toolbar is that [Alt]-[Enter] doesn't work by default on Mac OS (it requires the user to change the settings of the terminal app).

So ... does anyone else use multiline mode and have an opinion on this?
","Make semicolon not trigger execution in multiline mode
I think a lot of people rely on multi-line mode to emulate the behavior of psql where it doesn't execute the query unless a semi-colon is present at the end of the line. This will break compatibility for those folks.

I'm open to the idea of adding alt-enter or esc-enter as an additional mode and call it safe-edit mode or something else.

Ah, so that's why it works the way it does! I've replaced my previous commit with one where it's controlled by an config setting. 

Except for that tiny bug it looks good. 👍 

Ping me once you get a chance to push an update and I'll review and merge.

Good catch, @amjith!

🍫 
",2016-09-04 21:41:08,2016-09-12 21:28:05
622,576,"See #569 
@koljonen want to have a look?
","Support configuring keyword casing preferences
Sure; I'll have a look sometime today.

Looks great!
",2016-09-04 12:43:49,2016-09-04 19:00:17
623,575,"I executed a SQL script with \i file which took a while (many minutes), but at the end it printed:
Time: 27262526.337s (10 months)
","Execution time
Wow. That is quite a sql file you must have executed there. 

Sorry about the bug, I'll take a look soon. 

This is now fixed in master. Try it out by installing using the following command:

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

I'll release a new version soon.

Thanks!

This has been fixed for a while. Closing. ",2016-09-04 04:37:24,2017-03-07 02:29:24
624,574,"@dbcli/pgcli-core Can you please review?
","Update changelog for version 1.2.0 release.
Bump!

:+1: for me, ran the branch most of today, no surprises

👍 

:+1: 
",2016-09-01 12:44:52,2016-09-03 03:06:37
625,573,,"do not install setproctitle on cygwin
Can you explain why this is needed?

I'm under the impression that cygwin supplies with a `ps` command and if you run pgcli under cygwin and run `ps` you can see the password listed in the process list right? 

Setproctitle doesnt work on cygwin due to at compilation error. I didn't test if the password is visible, but I consider it a hack anyway, the password should never have been in argv. Since it isn't a hard dependency, isn't it better to at least have pgcli working?

Thanks!

🚀 
",2016-08-29 18:12:55,2016-08-31 13:38:19
626,572,"Hello,

first patch is a bugfix (I'm using python2):

```
$ python -m pgcli.main -d ""dbname=rjuju""
[...]
  File ""/.../pgcli/main.py"", line 682, in get_prompt
    string = string.replace('\\u', self.pgexecute.user or '(none)')
TypeError: coercing to Unicode: need string or buffer, tuple found
```

Second one is to add more placeholder to the new prompt variable:
- \p for server port
- \i for backend PID
- # for superuser status (same as the %# placeholder in psql)

That's mostly the placeholder I need for my personal use, so feel free to merge only one or no one of these patch.

PS: I didn't use the same placeholder as psql since existing one were already different (except for #, didn't find better idea). If the one I choose are badly chosen, feel free to change them.
","More prompt
Oups, sorry I forgot to remove it before committing, last commit fixes this.

I like the additions. I'm glad you decided to use some sane specifiers such as `\p` instead of using psql's `%>` for port. Good choice. 

Thanks for the quick turn around on addressing the comments too. 🍨 

Thanks, and thanks a lot for this nice tool!
",2016-08-25 19:15:53,2016-08-26 14:52:26
627,571,"See psycopg/psycopg2#468 for a minimal example of the problem
","WIP: Use tweaked version of psycopg2.extras.wait_select to supply a timeout
Thanks for tracking that down. I think we should add this in as a temporary patch while it is fixed in psycopg2. 

Looks like Daniele Varrazzo (psycopg2 maintainer) is open to having that timeout added to psycopg2 itself. I wouldn't hurt to send him a PR with the fix. That could move things along faster. 

Is this ready for merge or do you want to wait a bit longer?

You're right, I should submit a PR to psycopg2.

I haven't had much of a chance to stress test this PR -- not sure how it interacts with long running queries. I also wasn't sure if we should hardcode the timeout or make that another pgclirc option or whatever.

Is there value in having this value configurable? Will users ever have to modify this value to get it working on their system? 

Regarding stress tests. I ran `select pg_sleep(30)` and it succeeded without disconnecting. But I don't know if that's the kind of stress test you had in mind. 

Yeah, that's all I meant really. Feel free to merge!

Awesome! ✈️ 
",2016-08-25 02:49:59,2016-09-02 13:44:19
628,570,"I can't install pgcli after I remove it by accident. When I try, I get the error: 

```
Collecting pgcli
  Downloading pgcli-1.1.0.tar.gz (53kB)
Requirement already satisfied (use --upgrade to upgrade): pgspecial>=1.5.0 in /usr/local/lib/python2.6/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): click>=4.1 in /usr/local/lib/python2.6/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): Pygments>=2.0 in /usr/local/lib/python2.6/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): prompt_toolkit<1.1.0,>=1.0.0 in /usr/local/lib/python2.6/dist-packages (from pgcli)
Collecting psycopg2>=2.5.4 (from pgcli)
  Downloading psycopg2-2.6.2.tar.gz (376kB)
Requirement already satisfied (use --upgrade to upgrade): sqlparse==0.1.19 in /usr/local/lib/python2.6/dist-packages (from pgcli)
Collecting configobj>=5.0.6 (from pgcli)
  Downloading configobj-5.0.6.tar.gz
Collecting humanize>=0.5.1 (from pgcli)
  Downloading humanize-0.5.1.tar.gz
Requirement already satisfied (use --upgrade to upgrade): wcwidth>=0.1.6 in /usr/local/lib/python2.6/dist-packages (from pgcli)
Collecting setproctitle>=1.1.9 (from pgcli)
  Downloading setproctitle-1.1.10.tar.gz
Requirement already satisfied (use --upgrade to upgrade): six>=1.9.0 in /usr/local/lib/python2.6/dist-packages (from prompt_toolkit<1.1.0,>=1.0.0->pgcli)
Installing collected packages: psycopg2, configobj, humanize, setproctitle, pgcli
  Running setup.py install for psycopg2: started
    Running setup.py install for psycopg2: finished with status 'error'
    Complete output from command /usr/bin/python -u -c ""import setuptools, tokenize;__file__='/tmp/pip-build-foEXxJ/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-pIdxrC-record/install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build/lib.linux-x86_64-2.6
    creating build/lib.linux-x86_64-2.6/psycopg2
    copying lib/errorcodes.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/pool.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/__init__.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/extensions.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/extras.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/tz.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/_json.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/psycopg1.py -> build/lib.linux-x86_64-2.6/psycopg2
    copying lib/_range.py -> build/lib.linux-x86_64-2.6/psycopg2
    creating build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_extras_dictcursor.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_psycopg2_dbapi20.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_copy.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_async.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_bug_gc.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_types_basic.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/testutils.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_with.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_cursor.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/__init__.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/testconfig.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_quote.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_cancel.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_errcodes.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_green.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_types_extras.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_lobject.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_notify.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_bugX000.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_connection.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_transaction.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/dbapi20_tpc.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_dates.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/test_module.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    copying tests/dbapi20.py -> build/lib.linux-x86_64-2.6/psycopg2/tests
    running build_ext
    building 'psycopg2._psycopg' extension
    creating build/temp.linux-x86_64-2.6
    creating build/temp.linux-x86_64-2.6/psycopg
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.6.2 (dt dec pq3 ext lo64)"" -DPG_VERSION_HEX=0x090504 -DHAVE_LO64=1 -I/usr/include/python2.6 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.5/server -c psycopg/psycopgmodule.c -o build/temp.linux-x86_64-2.6/psycopg/psycopgmodule.o -Wdeclaration-after-statement
    In file included from psycopg/psycopgmodule.c:27:0:
    ./psycopg/psycopg.h:30:20: fatal error: Python.h: No such file or directory
    compilation terminated.
    error: command 'gcc' failed with exit status 1

    ----------------------------------------
```

What can I do?
","Connat install - Ubuntu
Looks like you don't have python-dev package on your machine. Try installing: 

```
sudo apt-get install python-dev
```

Yes, I have. And when I try to install again, shows ""python-dev is already
the newest version (2.7.11-1). "", as expect. Any other thing? TT_TT

Off.:
When I install with apt-get, it works, but the auto-complete function don't
work.

On Wed, Aug 24, 2016 at 9:51 AM, Amjith Ramanujam notifications@github.com
wrote:

> Looks like you don't have python-dev package on your machine. Try
> installing:
> 
> sudo apt-get install python-dev
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/dbcli/pgcli/issues/570#issuecomment-242051465, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AOU2U0be60kEnbmKxSuIizs8LGi3Whruks5qjD5pgaJpZM4Jr92d
> .

The install is failing on psycopg2. Try pip installing psycopg2 separately and see if that passes. If it doesn't, it probably means that the python you're using to install psycopg2 is different from the system python. The python-dev that you have is matched with the system python, since you're using a different python than the system python, it can't find the python headers for your python, even though the system python headers are available. 

My recommendation would be to use your system python. I believe the system python is installed at /usr/bin/python. You can try: 

```
/usr/bin/python -m pip install pgcli
```

BTW, I'm not sure why auto-completion doesn't work with the apt-get installed version. Can you check the version number of pgcli that is installed via apt-get? 

One way to debug would be to set the `log_level` to `debug` in your config file (~/.config/pgcli/config) and launch pgcli. Then send me the log file (~/.config/pgcli/log). 

It failed to instal psycopg2. And `/usr/bin/python -m pip install pgcli`
returns ""/usr/bin/python: pip is a package and cannot be directly
executed"". I think it's a problem with python and the python's OS. Maybe of
I reinstall the OS...

On Wed, Aug 24, 2016 at 10:14 AM, Amjith Ramanujam <notifications@github.com

> wrote:
> 
> The install is failing on psycopg2. Try pip installing psycopg2 separately
> and see if that passes. If it doesn't, it probably means that the python
> you're using to install psycopg2 is different from the system python. The
> python-dev that you have is matched with the system python, since you're
> using a different python than the system python, it can't find the python
> headers for your python, even though the system python headers are
> available.
> 
> My recommendation would be to use your system python. I believe the system
> python is installed at /usr/bin/python. You can try:
> 
> /usr/bin/python -m pip install pgcli
> 
> BTW, I'm not sure why auto-completion doesn't work with the apt-get
> installed version. Can you check the version number of pgcli that is
> installed via apt-get?
> 
> One way to debug would be to set the log_level to debug in your config
> file (~/.config/pgcli/config) and launch pgcli. Then send me the log file
> (~/.config/pgcli/log).
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/dbcli/pgcli/issues/570#issuecomment-242058790, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AOU2U-Ylal1K53EsR3aPQt2hhASlp1Qlks5qjEO-gaJpZM4Jr92d
> .

I believe you have python 2.6 as the default version of python on this system. Which doesn't allow pip to be called as a module.

Can you tell me how you installed the new version of python on your system? 

I think the easiest solution at the moment would be to find out why apt-get install pgcli doesn't do what you want. Can you install pgcli via apt-get install pgcli and then launch pgcli and see if that works? 

If it fails on auto-completion then can you set the log_level to debug and send me the log files? 

I instaled pgcli, and it works. Everything, but the auto-completion.(This
is the version of the repo)

Here the log file:
[log.txt](https://github.com/dbcli/pgcli/files/445804/log.txt)

On Fri, Aug 26, 2016 at 12:04 PM, Amjith Ramanujam <notifications@github.com

> wrote:
> 
> I believe you have python 2.6 as the default version of python on this
> system. Which doesn't allow pip to be called as a module.
> 
> Can you tell me how you installed the new version of python on your
> system?
> 
> I think the easiest solution at the moment would be to find out why
> apt-get install pgcli doesn't do what you want. Can you install pgcli via
> apt-get install pgcli and then launch pgcli and see if that works?
> 
> If it fails on auto-completion then can you set the log_level to debug and
> send me the log files?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/dbcli/pgcli/issues/570#issuecomment-242760846, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AOU2U2v9xYt9z4F4VaQZUgFCG-cfySmIks5qjwBhgaJpZM4Jr92d
> .

Any problem in the log files? 

Edit.: This error never happened before:

```
pagarme> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in runs-mode     Refreshing completions...                                                                                                                                   
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/completion_refresher.py"", line 106, in refresh_tables
    completer.extend_foreignkeys(executor.foreignkeys())
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgcompleter.py"", line 180, in extend_foreignkeys
    for fk in fk_data:
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 431, in foreignkeys
    cur.execute(query)
  File ""/usr/local/lib/python2.7/dist-packages/psycopg2/extras.py"", line 579, in wait_select
    state = conn.poll()
OperationalError: SSL SYSCALL error: Connection timed out

```

@PauloDanielCarneiro The log file gave me some clues. I'm guessing that the database that you're connecting to has a lot of tables or it is located in a network that is far away (high latency). 

When you launch pgcli do you see a message in the status bar at the bottom that says ""Refreshing completions.....""? When that message is active the autocompletion thread is still gathering data in the background. So while that message is active the completions will be empty. When that message is gone you'll start to see completion working.

The latest stack trace you've posted leads me to believe that the database is on a network with  high latency, so completion thread timed out waiting for the results. 

Can you confirm the following things? 
- Is the database you're connecting really large with many tables? 
- Is the database instance located in a far off place (such as across the world) to cause such high latency? 
- Can you try connecting to a smaller database first to see if the basic completion works?
- What version of pgcli are you running? You can check that by running `pgcli --version`.

Hello.

Well, the database is in my city, São Paulo. There are very many tables,
really. I can connect normally in my pc(in home, with a VPN) and show the
completions. But in my pc at work, with wired connection(the VPN is in the
router in my work place) they don't show at all. My version is 1.1.0.

There is anything that I can do with the time out?

On Tue, Sep 6, 2016 at 11:12 AM, Amjith Ramanujam notifications@github.com
wrote:

> @PauloDanielCarneiro https://github.com/PauloDanielCarneiro The log
> file gave me some clues. I'm guessing that the database that you're
> connecting to has a lot of tables or it is located in a network that is far
> away (high latency).
> 
> When you launch pgcli do you see a message in the status bar at the bottom
> that says ""Refreshing completions.....""? When that message is active the
> autocompletion thread is still gathering data in the background. So while
> that message is active the completions will be empty. When that message is
> gone you'll start to see completion working.
> 
> The latest stack trace you've posted leads me to believe that the database
> is on a network with high latency, so completion thread timed out waiting
> for the results.
> 
> Can you confirm the following things?
> - Is the database you're connecting really large with many tables?
> - Is the database instance located in a far off place (such as across
>   the world) to cause such high latency?
> - Can you try connecting to a smaller database first to see if the
>   basic completion works?
> - What version of pgcli are you running? You can check that by running pgcli
>   --version.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/dbcli/pgcli/issues/570#issuecomment-244962599, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AOU2U-Qmrohvny_TUXRr-pXGcnZMCknHks5qnXTRgaJpZM4Jr92d
> .

I'll take this pc to my home and try in my network, with VPN.

Hello.

In my house it worked as expect. I think it's the local network in my work.
Thanks. ^^

On Wed, Sep 7, 2016 at 12:20 AM, Paulo Daniel pdc187@gmail.com wrote:

> Hello.
> 
> Well, the database is in my city, São Paulo. There are very many tables,
> really. I can connect normally in my pc(in home, with a VPN) and show the
> completions. But in my pc at work, with wired connection(the VPN is in the
> router in my work place) they don't show at all. My version is 1.1.0.
> 
> There is anything that I can do with the time out?
> 
> On Tue, Sep 6, 2016 at 11:12 AM, Amjith Ramanujam <
> notifications@github.com> wrote:
> 
> > @PauloDanielCarneiro https://github.com/PauloDanielCarneiro The log
> > file gave me some clues. I'm guessing that the database that you're
> > connecting to has a lot of tables or it is located in a network that is far
> > away (high latency).
> > 
> > When you launch pgcli do you see a message in the status bar at the
> > bottom that says ""Refreshing completions.....""? When that message is active
> > the autocompletion thread is still gathering data in the background. So
> > while that message is active the completions will be empty. When that
> > message is gone you'll start to see completion working.
> > 
> > The latest stack trace you've posted leads me to believe that the
> > database is on a network with high latency, so completion thread timed out
> > waiting for the results.
> > 
> > Can you confirm the following things?
> > - Is the database you're connecting really large with many tables?
> > - Is the database instance located in a far off place (such as across
> >   the world) to cause such high latency?
> > - Can you try connecting to a smaller database first to see if the
> >   basic completion works?
> > - What version of pgcli are you running? You can check that by
> >   running pgcli --version.
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly, view it on GitHub
> > https://github.com/dbcli/pgcli/issues/570#issuecomment-244962599, or mute
> > the thread
> > https://github.com/notifications/unsubscribe-auth/AOU2U-Qmrohvny_TUXRr-pXGcnZMCknHks5qnXTRgaJpZM4Jr92d
> > .

@PauloDanielCarneiro Thanks for taking the time to check this out and report back the results. I'm sorry it is having issues with the work network.

You can try one other thing to see if it helps. 

Launch pgcli with a command line option called `--single-connection`. This forces pgcli to use a single connection to do the autocompletion instead of making multiple connections. 

See if that helps.

I'm going to close this as there has been no update in a long time. Feel free to reopen if you are still experiencing problems.",2016-08-24 12:47:37,2017-06-09 16:04:08
629,569,"Many people prefer writing SQL in lowercase. 

When I try to autocomplete a query in pgcli it always autocompletes uppercase. I asked in gitter if there is a way to configure that and was told to open an issue on the repo.

Auto complete lowercase example:
For example `sel<TAB>` should be `select` not `SELECT`.

Auto complete smartcase  example:
`sel<TAB>` should be `select`
 `SEL<TAB>` should be `SELECT`.

Thanks
","Allow autocomplete to lowercase/smartcase
@darikg I think this validates your request (from a while back) to have either casing controlled via the config file. 

I actually like this idea of having it smart cased, so this is not configured via the pgclirc. But I'll leave this up to you to decide how you want to implement it.

If you're not too keen on taking this on, let me know and I'll see what I can do.

I like the smart casing idea! I'll take a stab at it.

This was implemented a while back and now available in pgcli version 1.4 and above. Please upgrade. 

`pip install -U pgcli`",2016-08-23 19:35:30,2017-03-07 02:55:37
630,568,"And a regression test.

@amjith, mind merging this in? 
 #563
","Temporary hack for sqlparse crashing after AS
@koljonen Would you mind adding a comment saying this is a hack and should be removed after it is fixed in sqlparse?

Otherwise it looks good to be merged.

Nice! :peach:
",2016-08-23 18:16:24,2016-08-24 00:23:46
631,567,"After starting `pgcli` typing any SQL command will blow auto-completer when last character is pressed. Or if any text is typed, it will blow after pressing `space`:

```
selectException in thread Thread-6:
Traceback (most recent call last):      
  File ""/usr/lib/python3.5/threading.py"", line 914, in _bootstrap_inner
    self.run()                          
  File ""/usr/lib/python3.5/threading.py"", line 862, in runs-mode                                                                                                             
    self._target(*self._args, **self._kwargs)
  File ""/usr/lib/python3.5/site-packages/prompt_toolkit/interface.py"", line 835, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""/usr/lib/python3.5/site-packages/pgcli/pgcompleter.py"", line 332, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/usr/lib/python3.5/site-packages/pgcli/packages/sqlcompletion.py"", line 104, in suggest_type
    stmt = SqlStatement(full_text, text_before_cursor)
  File ""/usr/lib/python3.5/site-packages/pgcli/packages/sqlcompletion.py"", line 66, in __init__
    self.identifier = parse_partial_identifier(word_before_cursor)
  File ""/usr/lib/python3.5/site-packages/pgcli/packages/parseutils.py"", line 299, in parse_partial_identifier
    elif p.token_next_match(0, Error, '""'):
AttributeError: 'Statement' object has no attribute 'token_next_match'
```

After this there's no more auto-completer and it doesn't explode anymore. Another example to show it's the same for any valid SQL:

```
dropException in thread Thread-4:
Traceback (most recent call last):       
  File ""/usr/lib/python3.5/threading.py"", line 914, in _bootstrap_inner
    self.run()                           
  File ""/usr/lib/python3.5/threading.py"", line 862, in runs-mode                                                                                                             
    self._target(*self._args, **self._kwargs)
  File ""/usr/lib/python3.5/site-packages/prompt_toolkit/interface.py"", line 835, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""/usr/lib/python3.5/site-packages/pgcli/pgcompleter.py"", line 332, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/usr/lib/python3.5/site-packages/pgcli/packages/sqlcompletion.py"", line 104, in suggest_type
    stmt = SqlStatement(full_text, text_before_cursor)
  File ""/usr/lib/python3.5/site-packages/pgcli/packages/sqlcompletion.py"", line 66, in __init__
    self.identifier = parse_partial_identifier(word_before_cursor)
  File ""/usr/lib/python3.5/site-packages/pgcli/packages/parseutils.py"", line 299, in parse_partial_identifier
    elif p.token_next_match(0, Error, '""'):
AttributeError: 'Statement' object has no attribute 'token_next_match'
```

$ pgcli --version
Version: 1.1.0

Running on Archlinux. If you need any other information don't hesitate to request it.
","Autocompleter explodes on last character from any valid SQL command or space for any other text
How did you install pgcli? It looks like maybe you have an incompatible version of sqlparse installed.

@darikg from [AUR](https://aur.archlinux.org/packages/pgcli/)

Tried with `pip` too but I got another error there and since the versions both methods install are the same, I didn't bother to report this problem:

```
$ pip-pypy install --user pgcli
Collecting pgcli
  Using cached pgcli-1.1.0.tar.gz
Requirement already satisfied (use --upgrade to upgrade): pgspecial>=1.5.0 in ./.local/lib/pypy2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): click>=4.1 in ./.local/lib/pypy2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): Pygments>=2.0 in ./.local/lib/pypy2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): prompt_toolkit<1.1.0,>=1.0.0 in ./.local/lib/pypy2.7/site-packages (from pgcli)
Collecting psycopg2>=2.5.4 (from pgcli)
  Using cached psycopg2-2.6.2.tar.gz
Requirement already satisfied (use --upgrade to upgrade): sqlparse==0.1.19 in ./.local/lib/pypy2.7/site-packages (from pgcli)
Collecting configobj>=5.0.6 (from pgcli)
  Using cached configobj-5.0.6.tar.gz
Collecting humanize>=0.5.1 (from pgcli)
  Using cached humanize-0.5.1.tar.gz
Requirement already satisfied (use --upgrade to upgrade): wcwidth>=0.1.6 in ./.local/lib/pypy2.7/site-packages (from pgcli)
Collecting setproctitle>=1.1.9 (from pgcli)
  Using cached setproctitle-1.1.10.tar.gz
Requirement already satisfied (use --upgrade to upgrade): six>=1.9.0 in ./.local/lib/pypy2.7/site-packages (from prompt_toolkit<1.1.0,>=1.0.0->pgcli)
Installing collected packages: psycopg2, configobj, humanize, setproctitle, pgcli
  Running setup.py install for psycopg2 ... error
    Complete output from command /usr/bin/pypy -u -c ""import setuptools, tokenize;__file__='/tmp/pip-build-qzRwXd/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-WnwcXt-record/install-record.txt --single-version-externally-managed --compile --user --prefix=:
    running install
    running build
    running build_py
    creating build
    creating build/lib.linux-x86_64-2.7
    creating build/lib.linux-x86_64-2.7/psycopg2
    copying lib/errorcodes.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/_json.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/psycopg1.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/__init__.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/_range.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/extensions.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/extras.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/pool.py -> build/lib.linux-x86_64-2.7/psycopg2
    copying lib/tz.py -> build/lib.linux-x86_64-2.7/psycopg2
    creating build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_bugX000.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_notify.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_connection.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_cursor.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_with.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/testutils.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_green.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/__init__.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_module.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_psycopg2_dbapi20.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_types_extras.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_copy.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/dbapi20_tpc.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_lobject.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_dates.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_cancel.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_transaction.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_types_basic.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_extras_dictcursor.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_quote.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/testconfig.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_async.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_bug_gc.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/dbapi20.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    copying tests/test_errcodes.py -> build/lib.linux-x86_64-2.7/psycopg2/tests
    running build_ext
    building 'psycopg2._psycopg' extension
    creating build/temp.linux-x86_64-2.7
    creating build/temp.linux-x86_64-2.7/psycopg
    cc -O2 -fPIC -Wimplicit -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.6.2 (dt dec pq3 ext lo64)"" -DPG_VERSION_HEX=0x090504 -DHAVE_LO64=1 -I/opt/pypy/include -I. -I/usr/include -I/usr/include/postgresql/server -c psycopg/psycopgmodule.c -o build/temp.linux-x86_64-2.7/psycopg/psycopgmodule.o -Wdeclaration-after-statement
    In file included from psycopg/psycopgmodule.c:38:0:
    ./psycopg/error.h:32:5: error: unknown type name ‘PyBaseExceptionObject’
         PyBaseExceptionObject exc;
         ^~~~~~~~~~~~~~~~~~~~~
    error: command 'cc' failed with exit status 1

    ----------------------------------------
Command ""/usr/bin/pypy -u -c ""import setuptools, tokenize;__file__='/tmp/pip-build-qzRwXd/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-WnwcXt-record/install-record.txt --single-version-externally-managed --compile --user --prefix="" failed with error code 1 in /tmp/pip-build-qzRwXd/psycopg2/
```

Regarding `sqlparse`, got version 0.2.0:

```
$ pacman -Ss sqlparse
community/python-sqlparse 0.2.0-1 [installed]
    Non-validating SQL parser for Python
```

Ok sqlparse 0.20 is the issue. The master branch of pgcli supports it but v1.1.0 didn't. I don't know anything about archlinux or AUR--is it easy to swap sqlparse 0.19 for 0.20?

@darikg I think if you install 0.1.19 and pgcli has 0.2.0 in requirements, it won't start, will it?

@j-bennet I'm a little confused on that. The pgcli commit tagged v1.1.0 has sqlparse==0.1.19 listed in setup.py, so I don't understand how it ran in the first place.

Interesting. I dockerized pgcli on archlinux here:

https://github.com/j-bennet/dockerized/tree/master/pgcli-archlinux

I'm installing pgcli from master. I don't have the crash as described, but I see a different error when running pgcli:

```
[root@3b57e9b239ce pgcli]# pgcli -U postgres
ERROR:  type ""hstore"" does not exist at character 8
STATEMENT:  SELECT 'hstore'::regtype::oid
ERROR:  type ""hstore"" does not exist at character 8
STATEMENT:  SELECT 'hstore'::regtype::oid
Version: 1.1.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres@(none):postgres>
```

However, my pgcli was installed using pip, and that's different from @fernandocanizo. What's your arch linux version, @fernandocanizo ?

@darikg while Archlinux allows to install local versions using it's build system ABS, it's a little bit more effort. Since you told me sqlparse 0.20 was supported on master, I switched to package `pgcli-git` and it's solved for me now.

Thanks.

Maybe we should close this.

Well, it seems I talked a little bit too early :'(

Installing `pgcli-git`, which clones master branch, which it's supposes to support `sqlparse 0.20`, I get a worst behaviour:

```
 $ pgcli csw_webgis_test
Version: 1.1.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
flc@(none):csw_webgis_test> \d
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 716, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 696, in main
    rv = self.invoke(ctx)
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 889, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 534, in invoke
    return callback(*args, **kwargs)
  File ""/usr/lib/python3.5/site-packages/pgcli/main.py"", line 773, in cli
    pgcli.run_cli()
  File ""/usr/lib/python3.5/site-packages/pgcli/main.py"", line 455, in run_cli
    watch_command, timing = special.get_watch_command(document.text)
AttributeError: module 'pgspecial' has no attribute 'get_watch_command'
```

Any command will spit the same error about `get_watch_command`.

And if I switch to `python-sqlparse-git` (which brings version: 0.1.18.32.g7b80406-1) I also get a bad behaviour, worst than previous I think:

```
$ pgcli mydb
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/usr/lib/python3.5/site-packages/pgcli/main.py"", line 38, in <module>
    from pgspecial.main import (PGSpecial, NO_QUERY, content_exceeds_width)
  File ""/usr/lib/python3.5/site-packages/pgspecial/__init__.py"", line 12, in <module>
    from . import iocommands
  File ""/usr/lib/python3.5/site-packages/pgspecial/iocommands.py"", line 7, in <module>
    import sqlparse
ImportError: No module named 'sqlparse'
```

Both take me out to the bash shell, so of the three options, I'll stick with the first one which only leave me without auto-completion, but I still could use pgcli shell.

The third one may be due to something broken in Archlinux, but `pgcli-git` should work with `sqlparse 0.20`, right? And instead I get the `get_watch_command`error.

I'm thinking doing a local installation, building myself the package.

@fernandocanizo I'm very late to this party. But did you try installing directly from master using pip? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

@amjith Oh! That worked perfect :) I tried before pip, but not using github URL.

Thank you :)

Sorry @j-bennet I missed your question before: Archlinux is a rolling release distro, there's no such a thing as a _version_, most close thing I can tell you is that I installed it this week using ISO from 2016.08.01 and that it's updated to today.

Thanks @fernandocanizo, good to know - I've not worked with Archlinux before. I'm glad the problem was fixed by an install from master.

@amjith first-shots it of course

I'm still bewildered here. Looking at the AUR script [here](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=pgcli) there's really not a lot happening -- it downloads `https://github.com/dbcli/pgcli/archive/v$pkgver.zip`, and then runs `setup.py`.  My only guess is it installed the correct version of sqlparse, but a newer version had already been installed system-wide?

cc @fzerorubigd who is listed as the package maintainer

@darikg I think no, but I'm not sure if I understood you correctly. This is a fresh install of Archlinux and there's no other package requiring `sqlparse`, by issuing a `dbcli` install with `yaourt` tool (a package manager for AUR) you get `sqlparse` as dependency. Did you intend to say that `setup.py` installed a local version of the dependency instead?

There is also a pgcli-git package in AUR (https://aur.archlinux.org/packages/pgcli-git/) . it build from the master branch. 
I use that version and there is no problem with that.  

@fzerorubigd It didn't work for me, you can check the error I got some messages above (sorry, I didn't found a way to reference the proper message)

Please upgrade to v1.2.0. 

```
pip install -U pgcli
```

This issue is addressed in the new version.

Creating a virtualenv and pip-installing pgcli after uninstalling the AUR package ""solves"" the issue, but will require a shell script wrapper to switch to that venv every time I want to use pgcli. Doable, but far from optimal.

I'll look into patching up the PKGBUILD when I have some spare time, for us Arch folk.
",2016-08-23 13:03:09,2016-09-03 03:26:16
632,566,"And add behave tests.

@amjith you want to merge this?
","Fix crash bug with named queries
Looks good. Thanks! 

🏁 
",2016-08-23 11:49:49,2016-08-23 18:25:05
633,565,"I'm using Powershell on ConEmu to run pgcli after installing it via pip, and it just gets stuck when I run `pgcli`. Only `pgcli --help` outputs the help, nothing else works.
","pgcli get stuck indefinitely on Windows
You can connect successfully with psql though? I've had issues on Windows before with a bad connection where psycopg2 just hangs instead of timing out.

Yes, psql works. Actually, I missed out one important thing: My postgres is running in a docker container, and I've already configured port-forwarding, etc, so that my applications in windows can connect to the postgres database inside the docker container. Manually specifying the port in `pgcli` did not help.

Also, when I run `pgcli` in conemu, the status-bar shows `Python.exe` and gets stuck, doesn't even respond to Ctrl+C so I've to kill it by closing that console.

Do you mind running this at the command line to see if it hangs so we can confirm it's a problem specific to psycopg2:

```
 python -c ""import psycopg2; psycopg2.connect(database='mydb', user='username', password='secret', port=5432)""
```

with the obvious values replaced with your specifics?

That line works, but it gave no output (and no error, so I'm assuming it ran fine)

Huh well I guess psycopg2 is working fine then. So the problem really is with pgcli. Do you mind editing `AppData\Local\dbcli\pgcli\config` to set `log_level = DEBUG` and then running pgcli again and copying the last few lines from `AppData\Local\dbcli\pgcli\log` and maybe we can figure out where it's hanging?

This is all:

```
2016-08-24 13:16:17,641 (9796/MainThread) pgcli DEBUG - Initializing pgcli logging.
2016-08-24 13:16:17,641 (9796/MainThread) pgcli DEBUG - Log file u'C:\\Users\\kumar\\AppData\\Local\\dbcli\\pgcli\\log'.
2016-08-24 13:16:17,651 (9796/MainThread) pgcli.main INFO - No default pager found in environment. Using os default pager
```

I've tested pgcli with cmd.exe, git bash, powershell on conemu and even vanilla CMD.exe - all of them get stuck in the same way.

I'm able to replicate something like this when running `pgcli` with no connection details, and pgcli defaults to try to connect to localhost, when I don't have postgresql server running. pgcli hangs and the debug log stops at the same point as yours.

Can you connect successfully if you specify all the connection details, like 

```
pgcli postgresql://user:password@host/dbname
```

?

I've tried these, which don't work:
I don't have a password set for my database, hence no `:password`.

```
pgcli postgres://postgres@localhost:5432/pl_core
pgcli postgresql://postgres@localhost:5432/pl_core
```

So sorry for all the hassle @kumarharsh 
I've (I think) fixed a problem where pgcli will hang in a connection error. I have a fix here: #571
I don't think it will fix your problem directly, but it should at least report an error message instead of freezing. 
Could you please try it out with

```
 pip install git+https://github.com/dbcli/pgcli.git@darikg/no-hang-wait-select
```

no problems! I'll give it a try 

@darikg it's still the same

I'm sorry! I'm completely stumped then. I will try to get postgresql running in a docker instance to see if I can replicate it. Might not happen real soon though.

@kumarharsh Are you specifying host explicitly? `pgcli` will default to `localhost` if you aren't, and on Windows you may need to use docker machine IP instead.

@darikg I got it working using @j-bennet's suggestion:

```
$ docker-machine ip <my-machine>
output: 192.168.99.100

$ pgcli postgresql://<username>@192.168.99.100:5432/<my_db>
```

However, after I write the first word in the cli, say `SEL..<ENTER>' to select the 'SELECT' keyword and then I press <kbd>Space</kbd>, there is an error thrown:

```
Traceback (most recent call last):
  File ""c:\langs\python27\lib\threading.py"", line 551, in __bootstrap_inner
    self.run()
  File ""c:\langs\python27\lib\threading.py"", line 504, in runode
    self.__target(*self.__args, **self.__kwargs)
  File ""c:\langs\python27\lib\site-packages\prompt_toolkit\interface.py"", line 836, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File ""c:\langs\python27\lib\site-packages\pgcli\pgcompleter.py"", line 332, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""c:\langs\python27\lib\site-packages\pgcli\packages\sqlcompletion.py"", line 115, in suggest_type
    return suggest_based_on_last_token(stmt.last_token, stmt)
  File ""c:\langs\python27\lib\site-packages\pgcli\packages\sqlcompletion.py"", line 247, in suggest_based_on_last_token
    token_v = token.value.lower()
AttributeError: 'tuple' object has no attribute 'value'
```

I can, however, keep writing the rest of the command. But the autocomplete breaks after that, and never triggers.

@kumarharsh This latest exception you're seeing is due to a known bug that is fixed in master. Can you try upgrading directly from master using the following command? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Works like a charm!

Is there a way to throw some error or warning when pgcli can't connect to databases? 
For example like I had done at the beginning of this issue? Just writing `pgcli` makes the console stuck and Ctrl+C also doesn't work after that. I have to manually kill the console instance - which made me think this might be a bug.

@kumarharsh It was a bug, we have a fix for that in master (as of 5 minutes ago). Thanks @darikg. 

I'd recommend rerunning that update command and see if that works for you. 

Sorry about the bug, we will release the next version pretty soon.

Yes, it works with the latest fix. Thanks @amjith  @darikg 

Glad to hear it!
",2016-08-22 09:08:30,2019-05-05 15:23:21
634,564,,"Pasting a ""COPY ... FROM stdin"" command freezes the program indefinitely
@danielyli Some reproduction steps would be helpful. Also, what OS are you running on?

I didn't try `COPY ... FROM STDIN` before, but now I did, I can see what you are talking about. They work differently in `psql` and `pgcli`.

Assuming I selected database `boo` and created table `create table xxx (x int, y text);`:

In `psql`:

```
boo=# copy xxx (x, y) from stdin delimiter ',' csv;
Enter data to be copied followed by a newline.
End with a backslash and a period on a line by itself.
>> 1,a
>> 2,b
>> \.
COPY 2
```

In `pgcli`, `\copy` is a ""special command"" - one of the ""backslash"" commands:

```
boo> \copy xxx from stdin with csv
3,c
^D
Time: 9.942s (9 seconds)
boo>
```

Here, I had to press `Ctrl + D` twice to signal EOF.

Also, if I try to run this command again in pgcli, nothing happens. It will not let me enter csv data:

```
boo> \copy xxx from stdin with csv

Time: 0.002s
boo>
```

This 2nd issue looks like a bug. First one is more of an implementation difference.

@amjith and @catherinedevlin, is this how `\copy` was supposed to work in pgcli?

@j-bennet Ah, apologies for the late response! I've been very busy lately. Thank you for filling in the reproduction steps!

Actually, the same ""freeze"" problem happen with the 

```
COPY ... TO STDOUT
```

But, again if we do like j-bennet  suggested, then it works fine:

```
\copy xxx TO STDOUT
```

If pgcli isn't intended to be an identical-behavior replacement for psql, I don't think there's much harm in mandating the `\copy` syntax.  In that case, can I suggest an error message upon using `COPY`?

@danielyli I agree, that would be more graceful as a temporary solution, even if we want to align these behaviors in future. Let's keep the issue open.
",2016-08-20 00:43:06,
635,563,"When inputting the query `SELECT column AS`, the following exception raises:

```
analytics> SELECT x ASException in thread Thread-11:
Traceback (most recent call last):                                  
  File ""/usr/lib/python3.4/threading.py"", line 920, in _bootstrap_inner
    self.run()                                                      
  File ""/usr/lib/python3.4/threading.py"", line 868, in runs-mode                                                                                                                                                                                                                     
    self._target(*self._args, **self._kwargs)
  File "".pex/install/prompt_toolkit-1.0.5-py3-none-any.whl.bd98d0b047ddd5ae887af8c17dfa67aa1127eb00/prompt_toolkit-1.0.5-py3-none-any.whl/prompt_toolkit/interface.py"", line 836, in run
    completions = list(buffer.completer.get_completions(document, complete_event))
  File "".pex/install/pgcli-1.1.1b1-py3-none-any.whl.79f0fc40898c1538f1570abfc24c9a7f0cf0efbf/pgcli-1.1.1b1-py3-none-any.whl/pgcli/pgcompleter.py"", line 351, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File "".pex/install/pgcli-1.1.1b1-py3-none-any.whl.79f0fc40898c1538f1570abfc24c9a7f0cf0efbf/pgcli-1.1.1b1-py3-none-any.whl/pgcli/packages/sqlcompletion.py"", line 129, in suggest_type
    stmt = SqlStatement(full_text, text_before_cursor)
  File "".pex/install/pgcli-1.1.1b1-py3-none-any.whl.79f0fc40898c1538f1570abfc24c9a7f0cf0efbf/pgcli-1.1.1b1-py3-none-any.whl/pgcli/packages/sqlcompletion.py"", line 73, in __init__
    self.identifier = parse_partial_identifier(word_before_cursor)
  File "".pex/install/pgcli-1.1.1b1-py3-none-any.whl.79f0fc40898c1538f1570abfc24c9a7f0cf0efbf/pgcli-1.1.1b1-py3-none-any.whl/pgcli/packages/parseutils.py"", line 295, in parse_partial_identifier
    p = sqlparse.parse(word)[0]
  File "".pex/install/sqlparse-0.2.0-py2.py3-none-any.whl.161de6239d031b2b05bcddf4d16cb9a0b31737bc/sqlparse-0.2.0-py2.py3-none-any.whl/sqlparse/__init__.py"", line 31, in parse
    return tuple(parsestream(sql, encoding))
  File "".pex/install/sqlparse-0.2.0-py2.py3-none-any.whl.161de6239d031b2b05bcddf4d16cb9a0b31737bc/sqlparse-0.2.0-py2.py3-none-any.whl/sqlparse/engine/filter_stack.py"", line 36, in run
    stmt = grouping.group(stmt)
  File "".pex/install/sqlparse-0.2.0-py2.py3-none-any.whl.161de6239d031b2b05bcddf4d16cb9a0b31737bc/sqlparse-0.2.0-py2.py3-none-any.whl/sqlparse/engine/grouping.py"", line 357, in group
    func(stmt)
  File ""/.pex/install/sqlparse-0.2.0-py2.py3-none-any.whl.161de6239d031b2b05bcddf4d16cb9a0b31737bc/sqlparse-0.2.0-py2.py3-none-any.whl/sqlparse/engine/grouping.py"", line 129, in group_as
    _group(tlist, sql.Identifier, match, valid_prev, valid_next, post)
  File "".pex/install/sqlparse-0.2.0-py2.py3-none-any.whl.161de6239d031b2b05bcddf4d16cb9a0b31737bc/sqlparse-0.2.0-py2.py3-none-any.whl/sqlparse/engine/grouping.py"", line 383, in _group
    if valid_prev(prev_) and valid_next(next_):
  File "".pex/install/sqlparse-0.2.0-py2.py3-none-any.whl.161de6239d031b2b05bcddf4d16cb9a0b31737bc/sqlparse-0.2.0-py2.py3-none-any.whl/sqlparse/engine/grouping.py"", line 120, in valid_prev
    return token.normalized == 'NULL' or not token.is_keyword
AttributeError: 'NoneType' object has no attribute 'normalized'
```

Database type is Amazon Redshift
","Exception on `SELECT column AS` 
Good catch. I think this is related to the latest update by sqlparse. I'll take a look and have a fix ready soon. Thanks for reporting.

I created an issue in sqlparse:

https://github.com/andialbrecht/sqlparse/issues/284

Please upgrade to v1.2.0. 

```
pip install -U pgcli
```

This issue is addressed in the new version.
",2016-08-11 00:41:37,2016-09-03 03:26:43
636,562,"I just installed `pglcli` from homebrew, and I got bit by https://github.com/dbcli/pgcli/issues/550

```
==> Summary
🍺  /usr/local/Cellar/postgresql/9.5.3: 3,142 files, 35.0M
==> Installing pgcli
==> Downloading https://homebrew.bintray.com/bottles/pgcli-1.0.0.el_capitan.bottle.tar.gz
######################################################################## 100.0%
==> Pouring pgcli-1.0.0.el_capitan.bottle.tar.gz
🍺  /usr/local/Cellar/pgcli/1.0.0: 466 files, 4.9M
dougwade code/main ‹plat-1433*› » pgcli postgres://postgres:user@hostname:port                                                           1 ↵
Traceback (most recent call last):
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==1.0.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 700, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 680, in main
    rv = self.invoke(ctx)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 873, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 508, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 728, in cli
    pgcli.connect_uri(database)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 265, in connect_uri
    self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 265, in <lambda>
    self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urlparse.py"", line 349, in unquote
    bits = s.split('%')
AttributeError: 'int' object has no attribute 'split'
```

I expected to get a working version of pgcli.
","Homebrew is out-of-date
I've submitted a new formula for pgcli to homebrew. https://github.com/Homebrew/homebrew-core/pull/3822 

New formula available in brew.

Thanks @amjith!
",2016-08-09 20:40:05,2016-08-21 04:34:22
637,561,"**Note** I don't think the tests will pass until the related https://github.com/dbcli/pgspecial/pull/22 is merged. @amjith what would you normally do in this case?

An implementation of `\watch` from psql.

```
SELECT * FROM titles; \watch 1;
```

If the command can be parsed as a 'watch' command it is executed, then we sleep the specified number of seconds then execute again. Ctrl+C cancels

Any feedback and suggestions on testing welcome
","Issue #544 Implementation of watch command
@stuartquin Sorry I haven't had a chance to respond. I'll take a look at this soon (this weekend probably). 

Tested this branch and it works as expected. Let's wait to release pgspecial and fix the repeated parsing of the watch command. 

I'm also wondering if it would be nice to add a info message that says, ""Waiting for 'x' seconds before repeating command.""

pgspecial 1.6.0 has been released. If you update the setup.py file this should pass.

Works great. ⏰ 
",2016-08-03 17:01:22,2016-08-15 20:53:12
638,560,"I am getting the error `alias timestamptz not supported` when I attempt to connect to a Redshift instance.

According to https://github.com/dbcli/pgcli/issues/282, Redshift is supported since v1.0 and accoding to http://pgcli.com/v1.0.0.html `timestamptz` was added as a DATE custom extension.

```
$ pgcli --version
Version: 1.1.0
```
","""alias timestamptz not supported"" when connecting to Redshift instance
NOTE: This seems fixed in master but not in 1.1.0.

I think this commit is to praise: https://github.com/dbcli/pgcli/commit/1e3599e6850d530b6a84e4652896b3fb883389b9

You're right this was recently fixed https://github.com/dbcli/pgcli/pull/546. I haven't made a release since then. 

Released in version 1.4. Please upgrade. 

```
pip install -U pgcli
```",2016-08-02 20:42:34,2017-03-07 03:25:19
639,559,"@koljonen Can you review and merge? This is an extension to #556. 
",Read config files using utf-8 encoding.,2016-08-01 04:36:16,2016-08-01 19:56:34
640,558,"Hello.

Excellent project! So far, pgcli replaced the old `psql` except for this one feature.

`psql` allows you to use the `\copy` command to pipe a query into a shell command, which might be useful to copy the results of a query to the system clipboard (using pbcopy on a Mac, though there are similar utilities for GNU/Linux and Windows). Therefore, if I do something like:

`\copy (SELECT name, age FROM Users) TO PROGRAM 'pbcopy' DELIMITER e'\t' CSV HEADER`

It copies the result of the query to the clipboard and then I can easily paste it into a spreadsheet application.

I would like to be able to do something like this on `pgcli` as well.

How difficult would it be to implement this?
","Implement \copy (...) TO PROGRAM '...'
In `psql` we can also do `\g | pbcopy` which would basically copy the results from last query to clipboard. I really miss this in pgcli.",2016-07-29 18:35:33,
641,557,"This option makes it so that the executor and the completer use the same database connection. This is needed for the completer to function when using one-time passwords for connecting to the database.

@darikg wanna have a look?
","Add command-line option --single-connection
Yeah I'll have a look in the next couple days hopefully

Sorry for the delay -- this is totally reasonable
",2016-07-29 12:12:10,2016-08-03 22:25:03
642,556,"Allows a configurable string for the null result.

I like to use ⊥ to visually distinguish from normal text, so the config value needs to be decoded to unicode. Such decoding should probably be applied to other formatting options, e.g. the prompt.

Ideally, the output formatting would be themeable to make nulls, and other types, more distinguishable!
","configurable null format
@avdd Would you mind taking a look at the failing tests?

I gave up on unicode -- I don't know how the project wants to deal with python 2/3 compatibility.
The suggestion by @koljonen to use ANSI colours works well enough for me, although that approach seems brittle: `^[[35;1m` is a valid ANSI escape that isn't handled properly.

@avdd Thank you for reporting the unicode issue. I dug into this a little bit and the problem comes from the fact that `ConfigObj` that is used to read the config file was assuming an ascii encoding. Once I changed that it works great with the unicode characters. 

If you'd like to make the change yourself and add a few tests to check if unicode chars are allowed, I'll be most happy. But if you're short for time, I'll be happy to merge this PR and made the necessary changes myself. 

This is the line you have to change. https://github.com/dbcli/pgcli/blob/master/pgcli/config.py#L17

That should be changed to the following: 

```
    cfg.merge(ConfigObj(expanduser(usr_cfg), interpolation=False, encoding='utf-8'))
```

Let me know how you'd like to proceed. 

Thanks again for taking the time to add this feature.

@amjith I tried, but I can't immediately think of a clean way to test: configobj seems to only work with filenames (!) and pytest's tmpdir appears not to do encodings (!).

This PR is small and does what I need: to be able to visually distinguish nulls.  Over to you!

Cheers! :-)

That's fair. 😃 
",2016-07-28 01:10:42,2016-08-01 04:33:30
643,555,"Allows a configurable string for the null result. 

I like to use `⊥` to visually distinguish from normal text, so the config value needs to be decoded to unicode.  Such decoding should probably be applied to other formatting options, e.g. the prompt.

Ideally, the output formatting would be themeable to make nulls, and other types, more distinguishable!
","configurable null format
Apologies for duplicate: I ballsed up the commit metadata
",2016-07-28 01:01:56,2016-07-28 01:10:00
644,554,"@amjith  you want to merge this in?
","Some changes to sorting of suggestions
@koljonen Would you mind extracting the magic values into constants in a file? Other than that it looks good to merge.

Works well.

👽 
",2016-07-27 22:03:31,2016-07-29 14:33:37
645,553,"The general idea here is to take a query like

```
WITH my_cte AS (
   SELECT foo, baz FROM bar WHERE foo > 1
)
SELECT * FROM my_cte WHERE
```

and simplify it into either 
`SELECT foo, baz FROM bar WHERE foo > 1`
or 
`SELECT * FROM my_cte WHERE`
 depending on whether the cursor is inside or outside the CTE body. If outside, parse the fieldnames and cte names and represent them in a manner analogous to real database tables. That way, they can be injected into the completion machinery, so CTE names get suggested alongside table names, and CTE column names get suggested when appropriate. Currently, CTEs are not suggested for joins or join conditions, but I'll fix that in a follow up PR. 
","CTE-aware suggestions
This is quite the PR. I'll probably take some time to review this, but I'll get started tonight.

Sorry about taking so long. Last week has not been quite busy with the kids. I'll try and find some time to review this soon. 

👏  This has got to be the best PR I've seen in my life. 

Nicely broken up commits that clearly show a progression of the feature. I'm very very happy that you took the time to make sensible commits so the reviewer doesn't get lost.

Very well done. I'm especially thankful that you thought about preserving the blame history by duplicating the file. 

I just have one question, did you break them up into nice bite sized commits after you did the entire feature or did this progression occur naturally? Because this is a clear showcase of well thought out design and implementation.

☕ 🍵 🍨 🍻 

Thanks! It's a pretty heavily rebased and reordered feature branch. There were a lot of false starts and dead ends. Once sqlparse 0.20 was released I rewrote a bunch of the CTE processing code and at that point everything was such a mess I reordered everything with an eye towards a readable history. Glad it paid off.
",2016-07-27 20:02:58,2016-08-09 05:10:29
646,552,"Reviewer: @darikg 
","Fix failing tests.
Fantastic!
",2016-07-27 06:17:41,2016-07-27 09:55:09
647,551,"Hi, I have seen this and mycli - is there also a sqlitecli? Would be great!
","FR: sqlitecli?
I don't have the time to create a new one. But I'm willing to help anyone who is interested in taking the initiative and doing a cli for sqlite.
",2016-07-24 10:58:49,2016-08-21 04:34:44
648,550,"**EDIT**: Looks like Homebrew is lagging. This was fixed in 1.1.0.

pgcli 1.0.0 on OSX, installed via Homebrew running on Python 2.7.11:

When starting up with a Postgres connection URL of the form `postgres://username:password@localhost:5432/db` I get the following crash:

```
Traceback (most recent call last):
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==1.0.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 700, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 680, in main
    rv = self.invoke(ctx)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 873, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 508, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 728, in cli
    pgcli.connect_uri(database)
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 265, in connect_uri
    self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
  File ""/usr/local/Cellar/pgcli/1.0.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 265, in <lambda>
    self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urlparse.py"", line 349, in unquote
    bits = s.split('%')
AttributeError: 'int' object has no attribute 'split'
```

This is because `urlparse` converts the port into an integer. Adding `str()` around the port number fixes the problem.

``` python
def connect_uri(self, uri):
        uri = urlparse(uri)
        database = uri.path[1:]  # ignore the leading fwd slash
        arguments = [database, uri.hostname, uri.username,
                     str(uri.port) if uri.port is not None else '', uri.password]
        # unquote each URI part (they may be percent encoded)
        self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
```
",Database URI with port number causes crash in 1.0.0,2016-07-20 20:24:56,2016-07-20 20:30:59
649,549,"The tests pass with python-2.7 and python-3.5, but other than that I didn't do much testing.
","Upgrade to sqlparse-0.2.0, required for Python-3.5 support
Nice! Those test failures look unrelated to the PR, let me see if I can figure out what's wrong

@amjith Any idea what's going on here? All the test failures are tests with unicode in `test_pgexecute`. I can reproduce it locally, but upgrading sqlparse doesn't change any other dependencies and the PR doesn't touch `pgexecute` :confused: I can fix the failing tests by adding `from __future__ import unicode_literals` but that breaks another test.

👍 

I wonder if sqlparse is enforcing some encoding while it parses the query. I'll test this locally to see what it does with tables with unicode. 

Sorry about the delayed reply. I have family visiting from India and it's hard to find time. :(

Yup! sqlparse is being ""helpful"" by automatically casting strings as unicode while [splitting](https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py#L220) them, so the tests are getting messed up. 

We should be explicitly casting the strings to unicode. I'm going to merge this PR and then update the tests with a subsequent PR. 

Thanks for the PR @dev-zero. 🎌 
",2016-07-20 08:52:32,2016-07-27 06:16:36
650,548,"I can also make this configurable if you are keen

![screen shot 2016-07-15 at 12 14 08 pm](https://cloud.githubusercontent.com/assets/2032984/16872603/afca99c0-4a85-11e6-8a82-ee2de4c23cf0.png)
","Show host and user information in prompt
We already made it configurable in [mycli](https://github.com/dbcli/mycli):

https://github.com/dbcli/mycli/blob/master/mycli/myclirc#L53-L60

I'd rather port the same functionality to pgcli.

@j-bennet done!

@limdauto You also need a default there, for users that don't have it in config.

@j-bennet Cool I will add it this weekend. It was just that when I read existing code here, it doesn't seem too concerned with defaults. mycli seems much more robust in that regards.

@j-bennet updated!

> It was just that when I read existing code here, it doesn't seem too concerned with defaults. mycli seems much more robust in that regards.

I want to address why we didn't deal with defaults in pgcli. It's because when you try to read a value from the config file it is always superimposed on top of the default config file (pgclirc) that is shipped with every version of pgcli. 

So a missing value for prompt in the user's config file won't result in an exception because it will be supplied by the default `pgclirc` file. So even though it is a good practice to supply the default values (as requested by j-bennet) it is not strictly required in order to work.

I'd like to think that we try to maintain the same level of robustness for both mycli as well as pgcli. So if you find that one or the other is lacking in quality, I'll be happy to address them.

The functionality in this PR looks great!! Thank you for taking the time to contribute. 🍰 

I'll let @j-bennet do the final review and merge this in. 

Looks good to me. I'd say go ahead and also port overriding prompt at run-time by providing a command line parameter, like mycli does:

https://github.com/dbcli/mycli/blob/master/mycli/main.py#L724-L726

but that's probably an overkill until someone asks for that feature.

Merging.

👍 
",2016-07-15 11:14:43,2016-07-18 03:13:24
651,547,"I'd like to add address before the dbname in the prompt so that I know which server I'm connecting to. Is it possible to make this configurable?

Related PR: https://github.com/dbcli/pgcli/pull/548
",Can we show more information in the prompt?,2016-07-15 09:55:45,2016-07-18 11:05:33
652,546,"When I tried connecting to Redshift with pgcli v 1.0 I got a `alias timestamptz not supported` error. I made this change to avoid this incompatibility.
","Replace timestamptz alias since AWS Redshift does not support it
Thanks! I'll just merge this in.
",2016-07-09 12:44:43,2016-07-13 07:34:20
653,545,"Somewhere along the way we broke the order of suggestions in the completion menu. 

After a FROM keyword we should suggest schemas, then tables and then functions, but instead we're now sorting everything alphabetically (with some reordering based on frequency). This means functions bubble up to the top and it is impossible to see the list of tables in the menu without scrolling indefinitely. 

Here's an example: 

<img width=""783"" alt=""1__2_0_python2_7_-__pgcli___users_amjith____tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/16690308/1836ce52-44dc-11e6-8831-1c14bdfdf1ba.png"">

This is also true for the WHERE clause: 

<img width=""901"" alt=""1__2_0_python2_7_-__pgcli___users_amjith____tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/16690349/4bba04a6-44dc-11e6-90db-e1dc9c32571b.png"">

My recommendation is to go back to the old method where we have separate groups of suggestions one group for frequency on the top, next group is schemas, next tables, then functions. 

/cc @koljonen @darikg Thoughts?
","Suggestion sorting needs priority
Some proof-of-concept code: https://github.com/dbcli/pgcli/tree/koljonen/suggestion_sorting
A thing I didn't implement there: In the FROM clause, record-returning functions should be sorted before scalar-returning.

I rely on fuzzy matching enough that I barely even notice the order of suggestions, I kinda just bash at the keyboard until the first suggestion is what I want. So I don't necessarily like 'hard' grouping suggestions by type. I agree that prioritizing functions ahead of schemas and tables in the absence of any fuzzy matching is pretty distasteful though. 

@koljonen I just tried your branch and it seems to do exactly what I want. It might be better to pull out the `type_priority` values into a single global var instead of spreading out the magic constants to all the `find_matches` function calls though

I've been traveling the past week so I haven't had a chance to play around with the solution yet. 

@darikg I too rely on the fuzzy matching to do the heavy lifting. But often times I'm opening a new database that I don't know anything about. During those times I need to know the list of tables in order to start guessing. That was the main impetus for this request. 

@koljonen I'll take a look at your branch soon-ish (Monday probably) and provide my feedback. Thanks for the quick turn around.

I've tried out the branch and I like it. I have one suggestion for the priority (this is up for discussion). We typically bubble up the recently used table name to the top, I think that we should create a new category called 'recently_used' and position that above all other categories. 

<img width=""790"" alt=""2__0_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli____tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/16938981/2354c7fe-4d32-11e6-9fa4-61290fbd8053.png"">

Does that make sense?

As in there'd be some threshold `x`, where if a suggestion has been used in the past `x` queries, it belongs in recently_used?

That's a good point. Maybe we have a maximum of 5 unique items to show in the recently used category? 

@koljonen Would you mind creating a PR from your branch? What you have is definitely an improvement over the current state and I'd like to have that merged and released soon. We can iterate on further improvements in a later release.

This issue is addressed in version (v1.2.0).
",2016-07-08 14:20:06,2016-09-03 03:31:40
654,544,"(this is a minor issue as `\watch` is not a well known command)

PostgreSQL has a `\watch` command to repeat queries every X seconds (as documented here): https://www.postgresql.org/docs/current/static/app-psql.html

It works perfectly on the psql CLI:

``` sql
gab@db > SELECT 1; \watch 1;
 ?column? 
----------
        1
(1 row)

Time: 0.187 ms
Watch every 1s  Wed Jul  6 12:01:54 2016

 ?column? 
----------
        1
(1 row)

Time: 0.047 ms
Watch every 1s  Wed Jul  6 12:01:55 2016

 ?column? 
----------
        1
(1 row)

Time: 0.154 ms
Watch every 1s  Wed Jul  6 12:01:56 2016

 ?column? 
----------
        1
(1 row)

Time: 0.164 ms
```

It does not work with pgcli:

``` sql
db> SELECT 1; \watch 1;
+------------+
|   ?column? |
|------------|
|          1 |
+------------+
SELECT 1
syntax error at or near ""\""
LINE 1: \watch 1
        ^

Time: 0.003s
```
","\watch command does not work
This has not been implemented yet. But this is something we want to support.

great, thanks Amjith!

Please upgrade to v1.2.0. 

```
pip install -U pgcli
```

This issue is addressed in the new version.

Just tested and it works great, thank you so much

Version: 1.5.1
Doesn't work.
ОШИБКА:  ошибка синтаксиса (примерное положение: ""/"")
LINE 1: /watch 1

ERROR: Syntax error
@j-bennet Can you take a look at this? I don't have a working postgres on my new computer to debug this.
@levin-kelevra Were you entering `/watch` or `\watch`? The error seems to suggest that it was a forward slash. It should be a backslash.
I'm going to leave the issue closed since there's been no update. @levin-kelevra, feel free to reopen if you're still having problems.
This also does not work for me in 1.5.1 on OSX:

```
select * from users where id >12;\watch 1;
...
SELECT 2
syntax error at or near ""\""
LINE 1: \watch 1
        ^
```
@ivyleavedtoadflax Now I got it. This happens when you don't have a space after the semicolon:

```
select * from users where id >12;\watch 1;
```

This will work:

```
select * from users where id >12; \watch 1;
```

Yes, it's a valid bug, because both versions should work. Thanks for the report.
This also fails when `\watch` is on a new line from a query loaded with `\i`. e.g.:

```
select * from users;
\watch 1;
```
Fixed in pgspecial 1.8.0.
This is *not* fixed.

```
durr@postgres-server /e/a/apt.conf.d> sudo -H -u postgres pgcli
Version: 1.8.2
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres> \timing
postgres> select * from pg_stat_progress_vacuum;
+-------+---------+------------+----------+----------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
| pid   | datid   | datname    | relid    | phase          | heap_blks_total   | heap_blks_scanned   | heap_blks_vacuumed   | index_vacuum_count   | max_dead_tuples   | num_dead_tuples   |
|-------+---------+------------+----------+----------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------|
| 7364  | 16412   | webarchive | 38269410 | vacuuming heap | 9302840           | 9302840             | 5240289              | 1                    | 178956970         | 25702032          |
| 5029  | 16412   | webarchive | 38269400 | scanning heap  | 12280964          | 2858029             | 0                    | 0                    | 178956970         | 16892993          |
+-------+---------+------------+----------+----------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
SELECT 2
Time: 0.010s
postgres> \watch
syntax error at or near ""\""
LINE 1: \watch
        ^
```
Oh, I see, it's just it's behaviour is different from `psql`:

```
postgres> select * from pg_stat_progress_vacuum;
+-------+---------+------------+-----------+-------------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
| pid   | datid   | datname    | relid     | phase             | heap_blks_total   | heap_blks_scanned   | heap_blks_vacuumed   | index_vacuum_count   | max_dead_tuples   | num_dead_tuples   |
|-------+---------+------------+-----------+-------------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------|
| 7364  | 16412   | webarchive | 38269410  | vacuuming heap    | 9302840           | 9302840             | 5261471              | 1                    | 178956970         | 25702032          |
| 5029  | 16412   | webarchive | 38269400  | scanning heap     | 12280964          | 2967063             | 0                    | 0                    | 178956970         | 16943994          |
| 11173 | 16411   | ttrss      | 230002899 | vacuuming indexes | 21                | 21                  | 0                    | 0                    | 6111              | 638               |
+-------+---------+------------+-----------+-------------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
SELECT 3
Time: 0.005s
postgres> \watch 1
syntax error at or near ""\""
LINE 1: \watch 1
        ^

Time: 0.002s
postgres> select * from pg_stat_progress_vacuum; \watch
+-------+---------+------------+-----------+---------------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
| pid   | datid   | datname    | relid     | phase               | heap_blks_total   | heap_blks_scanned   | heap_blks_vacuumed   | index_vacuum_count   | max_dead_tuples   | num_dead_tuples   |
|-------+---------+------------+-----------+---------------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------|
| 7364  | 16412   | webarchive | 38269410  | vacuuming heap      | 9302840           | 9302840             | 5262691              | 1                    | 178956970         | 25702032          |
| 5029  | 16412   | webarchive | 38269400  | scanning heap       | 12280964          | 2973478             | 0                    | 0                    | 178956970         | 16947189          |
| 11173 | 16411   | ttrss      | 230002905 | cleaning up indexes | 3547              | 3547                | 3547                 | 0                    | 1032177           | 0                 |
+-------+---------+------------+-----------+---------------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
SELECT 3
syntax error at or near ""\""
LINE 1: \watch
        ^

Time: 0.007s
postgres> select * from pg_stat_progress_vacuum; \watch 1
+-------+---------+------------+----------+----------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
| pid   | datid   | datname    | relid    | phase          | heap_blks_total   | heap_blks_scanned   | heap_blks_vacuumed   | index_vacuum_count   | max_dead_tuples   | num_dead_tuples   |
|-------+---------+------------+----------+----------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------|
| 7364  | 16412   | webarchive | 38269410 | vacuuming heap | 9302840           | 9302840             | 5263696              | 1                    | 178956970         | 25702032          |
| 5029  | 16412   | webarchive | 38269400 | scanning heap  | 12280964          | 2977029             | 0                    | 0                    | 178956970         | 16953488          |
+-------+---------+------------+----------+----------------+-------------------+---------------------+----------------------+----------------------+-------------------+-------------------+
SELECT 2
Time: 0.005s
Waiting for 1 seconds before repeating
```

So, the issue is then:
 - `\watch` as a single statement does not work (in `psql`, `\watch` with no SQL in the command line assumes you want to watch the previously executed query).
 - `\watch` with no argument does not work (`psql` defaults to 2 seconds if the interval is not specified).
 - In both cases, the (mis)use of the `\watch` command doesn't lead to any sort of helpful output.
 - `\?` doesn't list the mnemonics of `\watch` at all, so you don't have anything to base how you are *supposed* to use it off of.

For reference, here is how it works in `psql`:

```
durr@postgres-server /e/a/apt.conf.d> sudo -H -u postgres psql
psql (9.6.6)
Type ""help"" for help.

postgres=# select * from pg_stat_progress_vacuum;
 pid  | datid |  datname   |  relid   |     phase      | heap_blks_total | heap_blks_scanned | heap_blks_vacuumed | index_vacuum_count | max_dead_tuples | num_dead_tuples
------+-------+------------+----------+----------------+-----------------+-------------------+--------------------+--------------------+-----------------+-----------------
 7364 | 16412 | webarchive | 38269410 | vacuuming heap |         9302840 |           9302840 |            5321863 |                  1 |       178956970 |        25702032
 5029 | 16412 | webarchive | 38269400 | scanning heap  |        12280964 |           3141117 |                  0 |                  0 |       178956970 |        17191925
(2 rows)

postgres=# \watch
                                                                    Sun Jan 14 22:49:41 2018 (every 2s)

 pid  | datid |  datname   |  relid   |     phase      | heap_blks_total | heap_blks_scanned | heap_blks_vacuumed | index_vacuum_count | max_dead_tuples | num_dead_tuples
------+-------+------------+----------+----------------+-----------------+-------------------+--------------------+--------------------+-----------------+-----------------
 7364 | 16412 | webarchive | 38269410 | vacuuming heap |         9302840 |           9302840 |            5322342 |                  1 |       178956970 |        25702032
 5029 | 16412 | webarchive | 38269400 | scanning heap  |        12280964 |           3142117 |                  0 |                  0 |       178956970 |        17195062
(2 rows)

                                                                    Sun Jan 14 22:49:43 2018 (every 2s)

 pid  | datid |  datname   |  relid   |     phase      | heap_blks_total | heap_blks_scanned | heap_blks_vacuumed | index_vacuum_count | max_dead_tuples | num_dead_tuples
------+-------+------------+----------+----------------+-----------------+-------------------+--------------------+--------------------+-----------------+-----------------
 7364 | 16412 | webarchive | 38269410 | vacuuming heap |         9302840 |           9302840 |            5322597 |                  1 |       178956970 |        25702032
 5029 | 16412 | webarchive | 38269400 | scanning heap  |        12280964 |           3142635 |                  0 |                  0 |       178956970 |        17196703
(2 rows)
```

Personally, I have **never** used watch as part of the query, but rather I futz with the query until it's returning what I want, and *then* watch it, so I initially thought `pgcli` didn't support `\watch` at all.
Good point. It does work, but the interface is not very user-friendly.
I guess the question is more ""Is `\watched` supposed to mimic the `psql` `\watch` behaviour exactly (as it seems the other `pgcli` `\xxxx` functions do?"" 

If `pgcli` is just trying to be feature *similar*, it's certainly there already, just fixing `\?` would suffice. 

If `pgcli` is trying to act like a better `psql`, it's definitely not correct yet.
I also just ran into this not working with a multiline query - e.g.
```
      <bunch of sql...>
      ORDER BY a.query_start; \watch 15;

<result>
SELECT 3
syntax error at or near ""\""
LINE 1: \watch 15
```

If it wasn't required to have `\watch` on the same line as the query I'd just use that and move on, but because it is necessary I figured I'd leave a comment. I'm using version 1.10.3 on mac.",2016-07-06 16:03:23,
655,543,"@amjith mind taking a look?

**Original commit message:**
This commit makes it so that given `INSERT INTO foo(<cursor1>) SELECT <cursor2> FROM bar;`, we suggest `bar` columns for `<cursor2>` and `foo` columns for `<cursor1>`. Previous behaviour is sugggesting columns from both tables in both cases.
","Better scoping for tables in insert statements
Looks good to me. 🎄 
",2016-07-06 15:42:49,2016-07-06 23:50:20
656,542,"Is it possible for your to sign release tags? This way it would be possible to verify that the source code releases come from the same source.

   http://stackoverflow.com/questions/5663733/signing-tags-in-git

Thanks in advance.
","Please sign your releases and/or git tags
Just a few days ago my coworker showed me that it's possible to sign commits. I was going to look into it, this is a nice excuse for me to do so. :)

On 07/05/2016 04:08 PM, Amjith Ramanujam wrote:

> Just a few days ago my coworker showed me that it's possible to sign
> commits. I was going to look into it, this is a nice excuse for me to do
> so. :)

Very good! Signing commits is good too but for most people just
downloading software, signed release tags

```
git tag -s release_tag
```

are more than good enough. These verify the entire source tree is 
authentic up to that point.

Cheers,
Adam

Release script is updated to do this. Closing.",2016-07-05 13:36:38,2017-06-09 19:04:53
657,541,"I'd like to do this release to fix the crashes caused due to the url parsing and redshift fix. This release also bumps the pgspecial version to 1.5.0 which adds support for `\db` command. 

@dbcli/pgcli-core review please. 
","Update changelog for release 1.1.0.
lgtm
",2016-07-02 06:14:58,2016-07-04 03:31:38
658,540,"Reviewer: @j-bennet 

This is a pending on a pgspecial release (https://github.com/dbcli/pgspecial/pull/21). 
","Upgrade pgspecial to 1.5.0
pgspecial 1.5.0 is now on pypi.

Looks like the 1.5.0 tarball was not uploaded to pypi. I think the release script for pgspecial might not have the `sdist upload` step. 

@j-bennet Would you mind updating the script and uploading the latest version to pypi? 

@amjith You're right. It's there now. Sorry about that.
",2016-06-30 04:59:30,2016-07-01 04:20:52
659,539,"cf #537 
not tested
bugfix: don't call att.atttypid::regtype::text in old versions of postgresql
","Possible fix for redshift?
Here's what I get when I try out this version on Redshift:

```
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
analytics> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrr
    self.run()
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrn
    self.__target(*self.__args, **self.__kwargs)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 115, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgcompleter.py"", line 160, in extend_functions
    for f in func_data:
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgexecute.py"", line 478, in functions
    cur.execute(query)
ProgrammingError: column ""proallargtypes"" does not exist in p, n, unnamed_join
```

Fetched the changes and see the following on Redshift:

```
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
analytics> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrr
    self.run()
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrn
    self.__target(*self.__args, **self.__kwargs)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 115, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgcompleter.py"", line 160, in extend_functions
    for f in func_data:
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgexecute.py"", line 492, in functions
    cur.execute(query)
ProgrammingError: function array_length(oidvector, integer) does not exist
HINT:  No function matches the given name and argument types. You may need to add explicit type cast.
```

Here's hoping the third try's the charm

```
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
analytics> Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrr
    self.run()
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrn
    self.__target(*self.__args, **self.__kwargs)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 115, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgcompleter.py"", line 160, in extend_functions
    for f in func_data:
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgexecute.py"", line 492, in functions
    cur.execute(query)
ProgrammingError: column p.proargmodes does not exist
```

I'm terrible at this

I'm still seeing the same error after updating with the latest commit:

```
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrr
    self.run()
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/thrn
    self.__target(*self.__args, **self.__kwargs)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/Users/jeffklukas/Code/pgcli/pgcli/completion_refresher.py"", line 115, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgcompleter.py"", line 160, in extend_functions
    for f in func_data:
  File ""/Users/jeffklukas/Code/pgcli/pgcli/pgexecute.py"", line 492, in functions
    cur.execute(query)
ProgrammingError: column p.proargmodes does not exist
```

Can you try again? I think I missed committing something

It works! I'm getting valid table name completions on Redshift. 👍 

:fireworks: 

Nice job shooting with a blindfold while riding a horse and landing on target. 

Wow @darikg. Just wow.

I'm going to merge this and do a quick bug fix release. 🍐 

Does this automatically get pushed to pypi or will I need to install from source?

You will have to install from master. Please use: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

I haven't released it to PyPI yet. It'll take a day or two.
",2016-06-29 18:33:21,2016-06-30 04:42:27
660,538,"When the database URL contains a port, uri.port is (at least in Python 2.7.6) an integer, not a string, so urlparse.unquote chokes on it.
Fixes issue #536, but is probably worth verifying on Python 3.
","Repair exception thrown on urls with ports
Works great. Thanks for the quick fix. 🍨 
",2016-06-29 18:00:21,2016-06-30 04:36:05
661,537,"I just did a `pip install -U pgcli` to get 1.0.0 and attempted to connect to Redshift. The shell opens to a prompt like expected:

```
Version: 1.0.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
analytics>
```

But within a few seconds, the following exception appears:

```
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line r
    self.run()
  File ""/usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line n
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 65, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 105, in refresh_tables
    completer.extend_columns(executor.table_columns(), kind='tables')
  File ""/usr/local/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 142, in extend_columns
    for schema, relname, colname, datatype in column_data:
  File ""/usr/local/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 364, in table_columns
    for row in self._columns(kinds=['r']):
  File ""/usr/local/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 359, in _columns
    cur.execute(sql)
ProgrammingError: cannot cast type regtype to character varying
```

I can use the shell, but autocompletion of table names is not working.
","Redshift connection gets cast error in completion_refresh 
Testing this since Redshift was announced to be working in https://github.com/dbcli/pgcli/issues/282.

BTW, I'm very excited about the finally having a chance to use pgcli now that it supports Redshift.

Sorry! The oldest version of postgresql I've tested this on was 8.4, but it looks like Redshift is 8.0? Let me see if I can get it installed somewhere. I think I know how to fix it

Yeah, Redshift is unfortunately 8.0.2-based, I believe. Glad to hear there's promise for finding a fix.

I can't figure out how to install pg8.0. I have what I think will fix it in #539, if someone could try that out (or somehow get me an account on a pg8.0 server) I'd appreciate it.

This is now fixed in the latest release v1.1.0
Please upgrade: 

```
pip install -U pgcli
```
",2016-06-29 12:22:32,2016-07-04 03:33:26
662,536,"I'm getting this:

```
pgcli 'postgresql:secretpassword@secrethostname:5432/mydatabase'
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 716, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 696, in main
    rv = self.invoke(ctx)
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 889, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/lib/python3.5/site-packages/click/core.py"", line 534, in invoke
    return callback(*args, **kwargs)
  File ""/usr/lib/python3.5/site-packages/pgcli/main.py"", line 728, in cli
    pgcli.connect_uri(database)
  File ""/usr/lib/python3.5/site-packages/pgcli/main.py"", line 265, in connect_uri
    self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
  File ""/usr/lib/python3.5/site-packages/pgcli/main.py"", line 265, in <lambda>
    self.connect(*list(map(lambda p: unquote(p) if p else p, arguments)))
  File ""/usr/lib/python3.5/urllib/parse.py"", line 537, in unquote
    if '%' not in string:
TypeError: argument of type 'int' is not iterable
```

This happens with the latest release as well as the latest git commit.
","Crash when entering standard psql connect string
What version of pgcli are you using? Can you try upgrading to the latest? 

```
pip install -U pgcli
```

At the bottom of my issue I said it was using HEAD at the time and the newest release at the time (which was v0.20.1).

@svenstaro Fix available in master. Can you install from master? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Fix works for me, thanks!
",2016-06-24 21:04:25,2016-07-04 15:05:54
663,535,"In my psqlrc file, I have the following:

\set HISTFILE ~/.psql_history- :DBNAME

This allows for a history file per database I connect to, making it easy to get the history of commands for that database.

It would be nice if that were supported, ideally from parsing .psqlrc, to make switching easier.

Similarly, it would be nice if the history were done the same way as psql's (which is unfortunately not time stamped), again to ease transition and allow a new user to just start up pgcli and get their existing history.
","Command history configuration/HISTFILE option
For me a history-file-per-database ability is a must.  I connect to a lot of different databases and I don't want history from other DBs showing up when working with my current DB.  This is going to keep me from using this great product.
Adding my +1 for this as well as for `HISTCONTROL ignoredups` support. Love pgcli!
Here's a dumb, hacky workaround for those who want history-file-per-database with the current release version of pgcli.

If, like me, you formerly used the environment variable `PSQL_HISTORY` (or any other variable) to configure your history-file-per-database setup, you can launch pgcli like so:

```
pgcli --pgclirc =(sed 's@history_file =.*@history_file = '$PSQL_HISTORY'@' ~/.config/pgcli/config) your_database_name
```

To explain briefly: The above creates a new temporary config file that is the same as the actual pgcli config file, only with the `history_file = ...` setting replaced to point to our desired history file (`$PSQL_HISTORY` in this case). Then pgcli is launched with the temporary config file.

The `=(...)` is a zsh-ism (sorry) for creating a temporary file, and is used in a similar fashion to `<(...)` of bash and others. In this case `<(...)` seems to not be suitable, possibly due to the way pgcli reads the config file. `=(...)` can easily be emulated in other shells. See: http://zsh.sourceforge.net/Doc/Release/Expansion.html#Process-Substitution

Create an alias or shell function incorporating the above approach, and you're good to go.

A more convenient solution would be to create a shell function that extracts the db name (and maybe host, etc) from the command line, and incorporates that into the `history_file` path used.",2016-06-24 16:19:31,
664,534,"Reviewer: @stuartquin 
","Set pgspecial dependency version to 1.4 or higher.
Bump.

All looks good, re-isntalled local version and ran some test queries, happy to merge. 
Good stuff :+1: 
",2016-06-21 08:00:53,2016-06-23 20:27:32
665,533,"Click 3 is no more. I'd suggest linking to the root of the Click website and letting it redirect to the current stable version since they seem to be removing pages for the older versions.
","Fix link to Click
You're right. I was just being lazy and copied whatever was in my url bar. 

Thanks for fixing the link. 🚀 
",2016-06-21 04:28:13,2016-06-21 04:43:07
666,532,"The function signature for `suggest_based_on_last_token` was starting to get pretty unwieldy so I wrapped most of those variables into a standalone class unimaginably named `SqlDocument`. This cleaned up  `suggest_based_on_last_token` a little bit and also formalized a couple of repeated patterns there, specifically schema name extraction and the reduction of `text_before_cursor` to a more simplified version by finding the preceding token.
","Some sqlcompletion refactoring
I like this change. Keeps the code organized. Once we decide on whether to call it `SqlDocument` or `SqlStatement` we can merge this. 

Ok, SqlStatement was better. Updated.

Looks great. ♦️ ♦️ 
",2016-06-21 01:51:40,2016-06-24 13:43:06
667,531,"@darikg, you showed some interest in this, so would you like to take a look?

**Original commit message:**
If config.main.generate_aliases is True, for `SELECT * FROM`, we suggest `FooBar FB` and `foo_bar fb` instead of `FooBar` and `foo_bar`, respectively.
To be able to add a test, I had to add support for testing with different settings, which meant I could also add tests for casing.

There are two non-obvious changes that I can think of:
1. The lexical sorting of matches is modified so as to sort spaces and underscores before letters and to sort case-insensitively. This is so that e.g `Foob F` comes before 'FooBar FB' when `foob` is input.
2. We now suggest `some_func()` instead of `some_func` (because suggesting `some_func sf` didn't make any sense).
","Suggest table aliases + add tests for casing
Yup I'm definitely interested, will start going through it in the next couple days

It just occurred to me that another way to do this would be to make the alias a separate suggestion AFTER the table/view/function suggestion. You would just check if `last_token` is an identifier, and then check get_previous_keyword to see if we're in a state where an alias would be valid.

I've rebased and reorganized a bit.

I think the user experience of getting the alias automatically is better; particularly for join suggestions.

I tried a new approach with a FromClauseItem suggestion type combining the three aliasable types. The main benefit of this is that the logic for figuring out whether to add an alias becomes a lot simpler. (Code where `None`, `[]` and `not hasattr` aren't equivalent is bound to be misunderstood ...)

I'll go over this more carefully tomorrow. The `FromClauseItem` approach makes a lot of sense!

Sorry, this slipped off my radar. This is great! 
",2016-06-20 19:43:31,2016-07-06 11:39:56
668,530,"This ports `less_chatty` config option and `NONE` log level from `mycli` to address issue #518.

Related PR:
https://github.com/dbcli/mycli/pull/268
","Ported less_chatty option from mycli.
It looks so naked without the startup messages. 😢 

Yes, it does! But we got this request in both pgcli and mycli. I assume it's a wanted feature for some.
",2016-06-19 21:18:33,2016-06-20 03:35:29
669,529,"@darikg you mind taking a look at this?

This PR has two parts (plus some cosmetic changes):
1. The first commit just consolidates existing duplicated logic in the two test_smart_completion\* files into a new file. 
2. Then there are a six commits that make it so that, for some type of completion (table, column, ...), instead of listing every individual completion we expect to get, we just say what kind of completions to get from the test `metadata` dict. E.g. instead of listing every table in the schema `foo` (say for `SELECT * FROM foo.<cursor>`), we simply say we expect `testdata.tables('foo')`. This means we get to write less test code and that fewer tests will break when we expand the test data. 
","Remove duplication from smart completion tests
I think on one hand it's a good thing to have very explicit tests and too much abstraction can obscure what's actually being tested, but on the other hand these tests were definitely super verbose and that hampered readability and extensibility. On the whole I'm in favor of this. What do you think @amjith?

I'm a huge fan of this change. I love how the tests are not only succinct but they're also make logical sense. 

I think the @darikg's suggestion to return the completer object but not storing it should get around the idea of the completer being mutated by a test. 

Thanks for making the change @koljonen. 👍 

Yeah, that conflict between explicitness and DRYness is why I decided to autogenerate only the most trivial cases, i.e. those that can be done with a simple lookup in the `metadata` dict. I did try autogenerating the wildcard expansions as well, but I felt that added a bit too much complexity for too little benefit.
",2016-06-19 17:48:18,2016-06-20 16:28:46
670,528,"@darikg I think this one's for you.

**Commit message:**
When self-joining a table with an FK to or from some other table, we got a false FK-join suggestion for that column.
There was also a problem with quoted tables not being quoted in the join condition.
And there were a couple of problems when trying to join a non-existent table or using a non-existent qualifier (`SELECT * FROM Foo JOIN Bar ON Meow.`).

I also rewrote get_join_condition_matches a bit in the process, hopefully making it a bit simpler.
","Fix some join-condition issues
Looks good!
",2016-06-16 18:26:04,2016-06-16 22:15:39
671,527,"@darikg  you feel like taking a look at this?

**Original commit message:**
This is based on my previous work on suggesting join conditions, but here instead we suggest the whole join. What we do is simply check all the tables in the statement for FK relationships and then suggest joins based on those. I think this will not only save key presses, but also be rather useful when exploring an unfamiliar (part of a) database.

There's one non-obvious change in this commit (that I can think of): When calling **sqlcompletion.text_before_cursor**, the **text_before_cursor** argument now no longer includes **word_before_cursor**. This is because for 'SELECT \* FROM foo JOIN bar<cursor>', we would otherwise consider the table **bar** already included in the statement and thus suggest e.g. 'baz on baz.barid = bar.barid'.
","For 'JOIN <cursor>', suggest 'foo on foo.fooid = bar.fooid'
Yup, I'm on it

This is a nice user experience. We need tests in the two `test_smart_completion` files.

I haven't looked in detail at the text_before_cursor stuff yet, but I'm a little confused at the goal. Let's say we have three tables, `foo`, `bar`, and `qux` that all share a common key. Is the intention that `select * from foo join q` should suggest a join, or not?

Also, any thoughts on how this would interact will a similar feature that would suggest `JOIN ... USING` completions instead of `JOIN ... ON`? Not saying that has to be done here, just wondering.

The text_before_cursor thing is so that in your example, if we have `select * from foo join qux<cursor>`, we don't get the suggestion `bar on bar.quxid = qux.quxid` (which would clearly be a bug). We do want to get `qux on qux.quxid = foo.quxid` for `select * from foo join q<cursor>`, though.

I'd rather not have both an `ON` suggestion and a `USING` suggestion for the same logical join, so I think a good approach might be to have a config setting that would make `get_join_matches` output a `USING` join whenever the two columns have the same name and an `ON` join otherwise. 

Sorry about the delay, I was away from my computer all weekend.

> if we have select \* from foo join qux<cursor>, we don't get the suggestion bar on bar.quxid = qux.quxid  (which would clearly be a bug).

I'm not so sure about that. With fuzzy matching `select * from oo` suggests the table `foo` so having fuzzy matching also operate in the join conditions makes sense to me too. Actually, it seems it currently is so I'm still a little confused by the changes in sqlcompletion.

Here's a test I just added to `test_smart_completion_public_schema_only`:

```
@pytest.mark.parametrize('text', [
    'SELECT * FROM ""Users"" u JOIN u',
    'SELECT * FROM ""Users"" u JOIN uid',
    'SELECT * FROM ""Users"" u JOIN userid',
    'SELECT * FROM ""Users"" u JOIN id',
])
def test_suggested_joins_fuzzy(completer, complete_event, text):
    position = len(text)
    result = set(completer.get_completions(
        Document(text=text, cursor_position=position),
        complete_event))
    last_word = text.split()[-1]
    expected = Completion(text='users ON users.id = u.userid',
                          start_position=-len(last_word), display_meta='join')
    assert expected in result
```

All 4 of the conditions pass, which I think is correct behavior, but you're saying only the first should pass?

Also, I just noticed that join condition suggestions support either FK relationships, or name matches, but the join suggestions are only FK-based. Is that intentional?

Sorry, I think I was a bit unclear. The `text_before_cursor` thing is just there to prevent the generation of invalid code such as `select * from foo join bar on bar.quxid = qux.quxid`. That is, without it we'd consider `text_before_cursor` as one of the tables already present in the from clause.

I did leave out name-based joins intentionally, as I thought there might just be too many of them and that they'd probably not be all that useful. It is quite possible I'll change my mind on that after using this feature for a while.

Ahh I finally get it. Sorry for being slow. Can you add a test to capture that behavior? I just pointed out a spot where it's really easy to do that. Could you also add that test I suggested in the previous comment? Then this will be good to merge

While working on adding aliases for self joins, I noticed some problems related to casing and quoted identifiers, so I had to do some more changes.

The auto-aliasing for self joins is pretty cool. It's too bad it's basically impossible to generalize to suggesting aliases in all cases. Like if it could some know that after `FROM foo f JOIN` what I really want  is `JOIN bar b ON f.id = b.id` instead of `JOIN bar ON f.id = bar.id`. Just daydreaming out loud here. 

I've actually experimented a bit with alias generation (FooBar -> FB, baz_qux -> bq). Those were just toggled with a config setting, though. I put that branch on hold after running into some complications, but I'll probably get back to it pretty soon.

Wow, that's awesome. Let's just move `generate_alias` into a standalone function with a basic docstring and then we can merge this. Hopefully more sophisticated alias generation will be a future PR someday :pray: 

Awesome
",2016-06-08 23:01:19,2016-06-16 12:18:01
672,526,"@amjith you want to merge this tiny fix?

Running the function in #430, I noticed the warnings were printed in reverse order.
","Fix issue where notices/warnings/... were printed in reverse order
👑 
",2016-06-07 21:55:29,2016-06-07 22:09:15
673,525,"E.g. so `ALTER TABLE foo ALTER COLUMN` suggests columns from `foo`. 

@koljonen can you review & merge?
","`column` keyword suggests columns
Thank you for the tests. 🎓 

I think **ADD COLUMN** should be excluded.

Actually no. We should include the suggestions for ADD COLUMN to make sure the user knows about the existence of a column similar to the one they are adding. 

Yeah, it's consistent with how e.g. Create table suggests table names. It's actually pretty useful
",2016-06-07 18:55:29,2016-06-07 21:28:45
674,524,"Since we split pgspecial off into a separate package, its logging statements weren't being written to the pgcli log file. @j-bennet can you review and merge this?
","Add a pgspecial logging handler
🚀 
",2016-06-04 14:25:13,2016-06-07 21:28:04
675,523,,"Add instructions for running pytests to DEVELOP.rts
👍 
",2016-06-02 22:33:15,2016-06-03 03:17:45
676,522,"Closes #520
","Filter trigger returning functions from suggestions
@drocco007 This needs a rebase with master. 

@koljonen Would you mind reviewing this? 

@amjith fixed!

This is what I see when I tried it locally. 

<img width=""848"" alt=""1__0_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli____tmux__and_filter_trigger_returning_functions_from_suggestions_by_drocco007_ _pull_request__522_ _dbcli_pgcli"" src=""https://cloud.githubusercontent.com/assets/49260/15767654/b7d08ace-28fe-11e6-90eb-cc50625bdb7f.png"">

I would have expected tables to be listed at the top and then functions. But I'm seeing all the categories (functions, tables, views etc) combined together and listed alphabetically. I don't think it's an artifact of this PR, but along the way we have lost our grouped sorting and now everything is sorted alphabetically. 

Can we do something to address this? 

@amjith I think that maybe if modify the functionality I added in #507 (priority arguments to **find_matches**) a bit, we can use it to get better sorting here. I have a feeling there were a few more modifications I wanted to make to how we sort the suggestions, so I'll have a look at that soonish.

Thanks everybody! :)
",2016-06-02 21:30:45,2016-06-03 09:32:49
677,521,"This should resolve https://github.com/dbcli/pgcli/issues/519
","Make too many rows warning limit configurable
@Smotko Thanks for the PR. It looks great. 

@drocco007 Can you review this and merge? I presume you were shepherding @Smotko. 

Hey @Smotko! Thanks again for your help!

When you changed how the default is specified, we lost the implicit conversion to `int` that Click does if the default is an integer, so setting the row type via `-R` or the environment variable doesn't work. Fortunately the fix should be pretty easy: just add `type=click.INT` to your option definition. Also, please rebase this your branch against the updated master. Thanks!

cc: @amjith 

@drocco007 ah, sorry about that. Should be fixed now.

Works great! Thanks for the PR @Smotko. 

🍨 

Thanks @Smotko! Nice working with you at PyCon! :)
",2016-06-02 19:41:43,2016-06-05 21:50:39
678,520,"Using master checkouts for pgcli & pgspecial on PG 9.3.5, the Postgres internal trigger functions are being pulled in to the suggestions:

![image](https://cloud.githubusercontent.com/assets/1424858/15754619/fc388668-28c6-11e6-9ed4-d5b9f4105b07.png)

Since they're capitalized, they're also floating to the top of the suggestion list. I'm guessing this was inadvertent; it makes the completion list feel cluttered to me.

Perhaps we should exclude functions with the `RI_FKey` the way we currently do for `pg_` items?

@amjith
","Filter out PG trigger implementation functions
I think we should just filter out any functions where **prorettype::regtype = 'trigger'** in pgexecute.

I've created a PR that implements @koljonen's suggestion :)

Tested on PostgreSQL server versions 9.3.5 & 8.4.22
",2016-06-02 17:45:04,2016-06-03 09:32:49
679,519,"Add a configuration option to change the number of rows that causes the following warning to be shown:

> The result set has more than 1000 rows.
> Do you want to continue? [y/N]:

Setting the option to 0 should disable the warning altogether.
","Make the ""more than 1000 rows"" warning limit configurable
@amjith Do you have an opinion about this being an option in the configuration file vs. a command line argument vs. both? The PR from @Smotko implements a command line argument.

I don't have a strong opinion. If I had implemented I'd probably have picked the config file. 

I've added it to the config file as well.
",2016-06-02 10:13:51,2016-06-05 21:50:39
680,518,"Add a configuration option to disable some or all of the following startup and exit messages to reduce the amount of output:

> Version: 0.20.1
> Chat: https://gitter.im/dbcli/pgcli
> Mail: https://groups.google.com/forum/#!forum/pgcli
> Home: http://pgcli.com

<!-- -->

> Goodbye!

The messages could still be enabled by default.
","Add configuration option to disable startup and exit messages
This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-06-02 10:11:34,2016-06-29 03:16:42
681,517,"@darikg, please check that this makes sense. It'd be great if we could get rid of all this rather complicated code!

**Original commit message:**
Getting the parameters from proargnames, proallargtypes and proargmodes instead of from parsing the arg_list string simplifies FunctionMetadata quite a bit.
I also made the ColumnMetadata for table/view columns use the same format for the type (i.e. regtype instead of typname). This means we now get join-condition suggestions for joining tables/views to functions, which didn't work before.
","Use pg_proc.proargmodes &c. instead of parsing arg_list
Wow I love how many lines are being deleted here. I'll start going through it in the next couple days
",2016-06-01 23:54:49,2016-06-02 21:31:36
682,516,"In the expansion, we got '""Foo"".<col>' when we should have gotten 'Foo.<col>'.
","Fix issue with 'SELECT Foo.*<cursor> FROM Foo'
@darikg You want to merge this in?
",2016-05-31 22:02:33,2016-06-01 20:30:07
683,515,"Hi! Great work on the client, much more enjoyable than using raw `psql` ❤️.

However, I've just found out that `/dx` command is not supported:

```
app_dev> \dx
syntax error at or near ""\""
LINE 1: \dx
        ^

Time: 0.002s
app_dev>
```

Would it be possible to make `/dx` work in future versions of Pgcli?

Thanks!
","\dx command
I'll take a stab at this in the coming week or two. I've been meaning to write a guide illustrating how to add special commands in general so we can make it easier to crowdsource adding in all the other other \commands we're missing

@j-bennet I remember you wrote a guide a while back. I can't find it now.
Can you point Darik to that guide so he can update it if possible?
On May 30, 2016 9:47 AM, ""darikg"" notifications@github.com wrote:

> I'll take a stab at this in the coming week or two. I've been meaning to
> write a guide illustrating how to add special commands in general so we can
> make it easier to crowdsource adding in all the other other \commands we're
> missing
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/dbcli/pgcli/issues/515#issuecomment-222526755, or mute
> the thread
> https://github.com/notifications/unsubscribe/AADAbNZidjgn4X9Ng1izNeXU_T4fNeFnks5qGxStgaJpZM4IpBMA
> .

Yes, it's in pgspecial docs:

https://github.com/dbcli/pgspecial/blob/master/DEVELOP.rst

Oh wow that doc is fantastic, thanks @j-bennet 

Probably needs to be updated now, would be great if you want to do it @darikg.

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```

Thank you! ❤️ 
",2016-05-28 07:33:24,2016-06-29 03:18:37
684,514,"1. In 'SELECT \* FROM Foo.', Foo was not recognized as foo.
2. In 'SELECT \* FROM ""Foo""', objects in Foo were not suggested.
","Fix two casing issues with schemas
[![Code Health](https://landscape.io/badge/387082/landscape.svg?style=flat)](https://landscape.io/diff/360286)
Code quality remained the same when pulling **[843b859](https://github.com/koljonen/pgcli/commit/843b859c1d505dcf512c1e3cd136fba79661f3be) on koljonen:fix_schema_casing_issue** into **[017bc39](https://github.com/dbcli/pgcli/commit/017bc3943fbe5685258d88439d29a30a11bd2559) on dbcli:master**.
",2016-05-27 09:36:24,2016-05-29 21:29:30
685,513,"Simply store them in that order when getting them from the DB, instead of sorted by name.
","Order columns by in-table order when expanding *
[![Code Health](https://landscape.io/badge/386035/landscape.svg?style=flat)](https://landscape.io/diff/359165)
Code quality remained the same when pulling **[7a96c78](https://github.com/koljonen/pgcli/commit/7a96c7802932456ffda1d0af2938be07481e3620) on koljonen:order_columns_by_db_column_order** into **[017bc39](https://github.com/dbcli/pgcli/commit/017bc3943fbe5685258d88439d29a30a11bd2559) on dbcli:master**.

As a user, i'm strongly against it. Sorted by name allows me for much more convenient and quickier finding what I need. Especially when most of tables are created by some ORM.

Maybe there should be some way to customize that? Config option or... plugin? :)

I think, quite simply, that what would be least surprising and most useful to most users is that 'SELECT \* FROM Foo;' and  'SELECT <expanded *> FROM Foo;' produce the same result.

I think I prefer table order but I can definitely see why some would prefer alphabetical. I guess we need a config option? We could also give two different completions and somehow get the prioritizer to figure out which the user prefers but that seems pretty gross

There have been so many changes now, so I squashed it all into one commit to make things simpler.
I've moved the sorting logic into **get_column_matches** (good idea, @darikg), but I think adding the column number to the metadata would needlessly complicate things, compared to just having the columns sorted in canonical order.
Note that this change means that functions too will now be affected by the setting. I guess that should be a good thing.

> but I think adding the column number to the metadata would needlessly complicate things, compared to just having the columns sorted in canonical order.

Yeah the way you're doing it now is totally reasonable

Can we revert the changes to pgrefresher where it requires being passed the config object? It's not being used anymore and anyway it seems more tightly coupled than is necessary.

The config object is used when creating the new PGCompleter object in the refresher?

Sorry, I didn't explain that very well. What I mean is to give pgcompleter its own `asterisk_column_order` property (and I guess pgrefresher would need one as well), instead of passing the config object as a whole. It seems maybe a little less easily extensible, but it means that pgcompleter is less tightly coupled to the pgcli config structure. For example, if you wanted to write a test that setting `asterisk_column_order = 'alphabetical'` behaves properly, you would have to create a mock config, which seems really weird to me.

I've changed it into a settings dict, but this does mean the setting won't be imported from the config file when running e.g. pgclisublime. Do you have any ideas on how to solve that?

Ok, I'm content with the flat `settings` dict. I'll update pgclisublime to supply the settings on initialization. It makes sense that an external pgcompleter user would want to supply its own settings (e.g. through the sublime text json user settings framework) instead of relying on the pgclirc file. I only have a couple of minor points left in comments inline and then this is good to go.
",2016-05-26 10:25:46,2016-06-04 11:34:35
686,512,"This is for those of us need/want to use unescaped names in CamelCase or whatever. This means we can use pgcli to edit our functions without having to correct the casing all the time!

**Original commit message:**
This adds support for defining the casing to be used in completions (for unquoted names). The casing is determined by the casing file, which consists of a \n-separated list of names using the preferred casing. This file is initially populated based on usage in SQL and PLPGSQL database functions but can then be modified by the user.
","Custom casing of table/column/function/view names
[![Code Health](https://landscape.io/badge/386033/landscape.svg?style=flat)](https://landscape.io/diff/359164)
Repository health increased by 0.01% when pulling **[b4d4d86](https://github.com/koljonen/pgcli/commit/b4d4d8621bed683e14614dc4c9723bb735434a53) on koljonen:casing** into **[017bc39](https://github.com/dbcli/pgcli/commit/017bc3943fbe5685258d88439d29a30a11bd2559) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/359164) (including 0 errors and 0 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/386081/landscape.svg?style=flat)](https://landscape.io/diff/359180)
Repository health increased by 0.04% when pulling **[fb10d8a](https://github.com/koljonen/pgcli/commit/fb10d8ac9a591f96d387ae3aac18fe818b94a6b1) on koljonen:casing** into **[017bc39](https://github.com/dbcli/pgcli/commit/017bc3943fbe5685258d88439d29a30a11bd2559) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/359180) (including 0 errors and 0 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/387092/landscape.svg?style=flat)](https://landscape.io/diff/360297)
Repository health increased by 0.04% when pulling **[6a5f430](https://github.com/koljonen/pgcli/commit/6a5f4308cca2812fee5f9291b0763338962ae8ac) on koljonen:casing** into **[017bc39](https://github.com/dbcli/pgcli/commit/017bc3943fbe5685258d88439d29a30a11bd2559) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/360297) (including 0 errors and 0 code smells).
- No problems were fixed.

Super cool.

If there's no case file in the default location, why bother writing one to disk that contains all possible names? That means the user's default case file depends on what database they connect to first. IMO it would make more sense to leave the default casefile empty/nonexistent, and the user would write into it only the few non-default capitalizations they wanted. (I.e., the casefile would contain only overrides.)

I realize I'm out of my depth on this one.

I see that it creates a casing file in the config folder with a subset of table names in that DB. What's supposed to go in that file? How is that subset determined? I'm having a hard time deciphering the query for casing in the pgexecute file. 

You mentioned something about using unescaped CamelCase, but won't that result in postgres doing the conversion to lower case in the backend causing a failure? 

Seeing some examples might help with understanding. 

@darikg The case I was trying to make it work out-of-the-box for was the one where the user uses one database and all code is written using CamelCase, with all names unescaped. The idea is the user starts pgcli (or pgclisublime) for the first time, and it automatically gets the casing of all names right, without any user intervention. Defaulting to an empty file wouldn't be very useful in that scenario, as the user would then need to somehow enter every name into the casing file.

@amjith The query takes all table/function/view/schema names in the database, joins that (case-insensitively) with all words used in the definitions of database functions, determines the most popular casing for each word/name, and then that gets put in the file.
E.g. if we have the function '...UPDATE Bar.Foo SET FooStatusID = _FooStatusID, ModificationDate = now() WHERE FooID = _FooID;...', the file will be populated thusly:

> Bar
> Foo
> FooID
> FooStatusID
> ModificationDate

Then, the next time we're writing a function, pgcli will suggest FooID instead of fooid. 

@koljonen  I was suggesting piping the output from `pgexecute.casing` directly to `completer.extend_casing`, and then taking values from the casing file (if it exists) and sending them to `completer.extend_casing`, overriding any default values. Does that make sense?

@amjith I merged a couple of PRs recently from @koljonen (#508, #510) that have made pgcli behave better with non-default casing. This PR is the flipside of that, getting more case-friendly suggestions.

There's also an open issue somewhere where somebody wanted lower case keywords, e.g. suggest `select` instead of `SELECT`, which this PR doesn't handle, but it would be a reasonable extension down the road.

@darikg Oh, now I think I understand what you're getting at. I should probably have put this in the commit message or something: The casing file is needed as a cache, because pgexecute.casing will take several seconds on a large database (I think it should scale linearly with the amount of function code). E.g. on my local 9.1 database of 2k functions with a total of 3.5M characters of SQL/PLPGSQL function code, it takes 10 seconds – which is a delay I can live with the first time I start pgcli, but definitely not every time completions get refreshed. This is actually the main reason there is a casing file at all.

Well the completion refreshing happens in a separate thread, so it shouldn't be super visible to the user, although 10 seconds is pretty long.

I think wanting to get good default out-of-the-box behavior is great, but only if it's consistent. Currently this  will only work on the first database the user connects to, and even then it won't stay up to date if the database changes. I think it needs to either work by default in all cases, or not work by default at all, and require the user to explicitly fill out the casing file. 

Another alternative to a clever-but-slow database query to get default casing would be to pull it out of the history file. We're [already](https://github.com/dbcli/pgcli/blob/32029e27668dcdc6204bab8d8d64236962ecf973/pgcli/completion_refresher.py#L76) scanning the history to grab recently used identifiers so we can prioritize them as completions, that seems like a good place to also identify user capitalization preferences. 

The problem with the 10 seconds is the first time the refreshing is run (i.e. just after starting pgcli), because you don't get any completions before it's done. 

I think the history file is too likely to be lacking in quality (because of ad-hoc queries where you don't care about capitalization) as well as quantity (because, in a large or new-to-you database, you've only used a small portion of all names) to be of much use here.

Anyway, I just added an option to enable/disable auto-generating the casing file, as I think that's the simplest solution right now.

Some ideas for the future: 
1. Split the file into one that's manual and one that's generated.
2. A config setting for scheduling regeneration of the file.
3. A backslash command for triggering regeneration of the file.
4. If we get around to doing #444, we could have separate files per database.

I think you meant to push the 'Change % to os.path.join' to the other PR

Yeah, you're right, but we do need it here too.

This needs to be rebased. I like the current default case, where the user has to explicitly opt in.

Squashed and rebased.

Hooray!
",2016-05-26 10:25:27,2016-06-06 21:21:32
687,511,"This is trivial enough that I'm going to merge it in myself as soon as the tests pass
","pgexecute.foreignkeys() shouldn't explode in postgresql versions < 9
[![Code Health](https://landscape.io/badge/385711/landscape.svg?style=flat)](https://landscape.io/diff/358793)
Code quality remained the same when pulling **[4ad0800](https://github.com/dbcli/pgcli/commit/4ad0800b7d0d7d68ca56f7e7d68a8be148675479) on dbcli:darikg/joinconditions** into **[ab91b83](https://github.com/dbcli/pgcli/commit/ab91b83723901ea6b9a52be329f258901f612c6b) on dbcli:master**.
",2016-05-25 23:06:52,2016-05-25 23:11:31
688,510,"My previous fix didn't cover the case 'INSERT INTO Foo(<cursor>)', which is now covered.
","Fix another problem where table names would not be recognized when nott in lower case
[![Code Health](https://landscape.io/badge/385265/landscape.svg?style=flat)](https://landscape.io/diff/358339)
Code quality remained the same when pulling **[c11812c](https://github.com/koljonen/pgcli/commit/c11812c725bc195840ad080662a17ccbceb13ed3) on koljonen:fixtablecasingissue2** into **[f1b60c2](https://github.com/dbcli/pgcli/commit/f1b60c2a411c4ae4dcb7377f088f64a99d43be99) on dbcli:master**.

[![Code Health](https://landscape.io/badge/385286/landscape.svg?style=flat)](https://landscape.io/diff/358379)
Code quality remained the same when pulling **[6e20092](https://github.com/koljonen/pgcli/commit/6e2009237cbe53f07d8d964fffdf7c3605e11950) on koljonen:fixtablecasingissue2** into **[f1b60c2](https://github.com/dbcli/pgcli/commit/f1b60c2a411c4ae4dcb7377f088f64a99d43be99) on dbcli:master**.

[![Code Health](https://landscape.io/badge/385322/landscape.svg?style=flat)](https://landscape.io/diff/358413)
Code quality remained the same when pulling **[59e3068](https://github.com/koljonen/pgcli/commit/59e3068a07c1ffb3167fcb798c78ea434f6af3c8) on koljonen:fixtablecasingissue2** into **[f1b60c2](https://github.com/dbcli/pgcli/commit/f1b60c2a411c4ae4dcb7377f088f64a99d43be99) on dbcli:master**.

Right on
",2016-05-25 15:46:33,2016-05-25 23:11:07
689,509,"https://github.com/simon-engledew/gocmdpev has Python bindings.
",Integrate with gocmdpev,2016-05-23 05:32:41,
690,508,"This fixes the issue where pgcli interprets **SELECT \* FROM Foo** as referring to the table **Foo**, whereas it actually refers to table **foo**. 
","Fix problem where non-lower-case table names would not be recognized
[![Code Health](https://landscape.io/badge/379930/landscape.svg?style=flat)](https://landscape.io/diff/352885)
Code quality remained the same when pulling **[a5fa8ca](https://github.com/koljonen/pgcli/commit/a5fa8ca1cbf485a2ceb762ec8e82531a9fa0156a) on koljonen:fixtablecasingissue** into **[9dd8610](https://github.com/dbcli/pgcli/commit/9dd8610fdb52e4cabe0850c3be1fe3da142de854) on dbcli:master**.

I only have trivial suggestions here: it'd be nice to have consistency in the camel_casing, so `schema_is_quoted` instead of `schemaisquoted` etc. And maybe something more descriptive like `standardize_name_case` instead of `getnames`. But all the changes/additions to the tests seem great.

[![Code Health](https://landscape.io/badge/381074/landscape.svg?style=flat)](https://landscape.io/diff/354097)
Repository health decreased by 0.26% when pulling **[59f35c5](https://github.com/koljonen/pgcli/commit/59f35c511b16499ced5fa3192a1ef80cf287237e) on koljonen:fixtablecasingissue** into **[9dd8610](https://github.com/dbcli/pgcli/commit/9dd8610fdb52e4cabe0850c3be1fe3da142de854) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/354097) (including 1 error and 1 code smell).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/381076/landscape.svg?style=flat)](https://landscape.io/diff/354100)
Code quality remained the same when pulling **[d2446af](https://github.com/koljonen/pgcli/commit/d2446af9a92d6b1b6b82c51f5093953e3e28b948) on koljonen:fixtablecasingissue** into **[9dd8610](https://github.com/dbcli/pgcli/commit/9dd8610fdb52e4cabe0850c3be1fe3da142de854) on dbcli:master**.

I renamed the function parse_identifier, as it does do some more than the casing thing.

Even better!
",2016-05-19 22:08:54,2016-05-21 12:55:39
691,507,"@darikg suggested I make this a separate PR, so here it is. See #496 for more background.

**Original commit message:**
type_priority is an int that says how to sort these matches compared matches of other types.
type_collection is a an iterable that overrides the internal sorting of the matches.

The use case that motivated this change was to be able to
    1) sort join conditions (""t.someid = t2.someid"") before table aliases (""t"")
    2) sort FK-based join conditions before name-based join conditions and integer name-based join conditions before other name-based join conditions.
","Add priority arguments to find_matches
[![Code Health](https://landscape.io/badge/379303/landscape.svg?style=flat)](https://landscape.io/diff/352282)
Code quality remained the same when pulling **[96623f3](https://github.com/koljonen/pgcli/commit/96623f30260a0a7043c335ffeee0d8af02424c4a) on koljonen:find_matches_priority_arguments** into **[9dd8610](https://github.com/dbcli/pgcli/commit/9dd8610fdb52e4cabe0850c3be1fe3da142de854) on dbcli:master**.

Thanks! I've had some time to think about it and it's totally reasonable, and noone else objected.
",2016-05-19 13:01:57,2016-05-23 23:46:34
692,506,"Closes #499
","Make pgclirc_file argument optional
[![Code Health](https://landscape.io/badge/376739/landscape.svg?style=flat)](https://landscape.io/diff/349624)
Code quality remained the same when pulling **[ed6bc9d](https://github.com/klonuo/pgcli/commit/ed6bc9d227a20d8be1c65a2ab4f219cf423942b3) on klonuo:patch-2** into **[8d426c2](https://github.com/dbcli/pgcli/commit/8d426c2db6391b3e0dea145998aebefee94a5376) on dbcli:master**.

Thank you!
",2016-05-17 06:22:43,2016-05-18 19:07:16
693,505,"I don't know about you guys, but I don't think suggesting \* is of use to anyone, and it's in the way for anyone who just wants a column.
","Stop suggesting * as a column
[![Code Health](https://landscape.io/badge/376187/landscape.svg?style=flat)](https://landscape.io/diff/349052)
Code quality remained the same when pulling **[51b8562](https://github.com/koljonen/pgcli/commit/51b85622dd41cb32d43d1a15eddf6cfd6cfa394b) on koljonen:drop_asterisk_column_suggestion** into **[5844690](https://github.com/dbcli/pgcli/commit/5844690138de221c80be35a6b96382c666878a9c) on dbcli:master**.

I'm cool with this. +6 -23 lines is especially nice.

👍  Looks like this PR needs a rebase against master before merge. 

[![Code Health](https://landscape.io/badge/376927/landscape.svg?style=flat)](https://landscape.io/diff/349821)
Code quality remained the same when pulling **[a60ee9a](https://github.com/koljonen/pgcli/commit/a60ee9a85f38fe2c013102938aee7e52a56eceba) on koljonen:drop_asterisk_column_suggestion** into **[8d426c2](https://github.com/dbcli/pgcli/commit/8d426c2db6391b3e0dea145998aebefee94a5376) on dbcli:master**.

Rebased.
",2016-05-16 16:06:14,2016-05-17 23:40:43
694,504,"A simple use case is when someone uses unicode characters in a RAISE statement.

Example: 

```
DO language plpgsql $$
BEGIN
  RAISE NOTICE '有人更改';
END
$$;
```

I've added a test. 

Reviewer: @stuartquin 
","Support unicode strings in notices.
[![Code Health](https://landscape.io/badge/374725/landscape.svg?style=flat)](https://landscape.io/diff/348538)
Repository health decreased by 0.00% when pulling **[f576d16](https://github.com/dbcli/pgcli/commit/f576d16e3e001aa3f37f9c137db808f3810100b2) on amjith/unicode-notices** into **[5844690](https://github.com/dbcli/pgcli/commit/5844690138de221c80be35a6b96382c666878a9c) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/348538/fixed) (including 0 errors and 0 code smells).

[![Code Health](https://landscape.io/badge/375728/landscape.svg?style=flat)](https://landscape.io/diff/348542)
Repository health increased by 0.01% when pulling **[2cfd9fc](https://github.com/dbcli/pgcli/commit/2cfd9fc913d3c4c70d9c5b3c48a621d35745f215) on amjith/unicode-notices** into **[5844690](https://github.com/dbcli/pgcli/commit/5844690138de221c80be35a6b96382c666878a9c) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/348542/fixed) (including 0 errors and 0 code smells).

I'm not sure why the tests are failing on Travis. I wonder if it has to do with Postgres versions available in Travis. 

[![Code Health](https://landscape.io/badge/375735/landscape.svg?style=flat)](https://landscape.io/diff/348549)
Repository health increased by 0.02% when pulling **[69ee125](https://github.com/dbcli/pgcli/commit/69ee125bf166fc9e24f5e975d69947564b778c8d) on amjith/unicode-notices** into **[5844690](https://github.com/dbcli/pgcli/commit/5844690138de221c80be35a6b96382c666878a9c) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/348549/fixed) (including 0 errors and 0 code smells).

I give up. I have no clue why this is failing since it passes just fine on my local machine. Can one of you verify that it indeed passes the test suite locally? 

@dbcli/pgcli-core 

Looks alright locally:

```
298 passed, 91 skipped, 1 xfailed, 1 xpassed in 4.91 seconds 
```

Can also confirm the functionality works

Just realized I didn't run the pgexecute tests - doh

Still looks good though 

```
389 passed, 1 xfailed, 1 xpassed in 7.37 seconds 
```

Different version of psycopg2 on travis maybe?

Nevermind, I don't think that's it. The test passes locally for me with psycopg2=2.6.1, but still fails when forcing travis to run with 2.6.1.

I've disabled the test to make it pass. I tried it on various operating systems and tried pinning the psycopg2 version, no luck. I'm going to write this off as a Travis CI anomaly. 

Can one of you merge this please? 

[![Code Health](https://landscape.io/badge/377418/landscape.svg?style=flat)](https://landscape.io/diff/350365)
Repository health increased by 0.02% when pulling **[0524e0a](https://github.com/dbcli/pgcli/commit/0524e0adbfc0a77a07d9447dd901e23c50dc87cd) on amjith/unicode-notices** into **[5844690](https://github.com/dbcli/pgcli/commit/5844690138de221c80be35a6b96382c666878a9c) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/350365/fixed) (including 0 errors and 0 code smells).
",2016-05-16 05:29:46,2016-05-17 19:32:10
695,503,"I am unable to install pgcli because of a compilation error due to a mismatch. This is what I am seeing. Any help would be appreciated.

```
$ pip install pgcli --ignore-installed six
Collecting pgcli
  Using cached pgcli-0.20.1.tar.gz
Collecting six
  Using cached six-1.10.0-py2.py3-none-any.whl
Collecting pgspecial>=1.1.0 (from pgcli)
  Using cached pgspecial-1.3.0.tar.gz
Collecting click>=4.1 (from pgcli)
  Using cached click-6.6.tar.gz
Collecting Pygments>=2.0 (from pgcli)
  Using cached Pygments-2.1.3-py2.py3-none-any.whl
Collecting prompt_toolkit==0.46 (from pgcli)
  Using cached prompt_toolkit-0.46-py2-none-any.whl
Collecting psycopg2>=2.5.4 (from pgcli)
  Using cached psycopg2-2.6.1.tar.gz
Collecting sqlparse==0.1.16 (from pgcli)
  Using cached sqlparse-0.1.16.tar.gz
Collecting configobj>=5.0.6 (from pgcli)
  Using cached configobj-5.0.6.tar.gz
Collecting setproctitle>=1.1.9 (from pgcli)
  Using cached setproctitle-1.1.10.tar.gz
Collecting wcwidth (from prompt_toolkit==0.46->pgcli)
  Using cached wcwidth-0.1.6-py2.py3-none-any.whl
Installing collected packages: click, pgspecial, Pygments, wcwidth, six, prompt-toolkit, psycopg2, sqlparse, configobj, setproctitle, pgcli
  Running setup.py install for click ... done
  Running setup.py install for pgspecial ... done
  Running setup.py install for psycopg2 ... error
    Complete output from command /Users/fkim/fivestars/server/fivestarscard.com/bin/python -u -c ""import setuptools, tokenize;__file__='/private/var/folders/4h/s1dx02q53f7707gmyvkj9vk00000gn/T/pip-build-79RRfK/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/4h/s1dx02q53f7707gmyvkj9vk00000gn/T/pip-I1J8hS-record/install-record.txt --single-version-externally-managed --compile --install-headers /Users/fkim/fivestars/server/fivestarscard.com/bin/../include/site/python2.7/psycopg2:
    running install
    running build
    running build_py
    creating build
    creating build/lib.macosx-10.8-x86_64-2.7
    creating build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/__init__.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/_json.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/_range.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/errorcodes.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/extensions.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/extras.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/pool.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/psycopg1.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    copying lib/tz.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2
    creating build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/__init__.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/dbapi20.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/dbapi20_tpc.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_async.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_bug_gc.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_bugX000.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_cancel.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_connection.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_copy.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_cursor.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_dates.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_extras_dictcursor.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_green.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_lobject.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_module.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_notify.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_psycopg2_dbapi20.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_quote.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_transaction.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_types_basic.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_types_extras.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/test_with.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/testconfig.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    copying tests/testutils.py -> build/lib.macosx-10.8-x86_64-2.7/psycopg2/tests
    running build_ext
    building 'psycopg2._psycopg' extension
    creating build/temp.macosx-10.8-x86_64-2.7
    creating build/temp.macosx-10.8-x86_64-2.7/psycopg
    gcc -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -m64 -Os -m64 -Os -arch x86_64 -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.6.1 (dt dec pq3 ext lo64)"" -DPG_VERSION_HEX=0x090305 -DHAVE_LO64=1 -I/Users/fkim/fivestars/server/3rdparty/lib/Python.framework/Versions/2.7/include/python2.7 -I. -I/Users/fkim/fivestars/server/3rdparty/include -I/Users/fkim/fivestars/server/3rdparty/include/postgresql/server -c psycopg/psycopgmodule.c -o build/temp.macosx-10.8-x86_64-2.7/psycopg/psycopgmodule.o
    error: $MACOSX_DEPLOYMENT_TARGET mismatch: now ""10.6"" but ""10.8"" during configure

    ----------------------------------------
Command ""/Users/fkim/fivestars/server/fivestarscard.com/bin/python -u -c ""import setuptools, tokenize;__file__='/private/var/folders/4h/s1dx02q53f7707gmyvkj9vk00000gn/T/pip-build-79RRfK/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/4h/s1dx02q53f7707gmyvkj9vk00000gn/T/pip-I1J8hS-record/install-record.txt --single-version-externally-managed --compile --install-headers /Users/fkim/fivestars/server/fivestarscard.com/bin/../include/site/python2.7/psycopg2"" failed with error code 1 in /private/var/folders/4h/s1dx02q53f7707gmyvkj9vk00000gn/T/pip-build-79RRfK/psycopg2/
```
","Cannot install pgcli, get $MACOSX_DEPLOYMENT_TARGET mismatch
@seonghuhn I haven't seen this error before. I presume this has to do with mismatch in versions for libpq and psycopg2. 

My quick solution would be to try installing pgcli via brew: 

```
brew update && brew install pgcli
```

Turns out it was because I had hardcoded in my environment `MACOSX_DEPLOYMENT_TARGET`  to ""10.6"". Once I fixed that and set it to ""10.8"" `pgcli` installed fine. Thanks for the help.
",2016-05-16 02:10:39,2016-06-10 15:27:15
696,502,"I was playing around with [https://www.codacy.com/](Codacy) and found some low-hanging fruit.
","Remove dead code and fix a broken test
@j-bennet Do you know why landscape.io doesn't process PRs anymore? I wonder if it catches the same dead code

@darikg Nope, no idea.

I think landscape.io might have silently stopped. We didn't change anything on our front. 

You're welcome to try setting up codacy for pgcli.

I poked around into the landscape.io settings and noticed the bot was turned off. I turned it back on and it seems to be commenting on new PRs... I'll try out automating codacity on my pgcli fork and see if it has a less annoying option than the landscape bot.
",2016-05-15 17:55:01,2016-05-16 22:44:26
697,501,"prev_tok is something like '[table name] [table alias] USING' where we expect it to be 'USING', so I just added a quick fix where we check the last word in prev_token instead of the whole string.
","Fix bug where ""USING(<cursor>"" wasn't detected properly + add test case
I've also added a PR at [https://github.com/andialbrecht/sqlparse/pull/236](https://github.com/andialbrecht/sqlparse/pull/236) to fix the underlying sqlparse bug. 

Good catch. We actually already have tests for the USING thing, it just didn't test the case where there wasn't any whitespace before the parentheses. Instead of adding an entirely new test, can you just tweak the ones we already have? [Here's how I would do it.](https://github.com/dbcli/pgcli/commit/8a29e7084cadfca7f5c45dfd229d2c47616dd1ae)

Good idea. Done.
",2016-05-14 17:18:35,2016-05-15 18:44:15
698,500,"Closes #499
","Make pgclirc_file argument regular (non-optional)
Closed by https://github.com/dbcli/pgcli/pull/506
",2016-05-14 09:59:09,2016-05-17 06:23:30
699,499,"On [PGCli](https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L109) initialization [`write_default_config()`](https://github.com/dbcli/pgcli/blob/master/pgcli/config.py#L33) is called with non-optional `destination` argument, which indicates that in PGCli constructor `pgclirc_file` argument should not be optional, as it is now set.
That argument is later again called by other functions in constructor.
","PGCli initialization issue
@klonuo I can make that a non-optional value for strictness sake or you're welcome to submit a PR to do that. 

Ok, done :)

OTOH, now that I've made PR I'm thinking that maybe we should leave `pgclirc_file` argument optional and add some code to resolve to default value before it is called by other functions. 

For example, now as is, issuing `pgcli = PGCli()` raises:

``` pytb
>>> from pgcli.main import PGCli
>>> pgcli = PGCli()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""C:\Python35\lib\site-packages\pgcli\main.py"", line 87, in __init__
    write_default_config(default_config, pgclirc_file)
  File ""C:\Python35\lib\site-packages\pgcli\config.py"", line 22, in write_default_config
    destination = expanduser(destination)
  File ""C:\Python35\lib\ntpath.py"", line 312, in expanduser
    if not path.startswith(tilde):
AttributeError: 'NoneType' object has no attribute 'startswith'
```

And this is actual code in pgcli's `magic.py` - https://github.com/dbcli/pgcli/blob/master/pgcli/magic.py#L33

Adding default location, will make above work, and it seems like right way to go IMHO.
Do you agree?

@klonuo Can you tell me what problem we were trying to originally solve? Was there a problem with setting a default value for pgclirc file? 

If so can you tell me how it manifested? I may have give you answers hastily. So can you please give me a little background? 

Well, as in opening post, on `PGCli` initialization `write_default_config` is called with non-optional `pgclirc_file` which raise exception if `pgclirc_file` is ommited. For example try this: `pgcli = PGCli()`

So I made PR to make `pgclirc_file` not optional, but I think that it is better to leave the code as is and add for example this line in PGCli init, before `write_default_config()` is called:

``` python
pgclirc_file = pgclirc_file or os.path.expanduser('~/.pgclirc')
```

That way user can instantiate PGCli without arguments.

Hopefully it is clear now?

👍 

Will you be updating the existing PR? 

I closed existing PR and made new one
",2016-05-13 18:48:52,2016-05-18 19:07:16
700,498,"I am write a piace of code, their UTF-8 encoding.

```
CREATE OR REPLACE FUNCTION log_event() RETURNS trigger AS $$
DECLARE
BEGIN
    INSERT INTO logs (event_id, old_title, old_starts, old_ends)
    VALUES (OLD.event_id, OLD.title, OLD.starts, OLD.ends);

    RAISE NOTICE '有人更改了event#%', OLD.event_id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
```

Which, I would like to use Chinese to write notice.

```
book> \i log_event.sql;
CREATE FUNCTION
Time: 0.035s
```

Everything seems be alright,but when I am trying to run it.

```
book> UPDATE events
..... set ends='2012-05-04 01:00:00'
..... WHERE title='House Party';
娉ㄦ剰:  鏈変汉鏇存敼浜唀vent#11

UPDATE 1
Time: 0.003s
```

It becomes such garbled texts.
I was just trying to express someone just changed something.
But when I run it in psql or pgAdmin. it changed back to normal.
**psql**

```
book=# update events
book-# set ends='2012-05-04 01:00:00'
book-# where title='House Party';
注意:  有人更改了event#11
UPDATE 1
```

**pgAdmin**

```
UPDATE events
set ends='2012-05-04 01:00:00'
WHERE title='House Party';

message
注意:  有人更改了event#11
Query returned successfully: one row affected, 52 msec execution time.
```

So I was wondering if I did something wrong in the process.
Pgcli is very good, of course, it may be myproblem, but I was just a question of learning postgresql.
Looking forward to your answer.
","There is a issue when I am trying to use Chinese
Hi @ahDDD, 

Sorry about the failure. I have a potential fix in a branch. Can you please try it out and let me know if it works as expected? 

You can install the fixed version as follows:

```
pip install -U https://github.com/dbcli/pgcli/archive/amjith/unicode-notices.zip
```

I appreciate you filing the bug. 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-05-13 18:32:23,2016-06-29 03:19:12
701,497,"Change from filtering out all non-set-returning functions to only filteirng out windowing functions and aggregate functions.
Non-set-returning functions are legal in the FROM clause and can be quite useful.
","Improve filtering of functions for FROM clause
:+1: on the intent but it looks like you'll need to update a whole bunch of the tests in `test_smart_completion_public_schema_only.py` and `test_smart_completion_multiple_schemata.py`

Thanks for fixing the tests!
",2016-05-13 15:30:32,2016-05-15 17:01:10
702,496,"The user types 'SELECT \* FROM parenttable p JOIN childtable c on '. We then suggest ['c.parenttableid = p.parenttableid', 'c.createdby = p.createdby', ...] as completions.
The suggestions are FK matches first, then name matches for int columns, then name matches for other columns.

Some things that have been changed in order to make this work:
    meta[reltype]][relname] goes from being a list of columns to being a list of ColumnMetadata namedtuples, which, apart from the column name, also contains its data type and a list of FKs from the column (i.e. where the column is a child). This entails modification of a number of functions dealing with columns.
    get_matches can now be fed with priorities from outside, enabling more intelligent sorting.
    TableReference gets a property, ref, that returns COALESCE(Alias, TableName).
    populate_scoped_cols now returns a dict {TableReference:{colname:ColumnMetadata}} instead of just a list [colname].
","Support for join-condition suggestions after ON
Looks like a bunch of tests are failing here because of `dict.itervalues()`

This is a pretty big change, so it will take me some time to get through. I like the direction it's going in.

I've squashed and rebased onto my drop_asterisk_column_suggestion branch.

Still slowly going through this. Do you feel like pulling out the proposed changes to `find_matches` and submitting that as a standalone PR? The more eyes we get on that part the better, because it plays such an important role in everything else.

I had an idea today! What if instead of tweaking `find_matches` to allowing injecting higher priority suggestions, we got fuzzy matching to play nice with special characters like `=`? I'm imagining the user would start typing `select * from foo join bar on`, and then even if the join condition suggestion was really low on the list, they could type one extra character `select * from foo join bar on =`, and then the join conditions would rocket to the top of the list? 

I think that at least in the case where the user hasn't typed anything after 'ON ', the gain from having the join conditions on top is rather large. Being able to just type 'select \* from foo join bar on [tab] join baz on [tab]' and being able to trust that you get the right join conditions automatically without having to think about it is a pretty great user experience.

I've finally finished reading everything. I left some suggestions inline. The only other thing that's missing would be to add a test to test_pgexecute that creates two tables with an FK relationship, and asserts that the `executor.foreignkeys()` returns the correct ForeignKey 

This is really shaping up. I just merged the find_matches PR, so you can rebase this one on top of master, and fix a couple nitpicks I had, and I think we're good to go

Fixed, squashed and rebased.

Sorry, one more issue I just found: the `join_cond_pat` regex fails with new lines. Here's a test for `test_sqlcompletion` that's currently failing:

```
def test_on_suggests_join_multilines():
    sql = '''   SELECT *
                FROM foo
                    JOIN bar ON '''
    suggestions = suggest_type(sql, sql)
    expected = JoinCondition(
        tables=((None, 'foo', None, False),
                (None, 'bar', None, False)),
        parent=None)
    assert expected in suggestions
```

In general, `join_cond_pat` seems more complicated than it needs to be. Can you explain it a bit more?

Good catch.

Ahh thanks `join_cond_pat` finally clicked for me. I have a trick [here](https://github.com/dbcli/pgcli/commit/c3e0edc592bed56a181bddd5cd0643aa53cfb2ab) that uses the `sqlparse` parsed statement to check the preceding token instead of a regex, which I think will work even with table names containing spaces (as long as they're escaped, of course.) Does that seem reasonable?

Yeah, using the parser is obviously better.

:boom: Merged! Thanks for your patience & hard work. This is a killer feature!
",2016-05-13 15:20:46,2016-05-25 22:57:40
703,495,"Trying ipython magic:

``` pytb
>ipython
Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)]
Type ""copyright"", ""credits"" or ""license"" for more information.

IPython 4.2.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: %load_ext pgcli.magic
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-1-a27f9bd0022c> in <module>()
----> 1 get_ipython().magic('load_ext pgcli.magic')

c:\python35\lib\site-packages\IPython\core\interactiveshell.py in magic(self, arg_s)
   2161         magic_name, _, magic_arg_s = arg_s.partition(' ')
   2162         magic_name = magic_name.lstrip(prefilter.ESC_MAGIC)
-> 2163         return self.run_line_magic(magic_name, magic_arg_s)
   2164
   2165     #-------------------------------------------------------------------------

c:\python35\lib\site-packages\IPython\core\interactiveshell.py in run_line_magic(self, magic_name, line)
   2082                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals
   2083             with self.builtin_trap:
-> 2084                 result = fn(*args,**kwargs)
   2085             return result
   2086

<decorator-gen-65> in load_ext(self, module_str)

c:\python35\lib\site-packages\IPython\core\magic.py in <lambda>(f, *a, **k)
    191     # but it's overkill for just that one bit of state.
    192     def magic_deco(arg):
--> 193         call = lambda f, *a, **k: f(*a, **k)
    194
    195         if callable(arg):

c:\python35\lib\site-packages\IPython\core\magics\extension.py in load_ext(self, module_str)
     64         if not module_str:
     65             raise UsageError('Missing module name.')
---> 66         res = self.shell.extension_manager.load_extension(module_str)
     67
     68         if res == 'already loaded':

c:\python35\lib\site-packages\IPython\core\extensions.py in load_extension(self, module_str)
     82             if module_str not in sys.modules:
     83                 with prepended_to_syspath(self.ipython_extension_dir):
---> 84                     __import__(module_str)
     85             mod = sys.modules[module_str]
     86             if self._call_load_ipython_extension(mod):

c:\python35\lib\site-packages\pgcli\magic.py in <module>()
      1 from .main import PGCli
----> 2 import sql.parse
      3 import sql.connection
      4 import logging
      5

ImportError: No module named 'sql'
```

Where should those imports be pulled from?
","ImportError: No module named 'sql'
Hm, it seems that it requires `pip install ipython-sql` extension...
Anyway it's still not clear how to use the completion system in IPython

@klonuo The instructions on getting this working are available here: http://pgcli.com/embedding-pgcli-in-ipython.html. You're right you do need ipython-sql installed to have this work correctly. 

Thanks
",2016-05-12 11:47:37,2016-05-14 09:54:34
704,494,"@dbcli/pgcli-core This is a big release. We're going 1.0. 

Please review the changelog and add/edit the entries. 

I'd also like people to take the latest master for a spin and raise any issues you might see. 

I'd like to keep this PR open for a few days before I get input from most of the core team before I do the release. 

Thank you!
","Update changelog for release 1.0.0.
Nice one!
Will be using it for the next few days on Ubuntu 15.10 and 14.04

awesome!! when it will be released ?

I'm also excited to see a release!

@dbcli/pgcli-core Can you please take one final look? I'm going to merge this and release a new version asap. Pending approval of #534. 

All looks good.

Been using it regularly and found no issues, I say go for it :+1: 
",2016-05-12 06:01:13,2016-06-29 02:59:12
705,493,"![screenshot from 2016-05-11 11-15-23](https://cloud.githubusercontent.com/assets/13783097/15169912/c46da910-176a-11e6-95d6-1e31df3b4afb.png)
 How can I change this red text to another color. It look so dark and so `error-like`
","How can I change text color in query
There are many syntax color schemes available. Open up your config file (~/.config/pgcli/config) and look for `syntax`. The comment above that should have a list of all possible color schemes. 

If you're using an older version of pgcli, you might have to check ~/.pgclirc file. 
",2016-05-11 04:24:02,2016-05-16 05:23:57
706,492,,"Completion to column list when *  is entered
I think this is a fantastic idea. Usually whenever I write `SELECT * FROM foo` it's because I'm too lazy to type out all the columns from `foo`, not because I want a query that changes whenever the columns of `foo` change. 

The major issues I think are 
1.  How does this interact with table aliases? Should `SELECT f.* FROM foo f` suggest `f.bar, f.baz, f.qux` ?
2. How do we indicate to the user what is being suggested? Right now the meta-text is simply 'columns'. This would probably be the most 'magical' suggestion that pgcli makes -- is there any way to suggest that something special is being suggested here?

I'm not sure I understand what this PR is doing. Can one of you explain?

amjith: What it does is that e.g. when the user types ""insert into sometable(*[tab]"", the result is ""insert into sometable(cola, colb, colc, ..."", and likewise for other places where pgcli suggests columns.

darikg:
1. I'll look into how we can copy the qualifier. I definitely think we should.
2. I don't think this is that big a problem, because there's only one option in the list when \* is entered, so it's automatically selected, and in all likelihood it's what the user wanted.

@darikg Would you might taking stewardship of this PR? I have a newborn at home and slammed at the moment.

@koljonen I'm away from my computer for the next couple of days but when I get back early next week I'll have a closer look 

Some thoughts:
- This seems to unnecessarily complicate `find_matches`. I think you could leave that function as is and move the \* special case to `get_column_matches` instead.
- Right now you're pulling column names out of the completions, which seems indirect. You can look at the code in `populate_scoped_cols` for how to pull columns out of the metadata dicts. Or if move everything to `get_column_matches` I think you might be able to use the `scope_cols` variable directly. 
- I _think_ it shouldn't be necessary to add the extra `parent` metadata column to the `Column` type. Can't you get the table alias out of the `tables` field in `Column`?
- Need some tests. Here's one you can add to `test_smart_completion_public_schema_only.py`:

```
def test_wildcard_column_expansion(completer, complete_event):
    sql = 'SELECT * FROM users'
    pos = len('SELECT *')

    completions = completer.get_completions(
        Document(text=sql, cursor_position=pos), complete_event)

    col_list = 'id, email, first_name, last_name'
    expected = Completion(text=col_list, start_position=-1,
                          display='*', display_meta='columns')

    assert expected in completions
```

Good feedback. I've made those changes.

I really appreciate you expanding the tests to cover more complicated situations. I left a number of suggestions inline.

There's two comments left behind in the tests about indeterministic order, but other than that I think this is good to go :fireworks: 
",2016-05-06 13:59:00,2016-05-16 22:36:47
707,491,"I noticed that when I ran pgcli it was leaving a '~' dir in my current working dir. This is because ensure_dir_exists was not calling expanduser()

As long as I was fixing that I noticed you had hardcoded ~/.config, so I went ahead and made it check $XDG_CONFIG_HOME

You might want to change the Windows path to also use os.path.join for consistency, but since I don't have python on windows I did not want to risk breaking it without being able to check that it still works.
","Improved config loading
Thanks for adding the `expanduser` fix to the `ensure_dir_exists()` function. That is a valid bug. 

I'm going to refrain from using the $XDG_CONFIG_HOME because we want to be able to tell the user where to look for the config file and log files when we try to address support issues. Having them look into $XDG_CONFIG_HOME/pgcli/\* or ~/.config/pgcli/\* is just cumbersome and adds another layer of confusion. 

So I'm going to cherry pick one of the commits from this PR but not the other. I hope that makes sense. 

Added to master.
",2016-05-05 20:09:06,2016-05-07 03:31:04
708,490,"Changelog: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/CHANGELOG

The prompt-toolkit release has been well tested before the release, so I don't expect any issues, but please let me know if this would break something.
","Upgrade to prompt-toolkit 1.0.0
@dbcli/pgcli-core I've tested this on Python 2.7 and Python 3.5 in OS X. 

Nothing is broken in my manual testing. I tested the different keybindings, reverse incremental search etc. All of them seem to work fine. 

@darikg Can you please check this in Windows? 

Once I get a green light from Darik, I'll merge this in, unless anyone from the core team wants more time to test this thoroughly. 

@jonathanslenders your changelogs are always so impressive. :+1: from me

Thanks for testing it @darikg. 

Thanks for the updates @jonathanslenders. 
",2016-05-05 18:11:18,2016-05-10 04:02:49
709,489,"Please, add \db[+]  [PATTERN] to list tablespaces as within psql
","Add \db[+]  [PATTERN] to list tablespaces
This is now available in the latest version of pgcli (v1.1.0). Please upgrade:

```
pip install -U pgcli
```
",2016-04-27 16:01:08,2016-07-04 03:34:06
710,488,"As you may know, [RFC-3986](https://tools.ietf.org/html/rfc3986#section-2.1) allows passing ""disallowed"" characters as long as these are percent encoded.
Since PGCLI deals with the url parsing, we should expect this to happen, and use the values after they have been decoded.

(includes a simple test for the parsing and decoding)
","Unquote URI parts prior to using in connection
Thank you for the PR and the accompanying test. I appreciate the time you took to create the PR. 

I've left a comment to simplify the code a little bit. Can you please revise the PR and leave a comment when you've done so? 

Good to know. Thank you for the follow through. 👍 
",2016-04-27 16:00:47,2016-05-15 11:35:16
711,487,"Reviewer: @j-bennet 

This PR changes adds the encoding to the file that is opened to write the output. 

This is a follow-up to the PR #483
","Add encoding to the output file.
Looks good.
",2016-04-24 23:06:29,2016-04-26 17:05:23
712,486,"Is it possible to leverage the completion engine outside the pgcli UI? I would love to use those completions with a vim plugin.
","Using pgcli completion engine with text editors
I have a plugin for Sublime text editor [here](https://github.com/darikg/PgcliSublime). As far as I know that's the only one, but I'd love to see more.

would love to see the plugin for vim.",2016-04-22 10:38:47,
713,485,"Hi,

i can't get function keys (F2, F3, F4) to work with pgcli and iterm(OSX). everything is working fine with osx terminal, and function keys do work in iterm and other software, ex byobu. it seems to an issue with this specific combination.

i get the following when i press function keys.

F2 --> [[B
F3 --> [[C
F4 --> [[D
","funtion keys not working in iterm
Did you already try Fn+F2 or Fn+F3? 

I'm using iterm and tmux and I'm able to use the function keys without trouble. The key combinations are handled by (prompt_toolkit)[https://github.com/jonathanslenders/python-prompt-toolkit/]. My recommendation is to try one of the other tools written in prompt_toolkit such as [ptpython](https://github.com/jonathanslenders/ptpython) and see if function keys work in that scenario.

Hi,

Thanks for your answer.

I'm using byobu which uses tmux as backend and function keys are working fine. Same with ptpython, F3 takes me to history in ptpython and i get an ""[[C"" with pgcli. with standard ios terminal function keys are working fine.

as a workaround i setup multiline ON in the configuration file. but would prefer to be able to change it dynamically.

is there another way to change dynamically multiline, completion, etc?

Gonzalo 

@gnzsnz , I'm using pgcli with iterm2 on mac, and function keys work without any problems. I think your byobu may be interfering there, since it has its own mapping for function keys, and it would override prompt_toolkit's mapping (at least it did for me when I tried it). Did you customize your  byobu or iterm key mapping, or is it all out-of-the-box?

hi @j-bennet, i use pgcli outside byobu, otherwise key do conflict. but the problem is that even outside byobu function keys (F*) do not work for iterm and pgcli. iterm and pgcli are out of the box i have not changed key mapping.

thanks for your comments.

a simple workaround is emulating function keys with `ESC`+ `1..0` which will send `F1`..`F10` correspondingly. ",2016-04-19 17:02:23,
714,484,"I execute command 

`
pgcli database
`
`
 \i filename
`

nothing output 

then I exeute command

`
psql database
`
`
\i filename
`

I like something output then I know pgcli is working!
","\i filename
I don't fully understand this issues. Can you please tell me what version of pgcli you're using? 

The \i command was added in pgcli 0.19.0. So if you have an older version please try upgrading using `pip install -U pgcli`. 

If you're using a newer version and you're still having difficulty with this, please paste the output of your logfile. The log file is usually located in ~/.pgcli.log or ~/.config/pgcli/log.

@amjith 
use pgcli

![selection_008](https://cloud.githubusercontent.com/assets/13712791/14417622/203cd484-ffea-11e5-9def-9659a4c3d24d.png)

use psql

![selection_009](https://cloud.githubusercontent.com/assets/13712791/14417652/63ada144-ffea-11e5-8910-c6f2a057eeee.png)

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-04-10 08:02:45,2016-06-29 03:18:56
715,483,,"Add support for \o command to redirect query output to a file
@Gollum999 Thank you for the PR. Sorry it took me a while to get back to you. 

I tested the PR locally and it does the basic stuff right. 

I'd like to suggest a small improvement, can you log the query to the file in addition to the output? 

Otherwise it is hard to decipher the results from just the output. 

Actually I see that you're merely matching the behavior of psql. Can you tell me how you use `\o` in your regular workflow? 

I'm wondering if there is an advantage in preserving the psql behavior.

@amjith I actually implemented this for a friend since he uses `\o` much more than I do.  He said that he typically uses it to diff different sets of output, e.g. a table before/after a modification, similar tables between development and release databases, etc..  In which case I don't see any harm in adding the query to the output file.

I also thought about giving some sort of feedback after using `\o`, e.g. ""Writing to file {filename}"" or ""File output disabled"", but I left it out to try to stick to psql's original functionality.  Is that something you would like added?

That's a great idea. I'm all in favor of providing sensible user feedback. 👍 

I think having the queries in the output file will be valuable. Thanks for tackling this. 

It works great! Well done. 

There is a one corner case that is not handled. If the output has unicode characters then writing to the file fails. This is because you're opening the file without specifying an encoding. This can be easily fixed by adding an encoding as follows:

```
with open(self.output_file, 'a', encoding='utf-8') as f:
```

Once you make that change it is ready to be merged. 

I'm going to merge the PR and make that change myself. Thank you for taking the time to contribute. 🍨 

Thanks for finishing that up.  I've been busy the past few weeks and haven't had the time.

Glad to help!
",2016-04-05 15:06:57,2016-04-24 23:03:22
716,482,,"add feature connect dsn by config
Hi @roramirez,

I like this feature. It's a great addition. 

I'm not thrilled about the name of the section. Calling it `[dsns]` is not very intuitive. 

@dbcli/pgcli-core What's a good name to call the section with a list of commonly used dsns? 

`[favorite_dbs]`
`[saved_dbs]`

Hello @amjith ,

Yes, the name is really s*cks!. Was  first thing to my mind.

Another names could be

`[alias_dsn]` or  `[alias_dbs]`

I like `[alias_dsn]`. Let's go with that.

The PR works great functionally. But it needs a little bit of polish in certain areas, so  I've also left a few comments inline. 

When you've addressed the comments and updated this PR, leave a comment, since Github doesn't notify me when new commits are added to an existing PR. 

@amjith The PR  is already updated.

Thank you for the PR. Looks great. 

:rocket: 
",2016-03-25 02:51:11,2016-03-28 03:21:26
717,481,"Reviewer: @stuartquin
","Update pgspecial dependency to 1.3.0
@stuartquin Can you merge this when you have a moment? 
",2016-03-24 14:19:00,2016-03-28 08:22:46
718,480,"Initial prototype of #467 

@amjith feel free to check it out. Looks like this for me:
![image](https://cloud.githubusercontent.com/assets/384556/14009181/9b289f46-f146-11e5-9365-ea4f835fa0ea.png)

If you select a directory it will start prompting autocomplete for the next characters you input or for everything if you just press tab.

![image](https://cloud.githubusercontent.com/assets/384556/14009202/dc0e3098-f146-11e5-8767-98dcf837e528.png)

Currently also handles `..` and `~`. What do you think?
","Add \i path completion
@ajlai Thanks for the PR. It works great in my machine.

I was hoping to use the builtin PathCompleter from prompt_toolkit: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/contrib/completers/filesystem.py

Here's an example of how it is used in ptpython: https://github.com/jonathanslenders/ptpython/blob/master/ptpython/completer.py

The advantage in reusing prompt_toolkit's path completer is we get the benefits of bug fixes in the future for free and it is well tested (in all the platforms we support). 

What do you think? 

Hey @amjith,
Thanks for the suggestion. I'll take a look at this later tonight.

Hi @ajlai, did you get a chance to look into the PathCompleter?

Hi @amjith,
I did take a look at PathCompleter and agree that we should use that instead. I'll have some more time to work on the PR tomorrow.

@amjith I switched it over to PathCompleter. Good suggestion, it looks a lot simpler :smile:.

Please give it a try, it behaves a bit differently since it's now just using the bare PathCompleter completions (need to manually type `/` to enter dirs, no display_meta).

@ajlai Thank you for switching over. I've tested it and it looks great. :+1: 

We can add the meta information at a later time. 

@darikg Would you mind trying this in Windows to see if the path completer will work with dos path names? 

This is great! It works fine in Windows, although it does seem to break when directory names contain spaces. Probably a bug to report upstream to prompt-toolkit.

Thanks for testing it @darikg. 
",2016-03-24 05:31:46,2016-04-05 02:13:42
719,479,"Fix for #478

![image](https://cloud.githubusercontent.com/assets/384556/13977032/c444e57a-f082-11e5-80fa-432390563552.png)
","Fix auto-completion breaking for table names with caps
Neat! Thanks for the quick turn around. :rocket: 
",2016-03-23 06:07:38,2016-03-24 03:42:34
720,478,"Here's an example: 

Broken for a table named ""INSERT"".

![quoted-completion](https://cloud.githubusercontent.com/assets/49260/13954269/4ec5bda4-effd-11e5-84e9-a9b6c260b7eb.gif)

NOT broken for table named ""select"".

![quoted-completion-not-broken](https://cloud.githubusercontent.com/assets/49260/13954354/9f550f68-effd-11e5-8818-7a80a277ba33.gif)
","Auto-completion breaks for table names with ALL CAPS
This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-03-22 14:15:28,2016-06-29 03:19:25
721,477,"Fix for #475.

The lexical priority was originally implemented as the `-index` of a match text within the lexically sorted collection in `find_matches`.
The problem is when `get_completions` combines results from multiple `find_matches` calls.
As the `-index` is the priority only within the scope of a single `find_matches` call, we end up with jumbling (especially in the case `SELECT * FROM`) because `get_completions` has only the lexical priority to do tie breaking, so it orders the completions as the first elem from all the get_X_matches, second elem from all get_X_matches, etc.

The new lexical_priority is properly comparable when we're combining multiple `find_matches` calls.
I've also added a test for making sure the `SELECT * FROM` results are ordered.

It looks like this for me:
![image](https://cloud.githubusercontent.com/assets/384556/13896691/eaa6af1a-ed52-11e5-9012-b2ea57f19945.png)
","Fix lexical order tiebreaking
Thank you for taking the time to dig in. I'm checking it out right now. 

Hi @ajlai, thanks for looking at this.

This implementation treats non-alphanumeric characters as significant, so table names that require quoting will always appear at the top of the results (`-ord('""')` is -34):

![image](https://cloud.githubusercontent.com/assets/1424858/13908447/e323135a-eed8-11e5-895a-071225f56e99.png)

I think we can fix this by tweaking the priority calculation slightly

```
lexical_priority = tuple(-ord(c) for c in item if c.isalnum()) + (1,)
```

In other words, use only alphanumeric characters when computing the lexical tiebreaker. I ran a quick test which looks correct:

![image](https://cloud.githubusercontent.com/assets/1424858/13908488/a07877a6-eed9-11e5-84b5-5e9be2e555d5.png)

What do you think?

cc @amjith 

Huh. One interesting side effect of my suggestion is that it changes the ordering of underscore-separated names:

![image](https://cloud.githubusercontent.com/assets/1424858/13908598/4058483a-eedc-11e5-9c17-b44858de56d8.png)

Notice the `authorization` table, which, without the `if c.isalnum()` clause, ends up at the bottom of the table names that start with `auth`. At the moment I think I actually prefer this new ordering, but I wanted to make sure you're aware of this ramification of my suggestion.

Hi @drocco007,
Thanks for the suggestion! I like the quotes being ignored, but am not a fan of the underscore-separated case since `authorization` ends up in the middle of a bunch of `auth_X` suggestions. I'm currently leaning towards still keeping all chars in the lexical priority for consistency.

FWIW, sublime text with a blank `goto anything` does do their ordering this way:
![image](https://cloud.githubusercontent.com/assets/384556/13910343/d93d0576-eedd-11e5-9dd3-15ec547d571d.png)

I'll defer to @amjith though for what we want the expected behavior to be :smile:

> FWIW, sublime text with a blank goto anything does do their ordering this way:

Sure, but keep in mind that the quotes in the name of a file are significant in a way that the quotes around a PG table name are not: for the `""user""` file in the Sublime Text example, the quote characters are part of the name, whereas in the PG examples the table's name is actually `user`; the quotation marks are simply an artifact of PostgreSQL's handling of the intersection between table naming rules and its reserved keywords.

I'm not too concerned about the underscores, but I do think we need to keep the existing quote handling, which was in place long before the lexical ordering change that this PR is updating. Fortunately the spelling to do that is straightforward:

```
lexical_priority = tuple(-ord(c) for c in self.unescape_name(item)) + (1,)
```

I haven't had a chance to review this yet. But I'll get some time tonight. 

Sorry about the delay. 

Hi @ajlai, Thanks for taking the time to dig into this and thanks @drocco007 for reviewing the change and catching the quoted names bubbling to the top. 

My preference is to not have the quoted names bubble up, but I'm also not happy about ignoring the underscores in names. Having `authorization` show up in the middle of `auth_*` names looks odd. My preference would be to strip the quotes when determining the priority. Fortunately it is very easy to do. We already have a function to do exactly that `unescape_name()` https://github.com/dbcli/pgcli/blob/master/pgcli/pgcompleter.py#L63. 

@ajlai would you mind adding that behavior to your PR? If you're busy, let me know and I'll be happy to merge this and take on that task myself. 

Thank you @amjith and @drocco007 for reviewing!

I'll add this to the PR later today.

@ajlai When you get a chance to add a commit can you leave a comment in this PR? Github doesn't automatically notify when a new commit is added to a PR.

@amjith, names are now unescaped. PTAL.

Yup. It works as expected. Thanks for fixing the bug. :ice_cream: 
",2016-03-19 04:49:27,2016-03-23 05:37:13
722,476,"Changes (see 0.58 .. 0.60.):
https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/CHANGELOG

I also added a simple example of the continuation prompt. This shows dots in front of every next line, when the input is multiline. Feel free to change this.
","Upgrade to prompt_toolkit 0.60.
Works well. I like the continuation prompt. :)

:+1: 
",2016-03-14 20:42:01,2016-03-18 18:37:12
723,475,"<img width=""759"" alt=""1__1_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli____tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/13720553/2dadeb8a-e7c1-11e5-8455-fd6c9d8fa091.png"">

The list of items suggested after the `FROM` keyword are not in any specific order. The list has alternating table names and function names. 

@darikg Any thoughts that jump out?  

 @drocco007 I remember you made a change to the fuzzy completion recently, is this behavior expected? 
","Suggestions after the FROM keyword are jumbled
Wow that's weird. If you delete your history file, does the effect persist?

I deleted the history and started pgcli. Here's a screenshot. 

![1__1_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli____tmux_](https://cloud.githubusercontent.com/assets/49260/13726589/f1436224-e883-11e5-9060-3dbfb8806712.png)

Interesting. I'll have a look over the PR later today :)
",2016-03-12 03:42:55,2016-07-04 03:34:42
724,474,"I have enabled it with the F4 key, but how do I stop ""inserting"" and start using the vi keys?
","How to actually use vi-mode
You can press 'esc' key to go to normal mode which allows you to use the vi keys.

Thats not working for me! Pressing escape key doesn't do anything, I am on Mac (10.14.5) in iTerm with tmux.
Same here. It used to work a few weeks ago, but not anymore.

[EDIT]: Turns out there was an update. I could not install it via AUR so I had missed it. I decided to remove my AUR-based install and instead install via pip to get the latest version. After installing the latest version and manually upgrading psycopg2 everything works like before.",2016-03-11 11:35:20,2016-06-29 03:19:35
725,473,,*425,2016-03-09 23:33:03,2016-03-09 23:33:09
726,472,"`pgcli` seems to work fine after `sqlparse` version bump.

Found three failing tests, but are the same which fail with previous `sqlparse` version, so I think it's ok:

```
Failing scenarios:
  features/iocommands.feature:3  edit sql in file with external editor

4 features passed, 1 failed, 0 skipped
7 scenarios passed, 1 failed, 0 skipped
57 steps passed, 1 failed, 3 skipped, 0 undefined
```

It seems all are related to editing commands in an external file:
- red: And we start external editor providing a file name
- blue: And we type sql in the editor                      # None
- blue: And we exit the editor                             # None
- blue: Then we see the sql in prompt                      # None
","Upgrade sqlparse requirement to version 0.1.19
Looks good! 

:+1: 
",2016-03-09 21:50:42,2016-03-18 18:34:36
727,471,"Changes (see 0.58 and 0.59.):
https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/CHANGELOG

I also added a simple example of the continuation prompt. This shows dots in front of every next line, when the input is multiline. Feel free to change this.
","Upgrade to prompt_toolkit 0.59.
@darikg Can you check if this works well in Windows? 

@dbcli/pgcli-core Can everyone take it for a spin and report back if you see any issues? 

One issue has been found, regarding pasting in Vi mode. (Screen doesn't refresh.) Because of that, I had to prepare a new release. Normally it should be able to push it to Pypi today. Jonathan

Looks good to me

Closing this in favour of: https://github.com/dbcli/pgcli/pull/476
There are a couple of issues that are fixed in prompt_toolkit 0.60. (Nothing backwards incompatible compared to 0.59.)
",2016-03-06 14:50:23,2016-03-14 20:43:12
728,470,"Adds timestamptz to DATE custom extension
","Issue #448. Add timestamptz to DATE custom extension
Thank you!!

:guitar: 
",2016-02-26 15:22:33,2016-02-29 05:53:06
729,469,"If I type the command prefix ""set schema "", a list drops down containing a list of all my schemas for autocompletion. However, if I select a schema, the command is then completed without the required single quote marks around the schema name, and so it fails.

Moreover, if I type the correct command prefix ""set schema '"" (same as above, except that I provide a single quote mark as a hint), I get no autocompletion options at all.

Observe, please:

Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
pgdbdev> set schema thumper
syntax error at or near ""thumper""
LINE 1: set schema thumper
                   ^

pgdbdev> set schema '
unterminated quoted string at or near ""'""
LINE 1: set schema '
                   ^

pgdbdev> set schema 'thumper'
SET

The very last example succeeded only because I hand-keyed it.
","'set schema' autocomplete generates a syntax error because it omits single quotes.
You're right this is an issue. We'll address it. 
",2016-02-25 00:26:26,2017-06-10 23:53:23
730,468,"Expected: when I type the command prefix 'set s', I get a drop-down menu for autocompleting all of the commands beginning with 's', especially 'set schema'.

Observed: tab key does nothing after typing 'set s'. No drop-down menu.

Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
pgdbdev> set s
","The 'set' command fails to autocomplete the 'schema' subcommand (or any other).
Valid issue. 
",2016-02-25 00:20:56,
731,467,"When I import a SQL file using the \i command, I expect the tab key to autocomplete filenames for me, however pgcli doesn't know how to do this (PostgreSQL 9.3.3, Python 2.7.10, OS X 10.10.5).

Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
pgdbdev> \i foo

I hit tab after typing the prefix ""foo"", so pgcli should have autocompleted ""foobar.sql"", since the file foobar.sql exists in the working directory. Instead, nothing happened -- no autocompletion. Absolute and relative paths to files outside the working directory should work, too, but they don't. For reference, this autocompletion feature works well in the old psql CLI.
","\i <filename> + tab fails to autocomplete filenames
Yes. We have this planned but haven't gotten around to it. 

@amjith I'd be interested in taking a stab at this one if someone isn't already doing it.

Be my guest. :smile: 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-02-24 23:47:48,2016-06-29 03:20:05
732,466,"Anytime I try to import a SQL file using the \i command, I get this error message instead (PostgreSQL 9.3.3, Python 2.7.10, OS X 10.10.5).

Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
pgdbdev> \i foo.sql
run() got an unexpected keyword argument 'on_error'
","\i <filename> causes ""run() got an unexpected keyword argument 'on_error'""
Sorry about that. This is fixed in master. You can install from master directly using: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Thank you.

On Wednesday, March 2, 2016, Amjith Ramanujam notifications@github.com
wrote:

> Sorry about that. This is fixed in master. You can install from master
> directly using:
> 
> pip install -U https://github.com/dbcli/pgcli/archive/master.zip
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/issues/466#issuecomment-191592767.

Hi,
I'm reporting this cause I see it's still open.
Encountering it as well. Installed via Brew.
Config:
pgcli: 0.20.1
OS X: 10.11.4
PostgreSQL: 9.5.1
Python: 2.7.10

\i people.sql
run() got an unexpected keyword argument 'on_error'

Did you try installing from master branch? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

I've left the ticket open because we haven't released it yet. 

Works as a charm, excellent.

Thank you!

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-02-24 23:44:37,2016-06-29 03:20:14
733,465,"Thanks for this great project! :smile: 
Just installed and noticed the config file location in the README was not up to date.
","Update config file location in README
Thank you! :ice_cream: 
",2016-02-21 18:11:19,2016-02-23 06:04:41
734,464,"Missing module in prompt_toolkit?

```
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 7, in <module>
    from pgcli.main import cli
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 23, in <module>
    from prompt_toolkit.shortcuts import create_default_layout, create_eventloop
ImportError: cannot import name create_default_layout
```
","ImportError: cannot import name create_default_layout
I am getting the same error after installing pgcli with:

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

```
gab@xxxx:~$ pgcli
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 7, in <module>
    from pgcli.main import cli
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 23, in <module>
    from prompt_toolkit.shortcuts import create_default_layout, create_eventloop
ImportError: cannot import name create_default_layout
```

What version of prompt_toolkit do you have installed?

If it not 0.57, you're going to have a bad time. 

You can check the version of prompt_toolkit by running `pip freeze | grep prompt_toolkit`

Hi @amjith,

It's a confusing situation:

I need the last version of mycli due to a bug (see our exchange on https://github.com/dbcli/mycli/issues/235).

1) I installed mycli:

```
09:27 gab@xxx:~$ sudo pip install -U https://github.com/dbcli/mycli/archive/master.zip
Collecting https://github.com/dbcli/mycli/archive/master.zip
  Downloading https://github.com/dbcli/mycli/archive/master.zip (281kB)
    100% |████████████████████████████████| 286kB 1.7MB/s 
Requirement already up-to-date: click>=4.1 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: Pygments>=2.0 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Collecting prompt-toolkit==0.57 (from mycli==1.5.2)
  Using cached prompt_toolkit-0.57-py2-none-any.whl
Requirement already up-to-date: PyMySQL>=0.6.2 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Collecting sqlparse>=0.1.16 (from mycli==1.5.2)
Requirement already up-to-date: configobj>=5.0.6 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: pycrypto>=2.6.1 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: six>=1.9.0 in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.57->mycli==1.5.2)
Requirement already up-to-date: wcwidth in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.57->mycli==1.5.2)
Installing collected packages: prompt-toolkit, sqlparse, mycli
  Found existing installation: prompt-toolkit 0.46
    Uninstalling prompt-toolkit-0.46:
      Successfully uninstalled prompt-toolkit-0.46
  Found existing installation: sqlparse 0.1.16
    Uninstalling sqlparse-0.1.16:
      Successfully uninstalled sqlparse-0.1.16
  Found existing installation: mycli 1.5.2
    Uninstalling mycli-1.5.2:
      Successfully uninstalled mycli-1.5.2
  Running setup.py install for mycli ... done
Successfully installed mycli-1.5.2 prompt-toolkit-0.57 sqlparse-0.1.19
```

Works as expected:

```
09:27 gab@xxx:~$ mycli
Password: 
```

pip freeze is:

```
09:28 gab@xxx:~$ pip freeze
awscli==1.9.18
botocore==1.3.18
click==6.3
colorama==0.3.3
configobj==5.0.6
docutils==0.12
helper==2.4.1
iotop==0.6
jmespath==0.9.0
Magic-file-extensions==0.2
mycli==1.5.2
newrelic-plugin-agent==1.3.0
pgcli==0.20.1
pgspecial==1.2.0
prompt-toolkit==0.57
psycopg2==2.5.4
pyasn1==0.1.9
pycrypto==2.6.1
Pygments==2.1.3
pyinotify==0.9.4
PyMySQL==0.7.2
python-dateutil==2.2
PyYAML==3.11
requests==2.9.1
rsa==3.2.3
setproctitle==1.1.9
six==1.10.0
sqlparse==0.1.19
wcwidth==0.1.6
```

2) I install pgcli with ""pip install pgcli""

If I do that, pgcli works, mycli doesn't work:

```
09:26 gab@xxx:~$ sudo pip install pgcli
Requirement already satisfied (use --upgrade to upgrade): pgcli in /usr/local/lib/python2.7/dist-packages
Requirement already satisfied (use --upgrade to upgrade): configobj>=5.0.6 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): psycopg2>=2.5.4 in /usr/lib/python2.7/dist-packages (from pgcli)
Collecting prompt-toolkit==0.46 (from pgcli)
  Using cached prompt_toolkit-0.46-py2-none-any.whl
Collecting sqlparse==0.1.16 (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): pgspecial>=1.1.0 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): click>=4.1 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): setproctitle>=1.1.9 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): Pygments>=2.0 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): six in /usr/local/lib/python2.7/dist-packages (from configobj>=5.0.6->pgcli)
Requirement already satisfied (use --upgrade to upgrade): wcwidth in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.46->pgcli)
Installing collected packages: prompt-toolkit, sqlparse
  Found existing installation: prompt-toolkit 0.57
    Uninstalling prompt-toolkit-0.57:
      Successfully uninstalled prompt-toolkit-0.57
  Found existing installation: sqlparse 0.1.19
    Uninstalling sqlparse-0.1.19:
      Successfully uninstalled sqlparse-0.1.19
Successfully installed prompt-toolkit-0.46 sqlparse-0.1.16
09:27 gab@xxx:~$ pgcli
FATAL:  database ""gab"" does not exist

09:27 gab@xxx:~$ mycli
Traceback (most recent call last):
  File ""/usr/local/bin/mycli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 3138, in <module>
    @_call_aside
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 3124, in _call_aside
    f(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 3151, in _initialize_master_working_set
    working_set = WorkingSet._build_master()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 663, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 676, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 849, in resolve
    raise DistributionNotFound(req, requirers)
pkg_resources.DistributionNotFound: The 'prompt-toolkit==0.57' distribution was not found and is required by mycli
```

pip freeze is:

```
09:28 gab@xxx:~$ pip freeze
awscli==1.9.18
botocore==1.3.18
click==6.3
colorama==0.3.3
configobj==5.0.6
docutils==0.12
helper==2.4.1
iotop==0.6
jmespath==0.9.0
Magic-file-extensions==0.2
mycli==1.5.2
newrelic-plugin-agent==1.3.0
pgcli==0.20.1
pgspecial==1.2.0
prompt-toolkit==0.46
psycopg2==2.5.4
pyasn1==0.1.9
pycrypto==2.6.1
Pygments==2.1.3
pyinotify==0.9.4
PyMySQL==0.7.2
python-dateutil==2.2
PyYAML==3.11
requests==2.9.1
rsa==3.2.3
setproctitle==1.1.9
six==1.10.0
sqlparse==0.1.16
wcwidth==0.1.6
```

3) I install the latest version of pgcli with ""pip install -U https://github.com/dbcli/pgcli/archive/master.zip"" and mycli with ""pip install -U https://github.com/dbcli/pgcli/archive/master.zip""

```
09:31 gab@xxx:~$ sudo pip install -U https://github.com/dbcli/pgcli/archive/master.zip
Collecting https://github.com/dbcli/pgcli/archive/master.zip
  Downloading https://github.com/dbcli/pgcli/archive/master.zip (419kB)
    100% |████████████████████████████████| 419kB 1.4MB/s 
Requirement already up-to-date: pgspecial>=1.1.0 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: click>=4.1 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: Pygments>=2.0 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: prompt-toolkit==0.57 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: psycopg2>=2.5.4 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Collecting sqlparse==0.1.16 (from pgcli==0.20.1)
Requirement already up-to-date: configobj>=5.0.6 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: humanize>=0.5.1 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: wcwidth>=0.1.6 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: setproctitle>=1.1.9 in /usr/local/lib/python2.7/dist-packages (from pgcli==0.20.1)
Requirement already up-to-date: six>=1.9.0 in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.57->pgcli==0.20.1)
Installing collected packages: sqlparse, pgcli
  Found existing installation: sqlparse 0.1.19
    Uninstalling sqlparse-0.1.19:
      Successfully uninstalled sqlparse-0.1.19
  Found existing installation: pgcli 0.20.1
    Uninstalling pgcli-0.20.1:
      Successfully uninstalled pgcli-0.20.1
  Running setup.py install for pgcli ... done
Successfully installed pgcli-0.20.1 sqlparse-0.1.16
09:32 gab@xxx:~$ sudo pip install -U https://github.com/dbcli/mycli/archive/master.zip
Collecting https://github.com/dbcli/mycli/archive/master.zip
  Downloading https://github.com/dbcli/mycli/archive/master.zip (281kB)
    100% |████████████████████████████████| 286kB 1.5MB/s 
Requirement already up-to-date: click>=4.1 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: Pygments>=2.0 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: prompt-toolkit==0.57 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: PyMySQL>=0.6.2 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Collecting sqlparse>=0.1.16 (from mycli==1.5.2)
Requirement already up-to-date: configobj>=5.0.6 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: pycrypto>=2.6.1 in /usr/local/lib/python2.7/dist-packages (from mycli==1.5.2)
Requirement already up-to-date: six>=1.9.0 in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.57->mycli==1.5.2)
Requirement already up-to-date: wcwidth in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.57->mycli==1.5.2)
Installing collected packages: sqlparse, mycli
  Found existing installation: sqlparse 0.1.16
    Uninstalling sqlparse-0.1.16:
      Successfully uninstalled sqlparse-0.1.16
  Found existing installation: mycli 1.5.2
    Uninstalling mycli-1.5.2:
      Successfully uninstalled mycli-1.5.2
  Running setup.py install for mycli ... done
Successfully installed mycli-1.5.2 sqlparse-0.1.19
```

Now pgcli does not work but mycli does:

```
09:32 gab@xxx:~$ pgcli
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 3138, in <module>
    @_call_aside
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 3124, in _call_aside
    f(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 3151, in _initialize_master_working_set
    working_set = WorkingSet._build_master()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 663, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 676, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 849, in resolve
    raise DistributionNotFound(req, requirers)
pkg_resources.DistributionNotFound: The 'sqlparse==0.1.16' distribution was not found and is required by pgcli
09:32 gab@xxx:~$ mycli
Password: 

09:32 gab@xxx:~$ 
```

pip freeze is:

```
awscli==1.9.18
botocore==1.3.18
click==6.3
colorama==0.3.3
configobj==5.0.6
docutils==0.12
helper==2.4.1
humanize==0.5.1
iotop==0.6
jmespath==0.9.0
Magic-file-extensions==0.2
mycli==1.5.2
newrelic-plugin-agent==1.3.0
pgcli==0.20.1
pgspecial==1.2.0
prompt-toolkit==0.57
psycopg2==2.6.1
pyasn1==0.1.9
pycrypto==2.6.1
Pygments==2.1.3
pyinotify==0.9.4
PyMySQL==0.7.2
python-dateutil==2.2
PyYAML==3.11
requests==2.9.1
rsa==3.2.3
setproctitle==1.1.9
six==1.10.0
sqlparse==0.1.19
wcwidth==0.1.6
```

Conclusion:
I cannot get the last version of mycli (installed with ""pip install -U https://github.com/dbcli/mycli/archive/master.zip"") and pgcli working at the same time weather I use ""pip install pgcli"" or ""pip install -U https://github.com/dbcli/pgcli/archive/master.zip""

Any idea?

Ah this is due to a mismatch in sqlparse library. I'll fix that asap. Thanks for the detailed report. I appreciate the time you took to document it. 

@gabfl Looks like you have a newer version of sqlparse installed in your system. This version is not the right one to use with mycli or pgcli. So I'm not sure how that got installed. But I'm in the process of testing the version of sqlparse you have installed on the system. So if you need a temporary solution, my suggestion is to downgrade sqlparse using `pip install sqlparse==0.1.16`. 

Hi @amjith 

> This version is not the right one to use with mycli or pgcli. So I'm not sure how that got installed.

If you look above, it looks like it's installed with ""pgcli"":

```
sudo pip install -U https://github.com/dbcli/pgcli/archive/master.zip
Collecting https://github.com/dbcli/pgcli/archive/master.zip
[....]
  Found existing installation: sqlparse 0.1.16
    Uninstalling sqlparse-0.1.16:
      Successfully uninstalled sqlparse-0.1.16
  Found existing installation: mycli 1.5.2
    Uninstalling mycli-1.5.2:
      Successfully uninstalled mycli-1.5.2
  Running setup.py install for mycli ... done
Successfully installed mycli-1.5.2 sqlparse-0.1.19
```

Both pgcli and mycli now depend on the same version of `prompt_toolkit`. Please let me know if the problem still persists after an upgrade. 

```
pip install -U pgcli
```

It works great, thanks a lot
",2016-02-19 03:22:58,2016-07-04 15:52:14
735,463,"Addresses #462 

Reviewer: @stuartquin 
",Explicitly add wcwidth as a dependency.,2016-02-18 05:41:25,2016-02-18 18:39:14
736,462,"pgcli installs correctly, but when trying to run it (first time), complains that wcwidth package hasn't been installed. Using version 0.20.1 installed on Ubuntu Trusty with `pip install pgcli`.

``` shell
root@foo:/tmp# pgcli -U user db
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 2749, in <module>
    working_set = WorkingSet._build_master()
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 444, in _build_master
    ws.require(__requires__)
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 725, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 628, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: wcwidth
```
","No dependency declared on wcwidth
That's surprising. One of the dependencies of pgcli is prompt-toolkit which has wcwidth as a dependency. But I'll make changes to the setup.py to add wcwidth dependency explicitly. 

Thanks for reporting. 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2016-02-16 11:36:03,2016-06-29 03:20:25
737,461,"Suppose we have a bunch of tables start with the name `user`, e.g. `user`, `user_group`, `user_action`, `user_address`, etc. When searching for the text `user`, where the match group length and position are identical for all of these items, the current master of pgcli produces completion results in arbitrary order:

![pgcli arbitrary order](https://cloud.githubusercontent.com/assets/1424858/13040041/fd36c3e2-d374-11e5-80d3-97317206df27.png)

This PR adds a new priority fallback — after the fuzzy match group length, position, and history priority — such that, if the existing ranking fails to produce a total ordering, lexical order is used to break the ties. Here is the previous example with this change in place:

![pgcli lexical order](https://cloud.githubusercontent.com/assets/1424858/13040087/9b2e6050-d375-11e5-9930-c1bc6addfbd8.png)
","Use lexical order to break ties when fuzzy matching
Looks good to me. 

Thanks for addressing this case. 

:fountain: 
",2016-02-15 04:51:25,2016-02-15 15:53:30
738,460,"reading http://philip.greenspun.com/sql/introduction.html
and inputting `insert into mailing_list (name, email)
values ('Michael O''Grady','ogrady@fastbuck.com');` pgcli's syntax highlighting doesn't understand the double quote rule.
","pgcli syntax highlighting does not understand double quote
You're right that it doesn't auto-escape two single quotes adjacent to each other while syntax highlighting, but functionally it does the right thing, which is to insert the value with the single quote. I can understand how that can send the wrong signal to someone learning SQL and typing in the command. 

This will require an exception in the Pygments module. Would you mind filing an issue with [pygments](https://bitbucket.org/birkenfeld/pygments-main). 

https://bitbucket.org/birkenfeld/pygments-main/issues/1209/sql-double-quote-does-not-get-highlighted

Which lexer are you using? I checked with the SQL lexer and the specialized PostgresSQL lexer, and both seem to highlight the given snippet just fine.

@birkenfeld I'm using PostgresLexer. https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L34

This is what I see when I do the double quote. You'll see that after I type `'Michael O''Grad` it highlights `Michael` in red which denotes it's a string and then `Grad` is all gray denoting unfinished quote. 

![double-quote](https://cloud.githubusercontent.com/assets/49260/12877511/44cf82cc-cdc9-11e5-8065-870be9466dde.gif)

Ah, I see. This is because Pygments usually caters only for complete code highlighting. So a string is only recognized once it has a beginning and end quote.

In this case, it is easy to fixup the behavior though; using a separate state for strings is possible. I implemented that in https://bitbucket.org/birkenfeld/pygments-main/commits/4f26309906cdacdcedd092ea16f9e5b11e874755 and it will be released with 2.1.1.

Thank you for fixing it. I'll bump up the version in the next release. Cheers!
",2016-02-07 05:46:59,2016-02-07 15:02:49
739,459,"I have some databases that are only accessible via SSH tunnel. Right now, I have to start a tunnel in another tab or the background, then use `pgcli` to connect to the tunnel locally. When I'm done, I have to remember to kill the tunnel. It would be great if I could pass another argument(s) to `pgcli` and it would setup and teardown the tunnel for me.

I imagine something like `pgcli --ssh 'ssh_user:ssh_password@ssh_host:ssh_port' 'postgresql://pg_user:pg_password@pg_host:pg_port/dbname'` which would do the equivalent of:

``` sh
ssh -p ssh_port -L localhost:0000:pg_host:pg_port -N ssh_user@ssh_host
psql -U pg_user -h localhost -p 0000 -d dbname
```

where `0000` is some random available port.

[`sshtunnel`](https://github.com/pahaz/sshtunnel) looks like it might be well suited to manage the tunnel. It also appears to respect settings in [`ssh_config(5)`](http://linux.die.net/man/5/ssh_config), so `pgcli` users with more complicated SSH needs can configure them there.
","Setup and teardown an SSH tunnel
Thank you for the request. I'm not sure if there is enough interest for this to be built into pgcli as opposed to keeping them separate. 

I'm hesitant to build this in as this has potential to cause a lot more support load. People might have different versions of paramiko or pycrypto or openssl lib etc and debugging the issues raising from that can be quite hairy. 

I can keep this issue open and if I see more people interested in this, I'll reconsider. 

I still like this idea. Perhaps dealing with it as a first-class citizen is too complex as @amjith points out. Would a more generic setup/teardown hook structure be more appropriate? I can see multiple use-cases where something like pre/post hooks would be helpful. SSH connection management being one...
I'm using a wrapper for mycli to setup the tunnel(s) and have some fancy bash auto completion (so I can auto complete server/database names). I've posted it on gist.github.com: https://gist.github.com/meeuw/f55485fd3d35d2102d31d3e3513e7489

I don't know why you want to use hooks, could you give an example how that will be useful?
@cbandy @diddeb You can also connect via SSH without worrying about closing the tunnel via the `ExitOnForwardFailure` configuration option (`-o`). And, you can make SSH go in the background so you don't need two tabs (`-f`).

I have a shell function I can call whenever I want to bind a local port to a postgres port on the SSH server. The `sleep 10` means that I'll have 10 seconds to connect to the port before the SSH connection closes automatically.

```bash
sshb_pg() {
    ssh -f -o ExitOnForwardFailure=yes -L 9432:localhost:5432 \
    $1 sleep 10
}
```

Usage:
```bash
$ sshb_pg ssh_user@ssh_host && pgcli [...]
```

Use shell aliases to do it all at once:
```bash
alias pg_ssh=""sshb_pg ssh_user@ssh_host && pgcli -U pg_user -h localhost -p 9432 -d dbname""

$ pg_ssh
dbname> 
```
> I don't know why you want to use hooks, could you give an example how that will be useful?

Perhaps requesting/revoking temporary credentials from something like [Vault](https://www.vaultproject.io/docs/secrets/databases/index.html) could happen in hooks.
Hmm so you'd like to use something like the following command:
`PGHOST=somethingfromvaultscript PGPASSWORD=secret PGUSER=postgres pgcli --startup-hook-script ""/path/to/vaultscript""` ? 
That wouldn't be very different to the wrapper shell script as suggested by @tsroten:
`/path/to/vaultscript ; PGHOST=somethingfromvaultscript PGPASSWORD=secret PGUSER=postgres pgcli`

I only think a hookscript might be useful for reconnects or to revalidate/rerequest authentication from vault.
A workaround I have been using is having a node.js daemon that runs ssh when a connection comes in and pipes the two connections together:
https://gist.github.com/dvdbng/621043d7b60713208bafb1f06191884e
Then you can connect to localhost and the daemon will forward it through the ssh connection to the db server
```
pgcli postgres://db_user:db_pass@localhost:5433/db_name
```
Here is what I did when using ssh alias:
```sh
# 5433 is the local port
# 5432 is the remote port
# my-dev is the ssh alias
ssh -L 5433:localhost:5432 -N my-dev

# connect to the local port
pgcli -U pg_user -h localhost -p 5433 -d my_database
```",2016-02-06 14:31:40,
740,458,,"ensure target dir exists when copying config
Close, but the tests are still failing because when we initialize logging it tries to write to `~/.config/pgcli/log` location. This is the default location specified in the `pgclirc` file. 

I think we should really be calling the `os.makedirs()` in the `__init__` method of the PGCli class. That will make sure the necessary setup is done before writing the config and the log file. 

:+1:

Thanks for sticking with it. :ice_cream: 
",2016-02-03 20:58:56,2016-02-04 03:21:29
741,457,"Addresses BC date issue by typecasting all `DATE` and `TIMESTAMP` results to string.
","Issue #448 extension for BC dates
Looks good. 

The test failures are caused by #456. It is now addressed by #458.

Thanks! 

:crossed_flags: 
",2016-02-03 10:54:34,2016-02-04 03:23:22
742,456,"to prevent obvious regressions at least
","test for recent patch for execute_from_file
Nice!!

:lollipop: 

Hrm. Looks like travis didn't run the tests when the PR was opened. Now it is failing after I've merged it.

https://travis-ci.org/dbcli/pgcli/builds/106639518
",2016-02-02 18:59:20,2016-02-03 02:55:16
743,455,"For the query select count(*) from table_name group by column which returns more than 1000 rows is returning only question mark like as follow 

`???????+??4????????+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???+++???`
","Group by which has more than 1000 rows returning Question mark
Are you on windows by any chance?

Yes I am using windows. Is it a known issue?

Yeah, for some reason the windows default pager (more.exe) mis-identifies the pretty printed table symbols as being unicode. Do you have any other pagers installed on your computer? I have less.exe which I think came with Git for Windows. I set the environmental variable `PAGER` to `less` and then that fixed the issue.

@PaviJas Did you try changing your default pager to `less.exe`?

If that didn't fix the issue, please reopen the ticket. 
",2016-02-02 15:13:17,2016-02-07 15:23:59
744,454,"Reviewer: @stuartquin 

We display the `null` values as `<null>` in the tabular output, this PR makes pgcli do the same for expanded output as well. 

Addresses https://github.com/dbcli/pgcli/issues/450
","Display null values as <null> in expanded output.
Looks good, does the job :+1: 
",2016-02-02 06:03:25,2016-02-02 19:44:20
745,453,"Since we added two more parameters to the result tuple, we need to update the error case for execute_from_file() special functions. 

Reviewer: @darikg 
","Handle a corner case for execute_from_file.
Is this related to the discussion in #449, where pgexecute is appending the extra two tuple elements?

I'm a little confused because I don't see a behavioral difference with or without this patch applied

Yes it is related to #449. While I was reviewing the code in the PR I realized that the exception clauses did not set the boolean to false in the tuple that they were returning. This boolean is used for determining whether to save the last executed sql in case we're embedded in an IPython shell. 

So visibly there won't be a change unless we've launched it from IPython. 

Got it, thanks for clarifying
",2016-02-02 05:26:48,2016-02-03 14:07:50
746,452,"I purpose to set the defaut pager ""less -SRXF"" in pgclirc config file in order to allow users have more flexibility in pager configuration.
In my case I want to have different pager configuration for pgcli/psql than for the rest of the system or use a pager filtered to colorize some expressions:
`pager= grcat ~/.grc/conf.psql | less -iMSx4FXRe`
","Load default pager and its options on load from config file instead of manipulate environment variable
@fernandomora That's a clever use of the set_pager() special command. I'm in favor of this idea. 

@j-bennet Can you please take a look at the failing behave tests? I can't reproduce it locally. 

@amjith I think the problem is that the initialization of PGCli is overwriting the default parameterization of ""cat"" pager for tests.

https://github.com/fernandomora/pgcli/blob/417b4fb0296487125925364d3f9a53a595b86879/tests/features/environment.py#L18
https://github.com/fernandomora/pgcli/blob/417b4fb0296487125925364d3f9a53a595b86879/pgcli/main.py#L101

In my local environment is also passing all tests, but in travis using less as pager seems to cause problems to pass them.

I think, despite it was smarter using set_pager(), we should leave its use to pager switching during execution and set environment ""PAGER"" environment variable on pgcli load in this preference order:
1. pager set on pgli config file (not configured in default configuration)
2. pager set on ""PAGER"" os environment variable

In this way, call to to ""\pager"" will reset properly the pager to that stored by default on pgcli load as pgspecial implementation was doing:
https://github.com/dbcli/pgspecial/blob/v1.2.0/pgspecial/main.py#L143-L148

I will refactor the PR with new my proposal

@amjith agree with the more concise implementation one, but the order you purpose is the opposite of what I am purposing, because when `os.environ.get('PAGER')` is defined in the environment (usually it is) pager of configuration file would never be used.

The reason of my PR is exactly the opposite:
`os.environ['PAGER'] =  config['main'].get('pager') or os.environ.get('PAGER')`
Despite having a PAGER defined in the environment for using along all the tasks of my system, I want to use a different pager, maybe with different options, exclusively for pgcli. The only place where I can put that exclusive configuration, to override system PAGER, is the config file.

I purpose tho leave the `pager = less '-SRXF'` line commented in pgclirc only for skeleton or documentation purposes in order to allow users to uncomment and edit it in `~/.config/pgcli/config` file

Current pgcli pager behavior:
1. If `PAGER` is defined in the environment, that pager is used
2. else default OS pager is used

New pgcli pager behaviour I was thinking in:
1. If `pager` is configured in loaded config (by default is commented in pgclirc, but you can have it editing `~/.config/pgcli/config`), that pager is used
2. else if `PAGER` is defined in the environment, that pager is used
3. else default OS pager

New pgcli pager behaviour I understand you are purposing:
1. if `PAGER` is defined in the environment, that pager is used
2. else if `pager` is configured in loaded config (it is always loaded because is in pgclirc), that pager is used

If we do it in the way I say, by default, until you explicitly edit config, this change does not break current pgcli behavior. The current use case of the tests `PAGER='cat'` would continue working properly since pager is not in config file and on the other hand you allow me to a new use case where I can have in pgcli a different pager configuration due its particular use than in the rest of the system.

@fernandomora You're right. That makes more sense than my suggestion. 

I'll merge it in. Thanks for the PR. 

:roller_coaster: 
",2016-02-02 04:21:35,2016-02-03 06:47:35
747,451,"I have added fallback queries that allow the auto-completion indexing to not exception out with the current version of Amazon Redshift. Only tested to a ""works for me"" state.  
","Add fallback queries so that redshift auto-complete indexing doesn't exception out
@timcleaver Thanks for taking the time to do the PR. I appreciate it. Unfortunately I don't have Redshift to test this against.

A cursory glance at the code changes look good to me. 

@darikg Can you take a look at this as well? I know you've spent some time on the meta commands as well. 

I like the idea of developing alternative metadata queries so we can support different versions of postgresql. I think ideally we'd check what version of postgresql we're running against and then choose an appropriate set of queries, instead of catching psycopg2.ProgrammingErrors and resorting to the fallback. That would make it easier to expand going forward, and also help a lot in comparing the different versions of the queries against each other. 

I agree that we should check the version string to determine the set of queries to run. 

@timcleaver Would you mind adding that check? You can use the `server_version` attribute in the connection object. http://initd.org/psycopg/docs/connection.html#connection.server_version

Sure, let me look into it.

I have pushed a change to use the server_version as requested. Not sure what is going on with Travis CI though.

Don't worry about the test failure, I made a bad merge that broke the tests. :(

I've tested the changes in my local installation and the current functionality is not broken. I haven't tested it in RedShift, but I presume you've done the due diligence here. 

@darikg Any objections before I merge? If I don't hear back from you, I'll merge it in the morning. 

If you don't mind, give me an extra day to look it over

Take your time, I'll wait for you to give me a thumbs up. 

I had a VM with postgresql 8.4 installed, and I can connect and everything seems fine.
I ran the pgexecute tests locally and most stuff passed. The failures look pretty cursory. If we're going for 'soft support' of postgresql 8 I think this is fine. It's too bad travis-ci doesn't support older versions of postgresql so we could move towards official support.

Related issues where people were interested in support for pg8: #414, #316, #167, #18

Test failures:

```
executor = <pgcli.pgexecute.PGExecute object at 0x00000000041F5BE0>

    @dbtest
    def test_conn(executor):
        run(executor, '''create table test(a text)''')
        run(executor, '''insert into test values('abc')''')
>       assert run(executor, '''select * from test''', join=True) == dedent(""""""\
            +-----+
            | a   |
            |-----|
            | abc |
            +-----+
            SELECT 1"""""")
E       assert '+-----+\n| a ...-----+\nSELECT' == '+-----+\n| a ...--+\nSELECT 1'
E         Skipping 35 identical leading characters in diff, use -v to show
E           ---+
E         - SELECT
E         + SELECT 1
E         ?       ++

executor   = <pgcli.pgexecute.PGExecute object at 0x00000000041F5BE0>

C:\Users\dg\Documents\python\pgcli\tests\test_pgexecute.py:15: AssertionError
F
executor = <pgcli.pgexecute.PGExecute object at 0x0000000005ACF2B0>

    @dbtest
    def test_bools_are_treated_as_strings(executor):
        run(executor, '''create table test(a boolean)''')
        run(executor, '''insert into test values(True)''')
>       assert run(executor, '''select * from test''', join=True) == dedent(""""""\
            +------+
            | a    |
            |------|
            | True |
            +------+
            SELECT 1"""""")
E       assert '+------+\n| a...-----+\nSELECT' == '+------+\n| a...--+\nSELECT 1'
E         Skipping 40 identical leading characters in diff, use -v to show
E           ---+
E         - SELECT
E         + SELECT 1
E         ?       ++

executor   = <pgcli.pgexecute.PGExecute object at 0x0000000005ACF2B0>

C:\Users\dg\Documents\python\pgcli\tests\test_pgexecute.py:27: AssertionError
F.
executor = <pgcli.pgexecute.PGExecute object at 0x00000000041FACF8>

    @dbtest
    def test_functions_query(executor):
        run(executor, '''create function func1() returns int
                         language sql as $$select 1$$''')
        run(executor, 'create schema schema1')
        run(executor, '''create function schema1.func2() returns int
                         language sql as $$select 2$$''')

        run(executor, '''create function func3()
                         returns table(x int, y int) language sql
                         as $$select 1, 2 from generate_series(1,5)$$;''')

        run(executor, '''create function func4(x int) returns setof int language sql
                         as $$select generate_series(1,5)$$;''')

        funcs = set(executor.functions())
>       assert funcs >= set([
            FunctionMetadata('public', 'func1', '',
                             'integer', False, False, False),
            FunctionMetadata('public', 'func3', '',
                             'TABLE(x integer, y integer)', False, False, True),
            FunctionMetadata('public', 'func4', 'x integer',
                             'SETOF integer', False, False, True),
            FunctionMetadata('schema1', 'func2', '',
                             'integer', False, False, False),
          ])
E       assert set([FunctionMetadata(schema_name=u'pg_catalog', func_name=u'bytealt', arg_list='', return_type=u'bool', is_aggregate=..._name=u'character_length', arg...turn_type=u'int4', is_aggregate=False, is_window=False, is_set_returning=False), ...]) >= set([FunctionMetadata(schema_name='public', func_name='func1', arg_list='', return_type='integer', is_aggregate=False,..._name='func4', arg_list='x integer'...pe='SETOF integer', is_aggregate=False, is_window=False, is_set_returning=True)])
E        +  where set([FunctionMetadata(schema_name='public', func_name='func1', arg_list='', return_type='integer', is_aggregate=False,..._name='func4', arg_list='x integer'...pe='SETOF integer', is_aggregate=False, is_window=False, is_set_returning=True)]) = set([FunctionMetadata(schema_name='public', func_name='func1', arg_list='', return_type='integer', is_aggregate=False, is_...', func_name='func2', arg_list='', return_type='integer', is_aggregate=False, is_window=False, is_set_returning=False)])

executor   = <pgcli.pgexecute.PGExecute object at 0x00000000041FACF8>
funcs      = set([FunctionMetadata(schema_name=u'pg_catalog', func_name=u'bytealt', arg_list='', return_type=u'bool', is_aggregate=..._name=u'character_length', arg...turn_type=u'int4', is_aggregate=False, is_window=False, is_set_returning=False), ...])

C:\Users\dg\Documents\python\pgcli\tests\test_pgexecute.py:82: AssertionError
F..........
executor = <pgcli.pgexecute.PGExecute object at 0x0000000004494198>

    @dbtest
    def test_bytea_field_support_in_output(executor):
        run(executor, ""create table binarydata(c bytea)"")
        run(executor,
            ""insert into binarydata (c) values (decode('DEADBEEF', 'hex'))"")

>       assert u'\\xdeadbeef' in run(executor, ""select * from binarydata"", join=True)
E       assert '\xdeadbeef' in '+------------------+\n| c                |\n|------------------|\n| \336\255\276\357 |\n+------------------+\nSELECT'
E        +  where '+------------------+\n| c                |\n|------------------|\n| \336\255\276\357 |\n+------------------+\nSELECT' = run(<pgcli.pgexecute.PGExecute object at 0x0000000004494198>, 'select * from binarydata', join=True)

executor   = <pgcli.pgexecute.PGExecute object at 0x0000000004494198>

C:\Users\dg\Documents\python\pgcli\tests\test_pgexecute.py:175: AssertionError
```

@darikg Awesome work testing it on a VM. Much appreciated. 

I'd prefer to fix the test failures if possible but if you think they're too hard to fix or too time consuming to investigate I'm fine with doing a soft support. 

I'll leave this PR in your capable hands to merge when you feel ready. 

I think I'm just going to merge this in - I'll try to get around to looking at the test failures eventually but I think they're mild enough it's not worth holding up soft pg8 support.

Thanks @timcleaver !
",2016-02-02 02:25:29,2016-02-08 12:46:56
748,450,"```
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres> select NULL as nullval;
+-----------+
|   nullval |
|-----------|
|    <null> |
+-----------+
SELECT 1
Time: 0.001s
postgres> \x
Expanded display is on.
Time: 0.000s
postgres> select NULL as nullval;
-[ RECORD 0 ]-------------------------
nullval | None

SELECT 1
Time: 0.001s
postgres>
```

I'm on 9.4.5, if that's significant.
","NULL values should be displayed as <null> when extended display mode is on
This is now fixed in master. Can you try installing directly from master? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

It is working, thank you!

```
postgres> \x
Expanded display is on.
Time: 0.000s
postgres> select null as nullvar;
-[ RECORD 0 ]-------------------------
nullvar | <null>

SELECT 1
Time: 0.001s
postgres> \x
Expanded display is off.
Time: 0.000s
postgres> select null as nullvar;
+-----------+
|   nullvar |
|-----------|
|    <null> |
+-----------+
SELECT 1
Time: 0.001s
```
",2016-01-25 22:56:28,2016-02-08 14:42:45
749,449,"fixes #443
","fix execute_from_file after #395
Thanks for taking the time to fix the issue.

Sorry about the late reply, I was really swamped all last week. 

:cake: 
",2016-01-25 19:10:42,2016-02-02 05:23:58
750,448,"I did it by mistake, but it turns out that some old dates can't be read through pgcli.
ie. `0001-01-01 00:00:00+00:09:21 BC`

now I have to update my field from psql to get pgcli working again :grin: 
","year is out of range
That's odd. Unless psycopg2 has some built-in checks this shouldn't be the case. Can you send me the error message you get? 

Could you also send me the logs? You can find the logs either in ~/.pgcli.log or ~/.config/pgcli/log. 

Here is the error log I get:

```
2016-01-26 14:04:16,835 (9567/MainThread) pgcli.main ERROR - sql: u""select to_date('1453734279.4203', 'U');"", error: ValueError('year is out of range',)
2016-01-26 14:04:16,839 (9567/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 306, in run_cli
    output, query = self._evaluate_command(document.text)
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 453, in _evaluate_command
    self.pgspecial.expanded_output, max_width)
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 615, in format_output
    missingval=\'<null>\')
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/packages/tabulate.py"", line 884, in tabulate
    list_of_lists, headers = _normalize_tabular_data(tabular_data, headers)
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/packages/tabulate.py"", line 583, in _normalize_tabular_data
    rows = list(tabular_data)
ValueError: year is out of range
'
```

This seems like a known issue with psycopg2, it can be worked around with a custom extension like we do with json.
I'll take a look

This is now fixed in master. Can you try installing from master? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Sorry for the delay. It doesn't seem to have changed.

Here is the log I got:

```
2016-02-22 10:26:48,574 (23163/MainThread) pgcli.main ERROR - sql: 'select * from test;', error: ValueError('year is out of range',)
2016-02-22 10:26:48,575 (23163/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/site-packages/pgcli/main.py"", line 342, in run_cli
    output, query = self._evaluate_command(document.text)
  File ""/usr/local/lib/python3.4/site-packages/pgcli/main.py"", line 494, in _evaluate_command
    self.pgspecial.expanded_output, max_width)
  File ""/usr/local/lib/python3.4/site-packages/pgcli/main.py"", line 681, in format_output
    missingval=\'<null>\')
  File ""/usr/local/lib/python3.4/site-packages/pgcli/packages/tabulate.py"", line 885, in tabulate
    list_of_lists, headers = _normalize_tabular_data(tabular_data, headers)
  File ""/usr/local/lib/python3.4/site-packages/pgcli/packages/tabulate.py"", line 584, in _normalize_tabular_data
    rows = list(tabular_data)
ValueError: year is out of range
'
```

Same error here:

```
test> BEGIN;
test> CREATE TABLE test_bc(timestamptz TIMESTAMPTZ);
test> INSERT INTO test_bc(timestamptz) VALUES ('2015-01-01 00:00:00Z BC' :: timestamptz);
test> SELECT * FROM test_bc;
year is out of range
test> ROLLBACK;
```

```
2016-02-25 15:39:49,141 (31079/MainThread) pgcli.main ERROR - sql: u'SELECT * FROM test_bc;', error: ValueError('year is out of range',)
2016-02-25 15:39:49,142 (31079/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/site-packages/pgcli/main.py"", line 342, in run_cli
    output, query = self._evaluate_command(document.text)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/main.py"", line 494, in _evaluate_command
    self.pgspecial.expanded_output, max_width)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/main.py"", line 681, in format_output
    missingval=\'<null>\')
  File ""/usr/local/lib/python2.7/site-packages/pgcli/packages/tabulate.py"", line 885, in tabulate
    list_of_lists, headers = _normalize_tabular_data(tabular_data, headers)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/packages/tabulate.py"", line 584, in _normalize_tabular_data
    rows = list(tabular_data)
ValueError: year is out of range
'
```

@fernandomora Thanks for the useful test case.

This issue is fixed in master branch but it has not been released yet. Can you try installing from master and trying again? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

I was able to successfully query the value by running pgcli from master branch. 

@fpietka If you're still seeing the issue after installing from master, can you send me a test case? 

@amjith I forgot to mention that my test case and log output is happening using master branch.

More simple test case:

```
$ pip install -U https://github.com/dbcli/pgcli/archive/master.zip
$ pgcli
SELECT ('2015-01-01 00:00:00Z BC' :: timestamptz);
year is out of range
```

I have detected this only happens with timestamps with timezones.
PR #470 should fix this.

FYI, my use case is the same as @fernandomora 

The fix proposed by @fernandomora is now merged to master. Can you try the master branch again? 

:+1: works like a charm!

thanks
",2016-01-25 15:16:34,2016-02-29 13:37:54
751,447,"This happens when I'm using a foreign data wrapper and try to describe a table:

```
global name 'ftoptions' is not defined
```

In my case I use a FDW to access MySQL tables, but it may also fail on Postgres tables using FDW.
","Can't describe foreign table
I'm new to FDW, I'm still reading up on it. Can you give me a reproducible case? 

Looks to me like [this line](https://github.com/dbcli/pgspecial/blob/3bb90bc3ffce885849b1ecfa1bbe8564be43313a/pgspecial/dbcommands.py#L888) should just have `ftoptions` replaced with `row[1]` but I don't have a foreign table to test it on.

:+1: I tested @darikg suggestion with success. Opening an issue on dbcli/pgspecial
",2016-01-25 11:03:24,2016-01-26 13:18:57
752,446,"Hi! First of all thank you for awesome psql alternative)

I just noticed that '\n' symbol breaks the whole line

![pgcli_bad_line_breaks](https://cloud.githubusercontent.com/assets/1443953/12532321/a1bf64a2-c22a-11e5-83c1-453658efbd88.png)

but in psql it works fine

![psql_line_breaks_are_ok](https://cloud.githubusercontent.com/assets/1443953/12532394/7b1b35f4-c22c-11e5-807b-58717271bfc6.png)

I remember that somewhere there were an issue with similar problem, but don't remember exactly where, so I decided to create another one.
so what do you think about it?
","'\n' breaks the output line
Yes. This is a known issue. Until we replace the tabulate library with something better this will continue to be an issue. But I'll take this into consideration. Thanks!

Can't tell when this was fixed, but it works now as of `pgcli==2.1.0`:

```
postgres@/tmp:postgres> select E'abc\ndef', E'foo\nboo test'
+------------+------------+
| ?column?   | ?column?   |
|------------+------------|
| abc        | foo        |
| def        | boo test   |
+------------+------------+
SELECT 1
```",2016-01-23 20:02:31,2019-05-05 15:09:00
753,445,"Just ran into this error while going about my business. Can't reproduce it but I was not doing anything out of the ordinary (typing in sql commands, using vim style keybinding to move around and alter text)

I'm running on OSX Yosemite

``` python
Exception in thread Thread-145:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
    self.run()
  File ""/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 763, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/lib/python2.7/site-packages/prompt_toolkit/interface.py"", line 509, in run
    CompleteEvent(text_inserted=True)))
  File ""/usr/local/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 228, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/packages/sqlcompletion.py"", line 85, in suggest_type
    full_text, identifier)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/packages/sqlcompletion.py"", line 159, in suggest_based_on_last_token
    full_text, identifier)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/packages/sqlcompletion.py"", line 256, in suggest_based_on_last_token
    elif (token_v.endswith('join') and token.is_keyword) or (token_v in
AttributeError: 'unicode' object has no attribute 'is_keyword'
```
","AttributeError: 'unicode' object has no attribute 'is_keyword'
Thanks you for sending the exception. That gives us some clues.

Can you tell me if there was something special about the table you were accessing? Does it have unicode characters? And would you mind telling us the schema of the table? Such as what was the different column types? 

It happened during autocompletion, I cannot disclose the schema of the table and none of the tables currently use unicode characters. 

@pietdaniel I have a suspicion this is fixed in the newer versions of pgcli. Can you tell me what version of pgcli you're using? You can check by running `pgcli --version`. 

Version: 0.18.0

@pietdaniel Can you upgrade? The latest version is 0.20.1. 

You can upgrade using `pip install -U pgcli` or if you installed it via brew you can do `brew update && brew upgrade pgcli`. 

I hope the upgrade fixed the issue for you. If you're still seeing this behavior, please reopen this issue.
",2016-01-22 19:20:14,2016-02-07 15:26:07
754,444,"`.psqlrc` provides a few variables like `:HOST`, `:PORT` and `:DBNAME` so you can do useful things like keep database-specific history files. Similar functionality in `.pgclirc` would be wonderful.
","Support environment variables in .pgclirc
@kristjan Thanks for filing the issue. Can you give me a specific example? I haven't used this functionality in psqlrc so I'm not familiar with this feature. 

Absolutely, here's what the history file configuration looks like:

```
\set HISTFILE ~/.psql_history_ :DBNAME
```

Given that, DBs `foo` and `bar` get independent query histories written to `~/.psql_history_foo` and `~/.psql_history_bar`, which looks like this:

![db_history](https://cloud.githubusercontent.com/assets/34301/12475360/5330bafc-bfd7-11e5-9e8f-7a5218bb2618.gif)

psql can set environment vars with \setenv command:
http://www.postgresql.org/docs/9.5/static/app-psql.html

> \setenv name [ value ]
> Sets the environment variable name to value, or if the value is not supplied, unsets the environment variable. Example:
> 
> test=# \setenv PAGER less
> test=# \setenv LESS -imx4F

Also you can include setting of environment vars in .psqlrc. e.g:

```
\setenv PAGER less
\setenv PAGER less
```

HISTFILE, DBNAME, PORT, etc... are not environment variables, they are internal psql variable and can be set with \set and shown with \echo :VARNAME. e.g:

```
test=# \echo :DBNAME
test
test=# \echo :ENCODING
test
```

> \set [ name [ value [ ... ] ] ]
> Sets the psql variable name to value, or if more than one value is given, to the concatenation of all of them. If only one argument is given, the variable is set with an empty value. To unset a variable, use the \unset command.

Also in .psqlrc. e.g:

```
\set VERBOSITY verbose
\set COMP_KEYWORD_CASE upper
```

I am not sure if it is easy to read/write this psql internal vars, but I'm sure it is at least for env vars. 

I purpose to allow same functionality: usage of \set (probably also \unset) and \setenv, or at least \setenv in pgcli both in command line and in .pgclirc.

Note: If this is implemented I think it would be good to make a breaking change to #452 before next release to configure default PAGER in .pgclirc using ""\setenv"" instead of ""pager"":

```
\setenv LESS '-iMSx4FXRe'
\setenv PAGER 'less'
```

This would make make .pgclirc config file much more similar to .psqlrc config file.

If you agree with this proposal, or something similar, I could take a look, and send a PR.
",2016-01-21 01:27:08,
755,443,"Hi,

I was testing a query using the \i option and I got this error. Using psql's \i option work as expected, so I guess this is an error somewhere in pgcli's code. Steps to reproduce:
## Create test database

```
_$: createdb -O myuser testdb
_$: psql -U myuser testdb
testdb=> CREATE table employee
testdb-> (
testdb(>   name character varying(32);
testdb(> );
```
## Insert test data

```
testdb=> INSERT INTO employee VALUES('John Doe');
```
## Create query file

```
_$: echo ""SELECT count(*) FROM employee;"" > /tmp/test.sql
```
## Test with psql

```
testdb=> \i /tmp/test.sql
 count 
-------
     1
(1 row)
```
## Test with pgcli

```
pgcli --host dbserver --user myuser --dbname testdb
Password: 
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
testdb> \i /tmp/test.sql
run() got an unexpected keyword argument 'on_error'
testdb> \q
Goodbye!
```

I've taken a (very) quick look at the code base and I think it fails because of the difference between [this line](https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py#L229) and [this other line](https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L160) but maybe you can take a more detailed look at this.

Thank you.
","\i: run() got an unexpected keyword argument 'on_error'
Thanks for filing the issue. I'll take a look.

I'm still getting this issue. Installed pgcli from pypi. Saw that it is an old version from last year. Should I clone from github to get the fix?

This is now fixed in master. I haven't released it to pypi. 

You can install directly from master as follows: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```
",2016-01-20 17:07:17,2016-02-02 05:23:58
756,442,"A new pull request with the minimal set of changes required to run on the latest prompt_toolkit.
This doesn't enable new features yet (like mouse support.)

(Not tested on Windows.)
","Upgrade to prompt-toolkit-0.57
@darikg Can you test this on Windows? 

I'm currently testing it on OS X. 

Pasting works as expected without additional indentation. :)

Works fine for me. I still get extra indentation pasting stuff though

Hi @darikg,

That is expected. Bracketed paste is a vt100 option and only works on OS X, Linux and Unix. Maybe for Windows we can think of a different approach, but for now, it is like that.

Jonathan

Fair enough!

If there are no objections, I'd like to merge it in the morning. 

+1

:+1: 
",2016-01-16 20:58:37,2016-01-18 15:22:05
757,441,"@j-bennet Can you review and merge? 
","Add a test case for enum unicode case.
@amjith Nice!
",2016-01-12 12:56:23,2016-01-13 18:12:44
758,440,,"Register special type casters for enum types.
This needs a test case @amjith.

I wasn't sure if we're going to merge this in or patch the issue in tabulate as done here #438. If we go with the other PR, we can add a test for it at that time. 

Closing this infavor of #438. 
",2016-01-07 06:08:40,2016-01-12 12:49:06
759,439,,"Added humanize to tox to fix tox failure.
:sake: 
",2016-01-06 23:50:42,2016-01-07 06:12:03
760,438,"I try to encode string  before it is passed to tabulate. It works for my issue.
","convert enum type to unicode in tabulate. #437
There are two ways to fix this. One we can register a type caster in psycopg2 to return us unicode values for enums instead of utf-8. Two we can do what you've done which is to handle it in tabulate. 

I've been resisting the urge to fix this issue in tabulate since we want psycopg2 to do the right thing. But I'm getting tired of playing whack a mole with psycopg2 and I think fixing it in tabulate is a much better option. 

@dbcli/pgcli-core Can you please share your thoughts? 

BTW, here's a way to reproduce the issue: 

```
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy', '日本語');
CREATE TABLE person (name TEXT, current_mood mood);
INSERT INTO person VALUES ('Moe', '日本語')
SELECT * FROM person;
```

I have a PR that registers a type caster for enum. https://github.com/dbcli/pgcli/pull/440

The question is should we register a type caster as done in PR #440 or should we use this PR to patch it in tabulate? 

@amjith I think that psycopg2 is the right place to fix this, because re-encoding every string in tabulate may affect performance. Why do you prefer the tabulate way?

The reason for fixing it in tabulate would be, it'll be a blanket fix that'll handle all the datatypes. Right now we're adding special type casters for each datatype https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py#L16-L21. 

But we still manage to miss corner cases as reported here. But if we handle it in tabulate, then we won't need separate type casters and it'll future proof us from running into corner cases like this. 

@amjith I see what you mean. Do you have any concerns about performance? This is what I measured:

```
$ python -m timeit -s ""from encodingutils import utf8tounicode"" ""utf8tounicode(u'日本語')""
1000000 loops, best of 3: 0.309 usec per loop
```

With 0.3s per conversion, what if we have 100K values to convert in table?

@j-bennet I think that's 0.3 microseconds

@darikg That sounds much better. :)

Good point about overhead and thanks for doing the micro-benchmark to show some real numbers. I'm happy with the benchmark and I'm confident that this won't produce a noticeable lag in the print out. 

Agree, with performance concern out of the way, this approach looks good.

@GTxx Thanks for the PR. I appreciate it. 

:snowflake: 
",2016-01-06 08:41:16,2016-01-12 12:49:53
761,437,"Hi, I have some enum type in Chinese. When I query enum value or tables using these enums, unicode encoding error raises.

``` sql
my_db> select unnest(enum_range(NULL::""level""));
'ascii' codec can't decode byte 0xe5 in position 0: ordinal not in range(128) 
my_db> select * from book;
'ascii' codec can't decode byte 0xe5 in position 0: ordinal not in range(128) 
```

this is the error log:

``` log
2016-01-06 09:50:27,348 (7938/MainThread) pgcli.main ERROR - sql: u'select unnest(enum_range(NULL::""level""));', error: UnicodeDecodeError('ascii', '大', 0, 1, 'ordinal not in range(128)')
2016-01-06 09:50:27,350 (7938/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):
  File ""/home/my_home/.pyenv/versions/work_env/lib/python2.7/site-packages/pgcli/main.py"", line 306, in run_cli
    output, query = self._evaluate_command(document.text)
  File ""/home/my_home/.pyenv/versions/work_env/lib/python2.7/site-packages/pgcli/main.py"", line 453, in _evaluate_command
    self.pgspecial.expanded_output, max_width)
  File ""/home/my_home/.pyenv/versions/work_env/lib/python2.7/site-packages/pgcli/main.py"", line 615, in format_output
    missingval='<null>')
  File ""/home/my_home/.pyenv/versions/work_env/lib/python2.7/site-packages/pgcli/packages/tabulate.py"", line 889, in tabulate
    ['\t'.join(map(_text_type, row)) for row in list_of_lists])
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe5 in position 0: ordinal not in range(128)
```

I think this might be similar with #426. In Python2, psycopg2 returns enum type as string object. So tabulate  fails encoding enum type value.
","enum type unicode error in py2
Yes I think they are related. Can you try the latest version in master? 

You can install directly from master using `pip`. 

```
pip install https://github.com/dbcli/pgcli/archive/master.zip
```

Hi @amjith, latest version works for me. 
This issue is already discussed in #438. I think we can close this issue.
",2016-01-06 08:29:02,2016-01-26 08:19:46
762,436,"Reviewer: @j-bennet 
","Add missing keywords.
:+1: 
",2016-01-06 01:22:24,2016-01-06 22:38:44
763,435,,"don't error when completing parameter-less functions
Thanks!
",2016-01-05 16:33:25,2016-01-06 00:46:57
764,434,"When I enter `\e` my default editor (Vim) opens with an empty buffer. I can enter my SQL into the editor, save/quit and the query appears on the pgcli command line as expected. However, after executing the query and typing `\e` again I'm presented with an empty Vim.

The `\e` command works as expected in `psql`–the last query is shown in Vim.

My pgcli reports version `0.20.1`
","Editor command not retaining last query
Yes. This is a valid request. But it requires patching prompt-toolkit to
give us a way to access previous item from the history. But it is doable.
Thanks for the request.

On Wed, Dec 30, 2015 at 8:53 AM, Ryan Dlugosz notifications@github.com
wrote:

> When I enter \e my default editor (Vim) opens but the buffer is empty. I
> can enter my SQL into the editor, save/quit and the query appears on the
> pgcli command line as expected. However, after executing the query and
> typing \e I'm presented with an empty Vim.
> 
> The \e command works as expected in psql.
> 
> My pgcli reports version 0.20.1
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/issues/434.

Closed via https://github.com/dbcli/pgcli/pull/710.",2015-12-30 16:53:41,2019-05-05 15:04:42
765,433,"It used to work fine, but then all of a sudden a few weeks ago, I was no longer able to start pgcli:

``` bash
>pgcli
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.20.1', 'console_scripts', 'pgcli')()
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 716, in __call__
    return self.main(*args, **kwargs)
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 696, in main
    rv = self.invoke(ctx)
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 889, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 534, in invoke
    return callback(*args, **kwargs)
  File ""/Library/Python/2.7/site-packages/pgcli/main.py"", line 593, in cli
    pgcli.run_cli()
  File ""/Library/Python/2.7/site-packages/pgcli/main.py"", line 285, in run_cli
    document = self.cli.run()
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/interface.py"", line 271, in run
    self.renderer.request_absolute_cursor_position()
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/renderer.py"", line 272, in request_absolute_cursor_position
    self.output.ask_for_cpr()
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/terminal/vt100_output.py"", line 241, in ask_for_cpr
    self.flush()
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/terminal/vt100_output.py"", line 212, in flush
    out.write(data.encode(self.stdout.encoding, 'replace'))
TypeError: encode() argument 1 must be string, not None
```

Any idea what might be wrong?

This is on Mac OS 10.11.2.
","Crash on startup: TypeError: encode() argument 1 must be string, not None
Can you send us the output of `pip freeze`? 

I suspect one of the dependencies got upgraded and pgcli is probably incompatible with the newer version of the library.

```
altgraph==0.10.2
bdist-mpkg==0.5.0
bonjour-py==0.3
click==6.2
configobj==5.0.6
feedparser==5.2.1
future==0.15.2
macholib==1.5.1
matplotlib==1.3.1
modulegraph==0.10.4
numpy==1.8.0rc1
oauthlib==1.0.3
pgcli==0.20.1
pgsanity==0.2.8
pgspecial==1.2.0
prompt-toolkit==0.46
psycopg2==2.6.1
py2app==0.7.3
Pygments==2.0.2
pyobjc-core==2.5.1
pyobjc-framework-Accounts==2.5.1
pyobjc-framework-AddressBook==2.5.1
pyobjc-framework-AppleScriptKit==2.5.1
pyobjc-framework-AppleScriptObjC==2.5.1
pyobjc-framework-Automator==2.5.1
pyobjc-framework-CFNetwork==2.5.1
pyobjc-framework-Cocoa==2.5.1
pyobjc-framework-Collaboration==2.5.1
pyobjc-framework-CoreData==2.5.1
pyobjc-framework-CoreLocation==2.5.1
pyobjc-framework-CoreText==2.5.1
pyobjc-framework-DictionaryServices==2.5.1
pyobjc-framework-EventKit==2.5.1
pyobjc-framework-ExceptionHandling==2.5.1
pyobjc-framework-FSEvents==2.5.1
pyobjc-framework-InputMethodKit==2.5.1
pyobjc-framework-InstallerPlugins==2.5.1
pyobjc-framework-InstantMessage==2.5.1
pyobjc-framework-LatentSemanticMapping==2.5.1
pyobjc-framework-LaunchServices==2.5.1
pyobjc-framework-Message==2.5.1
pyobjc-framework-OpenDirectory==2.5.1
pyobjc-framework-PreferencePanes==2.5.1
pyobjc-framework-PubSub==2.5.1
pyobjc-framework-QTKit==2.5.1
pyobjc-framework-Quartz==2.5.1
pyobjc-framework-ScreenSaver==2.5.1
pyobjc-framework-ScriptingBridge==2.5.1
pyobjc-framework-SearchKit==2.5.1
pyobjc-framework-ServiceManagement==2.5.1
pyobjc-framework-Social==2.5.1
pyobjc-framework-SyncServices==2.5.1
pyobjc-framework-SystemConfiguration==2.5.1
pyobjc-framework-WebKit==2.5.1
pyOpenSSL==0.13.1
pyparsing==2.0.1
python-dateutil==1.5
pytz==2013.7
requests==2.4.3
requests-oauthlib==0.4.2
scipy==0.13.0b1
setproctitle==1.1.9
six==1.4.1
sqlparse==0.1.16
trakt==2.2.4
wcwidth==0.1.5
xattr==0.6.4
zope.interface==4.1.1
```

Nothing jumps out at the moment. I'll keep digging in. But in the meantime, can you try uninstalling and reinstalling? 

```
$ pip uninstall pgcli
$ pip install -U pgcli
```

I'm having some trouble with that:

```
>sudo pip install -U pgcli
The directory '/Users/<username>/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/<username>/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Collecting pgcli
  Downloading pgcli-0.20.1.tar.gz (46kB)
    100% |################################| 49kB 1.3MB/s 
Requirement already up-to-date: pgspecial>=1.1.0 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: click>=4.1 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: Pygments>=2.0 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: prompt-toolkit==0.46 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: psycopg2>=2.5.4 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: sqlparse==0.1.16 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: configobj>=5.0.6 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already up-to-date: setproctitle>=1.1.9 in /Library/Python/2.7/site-packages (from pgcli)
Collecting six>=1.9.0 (from prompt-toolkit==0.46->pgcli)
  Downloading six-1.10.0-py2.py3-none-any.whl
Collecting wcwidth (from prompt-toolkit==0.46->pgcli)
  Downloading wcwidth-0.1.6-py2.py3-none-any.whl
Installing collected packages: pgcli, six, wcwidth
  Running setup.py install for pgcli
  Found existing installation: six 1.4.1
    DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.
    Uninstalling six-1.4.1:
Exception:
Traceback (most recent call last):
  File ""/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg/pip/basecommand.py"", line 211, in main
    status = self.run(options, args)
  File ""/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg/pip/commands/install.py"", line 311, in run
    root=options.root_path,
  File ""/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg/pip/req/req_set.py"", line 640, in install
    requirement.uninstall(auto_confirm=True)
  File ""/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg/pip/req/req_install.py"", line 716, in uninstall
    paths_to_remove.remove(auto_confirm)
  File ""/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg/pip/req/req_uninstall.py"", line 125, in remove
    renames(path, new_path)
  File ""/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg/pip/utils/__init__.py"", line 315, in renames
    shutil.move(old, new)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"", line 302, in move
    copy2(src, real_dst)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"", line 131, in copy2
    copystat(src, dst)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shutil.py"", line 103, in copystat
    os.chflags(dst, st.st_flags)
OSError: [Errno 1] Operation not permitted: '/tmp/pip-jdyzF5-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info'
```

Anyway, I found out that if I set the `LANG` environment variable to `en_US.UTF-8` (instead of just `en_US`), it starts working again. Maybe pgcli could check for that during initiation?

Ay progress on this? I am also getting this error.

@sanjeevkpandit Are you installing both mycli and pgcli on the same machine? If so, then there is a conflict in the dependency since mycli requires a newer version of prompt_toolkit.

The solution for the moment is to install pgcli from master. As follows: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Thanks @amjith for the quick response, it worked.
",2015-12-18 11:11:35,2019-05-05 15:03:48
766,432,"I noticed that copy-pasting long, preformatted queries adds indentation that makes it less readable. Perhaps it would be useful to have some copy-paste detection similar to what Irssi or Weechat does that:
1. Detects multiple lines entered at a quick burst,
2. Asks the user for confirmation on whether he actually meant to paste,
3. Disables indentation for input lines.

What do you think about that?
","Copy-paste mode?
There is a solution for this in prompt-toolkit. https://github.com/dbcli/pgcli/issues/389#issuecomment-157805320

I think we should investigate the path to upgrading to the latest prompt-toolkit. /cc @jonathanslenders 

Yes, it is indeed implemented in the latest prompt-toolkit, but I haven't done any release yet after these changes. I plan to do at least one new release before new year. (With many improvements.)

So, now that the latest prompt_toolkit (0.57) supports bracketed paste, we should upgrade to that version. Ping me, if the upgrade is not trivial.

There is a pending PR for mycli to do the upgrade to 0.56 (https://github.com/dbcli/mycli/pull/214). I'm working on updating it to 0.57. Once that is tested and merged, I'll do the same for pgcli. 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```

How can I copy a long wrapped query from pgcli so that I can paste it to other program (such as text editor)?

Hi @saml,

The easiest is to open a text editor from the REPL itself. In Emacs mode, I think you have to press the C-X C-E sequence in Emacs mode and in Vi mode, it's the 'v' key in navigation mode. (This requires the ""open_in_editor"" prompt_toolkit option to be enabled, I didn't check whether that's the case for pgcli.)

I know that right now, even if there is a soft wrap, that the copy paste will insert a line ending at that place. @asmeurer noticed this as well. See this issue: https://github.com/jonathanslenders/python-prompt-toolkit/issues/493 In practice, this is something which is hard to solve, if it can be solved at all without breaking other stuff. I believe GNU Readline doesn't have this issue, but it doesn't support the more complex UI layouts that we have.

Another option would be to bind a custom shortcut in pgcli and use the pyperclip package to copy text to the system clipboard. (Or implement a special postgres magic like `\copy` to copy things to the clipboard.) This has also the advantage that it also works in tmux.
Wow `C-x C-e` opened nano. Thank you @jonathanslenders 
If you prefer another editor, it can be configured by setting the ``$EDITOR`` environment variable.
@saml Editor can also be opened with a special `pgcli` command: `\e`.

this will open editor with previous query in it:
```
> \e
```

this will open editor with current query in it:
```
select * from test \e
```
Nice. thanks. 

- `C-x C-e`, edit, save and quit: immediately executes the query.
    - It copies current content in prompt to editor. If prompt was empty, editor is empty.
- `\e`, edit, save and quit: it updates prompt but does not hit enter.
By the way if you don't want `C-x C-e` (or `v`) to execute the prompt after saving, you can add a custom keybinding

```py
@r.add_binding(Keys.ControlX, Keys.ControlE)
def open_in_editor(event):
    event.current_buffer.open_in_editor(event.cli)
```

where `r` is the keybinding registry (`KeyBindings()` object in 2.0). 
And to the original question, here is a keybinding that will copy the selected text on OS X (it can easily be extended to Linux, and probably Windows too)

```py

def osx_copy(text):
    try:
        # In Python 3.6 we can do this:
        # run('pbcopy', input=text, encoding='utf-8', check=True)
        subprocess.run('pbcopy', input=text.encode('utf-8'), check=True)
    except FileNotFoundError:
        print(""Error: could not find pbcopy"", file=sys.stderr)
    except subprocess.CalledProcessError as e:
        print(""pbcopy error:"", e, file=sys.stderr)

@r.add_binding(Keys.ControlX, Keys.ControlW)
def copy_to_clipboard(event):
    if event.current_buffer.document.selection:
        from_, to = event.current_buffer.document.selection_range()
        run_in_terminal(lambda:osx_copy(event.current_buffer.document.text[from_:to + 1]))
```",2015-12-17 12:40:31,2016-06-29 03:20:44
767,431,"```
db> select count(distinct x) from tbl;


+-----------+
|     count |
|-----------|
| 634823020 |
+-----------+
SELECT 1
Time: 27823.563s (7 hours)
```

It would be nice to take a look at the number and be able to say whether we're talking millions or billions here. How could I add special formatting for numbers?
","Humanize numbers?
The code is here: https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L346

You can probably use a variant of 

```
print ('{:,}').format(query.total_time) 
```

to achieve what you want. Although I'm not sure if it is compatible with Python 2.6. 

But you're welcome to send me a PR. 

I think @d33tah might have meant numeric data in his query, not time elapsed. Was that `count` field or timer you were talking about, @d33tah?

You're right. My bad. 

That's part of the tabulate function. https://github.com/dbcli/pgcli/blob/master/pgcli/packages/tabulate.py

But it's hard to determine when to use the commas and when not to use them. For example, it makes perfect sense to use them dollar values or other means of measure, but it'll be intrusive to use them for the `id` field. 

Yeah... In this case, it's a calculated field (`count()`), and for those, we don't even know the type.

@j-bennet , @amjith: yes - `count` is what I meant. You say that pgcli can't know its type? Would a hack of trying to cast it to int work then?

pgexecute has access to field types through the psycopg2 cursor -- should be able to check each column's OID and do whatever you want with its value. Or I think it's possible to override the default psycopg2 int adapters to supply your own adapter? Still no way to distinguish ID columns though.

Hello. I wanna take part in issue solving. I'm watching code, and found place where int, float, and str value are formatting. Value formatting in agree with column type. So can we suggest that all int, and float values must be comma divided? As for me ID values is not a problem, UUID value is usually placed in str columns. If id will be in int column(like auto increasing), so id is not random value but serial number, in this case comma divided value not a problem.

@foxyterkel I'd love to see a PR with the idea you've described. One of the problems is we don't have a prototype to play around with different ideas, but once someone puts forth a PR, we can try to collaborate on it and make it better.

@amjith There is a problem with ids now, I can't just copy id and paste it to another query. Is there a clear way to disable 'humanize numbers' feature? I found that change **dcmlfmt** to empy string in **tabulate.py** works, but i guess there should be better way to achieve this.

@kosciej16 in main directory of the project there is pgclirc file where you can define default dcmlfmt.

@kosciej16 As mentioned by @foxyterkel you can set the format in your config file. The config file is usually located in your `~/.config/pgcli/config`. 

If you don't have the following lines add them in and set the format to empty string:

https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L134
",2015-12-09 19:23:43,2019-05-05 15:02:11
768,430,"Currently notices emitted on the connection are output only after the query(ies) have completed: https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py#L291

It would be nice to have the notices appear as they are emitted as they currently do in psql.
This may require some fundamental changes to how queries are executed so will need some investigation.

Example of long running query with notices:

```
test> create function slow_warnings() returns void language plpgsql as $$
      begin
          for i in 1..5 loop
              perform pg_sleep(1);
              raise warning 'i = %', i;
          end loop;
      end
      $$; 
```

Run `select slow_warnings()`
",Display connection notices asynchronously ,2015-12-07 07:52:43,
769,429,"A quick one, addresses #424 
","Concat and return all available notices
Yup, I originally tried joining but then found the notices following me about. `pop` lets us clear out the list

Maybe we should document that with a comment so the future generations
aren't making the same mistake.
On Dec 6, 2015 7:55 AM, ""Stuart Quin"" notifications@github.com wrote:

> Yup, I originally tried joining but then found the notices following me
> about. pop lets us clear out the list
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/pull/429#issuecomment-162324901.

Added a quick comment and force pushed

Looks good to me. :goat: 

Cheers!

@stuartquin Any idea how hard it'd be to print notices asynchronously while the query's running? Sometimes it's nice to have progress reports on slow running queries, e.g.

```
test> create function slow_warnings() returns void language plpgsql as $$
      begin
          for i in 1..5 loop
              perform pg_sleep(1);
              raise warning 'i = %', i;
          end loop;
      end
      $$; 
```

Running `select slow_warnings()` in psql will print the warnings out one at a time while the query sleeps, but pgcli has to wait until the query finishes and prints them all at once.

@darikg Having Async notices actually makes a lot of sense. I'll create a new issue for it and start some investigation

Issue: https://github.com/dbcli/pgcli/issues/430
",2015-12-06 10:10:31,2015-12-06 16:11:30
770,428,"This is to address #426. 

Reviewer: @stuartquin 

There are many datatypes in Postgres and we have to register each datatype to be treated as unicode. This PR registers the `record` datatype to be treated as unicode. I wonder what other datatypes have to be explicitly registered. 
","Register a unicode typecaster for record type.
Looks good and works :+1: 
",2015-12-05 04:54:25,2015-12-05 08:21:13
771,427,"I'm reaching out to you with a request to help us beta test a new completion algorithm. Previously, keywords, table names, column names etc were ordered alphabetically. Now they are ordered by the frequency of usage. The frequency is calculated based on the history. We hope this will improve the experience and reduce typing. We'd love to get some user feedback to polish this feature before release. 

This is already available in master branch. You can install pgcli from `master` as follows: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

With the improved suggestion, you'll notice the keywords in the suggestion menu are no longer alphabetical. For example if you type `F`, you'll see the keyword `FROM` listed well above `FREEZE` or other seldom used keywords that start with `F`. This is the good part, but I'm sure we've overlooked other usage scenarios where it might not be suitable. 

I'm reaching out to you since you've all used pgcli and cared enough to provide feedback or send in PRs. I would love to get some feedback from dedicated users.

Best,
Amjith

@d33tah 
@johshoff 
@brettatoms 
@fpietka 
@droustchev 
@xalley 
@GMLudo 
@qwesda 
@CyberDem0n
@wulczer
@dbcli/pgcli-core 
","pgcli - Beta Testing - auto-completion
That's awesome, @amjith! I'm currently off the postgres bandwagon for a while, so probably no testing from me in the near future.

Busy day. I finally got off mysql for a while :grin:, so I'll test it starting tomorrow.

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-12-01 11:26:10,2016-06-29 03:20:56
772,426,"Hi,

I am having an encoding issue while using PostgreSQL functions. It looks like pgcli is trying to decode a string with non-ascii characters using the ascii codec. Steps to reproduce:
## Create test database

```
_$: createdb -O myuser testascii
_$: psql -U myuser testascii
testascii=> CREATE TABLE town
testascii-> (
testascii(>   name character varying(32)
testascii(> );

testascii=> \l
                                      List of databases
       Name        |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-------------------+----------+----------+-------------+-------------+-----------------------
 postgres          | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0         | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                   |          |          |             |             | postgres=CTc/postgres
 template1         | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                   |          |          |             |             | postgres=CTc/postgres
 testascii         | myuser   | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
```
## Insert test data

```
testascii=> INSERT INTO town VALUES ('Güell');
```
## Create function

```
testascii=> CREATE OR REPLACE FUNCTION select_towns(p_limit integer)
RETURNS SETOF record AS
'
SELECT ""name""
FROM town
LIMIT p_limit;
'
LANGUAGE SQL
;

testascii=> SELECT select_towns(10);
 select_towns 
--------------
 (Güell)
(1 row)
```
## Test with pgcli

```
_$: pgcli --host dbserver --dbname testascii --user myuser
Password: 
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
testascii> SELECT * FROM town;
+--------+
| name   |
|--------|
| Güell  |
+--------+
SELECT 1
Time: 0.001s
testascii> SELECT select_towns(10);
'ascii' codec can't decode byte 0xc3 in position 2: ordinal not in range(128)

testascii> \q
Goodbye!
```

Since it works when using a simple `SELECT * FROM town` my guess is that the problem is because of the function, but could be something else.

The database is PostgreSQL 9.3 and the operating system is Ubuntu 14.04. I have tested it for pgcli 0.20.0 and 0.20.1 showing both the same behaviour.

It would be very nice if you could take a look at this. Thank you.
","'ascii' codec can't decode in PostgreSQL function
Hi, Thanks for reporting the bug with a detailed reproducible case. I haven't had a chance to look into it. But I'll get back to you as soon as I get a chance to dig in. 

Sorry about the bug. 

Hi @dcere,

I have a potential fix for this issue in a branch. Can you please test it for me? 

You can install directly from this branch using the following command: 

```
https://github.com/dbcli/pgcli/archive/amjith/record-unicode-typecaster.zip
```

It works fine in my machine but I want to make sure that I didn't just hard code an oid that doesn't work on other instances. 

Hi, I made a quick test and it works in my machine too.
I installed the contents of that zip file with `pip install -e .` and it seems to work.

Thanks!

I should have mentioned `pip install https://github.com/dbcli/pgcli/archive/amjith/record-unicode-typecaster.zip`. I'm glad you figured it out. 

Thank you for checking it for me. I'll write some tests and have it merged into master for the next release.

Resolved by #428 

``` sql

create table posts_cn (
    id serial primary key,
    title text not null,
    txt_body text not null,
    textsearch_index_col tsvector
);

drop function if exists posts_trigger() cascade;

create function posts_trigger() returns trigger as $$
begin
      new.textsearch_index_col :=
         setweight(to_tsvector('pg_catalog.english', coalesce(new.title,'')), 'A')
         || setweight(to_tsvector('pg_catalog.english', coalesce(new.txt_body,'')), 'D');
      return new;
end
$$ language plpgsql;

create trigger tsvectorupdate before insert or update
    on posts_en for each row execute procedure posts_trigger();

create index textsearch_idx_en on posts_en using gin(textsearch_index_col);

```

when I run this in pgcli:

```
SELECT textsearch_index_col from posts_en;
'ascii' codec can't decode byte 0xe8 in position 278: ordinal not in range(128)
```

@mingjunyang Can you tell me what version of pgcli you're using? 

Can you try the version from the master? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Oh,I'm so sorry ,I forget tell you my pgcli version.
It's 

```
 pgcli --version
Version: 0.20.1
```

``` shell
SELECT * from posts_en;
'ascii' codec can't decode byte 0xe8 in position 278: ordinal not in range(128)
```

Did you happen to try the version from master? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

If the problem still persists, can you post the output of 

```
\d+ posts_en
```

@amjith 

```
+----------------------+--------------------------+--------------------------------------------------------+-----------+----------------+---------
| Column               | Type                     | Modifiers                                              | Storage   |   Stats target |   Descri
|----------------------+--------------------------+--------------------------------------------------------+-----------+----------------+---------
| id                   | integer                  |  not null default nextval('posts_en_id_seq'::regclass) | plain     |         <null> |        <
| permlink             | character varying(128)   |  not null                                              | extended  |         <null> |        <
| title                | text                     |  not null                                              | extended  |         <null> |        <
| html_body            | text                     |  not null                                              | extended  |         <null> |        <
| txt_body             | text                     |  not null                                              | extended  |         <null> |        <
| creator              | character varying(32)    |  not null                                              | extended  |         <null> |        <
| created              | timestamp with time zone |  not null                                              | plain     |         <null> |        <
| modifier             | character varying(32)    |  not null                                              | extended  |         <null> |        <
| modifier_link        | character varying(128)   |                                                        | extended  |         <null> |        <
| modified             | timestamp with time zone |  not null                                              | plain     |         <null> |        <
| changes              | integer                  |  not null                                              | plain     |         <null> |        <
| textsearch_index_col | tsvector                 |                                                        | extended  |         <null> |        <
+----------------------+--------------------------+--------------------------------------------------------+-----------+----------------+---------
Indexes:
    ""posts_en_pkey"" PRIMARY KEY, btree (id)
    ""posts_en_permlink_key"" UNIQUE CONSTRAINT, btree (permlink)
    ""textsearch_idx_en"" gin (textsearch_index_col)
Triggers:
    tsvectorupdate BEFORE INSERT OR UPDATE ON posts_en FOR EACH ROW EXECUTE PROCEDURE posts_trigger()
Has OIDs: no

```
",2015-11-30 09:44:55,2016-01-20 16:39:26
773,425,"As @amjith pointed out in #379 keywords don't sort properly after starting to type an identifier
","Really sort keywords after everything else
[![Code Health](https://landscape.io/badge/262773/landscape.svg?style=flat)](https://landscape.io/diff/249988)
Code quality remained the same when pulling **[90651ca](https://github.com/dbcli/pgcli/commit/90651ca7fe04322e52c3fe27e7d2ec4abeec11ae) on dbcli:darikg/sort-kw-after-columns** into **[29d47eb](https://github.com/dbcli/pgcli/commit/29d47ebf343547f1c0f0c7f4850c4113409e2844) on dbcli:master**.

Looks good to me. Nice work.

:newspaper: 
",2015-11-26 19:22:32,2015-11-29 01:20:58
774,424,"First of all, this is the output in `psql`:

``` sql
indico=> TRUNCATE events.contributions, events.subcontributions, events.timetable_entries, events.sessions, events.session_blocks, events.breaks CASCADE;
NOTICE:  truncate cascades to table ""session_principals""
NOTICE:  truncate cascades to table ""session_block_principals""
NOTICE:  truncate cascades to table ""contribution_principals""
NOTICE:  truncate cascades to table ""contribution_field_values""
NOTICE:  truncate cascades to table ""subcontribution_references""
NOTICE:  truncate cascades to table ""contribution_references""
NOTICE:  truncate cascades to table ""contribution_person_links""
NOTICE:  truncate cascades to table ""legacy_contribution_id_map""
NOTICE:  truncate cascades to table ""legacy_session_id_map""
TRUNCATE TABLE
indico=> BEGIN;
BEGIN
indico=> TRUNCATE events.contributions, events.subcontributions, events.timetable_entries, events.sessions, events.session_blocks, events.breaks CASCADE;
NOTICE:  truncate cascades to table ""session_principals""
NOTICE:  truncate cascades to table ""session_block_principals""
NOTICE:  truncate cascades to table ""contribution_principals""
NOTICE:  truncate cascades to table ""contribution_field_values""
NOTICE:  truncate cascades to table ""subcontribution_references""
NOTICE:  truncate cascades to table ""contribution_references""
NOTICE:  truncate cascades to table ""contribution_person_links""
NOTICE:  truncate cascades to table ""legacy_contribution_id_map""
NOTICE:  truncate cascades to table ""legacy_session_id_map""
TRUNCATE TABLE
indico=> ROLLBACK;
ROLLBACK
```

Now, when I run the same thing in `pgcli`:

``` sql
indico> TRUNCATE events.contributions, events.subcontributions, events.timetable_entries, events.sessions, events.session_blocks, events.breaks CASCADE;
NOTICE:  truncate cascades to table ""legacy_session_id_map""

TRUNCATE TABLE
Time: 0.185s
indico>
```

or inside a transaction:

``` sql
indico> BEGIN;
BEGIN
Time: 0.003s
indico> TRUNCATE events.contributions, events.subcontributions, events.timetable_entries, events.sessions, events.session_blocks, events.breaks CASCADE;
NOTICE:  truncate cascades to table ""legacy_session_id_map""

TRUNCATE TABLE
Time: 0.138s
indico> ROLLBACK;
NOTICE:  truncate cascades to table ""legacy_contribution_id_map""

ROLLBACK
Time: 0.002s
indico> BEGIN;
NOTICE:  truncate cascades to table ""contribution_person_links""

BEGIN
Time: 0.000s
indico> SELECT 1;
NOTICE:  truncate cascades to table ""contribution_references""

+------------+
|   ?column? |
|------------|
|          1 |
+------------+
SELECT 1
Time: 0.000s
indico>

```

So apparently only one notice is retrieved per statement.
","TRUNCATE CASCADE notices not shown properly (only one per statement)
You're right. This is a bug in pgcli. I'll fix it soon. 

I'll have a look into this over the weekend

:+1: 
",2015-11-26 15:34:18,
775,423,"`extract_tables` was stopping as soon as it hit the `ON` keyword in the first join clause

Thanks to @jamiely for reporting this issue
","Fix suggestions in multi-way joins
:+1: 

[![Code Health](https://landscape.io/badge/262073/landscape.svg?style=flat)](https://landscape.io/diff/249246)
Code quality remained the same when pulling **[2b3e25c](https://github.com/dbcli/pgcli/commit/2b3e25c00843979c9458a4005e1b16e4f13c1f2b) on dbcli:darikg/fix-multiple-joins** into **[5dde125](https://github.com/dbcli/pgcli/commit/5dde125d9399296ae91eff7267651af7e70b4063) on dbcli:master**.

Works well. Thanks for adding comprehensive tests. 

Cheers!
:leaves: 
",2015-11-25 21:26:54,2015-11-26 03:03:50
776,422,"This is a small change to add humanized time display in parentheses.

Examples:

```
Time: 0.006s (a moment)
Time: 10.005s (10 seconds)
Time: 120.011s (2 minutes)
```
","Added humanized time display. Connect #396.
[![Code Health](https://landscape.io/badge/261319/landscape.svg?style=flat)](https://landscape.io/diff/248452)
Repository health decreased by 0.05% when pulling **[1f6f018](https://github.com/dbcli/pgcli/commit/1f6f0186d363d73d26e81c84245715246d57e8b6) on j-bennet/humanize-time** into **[5dde125](https://github.com/dbcli/pgcli/commit/5dde125d9399296ae91eff7267651af7e70b4063) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/248452/fixed) (including 0 errors and 0 code smells).

The change works as expected. But I'm not sure I like the fact it says 'a moment' for time deltas under a second. 

I suspect that most of the sql commands execute in under a second and it's going to keep showing `a moment` in parenthesis for most of them. 

My preference would be to fork humanize and vendor it in inside our packages folder and make necessary edits to support sub-second formatting. 

What do you think?

@amjith I'm thinking for sub-second queries, this humanized display does not really add any new information, so no point even forking the lib. How about I only show this display for queries that last more than a second?

Yes. I think that's a good idea.

Examples after new change:

```
Time: 0.502s
Time: 1.002s (a second)
Time: 10.009s (10 seconds)
```

[![Code Health](https://landscape.io/badge/263587/landscape.svg?style=flat)](https://landscape.io/diff/250923)
Repository health decreased by 0.05% when pulling **[ac69911](https://github.com/dbcli/pgcli/commit/ac69911c0197bb7d3d3bf983caf65eff75311feb) on j-bennet/humanize-time** into **[5dde125](https://github.com/dbcli/pgcli/commit/5dde125d9399296ae91eff7267651af7e70b4063) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/250923/fixed) (including 0 errors and 0 code smells).

Looks good. :koala: 
",2015-11-24 20:58:27,2015-11-29 01:16:10
777,421,"Surprisingly, manually entering a double quote, as in `SELECT * FROM ""` breaks suggestions. This just allows the suggestion system to ignore it.
","Handle manually entered double-quote gracefully
[![Code Health](https://landscape.io/badge/259784/landscape.svg?style=flat)](https://landscape.io/diff/246817)
Repository health increased by 0.00% when pulling **[9295cb9](https://github.com/dbcli/pgcli/commit/9295cb9686f6255df9f5869481732727a66a9461) on darikg/support-leading-double-quote** into **[928aa47](https://github.com/dbcli/pgcli/commit/928aa47fc18f0371e1990c4c57f392f63f898d7f) on master**.
- [1 new problem was found](https://landscape.io/diff/246817) (including 0 errors and 0 code smells).
- No problems were fixed.

Good catch. Your fix works as expected.

I think there is more room for improvement. For example, this is a valid sql `SELECT * FROM ""custom"".""abc""`. In fact that is the default sql generated by most ORMs. 

But currently in pgcli if you type `SELECT * FROM ""custom"".` we get all the tables and schemas, not just the tables from the `custom` schema. 

I'm fine merging this as is if you'd like to handle the above mentioned case in a separate PR. Let me know what you prefer. 

Huh. I'm surprised that doesn't work. I vote to merge this in as in and handle that case down the road.

wait sorry, don't merge this in, that's a new bug introduced by this pr not an outstanding issue

Ok, I updated this to handle double quotes in a slightly more sophisticated way, so now `SELECT * FROM ""custom"".""` suggests things correctly. It's probably still a little user-surprising that the quotes get automatically erased unless they're strictly needed, but we can leave that for the future I think.

[![Code Health](https://landscape.io/badge/260603/landscape.svg?style=flat)](https://landscape.io/diff/247678)
Repository health increased by 0.06% when pulling **[2c4f4e6](https://github.com/dbcli/pgcli/commit/2c4f4e689dec10983999e4c0d6708951ccbec159) on darikg/support-leading-double-quote** into **[928aa47](https://github.com/dbcli/pgcli/commit/928aa47fc18f0371e1990c4c57f392f63f898d7f) on master**.
- [1 new problem was found](https://landscape.io/diff/247678) (including 0 errors and 0 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/260923/landscape.svg?style=flat)](https://landscape.io/diff/248026)
Repository health increased by 0.06% when pulling **[d618c00](https://github.com/dbcli/pgcli/commit/d618c006bdae4faab601019a73aa318730e41295) on darikg/support-leading-double-quote** into **[928aa47](https://github.com/dbcli/pgcli/commit/928aa47fc18f0371e1990c4c57f392f63f898d7f) on master**.
- [1 new problem was found](https://landscape.io/diff/248026) (including 0 errors and 0 code smells).
- No problems were fixed.

I'd explain that token count check thing but I'm pretty sure it was incorrect anyway

Looks good. :gem: 
",2015-11-22 21:29:59,2015-11-24 19:17:31
778,420,"Reviewer: @stuartquin 

Trivial change to add EXPLAIN keyword to the suggestions. 

This is to address issue #415. 
","Add EXPLAIN keyword to the completion list.
[![Code Health](https://landscape.io/badge/259643/landscape.svg?style=flat)](https://landscape.io/diff/246670)
Code quality remained the same when pulling **[8435ad3](https://github.com/dbcli/pgcli/commit/8435ad367b9e73d92023233f079e1e8df1dc91bb) on dbcli:amjith/add-explain-keyword** into **[171da8f](https://github.com/dbcli/pgcli/commit/171da8fd4a99b1919712dd2e6691a4add429cc04) on dbcli:master**.

Simple, and it works :+1: 
",2015-11-22 16:50:29,2015-11-22 17:19:23
779,419,"Reviewer: @j-bennet 

This is a fix for #417. 

I've also added some tests to prevent future failure. 
","Fix the bug in auto-expand mode when there are no rows to display.
[![Code Health](https://landscape.io/badge/259566/landscape.svg?style=flat)](https://landscape.io/diff/246594)
Code quality remained the same when pulling **[b68c2ab](https://github.com/dbcli/pgcli/commit/b68c2ab38c5d0376f7e318bec3a2ca02837c8613) on dbcli:amjith/fix-auto-expand-bug** into **[171da8f](https://github.com/dbcli/pgcli/commit/171da8fd4a99b1919712dd2e6691a4add429cc04) on dbcli:master**.

Fix verified. Nice of you to add the test @amjith.
",2015-11-22 13:47:24,2015-11-23 06:13:13
780,418,"Here is an example of how it looks like. This happens both on windows 7 and ubuntu.

![pgcli](https://cloud.githubusercontent.com/assets/6884290/11317327/dc685c4a-9033-11e5-8864-c0706952c5c7.gif)
","Display bouncing when I hit enter
That looks quite bad. I'm not sure what's causing this flicker. 

Can you run `pip freeze`, so I can check the versions of the various packages? 

I'm particularly interested to know what version of prompt_toolkit you're using. This seems like a potential problem with [prompt_toolkit](https://github.com/jonathanslenders/python-prompt-toolkit).

The version of `prompt_toolkit` is as required in setup.py.

```
λ python --version
Python 3.4.3

λ pip freeze
You are using pip version 6.0.8, however version 7.1.2 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
click==5.1
configobj==5.0.6
pgcli==0.20.1
pgspecial==1.2.0
prompt-toolkit==0.46
psycopg2==2.6.1
Pygments==2.0.2
six==1.10.0
sqlparse==0.1.16
wcwidth==0.1.5
```

I tried upgrading `prompt_toolkit` to the latest version

```
λ pip install --upgrade prompt-toolkit
You are using pip version 6.0.8, however version 7.1.2 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
Collecting prompt-toolkit from https://pypi.python.org/packages/3.4/p/prompt_toolkit/prompt_toolkit-0.54-py3-none-any.whl#md5=d48d7c4c6d04922b4fc94874a1a9fe97
  Downloading prompt_toolkit-0.54-py3-none-any.whl (194kB)
    100% |################################| 196kB 682kB/s
Requirement already up-to-date: six>=1.9.0 in c:\python34\lib\site-packages (from prompt-toolkit)
Requirement already up-to-date: wcwidth in c:\python34\lib\site-packages (from prompt-toolkit)
Requirement already up-to-date: pygments in c:\python34\lib\site-packages (from prompt-toolkit)
Installing collected packages: prompt-toolkit
  Found existing installation: prompt-toolkit 0.46
    Uninstalling prompt-toolkit-0.46:
      Successfully uninstalled prompt-toolkit-0.46

Successfully installed prompt-toolkit-0.54

λ pgcli
Traceback (most recent call last):
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 612, in _build_master
    ws.require(__requires__)
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 918, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 810, in resolve
    raise VersionConflict(dist, req).with_context(dependent_req)
pkg_resources.ContextualVersionConflict: (prompt-toolkit 0.54 (c:\python34\lib\site-packages), Requirement.parse('prompt-toolkit==0.46'), {'pgcli'})

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""C:\Python34\Scripts\pgcli-script.py"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 3018, in <module>
    working_set = WorkingSet._build_master()
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 614, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 627, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""C:\Python34\lib\site-packages\pkg_resources\__init__.py"", line 805, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: prompt-toolkit==0.46
```

@j-bennet This looks very similar to the issue you first had with wharfee. Do you have any insight on how this got fixed for you? 

@hakib Upgrading prompt_toolkit to the latest version won't work. I wouldn't do that. Are you seeing the same flicker in both Windows and Linux? Are they on different computers or is it on the same machine but on dual boot? 

>  Are they on different computers or is it on the same machine but on dual boot?

Same computer. Windows host with Ubuntu guest. I actually tried installing `pgcli` on my laptop to see if it's happening there too but `pip install pgcli` completed the installation but `pgcli` did not work afterwards. I haven't had time to check it out yet. Maybe I need to execute it directly from the `venv/bin` or something ...

> pip install pgcli completed the installation but pgcli did not work afterwards.

If you installed it inside a virtualenv then you need to activate the virtualenv before you can execute pgcli.

> Same computer. Windows host with Ubuntu guest.

I'm wondering if this is a video card issue. I guess we'll find out once you try it on your laptop. 

Hey @amjith, just tested it on my laptop with a fresh installation of pgcli on a blank venv - **same problem**.

```
haki:~/src/testpgcli$ pyvenv venv
haki:~/src/testpgcli$ activate
(venv) haki:~/src/testpgcli$ python --version
Python 3.4.3+
(venv) haki:~/src/testpgcli$ pip install pgcli
Downloading/unpacking pgcli
  Downloading pgcli-0.20.1.tar.gz (46kB): 46kB downloaded
  Running setup.py (path:/tmp/pip-build-y5dwe2u1/pgcli/setup.py) egg_info for package pgcli

...

(venv) haki:~/src/testpgcli$ pip freeze
Pygments==2.0.2
click==6.0
configobj==5.0.6
pgcli==0.20.1
pgspecial==1.2.0
prompt-toolkit==0.46
psycopg2==2.6.1
setproctitle==1.1.9
six==1.10.0
sqlparse==0.1.16
wcwidth==0.1.5
```

This is on a lenovo ideapad laptop.

Thanks for testing it on a different computer and reporting back. Sorry I haven't replied in a while, I was traveling and couldn't get reliable internet connection. 

I noticed that you've tested this exclusively on Python 3.4. I tried that on my laptop and I still don't see the flicker, but I'm on OS X. 

Can you try it on Python 2.7 to see if this still persists? 

@jonathanslenders Do you have any idea what could be happening? The gif posted in the first comment shows a flickering whenever the enter key is pressed. I'm not able to reproduce it, but I'm wondering if you've seen this or heard this behavior from someone else.

@amjith, Same issue on python 2.7. It's pretty weird that on both my computers from different vendors with different OS's and different versions of python I get this flickering. Maybe there is some configuration i can try?

![pgcli](https://cloud.githubusercontent.com/assets/6884290/11475362/c44aedfe-9785-11e5-8fea-ca3d13d1adf5.gif)

I don't understand how this is possible on Windows. For vt100 terminals (Mac/Linux), we have to wait for the CPR reponse (Cursor Position Request response). This one returns the x/y coordinates of the cursor position through stdin. As long as this has not been received, we don't know the space below the cursor and the bottom toolbar will not be displayed. For windows, we will always know the height, because that's a win32 call.

I will try to have a look next week. (Currently, I'm abroad for work.)

Oh, btw, for Windows, I highly recommend to use conemu or cmder. (The Windows console is broken in many ways.)

@jonathanslenders, the first example is cmder. The second is cmd. Both give the same flickering effect on both py2 & 3.4.

i have the same problem.
i use pgcli in redhat operate system.

$ pip freeze
click==6.6
configobj==5.0.6
humanize==0.5.1
mycli==1.8.0
pgcli==1.2.0
pgspecial==1.6.0
prompt-toolkit==1.0.3
psycopg2==2.6.2
pycrypto==2.6.1
Pygments==2.1.3
PyMySQL==0.7.9
setproctitle==1.1.10
six==1.10.0
sqlparse==0.2.0
wcwidth==0.1.7

it always flicker.

@jerome-peng I've tried this on different computers and different OSes. But I still reproduce it. I suspect it is a combination of a graphics card and driver. This is so far beyond my understanding of the stack that I have no good solution for you. 😞 

All I can say is, did you try a different terminal? Say KTerm or gnome-terminal or xterm or urxvt? 

i have noticed similar flickering on mycli. it flickers (as describes by original poster) everytime i enter a command and hit enter

some random guesses
i am using it in a docker container, perhaps that is the cause? https://hub.docker.com/r/jdecool/mycli/~/dockerfile/
i am also using a fairly barebones terminal, sakura, perhaps that is the problem. https://launchpad.net/sakura
I don't think we can do much about this one, unfortunately. Closing.",2015-11-21 07:41:23,2019-05-05 15:09:49
781,417,"It seems that empty result sets with `\x auto` enabled cause a `list index out of range` exception.

```
crobbins> select 1 where false;         
+------------+                          
| ?column?   |                          
|------------|                          
+------------+                          
SELECT 0                                       

crobbins> \x                            
Expanded display is on.                            

crobbins> select 1 where false;         

SELECT 0                                

crobbins> \x auto                       
Expanded display is used automatically. 

crobbins> select 1 where false;         
list index out of range                 
```
","\x auto: list index out of range 
Thanks for reporting the bug. It is indeed an oversight. I've created a PR (#419) to fix it. It should be fixed in the next release. 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-11-18 16:09:08,2016-06-29 03:21:13
782,416,"Now that the indentation within EXPLAIN was fixed, perhaps it'd be a good idea to make it more readable than in original PostgreSQL? Color highlighting would imho be a good start - what should I start with if I want to experiment with this feature?

Another idea I have is to realign its output so that we'd have two columns and multiple rows instead of 1x1 text field. Rows would mean separate activities and their details (seq scan, hash join etc), columns would be for things like cost and ANALYZE results. What do you think?
","Syntax-highlight and maybe realign EXPLAIN output?
Having two columns for the output of Explain is possible. Take a look at this function `format_output()` https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L650. 

We currently use this function to create the tabular output. The idea is quite simple. 

If there are 2 columns then there will be a list with two items of `headers`. The `cur` variable is an iterable (list, tuple, generator etc) that has the values that correspond to each row. Think of it as a list of tuples like this [('a', 'b'), ('c', 'd')]. This means `(a, b)` forms the first row where `a` is in first column and `b` is in second column, `(c, d)` forms the second row and so on. 

I'm not sure about the syntax coloring of output. We use [pygments](http://pygments.org/) for syntax coloring, you're welcome to take a stab at it. 

http://explain.depesz.com/history does something similar.

And pev: http://tatiyants.com/pev/

It's possible to do what explain.depesz.com is doing. 

To do what pev is doing would require me to implement a tree drawing library for the terminal, I seriously doubt, I can pull that off. :)

I just put it there as something related. Having what explain.depesz.com has would already be tremendous.
",2015-11-18 10:09:01,
783,415,"I noticed that these 2 functions are not listed by `pgcli`.
How to add it by users?
","completion for count and explain functions
Yes `EXPLAIN` is not yet added to the list. We're in the process of refactoring how we supply these keywords. 

You can add it to this file and send a PR: https://github.com/dbcli/pgcli/blob/master/pgcli/packages/pgliterals/pgliterals.json

Thanks.
Looking forward these completions be included in next release.

@lookforit I've added the EXPLAIN keyword in PR #420, but what do you mean by `COUNT` because it is already listed as a suggestion. 

Closed via https://github.com/dbcli/pgcli/pull/420.",2015-11-17 08:51:48,2019-05-05 15:20:39
784,414,"I have just upgraded to the latest `pgcli` with `brew`. I hadn't used it before though. 

I can connect to a database with it, and auto-complete seems to work, but I keep running into exceptions in an unpredictable manner while using it, presumably when trying to complete tables.

Below is the full trace. Anyone knows what could be failing? 

I am having this problem with both Python 2.7.10 and Python 3.5.0 (both using the latest stable version of all the install Python packages with `conda`)

Thanks!

```
$ pgcli postgresql://xxx@yyy:54321/rptdb
Version: 0.20.1
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
rptdb> SELECT * from 

dx.Exception in thread completion_refresh:
Traceback (most recent call last):
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
    self.run()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py"", line 763, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 58, in _bg_refresh
    refresher(completer, executor)
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/completion_refresher.py"", line 100, in refresh_functions
    completer.extend_functions(executor.functions())
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 133, in extend_functions
    for f in func_data:
  File ""/usr/local/Cellar/pgcli/0.20.1/libexec/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 384, in functions
    cur.execute(self.functions_query)
ProgrammingError: function pg_catalog.pg_get_function_arguments(oid) does not exist
LINE 4:                 pg_catalog.pg_get_function_arguments(p.oid) ...
                        ^
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
```
","function does not exist. pg_catalog.pg_get_function_arguments(oid) 
What version of postgresql server are you connecting to?

Thanks @darikg 

```
> select version();
     version
------------------------------------------------
 PostgreSQL 8.2.15 (Greenplum Database 4.3.5.2 build 1) on x86_64-unknown-linux-gnu
compiled by GCC gcc (GCC) 4.4.2 compiled on Jun 23 2015 21:03:42
(1 row)
```

Maybe this version is still not supported?

That's correct. Unfortunately right now we're only supporting Postgres >= 9

OK, thanks @darikg 
",2015-11-16 14:41:41,2015-11-16 18:25:37
785,413,"The main goal here is to make it easier to write regression tests using set-based logic. Before, suggest_type returned lists of dictionaries, whose values were lists. Because mutable data structures aren't hashable, it wasn't possible to create sets of suggestions, and mandated the ugly `sorted_dicts` kludge. Here, I've reworked everything to return tuples instead of lists, and namedtuples instead of dicts. For the most part, I think this leads to more readable code, although admittedly one-element tuples are a bit of an eyesore.
","Use only immutable datatypes for suggestions
[![Code Health](https://landscape.io/badge/255101/landscape.svg?style=flat)](https://landscape.io/diff/241969)
Code quality remained the same when pulling **[692afc8](https://github.com/dbcli/pgcli/commit/692afc8240fc541c31902166ddd0582731c9c07c) on dbcli:darikg/immutable-suggestions** into **[f4bb154](https://github.com/dbcli/pgcli/commit/f4bb154cedd5068447725a87769f0b494da007a8) on dbcli:master**.

I absolutely love this PR. :heart: 

The resulting code is not only succinct but way more clear in it's intent. I've always felt our list of dictionaries cobbled together with arbitrary fields was a bit icky. This is a very nice solution. 

Thank you for thinking of the future generations. :smiley:

Parenthesis around tuples is a personal preference, if you're not comfortable with that suggestion, just let me know and I'll merge this in as is.

Thanks! I personally slightly prefer it without the parens, but it's not a strong preference by any means so I went ahead and changed them. While I was doing that I found two cases where I was still returning lists instead of tuples so it paid off.

[![Code Health](https://landscape.io/badge/256439/landscape.svg?style=flat)](https://landscape.io/diff/243358)
Code quality remained the same when pulling **[43b5cc9](https://github.com/dbcli/pgcli/commit/43b5cc9afdd13957e4c05ba2f68dc6e0c9bf18e4) on dbcli:darikg/immutable-suggestions** into **[f4bb154](https://github.com/dbcli/pgcli/commit/f4bb154cedd5068447725a87769f0b494da007a8) on dbcli:master**.

Looks great.

:fork_and_knife: 
",2015-11-16 12:49:28,2015-11-18 05:36:32
786,412,"I tried to upgrade pgcli with the command `pip install --upgrade pgcli`

I am getting the following exception
I am also using pyenv.

```
Collecting pgcli
  Using cached pgcli-0.20.1.tar.gz
Requirement already up-to-date: pgspecial>=1.1.0 in /usr/local/var/lib/pyenv/versions/2.7/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: click>=4.1 in /usr/local/var/lib/pyenv/versions/2.7/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: Pygments>=2.0 in /usr/local/var/lib/pyenv/versions/2.7/lib/python2.7/site-packages (from pgcli)
Collecting prompt-toolkit==0.46 (from pgcli)
  Using cached prompt_toolkit-0.46-py2-none-any.whl
Requirement already up-to-date: psycopg2>=2.5.4 in /usr/local/var/lib/pyenv/versions/2.7/lib/python2.7/site-packages (from pgcli)
Collecting sqlparse==0.1.16 (from pgcli)
  Using cached sqlparse-0.1.16.tar.gz
Collecting configobj>=5.0.6 (from pgcli)
  Using cached configobj-5.0.6.tar.gz
Collecting setproctitle>=1.1.9 (from pgcli)
  Using cached setproctitle-1.1.9.tar.gz
Requirement already up-to-date: six>=1.9.0 in /usr/local/var/lib/pyenv/versions/2.7/lib/python2.7/site-packages (from prompt-toolkit==0.46->pgcli)
Requirement already up-to-date: wcwidth in /usr/local/var/lib/pyenv/versions/2.7/lib/python2.7/site-packages (from prompt-toolkit==0.46->pgcli)
Installing collected packages: prompt-toolkit, sqlparse, configobj, setproctitle, pgcli
  Found existing installation: prompt-toolkit 0.26
    Uninstalling prompt-toolkit-0.26:
Exception:
Traceback (most recent call last):
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/site-packages/pip/basecommand.py"", line 211, in main
    status = self.run(options, args)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/site-packages/pip/commands/install.py"", line 311, in run
    root=options.root_path,
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/site-packages/pip/req/req_set.py"", line 640, in install
    requirement.uninstall(auto_confirm=True)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/site-packages/pip/req/req_install.py"", line 716, in uninstall
    paths_to_remove.remove(auto_confirm)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/site-packages/pip/req/req_uninstall.py"", line 125, in remove
    renames(path, new_path)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/site-packages/pip/utils/__init__.py"", line 315, in renames
    shutil.move(old, new)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/shutil.py"", line 292, in move
    copy2(src, real_dst)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/shutil.py"", line 127, in copy2
    copyfile(src, dst)
  File ""/usr/local/opt/pyenv/versions/2.7/lib/python2.7/shutil.py"", line 81, in copyfile
    with open(src, 'rb') as fsrc:
IOError: [Errno 2] No such file or directory: '/usr/local/var/lib/pyenv/versions/2.7/bin/ptipython'
```

Please help.
","Error upgrading pgcli
Can you try uninstalling and try installing again? 

You can do that using: 

```
pip uninstall pgcli prompt_toolkit
pip install -U pgcli 
```

@amjith 
It worked now. Thank you

Thank you for confirming the fix. Cheers!
",2015-11-13 04:21:56,2015-11-13 08:45:03
787,411,,"Aded sdist upload to release script.
[![Code Health](https://landscape.io/badge/253272/landscape.svg?style=flat)](https://landscape.io/diff/240059)
Code quality remained the same when pulling **[09fccfe](https://github.com/dbcli/pgcli/commit/09fccfe935d6803757df7a779ae107981a2424d0) on dbcli:j-bennet/add-upload-to-release-script** into **[7ee8a90](https://github.com/dbcli/pgcli/commit/7ee8a9035821466640ba2700cf2de019a577cb31) on dbcli:master**.

Thanks! :lollipop: 

The bots strike again...
",2015-11-13 00:00:47,2015-11-13 02:51:55
788,410,"It would be nice if pgcli had some fancy handling for transactions. Things I could imagine:
- Always start a transaction on startup. COMMIT/ROLLBACK would automatically start a new one.
- Start a transaction implicitly as soon as you run any SQL command that modifies data (might be a bit obscure though).

When always having a transaction an automated ROLLBACK+BEGIN in case of an SQL error would be useful - that's actually one of the things I miss most in psql. Sometimes I want to try things and having to rollback+begin after a typo etc it somewhat annoying.

An undo feature could also be useful. Basically it'd ROLLBACK+BEGIN and then execute all statements since the start of the transaction besides that last one / last n ones again.
","Transactions
Interesting request. 

But I'm still unclear when pgcli would commit. For example: When a user launches pgcli we start a transaction, then they explore using select, change data using insert or update or drop, then explore some more using select. In this workflow where does the commit happen? Do we keep all these commands in a transaction until they quit pgcli or type in COMMIT/ROLLBACK themselves? 

@darikg I was thinking your latest changes to add the extra field for denoting success/failure of a query can be used to achieve the undo feature. 

> But I'm still unclear when pgcli would commit. 

I would only commit explicitly, i.e. by issuing a `COMMIT` statement. Of course this would need to be displayed on startup when transactions are enabled (and there could be an _optional_ prompt on exit if there are uncommitted changes).

I think this would be very useful as a mode that can be enabled/disabled with its status shownin the bottom bar like smart completion and multiline mode. When autocommit mode is ON its behaviour would be the standard one when no transaction is explicly started and when it is OFF, a commit is explicitly needed.

Improving autocommit off mode with an automatic start of a new transaction (ROLLBACK+BEGIN) when an errors fail as @ThiefMaster purpose would be great.

This sounds like a nice feature to have. I like the idea of autocommit mode being displayed in the bottom status bar. We could also add a little indicator (like a red `*` or `!`) to show that user has uncommited changes - in addition to a warning on exit.

I would love to see this feature coming to pgcli, I'm currently dealing with `begin; ... commit;` on my own but that makes it really prone to error, especially when dealing with production databases...

Do note that there are PostgreSQL operations that can't be run inside a transaction (VACUUM comes to mind). This feature should be off by default.

This should be possible to enable. Or, more specifically, the optional behaviour should/must match that of `psql` when run with 

```
\set AUTOCOMMIT off
\set ON_ERROR_ROLLBACK interactive
```

And it should be possible to *configure* this as the default operation somehow. The `ON_ERROR_ROLLBACK` interactive in `psql` creates implicit savepoints over each command, and rolls them back on exception so that in case of a simple typo in my session I do not have to **start again from scratch**.
It would be really nice to at least have the equivalent of psql's `\set ON_ERROR_ROLLBACK interactive` in pgcli. That's the only feature I really miss from psql. http://blog.endpoint.com/2015/02/postgres-onerrorrollback-explained.html might be helpful to anyone interested.
Huge +1 that `ON_ERROR_ROLLBACK` support would be huge. A typo after a bunch of transactional work can be quite frustrating. =) Thank you for all your great work!
\set AUTOCOMMIT off
is essential for any proper database developer work ",2015-11-11 22:54:56,
789,409,"Here is an initial implementation for fixing #399 (in tandem with https://github.com/dbcli/pgspecial/pull/6).

This should provide correct correct behaviour for \pset pager off/on/always options - without breaking the format_output api and maintaining correct behaviour when used with `\x` options. 

I've extracted the content_exceeds_width calculation out of format_output to avoid doing it twice. Perhaps the very nice way to do would be to check every row during formatting and raise if it breaks on a condition (rather than just checking the first-row as in the previous implementation) but I don't know how easy this would be since table-formatting is done by a different library. 

I will add some additional tests if this seems like a reasonable implementation. (Travisci currently fails because `pgspecial.pager_config` does not exist). 
","Enable user set LESS options and \pset pager config toggling
[![Code Health](https://landscape.io/badge/250955/landscape.svg?style=flat)](https://landscape.io/diff/237653)
Repository health decreased by 0.12% when pulling **[133c8af](https://github.com/pik/pgcli/commit/133c8afaa53648f47d11bd992779b83fab23e779) on pik:master** into **[7ee8a90](https://github.com/dbcli/pgcli/commit/7ee8a9035821466640ba2700cf2de019a577cb31) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/237653) (including 0 errors and 1 code smell).
- [1 problem was fixed](https://landscape.io/diff/237653/fixed) (including 0 errors and 0 code smells).

@pik Thanks for taking a stab at this change. I like the addition of `\pset pager` to pgspecial. But I think it should only have two options `off/on`. 

If it is `on` then we check whether the env var `LESS` is set or not. If it is set then we don't mess with anything and we use it as is. If it is not set then we use `-RXF` if the output fits the screen width, and use `-SRF` if the output doesn't fit the screen width.

What do you think? 

@amjith Thanks for the response and sorry for the long hiatus on this. I've updated to fix the issue with determining `output_fits_screen` for `\x auto`; it's a little weird because I didn't really want to alter the number of return values from format_output (not sure which is more preferable). 
At least currently there are checks in two places one as previously in format_output (determine whether it should be tabulated for `\x auto`) and the other after the output has been formatted (since formatting can increase the number of rows to not fit on screen, even if `\x auto` was triggered). 

I'd also like to add tests for display_output and a few of the functions called on PGCli class - but that would probably require a fair amount of stubbing. I'm not sure if there is a stubbing library or approach you would prefer? (I left it empty for now.)

> If it is on then we check whether the env var LESS is set or not. If it is set then we don't mess with anything and we use it as is. If it is not set then we use -RXF if the output fits the screen width, and use -SRF if the output doesn't fit the screen width

This would cover all of my personal use cases, my only hesitation would be if there are actually users which want to use custom LESS opts and have more control over that particular behaviour. 

@pik I somehow never got notified of the new commits. I'll take a look at them now. 

We've carried over most of the changes from the PR in subsequent releases. I'm going to close this PR. Let us know if you have more suggestions.",2015-11-10 04:45:28,2017-04-30 00:38:42
790,408,,"Preparing release 0.20.1 with Windows log fix.
@darikg: Please review and merge.

[![Code Health](https://landscape.io/badge/249460/landscape.svg?style=flat)](https://landscape.io/diff/235204)
Code quality remained the same when pulling **[b4bea5f](https://github.com/dbcli/pgcli/commit/b4bea5f2f5cf40ba2818881133e47db2c8159765) on dbcli:j-bennet/release-0.20.1** into **[f0b8c71](https://github.com/dbcli/pgcli/commit/f0b8c71f66dad8a06e3d5e9d4a379d955fc879f9) on dbcli:master**.

This is now released to pypi. I will add a release post to pgcli.com as soon as I can. Thanks @darikg and @amjith.

Thank you!
",2015-11-07 19:24:35,2015-11-07 21:39:42
791,407,"@j-bennet @darikg I made a reference implementation of what I had in mind. 

You're welcome to test this and merge or write your own implementation if you're not satisfied. 

I haven't tested this yet, sorry. 
","Switch the location of log/history file based on OS.
Wow you're fast @amjith. How about I apply this into my appveyor branch and we'll see if it fixes it.

[![Code Health](https://landscape.io/badge/247728/landscape.svg?style=flat)](https://landscape.io/diff/233719)
Code quality remained the same when pulling **[6fd2806](https://github.com/dbcli/pgcli/commit/6fd2806e6f4062c452b81565655759d228d008df) on dbcli:amjith/fix_log_file_windows** into **[2c1c493](https://github.com/dbcli/pgcli/commit/2c1c493977dbb5d208815b1adc1413084d636813) on dbcli:master**.

Yes it fixes the log breaking in appveyor problem - it's back to prompt_toolkit breaking, just as expected:

https://ci.appveyor.com/project/j-bennet/pgcli/build/job/2gqkdnkftguytn6x

@amjith This one should be updated too:

https://github.com/dbcli/pgcli/blob/amjith/fix_log_file_windows/pgcli/pgcompleter.py#L21

Otherwise I think the fix is good to go.

[![Code Health](https://landscape.io/badge/248186/landscape.svg?style=flat)](https://landscape.io/diff/234127)
Code quality remained the same when pulling **[b84013f](https://github.com/dbcli/pgcli/commit/b84013ffa2d7ccab1896ba8b52d6819680dafb58) on dbcli:amjith/fix_log_file_windows** into **[2c1c493](https://github.com/dbcli/pgcli/commit/2c1c493977dbb5d208815b1adc1413084d636813) on dbcli:master**.

I added another commit that:
- Updates the code that migrates old config with new path.
- Updates named queries loading from the new path.
  @darikg or @amjith could you take a look for sanity check and merge?

So `config_location()` returns something like `c:\users\username\AppData\Local\dbcli\pgcli\`. But everything that uses it writes `config_location() + 'config'`. What's the point of that `'config'` subfolder?

@darikg So in new implementation `config_location` does NOT return full path to file. It returns directory name to where the file should be written. To that, we add the filename (`config`, `log`, or `history`) to get full path to file.

Ahh, so 'config' isn't a subfolder name, it's the filename. Sorry for the misunderstanding

I'm replying from my phone on 2G. I couldn't check the commit. So I'll
defer to @darikg to review.

@j-bennet Can you release the next version once this is merged?

Amjith
On Nov 5, 2015 11:23 PM, ""darikg"" notifications@github.com wrote:

> Ahh, so 'config' isn't a subfolder name, it's the filename. Sorry for the
> misunderstanding
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/pull/407#issuecomment-154136889.

Yes. It should be 0.20.1, correct?  

Yes.
On Nov 6, 2015 8:46 AM, ""Iryna Cherniavska"" notifications@github.com
wrote:

> Yes. It should be 0.20.1, correct?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/pull/407#issuecomment-154272780.

I tested it by renaming my current config folder, or recreating the original .pgclirc file to test the migration, and everything looks good
",2015-11-05 02:23:18,2015-11-06 11:37:12
792,406,"I installed pgcli with 

```
pip install -U pgcli
```

I tried running it like this:

```
pgcli <url to db>
```

I get the following traceback

```
Traceback (most recent call last):
  File ""C:\Python27\Scripts\pgcli-script.py"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 2867, in <module>
    working_set = WorkingSet._build_master()
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 434, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 447, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 622, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: sqlparse==0.1.16
```

I have sqlparse, since I can open a Python session and import it.
","DistributionNotFound: sqlparse
It seems it only works with exact version. I installed that but now it's complaining about another lib

```
Traceback (most recent call last):
  File ""c:\Python27\Scripts\pgcli-script.py"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 2867, in <module>
    working_set = WorkingSet._build_master()
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 432, in _build_master
    ws.require(__requires__)
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 728, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""C:\Python27\lib\site-packages\pkg_resources.py"", line 622, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: prompt-toolkit==0.46
```

Is there a way to install all dependencies?

That's quite puzzling. Can you tell me if you're installing it in a virtualenv? 

My suspicion is you're installing it system wide and there are other programs with conflicting dependencies. They seem to install other versions of the dependencies, which cause pgcli to fail when it launches. 

The reason for requiring specific version of prompt_toolkit is because newer versions of prompt_toolkit has some compatibility issues which we're still working through. So until then we've pinned the version to a specific value that works.

A possible remedy is to run `pip uninstall pgcli` and then run `pip install pgcli`. This will uninstall and reinstall pgcli, then try launching it. 

If that still doesn't work, can you send me the output of `pip freeze`? 

I've done that and now it's complaining about not finding a log

```
Traceback (most recent call last):
  File ""c:\python27\lib\runpy.py"", line 162, in _run_module_as_main
    ""__main__"", fname, loader, pkg_name)
  File ""c:\python27\lib\runpy.py"", line 72, in _run_code
    exec code in run_globals
  File ""C:\Python27\Scripts\pgcli.exe\__main__.py"", line 9, in <module>
  File ""c:\python27\lib\site-packages\click\core.py"", line 700, in __call__
    return self.main(*args, **kwargs)
  File ""c:\python27\lib\site-packages\click\core.py"", line 680, in main
    rv = self.invoke(ctx)
  File ""c:\python27\lib\site-packages\click\core.py"", line 873, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""c:\python27\lib\site-packages\click\core.py"", line 508, in invoke
    return callback(*args, **kwargs)
  File ""c:\python27\lib\site-packages\pgcli\main.py"", line 564, in cli
    pgcli = PGCli(prompt_passwd, never_prompt, pgclirc_file=pgclirc)
  File ""c:\python27\lib\site-packages\pgcli\main.py"", line 106, in __init__
    self.initialize_logging()
  File ""c:\python27\lib\site-packages\pgcli\main.py"", line 166, in initialize_logging
    handler = logging.FileHandler(os.path.expanduser(log_file))
  File ""c:\python27\lib\logging\__init__.py"", line 911, in __init__
    StreamHandler.__init__(self, self._open())
  File ""c:\python27\lib\logging\__init__.py"", line 936, in _open
    stream = open(self.baseFilename, self.mode)
IOError: [Errno 2] No such file or directory: 'C:\\Users\\<USERNAME>\\.config\\pgcli\\log'
```

```
pip freeze
argh==0.26.1
backports.ssl-match-hostname==3.4.0.2
BeautifulSoup==3.2.1
beautifulsoup4==4.3.2
bugjar==0.1.0
certifi==2015.4.28
click==5.1
colorama==0.3.2
configobj==5.0.6
cricket==0.2.4
cx-Freeze==4.3.4
decorator==4.0.2
Django==1.8.4
docutils==0.12
evernote==1.25.1
execnet==1.2.0
Flask==0.10.1
Flask-Admin==1.2.0
Flask-MySQL==1.3
Flask-SQLAlchemy==2.0
Flask-WTF==0.12
functools32==3.2.3.post2
geeknote==0.2a0
gevent==1.0.1
greenlet==0.4.5
html2text==2015.6.21
httplib2==0.9.2
inflect==0.2.5
ipykernel==4.0.3
ipython==4.0.0
ipython-genutils==0.2.0.dev0
ipywidgets==4.0.2
itsdangerous==0.24
Jinja2==2.7.3
jsonschema==2.5.1
jupyter==1.0.0
jupyter-client==4.0.0
jupyter-console==4.0.2
jupyter-core==4.0.4
landslide==1.1.3
Markdown==2.6.2
markdown2==2.3.0
MarkupSafe==0.23
matplotlib==1.4.3
mistune==0.7.1
mysql-connector-python==2.0.4
MySQL-python==1.2.5
nbconvert==4.0.0
nbformat==4.0.0
notebook==4.0.4
numpy==1.9.2
oauth2==1.9.0.post1
path.py==8.1
pgcli==0.20.0
pgspecial==1.2.0
pickleshare==0.5
prompt-toolkit==0.46
psycopg2==2.6.1
py==1.4.26
pyflakes==0.8.1
Pygments==2.0.2
PyInstaller==2.1
PyMySQL==0.6.6
pyodbc==3.0.10
pyreadline==2.0
pytest==2.6.4
pytest-xdist==1.11
python-ntlm==1.1.0
pywin32==219
PyYAML==3.11
pyzmq==14.6.0
qtconsole==4.0.1
redis==2.10.3
selenium==2.47.1
simplegeneric==0.8.1
six==1.10.0
sqlacodegen==1.1.6
SQLAlchemy==1.0.4
sqlparse==0.1.16
thrift==0.9.3
tkreadonly==0.6.0
tornado==4.2.1
traitlets==4.0.0
watchdog==0.8.3
wcwidth==0.1.5
Werkzeug==0.10.4
wheel==0.26.0
WTForms==2.0.2
```

@cristianmtr Sorry about that bug. It was a new bug introduced in the latest version, we'll get his fixed ASAP and do a quick release. 

In the meantime you can install the previous version of pgcli using `pip install pgcli==0.19.2`. That should work. 

Yes, that version seems to be working.

Thanks a lot!
",2015-11-02 10:45:09,2015-11-05 12:01:02
793,405,"We're getting ready to release pgcli 0.20.0. 

I've updated the changelog and AUTHORS file. 

This is a pretty big release. So a thumbs up from @dbcli/pgcli-core would be much appreciated. 

Please let me know if I've missed something. 
","Amjith/release 0.20.0
[![Code Health](https://landscape.io/badge/244796/landscape.svg?style=flat)](https://landscape.io/diff/231163)
Code quality remained the same when pulling **[6bdb350](https://github.com/dbcli/pgcli/commit/6bdb3504ed7a30c0755961cb1ed40a196d9c5088) on dbcli:amjith/release-0.20.0** into **[384d229](https://github.com/dbcli/pgcli/commit/384d22974f1133fedbcea3d1debeaf3be307eb87) on dbcli:master**.

:+1: 

right on
",2015-10-31 13:51:52,2015-11-01 04:33:59
794,404,"Changed auto-completion to auto-completes in the features because it flows better.
","Update README.rst
[![Code Health](https://landscape.io/badge/243169/landscape.svg?style=flat)](https://landscape.io/diff/229733)
Code quality remained the same when pulling **[f9a2d55](https://github.com/vinotheassassin/pgcli/commit/f9a2d55968a5a2cd804dc6d3d0716c06a8cd086d) on vinotheassassin:patch-1** into **[00df5b4](https://github.com/dbcli/pgcli/commit/00df5b44c9f0291cfadcc0e8e101e8208578350a) on dbcli:master**.

Thank you!

:rooster: 
",2015-10-29 03:14:00,2015-10-29 08:17:55
795,403,,"Detect connections from pgadmin
Can you elaborate? I don't know what this means. 

@amjith I have connections in pgadmin3 set up already that I would like to be able to use from pgcli without additional work. Would be great if this was possible!

Relevant link:

http://stackoverflow.com/questions/3464396/pgadmin-sharing-db-connection-definitions

@j-bennet Thanks for the link to SO, it helped me get some background.

@dbkaplun Can you add some links to the documentation or some examples of the .pgadmin3 file? 

I don't use pgadmin. Looking at their site (http://www.pgadmin.org/) I see that it's a GUI tool. But I don't understand how connections are setup or how to reuse the said connections. 

I'm less inclined to install pgadmin and try to go through the initial setup just to get the format of .pgadmin3 file. So if you can provide some help, I'd appreciate it. 

I looked at my .pgadmin3 file. It's an .ini-formatted file and looks like it doesn't have password information.

The file that has this info:
http://dave.webdev.pgadmin.org/docs/1.6/pg/libpq-pgpass.html

We could parse users and passwords out of that, keyed on host/port combo, and use them when user is connecting to host:port that are present in this file, if he left user and password empty.

Is that what you would like @dbkaplun?

That sounds about right. Good stuff @j-bennet!

psycopg2 should already be checking .pgpass for us so it should already work, c.f. #53 #292 

You're right @darikg. It's just that the current behaviour may not be quite what the user would expect.

For example, I have user ""user1"" with password ""pass1"" configured in my .pgpass for localhost. My Ubuntu user is named ""iryna"". When I run `pgcli` or `pgcli -h localhost`, I expect to connect as ""user1"" with password already there, but instead it asks for password for ""iryna"". Which is actually the same behavior as psql, but it does not seem correct.

Got it. That does sound more convenient

What if there's multiple user/pass combinations for a given host in pgpass? Take the first one?

Either the first one or the last one?

I'm wondering if this is a bug in psycopg2 though.

I tried to put in `.pgpass` file a username that is the same as my Ubuntu user, and this way it works. However, I don't see why it would not with a different user. The behavior does not seem logical. We can handle it ourselves but it may be better to submit a bug.

I think pgcli defaults to your own username if none is supplied, which is also what psql does. 

Yes, it does. Also found one more case: if I run `psql -U user1`, then it uses password from pgpass. But if I run `pgcli -U user1`, it still asks for password. That looks like our bug (or psycopg2 bug, since we are not handling it ourselves).

The whole behavior though, do we want to stick to what psql does? Or do we want to improve it?
",2015-10-28 15:54:44,
796,402,"A new version of codecov (1.6.0) was released to PyPi today and our tests on travis starting failing on python 2.6. The log shows some import error in behave, so I have no idea how pinning the codecov version to 1.5.1 fixes it, but it does.
","Pin codecov version in travis.yml
[![Code Health](https://landscape.io/badge/242755/landscape.svg?style=flat)](https://landscape.io/diff/229359)
Code quality remained the same when pulling **[25e63f3](https://github.com/dbcli/pgcli/commit/25e63f384f71fd5cf5c1bd0a17a132b59291248a) on dbcli:darikg/pin-codecov** into **[a5cf7d9](https://github.com/dbcli/pgcli/commit/a5cf7d9ba273854d9ad5dfba8a3d3a57ded651fe) on dbcli:master**.

:octopus: 
",2015-10-28 14:04:37,2015-10-28 14:10:05
797,401,"Run:

```
create table match(hai text);
select * from match m;
```

Now replace `*` with `m.<tab>`. Nothing will happen. Repeat ""match2"" to see that pgcli doesn't think it's a keyword anymore.
","Autosuggest doesn't work for table ""match""
As a workaround you can escape the tablename like `select m.<tab> from ""match"" m`

The problem is that `match` is a [keyword ](http://www.postgresql.org/docs/9.2/static/sql-keywords-appendix.html). Currently `parse_utils.extract_tables` [stops](https://github.com/dbcli/pgcli/blob/a5cf7d9ba273854d9ad5dfba8a3d3a57ded651fe/pgcli/packages/parseutils.py#L101) once it hits a `Keyword`. We could do a lot better if we had a way of distinguishing between reserved and non-reserved keywords.

Escaping keywords with quotes is a fair solution. Closing.",2015-10-27 16:22:57,2019-05-05 15:16:51
798,400,"Right now our tests fail in tox because of setproctitle.
","Setproctitle should be optional in tests.
[![Code Health](https://landscape.io/badge/241534/landscape.svg?style=flat)](https://landscape.io/diff/228282)
Code quality remained the same when pulling **[2be25f5](https://github.com/dbcli/pgcli/commit/2be25f535823544549cbf3a1a7a0100962c6fece) on dbcli:j-bennet/safeguard-setproctitle** into **[203c1e9](https://github.com/dbcli/pgcli/commit/203c1e939e40fe2da6dbfde3d0f3e92f750315a7) on dbcli:master**.

Looks good. 

:seedling: 
",2015-10-26 22:19:40,2015-10-27 10:50:01
799,399,"I'm not sure if there is a configurable setting to fix this but the default is insanely bad. Scrolling up I have dozens of screens that look like this (when using arrow keys to horizontal scroll the warped columns, which essential destroys the ability to scroll up and see query history). 

<img width=""1680"" alt=""screen shot 2015-10-26 at 4 59 20 pm"" src=""https://cloud.githubusercontent.com/assets/10236920/10724939/27786b16-7c03-11e5-94c5-2d07bb6594a6.png"">
","Pager breaks cli history with wide output? 
It is configurable. 

`pgcli` will honor your `$PAGER` env variable. So you can launch pgcli as follows: 

`PAGER=cat pgcli`

That sets the PAGER env var to `cat`. Which will pipe the output through `cat` instead of `less`, which would solve the history scrollback. 

Alternatively, you can set PAGER to `more` to still keep some of the functionality of scrolling but it won't do horizontal scrolling. 

Thanks for the response. The problem isn't the horizontal scrolling in less, it's that the less output is written to the same display as the pgcli repl. If you run `psql` with the same settings (using PAGER=less) the output is contained in a separate display and is hidden after the user exists less (likewise ipython %edit magic etc.). 

<img width=""1680"" alt=""screen shot 2015-10-26 at 5 26 12 pm"" src=""https://cloud.githubusercontent.com/assets/10236920/10725395/c05ddd5e-7c06-11e5-9966-43a76529b8ab.png"">
<img width=""1680"" alt=""screen shot 2015-10-26 at 5 26 34 pm"" src=""https://cloud.githubusercontent.com/assets/10236920/10725399/c841297c-7c06-11e5-9246-e9f079c85228.png"">

Yes. I chose a specific set of `less` [options](https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L432) to make it behave the way it does right now. I completely understand that this won't be desirable to everyone. 

I'll take that into consideration for the future release and provide a way to override that behavior. 

@amjith aren't the less defaults (`SXRF`) not being applied there? Would something like this fix it (let me know if I'm misunderstanding something): 

```
def adjust_less_opts(self):
    less_opts = os.environ.get('LESS', '-SRXF')
    return less_opts
```

The code as it is now, reads the current value set in `LESS` env var and stores it away. Then overrides the `LESS` env var by setting it to `-SRXF`. The reason I store it away is because I want to restore it to the original value chosen by the user upon exit. Done here: https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L427

The reasoning behind this decision is that an average user is unlikely to have set their `LESS` env var to a specific value.

So pgcli tries to set some sane values for LESS options. This has served well up until now.

Your suggested correction is a good compromise. It won't stomp the user value (assuming the user has deliberately set it to their choosing). 

Would you mind making that a PR? 

I made a patch https://github.com/pik/pgcli/commit/ad6687fafde13ee5a13d20c86b04f1e27da682ae - but I am reconsidering it's usefulness now -- primarily because less will function somewhat differently within pgcli than it does on terminal. 

I guess there are two issues here: One is custom less flags which atm can be configured using `\pager less <custom_flags>` but could use a permanent home. And the other is sanely displaying both multi-screen (horizontally non-fitting output) and regular output along with session history. 

Looking at how psql handles this when a pager is configured -- it seems they use a native print (?) for lines that fit the screen and switch to the pager when the output does not fit the screen; less when run without `-X` will hide the output when it returns to the prompt -- which I find quite a bit more sane, since their way of reprinting the view on each horizontal scroll is really quite broken. Unfortunately it does not seem possible (if there is some shell magic I'm missing for this it would be good to know) to selectively trigger `-X` (e.g. only `-X` if `-F` was triggered, so results that fit into one screen can still be displayed). 

Still, following psql it would be nice to offer an output option based on whether the lines exceed terminal length or not -- e.g. there could be a config option such as `PAGE_EXCEEDING_MAX_WIDTH_ONLY` -- in which case perhaps pgcli could do something like this: 

```
terminal_size = shutil.get_terminal_size()
if terminal_size and terminal_size.columns > len(max(output[0].split('\n'))):
    click.secho('\n'.join(output))
else:
    click.echo_via_pager('\n'.join(output))
```

I'm not sure I entirely follow your request. So let me rephrase it to see if I understand it correctly. 

You'd like to show the output via `less` but in a different screen so whenever you press `q` it will clear the screen.

I think that can be achieved using the `-c` flag. 

One of the advantages of rewriting pgcli from scratch is I don't have to recreate the mistakes made by psql. So I don't think following psql behavior in using a custom display for short lines and pager output for long lines is a good approach.

I think it will always clear if you don't use the `-X` flag? 

> So I don't think following psql behavior in using a custom display for short lines and pager output for long lines is a good approach.

The thing is that while having visible output in a session is very useful, the way less reprints horizontally scrolled output makes viewing prior history in a session nearly impossible that is to say I would prefer to hide it in those specific cases. (I'm not saying this should be a default behaviour but it would be quite nice to have that option). 

> the way less reprints horizontally scrolled output makes viewing prior history in a session nearly impossible

Ah, got it. That was introduced by the `-S` flag. If you don't include that then you won't get the horizontal scrolling. 

I think I'm doing a very bad job explaining, sorry - the table formatting will break if you wrap the lines and the horizontal scroll is quite useful - the problem is what happens to the session when the less output stays in pgcli - I've uploaded a gif which hopefully helps
![pgcli_horizontal_scroll](https://cloud.githubusercontent.com/assets/10236920/10733805/3e2f1188-7c3b-11e5-92a3-8429dc4d4a98.gif)

I finally get what you're saying. A picture is indeed worth a thousand words. :)

Let me summarize it. If the output fits in the screen (horizontally) then show the output in the screen and keep it there. If the output is wider than the screen then use the separate screen and clear the screen when the user quits the pager. Is that an accurate assessment? 

If so, it can be achieved by setting the less options to -RXF when the output fits the screen, when the output doesn't fit the screen then use -SRF and omit the '-X' is that right? 

I believe that is possible. Because we recently implemented `\x auto` [feature](https://github.com/dbcli/pgcli/pull/359) which will detect if the output fits in the screen horizontally and switches to expanded mode output if it doesn't fit the screen. We can use the same logic to determine which less options to use in each case. 

I'm still having this problem the problem in the gif in https://github.com/dbcli/pgcli/issues/399#issuecomment-151178894 ; each time I scroll horizontally in paged output, the output gets ""stuck"" into the scrollback, unlike psql where closing the paged output makes it disappear entirely. I have `\x auto` on, but I'd still like to be able to scroll horizontally in cases.
@blendmaster You'll want to remove the `-X` flag from your LESS environment variable:

```bash
$ export LESS=""-SRF""
```

Then give it a try :)

If you want the change to be permanent, you'll want to put that line in your `.bashrc` or `.zshrc` file.
Hmm, no luck with explicitly setting LESS, even on an empty `/bin/sh` profile, just in case anything was weird about my zsh setup.

 ```
$ pgcli --version
Version: 1.6.0
$ python --version
Python 2.7.12
$ python3 --version
Python 3.5.2
$ less --version
less 481 (GNU regular expressions)
$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION=""Ubuntu 16.04.2 LTS""
```

the pager within psql works fine still.


@blendmaster Ah, my bad, I forgot that pgcli overrides `LESS`. I'm sorry about that! We'll see what we can do to fix this.

@amjith @j-bennet Do you think we should make it like mycli where it only overrides `LESS` if it doesn't exist?
Yes. I think we should use the LESS var if it's available.

My bad for forcibly overriding it in the code. 😞 
I had a PR that fixed this (amongst other things awhile ago) https://github.com/dbcli/pgcli/pull/409

Personally I've given up on using pgcli and went back to psql, because the display of output is incredibly bad for a number of common cases (this is just one of them) and there doesn't seem to be much interest in getting it fixed. 
@pik I'm sorry you felt discouraged by the output. We are making progress in that front. I did steal many of the ideas from your PR and integrated it into pgcli. I'm sorry I couldn't merge in the full PR as it stood. 

We will be making the pager configurable by the user and not override the LESS variable if set by the user. I know @tsroten recently made that change to mycli which we plan on porting over to pgcli. 

I completely understand that pgcli didn't measure up to your expectation and you had to go back to psql. I wouldn't mind learning about the common cases where it failed to display the output appropriately. 
I'm closing this, because we do not force a specific PAGER and LESS anymore.",2015-10-26 09:02:24,2019-05-05 15:12:10
800,398,"It's possible I broke something, I don't know the codebase.
","Fix indentation problems with ""explain"". Seems to solve #313.
[![Code Health](https://landscape.io/badge/240300/landscape.svg?style=flat)](https://landscape.io/diff/227181)
Code quality remained the same when pulling **[e4bea29](https://github.com/d33tah/pgcli/commit/e4bea29ed2937d9740816d59a1e47a43f0a0311d) on d33tah:master** into **[d7b1e5e](https://github.com/dbcli/pgcli/commit/d7b1e5eb91b65d3807fbf921ae51898ce3973b14) on dbcli:master**.

[![Code Health](https://landscape.io/badge/240300/landscape.svg?style=flat)](https://landscape.io/diff/227181)
Code quality remained the same when pulling **[e4bea29](https://github.com/d33tah/pgcli/commit/e4bea29ed2937d9740816d59a1e47a43f0a0311d) on d33tah:master** into **[d7b1e5e](https://github.com/dbcli/pgcli/commit/d7b1e5eb91b65d3807fbf921ae51898ce3973b14) on dbcli:master**.

Do you have any reproducible test cases? 

Here's a simple one:

Before:

```
postgres> select '        abc' abc
+-------+
| abc   |
|-------|
| abc   |
+-------+
SELECT 1
```

After:

```
postgres> select '        abc' abc
+-------------+
| abc         |
|-------------|
|         abc |
+-------------+
```

So that's an improvement!

@amjith Why is tabulate.py vendored in again? If we start improving our own version we're going to need to start testing it

It was vendored in because I had to implement the `psql` format for it. It was merged in upstream but it wasn't released for a long time.

Since then we've made changes to it to accommodate various things such as replacing `None` with `<null>` which are pgcli specific and doesn't make sense to merge upstream. 

I'm open to adding tests for it. 

Would the tests be necessary for the change to be merged in?

@d33tah That's a good question. I don't think it is necessary, but its definitely a nice to have. 

But before we merge this, I'd at least like to test this PR with a bunch of different datatypes such as JSON, integers, floats, strings, strings with newline etc. 

So give us a day to go through the tests. 

@darikg might have a set to tests or items to check as well. 

@darikg You had asked for a reproducible example for indented output. 

You can use any join statement to see this behavior:

```
explain SELECT * FROM django_migrations m JOIN django_content_type c ON c.id = m.id;
```

psql:

```
                                     QUERY PLAN
------------------------------------------------------------------------------------
 Hash Join  (cost=1.61..3.25 rows=27 width=1702)
   Hash Cond: (m.id = c.id)
   ->  Seq Scan on django_migrations m  (cost=0.00..1.27 rows=27 width=1044)
   ->  Hash  (cost=1.27..1.27 rows=27 width=658)
         ->  Seq Scan on django_content_type c  (cost=0.00..1.27 rows=27 width=658)
(5 rows)
```

pgcli:

```
+----------------------------------------------------------------------------+
| QUERY PLAN                                                                 |
|----------------------------------------------------------------------------|
| Hash Join  (cost=1.61..3.25 rows=27 width=1702)                            |
| Hash Cond: (m.id = c.id)                                                   |
| ->  Seq Scan on django_migrations m  (cost=0.00..1.27 rows=27 width=1044)  |
| ->  Hash  (cost=1.27..1.27 rows=27 width=658)                              |
| ->  Seq Scan on django_content_type c  (cost=0.00..1.27 rows=27 width=658) |
+----------------------------------------------------------------------------+
EXPLAIN
```

Notice the absence of indentation on last line.

@darikg: Added a commit related to your comment.

@d33tah A test would be great. It will help ensure that future changes to tabulate don't break this behavior. Here's one to get started -- just copy it to a file `test_tabulate.py` in the `tests` directory.

```
from pgcli.packages.tabulate import tabulate
from textwrap import dedent


def test_dont_strip_leading_whitespace():
    data = [['    abc']]
    headers = ['xyz']
    tbl, _ = tabulate(data, headers, tablefmt='psql')
    assert tbl == dedent('''
        +---------+
        | xyz     |
        |---------|
        |     abc |
        +---------+ ''').strip()
```

I think that would be more than enough for now, since its our first test for tabulate.

@darikg: Test added, see commit message.

[![Code Health](https://landscape.io/badge/240716/landscape.svg?style=flat)](https://landscape.io/diff/227591)
Code quality remained the same when pulling **[74c67a6](https://github.com/d33tah/pgcli/commit/74c67a6dc619d5da6dbff67c1679859c3ac26281) on d33tah:master** into **[d7b1e5e](https://github.com/dbcli/pgcli/commit/d7b1e5eb91b65d3807fbf921ae51898ce3973b14) on dbcli:master**.

Thanks @d33tah! You can see from the green ""All checks have passed"" indicator that all the tests passed.

Also, it looks like explain plans are printing correctly now:

```
test> explain select * from foo join bar on foo.xx = bar.z
+--------------------------------------------------------------------+
| QUERY PLAN                                                         |
|--------------------------------------------------------------------|
| Merge Join  (cost=285.12..606.19 rows=20758 width=20)              |
|   Merge Cond: (foo.xx = bar.z)                                     |
|   ->  Sort  (cost=135.34..140.19 rows=1940 width=12)               |
|         Sort Key: foo.xx                                           |
|         ->  Seq Scan on foo  (cost=0.00..29.40 rows=1940 width=12) |
|   ->  Sort  (cost=149.78..155.13 rows=2140 width=8)                |
|         Sort Key: bar.z                                            |
|         ->  Seq Scan on bar  (cost=0.00..31.40 rows=2140 width=8)  |
+--------------------------------------------------------------------+
EXPLAIN
```

I'll leave this open for the rest of the day in case anyone has some other ideas for tabulate behavior to test for. It seems good to me though. 

@darikg: https://travis-ci.org/dbcli/pgcli/jobs/87343667 - where in this build log do we have a confirmation that the test was run?

Scroll down to this:

```
tests/test_completion_refresher.py ....
tests/test_expanded.py .
tests/test_function_metadata.py ......
tests/test_fuzzy_completion.py ..
tests/test_main.py ...
tests/test_naive_completion.py ....
tests/test_parseutils.py ................X........................................
tests/test_pgexecute.py ................ssss...................................................................
tests/test_pgspecial.py ...........
tests/test_smart_completion_multiple_schemata.py ..................
tests/test_smart_completion_public_schema_only.py ...............................
tests/test_sqlcompletion.py ............................................................x..................................................................
tests/test_tabulate.py .
```

You can see a single dot after test_tabulate.py. That's the single test in that file passing

Ah, pardon, missed it. Thanks.

:+1: 

Tested it with various datatypes and satisfied with the change. 

:mushroom: 

Why :mushroom: ? :D

I like leaving random emojis to show my appreciation for your contribution. 

Mushroom == PowerUp

Super Mairo reference. :smile: 
",2015-10-24 16:12:06,2015-10-26 02:57:35
801,397,"@darikg Can you please check this PR on Windows and merge? 
","Make setproctitle optional in Windows
[![Code Health](https://landscape.io/badge/239702/landscape.svg?style=flat)](https://landscape.io/diff/226599)
Code quality remained the same when pulling **[cc7b9d2](https://github.com/dbcli/pgcli/commit/cc7b9d2d56ea453a06f2dcf1ffff320f9b8c47a5) on dbcli:amjith/optional-setproctitle** into **[d9c62b0](https://github.com/dbcli/pgcli/commit/d9c62b0925023ce3f255113dd22d615c94a71a05) on dbcli:master**.

lgtm
",2015-10-23 09:50:56,2015-10-23 12:55:37
802,396,"Here's what I just noticed:

```
+----------+
|    count |
|----------|
| 12237922 |
+----------+
SELECT 1
Time: 152.868s
```

Making it `humanize.time.naturaldelta(t) + (miliseconds) + ""miliseconds""` would be much more readable. What do you think about it?
","Humanize time display?
I decided to settle on seconds as the default units because changing it between milliseconds, seconds and minutes will make it hard to compare them. 

For example, when someone runs a query and sees that it takes 1.5seconds then they optimize it somehow to make it run in 0.9s it'll be good to see 0.9 instead of 900ms. 

It adds a bit of cognitive overload to convert them between units.

So it was a conscious decision to keep it consistent. Does that answer your question? 

You could keep both. I once wrote a private patch for psql that adds ""humanized"" time information next to the milisecond count. Having a uniform unit is nice unless you're going to read how many hours the query took based on the number of seconds. I tend to run long-running queries in PostgreSQL quite often.

This was implemented and merged.
",2015-10-22 23:05:35,2016-06-19 21:37:29
803,395,"As discussed in #382. Split the RESUME, STOP, RAISE on_error enum into two separate input arguments: `exception_formatter`, a callable that accepts an Exception and returns a (title, rows, headers, status) tuple as if it were a valid query result, and `on_error_resume`, a boolean. If you want `pgexecute.run` to always raise an exception, simply don't supply an `exception_formatter`.

It occurs to me now that the input arguments `on_error_resume` and `exception_formatter` could be moved to instance variables of `pgexecute` instead being being function arguments but that seems like mostly a matter of taste so I'll leave it open for discussion first.
","Tweak on error options
[![Code Health](https://landscape.io/badge/239380/landscape.svg?style=flat)](https://landscape.io/diff/226317)
Repository health decreased by 0.27% when pulling **[a97138e](https://github.com/dbcli/pgcli/commit/a97138ec707fc59981b5246dd4df50bd4a9fe7c8) on darikg/refactor-on-error-options** into **[d9c62b0](https://github.com/dbcli/pgcli/commit/d9c62b0925023ce3f255113dd22d615c94a71a05) on master**.
- [3 new problems were found](https://landscape.io/diff/226317) (including 0 errors and 2 code smells).
- [1 problem was fixed](https://landscape.io/diff/226317/fixed) (including 0 errors and 0 code smells).

[![Code Health](https://landscape.io/badge/239499/landscape.svg?style=flat)](https://landscape.io/diff/226439)
Repository health increased by 0.02% when pulling **[c8c582a](https://github.com/dbcli/pgcli/commit/c8c582ab4a3b94153128fb491d1e0ed07a90df74) on darikg/refactor-on-error-options** into **[d9c62b0](https://github.com/dbcli/pgcli/commit/d9c62b0925023ce3f255113dd22d615c94a71a05) on master**.
- [1 new problem was found](https://landscape.io/diff/226439) (including 0 errors and 0 code smells).
- [1 problem was fixed](https://landscape.io/diff/226439/fixed) (including 0 errors and 0 code smells).

This is very close to perfection. 

Summary of the comments I've left inline: 

The `exception_formatter` is an optional function that let's you go above and beyond with the exception format, in the default case we should format the exception using `repr` so it returns the default representation of exception.

We should not overload the meaning of `exception_formatter` to decide whether to raise an exception or not. That behavior is controlled by the `on_error_resume` boolean. 

I don't agree with making on_error_resume=False raise exceptions for a couple of reasons. The main one is that flipping the boolean requires completely rewriting the call site.

Compare:

`results = list(executor.run(sql, on_error_resume=True, ...))`

vs

```
results = []
try:
    for r in executor.run(sql, on_error_resume=False, ...):
        results.append(r)
except psycopg2.DatabaseError as e:
    results.append((None, None, None, str(e))
```

Doesn't that seem extreme? It's even weirder with the exception formatter argument.

```
results = []
try:
    for r in executor.run(sql, on_error_resume=False,
                                    exception_formatter=my_exception_formatter):
        results.append(r)
except psycopg2.DatabaseError as e:
    # Even though we supplied an exception formatter to the run function, it's
    # not used and we need to apply it ourselves
    results.append((None, None, None, my_exception_formatter(e))
```

> Also using the presence of exception_formatter to determine whether or not to raise is not very explicit and it's not self documenting.

The default value of exception_formatter is None, so the default behavior is 'if an error occurs, raise an exception' which I think is very much in the spirit of the zen of python (Errors should never pass silently.    Unless explicitly silenced.) The user has to explicity choose how to silence them. We could certainly rename `exception_formatter` to `exception_handler` instead if that seems more self-documenting.

> The main one is that flipping the boolean requires completely rewriting the call site.

I actually think the other way around. Take our existing scenario in pgcli. We currently do the following in main.py (which is the call site). 

```
res = pgexecute.run(document.text, self.pgspecial, exception_formatter, on_error_resume)
```

We're going to provide the user with an option to switch the on_error behavior at runtime. So when they switch from STOP to RESUME, we have to change two variable `on_error_resume` to `False` and `exception_formatter` to `None`. 

The examples you showed me were extreme cases. The second snippet with the `try .. except` clause will be the normal use case if we want to provide the user with the ability to switch from one mode to another. 

I prefer to have one variable to be the deciding authority of mode.

> We're going to provide the user with an option to switch the on_error behavior at runtime. So when they switch from STOP to RESUME, we have to change two variable on_error_resume to False and exception_formatter to None.

Ok, we have a miscommunication somewhere, because this is not correct. Only on_error_resume has to change -- exception_formatter remains the same. Regardless of the value of on_error_resume, exception_formatter is used to make a 'nice' result. The only difference in behavior is whether subsequent queries are run. 

You're right there is a miscommunication (or a misunderstanding). 

I'm operating under the assumption that I would like pgexecute to only have two modes of behavior. Those modes are 'RESUME' and 'STOP'. In the 'STOP' mode whenever an error is encountered it will raise an exception, which will serve as a way to stop execution and the rest of the statements won't be executed because an exception is thrown. 

In the 'RESUME' mode whenever an error is encountered, we will use an exception_formatter to prettify the error and continue executing the rest of the commands. If exception_formatter is not provided then we will use 'repr' as the default exception_formatter.

But I believe you're working under the assumption that even during the STOP mode pgexecute will format the exception and return a predictable tuple, so main.py doesn't have to deal with exceptions. Is that correct? If so, that doesn't solve our problem that I raised originally where the `success` variable in main.py is always set to true since we swallow the exception in pgexecute. 

That's a fair assessment, thanks.

But in either my version or yours I don't see how the `success` variable is handled properly in the on_error_resume=True case. Really the semantics of a single boolean representing the result of a multi-query are ill-defined. It might be better to have an array of booleans so we could distinguish `not all(successful)` versus `any(not successful)`

You are right. We can't do it with a single boolean. 

But it also requires a much bigger refactor because we're currently saving off the entire multi-statment if it was successful. https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L420

So I want to step back and analyze the use cases for this. 
1. This is used by the ipython integration to decide whether to save the query or not. We need a single boolean for that (perhaps `all(successful)`).
2. We need to decide if we have to do a completion refresh. This needs a more granular control, where we check to see if an `ALTER` or `DROP` or `CREATE` statement was successful or not and kick off the completion refresh. Although one could argue that kicking off the completion even if the statement is unsuccessful doesn't hurt anything. 

The only scenario in which we will run into a problem is if the user decides to do `select * from table1; \c database2; select * from table2`. In that case we absolutely must know whether the `\c` command in the middle was successful or not, because if it is successful, then we need to drop the existing completion data-structures and then kick off a new completion refresh in the background.

Resetting the existing data-structures is only done when the user changes databases, if we don't reset it, pgcli will continue to suggest older database completions while the new refresh is happening in the background. If the command was not successful and we preemptively reset the datastructures, then until the newly kicked off refresh is done, there won't be any suggestions.

So it is safe to say this needs a fair bit of overhauling to get it right. 

Yeah. Let's try to get _#_2 right first, and then figure out the ipython stuff. 

My first thought is increase the tuple returned by `run` to include a `success` boolean. (I think you suggested this already earlier on in the PR). Since `run` is splitting the sql, we might as well also return the split statement, so we don't need to resplit outside of `run`. So as a gross sketch we'd have something like

```
db_changed = False
needs_refresh = False
results = executor.run(document.text, ...)
for title, cur, headers, status, success, sql in results:
    db_changed = db_changed or (success and has_db_change_cmd(sql))
    needs_refresh = needs_refresh or (success and has_mutating_cmd(sql))
    ...
```

Does that make sense?

Yup. That sounds good to me.

I've updated this to reflect our latest round of discussion. I ended up refactoring 'pgcli.run_cli' into a couple extra submethods which I think was an improvement in readability.

[![Code Health](https://landscape.io/badge/241844/landscape.svg?style=flat)](https://landscape.io/diff/228542)
Repository health decreased by 0.02% when pulling **[2ac592b](https://github.com/dbcli/pgcli/commit/2ac592b88f2d485498087093d34650f3640d040c) on darikg/refactor-on-error-options** into **[203c1e9](https://github.com/dbcli/pgcli/commit/203c1e939e40fe2da6dbfde3d0f3e92f750315a7) on master**.
- [4 new problems were found](https://landscape.io/diff/228542) (including 1 error and 1 code smell).
- [4 problems were fixed](https://landscape.io/diff/228542/fixed) (including 1 error and 1 code smell).

Big thumbs up on breaking run_cli into smaller functions.

Can you rebase? Looks like there are merge conflicts. 

rebased

[![Code Health](https://landscape.io/badge/242831/landscape.svg?style=flat)](https://landscape.io/diff/229423)
Repository health increased by 0.01% when pulling **[7adaa49](https://github.com/dbcli/pgcli/commit/7adaa498b294059ea9e2e7aa7070feb9876bf161) on darikg/refactor-on-error-options** into **[7e59c06](https://github.com/dbcli/pgcli/commit/7e59c06568b38c092804e9054315b3e76e792365) on master**.
- [4 new problems were found](https://landscape.io/diff/229423) (including 1 error and 1 code smell).
- [4 problems were fixed](https://landscape.io/diff/229423/fixed) (including 1 error and 1 code smell).

Thank you!!

:lollipop: 

Congratulations @amjith @darikg, this is huge!
",2015-10-22 18:02:49,2015-10-28 19:42:52
804,394,"Here's output I got to a query:

```
+----------+
|    count |
|----------|
| 12353457 |
+----------+
SELECT 1
Command Time: 0.000s
Format Time: 0.002s
```

The thing is that after pressing return key, I keep waiting for a minute rather than zero seconds.
","Command run time wrong
Yes. This is a known issue that has been fixed in master. I'll be releasing the new version soon. In the meantime you can install directly from master using the following command: 

```
pip install https://github.com/dbcli/pgcli/archive/master.zip
```

`pip install -U https://github.com/dbcli/pgcli/archive/master.zip` didn't help.

That's surprising. Can you run:

```
select pg_sleep(2);
```

That should report ~2 seconds. Also there won't be separate `Command time` and `Format time` it is now consolidated to a single value. 

```
$ pgcli
Version: 0.19.2
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
dbname> select pg_sleep(2);
+------------+
| pg_sleep   |
|------------|
|            |
+------------+
SELECT 1
Command Time: 0.000s
Format Time: 0.000s
```

That's not using the pgcli from master.

I suspect that `pip` installed the latest version into a virtualenv or into a different location but the older version of pgcli still exists. So when you launch pgcli it is still launching the older version instead of the version in master. 

Can you tell me how you installed pgcli originally? You might want to try uninstalling it first. 

You were right. Uninstalling pgcli and installing it from master without the -U flag helped.
",2015-10-22 13:21:57,2015-10-22 14:27:23
805,393,"Here's what I entered to pgcli:
`select count(distinct col) from ohhai oh join omnomnom om on oh.id=om.`

After the dot, pgcli suggested ""om"" and ""oh"", but not ""omnomnom"" columns. Why is that?
","Autocompletion for joined table?
It should suggest columns from omnomnom as well. I just verified it on my machine. 

Can you give me some details? 

Such as, version of pgcli, version of postgres and maybe the output of `\d omnomnom`? 

```
dbname> \d omnomnom
+---------------+----------+-------------+
| Column        | Type     | Modifiers   |
|---------------+----------+-------------|
| omnm_entry_id | integer  |             |
| om_id         | integer  |             |
| detail        | smallint |             |
+---------------+----------+-------------+
Foreign-key constraints:
    ""omnomnom_om_id_fkey"" FOREIGN KEY (om_id) REFERENCES omnm_foreign(id)
    ""omnomnom_omnm_entry_id_fkey"" FOREIGN KEY (omnm_entry_id) REFERENCES omnm_entry(id)

Command Time: 0.000s
Format Time: 0.002s
```

```
dbname> select version();
+---------------------------------------------------------------------------------------------------------------+
| version                                                                                                       |
|---------------------------------------------------------------------------------------------------------------|
| PostgreSQL 9.3.5 on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 4.8.2 20140120 (Red Hat 4.8.2-16), 64-bit |
+---------------------------------------------------------------------------------------------------------------+
SELECT 1
Command Time: 0.000s
Format Time: 0.002s
```

And the pgcli version is the latest in PIP.

Also tested on latest `master`. As before, it only suggests `om` and `oh`.

I'm surprised that you only get `om` and `oh` after the dot. 

Here's a screen cap of me trying something very similar and I get the columns from each alias after the dot. 

![join_sample](https://cloud.githubusercontent.com/assets/49260/10671704/fe48e8b6-78a0-11e5-9cb2-9aff2b5babf6.gif)

Two differences: you're using more whitespace and you're using `JOIN aaaa a ON a.col1 = b.col1` while I'm using `JOIN aaaa a ON b.col1 = a.col1`. Perhaps it's one of those?

Confirmed it's because of the lack of whitespace. Investigating now.

@amjith the issue is `parseutils.last_word(text_before_cursor, include='many_punctuations')`, which doesn't break on the equals sign. It's easy to add the equals sign to the regex, but really all operators e.g. `<>` and `!~` should be in there as well.

@amjith by the way, which program do you use for recording the screen and converting it to gif? You might find https://asciinema.org/ a cleaner solution.

I'm using http://www.cockos.com/licecap/ to record my gif. 

I've heard of asciinema, but I haven't used it since I can't embed it into github or something similar. 

Related to this, it seems like pgcli doesn't autosuggest after the second table you join, meaning if you join t1, t2, and t3, you do not get suggestions for t3. Should this be the case? If not, I can provide a test case.

@jamiely you mean if you don't put whitespace around the join operator? Or more generally? A test case would be appreciated

@darikg Here's a video of me attempting it https://dl.dropboxusercontent.com/u/4073777/pgcli-issue33.mov.

Test case:

Postgres version: 9.4.5
pgcli: 0.20.1
1. Create a new database
2. Run the following creations:

``` sql

CREATE TABLE t1 (
  id int PRIMARY KEY,
  name varchar(10) );

CREATE TABLE t2 (
  id int PRIMARY KEY,
  name varchar(10),
  t1_id int);

CREATE TABLE t3 (
  id int PRIMARY KEY,
  name varchar(10),
  t2_id int);
```
1. Now attempt to enter the following query in pgcli with multiline enabled:

``` sql
select * from t1
inner join t2 ON
  t1.id = t2.t1_id
inner join t3 ON
  t2.id = t3.t2_id;
```

Note that autosuggest appears when writing the join statements for t1 and t2, but when we get to t3, autosuggest doesn't suggest ""t2_id"" nor any field for t3.

I have fixes for the original issue and also the bug that @jamiely reported incoming in the next couple days.

Awesome, thanks @darikg! 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-10-22 13:17:43,2016-06-29 03:50:00
806,392,"Installing on windows after #355 gives 

```
  Running setup.py install for setproctitle
    Complete output from command C:\Users\dg\Miniconda\envs\pgcli\python.exe -c ""import setuptools, tokenize;__file__='c:\\users\\dg\\appdata\\local\\temp\\pip-build-aa9gjz\\setproctitle\\setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record c:\users\dg\appdata\local\temp\pip-rj1x5r-record\install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_ext
    building 'setproctitle' extension
    error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from http://aka.ms/vcpython27
```

Which is a little unfortunate
","Make setproctitle optional
> Which is a little unfortunate

A little unfortunate? That's a huge inconvenience. I'm considering reverting the change. 

Is the feature even applicable in Windows? 

@darikg When you run the old version of pgcli (0.19.2) how does it show up in the Task Manager? Does the password show up in clear text?

If it doesn't we can make that package optional in Windows and not do the proc title rewriting. 

Good point. It looks like it just shows up as `pgcli.exe` so there's no need to play with the process title at all.

Fix released in 0.20.0. 

Please upgrade:

```
pip install -U pgcli
```

Can we really make `setproctitle` optional, not just on windows? For me the trouble was needing gcc in a sterile linux environment. I would open a new issue, but the request is the same, make `setproctitle` optional.

As possible solutions, I would either add it in [an extra][1] or, if including it by default is necessary, look into adding an option to disable it during installation (e.g using an environment variable such as `NO_SETPROCTITLE=1` which would also exclude it from requirements.

[1]: http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies",2015-10-21 20:24:08,2015-11-01 09:08:02
807,391,"Reviewer: @stuartquin 

Related to #369. 

Check for the headers before using expanded mode when `\x auto` is enabled.
","Check for headers in \x auto mode.
[![Code Health](https://landscape.io/badge/237254/landscape.svg?style=flat)](https://landscape.io/diff/224525)
Code quality remained the same when pulling **[eb209e2](https://github.com/dbcli/pgcli/commit/eb209e260265f4747378214ba1aa9d6579e3639e) on dbcli:amjith/x-auto-headers** into **[b3e109d](https://github.com/dbcli/pgcli/commit/b3e109d5185381f3a000fa8397c55c5f38a7bda0) on dbcli:master**.

Good spot :+1: 
",2015-10-19 13:20:04,2015-10-19 17:45:43
808,390,"@darikg Can you review and merge? 

I'd like to set the default to STOP since that is the conservative (aka ""sane"") option. 
","Change the on_error default value to STOP.
[![Code Health](https://landscape.io/badge/237216/landscape.svg?style=flat)](https://landscape.io/diff/224486)
Code quality remained the same when pulling **[78e3204](https://github.com/dbcli/pgcli/commit/78e3204eb2b4cc5702cc774a10fea6740a089e72) on dbcli:amjith/on_error-default** into **[b3e109d](https://github.com/dbcli/pgcli/commit/b3e109d5185381f3a000fa8397c55c5f38a7bda0) on dbcli:master**.

:+1: for sane defaults
",2015-10-19 12:37:20,2015-10-19 14:39:13
809,389,"I've got a function written in such syntax:

```
CREATE OR REPLACE FUNCTION testfunction() RETURNS VOID AS
$$
BEGIN

END
$$ LANGUAGE 'plpgsql';
```

Whenever I paste it into `psql` it works:

```
psql (9.2.4, server 9.4.4)
WARNING: psql version 9.2, server version 9.4.
         Some psql features might not work.
Type ""help"" for help.

postgres=# CREATE OR REPLACE FUNCTION testfunction() RETURNS VOID AS
postgres-# $$
postgres$# BEGIN
postgres$# 
postgres$# END
postgres$# $$ LANGUAGE 'plpgsql';
CREATE FUNCTION
postgres=# 
```

But in `pgcli` it doesn't:

```
postgres> CREATE OR REPLACE FUNCTION testfunction() RETURNS VOID AS$$BEGINEND$$ LANGUAGE 'plpgsql';
syntax error at or near ""AS$$BEGINEND$$""
LINE 1: ...E OR REPLACE FUNCTION testfunction() RETURNS VOID AS$$BEGINE...
                                                             ^
Command Time: 0.000s
Format Time: 0.000s
```
","[BUG] Pasting doesn't work in some cases
@disconnect3d What you're pasting is a multi-line query. pgcli by default is not in multi-line mode. You can switch to multi-line mode using `F3` key or you can set it permanently by editing your config file ~/.pgclirc to set `multi_line = True`. 

After you enable the multi-line mode you can paste the function without problem. 

Good to know, thanks!

Could we warn users who paste something with a lot of newline characters, that there is such option?

EDIT: I am not sure, but we probably should change the issue name to 'Warning users about multi_line mode when they paste a lot of newline characters' and mark it as a feature request.

If you have thoughts on how to warn users, I'm all ears. Originally when I started pgcli, it was designed as an exploratory tool for running quick commands by hand. Then slowly it grew as a drop in replacement for psql. So I had made a choice to make multi-line mode disabled by default.

I can always enable the multi-line mode in the future releases, so it matches psql's behavior more closely. 

/cc @dbcli/pgcli-core I'd like your thoughts on this please.

Is it possible to automatically detect newlines, switch to multiline mode, paste, then switch back to single line mode? 90% of the time the user is going to press enter immediately anyway so it seems like this would be pretty convenient

I don't know of a good way to detect when a user is pasting vs typing. I believe that as far as prompt_toolkit is concerned, you're entering one character at a time whether it is being pasted or typed in. So differentiating the enter key would be difficult (if not impossible). 

/cc @jonathanslenders Can you think of a way to auto-detect when a user is pasting? 

No, we can't detect that. When you paste in the terminal, using for instance command+V or Ctrl+Shift+V, the terminal application sends whatever is on the clipboard to the stdin of the application. That is exactly the same as what it does when the user types on the keyboard.

We could of course measure the speed at which characters come in. Nobody is able to type 100 characters in a fraction of a second, but I don't like this kind of guess work. There is a reason why Vi has a paste mode.

A few months back, I have been working on system clipboard integration. That is possible, but I never did extensive testing. Try this: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/examples/system-clipboard-integration.py
Personally, I think not enough users know the Emacs or Vi shortcuts for copy/pasting at the command line for doing this.

Jonathan

Ok, another case - pasting in multiline mode changes the indentation - which might break compilation whenever the function is written in PLPythonU:

The function:

```
CREATE OR REPLACE FUNCTION aaa() RETURNS VOID AS
$$
    y = 1
    x = [
        1, 2, 3
    ]
$$ LANGUAGE 'plpythonu';
```

pgcli:

```
postgres> CREATE OR REPLACE FUNCTION aaa() RETURNS VOID AS
          $$
              y = 1
                  x = [
                          1, 2, 3
                              ]
                              $$ LANGUAGE 'plpythonu';
could not compile PL/Python function ""aaa""
DETAIL:  IndentationError: unexpected indent (<string>, line 4)

postgres> 
```

psql:

```
psql (9.2.4, server 9.4.4)
WARNING: psql version 9.2, server version 9.4.
         Some psql features might not work.
Type ""help"" for help.

postgres=# CREATE OR REPLACE FUNCTION aaa() RETURNS VOID AS
postgres-# $$
postgres$#     y = 1
postgres$#     x = [
postgres$#         1, 2, 3
postgres$#     ]
postgres$# $$ LANGUAGE 'plpythonu';
CREATE FUNCTION
postgres=# 
```

Have a look at this key binding: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/key_binding/bindings/basic.py#L163

Pressing enter will copy the margin from the previous line, unless paste mode is on. (https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/application.py#L86)

You may either want to add a paste mode shortcut like ptpython, or override this key binding.
Probably I should give a ""Buffer"" class an auto_indent option as well. (What is the Vi name for this?)

Thanks for the tip @jonathanslenders. I think I want to convert the keybinding to not copy the previous margin but always add a constant margin. That way people realize it's still part of the previous command but not keep inserting the space. 

Hello, me again.

Once @jonathanslenders wrote that you can't detect whenever user is pasting something.
I heard today, that this is what Neovim does whenever you paste something (it detects it, sets paste mode and paste the clipboard) and that this feature is done thanks to ""bracketed paste mode"":
- http://cirw.in/blog/bracketed-paste
- https://github.com/neovim/neovim/issues/937
- http://www.xfree86.org/current/ctlseqs.html#Bracketed%20Paste%20Mode

As stated on the last url, to enable this mode you have to send special sequence to the terminal:

```
P s = 2 0 0 4 → Set bracketed paste mode.
```

@disconnect3d,

Wow! Thanks a lot for this! I was totally unaware of bracketed paste mode. It should be easy to implement.

To spare you fiddling, control sequences are `sys.stdout.write('\x1b[?2004h')` for enabling and `sys.stdout.write('\x1b[?2004l')` for disabling.

@disconnect3d @mrzechonek @amjith: Thanks everyone: prompt-toolkit has now support for bracketed paste.

See this commit:
https://github.com/jonathanslenders/python-prompt-toolkit/commit/623648bad28de69cf90f833203bd6d0449afcc79

Pasting of big chunks is now about 10x or more faster and indentation is not destroyed anymore.

:heart: 

It seems this bracketed paste mode usage isn't working when [pasting from tmux through vim-slime](https://github.com/jpalardy/vim-slime/issues/169#issuecomment-463067983).",2015-10-19 12:29:49,2015-11-18 13:18:12
810,388,"Reviewer: @j-bennet 

This is a corner case scenario in the background completion refresh. When a user changes to a new database using `\c` and the completion is happening in the background, we still retain the tables and views from the old database and the completion suggestions show old database entries. 

This PR will address this by resetting the completion data-structure before triggering the completion refresh. 
","Reset completions when database is changed.
[![Code Health](https://landscape.io/badge/236979/landscape.svg?style=flat)](https://landscape.io/diff/224282)
Repository health increased by 0.13% when pulling **[51955c0](https://github.com/dbcli/pgcli/commit/51955c0604ef78eaf6844caeaf50b99d0e1755b1) on amjith/completion-refresh-cornercase** into **[b3e109d](https://github.com/dbcli/pgcli/commit/b3e109d5185381f3a000fa8397c55c5f38a7bda0) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/224282/fixed) (including 0 errors and 1 code smell).

Thinking about a corner case for your corner case: user says ""\c non_existent_db_name"". Sqlparse won't hiccup because it's valid sql. Database, however, won't be changed.

Am I overthinking it?

Nope. That's a valid case. I'll fix that. 

[![Code Health](https://landscape.io/badge/237790/landscape.svg?style=flat)](https://landscape.io/diff/225019)
Repository health increased by 0.13% when pulling **[01ce072](https://github.com/dbcli/pgcli/commit/01ce072c8dbb7cc07a2712d8e2923d13d0fd75b9) on amjith/completion-refresh-cornercase** into **[b3e109d](https://github.com/dbcli/pgcli/commit/b3e109d5185381f3a000fa8397c55c5f38a7bda0) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/225019/fixed) (including 0 errors and 1 code smell).

Looks good. Going to merge.

I should have left a comment that it is incomplete.

It doesn't fix the issue because pgexecute is not raising exceptions for failed queries anymore. 

I started a discussion in one of the closed PRs about what to do about it. 

ref: #382 

Yikes.

Shall I revert?

Nope. No need to revert. We'll roll with it. :smiley: 
",2015-10-19 02:50:51,2015-10-20 16:15:37
811,387,"Hi Guys

First draft at solving https://github.com/dbcli/pgcli/issues/355
Would be good to get some feedback on the approach, particularly the regex's

One thing this doesn't cover is entries in shell history file, will do some research on this.
","Issue #355 Use setproctitle to hide command line passwords
[![Code Health](https://landscape.io/badge/236874/landscape.svg?style=flat)](https://landscape.io/diff/224187)
Code quality remained the same when pulling **[748fcb7](https://github.com/dbcli/pgcli/commit/748fcb76778b618d232b1c829f72d4ef65392441) on dbcli:stuartquin/hide-commandline-password** into **[b3e109d](https://github.com/dbcli/pgcli/commit/b3e109d5185381f3a000fa8397c55c5f38a7bda0) on dbcli:master**.

[![Code Health](https://landscape.io/badge/237437/landscape.svg?style=flat)](https://landscape.io/diff/224697)
Code quality remained the same when pulling **[eea0cbd](https://github.com/dbcli/pgcli/commit/eea0cbd495e4cb0ba5ab49af968377e290e1ee27) on dbcli:stuartquin/hide-commandline-password** into **[b3e109d](https://github.com/dbcli/pgcli/commit/b3e109d5185381f3a000fa8397c55c5f38a7bda0) on dbcli:master**.

Thanks for addressing this. :cherries: 
",2015-10-18 20:58:46,2015-10-19 18:54:46
812,386,"This is gonna be a tough one to describe, here it goes.

(completely made up table modeled after the real thing)

```
| Column           | Type                   | Modifiers   |
|:-----------------|:-----------------------|:------------|
| col1             | integer                |             |
| col2             | character varying(126) |             |
| col3             | character varying(6)   |             |
| col4             | character varying(126) |             |
| col5             | character varying(126) |             |
| col6             | hstore                 |             |
| col7             | integer                |             |
| col8             | hstore                 |             |
| col9             | hstore                 |             |
| col10            | character varying(126) |             |
| col11            | character varying(126) |             |
| col12            | character varying(30)  |             |
| col13            | character varying(60)  |             |
| col14            | integer                |             |
| col15            | integer                |             |
| col16            | character varying(64)  |             |
| col17            | character varying(64)  |             |
| col18            | hstore                 |             |
```

Below we can see timing from selecting one row. ( I quickly up arrowed to select now(), not really scientific)

```
dev> select now() ; SELECT * from madeup_table where col2 = 'something';
| now                              |
|:---------------------------------|
| 2015-10-17 16:23:38.259729-07:00 |
SELECT 1
##### one row #####
SELECT 1
Command Time: 0.000s
Format Time: 0.002s
dev> SELECT now();
| now                              |
|:---------------------------------|
| 2015-10-17 16:23:48.261489-07:00 |
SELECT 1
Command Time: 0.000s
Format Time: 0.000s
```

10 seconds (+- for operator lag), meanwhile with \x

```
dev> select now() ; SELECT * from madeup_table where col2 = 'something';
-[ RECORD 0 ]-------------------------
now | 2015-10-17 16:51:30.175125-07:00

SELECT 1
-[ RECORD 0 ]-------------------------
##### one row #####
SELECT 1
Command Time: 0.000s
Format Time: 0.000s
dev> SELECT now();
-[ RECORD 0 ]-------------------------
now | 2015-10-17 16:51:31.385367-07:00

SELECT 1
Command Time: 0.000s
Format Time: 0.000s
```

I feel like the number of hstore columns may be related, i noticed as the number of them in the output is reduced, things start to get faster.

Thanks for pgcli and happy to provide any other info I can.
","Expanded display (\x) faster than non expanded output
This seems to reproduce the issue:

```
dev> CREATE DATABASE hstore_test;
CREATE DATABASE
dev> \c hstore_test
You are now connected to database ""hstore_test"" as user ""postgres""
hstore_test> CREATE EXTENSION hstore;
CREATE EXTENSION
hstore_test> CREATE TABLE test ( col1 hstore, col2 hstore, col3 hstore, col4 hstore );
CREATE TABLE
hstore_test> SELECT * FROM test;
| col1   | col2   | col3   | col4   |
|--------+--------+--------+--------|
SELECT 0
hstore_test> \d test
| Column   | Type   | Modifiers   |
|----------+--------+-------------|
| col1     | hstore |             |
| col2     | hstore |             |
| col3     | hstore |             |
| col4     | hstore |             |
hstore_test> INSERT INTO test VALUES ('key1=>val1, key2=>val2, key3=>val3, key4=>val4, key5=>val5, key6=>val6, key7=>val7, key8=>val8, key9=>val9'::HSTORE, 'key1=>val1, key2=>val2, key3=>val3'::HSTORE, 'key1=>val1, key2=>val2, key3=>val3, key4=>val4, key5=>val5, key6=>val6,
              key7=>val7'::HSTORE, 'key1=>val1, key2=>val2, key3=>val3, key4=>val4, key5=>val5, key6=>val6, key7=>val7'::HSTORE );
INSERT 0 1
hstore_test> SELECT * from test;
| col1                                                                                                                                           | col2                                           | col3                                                                                                           | col4                                                                                                           |
|------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------+----------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------|
| ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"", ""key8""=>""val8"", ""key9""=>""val9"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"" |
SELECT 1
hstore_test> \x
Expanded display is on.
hstore_test> SELECT * from test;
-[ RECORD 0 ]-------------------------
col1 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"", ""key8""=>""val8"", ""key9""=>""val9""
col2 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3""
col3 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7""
col4 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7""

SELECT 1
```

with timing

```
hstore_test> SELECT now(); SELECT * from test;
| now                              |
|----------------------------------|
| 2015-10-18 15:45:40.352619-07:00 |
SELECT 1
| col1                                                                                                                                           | col2                                           | col3                                                                                                           | col4                                                                                                           |
|------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------+----------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------|
| ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"", ""key8""=>""val8"", ""key9""=>""val9"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"" |
SELECT 1
Command Time: 0.000s
Format Time: 0.001s
hstore_test> SELECT now();
| now                              |
|----------------------------------|
| 2015-10-18 15:45:44.076990-07:00 |
SELECT 1
Command Time: 0.000s
Format Time: 0.000s
hstore_test> \x
Expanded display is on.
hstore_test> SELECT now(); SELECT * from test;
-[ RECORD 0 ]-------------------------
now | 2015-10-18 15:48:09.272878-07:00

SELECT 1
-[ RECORD 0 ]-------------------------
col1 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"", ""key8""=>""val8"", ""key9""=>""val9""
col2 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3""
col3 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7""
col4 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7""

SELECT 1
Command Time: 0.000s
Format Time: 0.000s
hstore_test> SELECT now();
-[ RECORD 0 ]-------------------------
now | 2015-10-18 15:48:10.091153-07:00

SELECT 1
Command Time: 0.000s
Format Time: 0.000s

```

@eiginn It is possible for non-expanded output to be slower. But the extent to which you're seeing seems too high. 

The tabulate library tries to consume all of the columns to determine the max width of the columns before it starts to display. But the expanded output doesn't suffer from the same limitation. So it is entirely possible that tabulate output is slower. But a 10s difference for just a few rows seems exorbitant. 

Can you tell me what version of pgcli you're using? I'm unable to reproduce it with your example on version 0.19.2. 

I'm also running 0.19.2 from pip

```
(pgcli)[~]$ pip freeze                                                                                                                                                                                                                                                    
Pygments==2.0.2
argparse==1.2.1
click==5.1
configobj==5.0.6
docopt==0.6.2
jedi==0.8.1
pgcli==0.19.2
prompt-toolkit==0.46
psycopg2==2.6.1
six==1.10.0
sqlparse==0.1.16
wcwidth==0.1.4
wsgiref==0.1.2
```

The timing used to be broken in 0.19.2. I've fixed that in master. Can you try installing from master? 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

After that if you were to run the commands, there is only one timing value which will correspond to the sum of command execution and table formatting. Try that with expanded and non-expanded outputs, I'd like to see if that value is any different. 

Installed from master, timing does not appear to reflect the time i am seeing:

```
hstore_test> SELECT now(); SELECT * FROM test;
| now                              |
|----------------------------------|
| 2015-10-20 11:15:57.301332-07:00 |
SELECT 1
| col1                                                                                                                                           | col2                                           | col3                                                                                                           | col4                                                                                                           |
|------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------+----------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------|
| ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"", ""key8""=>""val8"", ""key9""=>""val9"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"" | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"" |
SELECT 1
Time: 0.003s
hstore_test> SELECT now();
| now                              |
|----------------------------------|
| 2015-10-20 11:16:01.032688-07:00 |
SELECT 1
Time: 0.001s
```

with \x

```
hstore_test> SELECT now(); SELECT * FROM test;
-[ RECORD 0 ]-------------------------
now | 2015-10-20 11:18:15.866121-07:00

SELECT 1
-[ RECORD 0 ]-------------------------
col1 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7"", ""key8""=>""val8"", ""key9""=>""val9""
col2 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3""
col3 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7""
col4 | ""key1""=>""val1"", ""key2""=>""val2"", ""key3""=>""val3"", ""key4""=>""val4"", ""key5""=>""val5"", ""key6""=>""val6"", ""key7""=>""val7""

SELECT 1
Time: 0.002s
hstore_test> SELECT now();
-[ RECORD 0 ]-------------------------
now | 2015-10-20 11:18:16.868461-07:00

SELECT 1
Time: 0.001s
```

Just found something very interesting, with expanded display OFF, I had the window small enough to trigger using the pager (in my case vimpager) and it was fast. Could this have something to do with the logic that decides when to use a pager?

Damn, this was entirely my fault, vimpager was in the way. Sorry for the lame bug ticket.

I'm glad you resolved it. 

I'm interested to know how you solved it, in case others run into this issue in the future. 

In my case i stopped using vimpager as PAGER for pgcli.

the background here was that I had ""let vimpager_passthrough = 1"" in my vimpagerrc, so that it would just pass through the contents it received if it was smaller than the current terminal window. I -assume- that when it had to wrap many lines this process took much longer to figure out.
",2015-10-18 00:04:39,2015-10-21 01:40:56
813,385,"Ref: http://stackoverflow.com/questions/4480381/postgres-sql-fail-on-script-error

pgcli currently supports changing the on-error behavior when we run multiple statements. But this is controlled via the config file. It'll be good to change the ON_ERROR behavior at runtime, so users can set it to STOP when they're about to run a script via the `\i` command. 

In psql this change is done via `\set` command. We don't have support for `\set` commands in pgcli. I was afraid that if we start supporting `\set` command, it'll open up a can of worms. But since we haven't received any issues regarding the `\set` command, I'm tempted to say, we can use the same command in pgcli, to maintain consistency with psql. 

eg:

```
\set ON_ERROR_STOP on
```
","Allow users to change the ON_ERROR behavior at runtime.
`\set` is also used for variable interpolation, like this:

```
dg=# \set foo 3.14159/2
dg=# \echo :foo
3.14159/2
dg=# select sin(:foo);
       sin
------------------
 0.99999999999912
(1 row)
```

Or is that the can of worms you mentioned?

That's the can of worms I mentioned. Because now we're rewriting queries before we send them into psycopg2. Which could be as simple as a search and replace in a query, but we have to be careful not to replace things that are quoted and such. 
",2015-10-14 11:37:18,
814,384,"For example:

``` sql
ALTER TABLE tbl          
DROP COLUMN xxx 
```

I mean the xxx is column name for table tbl,but which does not auto  pop up. 
Any way to make it worked?
","Does not surpport column names complete when Alter table?
Yes, that is certainly possible. I'll take a stab. 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-10-13 01:27:25,2016-06-29 03:51:11
815,383,,"Fix PyPI badge
Thank you for fixing the badge. :)

Appreciate it. :wedding: 
",2015-10-11 16:58:29,2015-10-12 03:40:36
816,382,"I don't like how errors are handled in pgexecute.run:
1. The default behavior with multiple statements, with errors in intermediate statements, is to continue executing the remaining statements. I'd like to be able to override that behavior to stop immediately on errors. 
2. Handling all exceptions makes it more difficult to reuse pgexecute outside of pgcli -- consumers may want to catch their own exceptions
3. \special commands are run outside the try clause. Because named queries can include arbitrary sql, they should be run like any other query
4. The `except` clause is too narrow. Currently, it catches `psycopg2.ProgrammingError`, which includes syntax errors, but not, for example, division by zero errors. See [here](http://initd.org/psycopg/docs/module.html#exceptions) for the psycopg2 exception hierarchy. I think ideally we'd widen all the way to catching `psycopg2.DatabaseError`, but `pgcli.main` relies on catching `psycopg2.OperationalError` in order to detect connection failures

This PR is one attempt at addressing these issues. It gives `pgexecute.run` and extra argument to specify how you want exceptions handled -- continue, stop, or reraise. I haven't done anything about point 4 though. Does catching `psycopg2.DatabaseError`, and always reraising `psycopg2.OperationalError` regardless of the `on_error` mode make sense?
","Improve error handling in pgexecute
> Does catching psycopg2.DatabaseError, and always reraising psycopg2.OperationalError regardless of the on_error mode make sense?

Yes. That makes perfect sense. 

Updated to do that then

[![Code Health](https://landscape.io/badge/235731/landscape.svg?style=flat)](https://landscape.io/diff/223185)
Repository health increased by 0.02% when pulling **[28cdaa3](https://github.com/dbcli/pgcli/commit/28cdaa31d1bba3ed2b67e963a2fb7e64ed900166) on darikg/on-error-options** into **[4e9fe6a](https://github.com/dbcli/pgcli/commit/4e9fe6ad1c36bffd01aae4722cbf7609d230efe3) on master**.
- [1 new problem was found](https://landscape.io/diff/223185) (including 0 errors and 0 code smells).
- No problems were fixed.

Thanks @darikg. 

I'm satisfied with the PR and I'm ready to merge. 

One more point of reference. Here's how psql does the equivalent of this: 

http://stackoverflow.com/questions/4480381/postgres-sql-fail-on-script-error

We don't support any of the `\set` commands and I don't think we can go down that path. 

But the idea of having a command line switch to enable/disable this feature is intriguing. At the very least we should provide a way to change the behavior at runtime, so people don't have to quit pgcli, change the config file and restart just so they can run a script (via `\i`). 

But that's an enhancement to this feature. So I'll create a new issue for that. 

@darikg I'd like to resurrect the discussion on this PR. 

Why do we have three states RESUME, STOP and RAISE? 

I think there should be only two states. RESUME and RAISE. Because as soon as we RAISE we're going to STOP.

Right now STOP swallows the error and colors it using Click returns the status message. I don't see the value in that. 

I think pgexecute shouldn't be in the business of coloring error messages.

The reason I'm bringing this up is because we've unintentionally broke https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L342. Even if the command fails, it'll always set the successful flag to `True`. 

I noticed this when @j-bennet brought up this corner case scenario in the PR https://github.com/dbcli/pgcli/pull/388#issuecomment-149317244.

I agree with moving error message coloring out of pgexecute. But in the case of RESUME, how will the pgexecute user (in this case, pgcli) know whether or not to color the output? Check for missing headers?

Another way to do it would be to change pgexecute.run to accept only single sql statements, and always raising on error. This would put the responsibility of splitting sql and handling errors on the caller. 

Maybe add a new field to the return tuple which denotes success/failure. 

What do you think about getting rid of RAISE? When the option is set to STOP we always raise the error which acts as a stop. 

Alternatively pgexecute.run could have an additional argument `exception_formatter` which would be a callable that converts an exception into formatted output. 

But yeah ultimately we should collapse STOP and RAISE like you say

Yes, `exception_formatter` is a nice idea. I'd be up for that.

I would support the idea of pgexecute always raising an error and the caller handling it. Callable is the next best thing though, it gives the caller almost as much flexibility. But I'd rather make the callable optional, and raising an error default.

@j-bennet Setting on_error to  `STOP` will always raise an exception. But setting on_error to `RESUME` will take a callable that will format the error. 

@darikg Are you doing this, or should I do it? 

I'll take a stab at it in a day or two if that's cool

> On Oct 20, 2015, at 11:35 AM, Amjith Ramanujam notifications@github.com wrote:
> 
> @j-bennet Setting on_error to STOP will always raise an exception. But setting on_error to RESUME will take a callable that will format the error.
> 
> @darikg Are you doing this, or should I do it?
> 
> —
> Reply to this email directly or view it on GitHub.

Yup. If I can release before Saturday, I'll be happy. 

Saturday is when I'm presenting pgcli at a meetup and I'd like to have the latest version out in PyPI. 
",2015-10-10 21:38:29,2015-10-14 11:30:43
817,381,"New users get frustrated when they select a SQL command, press `Enter` and the command gets executed. So this PR makes the enter key work like the tab, but only when the completion menu is visible.
","Makes ""enter"" key function as the ""tab"" key only when the completion menu is displayed
:+1: I like this PR. 

I'll let someone else merge this PR. 

@j-bennet ?

Actually it would be nice to check this on Windows before merging.

@darikg Would you mind giving it whirl? You've mentioned in the past that there is a subtle difference between the tab key and ctrl-space key in windows. So I want to make sure we didn't mess with anything by overriding the enter key. 

The PR looks good to me. I don't have a Windows machine to verify this, so I'll leave it to @darikg.

[![Code Health](https://landscape.io/badge/234520/landscape.svg?style=flat)](https://landscape.io/diff/222030)
Repository health decreased by 0.17% when pulling **[b9cb367](https://github.com/mdsrosa/pgcli/commit/b9cb367003cd4c28df9d15b81438f77e7e85f9da) on mdsrosa:enter_key_as_tab_key** into **[c7ac5d2](https://github.com/dbcli/pgcli/commit/c7ac5d248308f1379c0e5fbb03587532457116b2) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/222030) (including 0 errors and 3 code smells).
- No problems were fixed.

this is great, thanks @mdsrosa 

@amjith the tab/control-space distinction isn't important to me any more, it was a stop-gap measure while prompt-toolkit on windows caught up

@amjith @j-bennet @darikg Thank you very much!
Landscape-bot is complaining about 3 problems that were found in the code. But I can't see what is wrong. Should I be worried?

The problems reported by landscape are false positives. You don't have to worry about it. 
",2015-10-10 04:02:38,2015-10-10 13:31:03
818,380,"Fixes #378.

Reviewer: @stuartquin 
","Consolidate the timing information.
[![Code Health](https://landscape.io/badge/233956/landscape.svg?style=flat)](https://landscape.io/diff/221446)
Repository health increased by 0.40% when pulling **[255e373](https://github.com/dbcli/pgcli/commit/255e3735f2081b968607551e12ad44cb300fa2ba) on amjith/timing** into **[54acaed](https://github.com/dbcli/pgcli/commit/54acaed24f4600f999d823568f13ca146fc60e1b) on master**.
- [1 new problem was found](https://landscape.io/diff/221446) (including 0 errors and 1 code smell).
- [3 problems were fixed](https://landscape.io/diff/221446/fixed) (including 2 errors and 1 code smell).

Here is a solid way to test this: 

```
SELECT pg_sleep(2)
```

That should come back with a timing value of approximately 2 seconds. 

Managed to find some naturally long queries and all seems to work well, nice and tidy.
",2015-10-09 04:48:49,2015-10-09 18:08:41
819,379,"Spinning this off from discussion in #377 since they're (mostly) orthogonal.  I was originally a little skeptical of using any learning algorithm because 
1. It might be annoying to have different suggestions on different installations
2. It might preclude improving the base suggestion engine. Right now sqlcomplete suggests only the very vague `keyword` category when it could take greater advantage of syntactical restrictions. Given `SELECT * F`, `FREEZE` is a pretty silly suggestion because it's just not valid sql.

On the other hand, basing suggestions on syntax requires syntactically valid input, and a simple learning algorithm could be much more reliable in the middle of editing temporarily invalid queries. In the long run, the learning approach could move to estimating second- or third-order keyword transitions and be pretty powerful.

So this PR offers a basic experiment of the learning approach. Measure zeroth-order keyword probabilities, and rank keywords thereby. 

Open questions:
1. How should learning be shared between concurrent pgcli sessions? One global state or one state per pgcli instance?  
2. Should we (and if so, how do) we save keyword preferences between sessions?
","[experimental] learn keyword preferences
[![Code Health](https://landscape.io/badge/233400/landscape.svg?style=flat)](https://landscape.io/diff/220961)
Code quality remained the same when pulling **[18161db](https://github.com/dbcli/pgcli/commit/18161dbbcf6e2238454a40b2b44ff615b1a62ca7) on dbcli:darikg/learn-keyword-prefs** into **[54acaed](https://github.com/dbcli/pgcli/commit/54acaed24f4600f999d823568f13ca146fc60e1b) on dbcli:master**.

First of all this is great. I'm impressed at such a quick turn around. 

Here are some possible solutions to the open questions:

> How should learning be shared between concurrent pgcli sessions? One global state or one state per pgcli instance?

Let's keep the learning separate between concurrent pgcli sessions, which is what your implementation does.

Reason: The same user might start two sessions, one as a root user performing maintenance tasks and the other session as a regular user to do exploration.

One suggestion: Initially the KeywordCounter start empty and then learns during the session. But we have a corpus of query strings in our history file. Why not take the latest 100 entries and pre-populate the KeywordCounter? 

> Should we (and if so, how do) we save keyword preferences between sessions?

Yes! Our history files are the way we save the keyword preferences. At the start of a pgcli session we'll read the last 100 or 1000 entries in the history file and use it to train our model (KeywordCounter). 

I have a few more thoughts, I'll leave them in a bit once I've had a chance to formulate them in a coherent manner.

Right now we're only using this learning algorithm for Keywords. Why not use it for tables/columns/views etc? 

The fuzzy matcher sorts the list based on a tuple with two values, length of the matching group and the starting position of the match. Let's add a third value to the tuple which will be the frequency of a table/column/view. This means when the user types `SELECT * FROM` the list that pops up will have the table names listed in the most commonly used names. As soon as they start typing it'll reorder the list based on their typing and use the frequency item in the tuple to break ties. 

Only the keywords should be pre-populated from the history file. The table/column/view names should only learn from the start of a session and should not persist between sessions. The reason being, each session will be a specific task which requires a set of tables to be accessed but it'll vary from session to session. We should also reset these frequency counters for tables/cols/views whenever we change the database.

The end. :)

> Right now we're only using this learning algorithm for Keywords. Why not use it for tables/columns/views etc?

Good call. This would also be a good time to tweak how sorting is done. Right now `find_matches` sorts within suggestion categories, but not across them. So the completion menu lists all matching tables, then views, then schemas, etc. Instead, sorting should be done after all matches have been found, based on the three-element tuple you just described. So this is kinda dove-tailing with discussion in #377 that we should remove sorting from `find_matches`

Ok wow this got complicated quickly. Quick overview of the most recent set of changes:
- We have a new package `prioritization`, with one class `PrevalenceCounter`
  - PrevalanceCounter counts keyword and identifier name prevalences separately
- `PGCompleter` has a member `prioritizer`, which is initialized to an instance of `PrevalenceCounter`, but like @amjith said, this could become some other type of prioritizer like a neural network
- `pgcompleter` has a new class `Match`, which is a simple namedtuple (`completion`, `priority`)
- `find_matches` now returns a list of matches, instead of a list of completions.
  - The list is unsorted.
  - The priority is a nested tuple of `(fuzzy_match_tuple, prevalance)`
  - `find_match` arguments `start_only` and `fuzzy` are collapsed into a single parameter `mode`
    - `mode` = 'keyword' ==> start_only matching and keyword prevalence
    - `mode` = 'name' ==> fuzzy matching and name prevalence
    - TODO there's a small ambiguity here with hardcoded functions and datatypes, which use start_only matching but are names, not keywords. 
  - matches are collapsed across all suggestion types, and then sorted by priority
  - Around this point I got sick of the linebreaks in `pgcompleter.get_completions()` and broke out everything into submethods `get_table_matches`, `get_schema_matches` etc. and use dictionary lookup to dispatch on suggestion type. This gives back two levels of indentation and was a big improvement in readability imho.
- On pgcli startup, we read the most recent 100 lines from file history and learn keyword (but not name) prevalence. This is done in the completion refresher background thread so it shouldn't hurt startup time
- Finally, learned prevalences are persisted across completion refreshes, but changing databases wipes out the learned name prevalences

@darikg Wow, this looks great. I have a question about this part:

https://github.com/dbcli/pgcli/blob/darikg/learn-keyword-prefs/pgcli/packages/prioritization.py#L40

The comment says that we can't rely on sqlparse to recognize keywords, because sqlparse is database agnostic. But we're only parsing keywords out of our own history, right? so that would be database specific. Am I missing something?

@j-bennet  So in order to count identifier usages I'm iterating over the input like this:

```
for parsed in sqlparse.parse(text):
    for token in parsed.flatten():
        if token.ttype in Name:
            self.name_counts[token.value] += 1
```

For symmetry & simplicity it would be nice to be able to also do:

```
        elif token.ttype in Keyword:
            self.keyword_counts[token.value] += 1
```

But that won't catch all keywords properly unless sqlparse knows to tokenize them as keyword. So prioritization.py has its own ad hoc keyword tokenization machinery.

This is quite the PR. :)

Nice job. I've left a bunch of suggestions inline. I'm not sure I understand why the utils was changed to disable all the database tests. 

Thanks for taking the time to tackle this. The next release of pgcli is gonna kick butt. :)

[![Code Health](https://landscape.io/badge/234656/landscape.svg?style=flat)](https://landscape.io/diff/222155)
Repository health increased by 0.46% when pulling **[113e774](https://github.com/dbcli/pgcli/commit/113e7742026f9035342b1b3be56c9119b330499a) on darikg/learn-keyword-prefs** into **[54acaed](https://github.com/dbcli/pgcli/commit/54acaed24f4600f999d823568f13ca146fc60e1b) on master**.
- [5 new problems were found](https://landscape.io/diff/222155) (including 0 errors and 4 code smells).
- [8 problems were fixed](https://landscape.io/diff/222155/fixed) (including 2 errors and 3 code smells).

> I'm not sure I understand why the utils was changed to disable all the database tests.

Ugh I'm really sorry about that.

> Thanks for taking the time to tackle this. The next release of pgcli is gonna kick butt. :)

I was thinking actually we might want to do a new release before merging this, so it has some time to live in master before being released to the wild

> I was thinking actually we might want to do a new release before merging this, so it has some time to live in master before being released to the wild. 

That's a valid request. I can get started with the release process unless one of you is interested in doing.

@darikg Oh I see. I thought sqlparse covers all possible keywords, but I guess it only covers the rather general subset and it would not catch ones specific to postgres. Makes sense.

Suggestions after the `WHERE` clause is not suggesting columns names anymore. 

<img width=""817"" alt=""1__2_0_python_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/10422654/0ee3c2c2-7072-11e5-88b1-bf55cabf79fc.png"">

The even more surprising aspect of this find is that we don't have a test for this simple case `SELECT * FROM table_name WHERE`. 

This seems isolated to this branch. Master seems fine. 

Sorry about the false alarm. The column names are available but they're buried deeper in the list.

This makes me wonder if mixing all the completions together and then sorting based on priority is the right way to go.

That's happening because the prioritizer is loading keyword prevalence from your history and not names, so they're showing up with higher priority. There's a couple ways to handle this. 

1) Like I mentioned at the very top of this PR, it would be nice to improve keyword suggestion in general -- none of the suggestions in that screenshot are valid SQL. Keywords are suggested in where clauses because of some issues with `LIKE` dbcli/mycli#135 and `INTERVAL` #340. So we could try to figure out a more sophisticated way of suggesting them. (Possibility: a new suggestion type 'operator' which would suggest and, or, not, like, ilike, interval, etc., separate from keyword). 

2) Force keywords to the bottom of the list, allowing all other completion types to intermingle. Fuzzy matching returns a two-tuple for sorting. Strict matching also returns a two-tuple, but the second element is always zero, because it's unused. So we could just specify that second element to be negative infinity instead.

I went ahead and tried option 2 because it's so easy.

The new implementation works much better. I think we can use this solution for now while we implement the second order suggestions. 

I did notice one weird bug which is in master as well as this PR: 

```
SELECT * FROM table_name WHERE abs
```

Until I type `abs` it showed a ton of suggestions that started with `abs` such as `abs, abstime, abstimeeq` etc. But as soon as typed `s` in `abs` the completion menu went away which is odd. I'm guessing it's a parsing bug. I haven't had time to dig in yet. 

One weird thing with function suggestions as of #357 is that some functions are double listed -- once in the hardcoded functions list, and once in the database metadata. Not sure if it's related but I think `abs` is one of those functions so it'd be worth checking to see that PR introduced that bug.

[![Code Health](https://landscape.io/badge/235134/landscape.svg?style=flat)](https://landscape.io/diff/222603)
Repository health increased by 0.66% when pulling **[6d253f3](https://github.com/dbcli/pgcli/commit/6d253f307bada1e127646aff8ab487ebd02c8ce7) on darikg/learn-keyword-prefs** into **[54acaed](https://github.com/dbcli/pgcli/commit/54acaed24f4600f999d823568f13ca146fc60e1b) on master**.
- [4 new problems were found](https://landscape.io/diff/222603) (including 0 errors and 3 code smells).
- [8 problems were fixed](https://landscape.io/diff/222603/fixed) (including 2 errors and 3 code smells).

I checked `abs` it's not listed in the functions in pgliterals. I think it is probably listed in sqlparse as a reserved word. 

[![Code Health](https://landscape.io/badge/235278/landscape.svg?style=flat)](https://landscape.io/diff/223187)
Repository health increased by 0.93% when pulling **[40970fd](https://github.com/dbcli/pgcli/commit/40970fd7a7e86bb9b0498313f2158dcb9d8be22e) on darikg/learn-keyword-prefs** into **[54acaed](https://github.com/dbcli/pgcli/commit/54acaed24f4600f999d823568f13ca146fc60e1b) on master**.
- [2 new problems were found](https://landscape.io/diff/223187) (including 0 errors and 1 code smell).
- [8 problems were fixed](https://landscape.io/diff/223187/fixed) (including 2 errors and 3 code smells).

Just found this article: http://nicolewhite.github.io/2015/10/05/improving-cycli-autocomplete-markov-chains.html

Markov chain based suggestion. 

That's awesome. It looks like she's looking only at `keyword -> keyword` transitions. It would be cool to also include 
- `keyword -> identifier` transitions 
  - Suggest columns foo and bar in the SELECT clause, but columns baz and qux in the WHERE clause
- `keyword -> identifier type`
  - E.g. if the user tends to alias qualify column names, suggest table aliases in the SELECT clause before column names
- `identifier -> identifier`
  - E.g. if you tend to select columns foo and bar together, `select foo,` suggests bar

Now that 0.20.0 is out, lets get this merged into master and give it a thorough testing. 

@darikg Can you rebase this branch to bring it up to date? 

I'll finish rebasing this soon

Ping!

@darikg If you're busy I can take care of rebasing it. Just let me know. 

squashed & rebased

[![Code Health](https://landscape.io/badge/249901/landscape.svg?style=flat)](https://landscape.io/diff/235733)
Repository health increased by 0.52% when pulling **[471b058](https://github.com/dbcli/pgcli/commit/471b058008aefcd5f710660bef83b17544865434) on darikg/learn-keyword-prefs** into **[f7aef6e](https://github.com/dbcli/pgcli/commit/f7aef6ecacd0dc4c1343d3aab534c12aa50cd51d) on master**.
- [1 new problem was found](https://landscape.io/diff/235733) (including 0 errors and 0 code smells).
- [5 problems were fixed](https://landscape.io/diff/235733/fixed) (including 0 errors and 2 code smells).

Thanks @darikg. 

:bullettrain_front: 

We've had this merged into master for about 2 weeks now. How does everyone feel? 

Is it working out? 

When I type `SELECT * FROM table WHERE` I get the list of columns at the top, but as soon as I start typing the columns gets drowned out by the list of keywords, which is jarring. 

Here's an example: 

<img width=""928"" alt=""1__0_2_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux_"" src=""https://cloud.githubusercontent.com/assets/49260/11414870/c89f24f8-93af-11e5-9883-fab76f63522d.png"">

I don't have a great suggestion to counter this yet. But I'd like to get feedback from the team as well as some hardcore pgcli users about the current behavior. 

@dbcli/pgcli-core 

I'll start collecting a list of users who have been active in reporting issues or sending occasional PRs. If you have user suggestions, please leave their user name here and we'll contact them seeking feedback.

@amjith that definitely seems wrong. I'll work on getting a test set up for it. But yeah, in general, I'd love more feedback.
",2015-10-07 22:27:25,2015-11-10 03:55:31
820,378,"My Pgcli install (0.19.1) always displays 0.000s for the Command Time. Format Time correctly displays times.
","Timing does not display Command Time
You are correct, sir. 

I think along the way we made pgcli efficient by not consuming the generator object returned by psycopg2 and pass it directly into the tabulate function which consumes the generator while building the table. 

I think it is time to get rid of the command time/format time split and merge it into a single value called 'time'. 

@dbcli/pgcli-core Thoughts? 

I think I would rather merge it into a single line with both values present, like `Total time: 0.5sec (0.5s/0.1sec).` I think most people only care about query run time anyway, but you kind of want to catch those possible edge cases if pgcli suddenly takes inordinate amount of time formatting the results (tabulate has been iffy before).

I haven't had a thorough look at the code but I can't seem to make the Command Time return anything other than 0.000.
It's possible that my queries just aren't slow enough but I'm trying to make them as inefficient as possible!
In any case, I think it's still relevant to return an accurate command time, chances are the query will be used in an app somewhere so this is the value a developer will be concerned with

@stuartquin Fake it. :)

```
select schemaname, tablename from pg_tables, pg_sleep(3) where schemaname <> 'pg_catalog';
```

@stuartquin try adding `res = list(res)` after [this line](https://github.com/dbcli/pgcli/blob/54acaed24f4600f999d823568f13ca146fc60e1b/pgcli/main.py#L333) to force-exhaust the generator

We won't be able to separate the command time unless we exhaust the generator as suggested by Darik. 

Since `res` returned by this line: https://github.com/dbcli/pgcli/blob/54acaed24f4600f999d823568f13ca146fc60e1b/pgcli/main.py#L333
is a generator the actual command is not executed until we start consuming the generator. 

This line: https://github.com/dbcli/pgcli/blob/54acaed24f4600f999d823568f13ca146fc60e1b/pgcli/main.py#L357
takes in the cursor and inside the `format_output` method we start to consume the cursor at which point the command is actually executed and the results are formatted. 

So long story short, since we started passing around the cursor instead of a list of rows, we made pgcli memory efficient by choosing lazy evaluation. This means our format time is combined with the command time and we can only measure one time. No more separation. 

I'm going to create a PR to measure the time between this code block: https://github.com/dbcli/pgcli/blob/54acaed24f4600f999d823568f13ca146fc60e1b/pgcli/main.py#L331-L362
and call it total time. That's the best we can do, short of exhausting the cursor manually (which is inefficient). 
",2015-10-07 00:15:22,2015-10-09 18:08:41
821,377,"Keywords now maintain the same order they were listed in the pgliterals definition, which allows us to prioritize `FROM` over `FREEZE` and `WHERE` over `WHEN`

See #287 
","Don't sort keyword suggestions alphabetically
I have a couple of thoughts: 
1. The number of arguments we pass to `find_matches()` is getting unruly. There are some options that are mutually exclusive. For example you can't have both fuzzy and start_only, neither can we have fuzzy and unsorted. I think we should consolidate all those three args into a single argument. That argument will take a state (kinda like an enum) and based on that we choose whether to do fuzzy or start_only or unsorted. 
2. I feel like this is a stop gap measure before implement https://github.com/dbcli/pgcli/issues/287. I feel like the frequency based suggestions will learn over time and provide a much more accurate suggestion than our our ordering based on our opinions. 

So the question is should we bother doing the stop gap or should we leap ahead and do the frequency based suggestion? or Implement a hybrid where the frequency based suggestion will kick in once we have a history and until then we use the manually ordered list.

I just had a (questionably) brilliant idea. We should not sort the suggestions at all. We either order them via fuzzy or we order them based on their frequency. If there is no frequency (because there is no history to learn from), then the weight for frequency will be zero in which case it'll fallback to the manual ordering in the pgliterals file. 

I guess I had more than a couple of thoughts. :smiley: 

[![Code Health](https://landscape.io/badge/232904/landscape.svg?style=flat)](https://landscape.io/diff/220443)
Repository health increased by 0.03% when pulling **[af54959](https://github.com/dbcli/pgcli/commit/af54959ff8f7931c9d20b3d2a2720f8cac21be60) on darikg/maintain-keyword-order** into **[54acaed](https://github.com/dbcli/pgcli/commit/54acaed24f4600f999d823568f13ca146fc60e1b) on master**.
- [1 new problem was found](https://landscape.io/diff/220443) (including 0 errors and 1 code smell).
- [1 problem was fixed](https://landscape.io/diff/220443/fixed) (including 0 errors and 1 code smell).

Moving discussion of the learning algorithm to #379. You're entirely correct that this PR can serve as a fallback strategy, improving the out-of-box experience.

> neither can we have fuzzy and unsorted

That's not true. Nothing _calls_ `find_matches` with fuzzy and unsorted, but it's certainly an intelligible combination. I agree with combining `fuzzy` and `start_only` though. What if we just have one boolean `fuzzy`, where `fuzzy=False` means start_only?

I'm cool with having just one boolean called fuzzy to determine fuzzy or start_only. 

We get rid of the sorting and rely on the ordering in pgliterals. That will definitely improve the immediate out of box experience. 

@darikg Are you planning to update this PR or should I implement the changes?

I'm playing around with `find_matches` in #379. I'll update that PR soon and you can see what you think

@darikg Do we still need this PR or is completely superseded by #379? I'm preparing for the release. 

Superceded by #379
",2015-10-06 22:06:12,2015-10-16 12:27:10
822,376,"@stuartquin Can you review and merge? :)
","Update AUTHORS to add Stuart to core team.
Looks good @amjith 
Thanks guys!
",2015-10-06 07:34:02,2015-10-06 07:39:03
823,375,"This PR:
- Uses a different method of exiting the cli with pexpect (`.terminate()`)
- Updates a regexp to filter out ANSI escape sequences.
- Pins pexpect to 3.3.
- Adds pgspecial to tox.

Connected to #374.
","Fix tests breaking with pexpect 4.0
Thank you!

Just to definitely confirm the issues were all related to the pexpect version, I retriggered CI on the last successful master: https://travis-ci.org/dbcli/pgcli/builds/83553927 and they're all failing. So this PR seems like sure thing to me.

[![Code Health](https://landscape.io/badge/232389/landscape.svg?style=flat)](https://landscape.io/diff/219911)
Code quality remained the same when pulling **[1932705](https://github.com/dbcli/pgcli/commit/193270525804a57fc82c14ecd78d4040f7b0fbc2) on dbcli:j-bennet/integration-tests** into **[4055b72](https://github.com/dbcli/pgcli/commit/4055b726cca8d3c698968a96111050fade53995e) on dbcli:master**.
",2015-10-05 21:23:03,2015-10-05 22:10:20
824,374,,"Move literal definitions to standalone files
It looks like the tests are failing because the .txt files aren't being copied to the site-packages directory:

```
IOError: [Errno 2] No such file or directory: '/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/pgcli/packages/pgliterals/keywords.txt'
```

[![Code Health](https://landscape.io/badge/232031/landscape.svg?style=flat)](https://landscape.io/diff/219552)
Repository health decreased by 0.49% when pulling **[a6df083](https://github.com/dbcli/pgcli/commit/a6df0836f9727b341e628de0a42af5fefd72a8ad) on darikg/pgliterals** into **[4055b72](https://github.com/dbcli/pgcli/commit/4055b726cca8d3c698968a96111050fade53995e) on master**.
- [4 new problems were found](https://landscape.io/diff/219552) (including 1 error and 3 code smells).
- No problems were fixed.

I've modified setup.py file to include the txt files from pgliterals folder. 

Should we make the flat files into json files? They are quite simple and straight forward right now, but I feel like making them JSON files would give them a bit of a structure. We can make them into an array: 

```
['ACCESS',
'ADD',
'ALL,
...
]
```

We can use the `json` [library](https://docs.python.org/2/library/json.html) that is available in the standard library to read the file. 

What is the reason to make them text and not a python structure (array or dict) in a separate file? 

I speak for myself and not for @darikg's intentions on this matter. I think the advantage of a text file is that it'll be easy for someone to add new entries without understanding Python. Not that python code is hard to read or understand, but adding things to a json file or a txt file is less intimidating to a non-python user. 

I also envision a day when we can allow users to supply their own custom files which can live anywhere (such as ~/.pgliterals for example). In which case it is better to have them as flat files instead of python source.

@darikg Your thoughts? 

@j-bennet Mostly just habit to try to separate code and data. Like @amjith said, long-term we'd like users to be able to override literal definitions somewhere, and having arbitrary executable code in config files tends to lead to trouble.

@amjith Thanks! I didn't realize setup.py was responsible for packaging data like that, but it makes sense. json makes sense too -- I guess that would suggest moving all the literals into a single file, like

```
{
    'keywords': [
        'ACCESS',
        'ADD',
        'ALL,
        ...
    ],
    'functions': [
        'AVG',
        'COUNT',
        ...
```

@darikg I didn't think about collapsing it into a single file. That's not a bad idea. It'll be easier in the future to have a single file to override instead of multiple files. 

I see. I kind of think that pgcli's audience being developers, they would figure out a python array. Just like moving styles into pgcli config was not a problem. But yes, json in single file sounds like the best option, especially if it eventually goes into user's home directory.

Ok, I moved everything to a single json file, but now I'm getting timeout errors from the behavioral tests...

Do the tests run locally?

I don't know - I haven't been able to get behave to work on Windows. But the rest of the tests pass, and the CLI works normally, so I can't even guess what else broke.

It looks like pexpect 4.0 just got released today so I'm suspecting that's the culprit

@darikg I think it's best to remove those tests from travis temporarily. Too much breakage lately. I may need to rethink  / find other ways to do functional testing.

@amjith Thoughts?

@darikg Functional tests fail for me locally, which is a good sign. I will try to figure out what's going on.

Please don't remove the behave tests from Travis. In the past month every failure on behave has caught a bug.

eg:
1. `~/.config` folder had to be created using the `makedirs` calls.
2. prompt_toolkit 0.52 had a broken prompt, which caused this bug #370.

Both of them are real issues. I do NOT want to disable the tests. I know it adds delay to our process but I think it is a small delay compared to the person-cycles we'll have to waste if we released something buggy and had to answer github issues all day. 

Obligatory caveat, if everyone feels it does more good by disabling, please feel free to ignore my objections.

@darikg I made a couple of small fixes in tests and it seems to help. Would that be a problem if I check that in to this branch?

@amjith Those are good points. I'm probably too sensitive to tests breaking because they were my addition in the first place, so each time this happens I feel like I put a spoke in other people's wheel. They do have their use though, so I'd only disable them if I can't fix them.

This will be problematic though:

https://travis-ci.org/dbcli/pgcli/jobs/83729711#L166

It seems like new `pexpect` requires `ptyprocess` and that's not available in 2.6. I may need to pin the version of `pexpect`.

Yeah I'm with @amjith - I'd hate to lose the behavioral tests. Can we pin everything to the last set of working versions?

@darikg I think so, I'll look at it tonight. But I'd still want to include my current fix.

This PR includes integration tests fixes: https://github.com/dbcli/pgcli/pull/375

@j-bennet sorry, you meant also you had fixes specific to this PR? feel free to push them up

@darikg No, it's all specific to pexpect, and included in #375.

[![Code Health](https://landscape.io/badge/232392/landscape.svg?style=flat)](https://landscape.io/diff/219917)
Code quality remained the same when pulling **[32e4fcd](https://github.com/dbcli/pgcli/commit/32e4fcd3eb5a7f423f8277dbd670362582682365) on dbcli:darikg/pgliterals** into **[4055b72](https://github.com/dbcli/pgcli/commit/4055b726cca8d3c698968a96111050fade53995e) on dbcli:master**.

Ok, @j-bennet fixed everything. This PR is reporting as still failing tests even after retriggering a build, but that's just because of https://github.com/travis-ci/travis-ci/issues/1485.

Pretty. It should certainly make adding new keywords less annoying.

The behave tests are passing for me locally. 

I'm going to merge this PR. 

Thanks @amjith.
",2015-10-04 13:37:30,2015-10-06 05:03:02
825,373,"Was only actually checking the first command in multiple commands
","Fix need_completion_refresh
Looks good. :rooster: 
",2015-10-03 18:43:42,2015-10-03 21:48:16
826,372,"When user types in `\h <space>`, completer has to suggest SQL terms for which help is available.

Those terms can be got from executing `\h` without parameters.
","Completer has to suggest commands for which help is available
`\h` command was added in this PR in pgspecial:

https://github.com/dbcli/pgspecial/pull/2
",2015-10-03 18:26:14,
827,371,"Previously, this worked correctly, suggesting columns etc. from `a`
`SELECT * FROM abc a JOIN def d ON a.`

But this suggested only keywords:
`SELECT * FROM abc a JOIN def d ON a.id = d.id AND a.`
","Fix suggestions in compound join clauses
This looks good. Thanks!

:microscope: 
",2015-10-03 18:04:42,2015-10-03 21:45:23
828,370,"When running pgcli, it launches without errors and the autocomplete appears to work fine, but when I hit enter it does not actually send the command. If I enable multi-line mode, enter does create a new line, but if I press enter after a ; it does nothing. If I backspace over the ; and hit enter again, it inserts another newline.

I don't see any error output.
I'm running Arch Linux and installed pgcli and installed it with https://aur.archlinux.org/packages/pgcli-git/

$pgcli --version
Version: 0.19.2
$python --version
Python 3.4.3
$pip freeze  
click==5.1
configobj==5.0.6
namcap==3.2.5
packaging==15.3
pcp==1.0
pgcli==0.19.2
pgspecial==1.1.0
prompt-toolkit==0.52
psycopg2==2.6.1
py==1.4.30
pyalpm==0.7
pyelftools==0.23
Pygments==2.0.2
pygobject==3.16.2
pytest==2.8.0
pyxdg==0.25
six==1.9.0
sqlparse==0.1.16
team==1.0
wcwidth==0.1.5
","I can't actually send commands, enter does nothing.
This was fixed by doing pip install prompt_toolkit==0.46 as suggested by amjith on gitter. Thanks!
",2015-10-01 17:21:50,2015-10-01 17:32:48
829,369,"A continuation of the conversation from https://github.com/dbcli/pgcli/pull/366

A small fix to support showing the `\h` list whilst in expanded layout mode.
",Only show expanded layout if valid list of headers provided,2015-09-29 19:31:18,2015-10-01 12:18:14
830,368,"This is a follow-up to #361. See also discussion in #189.

Here's the upshot:

![temp](https://cloud.githubusercontent.com/assets/6875882/10165045/12a7127e-668b-11e5-98ec-b490c56db747.png)
","Suggest columns from functions
This is going to take me a while to review, but I just wanted to say, this is AWESOME! :smile:

It works great and the code looks good. 

Can you add a few more keywords to the completion list such as `RETURNS` and `LANGUAGE`? 

I've sprinkled some questions. Once they're addressed this is good to merge. 

I'm traveling for the next 24hours, so response might not be swift. I'll check it out once I land. 

I think I addressed all your inline comments. I'll add keywords in a separate PR -- I'm getting sick of keyword changes showing up as one giant git diff so I'd like to break them out into a separate file where they can be newline-separated

Oh, there's one other thing I forgot to mention. Right now, every time function columns are suggested, they need to be parsed by the `FunctionMetadata.fieldnames()` method. That's a little bit inefficient, since they only really need to be parsed once. My preference is to have `fieldnames()` operate lazily, and memoize its results after the first call. Alternatively, since completion refreshing is done in a separate thread, we could parse all fieldnames in a single pass during a refresh. What do you think?

[![Code Health](https://landscape.io/badge/231731/landscape.svg?style=flat)](https://landscape.io/diff/219334)
Repository health increased by 0.29% when pulling **[38f5e87](https://github.com/dbcli/pgcli/commit/38f5e875ef488a62a8723509109911b826fe175a) on darikg/suggest-columns-from-functions** into **[9f2fced](https://github.com/dbcli/pgcli/commit/9f2fced17bb01ce1f8170aecf4f87a0c3ab229dc) on master**.
- [4 new problems were found](https://landscape.io/diff/219334) (including 0 errors and 1 code smell).
- No problems were fixed.

Changes look good. It is ready to be merged. I presume you'll do the `fieldnames()` optimization in a separate PR. 

Regarding the `fieldnames()`, I'm fine with either approach. Doing it all at startup would mean we can keep things the same and it'll fit in the existing structure. Doing it lazily and memoizing the results doesn't mean it'll be complicated either. So I'm fine with either approach. You can pick your favorite. 

I'll let you merge this in, since I'm not sure if you'd like to optimize it in this PR or separately. 

:rocket: 

@darikg I liked your idea from https://github.com/dbcli/mycli/issues/128#issuecomment-129549454. 

Having the keywords in a separate config file is a very nice idea. So I'd welcome your plan to do a separate PR for splitting out the completion candidates to a file. 

Ok, sounds good. I'm going to merge this and handle `fieldnames` a little later
",2015-09-29 13:19:17,2015-10-04 13:31:11
831,367,,"Removed files left over from separating pgspecial.
[![Code Health](https://landscape.io/badge/229900/landscape.svg?style=flat)](https://landscape.io/diff/217502)
Code quality remained the same when pulling **[95b7276](https://github.com/dbcli/pgcli/commit/95b7276db4ec661c2523ad07b77090beb14e0129) on dbcli:j-bennet/pgspecial-merge-cleanup** into **[981f3aa](https://github.com/dbcli/pgcli/commit/981f3aadc79a301ccd391e805f3213ad47bab4cd) on dbcli:master**.

:+1: 
",2015-09-28 20:52:42,2015-09-29 05:07:11
832,366,"Show command based help:

```
\h    -- List of commands with help entries
\h SELECT   -- Synopsis and description of select command
\h FUBAR    -- No command found message
```

A few notes:
- The command index lives in a static file in the projecct - `helpcommands.py` and is generated from https://github.com/postgres/postgres/tree/master/doc/src/sgml/ref using https://gist.github.com/stuartquin/5cff044157d2e5491308
  @amjith does this solution feel OK? Maybe the above gist should live somewhere in the project?
- The help index is a static file based of the current master of the postgres project, I'm not sure how `psql` deals with difference in help content when connecting to different versions of postgres?

Thanks
","Issue #281 Support for \h and listing of command help
Very nice!

Yes that gist should live in a folder called 'scripts' in the project root. We can potentially move other scripts into that folder which are not bundled with pgcli.

I like the clever use of `json.tool` to generate the python file from json output. :)

I'm not really sure how psql differentiates between the versions of Postgres server either. 

I want to play around with this branch a little more before merging. Thanks again for the PR.

@j-bennet @darikg Thoughts?

Nice work, needs a slightly more detailed readme and perhaps be organized into its own module or subfolder.

I looked at postgresql source code. It seems like psql is not trying to be smart and determine server version or anything. SQL help is compiled into a C file from those SGMLs and included into psql distribution. See here:

https://fossies.org/dox/postgresql-9.4.4/sql__help_8c_source.html

```
* generated by
*     /usr/bin/perl create_help.pl ../../../doc/src/sgml/ref sql_help
*
```

@j-bennet I'm not sure I understand what you mean by separate module. 

I think this PR would effectively be moved to https://github.com/dbcli/pgspecial since pgspecial is now a separate package.

The scripts/docparser.py file will also move to that repo. Is that what you mean? 

I do agree that an updated README that shows an example of how to run the docparser would be useful. Right now that information is only in the script's usage help.

@stuartquin Just to bring you up to speed, we just finished extracting `pgspecial` as it's own package and included it as a dependency. (See #363 for details).

So the contents of this PR will have to be moved to that repo (https://github.com/dbcli/pgspecial). 

I understand it is frustrating to make the changes and then have to redo them all in a different repo. I'm willing to move the changes to the pgspecial repo if you prefer. Just let me know what you prefer. 

@amjith I noticed the new repo and thought this PR would cause issues, I'll have a go at adding it to the pgspecial repo along with the script and README, will let you know if I have any issues.

@j-bennet Interesting that psql uses an almost identical process, I'll have a look at `create_help.pl`, see if we missed anything

What I meant was something like this (should have explained myself better):

```
/pgcli
    /packages
        /pgspecial
            /help
                commands.py
                generate.py
                README.md
```

So all help-related things would be in the same place. But it's fine as-is also.

@j-bennet I think it makes sense to have `help/commands.py` but I think we should keep `generate.py` in a scripts folder as it has a dependency (beautifulsoup4) which is not required by the main project.

I've moved this stuff out to pgspecial and opened a new PR -  https://github.com/dbcli/pgspecial/pull/2
so I think the changes here are redundant now.

Is `pgcli/packages/pgspecial/main.py` still used?

Thanks

Ouch. This whole directory should not be present in pgcli anymore.

https://github.com/dbcli/pgcli/tree/master/pgcli/packages/pgspecial

@amjith It was a halfway merge, eh? :-)

Looks like I merged some stuff that left things in half way. I won't be able to clean it up until I get home tonight.

@j-bennet  If you'd like to clean it up, please feel free. 

See PR #367.

[![Code Health](https://landscape.io/badge/229940/landscape.svg?style=flat)](https://landscape.io/diff/217511)
Code quality remained the same when pulling **[84ad1cc](https://github.com/stuartquin/pgcli/commit/84ad1cc111abbdb275b289ea011408e36e91b297) on stuartquin:feature/help-command** into **[981f3aa](https://github.com/dbcli/pgcli/commit/981f3aadc79a301ccd391e805f3213ad47bab4cd) on dbcli:master**.

I get an error when calling`\h` (no argument) with extended formatting `\x on`: `max() arg is an empty sequence`

Good spot @darikg 
Since the move to pgspecial the majority of this PR no longer makes sense, I'll close it and move over to 
https://github.com/dbcli/pgcli/pull/369 and https://github.com/dbcli/pgspecial/pull/2
",2015-09-27 07:41:04,2015-09-29 19:32:20
833,365,"This supersedes #362 and disables the mouse support. 

Reason: 

Enabling mouse support means users can't select the table output to copy/paste. So until that is resolved we're not going to enable mouse support, since copying the output is something I do frequently. 
","Amjith/prompt toolkit upgrade
@j-bennet Can you help me figure out why the behave tests are failing? It's failing locally as well but I'm not sure why. 

I'm not sure if this is something that's changed in prompt toolkit, but it seems that the way the colored prompt is output now is messing up the tests.

This is the output that's being captured:

https://gist.github.com/j-bennet/9b26709ec4e210e5ae99

As you can see, after `Home: http://pgcli.com\r\n`, it all looks like ANSI color codes. This is also why you don't see the prompt in exception being printed out: I'm stripping color codes from the output to not clutter the exception with them. But if you run this script, you'll see that it actually prints out the colored prompt string.

Before, the output was different. It was more like:

```
ansi codes, ansi codes, ansi codes [TEXT WE ARE EXPECTING] ansi codes, ansi codes, ansi codes
```

Not sure what to do about it. :( I did ask @jonathanslenders before if it's possible to run the cli in ""non-colored"" mode for the tests, but it seems like there's no way.

Do you have unit tests that have assertions on how prompt-toolkit renders to the terminal?

I haven't looked at the code, but if that's the case, and it's important to test this part, I'd suggest to use a custom instance of the `Output` class and pass that to `CommandLineInterface`. There you can record all terminal events.

Actually, I'm also not aware of any change in the output rendering. It's designed to send as few bytes to stdout as possible. So, if suddenly we receive much more output, that's likely a bug.

@jonathanslenders They are end to end, functional tests. They run pgcli as a user would, using pexpect, enter commands and check for strings in output. I'm not using any api or creating any classes. Maybe we'll have to drop this method of testing. 

I'm not sure how reliable this is, because somehow this relies on the rendering algorithm that's used. More correct (but much, much more complex to set up) is to use a real in memory terminal emulator (like https://github.com/selectel/pyte ) to parse the rendering characters and check the output cell by cell.

Anyway, when I have some time, I'll see whether there is something that could actually have cause some changes.

[![Code Health](https://landscape.io/badge/229337/landscape.svg?style=flat)](https://landscape.io/diff/216936)
Repository health decreased by 0.02% when pulling **[754be76](https://github.com/dbcli/pgcli/commit/754be7676902011b67bad3e6a736a00c1485a8f2) on amjith/prompt_toolkit_upgrade** into **[764f69a](https://github.com/dbcli/pgcli/commit/764f69a47bc242383e992502491a1ae0012f13a0) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/216936/fixed) (including 0 errors and 1 code smell).

@amjith Let's remove functional tests from travis for now?

But it actually found a bug in the config location change. :disappointed: 

We can disable it on Travis for now. But I'd like to adjust the tests and have it running again. I think it is a worthwhile suite. 

After looking into it. I see that this is definitely a ""bug"" in prompt-toolkit caused by a recent change. It does much more cursor movements than required in order to render the output. For every character that changes, it moves the cursor back to the left margin by outputting `\r` and then it moves it to the correct `x` position. I'll try to push a new fix later today. Thanks for pointing this out!

(FYI: it shouldn't cause any issue, but it's just not optimal.)

Probably this pull request will fix it: https://github.com/jonathanslenders/python-prompt-toolkit/pull/167
Some test output went down from 2667 to 1185 bytes written to stdout.

Nice!! 

Kudos to @j-bennet for adding those tests. 

We're not going to disable the tests. They did their job well. :)

I'm going to wait on merging this PR until the fix is out in Prompt Toolkit. Because merging it now means the integration tests will keep failing. Let's not do that. 

Thank you @jonathanslenders for looking into it and fixing it so quickly (as usual). We'll wait till the next version is out in pypi. 

@jonathanslenders I finally got around to trying it on Windows and the enter key is broken. 

After I launch pgcli, I can't press enter. So there is no way for me to execute a command.

Did you try it on Windows? 

[![Code Health](https://landscape.io/badge/229935/landscape.svg?style=flat)](https://landscape.io/diff/217505)
Repository health decreased by 0.02% when pulling **[28d177e](https://github.com/dbcli/pgcli/commit/28d177e5b4529329f3ffbf3c89b93f5c5bd6eb49) on amjith/prompt_toolkit_upgrade** into **[764f69a](https://github.com/dbcli/pgcli/commit/764f69a47bc242383e992502491a1ae0012f13a0) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/217505/fixed) (including 0 errors and 1 code smell).

Closing this as we've already upgraded to the newer prompt_toolkit rendering this PR obselete. 
",2015-09-26 03:11:07,2016-02-04 03:31:19
834,364,,"Updated release script with a --dry-run and --confirm-steps option.
Looks good. I like the dry run option. :+1: 
",2015-09-25 17:13:35,2015-09-26 03:35:13
835,363,"This branch of pgcli uses pgspecial as an independent module.

It adds the dependency in setup.py.

All of the code, including tests, is now here:

https://github.com/dbcli/pgspecial
","Using pgspecial as a separate module.
The dockerized setup that installs pgcli from this branch and lets you play with it is available here:

https://github.com/j-bennet/dockerized/tree/master/pgcli-pgspecial

[![Code Health](https://landscape.io/badge/227470/landscape.svg?style=flat)](https://landscape.io/diff/216633)
Repository health increased by 0.19% when pulling **[7e07207](https://github.com/dbcli/pgcli/commit/7e0720738d9fa11c8767c7ab5780986909c07f89) on j-bennet/extract-pgspecial** into **[6166291](https://github.com/dbcli/pgcli/commit/6166291c3e0a9eb97303ee5b5f06e2168c858dd6) on master**.
- [1 new problem was found](https://landscape.io/diff/216633) (including 0 errors and 0 code smells).
- [28 problems were fixed](https://landscape.io/diff/216633/fixed) (including 1 error and 8 code smells).

@j-bennet This change makes me incredibly happy. 

Especially this: 
![using_pgspecial_as_a_separate_module__by_j-bennet_ _pull_request__363_ _dbcli_pgcli](https://cloud.githubusercontent.com/assets/49260/10093927/313130c4-630e-11e5-8711-d05e44eaf67e.png)

I know that we've just moved the code to a different library, but it makes me quite happy. :)

I think there is a merge conflict because we just got a PR yesterday to implement `\x` with arguments to implement `\x auto`. PR #359. 

I think that feature is worth porting to pgspecial and doing a new release. 

@amjith This is now ported to pgspecial. Do I need to merge master into this branch?

Thanks for the ridiculously quick turn around. :)

I had expected there would be a review before the release of 1.1.0 of pgspecial. But I guess we never explicitly discussed that.

I'm interested to discuss the development process for pgspecial. Should we hold it to the same standards as pgcli where every change to master is reviewed or should we have a more relaxed approach? 

If we adopt a relaxes approach to pgspecial, we can iterate faster and then when we open a pr to pgcli to upgrade the version we can scrutinize the changes more thoroughly. Thoughts? 

/cc @darikg @j-bennet 

@amjith I'd rather have the same standards as pgcli. This change was an exception because it was already reviewed within pgcli and only ported to pgspecial. There were no additions to the port whatsoever.

I'll pull this down and run a manual merge. 

`\x auto` isn't working as expected. 

![2__pgcli___users_amjith_dropbox_code_python_pgcli__python2_7_](https://cloud.githubusercontent.com/assets/49260/10120563/7cc3dfa0-6476-11e5-9b3a-fa006c5c0754.png)

This branch has been rebased against master and then force pushed. So your local branch will have to be force updated as well. 

```
git pull -f origin j-bennet/extract-pgspecial
```

[![Code Health](https://landscape.io/badge/229601/landscape.svg?style=flat)](https://landscape.io/diff/217192)
Repository health increased by 0.59% when pulling **[68123b6](https://github.com/dbcli/pgcli/commit/68123b6fac82810dc61c1e05fd1005c5ad1cd874) on j-bennet/extract-pgspecial** into **[1be884e](https://github.com/dbcli/pgcli/commit/1be884e83e6d9d4a90e8b0c7923df31728f0f628) on master**.
- [1 new problem was found](https://landscape.io/diff/217192) (including 1 error and 0 code smells).
- [29 problems were fixed](https://landscape.io/diff/217192/fixed) (including 3 errors and 8 code smells).

There was a missing import other than that it was good. 

Thank you for finishing this task. :sake: 

Ow. How did this get in there?

https://github.com/dbcli/pgcli/blob/master/pgcli/packages/pgspecial/tmp.sql

Some people are terrible. 

Sorry that was me. :disappointed: 
",2015-09-24 20:51:03,2015-09-28 05:38:51
836,362,"Upgrade to the latest prompt toolkit. Mouse support enabled by default. (You can make this configurable if you want to.)

There were a few more changes I needed to make, because some defaults have changed to ""do nothing"". However, the `prompt_toolkit.shortcuts.get_input` method still has the same defaults. So, later I'd like to have a look at using that instead of creating the `Application` manually. I think that makes the integration more simple.
","Upgrade to prompt-toolkit-0.52
How do I enable auto-suggestions? 

For auto suggestion, the `Buffer` class accept an `AutoSuggest` instance.

If I have time later on, I can create another pull request that does everything through the `prompt_toolkit.shortcuts.get_input`. That has the most sane defaults for cases where `prompt-toolkit` is used as a readline replacement. 

I've tested this PR and the changes look good to me.

@dbcli/pgcli-core Can you please take this for a spin. 

One notable difference, you can use the mouse to move your cursor. This is especially useful if you're writing a long multi-line query and you want to go back to the middle of the 2nd line. You can just click with your mouse and the cursor will be teleported there. 

If you click and drag you can select the query. But this is quite sluggish for me. I'm wondering if there is a way to disable the drag to select feature. 

@jonathanslenders Your thoughts on disabling drag to select?

Right now there is no way yet to disable mouse selection without disabling all mouse handling.
I will work on better mouse support for a next release. Basically, handling mouse move events and probably double click as well (for selecting a word.)

Superseded by #365 
",2015-09-23 20:12:31,2015-09-26 03:30:00
837,361,"Fixes #189. Suggest set-returning functions in the appropriate places.

This enhances the amount of function meta-data stored: the function argument list, the function return type, and boolean flags `is_aggregate`, `is_window`, and `is_set_returning`. This is a little bit overkill, in that all we need for this PR is `is_set_returning`, but I plan on using most of this in the future. In particular, after (if) this PR is accepted, I'll have follow up that suggests column names from set-returning functions used as tables. Ultimately after that I'd like to implement function tooltips/hints.
","Suggest functions as tables
This is a pretty big change. I think I'm able to follow the changes so far. I'm going to sleep on it and play around with it more tomorrow. But it looks good so far. 

Thanks for undertaking this task. I appreciate it very much. :)

I'm satisfied with this PR.

You're welcome to change the attr_name to `return_type` in a future PR. I'm merging this for now. 

Thank you!

:bullettrain_side: 
",2015-09-23 19:25:48,2015-09-25 05:35:40
838,360,"See e.g. http://www.postgresql.org/docs/9.4/static/sql-createindex.html

Fixes #358
","Add CONCURRENTLY to keyword completion
Looks good @johshoff. Thanks for the PR. 

:melon: 
",2015-09-23 00:35:17,2015-09-23 04:22:28
839,359,"Adds support for `\x auto` option.
- I'm not totally sure about returning `rows` from `tabulate` but it was the most straightforward way I could think of to reuse the data from `cur`
- The `get_terminal_width` function has been borrowed from Stack Overflow and is not extensively tested
  (works well on GNOME Terminal 3.6.2)
","Issue #315 Add support for \x auto
Thanks for tackling this! I've played around with it a little bit and the console width detection seems to be working correctly on Windows. However I'm seeing two issues, demonstrated in the screenshot below:

1) `\x on` and `\x off` toggle the expanded output display regardless of the second parameter. (I.e., if expanded output is already on, `\x on` should basically do nothing
2) Column values are not correctly vertically aligned.

![temp](https://cloud.githubusercontent.com/assets/6875882/10033390/480c4242-6157-11e5-838b-cca5e1318671.png)

Hi @darikg Thanks for the feedback.

I've added support for `\x on` and `\x off`.

I was unable to re-produce the weird alignment issue but have added an explicit `strip` to try and prevent it. If the issue persists let me know the steps to recreate and I'll have another look.

Great! That seems to have fixed my alignment issue. I have two further suggestions: instead of relying on that `get_terminal_width` implementation, use the python prompt toolkit api directly, maybe something like this:

```
# self is the main pgcli object
if self.pgspecial.auto_expand:
    size = self.cli.output.get_size()  # returns a [rows, columns] namedtuple
    max_width = size.columns
else:
    max_width = None
```

And then pass that max_width parameter to format_output.

Secondly, the implementation of `is_wider_than_terminal` is a little hard to grok at first -- can you add comments to explain the arithmetic?

I've updated to use the prompt toolkit method, way cleaner!
Also renamed the magic function to `content_exceeds_width` and removed/explained some of the magic numbers

:+1: I'm pretty happy with this. I'll let @amjith have a look before I merge it. Thanks for the quick turnaround.

Change looks great! :ship: it. 

Thank you for taking the time to implement the feature @stuartquin. It is much appreciated. 

I have been using `\x auto` in pgcli for a while. I had been trying to set that option by default in my `.psqlrc`, without any luck, but just learned that pgcli uses a different config file. In pgcli's config file, is it possible to set `\x auto` by default? Thank you!
Hi @el-ethan 

Ignore my previous comment, we already have support for this as:

```
# Set \x auto
auto_expand = True
```

The default file location is `~/.config/pgcli/config`

Thanks
Thanks @stuartquin! That did the trick! It took me a little while to get it working though. I was on version `1.3.1` of pgcli before, and had to upgrade through brew before this option worked. Works as I had hoped on `1.5.1`!",2015-09-22 21:25:58,2015-09-23 16:21:16
840,358,"When creating an index concurrently like so

```
CREATE INDEX CONCURRENTLY ...
```

the word `CONCURRENTLY` gets syntax highlighting as expected, but is not in the drop-down list of suggested keywords.

I'd be happy to pair on this issue if you want :)
","CONCURRENTLY keyword not in suggestion list
Yes adding a new keyword to the completion menu is trivial. Here's the list of keywords used for completion. https://github.com/dbcli/pgcli/blob/master/pgcli/pgcompleter.py#L19..L40

You're welcome to take a stab at it, if I don't see a PR, I'll try and tackle it tonight. 

Thanks. Expect to see a PR for this.
",2015-09-22 18:24:22,2015-09-23 04:22:28
841,357,"Fixes #353 
","Don't hide functions from pg_catalog
Looks good @darikg. Thanks for fixing this. 

:alarm_clock: 
",2015-09-22 17:05:19,2015-09-23 04:29:14
842,356,"This is PR #349 by @inkn to move the config file from ~/.pgclirc to ~/.config/pgcli/config. 

I've added one more commit to this PR which will auto-migrate the config file at launch time and print a message at the top. If there is already a config file under ~/.config/pgcli/config then we won't overwrite it. Pgcli will simply print a message saying the user has to merge their ~/.pgclirc to ~/.config/pgcli/config file. 

I've also added default paths that are compatible with Windows. 

@dbcli/pgcli-core Can you please review this? @darikg I'm interested to know if this works as expected in Windows. My Windows VMs have expired, so I'm still downloading a new Windows VM to test this out. 

/cc @inkn I'm going to close #349 since this PR has all of your original commits. 
","Move config file to ~/.config/pgcli
```
[pgcli2] C:\Users\dg>pgcli postgresql://postgres@localhost/test
Traceback (most recent call last):
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\Scripts\pgcli-script.py"", line 9, in <module>
    load_entry_point('pgcli==0.19.0', 'console_scripts', 'pgcli')()
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 664, in __call__
    return self.main(*args, **kwargs)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 644, in main
    rv = self.invoke(ctx)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 837, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 464, in invoke
    return callback(*args, **kwargs)
  File ""c:\users\dg\documents\python\pgcli\pgcli\main.py"", line 484, in cli
    shutil.move(os.path.expanduser('~/.pgclirc'), config_location())
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\shutil.py"", line 302, in move
    copy2(src, real_dst)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\shutil.py"", line 130, in copy2
    copyfile(src, dst)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\shutil.py"", line 83, in copyfile
    with open(dst, 'wb') as fdst:
IOError: [Errno 2] No such file or directory: 'C:\\Users\\dg\\AppData\\Local\\dbcli\\pgcli\\config'
```

Of course. I forgot to update the section for creating folders if they don't exist. I'll update them tonight when I get back home. Thanks for checking it. 

I've update the PR to check and create the config directory if it doesn't exist. Can you try it again? 

Ok, it worked correctly. It's a little awkward that the history and log files don't auto-migrate as well, but that's probably more trouble than it's worth.

@darikg That's a good point. I can migrate those over as well. I think moving the history file at the very least would be useful. 

It's just a pain because you would want to also edit the config file to update the settings for the log and history filepath, unless the user has non-default paths there, in which case don't migrate the files I guess?

[![Code Health](https://landscape.io/badge/228100/landscape.svg?style=flat)](https://landscape.io/diff/215982)
Code quality remained the same when pulling **[54f53b9](https://github.com/dbcli/pgcli/commit/54f53b9843427769209e80664eb201dd5d88af88) on dbcli:amjith/new-config-file** into **[d6897a7](https://github.com/dbcli/pgcli/commit/d6897a7fdfd815491d98687b6153a5cf5885db1d) on dbcli:master**.

Oh yeah. Didn't think about that. 

I won't migrate them automatically, it's too much work. Let the new generations enjoy the log and history inside the `.config` folder. 

So then no more changes necessary. If you're satisfied with the changes feel free to merge. 
",2015-09-20 22:06:25,2015-09-24 02:51:56
843,355,"It's super convenient to be able to run pgcli like this:

``` bash
$ pgcli 'host=somehost user=someuser password=somepassword'
# or
$ pgcli postgresql://someuser:somepassword@somehost
```

However, it enables other users on the same system to see the password by running `ps`, `top`, etc.

Some other clients (like the regular `mysql` client) have a cunning way to hide this: http://unix.stackexchange.com/questions/88665/how-does-ps-know-to-hide-passwords

And there's a Python package that wraps this up to make it easy: https://github.com/dvarrazzo/py-setproctitle

Although neither of these are foolproof (there's a timing attack due to a small window of opportunity between the process being started and the args being modified), it can help reduce the attack vector.
","Hide command line passwords from ps
Looks like you have a great solution to this. Would you be willing to take a stab at it and send a PR? I'll be happy to help in anyway possible. 

Sure! Looking at the code, I see two options for implementing this:
- Option 1: In the main `cli()` function, read `sys.argv` and look for anything that looks like a connection string in the entire cmd line, and hide it. This is the quickest solution.
- Option 2: Maybe this actual arg hiding should go inside the `click` library. Something like `@click.argument('database', obscure=lambda arg: do_something(arg), ...)`. This will be useful to more people.

Thoughts?

That's a good observation. I think solution 1 is good for the short term and file an issue with click for the longer term solution. 

You're right it'll be useful for others. 

:+1: on the feature, I (personally) don't see the need to make it a cli argument. 

Fix released in 0.20.0. 

Please upgrade:

```
pip install -U pgcli
```
",2015-09-17 18:00:03,2015-11-01 09:08:44
844,354,"If I write `\d events`, I will see:

```
column c.reloftype does not exist
LINE 5:                 CASE WHEN c.reloftype = 0 THEN ''
```
","command \d don't work
What version of postgres are you running? 

Can you tell me if `\d` is a table or a view? 

Thank you for fast response.

Version of postgres is 8.4. `events` is table. 

Pgcli only supports Postgres 9.x.

Adding support for older Postgres is not actively pursued. 

OK. I understand. Thank you.
",2015-09-17 12:45:56,2015-09-18 06:58:44
845,353,"When typing things like `select pg_get_viewdef('viewname', true)` with Smart Completion turned on, pgcli will not try to complete the `pg_get_viewdef` function. It works with naive completion.

Other functions lacking on smart completion: http://www.postgresql.org/docs/7.4/static/functions-misc.html
","Misc pg functions not showing on smart autocompletion
@darikg Would you mind taking a look at this? 

I remember that we added logic to not show table names and view names that start with `pg_` until the user explicitly types `pg_`. But do you know if we did the same for functions? 

Sorry I'm away from my computer for the next 5 days or so.  I glanced at the source and it looks like I never handled pg_ functions specifically my guess is this is a legit bug. I can fix it when I get back!

> On Sep 16, 2015, at 10:47 AM, Amjith Ramanujam notifications@github.com wrote:
> 
> @darikg Would you mind taking a look at this?
> 
> I remember that we added logic to not show table names and view names that start with pg_ until the user explicitly types pg_. But do you know if we did the same for functions?
> 
> —
> Reply to this email directly or view it on GitHub.

It's not just with functions started with pg_ -- current_database() for example won't show also.

Ok had a chance to look into this again. The pgexecutor functions query isn't returning any functions from the pg_catalog namespace. It'd be an easy fix, but here's the problem:

```
test> SELECT COUNT(DISTINCT p.proname)
      FROM pg_catalog.pg_proc p
      INNER JOIN pg_catalog.pg_namespace n
      ON n.oid = p.pronamespace
      WHERE n.nspname = 'pg_catalog'
      AND p.proname NOT ilike 'pg_%';
+---------+
|   count |
|---------|
|    1837 |
+---------+
SELECT 1
```

That is, there's 1837 functions in pg_catalog that don't start with `pg_`, would that be too much to throw into the completions menu?

Showing 1837 functions may not be very helpful. But once the user starts typing something, the list will decrease. I would try it and see if it's feasible in terms of performance. If yes, then I think it's better to show too much rather than nothing.

@j-bennet I think you're right
",2015-09-16 13:22:55,2015-09-23 04:29:14
846,352,"I realised when using `\d+` on a table, there's a bug in formatting the `Referenced by` section:

Using current implementation it shows:

```
Foreign-key constraints:
    ...
Referenced by:
    TABLE ""constraint_name"" CONSTRAINT ""table_name"" FOREIGN KEY ...
Has OIDs: no
```

After fix:

```
Foreign-key constraints:
    ...
Referenced by:
    TABLE ""table_name"" CONSTRAINT ""constraint_name"" FOREIGN KEY ...
Has OIDs: no
```
","""Referenced by"" formatting fix
[![Code Health](https://landscape.io/badge/225539/landscape.svg?style=flat)](https://landscape.io/diff/213231)
Code quality remained the same when pulling **[04a444b](https://github.com/TamasNo1/pgcli/commit/04a444b9522e5efb061e76b541229bffb2cd3761) on TamasNo1:referenced_table_param_order** into **[fe6752d](https://github.com/dbcli/pgcli/commit/fe6752d1f293346e6f1d3c47e12fa6a68503d6c6) on dbcli:master**.

Do you think this is a bug in psql as well? Because that sql is taken straight out of psql code base. 

https://github.com/postgres/postgres/blob/master/src/bin/psql/describe.c#L2003

They mixed the result indexes instead of sorting the columns in the query which for me seems a bit odd. See it from line 2020: https://github.com/postgres/postgres/blob/master/src/bin/psql/describe.c#L2020

You're right. That is odd. Thanks for tracking that down and fixing it in pgcli. 

Cheers!
:fireworks: 
",2015-09-15 21:21:26,2015-09-16 14:52:17
847,351,"Explain plans have indentation to show the hierarchy of query plan. But tabulate is stripping the indentation. 
","Indentation in output are stripped
Any ideas on which piece of code is to blame? This is affecting me as well.

I suspect the indentation is removed somewhere in this file: https://github.com/dbcli/pgcli/blob/master/pgcli/packages/tabulate.py

But I haven't had the time to dig in yet. So if you have a possible fix, I'd most welcome it. :)

I basically removed all `.strip()` in this file and got indentation working:

``` diff
--- /home/d33tah/virtualenv/lib/python2.7/site-packages/pgcli/packages/tabulate.py_     2015-10-24 17:51:38.735376481 +1200
+++ /home/d33tah/virtualenv/lib/python2.7/site-packages/pgcli/packages/tabulate.py      2015-10-24 17:53:39.426368333 +1200
@@ -441,10 +441,10 @@

     """"""
     if alignment == ""right"":
-        strings = [s.strip() for s in strings]
+        strings = [s for s in strings]
         padfn = _padleft
     elif alignment == ""center"":
-        strings = [s.strip() for s in strings]
+        strings = [s for s in strings]
         padfn = _padboth
     elif alignment == ""decimal"":
         decimals = [_afterpoint(s) for s in strings]
@@ -455,7 +455,7 @@
     elif not alignment:
         return strings
     else:
-        strings = [s.strip() for s in strings]
+        strings = [s for s in strings]
         padfn = _padright

     if has_invisible:
```

I could have broken something in the process because I don't know the codebase, but a simple `explain` test works fine.

@d33tah would you be willing to submit a PR? That would make it easier for the rest of us to test your changes, and allow the automated testing to run as well. You can see guidelines [here](http://pgcli.com/develop) for cloning the git repo to your machine. The remaining steps would be to make a new branch, commit your changes, push them back to github, and then open a pull request.

@darikg: Done.

Fix released in 0.20.0. 

Please upgrade:

```
pip install -U pgcli
```
",2015-09-14 16:18:28,2015-11-01 09:08:58
848,350,,"When behave fails, it prints out expected and actual output.
:+1: 
",2015-09-13 17:46:52,2015-09-14 06:34:26
849,349,,"Let pgcli load config from .config/pgcli/config
Oh no, still build failed.

The tests are passing locally when I run it in Python 2.7. I'm going to rerun the tests in Travis CI to see if this was a transient failure. 

@j-bennet Can you help? I can't figure out why the tests are failing in Travis. It is passing locally on my box. 

Also can the @dbcli/pgcli-core team please weigh in on this change? This will move the config file (pgclirc), log file(pgcli.log) and history file (pgcli_history) inside the `~/.config/pgcli` folder instead of using the home folder.

I'm looking.

Maybe use [appdirs](https://pypi.python.org/pypi/appdirs/1.4.0) instead?

Also what about backwards compatibility? Check for pgclirc in the home folder and print a warning or something?

Good idea about the warning @darikg. It would be good for the user to know that his ""old"" config is not working anymore and he better port his settings over.

I'd like to take this a step further. I'd like to move the relevant files into `~/.config/pgcli/*`. Then print a warning that such a thing has happened. That way we're not forcing the user to port it manually.

By moving it (instead of copying) we avoid confusion where a user updates his `~/.pgclirc` and wonders why it hasn't taken effect. 

`appdirs` module is tempting, but I wonder if it'll make it harder to provide support for customers in the future. We can't easily tell the user change this value in the config file which is located in `~/.config/pgcli/config` or if you're on Windows check `%USERPROFILE%\AppData\Local\dbcli\pgcli\config`. With `appdirs` we can't reliable say where that file will be located. 

What do you think? 

@inkn I haven't forgotten about this PR. I'll work on this today to see if I can put together a good migration path before merging this in. 

Superseded by #356 
",2015-09-13 00:18:03,2015-09-20 22:07:00
850,348,"It's better to put config file into .config dir.
","Let pgcli load config from .config/pgcli/config, if not exists, load from .pgclirc
I agree that .config/pgcli/config would be a better place. 

But the change you've made doesn't quite cover it. This needs to be updated in a few places in pgcli/main.py file. https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L472

Would you be willing to take a stab? 

Yes,I'm willing to do, but I'm new in learning python, so, if there are problems, please let me know,thanks.It build failed, I will read the code, and try again.

@inkn You're getting close. One small piece you missed was that `~/.config/pgcli` is unrecognizable for os.mkdir(). Because the `~` symbol is not auto-expanded by python. But you can explicitly expand it as follows: 

```
    if not os.path.exists(os.path.expanduser('~/.config/pgcli')):
        os.mkdir(os.path.expanduser('~/.config/pgcli'))
```
",2015-09-11 14:06:12,2015-09-12 09:55:58
851,347,"i.e. ""ALTER SEQUENCE"" products_id_seq RESTART WITH 1""
This would be a very welcome addition.
","""ALTER SEQUENCE"" autocomplete missing
Yes. Adding completion for sequences will be good. 

I'm willing to help anyone who wants to take a stab at it. 
",2015-09-10 21:45:24,
852,346,"Windows 7 x64, python 2.7
Type `\e` to open the external editor (The default notepad.exe in this case)
Type a query, save, close editor
Tab characters in the character are displayed in the pgcli prompt as `^I`
Pressing enter successfully runs the query so it's just a minor display issue
","\e prints tab characters as ^I
I have the same issue when pasting a query with tabs in it, they show up in pgcli as `^I`.",2015-09-03 10:56:47,2018-07-13 20:24:46
853,345,"@dbcli/vcli-core @dbcli/pgcli-core 

This is my first attempt at making the auto-completion refresh in a background thread. I tried it on a database with 40,000 tables in them and I can see a noticeable different in the startup time. I could get more granular by spawning a thread for each type of completion (eg: tables, views, columns etc), but that'll require some granular locking on data-structures.

Since we get a tremendous speed boost with just one thread, I'm not motivated to do multiple threads.

Please pitch in and let me know if there are better ways of doing this. 
","Perform auto-completion refresh in background.
What happens if a second refresh is triggered while an earlier refresh is still occurring?

I didn't think about that. But there is at least two other enhancements I need to do:
1. Instantiate a separate pgexecute object inside the `background_refresh()` method. This will make sure the original pgexecute object is free to run queries entered by a user, while the refresh is happening in the background. 
2. I need to make that thread a daemon thread, so the user can quit pgcli even if the auto-completion is running. The way it is right now, while the auto-completion is in progress an exit command will tie up the terminal and wait until that thread quits. 
3. To address the issue raised by Darik. In background_refresh we set an [Event](https://docs.python.org/2/library/threading.html#event-objects) when completion starts, all the threads that try to start a completion must wait on that event and only proceed when that event is cleared. That way only one of the threads is ever running the completion and additional threads are waiting for their turn. 

Alternatively, we scrap the idea of triggering the completion refresh by an `CREATE` or `ALTER` statement, but instead have one thread that wakes up every 30 seconds to refresh completion. That way there is only one completion thread. Although this solves the problem of having up to date completions, I'm worried about the strain it might add to the database. 

The thread that runs every 30 seconds does sound like a lot of overhead, especially if you're working with a remote server, and especially if you have those 40K tables (where did you get a DB like that)? I would rather stick to refreshing on CREATE/DROP/ALTER, but managing things with wait locks.

I think it might be better to have each new refresh call kill any extant refresh threads, instead of waiting on them. After all, you're only really interested in the results of the most recent refresh.

I also wonder if it would make sense to switch from doing refreshes in-place, to instead create a new pgcompleter object each time, so the parent pgcli doesn't have access to a partially refreshed completer. That way refreshes are atomic.

@j-bennet I wrote a script to generate tables in a loop and the loop ran for 40k iterations. I agree that it will be a strain if we keep doing it every 30seconds over a slow network on a really large database. But we can make that 30 second interval to be adaptive. We time how long it took to refresh the completions and then multiply it by 10 and use that as the interval. So on a fast network with a tiny table set the refresh will happen every 10seconds, but on a large db it can happen as slow as once every 5 mins. Just throwing out ideas at this point. We can table this idea of refreshing periodically for now. We'll come back to it once we figure out how to do the refresh correctly. 

@darikg In python there is no reliable way to stop an active thread. But I do agree that we only need the results from the very last refresh and I like the idea of having the refresh atomic by replacing the pgcompleter object with a new one. So let's marry those two ideas. In each thread we make multiple queries to fill the table names, column names, view names etc. Between each query we check a flag or a semaphore. If the flag is set it means some other thread is waiting do the completion, so we quit early and let the next thread start over. Whichever thread finishes will do the atomic switching of pgcompleter object. There is one caveat, a user might request a  manual refresh using `\#` and get impatient and keep doing it over and over again, which means the refresh routine will never get a chance to finish. So let's ignore requests for manual refresh if a refresh thread is already active. 

It's getting a bit complicated, I'm not sure I like this idea yet. So please feel free to poke holes in it.

I'll try and make prototypes tonight. Feel free to make prototypes yourself if you have other ideas. 

I've made 3 more changes since our discussion. 
1. Use a new pgexecute to run the completion refresh queries.
2. Create a new completer object and atomically swap the new pgcompleter object with the existing one. 
3. Restart the completion refresh when a new refresh request comes in while the first one is still inflight. 

I'm not particularly proud of the code that is added to address point 3. (Contained in this commit: https://github.com/dbcli/pgcli/commit/4f74c2c30a3254e64e1e7e4b0d939a198de1679b). 

I'd love to hear your thoughts and objections to this approach. 

I feel like the code for 3 could be less repetitive if we were able to express the refreshing as an array of functions, something like:

```
def _schemata(completer, pgexecute):
    completer.set_search_path(pgexecute.search_path())
    completer.extend_schemata(pgexecute.schemata())

def background_refresh(self):
        completer = PGCompleter(smart_completion=True, pgspecial=self.pgspecial)
        pgexecute = PGExecute(e.dbname, e.user, e.password, e.host, e.port, e.dsn)

        refresh_funcs = [_schemata, _tables, _views, ] #...etc

        while True:
            for f in refresh_funcs:
                f(completer, pgexecute)

                if self._restart_completion.is_set():
                    self._restart_completion.clear()
                    continue
```

I think the difficulty here is that you did a really good job early on of isolating your pgexecute and pgcompleter classes, so you end up writing a bunch of boilerplate to interface between them. Maybe move that code in to a third class, kinda like:

```
class PGCompleterRefresher():
    def __init__(self, completer, pgexecute):
        self.completer = completer
        self.pgexecute = pgexecute

    def get_functions(self):
        # returns a list of functions required for refreshing
        return [self.schemata, self.tables, self.views]

    def schemata(self):
        self.completer.set_search_path(self.pgexecute.search_path())
        self.completer.extend_schemata(self.pgexecute.schemata())

    def tables(self):
        self.completer.extend_relations(self.pgexecute.tables(), kind='tables')
        self.completer.extend_columns(self.pgexecute.table_columns(), kind='tables')

    def views(self):
        self.completer.extend_relations(self.pgexecute.views(), kind='views')
        self.completer.extend_columns(self.pgexecute.view_columns(), kind='views')
```

It was a conscious decision to isolate pgexecute and pgcompleter. I hate tight coupling of classes. 

I think your idea of a class called CompletionRefresher is what we need. I can see this completion logic getting even more complicated. For example: We might choose to refresh only certain completion candidates (say Tables only or Functions only etc) depending on the scenario. So encapsulating the individual refreshers in nice atomic methods is a good idea. I'll give that a shot. 

This branch is ready for review. I've added a new CompletionRefresher class as suggested by Darik.

I had to add an OrderedDict module in the packages since OrderedDict is a Python 2.7 feature. 

It took a while because it wasn't quite as straight forward as I had expected. But I think I've covered all the bases.

Please review the code and provide feedback. 

I think your CompletionRefresher needs some unit tests @amjith. On another note, why does it matter in what order you refresh  completions?

The order matters because we need to populate the schema before we can populate the tables. Otherwise the hierarchy falls apart. 

I'll try to add some tests for that class.

Fair enough. This is nicer than trying to implement dependency resolution between handlers. Thanks for explaining. 

I'll be honest with you, I don't know how to write tests for this class. 

I can try to mock some of the refresh functions but then I'm not really sure what I'm testing. If you have some thoughts on testing it, please pitch in. 

Let me take a stab at it, I may have some time tomorrow.
On Sep 4, 2015 8:03 PM, ""Amjith Ramanujam"" notifications@github.com wrote:

> I'll be honest with you, I don't know how to write tests for this class.
> 
> I can try to mock some of the refresh functions but then I'm not really
> sure what I'm testing. If you have some thoughts on testing it, please
> pitch in.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/pull/345#issuecomment-137896732.

This is awesome. I left some trivial suggestions in a couple spots. I agree that unit-testing the refresher is pretty tricky -- we'd have to mock out pgexecute and pgcompleter, and then there's not much left to actually test. Adding `\refresh` to the behavioral tests would be cool though.

I've updated the PR to address the comments. I'm hopeful that @j-bennet might be able to write some unit-tests for it. Behavioral tests would be nice but I don't think they'll capture the nuances of the background thread or competing refresh calls.

But if it turns out to be too hard, we can merge without tests. 

Just for kicks I hacked in https://github.com/dbcli/pgcli/compare/amjith/completion-refresh-background...darikg/show-refreshing-status that prints ""Refreshing completions..."" in the statusbar while the refreshing thread is running. It blinks in and out pretty quickly for my biggest database, but might be useful for larger/slower databases?

:smile: That's a clever way to use the callbacks. I knew having that callbacks as a list would come in handy some day. I didn't realize it was going to be useful this quickly. ;)

Well done!

I noticed that at first launch of pgcli the 'Refreshing completions...' doesn't go away until press enter. But if I enter \refresh it does go away when the refresh is done. 

I'd say merge your branch into this PR and we'll merge it all together to master. :)

It's not much but I added some tests:
https://github.com/dbcli/pgcli/blob/j-bennet/completion-refresh-test/tests/test_completion_refresher.py

The tests seem to be ok now. I agree, it's tricky, there needs to be much mocking and not that many things you're able to verify, but covering some of it with tests is better than none.

Thank you very much for adding the tests. I appreciate it. 

I think you've done an excellent job of testing the thread interaction which is the important part of the refresher class without worrying about the database interactions. 

I like it!

There was one thing that didn't make sense for me, so I've requested some explanation from you, but other than that we're ready to roll that into this PR for merge. 

I rebased my stuff on top of your latest to get rid of the merge conflict. I just need to fix that bug you mentioned about 'Refreshing completions...' showing up on launch.

This commit adds end-to-end test, for completeness.
https://github.com/dbcli/pgcli/commit/6664337a85ede3fc2955cf4b43423efbf009466e

Thank you for adding the end to end test. Can you merge your branch to mine and push it up? So this PR will have all the changes in one place.

I won't be able to do it until tomorrow. But feel free to do the merge yourself if you'd rather have it sooner. 

@amjith Merged my tests into your branch.

@darikg Any update on merging your branch? If you don't have the time to work on that corner case issue, let me know, I'll take a look. 

It should be good to go - can you test it and make sure the refreshing status disappears after startup like it's supposed to? I'm not sure how to merge it in github - make a PR against this branch and then accept it?

> On Sep 11, 2015, at 10:39 PM, Amjith Ramanujam notifications@github.com wrote:
> 
> @darikg Any update on merging your branch? If you don't have the time to work on that corner case issue, let me know, I'll take a look.
> 
> —
> Reply to this email directly or view it on GitHub.

Thanks for fixing the bug. Everything is merged in. I've checked it out one last time to make sure it all works. I'm happy with it. So merging. 

/cc @dbcli/vcli-core The changes in this PR is what is needed in vcli to get completion refresh running in background. Let us know if you have any questions. 
",2015-08-28 06:14:40,2015-09-12 22:02:16
854,344,"The 'read_from_file' method was removed but is still being called in external editor command. This adds it back, plus an integration test to make sure the call to external editor works.
","Added read_from_file back into iospecial.
These integration tests are so cool

Cool. Thanks for the explanation. 

Looks good. :monkey: 
",2015-08-25 05:31:56,2015-08-26 02:26:16
855,343,"@darikg These are the regression tests for the WHERE clause completion from PR #341.

You're right I should have added the tests with the PR. My bad. 
","Add tests for where clause with keywords.
:100:
",2015-08-25 02:32:42,2015-08-25 13:10:51
856,342,"This fixes #270.
","Autocompletion in named queries.
Looks like the branch is not up to date. I'll make the regex change and rebase against master before merging. 

But other than that it's a good change. 

I believe you (@j-bennet) added autocompletion for the named queries in mycli where it suggests the named query names after \n and \nd. Do you want to take a stab at porting that over? 

I can port it over to mycli.

What I meant was porting over this functionality (https://github.com/dbcli/mycli/commit/913bcf71cd342e9de195b4d55cbcd482c6a54d56) from mycli to pgcli. 

That will nicely complement the named query completion. 

This is good to merge. Thanks for enhancing the completion for named queries. 

:umbrella: 

@amjith I must be sleepy. :) Thought this was already ported! Ok.

Just noticed today that [strip_named_query](https://github.com/dbcli/pgcli/blob/d222e085b7e4df351c76ca582952c7cca8b8940e/pgcli/packages/sqlcompletion.py#L31) is a nested method under `suggest_type`. Is that correct? It doesn't seem to depend on anything in the outer scope. Seems like it's just unnecessarily recompiling that regex everytime `suggest_type` gets called. 

Yikes. I moved it into a separate function call for readability but the regex should probably be moved higher up for performance. Good catch @darikg.
",2015-08-24 20:36:31,2015-08-26 04:45:53
857,341,"@darikg Can you review the PR? 

This is to replace #340. 

I've made the WHERE clause to always return columns, functions and keywords. Since keywords is listed at the bottom of the list, we won't seen them most of the time in the menu unless the user is going for a keyword specifically. 
","Amjith/where clause completion
This makes sense. At first I thought suggesting keywords everywhere was kind of overkill but `INTERVAL` is a perfect example of why we pretty much have to. 

Yeah I worried about adding keywords but then it ranks so low in the list, it shouldn't be a hassle. 

Is this PR ready for merge or are you still reviewing the changes? 

Yeah I'll ago ahead and merge it. It might be nice to have some regression tests specifically for the `LIKE` and `INTERVAL` suggestions in case we keep tweaking keyword suggestions down the road but we can do that later. 
",2015-08-23 08:45:39,2015-08-24 21:00:57
858,340,"Fixes dbcli/mycli#135 (Sorry don't have mycli installed so fixing it here instead)

Statements like `SELECT * FROM foo WHERE bar` now suggest only keywords. (Is that right? I feel like I'm forgetting some other syntax option)
","Fix autocomplete after an identifier in a where-clause
I'm still running some tests and investigating this.

Your PR seems to work for this case but I wonder if this fix goes far enough. I'll give it a thorough test before merging. 

Thanks for handling this so promptly. 

I was testing this case https://github.com/dbcli/mycli/issues/16

```
SELECT * FROM foo where created > now() - INTERVAL 1 DAY
```

I had to add `INTERVAL` to the list of keywords. When I typed 

```
SELECT * FROM foo WHERE created > now() - IN
```

It shows `INT`, `INTEGER` and `INTERVAL`, but when type `INT` the `INTERVAL` suggestion is gone and we only get columns and functions. 

I think the problem is after a `WHERE` clause we need to suggest columns, functions and keywords. 

I made that change in a separate branch and I'm trying to get the tests passing since it'll break a lot of existing tests.
",2015-08-21 16:52:19,2015-08-24 21:00:15
859,339,,"Disabled unicode_literals warning in click. Close #338.
Thank you for the patch. :jeans: 
",2015-08-18 16:11:58,2015-08-19 05:40:57
860,338,"It looks like this:

```
$ pgcli vendors
/home/iryna/src/pgcli/pgcli/main.py:462: Warning: Click detected the use of the unicode_literals __future__ import.  This is heavily discouraged because it can introduce subtle bugs in your code.  You should instead use explicit u"""" literals for your unicode strings.  For more information see http://click.pocoo.org/python3/
  @click.argument('username', default=lambda: None, envvar='PGUSER', nargs=1)
Password: 
Version: 0.19.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
vendors> 
```

According to an explanation [here](http://click.pocoo.org/5/python3/), we probably want to add `click.disable_unicode_literals_warning = True` to get rid of it.
","In new version of click, there's a warning about use of unicode_literals",2015-08-18 15:46:00,2015-08-19 05:40:58
861,337,"Fixes #236 
","Don't end multi-line query within a quote
Wow. This is fantastic. 

I'm impressed you've managed to get this working with just regex. I've been testing it for an hour now and it works great. Good job on tackling a thorny issue. 

I was reading through the code changes and I have one minor comment about the reuse of index variable in the for loop, other than that it looks great. 

That's a fair point -- I updated that line to be more clear

Looks good. Thanks for updating it. 

:mega: 
",2015-08-18 10:20:48,2015-08-20 04:54:11
862,336,"This fixes #335. 

@darikg  Can you review? 
","Multiple queries with syntax errors
Now after an error, it continues to run queries -- I think it should stop after an error. E.g. the 'select 3' query below shouldn't run.

```
test> select 1; select; select 3;
+------------+                   
|   ?column? |                   
|------------|                   
|          1 |                   
+------------+                   
SELECT 1                         
syntax error at end of input     
LINE 1: select                   
              ^                  

+------------+                   
|   ?column? |                   
|------------|                   
|          3 |                   
+------------+                   
SELECT 1                         
```

This is a conundrum. This new behavior complies with how psql behaves. But I remember making a big deal about stopping the execution of statements if one of them has an error in it.

What are your thoughts on this matter? 

I think it should match psql behavior.

It looks like psql has an `ON_ERROR_STOP` variable which controls this behavior

I'm torn on the decision. 

I want the default behavior for interactive commands to match psql. But running scripts using `\i` should stop after the first error.

I didn't know about `ON_ERROR_STOP`, but in order to use it we need to add support for `SET` which will toggle the feature at runtime. 

Unless one of you is not happy with the current behavior, let's merge this change as is, then add a new special command or a command-line switch to control this behavior. 

Agreed
",2015-08-18 07:39:36,2015-08-19 15:00:25
863,335,"E.g.

```
test_db> select 1; select;
syntax error at end of input
LINE 1: select
```

The output from the first command should be printed before the error traceback in the second 
","Errors in later semicolon separated commands hide output from earlier commands
Good catch. 

I think this happens because we raise the failure as an exception from pgexecute.run() which is caught in main.py and return just the error. 

We should probably catch the exception inside pgexecute.run() and convert it to a message and return that. 

Do you want to take that or should I? 

Go ahead!

On Mon, Aug 17, 2015 at 12:43 PM, Amjith Ramanujam <notifications@github.com

> wrote:
> 
> Good catch.
> 
> I think this happens because we raise the failure as an exception from
> pgexecute.run() which is caught in main.py and return just the error.
> 
> We should probably catch the exception inside pgexecute.run() and convert
> it to a message and return that.
> 
> Do you want to take that or should I?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/issues/335#issuecomment-131885620.
",2015-08-17 15:25:20,2015-08-19 15:00:25
864,334,"@darikg Can you review? 

This PR enables `\i` to run a file with multiple queries (semi-colon separated) and display the results for each of them. Previously only the results from the last query was displayed.
","Make \i to run multiple commands and show results.
Looks pretty good. One shortcoming is that if you have multiple commands in the sql file, and one of the commands has a syntax error, only the error message is shown, and not the results from the preceding commands.

edit: Actually I see now that's a limitation of pgexecute.run(), not the \i special command.
",2015-08-17 04:52:28,2015-08-17 15:22:29
865,333,"Using dsn-based approach (no config parsing required).
Connect #289.
","Added ""service"" option.
[![Code Health](https://landscape.io/badge/222213/landscape.svg?style=flat)](https://landscape.io/diff/210463)
Repository health increased by 0.03% when pulling **[9a35e5e](https://github.com/dbcli/pgcli/commit/9a35e5ef05d5f623f5362f85be9d2f240e6cac19) on j-bennet/clean-pg-service-conf** into **[62fddef](https://github.com/dbcli/pgcli/commit/62fddef501465e7ffe4f4eec5562269b7fb5077c) on master**.
- [1 new problem was found](https://landscape.io/diff/210463) (including 0 errors and 0 code smells).
- [1 problem was fixed](https://landscape.io/diff/210463/fixed) (including 0 errors and 0 code smells).

The PR works as expected. It's nice that we don't have to handle the parsing of pg_service.conf in pgcli. 

Good find that dsn is handled automatically by psycopg2. 

I think once you replace fetchall() with fetchone(), you might consider getting rid of the _select_one() function since it will be doing nothing more than proxying the function call. 

Good point about fetchone! Changed that. I'm not sure I want to get rid of helper function, since it's not a 1-liner but 2-liner, and it's used 4 times.

Looks good. Thank you for handling this. :)

:100: 
",2015-08-14 16:28:43,2015-08-16 17:34:51
866,332,"@j-bennet Can you review this PR? 

It adds a `\pager` command to special commands. 

This will address #286. 
","Add a \pager special command.
It works fine, but there's a bit of odd behavior. Steps:

1) I open pgcli and select from ""wide"" table. See screenshot 1.
<img width=""1258"" alt=""pgcli-wide-1"" src=""https://cloud.githubusercontent.com/assets/637013/9216493/dec66f46-406e-11e5-87b6-718a38bbe83c.png"">

2) I press ""right"" arrow key to scroll right. It scrolls, but the table ""jumps"" up to the top of my terminal screen. See screenshot 2.
<img width=""1258"" alt=""pgcli-wide-2"" src=""https://cloud.githubusercontent.com/assets/637013/9216502/0dd89250-406f-11e5-93d6-542d66ecfc0f.png"">

Expected: for the table to stay at the same vertical position on screen.
Actual: table shifted up.

It's no big deal, if everyone else is fine with it, it's good to merge.

I can't do much about that one. It's the behavior of `less` command.
",2015-08-12 03:57:53,2015-08-12 05:55:06
867,331,"This is to address issue #289. Pgcli can be run with:

```
pgcli --service boo
```

and configuration for service name ""boo"" would be read from ~/.pg_service.conf or a system-wide pg_service.conf file.

It does not exactly copy psql behavior, as it uses ""--service=boo"" instead of ""service=boo"". If this is a problem, let me know.
","Add --service option to pgcli
[![Code Health](https://landscape.io/badge/219100/landscape.svg?style=flat)](https://landscape.io/diff/208505)
Repository health decreased by 0.29% when pulling **[c318155](https://github.com/dbcli/pgcli/commit/c3181555885ca8b438b3808b5c8012cbf5861d63) on j-bennet/pg-service-conf** into **[cec4e0b](https://github.com/dbcli/pgcli/commit/cec4e0bd0e2008bac9843b80f1690de4b3a5d45f) on master**.
- [3 new problems were found](https://landscape.io/diff/208505) (including 0 errors and 3 code smells).
- No problems were fixed.

How hard would it be to make it compliant with Postgres format? I'd prefer not to have deviations unless absolutely necessary, so people can use pgcli as a drop in replacement for psql. 

@amjith Looking into implementing ""service=something"" format to comply with psql.

Going to rework this.

[![Code Health](https://landscape.io/badge/221519/landscape.svg?style=flat)](https://landscape.io/diff/209912)
Repository health decreased by 0.16% when pulling **[2b8e6cf](https://github.com/dbcli/pgcli/commit/2b8e6cfa2a41727d233e0eaa58f36c02658a85ac) on j-bennet/pg-service-conf** into **[cec4e0b](https://github.com/dbcli/pgcli/commit/cec4e0bd0e2008bac9843b80f1690de4b3a5d45f) on master**.
- [3 new problems were found](https://landscape.io/diff/209912) (including 0 errors and 2 code smells).
- [1 problem was fixed](https://landscape.io/diff/209912/fixed) (including 0 errors and 0 code smells).

Closing because of newer PR #333.
",2015-08-09 05:02:00,2015-08-14 16:29:54
868,330,"I'd like to see pgcli embedded in tools like `django_extensions`. (Just like `shell_plus`.)

What we need to do for that is have one simple entry point that takes all the database parameters as input. (The `main.cli` method with all the click arguments doesn't look like a good way to embed. You don't want to accidently use environment variables, or options that are passed to the main executable.)

Right now, one way to do it is by calling these three lines by hand:

``` python
pgcli = PGCli()
pgcli.connect(database, host, user, port)
pgcli.run()
```
","embed() entry point.
Right now there is a django-extension to embed pgcli. https://github.com/ashchristopher/django-pgcli

I know that @darikg did a bunch of refactor to embed pgcli in ipython. All of that work is encapsulated in this well named file called magic.py. https://github.com/dbcli/pgcli/blob/master/pgcli/magic.py

So I'm not entirely sure how the embed() entry point will be used. Can you explain it a little bit? 
",2015-08-08 18:05:14,
869,329,"```
pgcli -h localhost -p 3306 -U root
```

Always get a error like this:

```
received invalid response to SSL negotiation: l
```

Thanks!!
","Connect MariaDB error
Sorry! my fault ! mycli is what i want!
",2015-08-08 16:38:25,2015-08-08 16:55:29
870,328,,"Upgrade to prompt_toolkit 0.46
The changelog: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/CHANGELOG

Relevant for pgcli:
- the meta text is displayed when completions are shown in ""wide"" multicolumn mode.
- Python 2.6 fix.
- Correct indentation of query.
- Several fixes/improvements for forward/backward search.

Further, I enabled system bindings. This was already longer in prompt-toolkit, but just not enabled. Pressing Control-Z will now suspend the application (use fg to bring back to foreground), and meta+! will show the ""system prompt"".) And I had to rename/add a few keys in the styling. (I noticed they were changed already a while ago as well.)

Have a try.
Jonathan

[![Code Health](https://landscape.io/badge/219035/landscape.svg?style=flat)](https://landscape.io/diff/207427)
Code quality remained the same when pulling **[954fc15](https://github.com/jonathanslenders/pgcli/commit/954fc158fa0bd4cc0eb935b17acfad2c4a9d88d0) on jonathanslenders:prompt_toolkit-0.46** into **[cec4e0b](https://github.com/dbcli/pgcli/commit/cec4e0bd0e2008bac9843b80f1690de4b3a5d45f) on dbcli:master**.

@jonathanslenders Thanks for the PR. I just got done testing it. 

I like the meta info at the bottom of the wide_menu. Good choice. :)
The auto-indent for multi-line queries works great. Thank you!
Can you tell me where to learn more about system-keybindings? I see that C-z and M-! works now, but is there more? 
I also like the C-r reverse-search prompt at the bottom. 

Looks like a very nice release for prompt_toolkit.

@dbcli/pgcli-core Can you please try it out as well? 

About the key bindings, there are currently 10 sets of bindings that can be enabled/disabled according to certains conditions in the `KeyBindingManager`: https://github.com/jonathanslenders/python-prompt-toolkit/blob/dd5c76f998e724f4252d4163acb5c15d74c7df91/prompt_toolkit/key_binding/manager.py#L26

```
    load_basic_bindings
    load_basic_system_bindings
    load_emacs_bindings
    load_emacs_open_in_editor_bindings
    load_emacs_search_bindings
    load_emacs_system_bindings
    load_vi_bindings
    load_vi_open_in_editor_bindings
    load_vi_search_bindings
    load_vi_system_bindings
```

Actually, all the key bindings that are by default in GNU readline should also be present here. If not, I consider it a bug. One other thing that was implemented was the 'arg'-style repetition for `Control-R`. You can type `Control-R`, type what you are searching for, type again `Control-R` to go to the previous instance. Now if you do `meta+4` followed by `Control-R` it goes four matches back. Same for `Control-S`. Another useful thing (already present in the previous version.) `Control-X` followed by `Control-E` in emacs mode opens the editor.
One limitation for now in the Vi navigation mode is that numbers should always come first. `4dw` is possible. `d4w` is not. Maybe I'll find a way, but that's no priority. (Nobody noticed yet.)

@amjith : what is Meta + ! on a Mac? I tried ""!"" with Command, Ctrl, Option, and it does not seem to do anything.

Alt-Shift-!
On Aug 9, 2015 10:00 AM, ""Iryna Cherniavska"" notifications@github.com
wrote:

> @amjith https://github.com/amjith : what is Meta + ! on a Mac? I tried
> ""!"" with Command, Ctrl, Option, and it does not seem to do anything.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/pull/328#issuecomment-129217251.

Or Escape followed by '!'. (Not at the same time.)

looks good to me

Thank you for the PR Jonathan. 

:milky_way: 
",2015-08-08 12:16:02,2015-08-11 20:08:49
871,327,"``` bash
jonathan @ arch-jonathan [master] ~/git/pgcli
[pt] > PAGER= pgcli --user postgres
```

``` python
Traceback (most recent call last):
  File ""/home/jonathan/env/pt/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.19.0', 'console_scripts', 'pgcli')()
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/core.py"", line 664, in __call__
    return self.main(*args, **kwargs)
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/core.py"", line 644, in main
    rv = self.invoke(ctx)
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/core.py"", line 837, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/core.py"", line 464, in invoke
    return callback(*args, **kwargs)
  File ""/home/jonathan/git/pgcli/pgcli/main.py"", line 461, in cli
    pgcli.run_cli()
  File ""/home/jonathan/git/pgcli/pgcli/main.py"", line 353, in run_cli
    click.echo_via_pager('\n'.join(output))
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/termui.py"", line 203, in echo_via_pager
    return pager(text + '\n', color)
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/_termui_impl.py"", line 263, in pager
    return _pipepager(text, os.environ['PAGER'], color)
  File ""/home/jonathan/env/pt/lib/python3.4/site-packages/click-4.1-py3.4.egg/click/_termui_impl.py"", line 292, in _pipepager
    if color is None and cmd_detail[0] == 'less':
IndexError: list index out of range
```

It's a bug in click. I created an issue there: https://github.com/mitsuhiko/click/issues/403
Just make sure to upgrade when that's fixed.
","pgcli crashes when PAGER is an empty string.
Looks like it's fixed in click. But they don't release often. So I'll keep an eye on it and bump the minimum version when it is released. Thanks!

This was released in 5.0: https://github.com/pallets/click/commit/349875d795837a8ca1173621001bb585e1640207.
",2015-08-08 11:08:34,2017-03-07 03:28:08
872,326,"@darikg Can you please review? 

This is an attempt at addressing #310. 

It uses `eval()` which is generally frowned upon. But I can't think of a better way to do this. 

Thoughts? 
","Add custom styles for menus, toolbars etc.
Nice! I replaced `eval` with `pygments.string_to_tokentype`. 

I didn't know about `string_to_tokentype`. Thank you for doing that. :)
",2015-08-07 04:20:22,2015-08-07 13:43:44
873,325,"This is to address #302. Adds pgclirc location as command line argument or environment variable.
","Pgclirc file location is being read from command line or env.
[![Code Health](https://landscape.io/badge/217610/landscape.svg?style=flat)](https://landscape.io/diff/206016)
Repository health decreased by 0.12% when pulling **[e0c3545](https://github.com/dbcli/pgcli/commit/e0c3545dc3e44b59d8fbc540187ad491a5dfff27) on j-bennet/config-file-argument** into **[ad9c99f](https://github.com/dbcli/pgcli/commit/ad9c99f79028ee6a508ea3dfdad63215424a6fa1) on master**.
- [1 new problem was found](https://landscape.io/diff/206016) (including 0 errors and 1 code smell).
- No problems were fixed.

@darikg Would you mind reviewing this and merging? I'm swamped. 
",2015-08-06 05:38:27,2015-08-07 13:31:57
874,324,,"Fix #322
Yup!! 

Thanks for the quick turn around. :)

:nut_and_bolt: 
",2015-08-05 21:22:35,2015-08-05 22:04:33
875,323,"Pretty easy -- just bump sqlparse from 0.1.14 to 0.1.16, which includes some improvements in alias extraction.
","Fix #283
Works great. :)

Thank you for finding a more robust way to do this. I would have started parsing through quotes or some other shenanigan. 

And thank you for adding a nice set of tests. 

:baby_chick: 
",2015-08-05 21:22:07,2015-08-05 22:43:05
876,322,"""\connect"" completes with ""ACCESS"", ""ADD"", ""ALL"", etc instead of the table names.
","""\c"" completes, but ""\connect"" doesn't.
Looks like the ticket auto-closed when I merged the PR (Thanks @darikg). But the fix is available in master. 

You can install directly from master (I'm sure you already know this). 

```
pip install https://github.com/dbcli/pgcli/archive/master.zip
```
",2015-08-05 18:20:06,2015-08-05 22:04:33
877,321,,"Fixes for test database being in use problem.
Nope. :( Still working on it.

This build passed but the previous one failed. I think this PR helps but there is something else going on that I didn't catch yet.

Thanks hopefully this reduces the false positives. 
",2015-08-05 15:53:47,2015-08-05 21:55:51
878,320,,"Add regression test for #317
@j-bennet Can you check why the integration tests always fail the first time?

It seems like the Ctrl-D is the one that always fails. I'm not going to rerun the tests so you get a chance to review the failure. 

@amjith Looking.

Traceback for my reference:

```
Traceback (most recent call last):
  File ""/home/travis/virtualenv/python2.7.9/bin/behave"", line 11, in <module>
    sys.exit(main())
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/behave/__main__.py"", line 109, in main
    failed = runner.run()
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/behave/runner.py"", line 672, in run
    return self.run_with_paths()
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/behave/runner.py"", line 693, in run_with_paths
    return self.run_model()
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/behave/runner.py"", line 504, in run_model
    self.run_hook('after_all', self.context)
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/behave/runner.py"", line 405, in run_hook
    self.hooks[name](context, *args)
  File ""features/environment.py"", line 68, in after_all
    context.conf['pass'], context.conf['dbname'])
  File ""/home/travis/build/dbcli/pgcli/tests/features/db_utils.py"", line 70, in drop_db
    cr.execute('drop database if exists %s', (AsIs(dbname),))
psycopg2.OperationalError: database ""pgcli_behave_tests_2_7_9"" is being accessed by other users
DETAIL:  There are 1 other session(s) using the database.
```

Looks like features (test cases) are being run in parallel, so while this one is trying to create and drop db, other ones are trying to work with the same db. Will fix.

I'm going to merge this for now. I know the integration tests are failing. It'll be fixed in the future. 
",2015-08-05 13:41:53,2015-08-05 22:01:15
879,319,"@darikg Can you take a quick look at the change log? I'm going to release this bug fix right away. 
","Update changelog for 0.19.1 release.
Looks good go ahead

> On Aug 4, 2015, at 10:11 AM, Amjith Ramanujam notifications@github.com wrote:
> 
> @darikg Can you take a quick look at the change log? I'm going to release this bug fix right away.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/dbcli/pgcli/pull/319
> 
> Commit Summary
> 
> Update changelog for 0.19.1 release.
> File Changes
> 
> M changelog.rst (8)
> Patch Links:
> 
> https://github.com/dbcli/pgcli/pull/319.patch
> https://github.com/dbcli/pgcli/pull/319.diff
> —
> Reply to this email directly or view it on GitHub.
",2015-08-04 14:11:50,2015-08-04 16:54:26
880,318,,"Fix issue #317
It looks like a flaky behavioral test. @j-bennet Can you take a look at why this is failing? 

https://travis-ci.org/dbcli/pgcli/jobs/74065367

I'm going to rerun that build. 

All pass!

Thanks for the quick turn around @darikg.

:cherries: 
",2015-08-04 13:46:33,2015-08-04 14:08:45
881,317,"Just entering `selt *` leads to the following traceback in 0.19:

``` python
Traceback (most recent call last):
...
  File ""/home/django/.virtualenvs/pgcli/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 249, in get_completions                                                                                                                                                                                                                                                      
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/home/django/.virtualenvs/pgcli/lib/python2.7/site-packages/pgcli/packages/sqlcompletion.py"", line 85, in suggest_type
    full_text, identifier)
  File ""/home/django/.virtualenvs/pgcli/lib/python2.7/site-packages/pgcli/packages/sqlcompletion.py"", line 170, in suggest_based_on_last_token
    if prev_keyword.value == '(':
AttributeError: 'NoneType' object has no attribute 'value'
```
","traceback in completion on ""selt *""
That was a good catch. We have a fix in master (Thanks to @darikg). I'll be releasing a new version asap. 

In the meantime you can install pgcli directly from master using: 

```
pip install https://github.com/dbcli/pgcli/archive/master.zip
```

A new version (0.19.1) is now released. Thanks for reporting the issue. 
",2015-08-04 12:27:58,2015-08-05 05:31:15
882,316,"in 
https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py  datatypes_query

will throw  psycopg2.ProgrammingError: column el.typarray does not exist

when el.typarray does not exist.

![screenshot from 2015-08-04 17-47-27](https://cloud.githubusercontent.com/assets/1668083/9058051/e72122b0-3ad0-11e5-8508-dda60242d794.png)
","psycopg2.ProgrammingError: column el.typarray does not exist
What version of PostgreSQL are you using?

> On Aug 4, 2015, at 5:48 AM, 陆建波 notifications@github.com wrote:
> 
> in 
> https://github.com/dbcli/pgcli/blob/master/pgcli/pgexecute.py datatypes_query
> 
> will throw psycopg2.ProgrammingError: column el.typarray does not exist
> 
> when el.typarray does not exist.
> 
> —
> Reply to this email directly or view it on GitHub.

@darikg  Postgresql 8.2.15(Greenplum Database 4.2.8.3)

Thanks. That query was written on postgresql 9.something so I guess it's not backwards compatible. I'll try to fix it.

@lujianbo Are you using a special version of pgcli? Because I don't think it will even open when you use Postgres versions less than 9.x. 

<code>psycopg2.ProgrammingError: column el.typarray does not exist
LINE 17: ...                   WHERE   el.oid = t.typelem AND el.typarra...</code>

@amjith  I got the same error,   I'm using the latest  version`0.19.0` of pgcli

btw: postgresql version is 8.x

It works fine with PostgreSQL 9.4.1

Yeah Postgres 8.x was never a target for pgcli. It requires a lot of work to add support for older versions of postgres. There is an effort under way to try and add support for older versions. #18 

Oh, I see.  Thanks!

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-08-04 09:48:11,2016-06-29 04:30:00
883,315,"Is there a way to get the `psql` behavior with `\x auto`?
","Does not respect \x auto
Yes. This is a known issue. I think it is possible to detect the size of the terminal using prompt_toolkit library. 

So it is possible to add this feature. But I just haven't gotten around to doing it. I'll take this into consideration. 

I think this issue is resolved and can be closed with the next release

Yes. @carymrobbins If you'd like to give it a shot now you can always install pgcli from master as follows: 

```
pip install https://github.com/dbcli/pgcli/archive/master.zip
```

Looks good, thanks!
",2015-08-03 15:32:07,2015-09-24 16:05:12
884,314,"We're getting ready to do another release. 

@dbcli/pgcli-core Can you please check the changelog to see if I've missed anything? 

Give it a thumbs up if you're satisfied. I'll merge it in once I get a quorum.
","Amjith/changelog 0.19.0
:+1: 

[![Code Health](https://landscape.io/badge/216132/landscape.svg?style=flat)](https://landscape.io/diff/204597)
Code quality remained the same when pulling **[064e670](https://github.com/dbcli/pgcli/commit/064e670eaad711abceda0e08af72a81e8d0bb45b) on dbcli:amjith/changelog-0.19.0** into **[68aba40](https://github.com/dbcli/pgcli/commit/68aba40b2dfc9ae68657bcd2139a1897f3ab7f84) on dbcli:master**.

:+1: 

Thanks for catching the typo. 

Merging now. 
",2015-08-03 04:16:50,2015-08-03 15:49:53
885,313,"@j-bennet Can you take a look? 

This is just adding a comment in the config file. But this seems to trip up people all the time. 
","Add a comment about the keybindings in pgclirc.
I've update this PR with an additional commit. I've renamed the config option to show completions in columns. This is a new change that was introduced by the upgrade of prompt_toolkit to 0.45. 

I felt that `wider_completion_menu` instead of `display_completions_in_columns` is a more intuitive name. 

Verified, doesn't break anything. Merging.
",2015-08-02 23:22:15,2015-08-03 03:56:11
886,312,"@amjith @dbcli FYI, your repo has been featured today on @CodeHuntIO   

http://codehunt.io/sub/pgcli/

**TL;DR** Code Hunt helps programmers discover awesome code — like yours!   

This pull-request adds a ""vote"" badge to your README.md:   

[![CodeHunt.io](https://img.shields.io/badge/vote-codehunt.io-02AFD1.svg)](http://codehunt.io/sub/pgcli/?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)   

Fingers crossed that we can drive more attention to your brilliant work.   

Happy coding!
Chris ^_^   

p.s. I hope you found this PR helpful, if not please [let me know](mailto:chris@codehunt.io).   

p.p.s I've also tweeted about you here https://twitter.com/hunt_python/status/626730324119187456
","Add a Code Hunt vote badge to README.rst
Hi Chris,

Thank you for the PR.

I'd like to keep the badges in the README to a minimum. So I've decided not to merge this PR.

Good luck with codehunt. It looks like a promising initiative. 

Cheers!
Amjith

@amjith, totally understand, thanks for pgcli and the kind words :)
",2015-08-01 18:20:46,2015-08-02 02:19:32
887,311,"@darikg Can you review? 

Bug: Entering `select * from foo f left join bar b,` will crash pgcli. Notice the trailing comma at the end. 

After the merge that should be handled correctly. 
","Fix the crashing autocompletion on joins.
[![Code Health](https://landscape.io/badge/215639/landscape.svg?style=flat)](https://landscape.io/diff/204302)
Code quality remained the same when pulling **[09ccb53](https://github.com/dbcli/pgcli/commit/09ccb535ec60420a2239f6a4146ba26cf0e3f957) on dbcli:amjith/autocompletion-crash** into **[1f147f5](https://github.com/dbcli/pgcli/commit/1f147f5e7adf14daea1f59d2ebc88e7539c7e4a7) on dbcli:master**.
",2015-08-01 15:32:02,2015-08-02 14:34:50
888,310,"RT
","Is there a way to modify popup menu colors?
I don't know what you mean by RT. 

But to answer your question, right now there is no easy way to change it. We wanted to make sure the suggestions and the menu are visible in any background, so we decided to hard code it to a known value. 

Is there a specific reason why you want this changed?

Because the selected candidate background color is not very clear for me.
I usually use black background & white foreground for selected candidate, and white background & black foreground for candidates.

Can you take a screenshot with the completion menu showing and paste it here?

These are the lines that control the colors for the completion menu. 

https://github.com/dbcli/pgcli/blob/master/pgcli/pgstyle.py#L20-L21

It is possible to set those colors from a function argument, but I'm reluctant to add more config options unnecessarily. Reason: http://c2.com/cgi/wiki?ConfigurabilityIsTheRootOfAllEvil

But if you have a legitimate reason I'm open to changing that behavior. 

![pgcli-popup-menu-screenshot](https://cloud.githubusercontent.com/assets/378699/9025517/619be5cc-393a-11e5-9a4b-d6663203682b.png)

@amjith Can you show me how to modify those colors from a function? I learned a little about Python before, but I forgot it now.

Here's one way to do it: 

https://gist.github.com/amjith/6825dc9693120db529e5#file-pgstyle-py-L20

You'll see that style_factory takes in two new arguments `completion_selected_color` and `completion_unselected_color` which are used to set the colors down below on Line 20 and 21. 

This needs to be called from the main.py file here: https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L255

Where you'll pass in two additional arguments for the colors as strings which are formatted like this: 
`bg:#ffffff #000000`

If you were to do this, then you'll have to maintain a separate fork of pgcli with your own customizations. I'm not convinced that this is a necessary config option. 

People always like to play with colors.

The hardest part is that colors are actually defined using Pygments colorschemes, which are Python code, and pgcli uses plain text for configuration files.
A configuration section to override the defaults could look like this:

```
[colors]
Token.Menu.Completions.Meta = 'bg:#448888 #ffffff'
Token.Menu.Completions.ProgressButton = 'bg:#003333'
```

However, writing a parser to parse that (without using ""eval"") and turning it into a Pygments colorscheme could be a challenge.

Fork a program in order to modify color is not a good way. waste time to update, and compile by myself.
Can I let pgcli accept executing extra command with option `-e` or `-c` like some shell command options, for example:
`python -c ""print('hi')""`.
And combine it with something like ""Python method overriding""?
So that I can create an shell alias to do that.

@stardiviner I'll tell you what, I don't have the time to implement color customization for completion menu. But if you are really motivated to get this added, I'd highly encourage you to take a stab at implementing it. 

Define a section in pgclirc file called `colors` like how Jonathan described in the comment above. 

Then read that in as part of the main.py file here: https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L72

Pass that value into the style_factory call here: https://github.com/dbcli/pgcli/blob/master/pgcli/main.py#L257

Then use the gist I gave you at the beginning to see if you can build out the customizations. 

If you send it as a PR, I'll merge it in. 

OK

Someone else requested this exact same feature in mycli (https://github.com/dbcli/mycli/issues/107). I'm going to reopen this issue and work on adding ways to customize the menu colors. 

Thanks for filing the ticket. 

@stardiviner We just landed a new PR to master which allows customizations to the menu colors. You can try it out. Install directly from master as follows:

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

Then add these lines to your config file (~/.pgclirc):

```
[colors]
Token.Menu.Completions.Completion.Current = 'bg:#ffffff #000000'
Token.Menu.Completions.Completion = 'bg:#008888 #ffffff'
Token.Menu.Completions.Meta.Current = 'bg:#44aaaa #000000'
Token.Menu.Completions.Meta = 'bg:#448888 #ffffff'
Token.Menu.Completions.ProgressButton = 'bg:#003333'
Token.Menu.Completions.ProgressBar = 'bg:#00aaaa'
Token.SelectedText = '#ffffff bg:#6666aa'
Token.IncrementalSearchMatch = '#ffffff bg:#4444aa'
Token.IncrementalSearchMatch.Current = '#ffffff bg:#44aa44'
Token.Toolbar = 'bg:#222222 #aaaaaa'
Token.Toolbar.Off = 'bg:#222222 #888888'
Token.Toolbar.On = 'bg:#222222 #ffffff'
```

Then customize them to your hearts content. Let us know if you have any questions. 

I'll release this to PyPI in a few weeks.

This's great. Thanks. It works fine.

@amjith stumbled over this since in the built-in solarized-dark theme of my gnome terminal, I see nothing:

 ![selection_306](https://cloud.githubusercontent.com/assets/77181/9752434/9d2ce648-56e2-11e5-9138-2c7e66647d99.png)

Any chance of this making it to pip?

Thanks for the project, it's one of those things that you wonder how you did without. :)

Ah, ignore me, this works already! Just modified the wrong color. Thank you! :+1: 
",2015-08-01 10:55:01,2015-08-07 15:48:56
889,309,"I got this error when I start it with `pgcli` after installation:

```
 ⇨   pgcli                                                                                                          Hack
Traceback (most recent call last):
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 612, in _build_master
    ws.require(__requires__)
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 918, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 810, in resolve
    raise VersionConflict(dist, req).with_context(dependent_req)
pkg_resources.ContextualVersionConflict: (prompt-toolkit 0.45 (/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages), Requirement.parse('prompt-toolkit==0.42'), {'pgcli'})

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/stardiviner/.virtualenvs/python3/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 3018, in <module>
    working_set = WorkingSet._build_master()
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 614, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 627, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""/home/stardiviner/.virtualenvs/python3/lib/python3.4/site-packages/pkg_resources/__init__.py"", line 805, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: prompt-toolkit==0.42
```

This looks like version conflict or something else.
I tried to uninstall `prompt-toolkit`, and install it again, still error.
","start pgcli error after installation
Solved:
install dependency versions:
- =$ pip install prompt-toolkit\equal{}\equal{}0.42=
- =$ pip install prompt-toolkit\equal{}\equal{}0.38=

Why pgcli does not auto installed required dependency version `prompt-toolkit`?

This problem is not solved yet.
I found `pgcli` require different version `prompt-toolkit` with `mycli`.
pgcli need prompt-toolkit==0.42
mycli need prompt-toolkit==0.38
This is weird.

Yes. This is a known issue. I wil be updating mycli to match pgcli and releasing a new version soon. 

Until then I'd recommend using virtualenvs. http://docs.python-guide.org/en/latest/dev/virtualenvs/#virtual-environments

Sorry about the inconvenience. 

This is now fixed in the latest release of pgcli (0.19.1). Prompt Toolkit is upgraded to 0.45. 

@amjith Really fast work. thanks very much
",2015-08-01 10:31:26,2015-08-06 05:49:17
890,308,"- Re-enable the open-in-editor functionality. Pressing 'v' in Vi mode or Control-X Control-E in emacs mode should open the EDITOR when the input can be edited.
- Visualization of completions in multiple columns. (This is off by default, but can be configured.)

edit: as always, test before merging ;)
","Integration with prompt_toolkit==0.44
I tried this out locally and it works as expected. I noticed that when the multiple columns is on, the meta data information is not displayed. I'm not sure what's a good solution for that. 

It was a nice beginner friendly touch to try nano and pico before jumping into vi or emacs. 

I haven't tried it in windows yet. I'll try it later tonight.

@dbcli/pgcli-core Can you please take it for a spin? 

:+1: 

@amjith What about showing the meta-text in the floating control, right below the completions? Is that a good default for multi-column? (That line is hidden when there is no single completion that has meta information.)

![menu](https://cloud.githubusercontent.com/assets/216638/9018156/682c68b2-37dc-11e5-9906-4fc44b6fade0.png)

[![Code Health](https://landscape.io/badge/215410/landscape.svg?style=flat)](https://landscape.io/diff/203897)
Repository health decreased by 0.38% when pulling **[436dddd](https://github.com/jonathanslenders/pgcli/commit/436dddd3b2107ead006755cdc2314f3edb3b7cac) on jonathanslenders:prompt_toolkit_0.44** into **[8dfff69](https://github.com/dbcli/pgcli/commit/8dfff69ec23be828d5681fae5fcd2c7b9391ced6) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/203897) (including 2 errors and 1 code smell).
- [1 problem was fixed](https://landscape.io/diff/203897/fixed) (including 0 errors and 1 code smell).

I'm on the fence about the meta info at the bottom. I don't have a strong preference. 

This looks good to me. I'm going to merge it. 

We can worry about the meta info for multi-column menu later. 
",2015-07-30 20:18:34,2015-08-02 21:42:05
891,307,"This works fine in the default `psql` client, but not `pgcli`:

```
$ pgcli -U postgres -h localhost -p 5433 mydb < migration.sql
Version: 0.18.0
Chat: https://gitter.im/dbcli/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.18.0', 'console_scripts', 'pgcli')()
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 664, in __call__
    return self.main(*args, **kwargs)
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 644, in main
    rv = self.invoke(ctx)
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 837, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Library/Python/2.7/site-packages/click/core.py"", line 464, in invoke
    return callback(*args, **kwargs)
  File ""/Library/Python/2.7/site-packages/pgcli/main.py"", line 457, in cli
    pgcli.run_cli()
  File ""/Library/Python/2.7/site-packages/pgcli/main.py"", line 263, in run_cli
    document = cli.run()
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/interface.py"", line 269, in run
    with self.input.raw_mode():
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/input.py"", line 65, in raw_mode
    return raw_mode(self.stdin.fileno())
  File ""/Library/Python/2.7/site-packages/prompt_toolkit/terminal/vt100_input.py"", line 335, in __init__
    self.attrs_before = termios.tcgetattr(fileno)
termios.error: (25, 'Inappropriate ioctl for device')
```

Version 0.18.0

This might not be a bug, but would be a great feature IMO given that compatibility with the standard client seems to be a goal.
","Can't pipe input from external file
You're right. That is not supported. 

The intent of pgcli is for interactive usage. So I didn't concentrate on reading from an input stream.

In all honesty this is a low priority at the moment in terms of catching up with psql features. 

In that case, can you print the message that it is not supported instead of throwing confusing traceback?
@leonmax I'm currently working on it.
Sorry for the delay, I'll do my best to get it ready ASAP.",2015-07-30 18:18:32,
892,306,"I'm sort of new to Python so sorry if this isn't great. It appears to work, but I wasn't sure how to get the test db set up so I didn't...run any. Also I sort of hacked the use of the @special_command decorator, but since it seems to work as I expected it, I left it.

I'm new to open source stuff, so I'd be happy to rework and resubmit if you give me any feedback.
","Add includes '\i' functionality
This PR is a great start. I've left some comments inline to fix some obvious shortcomings.

Once this PR is merged, I might extend this feature to do more. Such as handle multiple queries. 

But otherwise it's a good PR. As son as you address the comments, I'll merge it in.

Thank you for taking the time to implement the feature. 

[![Code Health](https://landscape.io/badge/214262/landscape.svg?style=flat)](https://landscape.io/diff/202752)
Code quality remained the same when pulling **[14bdd50](https://github.com/mikekaminsky/pgcli/commit/14bdd50c3862803a6e93509c85851e6a42281303) on mikekaminsky:master** into **[6255017](https://github.com/dbcli/pgcli/commit/6255017b145df5cc0d09b975e4f257590666a089) on dbcli:master**.

Thanks for the comments! I've added the fixes and resubmitted. I thought about trying multiple queries but...baby steps. Thanks for the great package!

[![Code Health](https://landscape.io/badge/214416/landscape.svg?style=flat)](https://landscape.io/diff/202913)
Code quality remained the same when pulling **[f9365b4](https://github.com/mikekaminsky/pgcli/commit/f9365b4bf8ba725f7103495a03530c6d15f15ce8) on mikekaminsky:master** into **[6255017](https://github.com/dbcli/pgcli/commit/6255017b145df5cc0d09b975e4f257590666a089) on dbcli:master**.

Looks good. Thank you for fixing the issues. 

Cheers!

:shaved_ice: 
",2015-07-30 00:01:27,2015-07-30 17:20:00
893,305,,"Provide customizable history file location, Fixes #304
Thank you for the PR. It works as expected. 

Cheers!

:icecream: 

Thanks to both of you or resolving the issues,  I surely do not need an issue occurring that happened a long time ago on an issue that I and others knew on in the financial software world.  Appreciate your help.

Sharon Doherty
",2015-07-29 16:00:00,2015-07-29 18:00:08
894,304,"Copied from email. 

> when i launch pgcli with sudo -u postgres pgcli, like I do with psql, I get the following error:
> IOError: [Errno 13] Permission denied: '/home/vagrant/.pgcli.log‘ (vagrant is the user i’m running sudo with).
> 
> I can workaround this by setting log_file = /tmp/pgcli.log in ~/.pgclirc but then a similar error occurs when writing ~/.pgcli-history file of which location is hardcoded.
",Provide customizable history file location,2015-07-29 15:11:16,2015-07-29 18:00:09
895,303,"It may be useful for the user to see the path to the config file he has loaded, as well as the contents of the file itself. Perhaps it should be two commands, like:

```
\config-path
\config-text
```

Or something shorter, like:

```
\cfp
\cft
```

Or just one command to show both path and contents:

```
\config
```
",Add a special command to print out currently loaded config file contents and / or path,2015-07-29 04:10:43,
896,302,"Something like this:

```
pgcli -U <user name> --pgclirc /some/custom/path/.pgclirc <database name>
```
","Add the ability to start pgcli providing path to config file on command line
Please add an environment variable (as well) to override `.pgclirc` path exactly like `psql` does:

``` sh
export PSQLRC=""$XDG_CONFIG_HOME/psql/config""
export PGCLIRC=""$XDG_CONFIG_HOME/pgcli/config""
```

This is now in master.

Thank you j-bennet!
",2015-07-29 04:02:09,2015-08-07 22:18:06
897,300,"Create and drop database.
Connect and disconnect from database.
Create and drop table.
Insert, update, select from table.
","More integration tests
[![Code Health](https://landscape.io/badge/213475/landscape.svg?style=flat)](https://landscape.io/diff/201975)
Code quality remained the same when pulling **[22670a8](https://github.com/dbcli/pgcli/commit/22670a83937c459371ef7f1fbdab70ea97721ba4) on dbcli:j-bennet/integration-tests** into **[f39eb99](https://github.com/dbcli/pgcli/commit/f39eb99eb93b4fea7a4b4f1953bdc86be6994b36) on dbcli:master**.

Yeah I saw that in another PR too. This is bizzare. I'm going to delete the comment and block that user. 

The changes look good. Could you add this to run as part of the travis build? 

Thanks for the additional tests. :)

@j-bennet Will you have time to update the PR to run the integration tests as part of travis or should I look into it?

I will.

Those are now in travis.

[![Code Health](https://landscape.io/badge/215153/landscape.svg?style=flat)](https://landscape.io/diff/203901)
Code quality remained the same when pulling **[2c90561](https://github.com/dbcli/pgcli/commit/2c9056133ae488b2534c61485e92007a525a0a30) on dbcli:j-bennet/integration-tests** into **[f39eb99](https://github.com/dbcli/pgcli/commit/f39eb99eb93b4fea7a4b4f1953bdc86be6994b36) on dbcli:master**.

Thank you for making them part of Travis build. 

:computer: 
",2015-07-28 17:24:15,2015-08-01 14:45:22
898,299,"Link to review coverage:

https://codecov.io/github/dbcli

(login with github).
","Added test coverage with codecov.io
Forgot that they're not in setup.py. How does the build not fail? Interesting. I'll add them back.

Yeah I was wondering the same thing. It didn't fail because travis ci installs them by default. 

http://docs.travis-ci.com/user/languages/python/#Pre-installed-packages

But I think it is better to install them explicitly. 

Added them back.

Looks good. Thanks for taking the time to add it in. 

Closes #295. 

:mailbox: 
",2015-07-27 16:54:13,2015-07-27 22:12:33
899,298,"Provide a config option to always enable expanded output.
","Make Exanded output a config option
Just copying my Gitter reply for the record:

> The the good thing about .psqlrc that it can contain pretty much anything you can do in the REPL.

@danieljwest This is a good issue to get your feet wet. 

In `pgcli` there is a way to toggle expanded mode from the prompt which is `\x`. When this is enabled the output is printed in a horizontal fashion as follows: 

```
amjith> \x
Expanded display is on.
Command Time: 0.000s
Format Time: 0.000s
amjith> SELECT * from information_schema.sql_features
-[ RECORD 0 ]-------------------------
feature_id       | B011
feature_name     | Embedded Ada
sub_feature_id   |
sub_feature_name |
is_supported     | NO
is_verified_by   | None
comments         |
-[ RECORD 1 ]-------------------------
feature_id       | B012
feature_name     | Embedded C
sub_feature_id   |
sub_feature_name |
is_supported     | YES
is_verified_by   | None
comments         |
-[ RECORD 2 ]-------------------------
feature_id       | B013
feature_name     | Embedded COBOL
sub_feature_id   |
sub_feature_name |
is_supported     | NO
is_verified_by   | None
comments         |
```

This feature request is to set this option to be on/off by default from the config file `~/.pgclirc`. 

I'd recommend adding this to https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc and then checking for this config in main.py and calling `pgspecial.toggle_expanded_mode()`. But this might require  changing the `pgspecial.toggle_expanded_mode()` to `set_expanded_mode(arg)` that takes an argument so you can choose to set it based on the value from config file. 

Yes. Please do this :+1: 

A `.pgcli` api that can match `.psqlrc` feature wise would be a huge improvement in PgCLI as far as I am concerned.

Available in 1.5.0.",2015-07-26 16:09:24,2017-03-07 01:44:53
900,297,"The result of doing the command ""\d schemaname."" on my db was

```
'NoneType' object has no attribute '__getitem__'
```

This fix makes the output look a lot more like what you would see with
the same command on psql.
","Fix for None dereference on ""\d schemaname."" with sequence
[![Code Health](https://landscape.io/badge/212516/landscape.svg?style=flat)](https://landscape.io/diff/200986)
Repository health increased by 0.18% when pulling **[567eef8](https://github.com/nathanjhaveri/pgcli/commit/567eef86dc66fba1f487a95bea89d09cc5e65820) on nathanjhaveri:fix-slash-d-error** into **[bb6e8f6](https://github.com/dbcli/pgcli/commit/bb6e8f6fa65fc4f86802f6bd2bb5a4148373af6f) on dbcli:master**.
- No new problems were introduced.
- [4 problems were fixed](https://landscape.io/diff/200986/fixed) (including 0 errors and 0 code smells).

I'm not able to reproduce the None object for `\d schemaname`. 

eg:

```
amjith> \d public
Did not find any relation named public.
Command Time: 0.000s
Format Time: 0.000s
```

But it is possible that my tests don't exercise that branch of the code. 

So thank you for the PR. :) 

:coffee: 

Thanks for pgcli, it is great!

Here are some steps to reproduce the bug:

```
postgres> create sequence public.somekey_seq INCREMENT 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 
CREATE SEQUENCE
Command Time: 0.000s
Format Time: 0.000s

postgres> \d public.
'NoneType' object has no attribute '__getitem__'
postgres>
```

After merging this pull request, the output now looks like this:

```
postgres> \d public.
+---------------+---------+---------------------+
| Column        | Type    | Value               |
|---------------+---------+---------------------|
| sequence_name | name    | somekey_seq         |
| last_value    | bigint  | 1                   |
| start_value   | bigint  | 1                   |
| increment_by  | bigint  | 1                   |
| max_value     | bigint  | 9223372036854775807 |
| min_value     | bigint  | 1                   |
| cache_value   | bigint  | 1                   |
| log_cnt       | bigint  | 0                   |
| is_cycled     | boolean | False               |
| is_called     | boolean | False               |
+---------------+---------+---------------------+
Command Time: 0.000s
Format Time: 0.001s
postgres>
```

Thank you for the example to reproduce the bug, and thank you for the PR to fix it. :)
",2015-07-25 17:38:49,2015-07-25 20:40:25
901,296,"Landscape.io measures your code quality and conformance to PEP8.
This will keep the project organized and the code readable.
","Measure code quality
We already have landscape.io integration. 

https://landscape.io/github/dbcli/pgcli
",2015-07-25 09:36:52,2015-07-25 15:28:46
902,295,"Either coveralls or codecov is fine but test coverage should be measured.
","Measure test coverage
I've tried a few times to add coverage but I'm always doing something wrong and it never works. 

If you can get the coverage working, I'll be happy to accept a PR. 

I managed to get it working for dockercli with codecov and this config:

https://github.com/j-bennet/dockercli/blob/master/.travis.yml

Will try to add for pgcli.
",2015-07-25 09:35:51,2015-07-25 15:29:44
903,294,"I run the tests once and some of them fail.
Let's see what the build says.
This PR fixes #140.
","Added support for PyPy using psycopg2cffi
Strange, it fails locally for me:

```
tox -re pypy
GLOB sdist-make: /home/omer/Documents/pgcli/setup.py
pypy recreate: /home/omer/Documents/pgcli/.tox/pypy
pypy installdeps: pytest, mock
pypy inst: /home/omer/Documents/pgcli/.tox/dist/pgcli-0.18.0.zip
pypy installed: cffi==1.1.0,click==4.1,configobj==5.0.6,funcsigs==0.4,greenlet==0.4.7,mock==1.3.0,pbr==1.3.0,pgcli==0.18.0,prompt-toolkit==0.42,psycopg2cffi==2.7.1,py==1.4.30,Pygments==2.0.2,pytest==2.7.2,readline==6.2.4.1,six==1.9.0,sqlparse==0.1.14,wcwidth==0.1.4,wheel==0.24.0
pypy runtests: PYTHONHASHSEED='3292657099'
pypy runtests: commands[0] | py.test
================================================================================================ test session starts ================================================================================================
platform linux2 -- Python 2.7.9[pypy-2.6.0-final] -- py-1.4.30 -- pytest-2.7.2
rootdir: /home/omer/Documents/pgcli, inifile: 
collected 279 items 

pgcli/packages/pgspecial/tests/test_specials.py .....
tests/test_expanded.py .
tests/test_fuzzy_completion.py ..
tests/test_naive_completion.py ....
tests/test_parseutils.py ............x.............
tests/test_pgexecute.py ................FFFF..............................................EEE.EE...........
tests/test_pgspecial.py .........
tests/test_smart_completion_multiple_schemata.py .................
tests/test_smart_completion_public_schema_only.py ..........................
tests/test_sqlcompletion.py .....................................................x....................................................

====================================================================================================== ERRORS =======================================================================================================
__________________________________________________________________________________ ERROR at setup of test_describe_special[x.*-df] __________________________________________________________________________________

connection = <psycopg2cffi._impl.connection.Connection object at 0x00000000025ffd30>

    @pytest.fixture
    def executor(connection):
        return pgcli.pgexecute.PGExecute(database='_test_db', user=POSTGRES_USER,
>               host=POSTGRES_HOST, password=None, port=None)

tests/conftest.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.tox/pypy/site-packages/pgcli/pgexecute.py:149: in __init__
    self.connect()
.tox/pypy/site-packages/pgcli/pgexecute.py:164: in connect
    port=unicode2utf8(port))
.tox/pypy/site-packages/psycopg2cffi/__init__.py:104: in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:884: in _connect
    return connection_factory(dsn)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:134: in __init__
    self._connect_sync()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <psycopg2cffi._impl.connection.Connection object at 0x00000000025ffd48>

    def _connect_sync(self):
        self._pgconn = libpq.PQconnectdb(self.dsn.encode('utf-8'))
        if not self._pgconn:
            raise exceptions.OperationalError('PQconnectdb() failed')
        elif libpq.PQstatus(self._pgconn) == libpq.CONNECTION_BAD:
>           raise self._create_exception()
E           OperationalError: sorry, too many clients already

.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:143: OperationalError
__________________________________________________________________________________ ERROR at setup of test_describe_special[x.*-dT] __________________________________________________________________________________

    @pytest.yield_fixture(scope=""function"")
    def connection():
        create_db('_test_db')
>       connection = db_connection('_test_db')

tests/conftest.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:12: in db_connection
    conn = psycopg2.connect(user=POSTGRES_USER, host=POSTGRES_HOST, database=dbname)
.tox/pypy/site-packages/psycopg2cffi/__init__.py:104: in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:884: in _connect
    return connection_factory(dsn)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:134: in __init__
    self._connect_sync()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <psycopg2cffi._impl.connection.Connection object at 0x0000000002e299b8>

    def _connect_sync(self):
        self._pgconn = libpq.PQconnectdb(self.dsn.encode('utf-8'))
        if not self._pgconn:
            raise exceptions.OperationalError('PQconnectdb() failed')
        elif libpq.PQstatus(self._pgconn) == libpq.CONNECTION_BAD:
>           raise self._create_exception()
E           OperationalError: sorry, too many clients already

.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:143: OperationalError
_________________________________________________________________________________ ERROR at setup of test_describe_special[x.*-+-di] _________________________________________________________________________________

    @pytest.yield_fixture(scope=""function"")
    def connection():
>       create_db('_test_db')

tests/conftest.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:45: in create_db
    with db_connection().cursor() as cur:
tests/utils.py:12: in db_connection
    conn = psycopg2.connect(user=POSTGRES_USER, host=POSTGRES_HOST, database=dbname)
.tox/pypy/site-packages/psycopg2cffi/__init__.py:104: in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:884: in _connect
    return connection_factory(dsn)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:134: in __init__
    self._connect_sync()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <psycopg2cffi._impl.connection.Connection object at 0x0000000002e7a968>

    def _connect_sync(self):
        self._pgconn = libpq.PQconnectdb(self.dsn.encode('utf-8'))
        if not self._pgconn:
            raise exceptions.OperationalError('PQconnectdb() failed')
        elif libpq.PQstatus(self._pgconn) == libpq.CONNECTION_BAD:
>           raise self._create_exception()
E           OperationalError: sorry, too many clients already

.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:143: OperationalError
_________________________________________________________________________________ ERROR at setup of test_describe_special[x.*-+-ds] _________________________________________________________________________________

    @pytest.yield_fixture(scope=""function"")
    def connection():
        create_db('_test_db')
>       connection = db_connection('_test_db')

tests/conftest.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:12: in db_connection
    conn = psycopg2.connect(user=POSTGRES_USER, host=POSTGRES_HOST, database=dbname)
.tox/pypy/site-packages/psycopg2cffi/__init__.py:104: in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:884: in _connect
    return connection_factory(dsn)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:134: in __init__
    self._connect_sync()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <psycopg2cffi._impl.connection.Connection object at 0x00000000029e7e80>

    def _connect_sync(self):
        self._pgconn = libpq.PQconnectdb(self.dsn.encode('utf-8'))
        if not self._pgconn:
            raise exceptions.OperationalError('PQconnectdb() failed')
        elif libpq.PQstatus(self._pgconn) == libpq.CONNECTION_BAD:
>           raise self._create_exception()
E           OperationalError: sorry, too many clients already

.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:143: OperationalError
_________________________________________________________________________________ ERROR at setup of test_describe_special[x.*-+-df] _________________________________________________________________________________

    @pytest.yield_fixture(scope=""function"")
    def connection():
>       create_db('_test_db')

tests/conftest.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:45: in create_db
    with db_connection().cursor() as cur:
tests/utils.py:12: in db_connection
    conn = psycopg2.connect(user=POSTGRES_USER, host=POSTGRES_HOST, database=dbname)
.tox/pypy/site-packages/psycopg2cffi/__init__.py:104: in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:884: in _connect
    return connection_factory(dsn)
.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:134: in __init__
    self._connect_sync()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <psycopg2cffi._impl.connection.Connection object at 0x00000000034aab90>

    def _connect_sync(self):
        self._pgconn = libpq.PQconnectdb(self.dsn.encode('utf-8'))
        if not self._pgconn:
            raise exceptions.OperationalError('PQconnectdb() failed')
        elif libpq.PQstatus(self._pgconn) == libpq.CONNECTION_BAD:
>           raise self._create_exception()
E           OperationalError: sorry, too many clients already

.tox/pypy/site-packages/psycopg2cffi/_impl/connection.py:143: OperationalError
===================================================================================================== FAILURES ======================================================================================================
_____________________________________________________________________________________ test_json_renders_without_u_prefix[True] ______________________________________________________________________________________

executor = <pgcli.pgexecute.PGExecute object at 0x00007f48508f9b08>, expanded = True

    @requires_json
    def test_json_renders_without_u_prefix(executor, expanded):
        run(executor, ""create table jsontest(d json)"")
        run(executor, """"""insert into jsontest (d) values ('{""name"": ""Éowyn""}')"""""")
        result = run(executor, ""SELECT d FROM jsontest LIMIT 1"",
>                    join=True, expanded=expanded)

tests/test_pgexecute.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:66: in run
    expanded=expanded))
.tox/pypy/site-packages/pgcli/main.py:466: in format_output
    output.append(expanded_table(cur, headers))
.tox/pypy/site-packages/pgcli/packages/expanded.py:15: in expanded_table
    for row in rows:
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:569: in __iter__
    rows = self.fetchmany(self.itersize)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:30: in check_closed_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:43: in check_no_tuples_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:355: in fetchmany
    return [self._build_row() for _ in xrange(size)]
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:891: in _build_row
    self._casts[i], val, length, self)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:71: in typecast
    return caster.cast(value, cursor, length)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:38: in cast
    return self.py_caster(value, cursor)
.tox/pypy/site-packages/psycopg2cffi/_json.py:182: in typecast_json
    return loads(s)
.tox/pypy/site-packages/pgcli/pgexecute.py:187: in _json_typecaster
    return json_data.decode(self.conn.encoding)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input = '{""name"": ""Éowyn""}', errors = 'strict'

    def decode(input, errors='strict'):
>       return codecs.utf_8_decode(input, errors, True)
E       UnicodeEncodeError: 'ascii' codec can't encode character u'\xc9' in position 10: ordinal not in range(128)

.tox/pypy/lib-python/2.7/encodings/utf_8.py:16: UnicodeEncodeError
_____________________________________________________________________________________ test_json_renders_without_u_prefix[False] _____________________________________________________________________________________

executor = <pgcli.pgexecute.PGExecute object at 0x00000000024d3478>, expanded = False

    @requires_json
    def test_json_renders_without_u_prefix(executor, expanded):
        run(executor, ""create table jsontest(d json)"")
        run(executor, """"""insert into jsontest (d) values ('{""name"": ""Éowyn""}')"""""")
        result = run(executor, ""SELECT d FROM jsontest LIMIT 1"",
>                    join=True, expanded=expanded)

tests/test_pgexecute.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:66: in run
    expanded=expanded))
.tox/pypy/site-packages/pgcli/main.py:469: in format_output
    missingval='<null>'))
.tox/pypy/site-packages/pgcli/packages/tabulate.py:885: in tabulate
    list_of_lists, headers = _normalize_tabular_data(tabular_data, headers)
.tox/pypy/site-packages/pgcli/packages/tabulate.py:586: in _normalize_tabular_data
    rows = list(tabular_data)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:569: in __iter__
    rows = self.fetchmany(self.itersize)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:30: in check_closed_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:43: in check_no_tuples_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:355: in fetchmany
    return [self._build_row() for _ in xrange(size)]
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:891: in _build_row
    self._casts[i], val, length, self)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:71: in typecast
    return caster.cast(value, cursor, length)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:38: in cast
    return self.py_caster(value, cursor)
.tox/pypy/site-packages/psycopg2cffi/_json.py:182: in typecast_json
    return loads(s)
.tox/pypy/site-packages/pgcli/pgexecute.py:187: in _json_typecaster
    return json_data.decode(self.conn.encoding)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input = '{""name"": ""Éowyn""}', errors = 'strict'

    def decode(input, errors='strict'):
>       return codecs.utf_8_decode(input, errors, True)
E       UnicodeEncodeError: 'ascii' codec can't encode character u'\xc9' in position 10: ordinal not in range(128)

.tox/pypy/lib-python/2.7/encodings/utf_8.py:16: UnicodeEncodeError
_____________________________________________________________________________________ test_jsonb_renders_without_u_prefix[True] _____________________________________________________________________________________

executor = <pgcli.pgexecute.PGExecute object at 0x00000000034cd7f8>, expanded = True

    @requires_jsonb
    def test_jsonb_renders_without_u_prefix(executor, expanded):
        run(executor, ""create table jsonbtest(d jsonb)"")
        run(executor, """"""insert into jsonbtest (d) values ('{""name"": ""Éowyn""}')"""""")
        result = run(executor, ""SELECT d FROM jsonbtest LIMIT 1"",
>                    join=True, expanded=expanded)

tests/test_pgexecute.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:66: in run
    expanded=expanded))
.tox/pypy/site-packages/pgcli/main.py:466: in format_output
    output.append(expanded_table(cur, headers))
.tox/pypy/site-packages/pgcli/packages/expanded.py:15: in expanded_table
    for row in rows:
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:569: in __iter__
    rows = self.fetchmany(self.itersize)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:30: in check_closed_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:43: in check_no_tuples_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:355: in fetchmany
    return [self._build_row() for _ in xrange(size)]
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:891: in _build_row
    self._casts[i], val, length, self)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:71: in typecast
    return caster.cast(value, cursor, length)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:38: in cast
    return self.py_caster(value, cursor)
.tox/pypy/site-packages/psycopg2cffi/_json.py:182: in typecast_json
    return loads(s)
.tox/pypy/site-packages/pgcli/pgexecute.py:187: in _json_typecaster
    return json_data.decode(self.conn.encoding)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input = '{""name"": ""Éowyn""}', errors = 'strict'

    def decode(input, errors='strict'):
>       return codecs.utf_8_decode(input, errors, True)
E       UnicodeEncodeError: 'ascii' codec can't encode character u'\xc9' in position 10: ordinal not in range(128)

.tox/pypy/lib-python/2.7/encodings/utf_8.py:16: UnicodeEncodeError
____________________________________________________________________________________ test_jsonb_renders_without_u_prefix[False] _____________________________________________________________________________________

executor = <pgcli.pgexecute.PGExecute object at 0x0000000003630218>, expanded = False

    @requires_jsonb
    def test_jsonb_renders_without_u_prefix(executor, expanded):
        run(executor, ""create table jsonbtest(d jsonb)"")
        run(executor, """"""insert into jsonbtest (d) values ('{""name"": ""Éowyn""}')"""""")
        result = run(executor, ""SELECT d FROM jsonbtest LIMIT 1"",
>                    join=True, expanded=expanded)

tests/test_pgexecute.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/utils.py:66: in run
    expanded=expanded))
.tox/pypy/site-packages/pgcli/main.py:469: in format_output
    missingval='<null>'))
.tox/pypy/site-packages/pgcli/packages/tabulate.py:885: in tabulate
    list_of_lists, headers = _normalize_tabular_data(tabular_data, headers)
.tox/pypy/site-packages/pgcli/packages/tabulate.py:586: in _normalize_tabular_data
    rows = list(tabular_data)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:569: in __iter__
    rows = self.fetchmany(self.itersize)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:30: in check_closed_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:43: in check_no_tuples_
    return func(self, *args, **kwargs)
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:355: in fetchmany
    return [self._build_row() for _ in xrange(size)]
.tox/pypy/site-packages/psycopg2cffi/_impl/cursor.py:891: in _build_row
    self._casts[i], val, length, self)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:71: in typecast
    return caster.cast(value, cursor, length)
.tox/pypy/site-packages/psycopg2cffi/_impl/typecasts.py:38: in cast
    return self.py_caster(value, cursor)
.tox/pypy/site-packages/psycopg2cffi/_json.py:182: in typecast_json
    return loads(s)
.tox/pypy/site-packages/pgcli/pgexecute.py:187: in _json_typecaster
    return json_data.decode(self.conn.encoding)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

input = '{""name"": ""Éowyn""}', errors = 'strict'

    def decode(input, errors='strict'):
>       return codecs.utf_8_decode(input, errors, True)
E       UnicodeEncodeError: 'ascii' codec can't encode character u'\xc9' in position 10: ordinal not in range(128)

.tox/pypy/lib-python/2.7/encodings/utf_8.py:16: UnicodeEncodeError
============================================================================= 4 failed, 268 passed, 2 xfailed, 5 error in 4.50 seconds ==============================================================================
ERROR: InvocationError: '/home/omer/Documents/pgcli/.tox/pypy/bin/py.test'
```

Looks like those failing tests are getting skipped in Travis. :(

You might have to grep through the code for occurrences of psycopg2 and change them all. Some of the tests still use psycopg2 and pgexecute.py uses psycopg2. 

[![Code Health](https://landscape.io/badge/212499/landscape.svg?style=flat)](https://landscape.io/diff/200964)
Repository health decreased by 0.35% when pulling **[8b6bcd5](https://github.com/thedrow/pgcli/commit/8b6bcd510352fd188e08004af5309e3952547641) on thedrow:feature/pypy-support** into **[52fb7c9](https://github.com/dbcli/pgcli/commit/52fb7c93158dba2c10e731617d9cc90f0fc7d976) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/200964) (including 2 errors and 1 code smell).
- [1 problem was fixed](https://landscape.io/diff/200964/fixed) (including 0 errors and 1 code smell).

This PR is invalid. 

I should try again someday.
",2015-07-25 09:34:18,2016-03-03 05:39:56
904,293,"Would it be possible to implement `jsonb_pretty`-like functionality for pretty printing JSON(B) fields on postgres < 9.5?
","Emulate `jsonb_pretty`
Looks like jsonb_pretty() is a built in function to be introduced in Postgres 9.5. 

When that is introduced the output in pgcli will look quite crappy. It's because the library we use for tabulating the output can't handle multi-line text. 

But to get back to your real question. It is possible to emulate the jsonb_pretty by always prettyfying the results of json fiends, but before that we need to address the tabulation issue. 

So it's not an easy change. 

Thank you for the feedback. Please close at will since this is more of a feature request then.

Just a note that tabulate does support multi-line text now (in its master branch, yet to be released).
What's the status of this feature request? It'd be pretty helpful.
We'd be happy to accept a PR if someone submits one, but no volunteers so far.
This is now working. Please upgrade pgcli (`pip install -U pgcli`). 

```
SELECT jsonb_pretty(EmployeeDetails) AS EmployeeDetails FROM tbl_TestJSON;
+-----------------------------------+
| employeedetails                   |
|-----------------------------------|
| {                                 |
|     ""employees"": [                |
|         {                         |
|             ""lastName"": ""Patel"",  |
|             ""firstName"": ""Anvesh"" |
|         }                         |
|     ]                             |
| }                                 |
| {                                 |
|     ""employees"": [                |
|         {                         |
|             ""lastName"": ""Shah"",   |
|             ""firstName"": ""Nancy""  |
|         }                         |
|     ]                             |
| }                                 |
+-----------------------------------+
SELECT 2
Time: 0.092s

```",2015-07-25 01:10:40,2019-10-17 04:14:50
905,292,"http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html
","support ~/.pgpass file
@machinshin There is already support for .pgpass file. 

See: #53 

ah i see, you have to add the -h HOST for it to work, thanks @amjith 
",2015-07-24 18:44:48,2015-07-24 19:23:39
906,291,"Typing a semicolon by itself and pressing return results in a `TypeError`

```
$ pgcli
kevin> ;
Traceback (most recent call last):
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.2', 'console_scripts', 'pgcli')()
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/vendor/lib/python2.7/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 119, in cli
    click.secho(e.pgerror, err=True, fg='red')
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/vendor/lib/python2.7/site-packages/click/termui.py"", line 381, in secho
    text = style(text, **styles)
  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/vendor/lib/python2.7/site-packages/click/termui.py"", line 354, in style
    return ''.join(bits)
TypeError: sequence item 1: expected string, NoneType found
```
","TypeError: sequence item 1: expected string, NoneType found
@audleman You're using a very old version of pgcli (0.10.2). You should try upgrading. 

Can you run:

```
brew update && brew upgrade pgcli
```

That did the trick, thanks.
",2015-07-24 17:14:39,2015-07-24 18:18:16
907,290,"Reviewer: @macobo 

Upgrading the minimum required version of click to 4.1. We use the output_via_pager() function in pgcli. When the pager is active (if the output is longer than the screen) if a user presses Ctrl-C it will abort pgcli and cause the terminal to go weird. 

This latest version fixes the issue. 

Relevant PR: https://github.com/mitsuhiko/click/pull/351
","Bump up click version to address #288
[![Code Health](https://landscape.io/badge/212057/landscape.svg?style=flat)](https://landscape.io/diff/200513)
Code quality remained the same when pulling **[72deaa1](https://github.com/dbcli/pgcli/commit/72deaa1432c4a4f93e00d6ae2383bbb908008892) on dbcli:amjith/click-bump** into **[877c091](https://github.com/dbcli/pgcli/commit/877c0919d93940bfa6d1f5cfc5126214179cbd59) on dbcli:master**.

@darikg Can you take a look? 

It's a pretty straight forward minor version bump for click. 

What's the expected behavior when hitting control-C in a pager now? I still get kicked out of pgcli (after manually quitting the pager)

Hitting Ctrl-C should not quit pgcli anymore. The expected behavior is just ignore that keystroke. 

Maybe the behavior is not consistent in Windows. I'll have to try it in Windows. 

I think it's still KeyboardInterrupt on Windows so I'm not sure where the problem is. Hopefully you can reproduce on Windows -- let me know

You're right. It still quits right away when I press Ctrl-C in Windows. I wonder what the hell is going on. This will require poking around in click again. I'll need some more time to find out what is going on. I'll get back to this PR once I settle down the influx of bug reports. 

I have added a try/except clause around the `echo_via_pager()` to handle the `Ctrl-C` in pager. 

I tried it in windows and it works as expected. Let me know if you find any other issues with it. 

[![Code Health](https://landscape.io/badge/215813/landscape.svg?style=flat)](https://landscape.io/diff/204303)
Code quality remained the same when pulling **[c31f092](https://github.com/dbcli/pgcli/commit/c31f092e6fd79a7fc5d4c6655a0a60a9518f7b75) on dbcli:amjith/click-bump** into **[877c091](https://github.com/dbcli/pgcli/commit/877c0919d93940bfa6d1f5cfc5126214179cbd59) on dbcli:master**.
",2015-07-24 14:16:32,2015-08-02 14:29:43
908,289,"With psql, one can create a .pg_service.conf file with the following format:

``` ini
[someservice]
host=the.host
user=the-user
dbname=the-db
```

and then run `psql service=someservice`. Support for this feature would be nice.
","support ""service=""
Reasonable request, I'll see if I can add that feature in. 

Can you tell me if `.pg_service.conf` is always on the home folder of the user or is there a common location like `/etc/postgres`?

Here's the docs for `.pg_service.conf` http://www.postgresql.org/docs/9.4/static/libpq-pgservice.html :) 

Thank you for the doc. It seems simple enough, I'll give it a shot. Thank you!

Maybe you could even support `.pgpass` files! http://www.postgresql.org/docs/9.3/static/libpq-pgpass.html

Ofcourse, that is if you don't do so already :) I couldn't get the package to work on arch linux `pgcli-git` so I never got around to check

There is already support for pgpass. https://github.com/dbcli/pgcli/issues/53 I get it for free since it's a libpq feature. 

pg_service might need some tinkering to parse the file.

It's a regular ini file, python is quite good at that: https://docs.python.org/2/library/configparser.html

@Dinoshauer There might be an arch AUR package. Related: https://github.com/dbcli/pgcli/issues/168

/cc @svenstaro 

This is now in master.
",2015-07-24 14:13:45,2015-08-22 16:36:40
909,288,"Connecting to a remote DB and running `\d` lists relations as expected. Hitting Ctrl-C aborts pgcli and causes issues in bash on exit(can't see input, return doesn't jump to new line). Ctrl-C probably should not abort the whole program.

See this discussion about this behavior in the mysql command line client:
https://bugs.mysql.com/bug.php?id=66583

Found this behavior in pgcli Version: 0.17.0
","Ctrl-C exits pgcli and introduces strange behavior in bash
The Ctrl-C aborts pgcli only if you're in the pager. If you're just in the regular pgcli prompt it doesn't abort when you Ctrl-C. 

This is due to a bug in one of the libraries I use called 'Click' for piping the output through a pager. 

I've fixed the bug in click and sent a PR which is already merged. https://github.com/mitsuhiko/click/pull/351

But I'm waiting for them to release a new version so I can bump up the dependency of Click. 

Sorry about the aborting behavior. You can recover from the terminal weirdness by typing 'reset' in the terminal. 
",2015-07-24 13:35:18,2015-07-28 12:51:17
910,287,"At the moment it looks like keywords are ordered alphabetically this is usually not what you want. Instead it might be good to order them by their frequency of appearance in actual SQL. For example WH gives WHEN and WHENEVER before WHERE. This could even be learnt as people use pgcli so its custom to their use case.
","Order keyword autocomplete by some form of frequency of use
This would be a fantastic feature. :)

But it'll require some plumbing on the completion algorithm to get it right. So it might not be a quick addition, but I'll definitely take a stab.

Thank you!

:+1: It's something I also noticed. When you type `f` or `w` it would be great to have `from` and `where` as first choices.

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-07-24 09:34:39,2016-06-29 04:32:10
911,286,"That'd be nice :)
","Use PAGER if the output is to wide
Can you elaborate? I'm not sure what you mean by READER. 

Oh, I mean PAGER, sorry.

I already use the PAGER for output that doesn't fit in the screen. Wider output is a different issue and using a PAGER there doesn't really help. 

Sorry about the height thing, changed the title (again :) ).
Why would that be a different issue? The pager makes the content scrollable, that works as well with scrolling sideways as it does with scrolling up and down. (at least with less)

Can you jump on gitter? We can hash it out. 

https://gitter.im/dbcli/pgcli

I'm in a hurry, I'll join later.

For illustration: http://tmp.kbct.de/pager.gif

Thoughts from gitter chat: 

Easy solution is to add -S to the less_opts and that'll achieve the right results. 

Correct solution is to append to the existing LESS env var instead of replacing the current LESS env var with -SRXF.

Extra credits for providing a way for the user to set the pager options at run time (kinda like how mysql repl does). Using a 'pager' special command. 

Thank you @Knorkebrot for the illustration gif.

@Knorkebrot This is now implemented in master. You can try it out by installing pgcli directly from master, as follows: 

```
pip install -U https://github.com/dbcli/pgcli/archive/master.zip
```

You can change the pager at runtime using `\pager [command]`. Eg: `\pager less -S`. 

Could it be possible to set default pager and options in .pgclirc using a line like  `pager = less -iMSx4FXRe` ?
Otherwise it is necessary to set preferred pager options each time pgcli is executed.

I can add the pager to the config file. 

In the mean time pgcli does honor the env var PAGER. So you can set your PAGER env var to `less -iMSx4FXRe` and it will be used by pgcli. 

Works like a charm :)
",2015-07-24 08:09:53,2015-10-28 13:23:38
912,285,"Running osx 10.10.3, pgapp version of postgres, installed pgcli using brew install --build-from-source pgcli
\l  produces a list of databases, the names of which are all shown without double quotes.
When I try and use \c to connect to a database, the list of databases shows some with double quotes and some without. The ones with double quotes fail 
umedoc_sql_practice> \c ""depot-jrb_development""
FATAL:  database """"depot-jrb_development"""" does not exist
.....
postgres> \c guestbook
You are now connected to database ""guestbook"" as user ""foo""

It looks like the problem is names with hyphen (dash) characters . 
create database pgcli_test  (with underscore)
CREATE DATABASE

create database pgcli-test
syntax error at or near ""-""
LINE 1: create database pgcli-test

create database ""pgcli-test""  (with dash, but surrounded by double quotes)
CREATE DATABASE

psql also requires double quotes around a name containing a dash when creating a database, but once created, the new database can be connected to without using double quotes in the command

pgcli-test=# \c pgcli-test1
You are now connected to database ""pgcli-test1"" as user ""foo"".
","Wrongly double quoting name of some databases in autocompletion
Hi @Umedoc. Can you tell me which version of pgcli you're using? 

This bug is fixed in the latest version. Can you try upgrading?

You can upgrade using pip (pip install -U pgcli) or brew (brew upgrade pgcli). Depends on how you installed pgcli originally. 

Let me know if this is still a problem after the upgrade. 

Sorry, just saw this, it was v0.17.0
",2015-07-24 05:11:57,2015-07-27 03:23:57
913,284,"I already have PostgreSQL using Postgres.app

```
~ $ brew install pgcli
==> Installing pgcli dependency: postgresql
==> Downloading https://homebrew.bintray.com/bottles/postgresql-9.4.4.yosemite.b
^C
~ $
```

Can we avoid installing PG for pgcli?
","Explicit dependency on PostgreSQL in Homebrew
You can install pgcli as follows:

```
brew install --build-from-source pgcli
```

That will skip installing postgres from brew if postgres already exists in the system.

Sorry about the explicit dependency on postgres in brew. I couldn't find a different way to bring in the dependencies needed for psycopg2 to install in OS X. And there is no way for me to check if Postgres is already available on the system before declaring it as a dependency. 

Thanks! It worked.

I wonder whether <code>pip install pgcli</code> is simpler.
",2015-07-24 03:56:56,2015-07-24 06:20:29
914,283,"eg: 

```
SELECT * FROM ""access"" a WHERE a.
```
",Autocompletion breaks when a quoted table is aliased,2015-07-23 22:52:14,2015-08-05 22:43:06
915,282,"After installing pgcli using brew, I get the following error when I try to connect to a redshift DB:

```
Traceback (most recent call last):
  File ""/usr/local/Cellar/pgcli/0.17.0/libexec/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.17.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/site-packages/click-4.0-py2.7.egg/click/core.py"", line 664, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/site-packages/click-4.0-py2.7.egg/click/core.py"", line 644, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/site-packages/click-4.0-py2.7.egg/click/core.py"", line 837, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/site-packages/click-4.0-py2.7.egg/click/core.py"", line 464, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/Cellar/pgcli/0.17.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 416, in cli
    pgcli.run_cli()
  File ""/usr/local/Cellar/pgcli/0.17.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 197, in run_cli
    self.refresh_completions()
  File ""/usr/local/Cellar/pgcli/0.17.0/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 351, in refresh_completions
    completer.set_search_path(pgexecute.search_path())
  File ""/usr/local/Cellar/pgcli/0.17.0/libexec/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 244, in search_path
    cur.execute(self.search_path_query)
psycopg2.ProgrammingError: function unnest(name[]) does not exist
HINT:  No function matches the given name and argument types. You may need to add explicit type casts.
```

Any idea what might be causing this?
","Error when trying to connect to redshift db
The issue is because pgcli is targeting Postgres 9.x and above. 

There is effort underway to try and support older versions. Please see https://github.com/dbcli/pgcli/issues/18 for details. 

Ah very good! Thanks for the quick response!

I also have this issue, but am satisfied with the response :) (Also I would prefer to see a more stable and featureful client instead of entering the morass of supporting older versions of postgres :) )

@amjith There are something to do with redshift? support or a new CLI for that? RedShift is being each time more usefull, we migrate some PG do RedShift here in my enviroment.

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-07-23 21:53:43,2016-06-29 04:33:24
916,281,"or some other help key to show the syntax of a SQL command.
","support \h
This is a valid request. Unfortunately I don't have an easy solution here. 

There is no way to get the documentation out of postgres programmatically. At least I haven't found a way to do it. 

So I'm open to ideas. 

We could get pretty good results using the sgml from the open source psql client.
For example the `SELECT` command: https://github.com/postgres/postgres/blob/aa9eac45ea868e6ddabc4eb076d18be10ce84c6a/doc/src/sgml/ref/select.sgml#L34

We could parse the synopsis and description sections.

Happy to take a look at this if it seems like a good idea.

@stuartquin I'd love to see a solution for this. So if you have an idea I'm not going to stop you from exploring it. 

In fact, @j-bennet had a similar idea where, we can check if psql is installed on the system, if it is, then proxy all the `\h` calls to psql and read the output and display it into pgcli. Which is better than nothing, but I think there might be some challenges to get it right on all platforms. 

So please feel free to explore and see what you can come up with. 

Fix released in 0.20.0. 

Please upgrade:

```
pip install -U pgcli
```
",2015-07-22 22:34:30,2015-11-01 09:09:27
917,280,"![data](https://cloud.githubusercontent.com/assets/932611/8684632/977a6f8a-2a47-11e5-8682-eb79a7f6bf9f.png)
![table-def](https://cloud.githubusercontent.com/assets/932611/8684633/9786c488-2a47-11e5-9970-821f24f1b257.png)
","Text field displayed as floating point
pls let me know if i'm missing something obvious. the data happens to look like a floating point number, but it isn't. 

The tabulate library used by pgcli tries to be clever and attempts to auto-detect the data types. Which is why it recognized the column as float. 

Unfortunately I don't have an easy solution for that right now. I'll try and use a different library in the future. 

Sorry about that. 

np, glad i'm not insane. great job tho. kicks psql's butt

This is fixed in the latest version of pgcli (v1.0.1). 

Please upgrade: 

```
pip install -U pgcli
```

i'm a little confused by the versioning. latest release is showing as 1.2, and is what i get if i upgrade via pip. but you mentioned 1.0.1. the bug is still present in 1.2. am i being dumb?

Sorry the bug is not yet fixed. I fixed a related bug in 0.16.0 and I thought I addressed this issue. But looks like I misspoke. 😞 

Also I should not have said 1.0.1. I don't think that version even exists. 😞 

This is now fixed in the latest version. ",2015-07-14 20:44:57,2017-12-15 00:04:16
918,279,"- Moved behavioral tests into tests.
- Updated expected help output.
- Drop test db if exists.
","Moved integration tests into ""tests"", plus some fixes.
Addresses issue #278.

[![Code Health](https://landscape.io/badge/206813/landscape.svg?style=flat)](https://landscape.io/diff/195822)
Code quality remained the same when pulling **[4980b4e](https://github.com/dbcli/pgcli/commit/4980b4ef09355b3bb519705686866019d79f9d93) on dbcli:j-bennet/itegration-tests** into **[7c0f1a1](https://github.com/dbcli/pgcli/commit/7c0f1a1284e5ef9d1e0397c166b05f6394bd3c00) on dbcli:master**.

Works as expected. Thank you!

:koala: 
",2015-07-12 21:43:40,2015-07-15 06:16:52
919,278,,Move the integrations test files into the 'tests' folder,2015-07-12 05:50:04,2015-07-15 06:17:03
920,277,"See #200.

Looks like this:

![1](https://cloud.githubusercontent.com/assets/6875882/8521328/a38064c6-23b0-11e5-9322-e313b8609028.png)

It turns out this is almost trivially easy to do. However, it breaks all of our completions tests. So I before I go ahead and update all the tests, I wanted everyone to get a chance to suggest what should or should not go in the metadata. I think a simple category label is almost a waste.

As an experiment, I shuffled some code around so I could put special command help text directly in the completions menu:

![2](https://cloud.githubusercontent.com/assets/6875882/8521381/0ccbe068-23b1-11e5-8447-60ed0839cf01.png)

Let me know what you think! This branch works fine, despite the failing tests, if you want to try it out.
","[wip/rfc] Put meta info in the completions menu
[![Code Health](https://landscape.io/badge/202773/landscape.svg?style=flat)](https://landscape.io/diff/191663)
Repository health decreased by 0.15% when pulling **[5ca4f83](https://github.com/darikg/pgcli/commit/5ca4f8390ddccaa18d63af9f2777307f4a7515c3) on darikg:darikg/completions-meta-display** into **[7c0f1a1](https://github.com/dbcli/pgcli/commit/7c0f1a1284e5ef9d1e0397c166b05f6394bd3c00) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/191663) (including 0 errors and 1 code smell).
- No problems were fixed.

I like the feature. It's a very nice addition. 

I'm not too thrilled about the background color being grey. Let's add some styling to it. 

I like that the special commands have description on their meta column, but we have to be careful not to write descriptions that are too long or multi-line. Should we always limit the meta column to 50 chars or 100 chars long? 

Styling for meta: 

https://github.com/jonathanslenders/ptpython/blob/master/ptpython/style.py#L173-L174

Good point about long meta columns. I tried shrinking my console emulator window way down and it looks like prompt-toolkit auto-truncates the meta-display with an ellipsis -- do you think that's enough?

I pushed a commit here to add styling to the meta-text matching the rest of the completions menu (the commit isn't showing up here for some reason though??) I think I actually like the offset background color, though I'm definitely aesthetically challenged.

Looks like this PR was created from your fork instead of the branch in this repo. 

But the new meta styles you added were added to the branch `darikg/completions-meta-display` in this main repo. 

I was NOT suggesting that we should match the styles for meta with the entries in the menu, I wanted to adjust them slightly to blend a little better. 

I've updated the branch to change the styles a little bit. https://github.com/dbcli/pgcli/commit/c75f7406ce1061d14fe7dbe7e0005960a0f79d87

Try it out and let me know what you think. You might have to close this PR and open a new one from the branch in the main repo instead of the branch in your own forked repo. 

I'll experiment a little bit with the length of the descriptions and get back to you on that one. 

I did some experiments with really long meta descriptions. I think we should preemptively chop the description to 50 chars max, which will fit all of our current descriptions. 

Here's an example of a long description:

<img width=""1229"" alt=""1__2_0_python_-__pgcli___users_amjith_dropbox_code_python_pgcli_pgcli___tmux__and__wip_rfc__put_meta_info_in_the_completions_menu_by_darikg_ _pull_request__277_ _dbcli_pgcli"" src=""https://cloud.githubusercontent.com/assets/49260/8609829/33ed93e8-265f-11e5-8fda-742847bb96b1.png"">

Ok, I added the check for long strings. I'll close this and reopen another PR once I get the tests passing

Looks like the tests are passing. Sorry I didn't notice the updated commits on this PR. 

Is this ready for merging? 

This is good to go but because of jonathanslenders/python-prompt-toolkit#137 I was hesitant to move forward. The styling looks bad because of the limited color palette.

I had not realized that there was a pending issue with prompt-toolkit. I'll check the changes later today and give you a thumbs up. 

[![Code Health](https://landscape.io/badge/212501/landscape.svg?style=flat)](https://landscape.io/diff/200966)
Repository health decreased by 0.14% when pulling **[7b997e4](https://github.com/darikg/pgcli/commit/7b997e40831713f4575ab4cb3ba9921373816205) on darikg:darikg/completions-meta-display** into **[7c0f1a1](https://github.com/dbcli/pgcli/commit/7c0f1a1284e5ef9d1e0397c166b05f6394bd3c00) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/200966) (including 0 errors and 1 code smell).
- No problems were fixed.

I can't get the meta-display background to show up as a different color from the main menu background color, even in a linux vm... (It looks right in your screenshot though, so I'm not sure what's wrong.) Still trying to figure that out

This looks good to me. I've tried it on OS X and a linux VM. I like the colors for the menu and meta background.

I'm going to merge it in. 

Thank you for the excellent addition. :)

:microscope: 
",2015-07-06 11:34:04,2015-07-28 20:19:52
921,276,"The time has come for the next release. 

Can the @dbcli/pgcli-core team please review the changelog and leave a :+1:? 

I'll merge it in once I get a quorum. 
","Update Changelog for version 0.18.0.
[![Code Health](https://landscape.io/badge/202108/landscape.svg?style=flat)](https://landscape.io/diff/190978)
Code quality remained the same when pulling **[5568ada](https://github.com/dbcli/pgcli/commit/5568ada162bbd114e056cbfeaeadf139de3477a8) on dbcli:amjith/changelog-0.18.0** into **[a37713f](https://github.com/dbcli/pgcli/commit/a37713ff0754bafffb6ca7098b99d4fbb4968e8d) on dbcli:master**.

Looks good.

looks good to me
",2015-07-05 06:14:25,2015-07-05 23:02:29
922,275,"Fixes #274.

This change will enforce utf8 encoding while connecting to a database instead of using the encoding of the database. This is because all of pgcli depends on using utf8.

Reviewer: @drocco007 
","Always use utf8 as the default encoding.
@dbcli/pgcli-core Can one of you review this PR? 

I'll take it.

Stuff works. Merging.
",2015-07-01 06:58:58,2015-07-25 17:16:21
923,274,"I have a JSONB field in a PostgreSQL 9.4.4 database. Selecting it with pgcli 0.17.0 throws the error in the title. Using psql I get the JSON string representation for the field.
","Selecting JSONB throws error ""unknown encoding: SQLASCII""
I'm unable to reproduce this issue. 

Here are a few things I've tried so far: 

```
postgres> select '1'::jsonb
╒═════════╕
│   jsonb │
╞═════════╡
│       1 │
╘═════════╛
SELECT 1
Command Time: 4.05311584473e-06
Format Time: 0.000195980072021
postgres> SELECT '{""foo"": [true, ""bar""], ""tags"": {""a"": 1, ""b"": null}}'::jsonb
╒═════════════════════════════════════════════════════╕
│ jsonb                                               │
╞═════════════════════════════════════════════════════╡
│ {""foo"": [true, ""bar""], ""tags"": {""a"": 1, ""b"": null}} │
╘═════════════════════════════════════════════════════╛
SELECT 1
Command Time: 8.10623168945e-06
```

Doing a bit of research shows that SQL_ASCII is an odd encoding style. http://www.postgresql.org/docs/9.0/static/multibyte.html

Do you have any pointers on why SQL_ASCII is used as encoding style for the database? 

After a bit of research I found out that this is not related to JSONB but it has to do with the encoding of the database. I've fixed this in a branch and I was wondering if you could try it out and let me know if it works for you. 

You can install directly from a branch in github using the following command: 

```
pip install -e ""git+https://github.com/dbcli/pgcli.git@amjith/force-utf8-encoding#egg=pgcli""
```

Will do tonight. Thinking of it, this DB was created with an Ansible playbook, probably not specifying an encoding, causing it to have that weird encoding. Stupid me. :)

This works! Although I'm not sure what exactly causes this. The DB is encoded UTF8...

If it's encoded UTF8 then pgcli will be using utf8 as the default encoding. 

Can you try `psql -l` to see the list of databases and their encodings?

That should tell you what postgres thinks the encoding is set for that DB. 

Looks ok:

| Name | Owner | Encoding | Collate | Ctype | Access privileges |
| --- | --- | --- | --- | --- | --- |
| postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 |  |
| registry | registry | UTF8 | en_US.UTF-8 | en_US.UTF-8 |  |
",2015-06-30 20:56:49,2015-07-25 17:16:21
924,273,"Building on @amjith's last specials refactor, this wraps up a lot of the specials.main file into a PGSpecial class, which makes it possible for multiple PGCli instances to coexist in the same python interpreter without interfering with each other through module level globals in pgspecial. While doing this I was also able to weaken some of the coupling between pgspecial, pgexecute, and pgcli.

As before, special commands that do not manipulate state are defined by the `@special_command` decorator, which stores metadata in the `COMMANDS` variable. During initialization of a new PGSpecial object, a _copy_ of `COMMANDS` is stored in the member variable `commands`. Further special method registration is done through the method PGSpecial.register, which of course modifies only the member variable, not the module one.

One hesitation I had was where the code for `\x` and `\timing` belonged. Because they're ultimately responsible for mutating the state of the cli application I moved them out of the specials package and into PGCli, in parallel to `\c` and `\#`.
","More specials refactoring
I like this refactor. This is perfectly inline with what I wanted to do (once I got some time). So thanks for picking it up. 

I'd like us to move even further on the decoupling front and eventually spin off pgspecial as a standalone library.

I've left a few comments regarding the usage of global vars and using the methods in the class to proxy it through to the global functions. 

I think it's a fine way to start the refactor but I think by the time we merge this PR, we should move all those globals into the class. 

Good work @darikg. :)

Ok, I think we're on the same page now. 

All the changes look good. I'll give it a try tomorrow and merge it in. 

Thank you for taking the time to do the clean up. 

Works well. I'm happy to see you take on the second phase of the refactor and complete it. 

:koala: 
",2015-06-30 16:56:17,2015-07-02 00:14:09
925,272,"Upgrade to the latest prompt-toolkit.
Windows support should now have been improved significantly. Especially the rendering (the completion menu doesn't leave traces anymore), and handling of unicode input. French characters of latin-1 like `éôë`, etc.. should work correctly.

Normally, there are no backwards incompatible changes in this release.

@darikg: Please have a look.

Cheers,
Jonathan
","Upgrade to prompt_toolkit==0.42.
[![Code Health](https://landscape.io/badge/196987/landscape.svg?style=flat)](https://landscape.io/diff/186065)
Code quality remained the same when pulling **[31f08ac](https://github.com/jonathanslenders/pgcli/commit/31f08ace2e2ea8266fc17350b2e3dbd832517515) on jonathanslenders:prompt_toolkit_0.42** into **[c5e960c](https://github.com/dbcli/pgcli/commit/c5e960c128ed46cc557425b5146dbedd4b119dc9) on dbcli:master**.

Thanks a lot for all your work on the windows side of things. Everything looks good to me, except for some unicode oddities:

```
test> select 'é'
+------------+
| ?column?   |
|------------|
| 82          |
+------------+
SELECT 1
test> select 'xxxé'
+------------+
| ?column?   |
|------------|
| xxx82       |
+------------+
SELECT 1
```

I assume this is a pgcli problem, not a prompt-toolkit one. Hopefully @amjith can point me in the right direction to confirm.

I tested it on OS X and I don't see this issue. Are you referring to the alignment issue or the fact that é is returned as 82? 

If you're referring to alignment, we use `wcswidth` library to determine the width of non-ascii characters. You can see how it's used here: https://github.com/dbcli/pgcli/blob/master/pgcli/packages/tabulate.py#L384

When you're on master branch how does the output look when unicode is involved? 

The 82 thing, yeah. Maybe it's an issue with my pager? Will look into this further when I get a chance. Go ahead and merge whenever

> On Jun 25, 2015, at 8:07 PM, Amjith Ramanujam notifications@github.com wrote:
> 
> I tested it on OS X and I don't see this issue. Are you referring to the alignment issue or the fact that é is returned as 82?
> 
> If you're referring to alignment, we use wcswidth library to determine the width of non-ascii characters. You can see how it's used here: https://github.com/dbcli/pgcli/blob/master/pgcli/packages/tabulate.py#L384
> 
> When you're on master branch how does the output look when unicode is involved?
> 
> —
> Reply to this email directly or view it on GitHub.

I'm not sure, but maybe it could be a bug in the pager implementation of click.

See: https://github.com/mitsuhiko/click/blob/a0d426d89434fcade5e96545d5203682c4fc5249/click/_termui_impl.py#L255

Click writes to output to a text file and feeds that to the ""more"" application of Windows. Have a look at whether the text file that click creates, has the cp437 encoding (or whatever `sys.stdout.encoding` reports.)

edit: Maybe I should make a pager based on the prompt-toolkit code that also supports syntax highlighting.

Sorry about not getting back to you guys on this earlier, but it's definitely the pager. I was actually using less.exe (which I think came with msysgit) because more.exe was randomly interpreting non-unicode text files as unicode (presumably because of the prevalence of non-text characters from the table outlines; see #183). Switching _back_ to more.exe fixes the unicode display issue. Eventually I'll try to figure out whether the problem is with less or click.

@darikg Thanks for testing it on Windows. You 're welcome to merge it in if you're satisfied. I've tested this PR on OS X and I'm fairly confident that it's all good. 

BTW, I did get a Windows 7 VM and got python installed but I couldn't get psycopg2 to install. I'll send you an email describing the error message, maybe you can help me. :) 
",2015-06-25 19:25:18,2015-06-28 22:59:12
926,271,"Addresses issue #220.
","Added support for PGPASSWORD environment variable. Connect #220.
[![Code Health](https://landscape.io/badge/194823/landscape.svg?style=flat)](https://landscape.io/diff/183747)
Code quality remained the same when pulling **[f12f293](https://github.com/dbcli/pgcli/commit/f12f2937ed3ba08c3558bf170006c97ceb7459df) on dbcli:add-env-pgpassword** into **[f7cfbaa](https://github.com/dbcli/pgcli/commit/f7cfbaab1689b50640adb75476fa14800aaf9eae) on dbcli:master**.

Looks good! 

:curry: 
",2015-06-23 02:24:51,2015-06-23 03:48:02
927,270,"When inside the named query, suggestions don't show up.

![named-query-no-autocomplete](https://cloud.githubusercontent.com/assets/637013/8294961/1df337e0-18f5-11e5-860e-5b47ae95dbe1.png)

Boo.
","There is no autocompletion inside a named query.
Yes I'm aware of that handicap. Thanks for filing an issue for it. :)

BTW, we also need a way to allow multi-line mode for this. Otherwise named queries are just a fancy gimmick. :P 
",2015-06-22 22:42:05,2015-08-26 04:45:53
928,269,"Copy of PR #266.
","Started working on integration tests.
[![Code Health](https://landscape.io/badge/194420/landscape.svg?style=flat)](https://landscape.io/diff/183362)
Repository health decreased by 0.15% when pulling **[5b8afaa](https://github.com/dbcli/pgcli/commit/5b8afaafd698a922a94e2b997a839d14afe9d58f) on j-bennet/itegration-tests** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on master**.
- [11 new problems were found](https://landscape.io/diff/183362) (including 0 errors and 11 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/194454/landscape.svg?style=flat)](https://landscape.io/diff/183393)
Code quality remained the same when pulling **[42028a5](https://github.com/dbcli/pgcli/commit/42028a57ba750ff18d1e76c1b3744d35c4f2c9ff) on dbcli:j-bennet/itegration-tests** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on dbcli:master**.

[![Code Health](https://landscape.io/badge/194470/landscape.svg?style=flat)](https://landscape.io/diff/183415)
Code quality remained the same when pulling **[c31269c](https://github.com/dbcli/pgcli/commit/c31269cc788e09ca292975e4cb22618889af46d8) on dbcli:j-bennet/itegration-tests** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on dbcli:master**.

[![Code Health](https://landscape.io/badge/194561/landscape.svg?style=flat)](https://landscape.io/diff/183504)
Repository health increased by 0.40% when pulling **[8ab9e26](https://github.com/dbcli/pgcli/commit/8ab9e261e1390b4b8a389d01462dbcb394796f19) on j-bennet/itegration-tests** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on master**.
- [1 new problem was found](https://landscape.io/diff/183504) (including 0 errors and 0 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/194574/landscape.svg?style=flat)](https://landscape.io/diff/183515)
Code quality remained the same when pulling **[52c98d4](https://github.com/dbcli/pgcli/commit/52c98d4d2db71504aa9aa65c3e2d77170fe46a57) on dbcli:j-bennet/itegration-tests** into **[e187105](https://github.com/dbcli/pgcli/commit/e187105f620891a026ce3739a9f0f568e6f1bc65) on dbcli:master**.

@j-bennet Is there more to be done here or should we merge this in and start adding more behavioral tests? 

I think it' good to merge. I'll add more tests later, but the current setup can also be used by others to build upon.

Would you mind adding some instructions to Readme or Develop.rst on how to run this?

I tried running `behave` and I get the following error:

```
Exception OperationalError: FATAL:  role ""behave_user"" does not exist

Traceback (most recent call last):
  File ""/Users/amjith/.virtualenvs/pg-cli/bin/behave"", line 11, in <module>
    sys.exit(main())
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/behave/__main__.py"", line 109, in main
    failed = runner.run()
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/behave/runner.py"", line 672, in run
    return self.run_with_paths()
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/behave/runner.py"", line 693, in run_with_paths
    return self.run_model()
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/behave/runner.py"", line 471, in run_model
    self.run_hook('before_all', context)
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/behave/runner.py"", line 405, in run_hook
    self.hooks[name](context, *args)
  File ""features/environment.py"", line 48, in before_all
    context.conf['dbname'])
  File ""/Users/amjith/Dropbox/code/python/pgcli/features/db_utils.py"", line 19, in create_db
    cn = create_cn(hostname, password, username, 'postgres')
  File ""/Users/amjith/Dropbox/code/python/pgcli/features/db_utils.py"", line 47, in create_cn
    cn = connect(host=hostname, user=username, database=dbname)
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/psycopg2/__init__.py"", line 164, in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
psycopg2.OperationalError: FATAL:  role ""behave_user"" does not exist
```

Could you create the user (or use `postgres` user) as part of the test? 

Also create the database that is needed to run these tests? 

Eg: We do something similar in our regular test suite: https://github.com/dbcli/pgcli/blob/master/tests/utils.py

Will do.

Added instructions to DEVELOP.rst (looks like a better place than normal readme?). Changed default test user to postgres.

Were you able to get the tests passing? The \? test always times out for me. 

Yes. Timing out means something's wrong though. What's the trace?

If you look here:

https://github.com/dbcli/pgcli/blob/j-bennet/itegration-tests/features/fixture_data/help.txt

This is what the test expects to be output when user enters `\?` command. So what can happen is, maybe your output is somehow different, and then the process waits and waits for this expected output and never gets it, until it times out.

What do you see in your cli when you enter `\?`?

I was using 'fancy_grid' for the table_format in .pgclirc. 

So the output didn't match exactly. Can we use a specific table_format in the integration tests? 

Ah, that explains it. I should set all the output parameters explicitly then, they can be set when calling pgcli from command line, correct? 

I don't think there is a way to set the grid at launch time via command line arg. It relies on the config file. 

Is there a way to start with a given configuration file?
On Jul 2, 2015 11:13 PM, ""Amjith Ramanujam"" notifications@github.com
wrote:

> I don't think there is a way to set the grid at launch time via command
> line arg. It relies on the config file.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/pull/269#issuecomment-118248201.

I was thinking the same thing. Not right now but that's a good idea. We should add an option to pass in the config file. 

[![Code Health](https://landscape.io/badge/201152/landscape.svg?style=flat)](https://landscape.io/diff/189996)
Code quality remained the same when pulling **[daeff77](https://github.com/dbcli/pgcli/commit/daeff7798a6155150a91f74a6c1dd65785a8f32a) on dbcli:j-bennet/itegration-tests** into **[e187105](https://github.com/dbcli/pgcli/commit/e187105f620891a026ce3739a9f0f568e6f1bc65) on dbcli:master**.

Ok, so I'm not expecting the exact table output anymore. The tests should pass now. But definitely it would be nice to add the config option. Makes reproducing the exact environment so much easier. Do you mind if I do that (in a different branch)?

[![Code Health](https://landscape.io/badge/201638/landscape.svg?style=flat)](https://landscape.io/diff/190474)
Code quality remained the same when pulling **[de116be](https://github.com/dbcli/pgcli/commit/de116beec973c3dbf8b5fd81d9cadf35a1fb20d9) on dbcli:j-bennet/itegration-tests** into **[e187105](https://github.com/dbcli/pgcli/commit/e187105f620891a026ce3739a9f0f568e6f1bc65) on dbcli:master**.

After you removed the formatting, it passes the tests as expected. 

Thanks for taking the time to write integrations tests for pgcli. I appreciate it very much. :)

[![Code Health](https://landscape.io/badge/201947/landscape.svg?style=flat)](https://landscape.io/diff/190802)
Code quality remained the same when pulling **[09cae83](https://github.com/dbcli/pgcli/commit/09cae83eb8c4acf3a787b26f354d627440fc3a40) on dbcli:j-bennet/itegration-tests** into **[e187105](https://github.com/dbcli/pgcli/commit/e187105f620891a026ce3739a9f0f568e6f1bc65) on dbcli:master**.

Thank you! Looks great.
",2015-06-22 16:25:35,2015-07-04 17:23:29
929,268,"Reviewer: @j-bennet 

Closes #264 #265 

When a user invokes `\n` and there are no saved queries, the documentation for that command will be printed. 

When a user makes a mistake like invoking `\ns` or `\nd` without giving it an argument, it will print the usage. 

This should help educate users about this awesome feature. :)

/cc @brettatoms 
","Amjith/named query docs
[![Code Health](https://landscape.io/badge/193950/landscape.svg?style=flat)](https://landscape.io/diff/182869)
Code quality remained the same when pulling **[7f75f49](https://github.com/dbcli/pgcli/commit/7f75f49899139a34fd3f817dd8b6776bf5713a9a) on dbcli:amjith/named-query-docs** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on dbcli:master**.

Nice. Merging.
",2015-06-22 03:54:08,2015-06-22 22:39:09
930,267,"Reviewer: @darikg 

Simple change to raise a custom exception type when a special command is not found.

Previously it used to raise KeyError, but this is not as explicit as I'd like it to be. 
","Create a new error type for special command not found.
[![Code Health](https://landscape.io/badge/193948/landscape.svg?style=flat)](https://landscape.io/diff/182866)
Code quality remained the same when pulling **[506db18](https://github.com/dbcli/pgcli/commit/506db1866996db0af17f5c602556fd882fe60b0e) on dbcli:amjith/special-command-not-found** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on dbcli:master**.
",2015-06-22 03:51:29,2015-06-22 21:26:45
931,266,"This adds behavioral style integration tests using `behave` and `pexpect`.

Before any scenarios are run, environment.py makes sure to create a test DB with user, pwd, host, dbname configured in behave.ini.

Right now, only two scenarios are added:
1. Connect to pgcli using the test DB, make sure that prompt is displayed.
2. Connect to pgcli using the test DB, make sure that prompt is displayed, send Ctrl + D and exit.

P.S. Not sure why it's also showing @amjith' named queries commit on this PR. :-/
","This is a beginning of integration tests for pgcli.
[![Code Health](https://landscape.io/badge/193865/landscape.svg?style=flat)](https://landscape.io/diff/182785)
Repository health decreased by 0.15% when pulling **[ba686f0](https://github.com/j-bennet/pgcli/commit/ba686f0d3368367294f7c2edc78f600b60272f9f) on j-bennet:master** into **[b292a52](https://github.com/dbcli/pgcli/commit/b292a52180b0af05b7e4a0ae30635daf6a623805) on dbcli:master**.
- [11 new problems were found](https://landscape.io/diff/182785) (including 0 errors and 11 code smells).
- No problems were fixed.

I think my commit is part of the PR because you probably created your branch while you were testing my PR. 

Now that my PR is merged to master, you do a `git pull origin master` and then rebase master on to your branch and force push. 

That will update this PR with just your commits. 
",2015-06-21 22:09:33,2015-06-22 16:26:26
932,265,"There should be some kind of message, for example, ""No named queries"".
","There's nothing output on ""\n"" when there's no named queries.
I'm on it. 

Usage is now printed - closing.
",2015-06-21 17:18:16,2015-06-22 23:22:28
933,264,"It would be good to add help to special commands. For named queries specifically, because they are a non-standard feature. So you could run `\n --help` and see the usage.
","More help needed for named queries.
Working on it now. 
",2015-06-21 17:10:51,2015-06-22 22:39:09
934,263,"Reviewer: @j-bennet 

Previously the named queries were only matched based on starting characters. This change makes the matching to be fuzzy. 

Reasoning: We do start_only matching for keywords, special commands and datatypes. There is no need to restrict the named query matching to start_only. 

/cc @brettatoms 
","Make named query names to the fuzzy matched.
[![Code Health](https://landscape.io/badge/193571/landscape.svg?style=flat)](https://landscape.io/diff/182462)
Code quality remained the same when pulling **[cee0577](https://github.com/dbcli/pgcli/commit/cee0577a18bd56f720ce29c08e80c41a4ad3d3b0) on dbcli:amjith/named_query_fuzzy** into **[72d4353](https://github.com/dbcli/pgcli/commit/72d435338209917e2e9f6624af6591f995644b98) on dbcli:master**.

Works fine, going to merge.
",2015-06-21 08:34:54,2015-06-21 17:04:03
935,262,"In expanded mode the record separator looks like this `-[ RECORD 26 ]-------------------------`. 

The number of dashes used to be calculated based on the longest value of a column. Now this is made a constant for two reasons. 
1. If a column has a really long value (say a multi-line paragraph). The separator will look ridiculous which  would make the expanded output useless. 
2. It is more performant to use a constant value instead of trying to iterate over the whole set of values just to determine the max length to use. 

Reviewer: @macobo 
","Make the horizontal separator in expanded mode a constant length.
[![Code Health](https://landscape.io/badge/193559/landscape.svg?style=flat)](https://landscape.io/diff/182449)
Repository health decreased by 0.18% when pulling **[7c6c56d](https://github.com/dbcli/pgcli/commit/7c6c56de6b72924818d187f1f4ff04f154619a86) on amjith/expanded_output_separator_fix** into **[72d4353](https://github.com/dbcli/pgcli/commit/72d435338209917e2e9f6624af6591f995644b98) on master**.
- [2 new problems were found](https://landscape.io/diff/182449) (including 0 errors and 2 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/193566/landscape.svg?style=flat)](https://landscape.io/diff/182458)
Repository health decreased by 0.04% when pulling **[e6236ac](https://github.com/dbcli/pgcli/commit/e6236aca2bd3a5b7dbb13a6140f556a84b9289ab) on amjith/expanded_output_separator_fix** into **[72d4353](https://github.com/dbcli/pgcli/commit/72d435338209917e2e9f6624af6591f995644b98) on master**.
- [1 new problem was found](https://landscape.io/diff/182458) (including 0 errors and 0 code smells).
- No problems were fixed.

@macobo Can you review and merge? 

I'm guessing @macobo is busy. 

@j-bennet Can you take a look? 

Ok.

Looks fine. Merging.
",2015-06-21 07:02:30,2015-07-02 04:52:04
936,261,"Reviewer: @macobo 

During my refactor of the config.py I had chosen to instantiate an empty ConfigObj() and then merge in the default and the user config files on it. But this meant the ConfigObj() that I created didn't have a filename associated with it. This broke the behavior of NamedQueries when it tried to save the queries to the ~/.pgclirc file. This PR fixes that issue.

/cc @brettatoms 
","Assign a filename to the config obj.
[![Code Health](https://landscape.io/badge/193336/landscape.svg?style=flat)](https://landscape.io/diff/182217)
Code quality remained the same when pulling **[5dc20b2](https://github.com/dbcli/pgcli/commit/5dc20b248f4e0c5f93b6aa406238920b72733b9b) on dbcli:amjith/config_obj_bug_fix** into **[4452802](https://github.com/dbcli/pgcli/commit/44528026d292737641ce8011b5096ade8f87a9a6) on dbcli:master**.

@amjith Where is the ""save config"" code?

I think there's a potential bug where the PGCli instance holds a config  instance and the NamedQueries object also holds an instance so they affectively both have open file handles to the same object.  We should probably have a single shared instance of the config.

@j-bennet The save config code is in named queries. https://github.com/dbcli/pgcli/blob/master/pgcli/packages/pgspecial/namedqueries.py#L18

@brettatoms You're right. They do both have copies of the file open. It's not a big deal right now since only one of them will write to it. But this is something to be fixed. 

I think it's time to make the config.py into a class and make it a singleton (I'm not really sure how to do that in Python). 

The config refactor will have to be a separate PR. 

This lgtm, what are the missing pieces here?

No missing pieces at the moment. The config class refactor will have to wait. 
",2015-06-20 15:50:00,2015-06-23 05:42:12
937,260,,"add autocompletion for named queries
[![Code Health](https://landscape.io/badge/193243/landscape.svg?style=flat)](https://landscape.io/diff/182118)
Code quality remained the same when pulling **[c1221af](https://github.com/brettatoms/pgcli/commit/c1221af5442aa34ea3b437b2e53ba6f893f457e0) on brettatoms:autocomplete-namedqueries** into **[4452802](https://github.com/dbcli/pgcli/commit/44528026d292737641ce8011b5096ade8f87a9a6) on dbcli:master**.

While testing this feature I discovered a bug that I introduced with my refactor that prevents the named queries from being written to the ini file.

I'll fix that in a PR separately. 

[![Code Health](https://landscape.io/badge/193387/landscape.svg?style=flat)](https://landscape.io/diff/182278)
Code quality remained the same when pulling **[f07eae1](https://github.com/brettatoms/pgcli/commit/f07eae1018f183df671d0f04459d497aec5cee17) on brettatoms:autocomplete-namedqueries** into **[4452802](https://github.com/dbcli/pgcli/commit/44528026d292737641ce8011b5096ade8f87a9a6) on dbcli:master**.

Thanks for adding autocompletion for saved queries. Changes look good. 

:bowling: 
",2015-06-20 11:46:51,2015-06-21 06:41:55
938,259,"Closes #225. 

This adds a new special command called `\#` to refresh completions. 

Reviewer: @j-bennet 

/cc @darikg This is a testament to the idea of having register hooks for special commands. It was ridiculously easy to add this new command. Thank you for the idea. :)
","Add \# to manually refresh the completions.
[![Code Health](https://landscape.io/badge/190443/landscape.svg?style=flat)](https://landscape.io/diff/179234)
Repository health increased by 0.07% when pulling **[b016b9f](https://github.com/dbcli/pgcli/commit/b016b9f486fc2bf28a1b1aa5d626510fbf65c92f) on amjith/manual-refresh** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on master**.
- No new problems were introduced.
- [2 problems were fixed](https://landscape.io/diff/179234/fixed) (including 0 errors and 0 code smells).

Useful! Seems like an odd command name choice though - not very intuitive. I know postgres already has ""\r"" and ""\reset"" so those are out, but why not ""\refresh""?

I got the idea from MySQL. In MySQL `\#` is used to refresh auto-completion. But `\refresh` is a good idea. I'll add that as well. 

I've added in `\refresh` to manually refresh.

[![Code Health](https://landscape.io/badge/190464/landscape.svg?style=flat)](https://landscape.io/diff/179258)
Repository health increased by 0.07% when pulling **[b8ce97e](https://github.com/dbcli/pgcli/commit/b8ce97e149be470b2965014a42c7120bb4af0f4e) on amjith/manual-refresh** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on master**.
- No new problems were introduced.
- [2 problems were fixed](https://landscape.io/diff/179258/fixed) (including 0 errors and 0 code smells).

Something weird is going on with completions @amjith. See screenshots.
![screenshot 2015-06-17 21 15 41](https://cloud.githubusercontent.com/assets/637013/8224102/4e18da32-1536-11e5-92a4-3cf6716904f8.png)
![screenshot 2015-06-17 21 16 51](https://cloud.githubusercontent.com/assets/637013/8224101/4e17a3f6-1536-11e5-9428-5d205e989417.png)

Looks like this bug is not isolated to this branch, I notice this in the master branch as well, but this only happens after I trigger one of the special commands that have been registered using the hook. Such as `\c`. 

I'll look into it. Nice catch, btw. 

[![Code Health](https://landscape.io/badge/191279/landscape.svg?style=flat)](https://landscape.io/diff/180113)
Repository health increased by 0.07% when pulling **[b000bdd](https://github.com/dbcli/pgcli/commit/b000bddd0ba38f8ed73d34cc066b603e7c7204c0) on amjith/manual-refresh** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on master**.
- No new problems were introduced.
- [2 problems were fixed](https://landscape.io/diff/180113/fixed) (including 0 errors and 0 code smells).

Fixed!

Turns out I wasn't clearing the special commands when I refresh completions. So every time refresh completion was triggered, it added the special commands but never removed the previous set.

You're fast @amjith! Looks great, going to merge. 
",2015-06-17 05:27:33,2015-06-18 05:18:38
939,258,"Database names should not be quoted even if they are keywords or have non-alphabets. 

Before this change database names with unicode characters were quoted. So when you try to change db, it will suggest  

![1__2_0_python_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux_](https://cloud.githubusercontent.com/assets/49260/8199514/adf4db2a-146b-11e5-81d3-441e47f571f1.png)

But choosing the database name with the quotes will result in error. 

![1__2_0_python_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux__and_comparing_master___amjith_no-escape-db-names_ _dbcli_pgcli](https://cloud.githubusercontent.com/assets/49260/8199521/ce3cfaf2-146b-11e5-9d88-e4e04724950a.png)

So quoting database names is not a desired behavior. 

/cc @darikg Can you review and merge? 
","Do not escape the database names, since they clash with \c commands.
[![Code Health](https://landscape.io/badge/190414/landscape.svg?style=flat)](https://landscape.io/diff/179202)
Code quality remained the same when pulling **[1db1410](https://github.com/dbcli/pgcli/commit/1db1410acab58c74133c2897c03b0a4c2b819b5a) on dbcli:amjith/no-escape-db-names** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on dbcli:master**.

doesn't that break `drop database` though?

You're right. Perhaps I should modify chage_db() to strip the quotes. I'll update the PR. 

Updated.

[![Code Health](https://landscape.io/badge/190826/landscape.svg?style=flat)](https://landscape.io/diff/179657)
Code quality remained the same when pulling **[4cc32cb](https://github.com/dbcli/pgcli/commit/4cc32cb88f22b96d25c11d47566d7bdffc76bf11) on dbcli:amjith/no-escape-db-names** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on dbcli:master**.

:stuck_out_tongue_closed_eyes:  `\c` by itself is supposed to reconnect to the current database, but now it gives a `string index out of range` error

Excellent catch. I've fixed it now. Thank you!

:)

[![Code Health](https://landscape.io/badge/191242/landscape.svg?style=flat)](https://landscape.io/diff/180076)
Code quality remained the same when pulling **[5f0ba33](https://github.com/dbcli/pgcli/commit/5f0ba336e9e179b9847abe66abc042660810de34) on dbcli:amjith/no-escape-db-names** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on dbcli:master**.

Cool. Wanna squash those commits or merge as is?

I've been debating to myself about the practice of squashing. On one hand it makes the master git tree nice and clean. But on the other hand, shouldn't we record our mistakes or refactors in history? That sounded less philosophical in my head. I'd be interested to hear the thoughts of the core team. 

/cc @dbcli/pgcli-core 

I've often wished that the PR author didn't squash the commit then I could see the difference between the previous commit and the commit that fixes the issue. Like the prompt_toolkit upgrade PR. We went from 0.36 to 0.38 all in one PR with one single commit that got overwritten multiple times. It makes for clean history but I would have liked to see the progression.

Thoughts?

We don't have to decide this right now. I think I'm ok with not squashing them. You can merge them in @darikg. Unless you'd prefer them to be squashed and you can make a case for it. ;)

You got it
",2015-06-17 04:09:34,2015-06-22 18:55:53
940,257,"Upgrading to the latest version of prompt_toolkit (version: 0.40).

No changes to compatibility with pgcli. I've done some manual testing. 

But I'd appreciate some testing from the @dbcli/pgcli-core team. 

/cc @jonathanslenders 
","Upgrade prompt_toolkit to 0.40.
[![Code Health](https://landscape.io/badge/190411/landscape.svg?style=flat)](https://landscape.io/diff/179199)
Code quality remained the same when pulling **[6802c65](https://github.com/dbcli/pgcli/commit/6802c6570a5d059b7e52c6ec926d0ea47ce4a519) on dbcli:amjith/prompt_toolkit_0.40** into **[0941ffc](https://github.com/dbcli/pgcli/commit/0941ffc148ce65bd6c916f0ddc28f561cf2eec30) on dbcli:master**.

I'll have this branch checked out as I'm working over the next few days and will let you know if I see anything weird.

I've been using this branch for a while now without any regressions. I'm going to merge it in tomorrow. Let me know if any of you (@dbcli/pgcli-core ) have objections. 

Go for it.
",2015-06-17 04:03:38,2015-06-25 05:52:55
941,256,"I find it a bit distracting when typing a SQL statement with the auto-completion popup flashing in and out when I don't need it yet. I think it would be nice to have a config option to add a delay before the popup after you stop typing. Alternatively, we can also make the auto-completion only popup when user presses a hotkey similar to how most IDEs work.
","Is there a way to delay auto-completion popup?
Hi @xiaochuanyu. In it's current form pgcli doesn't have the ability to turn off the auto pop-up. 

But it is possible to make the auto-completion popup only when you press `<tab>` or Ctrl-Space. I've added this feature in a branch for you to test it out. You can install directly from the branch using the following command: 

```
pip install -U -e ""git+https://github.com/dbcli/pgcli.git@amjith/optional-auto-complete#egg=pgcli""
```

Once you install from that branch, open up your config file in ~/.pgclirc and add this line at the top of the file in the `[main]` section.

`always_on_autocompletion = False`

That should make the autocompletion only trigger when you press tab or ctrl-space. 

Let me know how it works for you.

Hey @amjith, I tried out the branch, but I still think adding a delay would be ideal so I don't even have to press the hotkey to get auto-completion suggestions when I need them. I think this will be valuable to future users since a lot of times people tend to pause when typing out their queries when they are not sure about something and need auto-completion suggestions.
How difficult do you think it is right now to add this feature? I was thinking about taking a look at the code on the weekend and try to add it myself.

P.S. I really love this project. Thank you for creating something like this.

@xiaochuanyu I believe it is possible. You might want to look into [prompt_toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) the library that powers the completion menu. 

Especially this file: https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/filters/base.py

I'm currently changing the auto-completion behavior here in pgcli: https://github.com/dbcli/pgcli/blob/amjith/optional-auto-complete/pgcli/main.py#L237

The two options available are `Always` and `Never`, see if you can add something called `Delayed`. Although I'm not 100% sure if that's the approach to take, so take my suggestion with a grain of salt and let your imagination run wild. :)

What happened to this branch?
@flipperbw It may have been deleted after being inactive for a while. Timers are tricky though, just like @amjith and @jonathanslenders mentioned, hotkey-autocompletion (Tab or Ctrl+Space) may be a better bet.
This is not something we plan to pursue. Sorry to disappoint.",2015-06-15 16:33:30,2017-12-15 00:02:12
942,255,"Created a new PR from the decorators branch. 
## Description: 

This implements a new way of defining special commands using decorators as well as register_special_command() hook.

No more listing of all special commands in a dictionary. Instead functions that are decorated using a `@special_command` is added to the commands dict automatically. Kinda like Flask, where you define the routes of your webapp using decorators.

Also, no more separate `COMMANDS` and `HIDDEN_COMMANDS`, instead the values in the dictionary are a namedtuple called `SpecialCommand()` which defines everything you need to know about a command.

I think this is a much better approach. But I'd love to hear your thoughts. If you're satisfied with that approach, I'll close this PR and open a new PR from that branch.

/cc @j-bennet & @darikg 
","Amjith/specials decorator
[![Code Health](https://landscape.io/badge/188538/landscape.svg?style=flat)](https://landscape.io/diff/177184)
Repository health increased by 4% when pulling **[41d6ac9](https://github.com/dbcli/pgcli/commit/41d6ac95acf5d2671bf3b673d0a91073bc0692a2) on amjith/specials-decorator** into **[1717186](https://github.com/dbcli/pgcli/commit/1717186c640c40dea8997a849ad7b669c212562a) on master**.
- [14 new problems were found](https://landscape.io/diff/177184) (including 1 error and 11 code smells).
- [26 problems were fixed](https://landscape.io/diff/177184/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/188541/landscape.svg?style=flat)](https://landscape.io/diff/177189)
Repository health increased by 4% when pulling **[97f6bd1](https://github.com/dbcli/pgcli/commit/97f6bd12d9a09cb327ec5cab7f9fe6454e0328e9) on amjith/specials-decorator** into **[1717186](https://github.com/dbcli/pgcli/commit/1717186c640c40dea8997a849ad7b669c212562a) on master**.
- [9 new problems were found](https://landscape.io/diff/177189) (including 0 errors and 7 code smells).
- [26 problems were fixed](https://landscape.io/diff/177189/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/189139/landscape.svg?style=flat)](https://landscape.io/diff/177828)
Repository health increased by 4% when pulling **[9395f97](https://github.com/dbcli/pgcli/commit/9395f9737b75b94b515d34de45f062f3fb2c3565) on amjith/specials-decorator** into **[1717186](https://github.com/dbcli/pgcli/commit/1717186c640c40dea8997a849ad7b669c212562a) on master**.
- [9 new problems were found](https://landscape.io/diff/177828) (including 0 errors and 7 code smells).
- [26 problems were fixed](https://landscape.io/diff/177828/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/189149/landscape.svg?style=flat)](https://landscape.io/diff/177841)
Repository health increased by 4% when pulling **[5e12644](https://github.com/dbcli/pgcli/commit/5e12644db3a35c9f956310eeabc63e6c7389751c) on amjith/specials-decorator** into **[1717186](https://github.com/dbcli/pgcli/commit/1717186c640c40dea8997a849ad7b669c212562a) on master**.
- [9 new problems were found](https://landscape.io/diff/177841) (including 0 errors and 7 code smells).
- [26 problems were fixed](https://landscape.io/diff/177841/fixed) (including 2 errors and 24 code smells).

I've added `aliases` to the `register_special_command()` and the `@special_command()` decorator.

I'm using the aliases keyword to the change_db method for 'use', '\c' and '\connect'. But I'm not using it for describe_table_details() here https://github.com/dbcli/pgcli/pull/255/files#diff-f353ad4995ec86e0878d2a80b589c6daR288 because one of them is case_sensitive and the other one is not.

[![Code Health](https://landscape.io/badge/189152/landscape.svg?style=flat)](https://landscape.io/diff/177843)
Repository health increased by 4% when pulling **[c576f47](https://github.com/dbcli/pgcli/commit/c576f47c0d9677a9fd8dcff25a2947eb40fd0bbc) on amjith/specials-decorator** into **[1717186](https://github.com/dbcli/pgcli/commit/1717186c640c40dea8997a849ad7b669c212562a) on master**.
- [9 new problems were found](https://landscape.io/diff/177843) (including 0 errors and 7 code smells).
- [26 problems were fixed](https://landscape.io/diff/177843/fixed) (including 2 errors and 24 code smells).

Your explanation of how decorators interact with unbound methods made me think of something. Right now pgspecial stores state in its module-level globals, currently `COMMANDS`, `TIMING_ENABLED` and `use_expanded_output`. For standard usage in a cli, when there's only one `PGCli` instance in the python interpreter, this is fine. But when pgcli is used embedded in a larger application, as with the ipython magic, or text editor plugins, you can have multiple `PGCli` instances all sharing the same `pgspecial` module. I can picture some weird stuff happening when different instances try to register the same `\c` command, for instance. This could be worked around by either wrapping pgspecial up into a class, where state is stored in instance variables, or by making the pgspecial module stateless. But I'm not sure how that would interact with the decorator approach. Any thoughts? This doesn't need to be solved immediately, but it'd be nice to have sketch of how that would work.

@darikg Yes. It's been bugging me ever since I started the refactor. I think making it a class is the right thing to do. But I think it can wait till we pull it out of pgcli and make it into an independent project. 

I think I'd prefer to merge this PR (if there are no objections) and file an separate extraction issue for it. 

@j-bennet I'm cool with merging this if you are

Absolutely. I think it's great.

:confetti_ball: :tada: :balloon: 

Thanks for questioning my assumptions and pushing me to go further with the refactor. I think we ended up with a pretty nice interface to the pgspecial module. :)
",2015-06-14 16:39:32,2015-06-16 23:40:57
943,254,"Reviewer: @drocco007 

This is an implementation of fuzzy completion (or true subsequence matching) for schemas/tables/columns/views. This is not enabled for keywords.

Typing `djms` will match `django_migrations`. It is implemented as follows:

When user types `djms` we create a regex pattern that looks like this `(d.*j.*m.*s)` and try to match against the collection. So `django_migrations` will be a positive match. 

In order to produce the relevant ordering in the suggestion menu, there are two ranking values used. 
1. Length of a matching group. 
2. Position of the first matching character. 

Here's how it is used:

Let's say there are two tables `django_migrations` and `misago_threads_post_mentions`. 

Case 1:
If a user starts to type `djm` it will be converted to `(d.*j.*m)`, which will match `django_migrations` which is what we want. 

Case 2:
If a user types `migr` it will be `(m.*i.*g.*r.*)` which will match both tables and depending on the location of the table in the list it is possibel that `misago_threads_post_mentions` will be listed first, but the user clearly intended to match `django_migrations` since they typed `migr`. The ranking algo will first check the length of the matching group in this case for `misago_threads_post_mentions` the matching group will be `misago_thr`. For `django_migrations` the matching group will be `migr`. The rank is assigned by the length of the matching group. So `django_migration` wins.

Another scenario: 

Let's take two table `django_migrations` and `migrations`. If the user types `migr`, the matching group will be the same for both strings, so the tie breaker is the appearance of the first matching character. In this case `migrations` table will win and it will be suggested first. 

This was a fun feature to implement. :)

Looking forward to your feedback.

ps: Thanks @zoltu. 
","Implement fuzzy completion using regex.
[![Code Health](https://landscape.io/badge/181996/landscape.svg?style=flat)](https://landscape.io/diff/170283)
Code quality remained the same when pulling **[2f4f535](https://github.com/dbcli/pgcli/commit/2f4f5350e1309540c4052c44ff3ab3709a5ad1ca) on dbcli:amjith/fuzzy_completion** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on dbcli:master**.

Hey Amjith!

This looks great! I think this will be a nice enhancement to this feature, as I've gotten quite used to this sort of matching in PyCharm, Sublime, and other tools that I use.

I have a couple thoughts on the ranking. Here is an example query using the current version in this PR:

![pgcli_fuzzy_completion_existing](https://cloud.githubusercontent.com/assets/1424858/8073845/89b844cc-0ef8-11e5-8349-6d5b02236044.png)

It feels weird to me that `""user""` ranks below `user_action` etc.; intuitively, I expect the quotes to be ignored, which would put `""user""` first since it's the shortest. This is pretty easy to change: have the `pat.search` call on line `204` use the unquoted string, leaving everything else the same. Although there is an `unescape_name` method in this class, `find_matches` is defined statically so we can't say `self.unescape_name(item)` as is. Here is a proof of concept demonstrating the idea (which might be modified with a refactor of `unescape_name`):

``` python

        def unquote(s):
            return s[1:-1] if s[0] == s[-1] == '""' else s

        if fuzzy:
            # …
            for item in sorted(collection):
                r = pat.search(unquote(item))  # modification to existing line 204
                # …
```

and the result:

![pgcli_fuzzy_unquote](https://cloud.githubusercontent.com/assets/1424858/8073940/c5eeecc4-0ef9-11e5-964f-47962909aa3f.png)

Looking at this output, I again thought it was odd that `api_user` appears before `user_group`. Digging in a little, it turns out the search `user` expands to `u.*s.*e.*r`; notice that `user_group` has _two_ `r`s, so the pattern matches `user_gr` instead of the expected `user`. The longer match length forces the ranking of this match down, which again seems counterintuitive. This is easy to change by using the non-greedy version of the repeat pattern on line `201`(`.*?` instead of `.*`) between the search term characters:

``` python

         if fuzzy:
            #pat = compile(''.join([escape(c) + r'.*' for c in text]))
            regex = '.*?'.join(map(escape, text))
```

and the result:

![pgcli_fuzzy_nongreedy](https://cloud.githubusercontent.com/assets/1424858/8074156/88a1ddce-0efc-11e5-9669-5903945853d3.png)

Another thought: both Sublime Text and PyCharm highlight the matched characters in the completions. Is this something prompt_toolkit supports? If so, I think that would be a nice enhancement to have (probably as a separate issue, though :)

I'll keep this branch checked out as I'm working tomorrow and let you know if any other thoughts arise from using this change in a live environment!

— dan

Those are some great observations. I love that you dug in when the ranking was off and found the root cause. :)

Feel free to make the changes and push to the branch. I'll keep an eye. :+1: 

[![Code Health](https://landscape.io/badge/188802/landscape.svg?style=flat)](https://landscape.io/diff/177466)
Repository health increased by 0.19% when pulling **[bbd1ac2](https://github.com/dbcli/pgcli/commit/bbd1ac231e8ca1922e75fe6337f338af6c7a2038) on amjith/fuzzy_completion** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/177466/fixed) (including 0 errors and 1 code smell).

I've updated the PR with your feedback @drocco007.

I've made the regex non-greedy and unquoted the items. I've made `find_matches()` a non-static function instead of duplicating the unescape_name() method. 

There is still one corner case where the ranking can be off. 

![1__3_1_python_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux_](https://cloud.githubusercontent.com/assets/49260/8153793/9b2b4bf8-12e7-11e5-8f0a-51ff7dbe7195.png)

Even though I've typed 'se' it still recommend information_schema above the entry named ""select"" which is wrong. 

But the reason for that is because we do this ranking for each category, first we apply the ranking to schemas, then tables, then views etc. But there is no overall ranking for all of them put together. So the schema suggestions always float to the top. 

Frankly I'm ok with that case because once we add the metadata (#200) to the suggestions, it'll make a lot more sense and I'd prefer to have them grouped together.

[![Code Health](https://landscape.io/badge/189841/landscape.svg?style=flat)](https://landscape.io/diff/178598)
Repository health increased by 0.32% when pulling **[40149ad](https://github.com/dbcli/pgcli/commit/40149ad648fa84f4597fcb3f3182b83ee62de035) on fuzzy_completion** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/178598/fixed) (including 0 errors and 1 code smell).

Yes, I noticed the schema and table groupings when I first took a look and just assumed that behavior was intentional.

I wanted to capture the intent behind the changes I proposed somewhere in the code base. After all, changing a regular expression from `.*` to `.*?` is a pretty subtle and easy to overlook change, especially a few months from now when we haven't been staring at this part of the code for a while. :wink: To that end, I added a couple of tests that capture and document the intent of these changes. Have a look and let me know what you think! :)

Very good point. The tests look good. Thanks for adding them in. Go ahead and merge it in if you're satisfied with the changes. :)
",2015-06-05 06:28:04,2015-06-18 01:45:37
944,253,"Reviewer: @darikg & @j-bennet 

This is a complete rewrite of the specials package. A few things have changed. 
1. pgspecial is now a directory with all the relevant files to make it into a standalone package. 
2. `\c, \connect and use` are now handled by pgspecial instead of pgexecute.py (which was always felt icky).  We now pass in the PGExecute as `db_obj` to the specials package. The idea is that `db_obj` should have a `connect()` call which will be invoked to change the database. That way whoever decides to use the pgspecial can provide their own db_obj and still achieve the `\c` functionality.
3. There are `@export` decorators sprinkled around the pgspecial code. The `export` decorator is defined in the `__init__.py` file. When a function is decorated by this `@export` it will be exposed by that package and available to use when that package is imported. It is a technique I picked up from David Beazly's tutorial at this PyCon 2015. http://www.dabeaz.com/modulepackage/index.html. Check the slides 53 to 56 on this pdf: http://www.dabeaz.com/modulepackage/ModulePackage.pdf for more details. BTW, that video is worth watching. :)

I'm tagging both of you on this PR since you two have been the most active in that part of the code. I've ran through most of the special commands by hand to make sure I didn't break anything. 

Give it a whirl. 
","Amjith/specials refactor
[![Code Health](https://landscape.io/badge/181966/landscape.svg?style=flat)](https://landscape.io/diff/170263)
Repository health increased by 0.51% when pulling **[a8e7740](https://github.com/dbcli/pgcli/commit/a8e7740e606e5e3cccc14f4f25ea77d963897176) on amjith/specials-refactor** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- [40 new problems were found](https://landscape.io/diff/170263) (including 1 error and 39 code smells).
- [26 problems were fixed](https://landscape.io/diff/170263/fixed) (including 2 errors and 24 code smells).

> 40 new problems were found (including 1 error and 39 code smells).

Holy crap! What did I do to deserve this? ;)

What's with adding `**kwargs` to all the special function signatures?

The `pgspecial.main.execute` takes an extra argument (`db_obj`) which is then passed in to the `executor` call. This means all the special command handlers now get cur, pattern, verbose and db_obj as it's params. I could have just added the 'db_obj' to the handle functions but I wanted to future-proof it. So I decided to make it **kwargs, so if we decide to add more in the future, we can do it in the 'executor' call and the handlers don't have to be touched. 

To make the linter happier, you could do some additional tricks on your code, but I'm not sure if you want to.

See for example this:

```
def show_help(**kwargs):  # All the parameters are ignored.
```

Linter will complain because you're not using `kwargs`. To tell it specifically that you're going to ignore the parameter, you can use _:

```
def show_help(**_):  # All the parameters are ignored.
```

Or assign to _:

```
def show_help(**kwargs):

_ = kwargs # Be explicit about ignoring.
```

Problem is, it does not necessarily add to the clarity of your code. But I would do it anyway, because if you work around these things, then hopefully the remaining linter's complains are more valid and to the point and worth listening to. Right now, you're just going to dismiss everything from linter as ""noise"".

Just spitballing here, but what if pgspecial had an api for registering custom special commands?

Then handling `\connect` could be done wherever, but the the default special functions wouldn't need to ignore any keyword args. 

As a rough sketch:

```
class PGCli ():
  def __init__ (self):
    self.pgspecial = PGSpecial()  # initializes default special commands
    self.pgspecial.register_custom_special('\connect', self.connect_special)

  def connect_special (self, cmd_str):
      if cmd_str:
        self.pgexecute.connect()
      else:
        self.pgexecute.connect(database=cmd_str)
```

Ooh. That's a interesting idea. 

On one hand I like keeping all the special commands in a single place, but if I were to step back and treat pgspecial as a truly separate package, then having that extensibility makes it huge.

Because my next step was going to be adding a way to manually refresh the completions to address #225. Which would require updating the execute to take another argument `pgcompleter` but if we do the register_custom_special(), then we can simplify execute to take *args and pass that along to the existing handlers. 

I'm not sure if I'm making sense, but writing it out helped me clarify my thought process. 

I like the idea. @darikg Would you like to take a stab at it or should I do it? 

@amjith I'm not going to have much time in the next couple weeks so by all means go for it. It's nice you a second use for a more complicated special command, that sound help clarify the api a lot more.

[![Code Health](https://landscape.io/badge/183204/landscape.svg?style=flat)](https://landscape.io/diff/171559)
Repository health increased by 0.88% when pulling **[332ad9a](https://github.com/dbcli/pgcli/commit/332ad9ae23779f7b718315dfcd21579307b75b1c) on amjith/specials-refactor** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- [40 new problems were found](https://landscape.io/diff/171559) (including 1 error and 39 code smells).
- [26 problems were fixed](https://landscape.io/diff/171559/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/183928/landscape.svg?style=flat)](https://landscape.io/diff/172300)
Repository health increased by 3% when pulling **[23e228e](https://github.com/dbcli/pgcli/commit/23e228e711c9a8f96a4bd3978c98a4a3cb8bfaab) on amjith/specials-refactor** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- [31 new problems were found](https://landscape.io/diff/172300) (including 3 errors and 28 code smells).
- [26 problems were fixed](https://landscape.io/diff/172300/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/184331/landscape.svg?style=flat)](https://landscape.io/diff/172714)
Repository health increased by 3% when pulling **[a5b9f49](https://github.com/dbcli/pgcli/commit/a5b9f491b3be4465d1dc6e8188a14a0cee91cbe5) on amjith/specials-refactor** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- [28 new problems were found](https://landscape.io/diff/172714) (including 3 errors and 25 code smells).
- [26 problems were fixed](https://landscape.io/diff/172714/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/184516/landscape.svg?style=flat)](https://landscape.io/diff/172935)
Repository health increased by 3% when pulling **[ab560bd](https://github.com/dbcli/pgcli/commit/ab560bdc1e9361166bb398c62be5f26113925f79) on amjith/specials-refactor** into **[cd70f03](https://github.com/dbcli/pgcli/commit/cd70f036f205e41cf1fb1a34785f1e7d9e80745d) on master**.
- [22 new problems were found](https://landscape.io/diff/172935) (including 3 errors and 19 code smells).
- [26 problems were fixed](https://landscape.io/diff/172935/fixed) (including 2 errors and 24 code smells).

I had to rebase against master and force push to this PR since github couldn't merge it automatically. 

So if you had this branch checked out you might want to delete that branch and refetch it. 

```
git checkout master
git branch -D amjith/specials-refactor
git pull origin 
git checkout amjith/specials-refactor
```

The updated PR has the `register_special_command()` hook. I haven't implemented the rehash yet. 

[![Code Health](https://landscape.io/badge/185170/landscape.svg?style=flat)](https://landscape.io/diff/173594)
Repository health increased by 3% when pulling **[550b9aa](https://github.com/dbcli/pgcli/commit/550b9aa47d177a9bdc1ffd6def3eb20b0d4949d9) on amjith/specials-refactor** into **[6a40c7d](https://github.com/dbcli/pgcli/commit/6a40c7d1252c80df742f7072834ffafb092d5d97) on master**.
- [22 new problems were found](https://landscape.io/diff/173594) (including 3 errors and 19 code smells).
- [26 problems were fixed](https://landscape.io/diff/173594/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/185596/landscape.svg?style=flat)](https://landscape.io/diff/174046)
Repository health increased by 4% when pulling **[6a02546](https://github.com/dbcli/pgcli/commit/6a025464cfa1d79f8e7be667d5717e64556af3db) on amjith/specials-refactor** into **[6a40c7d](https://github.com/dbcli/pgcli/commit/6a40c7d1252c80df742f7072834ffafb092d5d97) on master**.
- [15 new problems were found](https://landscape.io/diff/174046) (including 2 errors and 13 code smells).
- [26 problems were fixed](https://landscape.io/diff/174046/fixed) (including 2 errors and 24 code smells).

[![Code Health](https://landscape.io/badge/185648/landscape.svg?style=flat)](https://landscape.io/diff/174100)
Repository health increased by 4% when pulling **[a91594c](https://github.com/dbcli/pgcli/commit/a91594c59c21ff9c274dc0b483f59c3054c27589) on amjith/specials-refactor** into **[1717186](https://github.com/dbcli/pgcli/commit/1717186c640c40dea8997a849ad7b669c212562a) on master**.
- [8 new problems were found](https://landscape.io/diff/174100) (including 2 errors and 6 code smells).
- [26 problems were fixed](https://landscape.io/diff/174100/fixed) (including 2 errors and 24 code smells).

Sorry for being a little fixated here (I'll drop it after this comment, I promise), but I still think the ignored `*args` / `**kwargs` are weird. I guess they're there because pgspecial assumes all special commands adhere to the `\special pattern[verbose]` syntax, and has to supply the `pattern` and `verbose` arguments separately? Why not reserve the pattern/verbose parsing for only the default standard special commands, but let non-standard registered custom special commands parse the whole line however they see fit?

> Sorry for being a little fixated here (I'll drop it after this comment, I promise). 

It's a very good thing that you're asking me these question. So keep 'em coming.

You have an interesting point about reserving the (pattern, verbose) for standard commands. I'll take another stab at the refactor.

We can get rid of patter and verbose but we still need to pass in the cursor. For example take `\n` as an example. It's a custom command but it still behaves like a built in where it needs the cursor to execute a saved query. 

Just thinking out loud to validate my thoughts. 

I took a stab at the suggestion but pushed it to a separate branch because I'm not sure if it's a better approach. Here's the comparison between the changes in the current PR and the new branch.

https://github.com/dbcli/pgcli/compare/amjith/specials-refactor...amjith/specials-experimental-refactor

I'm not convinced this is better.

Concerns:
- Doesn't solve the **kwargs problem, because some of the custom commands don't even need the query string (for eg: expanded_output() or toggle_timing()). 
- Too much assumed context about what constitutes a STANDARD_COMMAND vs CUSTOM_COMMAND.(For eg: \x, \t, \c are all custom commands even though they are builtin psql commands, but \n is a standard command because it needs the cursor, verbose and pattern args). So a new comer who wants to contribute a special command has to have this context. Even for core devs we'll have to think twice about a special command. Which to me sounds like code smell. 

I'd rather have a convention that says special commands must take 3 args (cur, pattern, verbose), but you're welcome to ignore those params and here's how you can do it (**_).

What do you folks think? 

Didn't think I'd say that (got very excited about ""register_special"" approach), but I would agree. I still think dynamic command registration was a good thought, but I don't like how this approach comes out. I think the previous refactoring was a better stopping point.

There is a couple more things that come to mind:
1. Because we have quite a bit of cases that don't fit into `cur, pattern, verbose` signature, we could standardize all the signatures using the normal python approach, i.e. everything would take _args, *_kwargs. Ignore whatever we don't use. (Except in a lot functions, we'd have copy-paste like this: 
`cur, pattern, verbose = args`. Ouch.)
2. Use reflection to determine what parameters the method accepts. Then everything could have its own signature. (Overkill, anyone?)

I have to think some more about this.

At risk of pushing us further down this rabbit hole, what if
1. All special command callbacks take two arguments: cursor and the command string
2. Pgspecial exports a `@standard_pattern_command` decorator that wraps standard command callbacks and supplies them with cur, pattern, verbose.

Like you said though, we still end up ignoring arguments in expanded_output and toggle_timing, so it's not a whole lot better

@j-bennet I want to force only `**kwargs` no `*args`. That way all the functions will have this signature `def fn(cur, pattern, verbose, **_)` or `def fn(_**)`. The second case is for `timing_enabled` or `expanded_output` where they don't take any args at all. I'm not a fan of reflection, since it can complicated things if a function has a decorator. Because trying reflection on a decorated function will return the args of the decorator. It just complicates things.

@darikg Interesting idea to provide the `parse_special_command()` helper as a decorator. Let's do a thought experiment, with three cases, `\timing`, `\c <dbname>`, `\dt+ <tablename>`. 

```
# \timing
def toggle_timing(**_):
    # Doesn't need cur or query.
    TIMING_ENABLED = not TIMING_ENABLED
```

```
# \c <dbname>
# This is a registered command from PGCli class.
def change_db(self, query, **_):
    # Needs the query which will be '\c test_db', but no need for cursor
    dbname = query.split()[-1]
    self.connect(database=dbname)
```

```
@standard_pattern_command
def describe_one_table(cur, pattern, verbose):
    # Do stuff with all the params.
    return results
```

I don't see a marked improvement in the ergonomics. 

Are there use cases that you have in mind which require unparsed raw query? Say implementing `SHOW TABLES` or `SHOW DATABASES` like the way MySQL does? 

Even for those we have to parse them with `query.split()` and see if the first token is `SHOW` and then take the second token as a pattern.

Thoughts?

One other situation where the entire query will be useful is the `\e` command. 

```
SELECT * FROM \e
```

That should launch an editor and populate the entire query. I had previously dismissed that as a unique snowflake command that doesn't fit this whole pgspecial paradigm. But maybe it's time to rethink that? 

I'll keep thinking more about this. But if you folks have counter arguments or examples, I'd love to see them.

Well I was thinking you'd have `def toggle_timing(cur, query)` which is at least explicit about what's being ignored. Since each callback is expected to parse its own command string, there's no need to 'future-proof' additional kwargs. 

`\copy` would require the entire unparsed command string. (And also I guess a way of injecting custom suggestions, just to throw another spanner in the works.)

Summary: All special commands should take `cur, query`. `pgspecial` should provide `parse_special_command()` helper function that will return `(command, pattern, verbose)`.

So `describe_one_table(), toggle_timing(), change_db()` all of them will take `cur, query` as params and call `parse_special_commands()` inside the function body to extract the pattern if needed or ignore it completely. 

Reasons: This is a superset of the `cur, pattern, verbose` args since some special commands need the entire query to operate and not just the pattern after the query.

BTW, `\copy` only needs `pattern` not the entire query. Maybe I should clarify how pattern works. 

Let's take these examples:

| command | pattern | verbose |
| --- | --- | --- |
| \dt table_name | table_name | False |
| \d+ | None | True |
| \copy (SELECT \* FROM tmp JOIN tbl USING (id)) TO '/var/lib/postgres/test1.csv' | (SELECT \* FROM tmp JOIN tbl USING (id)) TO '/var/lib/postgres/test1.csv' | False |
| \x | None | False |
| \e filename | filename | False |
| SELECT \* FROM blah \e | \* FROM blah \e | False |

`pattern` is everything that is after the first token.

The only good example I have so far is the editor command `\e` which needs the entire query without chopping off the first token.

I'm still on the fence, but I'm leaning towards `cur, query`, since it's a superset of `cur, pattern, verbose`. 

You're right, I was conflating `query` and `pattern`. Another thing in favor of `cur, query` is that `\copy` and `\e` could have plus signs used as the addition symbol in their queries. Right now, `parse_special_command` has `command = command.strip().replace('+', '')` which would obviously be incorrect in that case.

It's a good thing you both kept pushing the refactor to go even further. Because it forced me to rethink the strategy a little bit and take a slightly different approach. 

See: https://github.com/dbcli/pgcli/compare/amjith/specials-refactor...amjith/specials-decorator?expand=1

This implements a new way of defining special commands using decorators as well as `register_special_command()` hook. 

No more listing of all special commands in a dictionary. Instead functions that are decorated using a `@special_command` is added to the commands dict automatically. Kinda like Flask, where you define the routes of your webapp using decorators. 

Also, no more separate COMMANDS and HIDDEN_COMMANDS, instead the values in the dictionary are a namedtuple called SpecialCommand() which defines everything you need to know about a command. 

I think this is a much better approach. But I'd love to hear your thoughts. If you're satisfied with that approach, I'll close this PR and open a new PR from that branch. 

There are a few minor fixes to do before opening a PR, such as `\e` is not listed in the `\?` anymore. But that is a minor fix. 

:+1: from me

Looks great @amjith. Much cleaner and does not look complex, while in fact being complex.

Replaced by a new pr #255 
",2015-06-05 05:04:27,2015-06-14 16:41:44
945,252,"Upgrade to the newest version of prompt_toolkit. This should also fix the issue with slow pasting.

Feel free to make changes to the pull request before merging.
I'm not sure how you are feeling about the circular reference between pgcli_bindings and the main class. It can be a weakref, but it doesn't have to.
","Upgrade to prompt_toolkit==0.38
[![Code Health](https://landscape.io/badge/178232/landscape.svg?style=flat)](https://landscape.io/diff/166255)
Repository health increased by 0.13% when pulling **[bf5aa1c](https://github.com/jonathanslenders/pgcli/commit/bf5aa1c379c3d2690eb6c1e2dac1cfe64a428024) on jonathanslenders:prompt_toolkit_0.38** into **[71c9810](https://github.com/dbcli/pgcli/commit/71c98101b2c343c91fb39729cdda48bdc2a22f5b) on dbcli:master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/166255/fixed) (including 0 errors and 1 code smell).

I've tested this locally and it works as expected. Can the @dbcli/pgcli-core team please take it for a spin?

@darikg Can you verify that things work as expected in Windows? 
- Paste is now fast. 
- Haven't tried the fuzzy completion branch, but I'll try it soon to make sure that it doesn't crash when the entered word is longer than the suggestion. 

You missed one @jonathanslenders:

https://github.com/jonathanslenders/pgcli/blob/prompt_toolkit_0.38/pgcli/main.py#L187

Good catch @j-bennet . I missed that one.

Pull request updated.

@jonathanslenders: I do have doubts, like you said, about passing in the whole pgcli into pgcli_bindings call, as opposed to passing in only what's necessary. What was the reasoning for doing it this way?

[![Code Health](https://landscape.io/badge/179007/landscape.svg?style=flat)](https://landscape.io/diff/167078)
Repository health increased by 0.13% when pulling **[c3e2857](https://github.com/jonathanslenders/pgcli/commit/c3e2857228d0bb295c36a583123e9ece42cd32d6) on jonathanslenders:prompt_toolkit_0.38** into **[71c9810](https://github.com/dbcli/pgcli/commit/71c98101b2c343c91fb39729cdda48bdc2a22f5b) on dbcli:master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/167078/fixed) (including 0 errors and 1 code smell).

@j-bennet: The reasoning is that `KeyBindingManager` became stateless. It doesn't know anymore whether `vi_mode` is on or off by itself. It takes a `vi_mode` filter instance as input. In our case, that's this condition: `Condition(lambda cli: pgcli.vi_mode)`. It's something that evaluates to a boolean when it's called, and in our case it evaluates by taking the value of `pgcli.vi_mode`.

So what happened is that now the actual state of `vi_mode` is only present in the `pgcli` class. (I think this is what we call some simplified kind of reactive programming.)  Previously, we also had the `vi_mode` variable inside `pgcli`, but that variable only contained the initial state for the manager. Every following change only updated the `vi_mode` variable in the manager, not in `pgcli`. So, there we had some inconsistency.

We have two options. Either we keep this state somewhere in a settings object, and we pass that around to the code that needs to change it. Or we keep it in `pgcli`, but pass a function to retrieve and set it. e.g.:

``` python
def set_vi_mode(value):
    self.vi_mode = value

... = pgcli_bindings(get_vi_mode=lambda: self.vi_mode,
                               set_vi_mode=set_vi_mode)

```

What do you think?

@jonathanslenders I was going to suggest passing in a function. I like the lambda approach in your code snippet.

@j-bennet Pull request updated.

[![Code Health](https://landscape.io/badge/179079/landscape.svg?style=flat)](https://landscape.io/diff/167152)
Repository health increased by 0.14% when pulling **[46a96fd](https://github.com/jonathanslenders/pgcli/commit/46a96fd6286bc6777fe5676dd2cd1b0ad29fbb97) on jonathanslenders:prompt_toolkit_0.38** into **[71c9810](https://github.com/dbcli/pgcli/commit/71c98101b2c343c91fb39729cdda48bdc2a22f5b) on dbcli:master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/167152/fixed) (including 0 errors and 1 code smell).

Looks great now @jonathanslenders ! Thank you for being so responsive. I will test it some more tonight to make sure nothing else is missing / breaks.

Tested again and don't see any problems. Pasting a large query is a hundred times faster (this is the query I used: https://gist.github.com/j-bennet/fac59560b017d7d77b76). I think it's good to merge when @darikg has a chance to verify things work on Windows.

Just tested the fuzzy completion branch. It works beautifully. :)

For the curious souls, you can check out the branch https://github.com/dbcli/pgcli/tree/amjith/fuzzy_match

You will have to run `pip install -e .` after you pull to install new dependencies.

I'd like to have a bigger discussion about this feature before making it a default. So treat it as purely experimental.

/cc @dbcli/pgcli-core 

Everything's cool in Windows as of jonathanslenders/python-prompt-toolkit@c3efe84a084afd8d1020edc7f587118c5c8b7642 -- maybe wait for its next Pypi release?

prompt_toolkit==0.39 released and pull request updated.

[![Code Health](https://landscape.io/badge/181475/landscape.svg?style=flat)](https://landscape.io/diff/169706)
Repository health increased by 0.14% when pulling **[e5f4e65](https://github.com/jonathanslenders/pgcli/commit/e5f4e65658e7f4161df7d17a02224d97f6bc35aa) on jonathanslenders:prompt_toolkit_0.38** into **[71c9810](https://github.com/dbcli/pgcli/commit/71c98101b2c343c91fb39729cdda48bdc2a22f5b) on dbcli:master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/169706/fixed) (including 0 errors and 1 code smell).

Thank you all for taking the time to contribute, review and test this PR thoroughly. I appreciate it very much. 

:candy: :camel: :tractor: 
",2015-05-31 14:01:06,2015-06-04 15:23:37
946,251,"Refactor the special commands in pgspecial and iospecial into a separate package. 

This should enable us to extract this into a separate package and clean up the intertwined code in the main pgcli code base.
",Refactor Special Commands,2015-05-31 08:04:28,2015-06-17 05:09:49
947,250,"A simple change to make the timing output more human friendly. 

Before:

```
│       21 │ misago_users         │ 0003_bans_version_tracker │ 2014-11-24 14:26:46.043154-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│       22 │ misago_users         │ 0004_default_ranks        │ 2014-11-24 14:26:46.210618-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│       23 │ sessions             │ 0001_initial              │ 2014-11-24 14:26:46.218419-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│   200045 │ abc                  │ def                       │ 2015-02-12 23:29:52.473905-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│  2000450 │ abc                  │ def                       │ 2015-02-12 23:30:43.744032-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│ 20004501 │ abc                  │ def                       │ 2015-02-12 23:30:53.775230-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│  2076410 │ abc                  │ def                       │ 2015-02-12 23:32:18.638360-08:00 │
╘══════════╧══════════════════════╧═══════════════════════════╧══════════════════════════════════╛
SELECT 27
Command Time: 1.90734863281e-06
Format Time: 0.00528001785278
```

After:

```
│       21 │ misago_users         │ 0003_bans_version_tracker │ 2014-11-24 14:26:46.043154-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│       22 │ misago_users         │ 0004_default_ranks        │ 2014-11-24 14:26:46.210618-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│       23 │ sessions             │ 0001_initial              │ 2014-11-24 14:26:46.218419-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│   200045 │ abc                  │ def                       │ 2015-02-12 23:29:52.473905-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│  2000450 │ abc                  │ def                       │ 2015-02-12 23:30:43.744032-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│ 20004501 │ abc                  │ def                       │ 2015-02-12 23:30:53.775230-08:00 │
├──────────┼──────────────────────┼───────────────────────────┼──────────────────────────────────┤
│  2076410 │ abc                  │ def                       │ 2015-02-12 23:32:18.638360-08:00 │
╘══════════╧══════════════════════╧═══════════════════════════╧══════════════════════════════════╛
SELECT 27
Command Time: 0.000s
Format Time: 0.005s
misago>
```

Reviewer: @darikg 
","Make timing info human friendly.
Closes #249 

[![Code Health](https://landscape.io/badge/178113/landscape.svg?style=flat)](https://landscape.io/diff/166098)
Code quality remained the same when pulling **[6c82eb8](https://github.com/dbcli/pgcli/commit/6c82eb87edc682ff4b709285bbaa515ff3b1fb12) on dbcli:amjith/humanize-times** into **[71c9810](https://github.com/dbcli/pgcli/commit/71c98101b2c343c91fb39729cdda48bdc2a22f5b) on dbcli:master**.

Maybe what would be really human friendly would be dynamically adjusting the units to the relevant range, so you'd see something like 

```
Command Time: 1.91 μs
Format Time: 5.28 ms
```

Or would that be overkill?

That was my original intent, but I decided against it, because it can be misleading when the units are not kept consistent. 

For example, Let's say a command was taking 1.01seconds to run, the next time you run, it takes 990ms. The display of that would look like this. 

Command Time: 1.01s
Command Time: 990ms

It adds a mental pause for the user and he's forced to look at the units every time. But if we keep it consistent, then the user gets used to the fact that it's always seconds and he only has to read the number. 

I'm probably thinking way too much into this, but I'd be happy to make it a dynamic unit if you feel it'll be useful. :)

Yes, keep them the same @amjith @darikg ! It's a double-take every time otherwise.

Fair enough!
",2015-05-31 07:12:13,2015-06-05 18:30:36
948,249,"Make the Command Time and Format Time display in human friendly units (like seconds).
","Human Friendly timing information
Fixed by #250.
",2015-05-31 07:02:16,2015-06-05 21:20:41
949,248,"Reduce the complexity of config files. 

Reviewer: @j-bennet 
","Simplify config file handling.
[![Code Health](https://landscape.io/badge/177979/landscape.svg?style=flat)](https://landscape.io/diff/165954)
Repository health decreased by 0.11% when pulling **[b8584a3](https://github.com/dbcli/pgcli/commit/b8584a3278efbf1e9c361556de4029cf96f4359b) on amjith/config_refactor** into **[f20c498](https://github.com/dbcli/pgcli/commit/f20c498b1bf63cbdc16720cee9b787fd911705a8) on master**.
- [1 new problem was found](https://landscape.io/diff/165954) (including 0 errors and 1 code smell).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/177982/landscape.svg?style=flat)](https://landscape.io/diff/165958)
Code quality remained the same when pulling **[9327a4d](https://github.com/dbcli/pgcli/commit/9327a4db389df52314b7382b64a74e8eff3f3da7) on dbcli:amjith/config_refactor** into **[f20c498](https://github.com/dbcli/pgcli/commit/f20c498b1bf63cbdc16720cee9b787fd911705a8) on dbcli:master**.

@amjith It doesn't need an expanduser call anymore?

Good catch. It does need the expanduser call. I'll update the PR. 

Updated.

[![Code Health](https://landscape.io/badge/178013/landscape.svg?style=flat)](https://landscape.io/diff/165995)
Code quality remained the same when pulling **[8a5429e](https://github.com/dbcli/pgcli/commit/8a5429e1fbbab5084825c65d8c76b6d2bef27868) on dbcli:amjith/config_refactor** into **[f20c498](https://github.com/dbcli/pgcli/commit/f20c498b1bf63cbdc16720cee9b787fd911705a8) on dbcli:master**.

So, default config can be None. In that case, things won't break, but you'll be creating and merging an unnecessary empty ConfigObj. I think adding an ""if"" is better, even though it makes the code less pretty.

I tested the None case and made a conscious decision to create an empty ConfigObj. Objects are cheap and I value code clarity. :)

Fair enough.
",2015-05-30 19:55:48,2015-05-30 22:21:33
950,247,"I would like to run some commands on start up, like \x.

Is this possible?
","Run commands on startup
Right now there is no way to have a startup command. 

Is `\x` the only thing you have in mind or do you have other ideas for this request? 

The reason I ask is because I can made the expanded output to be a config option in `~/.pgclirc` and you'll be able to achieve this feature. If you have more things in mind, I'll have to think of a different solution.

I would also like to be able to change the value for nulls:

`\pset null '(null)'``.

In my current psqlrc I also echo out a cheatsheet of \ commands, but I can live without those...

https://github.com/leebrooks0/dotfiles/blob/master/psqlrc

The `null` thing is not going to work. `\pset` is not supported by pgcli. Right now all null values are displayed as `<null>` by default.

The idea is that `pgcli` should ship with sane defaults that requires no configuration. But there does exist a config file which tweaks certain settings such as colorscheme and keybindings. 

I can sympathize with the cheat sheet commands. I'll see what I can do. 

<null> is perfect, anything other than blank is good.

Also I didn't know about `\x auto` that seems like an awesome feature of psql that I might steal. :)

One other thing worth mentioning, can you also add to the config file the
ability to use multiline by default?

Aha! This is already part of the config file. Open up `~/.pgclirc` and you'll see an option to enable or disable multi-line mode. 

Is it possible to use the .pgclirc config file to set my default search path, like I can in .psqlrc?  What would be the syntax?

I would join to the question how to set up defaul search_path. Is it possible now?
I too would like the ability to execute arbitrary commands on startup.  My use case is a little different; I want to be able to `CREATE TEMP VIEW` on startup for some tables that I frequently join together.  I don't think ""named queries"" are what I'm looking for because AFAICT you can't use named queries as part of another query, e.g. I wouldn't be able to join a named query against some other table.  (Correct me if I'm wrong.)

`psql` just interprets everything in `.psqlrc` literally; I'm not super familiar with the details of the config file format, but would it be possible to add a section like ""literal startup commands"" that just sends every line straight to `_evaluate_command`?

",2015-05-28 17:55:10,
951,246,"error like ""coercing to Unicode: need string or buffer, int found""
","Fix error for (\d <table_name> command) if table has rules
[![Code Health](https://landscape.io/badge/176460/landscape.svg?style=flat)](https://landscape.io/diff/164405)
Code quality remained the same when pulling **[2c48480](https://github.com/sancopanco/pgcli/commit/2c484808135194cb1bfff3dde7851f2c6b78d389) on sancopanco:master** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.

Thank you for the fix. Changes look good. 

:mushroom: 
",2015-05-28 14:35:08,2015-05-28 15:59:56
952,245,,"replace configparser with configobj
[![Code Health](https://landscape.io/badge/176247/landscape.svg?style=flat)](https://landscape.io/diff/164194)
Repository health decreased by 0.89% when pulling **[81e98a8](https://github.com/brettatoms/pgcli/commit/81e98a80e439d9d7e5481f4127b8b2811525c0aa) on brettatoms:configobj** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.
- [4 new problems were found](https://landscape.io/diff/164194) (including 4 errors and 0 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/176275/landscape.svg?style=flat)](https://landscape.io/diff/164231)
Code quality remained the same when pulling **[6d0657b](https://github.com/brettatoms/pgcli/commit/6d0657b300b0ec7bee07f2f764588e9e8d57e43d) on brettatoms:configobj** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.

[![Code Health](https://landscape.io/badge/176816/landscape.svg?style=flat)](https://landscape.io/diff/164787)
Code quality remained the same when pulling **[cb08641](https://github.com/brettatoms/pgcli/commit/cb08641c11de9f47357146088d43a685684d3705) on brettatoms:configobj** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.

The code looks good except for that reversal of the precedence order. ConfigObj looks much cleaner, so I'm happy with the decision. 

If you can fix the order of merging, I'll be happy to merge this in and thanks for telling me about ConfigObj. This is a great find. :)

Good catch on the precedence order.  Should be fixed now.

[![Code Health](https://landscape.io/badge/177084/landscape.svg?style=flat)](https://landscape.io/diff/165062)
Code quality remained the same when pulling **[d390a2a](https://github.com/brettatoms/pgcli/commit/d390a2af355d071652b2377161e5dad43a998a1b) on brettatoms:configobj** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.

Looks good. :+1: 

Thank you for the PR and the subsequent fixes. 

:bee: 
",2015-05-28 11:41:08,2015-05-29 13:51:36
953,244,"This is the beginning of a patch for saving named queries in pgcli.  Named queries allow you to save and re-execute a query with a short name.  E.g.

```
; Save a query
\ns simple_query select 1;

; Execute saved query
\n simple_query

; List all saved query names
\n

; List all saved query names and the queries
\n+

; Delete saved query
\nd simple_query
```

There's a couple shortcoming that should probably be addressed before merging this PR:
1. Queries are saved in `~/.pgcli`.  This destroys any formatting and comments in the
   config file.   It could be fixed by either saving the queries in a separate file or replacing `ConfigParser` with `ConfigObj` which should preserve the formatting and comments.
2. Autocomplete saved queries after entering `\n` and as you type. 
3. Tests
","Saving named queries
[![Code Health](https://landscape.io/badge/175551/landscape.svg?style=flat)](https://landscape.io/diff/163460)
Repository health decreased by 0.95% when pulling **[9a57e40](https://github.com/brettatoms/pgcli/commit/9a57e40581037c2189a961dd279898dd37a67e48) on brettatoms:namedqueries** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.
- [7 new problems were found](https://landscape.io/diff/163460) (including 0 errors and 7 code smells).
- No problems were fixed.

This is a cool feature. I like it. :)

I noticed that tests are failing. I'll leave some inline comments on how to fix them.

I've left some comments inline from a cursory code review. I haven't had a chance to pull this down and try it out. I'll do that later today when I get home. 

I appreciate you taking the time to send in the patch. 

/cc @dbcli/pgcli-core 

[![Code Health](https://landscape.io/badge/175945/landscape.svg?style=flat)](https://landscape.io/diff/163881)
Repository health decreased by 0.95% when pulling **[7bfffcd](https://github.com/brettatoms/pgcli/commit/7bfffcd2879e7bc37ead1b0adb70e9e9371a2486) on brettatoms:namedqueries** into **[40d9ca4](https://github.com/dbcli/pgcli/commit/40d9ca422224f6b9ae2551557a4d59ceb8774607) on dbcli:master**.
- [7 new problems were found](https://landscape.io/diff/163881) (including 0 errors and 7 code smells).
- No problems were fixed.

Fixed the py2 compatibility and the hardcoded config filename.  

What do you think about using `~/.pgclirc` for saving the named queries?  When you save a named query it destroys the comments and formatting.  If you want to keep the formatting and comments we should either use ConfigObj or save them to a separate file like `~/.pgclirc-namedqueries` or something less ugly. 

I didn't know about ConfigObj. I didn't know that a library exists for doing this. I love it. 

Using ConfigObj will pave way for a couple of other ideas I had which require reading and writing config files with the comments intact.

If you'd like to modify `pgcli` to use ConfigObj, I'd be totally open to merging it in. If that's too much to handle right now, you're welcome to use a different config file like `~/.pgcli-namededqueries`. 

It is completely up to you. :)

[![Code Health](https://landscape.io/badge/177287/landscape.svg?style=flat)](https://landscape.io/diff/165261)
Repository health decreased by 1% when pulling **[83dae72](https://github.com/brettatoms/pgcli/commit/83dae72dced0d5f37989e311ebf4fba1c639ddc6) on brettatoms:namedqueries** into **[e3d34fb](https://github.com/dbcli/pgcli/commit/e3d34fb35e716546eba77c222dc242ad6cfae268) on dbcli:master**.
- [8 new problems were found](https://landscape.io/diff/165261) (including 0 errors and 8 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/177392/landscape.svg?style=flat)](https://landscape.io/diff/165364)
Repository health decreased by 0.88% when pulling **[2954c7d](https://github.com/brettatoms/pgcli/commit/2954c7d0c2605003fd147ec1bc82471a63fdf504) on brettatoms:namedqueries** into **[e3d34fb](https://github.com/dbcli/pgcli/commit/e3d34fb35e716546eba77c222dc242ad6cfae268) on dbcli:master**.
- [6 new problems were found](https://landscape.io/diff/165364) (including 0 errors and 6 code smells).
- No problems were fixed.

@brettatoms I have a few suggestions to polish this feature. If you'd rather get this merged and polish this later. I can save my comments for later and come back to it. If you're not yet tired of the back and forth, I can provide you more feedback. 

Do you have a preference? 

This look good. I'm going to merge it in and write some tests. 

Thank you for extending pgcli. I like this feature :). 

:tanabata_tree: 

@amjith I'm all for adding polish and improving the feature.  I think this could be used for some really cool stuff like using bind parameters or python string formatting to make queries or dynamic or even using config file interpolation to allow you to embed named queries in other named queries. 

It's great that you have bigger visions of this feature. I'd highly encourage you to keep plugging away. 

The polish I had in mind was to see if you can get autocompletion working for `\n`. 

Right now `\n` doesn't print anything if there are no saved queries. It'll be good to print something reasonable when there are no saved queries. 

Finally add some tests so we don't accidentally break them in the future. 
",2015-05-27 16:05:40,2015-05-30 19:02:23
954,243,"```
> SELECT * from goods_tags;
+------+--------+---------------------+---------------------+-----------+
|   id | name   | created_at          | updated_at          |   user_id |
|------+--------+---------------------+---------------------+-----------|
|    1 | bike   | 2015-05-26 10:53:43 | 2015-05-26 10:53:43 |         4 |
|    2 | 自行车    | 2015-05-26 11:56:32 | 2015-05-26 11:56:32 |         4 |
+------+--------+---------------------+---------------------+-----------+
SELECT 2
Command Time: 5.00679016113e-06
Format Time: 0.000900030136108

```
","CJK display problem
Thank you reporting the problem. It is now fixed in master. I'll be releasing the new version today. In the mean time if you'd like to try the new version you can try installing directly from master, as follows: 

```
pip install -U -e git+https://github.com/dbcli/pgcli.git#egg=pgcli
```

@amjith Thanks, LGTM

Available in the latest version 0.17.0. Please upgrade using: 

```
pip install -U pgcli
```
",2015-05-26 11:54:33,2015-05-26 17:08:04
955,242,"I'm prepping for a new release of pgcli. 

I've updated the changelog. Can the @dbcli/pgcli-core team please review the changes?

Leave a :+1: if you're satisfied. Ideally I'd like to do the release by end of tomorrow. But I can also wait longer if you'd like more time. Just let me know. 

BTW, we just merged the 100th PR to pgcli. Kudos to everyone who helped us make this project a success. :tada:  :balloon: 
","Update changelog for 0.17.0 release.
[![Code Health](https://landscape.io/badge/173596/landscape.svg?style=flat)](https://landscape.io/diff/161289)
Code quality remained the same when pulling **[da31947](https://github.com/dbcli/pgcli/commit/da31947d3b5a814d07fae77441f76874789ced4c) on dbcli:amjith/release-0.17.0** into **[7156d2d](https://github.com/dbcli/pgcli/commit/7156d2d5df5922ed729957f98a8ca26adfa83f44) on dbcli:master**.

:+1:
",2015-05-25 06:42:41,2015-05-26 13:54:30
956,241,"It seems there was a leftover from prompt-toolkit migration.
","Fix editor mode
[![Code Health](https://landscape.io/badge/173434/landscape.svg?style=flat)](https://landscape.io/diff/161144)
Repository health decreased by 0.14% when pulling **[8614968](https://github.com/fpietka/pgcli/commit/8614968ccacd45e2cb160b2988d1139006ae9f8f) on fpietka:fix-editmode** into **[637f41d](https://github.com/dbcli/pgcli/commit/637f41d8ed42e3acd908bd6d8cb7297b58f45ccf) on dbcli:master**.
- [1 new problem was found](https://landscape.io/diff/161144) (including 0 errors and 1 code smell).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/173439/landscape.svg?style=flat)](https://landscape.io/diff/161150)
Code quality remained the same when pulling **[bd8ca4f](https://github.com/fpietka/pgcli/commit/bd8ca4f4088d26997252758d9570ff80b43a51b7) on fpietka:fix-editmode** into **[637f41d](https://github.com/dbcli/pgcli/commit/637f41d8ed42e3acd908bd6d8cb7297b58f45ccf) on dbcli:master**.

Good catch. Editor mode does indeed seem broken. 

But this PR doesn't quite fix it. For example, after I enter a query in the editor and close the editor, the behavior should be the prompt will be filled in with the query in the editor, but not actually send it to the server. 

This is to give the user another chance to edit the query before pressing enter.

Sorry, didn't quite catch that. It is now fixed.

Good luck on mysql version! I'm now ""forced"" to use mysql, so I'll be closely watching it :grin: 

[![Code Health](https://landscape.io/badge/173491/landscape.svg?style=flat)](https://landscape.io/diff/161195)
Code quality remained the same when pulling **[83da9fb](https://github.com/fpietka/pgcli/commit/83da9fb9e6a1907752fa1d913d25f2936206f8f0) on fpietka:fix-editmode** into **[637f41d](https://github.com/dbcli/pgcli/commit/637f41d8ed42e3acd908bd6d8cb7297b58f45ccf) on dbcli:master**.

Thank you for the quick turn around. I appreciate the initiative. 

I've sent you an invite to the mycli repo. Hopefully I would have fixed the editor command there before you get a chance to try it out. ;)

:beers: 
",2015-05-24 18:59:25,2015-05-25 00:00:43
957,240,"1. The following contexts now suggest datatypes:
   - `SELECT foo::<TAB>`
   - `CREATE TABLE foo (bar <TAB>`
   - `CREATE FUNCTION foo (bar <TAB>`
   - `ALTER TABLE foo ALTER COLUMN bar TYPE <TAB>`
2. The special command `\dT` is now supported, and suggests types (but not tables)

Datatypes are suggested both from a hardcoded whitelist of builtin postgresql types, as well as user-defined custom types. Furthermore, since postgresql treats a table row as a form of composite type, table names are suggested in addition to data types.

The whitelist I just typed from memory of datatypes I use frequently, and would appreciate feedback on what belongs there. (Or we can just use all of them.) You should be able to use `\dT pg_catalog.*` to list all of the built-in types.
","Suggest datatypes
[![Code Health](https://landscape.io/badge/172945/landscape.svg?style=flat)](https://landscape.io/diff/160662)
Repository health increased by 0.55% when pulling **[4e46c01](https://github.com/dbcli/pgcli/commit/4e46c01d3cce7958467a98a352012ba53e891e25) on darikg/suggest_types** into **[7440386](https://github.com/dbcli/pgcli/commit/7440386f83fc2f51ec9e7abb4c5379f6a1fe31ed) on master**.
- [1 new problem was found](https://landscape.io/diff/160662) (including 0 errors and 0 code smells).
- No problems were fixed.

Thank you for adding this feature. It works great. :)

Regarding the list of builtin datatypes, there are only 82 types, let's add them all the list. I'll merge this PR now and you're welcome to add the rest in a future PR. 

:jack_o_lantern: 
",2015-05-23 12:44:12,2015-05-24 08:45:20
958,239,,"`drop schema` and `create schema` should suggest schemas
[![Code Health](https://landscape.io/badge/172651/landscape.svg?style=flat)](https://landscape.io/diff/160354)
Repository health decreased by 0.03% when pulling **[70732f0](https://github.com/dbcli/pgcli/commit/70732f0025dffc0ae156cd9a7b56b872c3534b6d) on darikg/suggest_schemas_tweak** into **[d0eef1b](https://github.com/dbcli/pgcli/commit/d0eef1bb1447737b7341da268e3dc6361d17a9c3) on master**.
- [1 new problem was found](https://landscape.io/diff/160354) (including 0 errors and 0 code smells).
- No problems were fixed.

:+1: 

Nice and simple. 
",2015-05-22 21:55:29,2015-05-22 22:36:09
959,238,"Hi,

I want to paste a query like 

``` sql
explain SELECT ""sentry_message"".""id"", ""sentry_message"".""group_id"", ""sentry_message"".""message_id"", ""sentry_message"".""project_id"", ""sentry_message"".""logger"", ""sentry_message"".""level"", ""sentry_message"".""message"", ""sentry_message"".""view"", ""sentry_message"".""checksum"", ""sentry_message"".""num_comments"", ""sentry_message"".""platform"", ""sentry_message"".""datetime"", ""sentry_message"".""time_spent"", ""sentry_message"".""server_name"", ""sentry_message"".""site"", ""sentry_message"".""data"" FROM ""sentry_message"" WHERE (""sentry_message"".""group_id"" = 6530  AND NOT (""sentry_message"".""id"" = 5710758 ) AND ""sentry_message"".""datetime"" <= '2015-05-18 16:23:24+00:00' ) ORDER BY ""sentry_message"".""datetime"" DESC LIMIT 1;
```

But just pasting it and seeing it appear at the prompt can take 15 seconds, while using the history is instantaneous.
Does it try to run completion on every character ?
","Pasting queries can be slow
You're right it does take a while. 

I believe it's a limitation of `prompt_toolkit` and the datastructure used to consume the line. 

@jonathanslenders Is the slowness due to auto-completion triggering for each character press? Is it possible to disable auto-completion triggers in a special paste mode? Or detect the paste mode automatically by detecting how fast the characters are coming in? 

Hi @NotSqrt and @amjith 

Yes, this is currently a limitation of prompt-toolkit, but I'm working on improving that. (It has nothing to do with autocompletion.)

The reason that this is slow, comes from that every single key press goes through two huge state machines. The first one is a vt100 parser which is rather fast. The second is the key binding processor. (Which has a rather large set of sequences of key bindings, all with enable/disable conditions attached to them.)

It became really noticeable during the development of pyvim. So, I hope to be able to do some bench marking and optimizing before the next release of prompt-toolkit.

Jonathan

So this is fixed in the following commits:

https://github.com/jonathanslenders/python-prompt-toolkit/commit/5a1aa22b7d88bfd4bbed6cb3dba833c3f7ead17f
and https://github.com/jonathanslenders/python-prompt-toolkit/commit/1d17122ecb858509c8d5f50505eeb53b417e5195

The first commit improves the speed of the state machine for the key bindings significantly. (We can have key bindings for any key, so also ASCII keys are also going through that state machine.) This patch made a huge difference.

The second commit also doubles the speed, by delaying executors until the main thread is idle. This was indeed the autocompletion taking resources. Not on every key press, but there was always one autocompletion thread running during the whole paste. We didn't need that.

Cheers,
Jonathan

I'll upgrade prompt_toolkit dependency as soon as it is released to pypi. 

Thanks a lot for the quick turn around Jonathan. :)

@NotSqrt The fix is now merged into master. You can install from master and try it out. 

```
pip install -U -e git+https://github.com/dbcli/pgcli.git#egg=pgcli
```

Perfect ! Tested and good to go !

Awesome! Thank you for testing it.

I'll release a new rev to PyPI once we merge in a few pending PRs. Hopefully it'll go out this weekend. 
",2015-05-19 08:52:56,2015-06-10 15:47:20
960,237,"Doesn't look so great when using a light theme in terminal right now.

I'm using Tango in GNOME terminal.
![pgcli-light](https://cloud.githubusercontent.com/assets/637013/7657998/58e21f2e-faeb-11e4-8e18-0906fc254b5e.png)
","Pgcli needs a light theme.
You probably saw the email on the pgcli mailing list, but there are plenty of themes to choose from. You just have to pick the right one from the config file.

Try deleting your config file ~/.pgclirc and restart pgcli. It'll create the latest config file and it has a ton of options to choose from. 

Heh. I'm so behind. This works.
",2015-05-15 17:15:55,2015-05-15 17:41:34
961,236,"Typically functions in postgres are multi-line. Here's an example:

```
CREATE FUNCTION delete_address() RETURNS TRIGGER AS $_$
BEGIN
    DELETE FROM address WHERE address.id_user = OLD.id;
    RETURN OLD;
END $_$ LANGUAGE 'plpgsql';
```

But it is impossible to enter this in pgcli, because in multi-line mode we treat a semi-colon at the end of a line to be the end of a query. So at the end of `RETURN OLD;` it will end the query and send it to the server which causes a syntax error. :(

I'm open to suggestions for solving this issue. 

My current thoughts are manipulate the [is_multiline()](https://github.com/dbcli/pgcli/blob/master/pgcli/pgbuffer.py#L9) to do clever things. 

Look into what [ptpython](https://github.com/jonathanslenders/ptpython/tree/master/ptpython) does for multi-line mode and see if we can adopt it's behavior. 
","pgcli can't handle creating functions
We could use ""$ _ $"" as a trigger to switch on a ""special"" multiline mode that would not treat "";"" as end-of-query until a second ""$ _ $"" is encountered.

I did some more reading. Looks like this is how postgresql handles this case: 

http://www.postgresql.org/docs/9.1/static/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING

It seems reasonable. 

We can't rely on just '$_$' but we'll have to treat '$.*$' as the markers that start and end the special mode. 

We might need a state machine for this since nesting of dollar tags is possible. 

Thank you. Wonderful that right when I need the functionality, you have just released it!
Also thank you so much for horizontal scrolling of tables with lot of columns!
Best wishes to you and the startup!

I'm glad you found the feature useful. 

I'm amused you think this is a startup. This is just a open source project with volunteer contributors. :)

That's a thought to think on, @amjith. :)

> I'm amused you think this is a startup. This is just a open source project with volunteer contributors. :)

[KickStarter's $4800 for mysql-cli](https://www.kickstarter.com/projects/1839007321/mysql-cli) tells me another things. This days all smart geeks make their own start-ups with public open source technology, volunteer contributors and public donations. You really could raise much more on writing specific functionality for people who needs that. Think about system administrators and DBAs of large companies. They will give you a lot of money for even simple things which make their lifes much happier. Think about including your pgcli into official Postgres distribution and into Red Hat's distributions too!

Fair enough. Kickstarter was an experiment to see if there was enough demand for a mysql version. Turns out there was. Creating tools is not the issue it's reaching out to the DBAs and finding out what they need which is the tricky bit. 

Even that kickstarter campaign took me an entire month of just promoting it and getting the word out. It didn't reach it's goal until 3 days before the deadline. It was nerve wracking to say the least. 

That said, I haven't discounted the idea of building a product around this in the future. So thanks for the encouragement. :)

Thank you for sharing your experience with us! To write code is much better than do public relations. But without the latter our code will be alone. Thank you for the spent month.
",2015-05-15 16:55:03,2015-08-20 04:54:11
962,235,"Small fix to show the actual triggerdef, instead of the position of the triggerdef after ""CREATE TRIGGER "".
","Fix for listing triggers on \d special.
Btw, my editor throws a lot of pylint warnings (e.g. for the semicolons). However, I did not want to go ahead and cause a lot of formatting changes. Maybe it would be nice to have a .editorconfig? I would be happy to add one. Otherwise, I love pgcli! Thanks a lot for all your effort!

@droustchev Thank you for the PR. 

Do you have a small example that exercises this new change? 

For example an output before and after this change would be nice. 

I love fixes to pylint errors and a .editorconfig would be a welcome addition. :)

[![Code Health](https://landscape.io/badge/166280/landscape.svg?style=flat)](https://landscape.io/diff/153601)
Code quality remained the same when pulling **[e6c44cb](https://github.com/droustchev/pgcli/commit/e6c44cb0f04c19ac0d860623c99da66838799a3f) on droustchev:master** into **[486308f](https://github.com/dbcli/pgcli/commit/486308f8b27782b0f16fbb24b976ff633426b9bc) on dbcli:master**.

I just tested it locally. That was a good catch. 

Thank you for the PR. I look forward to the pylint cleanup and a .editorconfig addition. :)

:radio: 

Sorry, I was in a meeting. Guess you don't need the example anymore? I will try to add a .editorconfig as soon as possible. What is your default indentation setting? I had some mismatch there with mine (4 spaces for python). Thanks for merging my PR so quickly, btw and again also gib thanks for this little gem you coded up! Really enjoy working with pgcli :)

I do use 4 spaces. The pgspecial.py file is an oddity. 

It was a literal translation of psql's C-code to python code. Some of the formatting might be odd because I was copying some code and moving things around. So a cleanup to that file would be fantastic. :)
",2015-05-15 13:57:30,2015-05-15 14:38:09
963,234,"@j-bennet 
","Remove unnecessary finally clause.
[![Code Health](https://landscape.io/badge/165866/landscape.svg?style=flat)](https://landscape.io/diff/153159)
Code quality remained the same when pulling **[63706bb](https://github.com/dbcli/pgcli/commit/63706bb5a021776086880b365ae449741e179db2) on dbcli:amjith/general_cleanup** into **[486308f](https://github.com/dbcli/pgcli/commit/486308f8b27782b0f16fbb24b976ff633426b9bc) on dbcli:master**.

@amjith Is it possible that an exception was thrown and we got out of the loop before the generator was exhausted?

@amjith Also... do you think it would be useful to add a context manager wrapper to handle cursor closing?

1. It is possible that an exception was thrown before the generator is exhausted. But if that happens then we can't continue to consume the generator anyway because whatever exception caused it to break out of the loop will prevent further consumption. 
2. There is already a context manager present in psycopg2 for the cursors, but we can't use it in this case because the cursor is created in pgexecute.py but it is returned to main.py where it is consumed. Since the cursor has to stay open across two different functions (one in pgexecute and one is main) we can't use the context manager. Otherwise the cursor will be closed by pgexecute and the closed cursor will be handed to main which can't do anything with it. 

Got it. Thanks for explaining.
",2015-05-15 05:12:17,2015-05-16 03:21:33
964,233,"Minor issues discovered while I was working on the mysql-cli which should be fixed in pgcli as well. 
- The test harness setup was done incorrectly. This should enable everyone who has postgres to run our tests without skipping. 
- Exceptions in a generator function aren't thrown right away, they're only thrown when we consume the generator. Hence a new addition of try/except to suppress the exception and prevent crashing pgcli if one of the result sets had a error. 
- Minor efficiency improvement by moving the `all_completion` update into the for loop instead of a separate list comprehension. 

/cc @drocco007 Can you review and merge? 

I'm going to start tagging individuals (picked randomly) to review PRs instead of tagging the entire core dev team. 
","Amjith/general cleanup
[![Code Health](https://landscape.io/badge/165846/landscape.svg?style=flat)](https://landscape.io/diff/153134)
Repository health increased by 0.14% when pulling **[801a0fe](https://github.com/dbcli/pgcli/commit/801a0fefcf5799eed8073b623b2e7fdb2f522c42) on amjith/general_cleanup** into **[0c9c51b](https://github.com/dbcli/pgcli/commit/0c9c51b4f770f072f33e07695615d2e52cd796c0) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/153134/fixed) (including 0 errors and 1 code smell).

@amjith no logging of the exception? only suppressing it?

Fair point. Added a new commit to log the exception. :)

[![Code Health](https://landscape.io/badge/165860/landscape.svg?style=flat)](https://landscape.io/diff/153149)
Repository health increased by 0.14% when pulling **[b99344e](https://github.com/dbcli/pgcli/commit/b99344e4c1cf577a4380d367a9633e204b6e975d) on amjith/general_cleanup** into **[0c9c51b](https://github.com/dbcli/pgcli/commit/0c9c51b4f770f072f33e07695615d2e52cd796c0) on master**.
- No new problems were introduced.
- [1 problem was fixed](https://landscape.io/diff/153149/fixed) (including 0 errors and 1 code smell).
",2015-05-15 03:04:56,2015-05-15 04:30:35
965,232,"system release：centos6.5
databases version：mysql5.5
python version：python2.6

[root@localhost ~]# pgcli --help
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.16.3', 'console_scripts', 'pgcli')()
  File ""build/bdist.linux-x86_64/egg/pkg_resources.py"", line 339, in load_entry_point
  File ""build/bdist.linux-x86_64/egg/pkg_resources.py"", line 2470, in load_entry_point
  File ""build/bdist.linux-x86_64/egg/pkg_resources.py"", line 2184, in load
  File ""/usr/lib/python2.6/site-packages/pgcli/main.py"", line 29, in <module>
    from .pgexecute import PGExecute
  File ""/usr/lib/python2.6/site-packages/pgcli/pgexecute.py"", line 2, in <module>
    import psycopg2
  File ""/usr/lib64/python2.6/site-packages/psycopg2/**init**.py"", line 50, in <module>
    from psycopg2._psycopg import BINARY, NUMBER, STRING, DATETIME, ROWID
ImportError: libpq.so.5: cannot open shared object file: No such file or directory
","pgcli --help
`pgcli` is designed to work only with Postgresql databases. It will NOT work with MySQL databases. I'm currently in the process of creating a new project that will work with MySQL. 

Why use pgcli error --help
This it doesn't matter with Mysql

The last line in that error message denotes that libpq is missing on that system. libpq is a postgres library. You can install libpq by typing `$ sudo yum install postgresql-devel python-devel`. 

Closing this issue since the reported contacted my personal email and said this is now resolved.
",2015-05-12 06:48:59,2015-05-15 14:49:27
966,231,"From the “not a problem now but could be later” department, this PR is preventative maintenance to fix some incorrect calls to `super()`. The spelling

``` python

super(self.__class__, self)…
```

is a subtle error that unfortunately tends to manifest itself long after the call is written. To see why it's a problem, consider this class hierarchy:

``` python

class A(object):
    def report(self):
        print 'A reporting'

class B(A):
    def report(self):
        print 'B reporting'
        super(self.__class__, self).report()

class C(B):
    def report(self):
        print 'C reporting'
        super(self.__class__, self).report()

C().report()
```

The expected output is

```
C reporting
B reporting
A reporting
```

but you actually get a stack overflow. The first `super()` call from `C` to `B` works as expected, but in `B.report()`, when called from `C`, `self.__class__` is `C`, so `super(self.__class__, self)` == `super(C, self)` == `B`! This is correct from a semantic point of view but almost certainly not what was intended; the result is that `B.report()` keeps calling itself recursively until stack space is exhausted.
","Fix incorrect super() calls
[![Code Health](https://landscape.io/badge/161335/landscape.svg?style=flat)](https://landscape.io/diff/148451)
Code quality remained the same when pulling **[01baee4](https://github.com/dbcli/pgcli/commit/01baee493322495f1ab88d22a1f06f9ba2936aac) on dbcli:drocco/fix-super** into **[51be1f3](https://github.com/dbcli/pgcli/commit/51be1f391af44531823da4c6e158a216f3de5457) on dbcli:master**.

Wow! I didn't think about that intricacy. I assumed that doing it this way will make it easy to change the name of the class in the future without having to change every instance of that name. 

I swear I saw that pattern in one of Raymond's talks. I'll have to go back and find it.

Thanks! :beetle: 

@drocco007 @amjith This blew my mind but apparently it's a well known issue! http://stackoverflow.com/questions/4235078/how-to-avoid-infinite-recursion-with-super. But looks like this is much easier in Python 3.
",2015-05-08 15:56:17,2015-05-09 14:52:19
967,230,"Fixes #228
","Ignore identifier lists and 'AS' when finding SQL keywords.
That `.format` thing gets me every time… :/

[![Code Health](https://landscape.io/badge/158213/landscape.svg?style=flat)](https://landscape.io/diff/145304)
Code quality remained the same when pulling **[ca74044](https://github.com/dbcli/pgcli/commit/ca74044dc6eee30a5ac9c50b4ce32f2f41581d04) on dbcli:drocco/dont-raise-keywords** into **[f0dcb38](https://github.com/dbcli/pgcli/commit/f0dcb3870881b1d6f76f67cc871fd6986c8684eb) on dbcli:master**.

Gah! Sorry for the crosstalk, github emails stopped showing up in my inbox… :confused: 

Yes, I'll take a look at #224 and let you know if it fixes the cases I noticed.

@drocco007 when you get a chance can you rebase this? Like you said, we should definitely keep the tests

Closing this PR as it is outdated. 
",2015-05-05 04:13:44,2016-03-03 05:39:12
968,229,"Related to #37. 

Reported by @SpotlightKid

> if you specify a port with the -p command-line option, but no host with the -h option, pgcli still tries to use a unix domain socket. Maybe it should assume an inet socket and localhost as the default hostname in that case, since specifying a port doesn't make sense with unix domain sockets.
","Use the inet address when port is specified at launch
> since specifying a port doesn't make sense with unix domain sockets.

Not true. `port` is appended to the socket file name so that different instances of postgres can use the same socket directory without conflict.

From the docs for [`unix_socket_directories`](http://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-UNIX-SOCKET-DIRECTORIES):

> In addition to the socket file itself, which is named `.s.PGSQL.nnnn` where `nnnn` is the server's port number, an ordinary file named `.s.PGSQL.nnnn.lock` will be created in each of the `unix_socket_directories` directories.

Here's what `psql` does on some Ubuntu with a `-p` command-line option but no host with the `-h` option:

``` sh
$ psql -p 5010
psql: could not connect to server: No such file or directory
        Is the server running locally and accepting
        connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5010""?
```

What @cbandy said. :)",2015-05-05 04:00:09,2017-12-15 00:03:28
969,228,"Many valid column names start with a prefix that is a complete keyword; this is especially true for the shorter keywords (e.g. AS, IN, IS, TO). However, if the entered text in the second or subsequent column of a SELECT clause is a complete keyword, pgcli raises an exception.

Example: enter text `SELECT 1, in`

```
postgres> SELECT 1, inException in thread Thread-12:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 763, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/drocco/.envs/brighttrac/lib/python2.7/site-packages/prompt_toolkit/__init__.py"", line 472, in run
    CompleteEvent(text_inserted=True)))
  File ""/home/drocco/source/foss/pgcli/pgcli/pgcompleter.py"", line 201, in get_completions
    suggestions = suggest_type(document.text, document.text_before_cursor)
  File ""/home/drocco/source/foss/pgcli/pgcli/packages/sqlcompletion.py"", line 86, in suggest_type
    full_text, identifier)  [F3] Multiline: OFF  [F4] Emacs-mode                                                                                                                                                                    
  File ""/home/drocco/source/foss/pgcli/pgcli/packages/sqlcompletion.py"", line 236, in suggest_based_on_last_token
    prev_keyword, text_before_cursor = find_prev_keyword(text_before_cursor)
  File ""/home/drocco/source/foss/pgcli/pgcli/packages/parseutils.py"", line 166, in find_prev_keyword
    idx = parsed.token_index(t)
  File ""/home/drocco/.envs/brighttrac/lib/python2.7/site-packages/sqlparse/sql.py"", line 343, in token_index
    return self.tokens.index(token)
ValueError: <Keyword 'in' at 0x7f35828f21b0> is not in list
```

Testing against f0dcb38, PG 9.3.5
","Column suggestion in 2nd and subsequent columns explodes if entered text is a keyword 
Hmm… just noticed that this change intersects/conflicts with @darikg's work in progress at ff9caf45

Does not crash anymore (in current 1.8.1).",2015-05-05 02:46:50,2017-12-15 00:00:21
970,227,"This should be enough for the upgrade to 0.34.

Please keep version 0.34 still hard-coded in the setup.py. (The prompt-toolkit API becomes mature, but small changes can still happen.)

One other change I made, was to use the color scheme 'default', instead of 'native'. Not sure whether it is related to the upgrade, but for some reason all of my text was gray instead of black or white. The Pygments default color scheme doesn't touch the color of normal text.

Jonathan

edit: don't simply click merge ;) Have a look and feel free to alter the commit before merging.
","Upgrade to prompt-toolkit 0.34
[![Code Health](https://landscape.io/badge/156500/landscape.svg?style=flat)](https://landscape.io/diff/143590)
Code quality remained the same when pulling **[58571b9](https://github.com/jonathanslenders/pgcli/commit/58571b94c5cb03e3fa3ce981904aaa02f2149bbb) on jonathanslenders:prompt-toolkit-0.34** into **[f0dcb38](https://github.com/dbcli/pgcli/commit/f0dcb3870881b1d6f76f67cc871fd6986c8684eb) on dbcli:master**.

And the changelog:

```
0.34: 2015-04-26
----------------

Bug fixes:
- Correct display of multi width characters in completion menu.

Backwards incompatible changes:
- Renamed Buffer.add_to_history to Buffer.append_to_history.

0.33: 2015-04-25
----------------

Bug fixes:
- Crash fixed in SystemCompleter when some directiories didn't exist.
- Made text/cursor_position in Document more atomic.
- Fixed Char.__ne__, improves performance.
- Better performance of the filter module.
- Refactoring of the filter module.
- Bugfix in BufferControl, caching was not done correctly.
- fixed 'zz' Vi key binding.

New features:
- Do tilde expansion for system commands.
- Added ignore_case option for CommandLineInterface.

Backwards incompatible changes:
- complete_while_typing parameter has been moved from CommandLineInterface to
  Buffer.


0.32: 2015-04-22
----------------

New features:
- Implemented repeat arg for '{' and '}' vi key binding.
- Added autocorrection example.
- first experimental telnet interface added.
- Added contrib.validators.SentenceValidator.
- Added Layout.walk generator to traverse the layout.
- Improved 'L' and 'H' Vi key bindings.
- Implemented Vi 'zz' key binding.
- ValidationToolbar got a show_position parameter.
- When only width or hight are given for a float, the control is centered in
  the parent.
- Added beforeKeyPress and afterKeyPress events.
- Added HighlightMatchingBracketProcessor.
- SearchToolbar got a vi_mode option to show '?' and '/' instead of 'I-search'.
- Implemented vi '*' binding.
- Added onBufferChanged event to CommandLineInterface.
- Many performance improvements: some caching and not rendering after every
  single key stroke.
- Added ConditionalProcessor.
- Floating menus are now shown above the cursor, when below is not enough
  space, but above is enough space.
- Improved vi 'G' key binding.
- WindowRenderInfo got a full_height_visible, top_visible, and a few other
  attributes.
- PathCompleter got an expanduser option to do tilde expansion.

Fixed:
- Always insert indentation when pressing enter.
- vertical_srcoll should be an int instead of a float.
- Some bug fixes in renderer.Output.
- Pressing backspace in an empty search in Vi mode now goes back to navigation
  mode.
- Bug fix in TokenListControl (Correctly calculate hight for multiline
  content.)
- Only apply HighlightMatchingBracketProcessor when editing buffer.
- Ensure that floating layouts never go out of bounds.
- Home/End now go to the start and end of the line.
- Fixed vi 'c' key binding.
- Redraw the whole output when the style changes.
- Don't trigger onTextInsert when working_index doesn't change.
- Searching now wraps around the start/end of buffer/history.
- Don't go to the start of the line when moving forward in history.

Changes:
- Don't show directory/file/link in the meta information of PathCompleter anymore.
- Complete refactoring of the event loops.
- Refactoring of the Renderer and CommandLineInterface class.
- CommandLineInterface now accepts an optional Output argument.
- CommandLineInterface now accepts a use_alternate_screen parameter.
- Moved highlighting code for search/selection from BufferControl to processors.
- Completers are now always run asynchronously.
- Complete refactoring of the search. (Most responsibility move out of Buffer
  class. CommandLineInterface now got a search_state attribute.)

Backwards incompatible changes:
- get_input does now have a history attribute instead of history_filename.
- EOFError and KeyboardInterrupt is raised for abort and exit instead of custom
  exceptions.
- CommandLineInterface does no longer have a property 'is_reading_input'.
- filters.AlwaysOn/AlwaysOff have been renamed to Always/Never.
- AcceptAction has been moved from CommandLineInterface to Buffer. Now every
  buffer can define its own accept action.
- CommandLineInterface now expects an Eventloop instance in __init__.


0.31: 2015-01-30
----------------

Fixed:
- Bug in float positioning
- Show completion menu only for the default_buffer in get_input.

New features:
- PathCompleter got a get_paths parameter.
- PathCompleter sorts alphabetically.
- Added contrib.completers.SystemCompleter
- Completion got a get_display_meta parameter.


0.30: 2015-01-26
----------------

Fixed:
- Backward compatibility with django_extensions.
- Usage of alternate screen in the renderer.

New features:
- Vi '#' key binding.
- contrib.shortcuts.get_input got a get_bottom_toolbar_tokens argument.
- Separate key bindings for ""open in editor."" KeyBindingManager got a
  enable_open_in_editor argument.

0.28: 2015-01-25
----------------

Fixed:
- syntax error in 0.27

0.27: 2015-01-25
----------------

Backwards-incompatible changes:
- Complete refactoring of the layout system. (HSplit, VSplit, FloatContainer)
  as well as a list of controls (TokenListControl, BufferControl) in order to
  design much more complex layouts.
- ptpython code has been moved to a separate repository.

New features:
- prompt_toolkit.contrib.shortcuts.get_input has been extended.

Fixed:
- Behaviour of Control+left/right/up/down.
- Backspace in incremental search.
- Hide completion menu correctly when the cursor position changes.
```

[![Code Health](https://landscape.io/badge/156506/landscape.svg?style=flat)](https://landscape.io/diff/143598)
Code quality remained the same when pulling **[af616ae](https://github.com/jonathanslenders/pgcli/commit/af616aed5b6b3a1fefc007b2e4aee93a8020f738) on jonathanslenders:prompt-toolkit-0.34** into **[f0dcb38](https://github.com/dbcli/pgcli/commit/f0dcb3870881b1d6f76f67cc871fd6986c8684eb) on dbcli:master**.

[![Code Health](https://landscape.io/badge/156518/landscape.svg?style=flat)](https://landscape.io/diff/143611)
Code quality remained the same when pulling **[c046216](https://github.com/jonathanslenders/pgcli/commit/c046216ccf820a85f12ee7dc2778da9b9c4dbf30) on jonathanslenders:prompt-toolkit-0.34** into **[f0dcb38](https://github.com/dbcli/pgcli/commit/f0dcb3870881b1d6f76f67cc871fd6986c8684eb) on dbcli:master**.

Thank you @jonathanslenders. 

I just got back from a camping trip. I'll take a look at the changes and merge it in soon. I appreciate you taking the time to upgrade prompt_toolkit. :)

@dbcli/pgcli-core Can you please pull down this PR and test some of the basic functionality of pgcli. 

This PR upgrades prompt_toolkit to the latest version (Thanks @jonathanslenders). So look for any UI issues (menus, completion, toolbars, prompt, etc). 

Issue I've found so far, changing the database does NOT change the prompt anymore. 

The last bug that you mention (that the prompt doesn't change anymore), that's something I should solve in `prompt_toolkit` itself. I didn't think about a ""dynamic"" prompt in the `create_layout` shortcut. (We are now using that higher-level shortcut to create the layout, because it became too ""low level""/complex otherwise for simple applications to create a `Layout` instance manually. However there I forgot to support dynamic prompts.)

I will fix this and do a new pull request.

Another issue I found was that the highlighting is missing in incremental-search. That's already fixed in the latest `prompt_toolkit` master, but not yet on pypi.
I will keep you posted.

That was a good catch on the incremental search highlighting. I didn't notice it until you pointed out. 

Also I've updated the tests to pass on Python 2 and sent a PR to your fork. https://github.com/jonathanslenders/pgcli/pull/1

:sob: broken in windows. the completion menu doesn't show up, and nothing gets completed.

I upgraded to 0.36. This should fix the incremental search and the prompt again. I will try to test and fix the windows version this evening.

Hi @darikg @amjith,

Actually I do get autocompletion on Windows.
I commented all the psycopg2 and .pgexecute stuff, because I don't have Postgres on my Windows machine installed, but everything of the prompt and autocompletion works. Could you test again?

Jonathan

I just installed from scratch and you're right, it's fine. I'm sorry -- I must've screwed up upgrading in place.

I've tested it to my heart's content. I'm satisfied with the changes. The failing tests are due to the unicode handling issues in the test files. We just need to include `from __future__ import unicode_literals` at the top of the failing test files. 

@dbcli/pgcli-core If you haven't had a chance to test this PR, I'd highly recommend you to give it a spin. Here's how you can pull a PR locally to your machine: 

```
git fetch origin pull/227/head:pr227
```

That will pull this PR into a branch called pr227, then you can `git co pr227` and run `pip install -e .` to install the new dependencies. 

That should help you get started. If I don't heard back from anyone by tomorrow evening, I'll merge this in (if you need more time, just leave a comment, I don't mind waiting).

Cheers!

[![Code Health](https://landscape.io/badge/161694/landscape.svg?style=flat)](https://landscape.io/diff/148820)
Repository health decreased by 0.71% when pulling **[ca6b148](https://github.com/jonathanslenders/pgcli/commit/ca6b148f66834d1823dadb1295f26da76a4f65fd) on jonathanslenders:prompt-toolkit-0.34** into **[51be1f3](https://github.com/dbcli/pgcli/commit/51be1f391af44531823da4c6e158a216f3de5457) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/148820) (including 0 errors and 3 code smells).
- [1 problem was fixed](https://landscape.io/diff/148820/fixed) (including 0 errors and 0 code smells).

It is now merged to master. Had to merge by hand (like a peasant). 

Thanks a lot @jonathanslenders. I'll try to keep up with the releases from now on. 

:shaved_ice: 
",2015-05-02 15:09:21,2015-05-11 20:31:55
971,226,"Can I get one of you @dbcli/pgcli-core to review and merge? 
","Remove jedi installation hack in setup.py.
[![Code Health](https://landscape.io/badge/154414/landscape.svg?style=flat)](https://landscape.io/diff/141436)
Code quality remained the same when pulling **[9bae66b](https://github.com/dbcli/pgcli/commit/9bae66bedb882373f04f52ab180e0a16e96d0408) on dbcli:amjith/jedi-hack-removal** into **[6aff7d9](https://github.com/dbcli/pgcli/commit/6aff7d96c2a3161e2d84373e45f9e2cdecfcbe08) on dbcli:master**.

@amjith is this closed?

No I'm waiting for one of you to merge it. 

@amjith Ok. I recreated the environment using this branch, and it works fine. Going to merge.
",2015-04-29 06:19:03,2015-05-01 04:01:18
972,225,"If the structure of a table changes, the autocomplete options don't seem to refresh - i assume the definitions are cached somewhere?

It would be good to provide a command to invalidate the cache to avoid having to quit and reload to get the latest structure in the autocomplete..
","Provide a way to update autocomplete without restarting
@chrisanderton Can you tell us how you're altering the table? We're automatically refreshing the completion when we encounter a `CREATE` or `ALTER` statement. We're also investigating various ways to auto-detect when schemas are modified (see #211). 

But I'm open to the idea of adding a command called `refresh` or `rehash` which will refresh the autocompletion. 

I'm not altering the table from within pgcli - in this particular case, another tool i'm working with is setting up tables/altering them - and i am using pgcli to interact with them.

I know when the table has changed - as i have made it happen - so i'd be happy with a manual command instead of auto-detection magic! :)

@chrisanderton This is now available in 'master'. You can install directly from master using:

```
pip install -U -e git+https://github.com/dbcli/pgcli.git#egg=pgcli
```

You can refresh the completions using `\#` or `\refresh` commands. 
",2015-04-29 01:11:04,2015-06-18 05:18:37
973,224,"Previously, 'SELECT \* FROM foo WHERE ' correctly suggested columns, but 'SELECT \* FROM foo WHERE bar = 1 AND ' incorrectly suggested keywords. This was due to the fact that sqlparse was grouping the entire where clause into a single Where token.

This seems such a simple fix I feel like I'm missing something! Suggestions on any extra tests here would be appreciated
","fix broken suggestions after compound where clause
[![Code Health](https://landscape.io/badge/154230/landscape.svg?style=flat)](https://landscape.io/diff/141245)
Code quality remained the same when pulling **[a905a7e](https://github.com/dbcli/pgcli/commit/a905a7e292b83315f8763fd151bd3c6aaeab5a28) on dbcli:darikg/bugfix-compound-where** into **[6aff7d9](https://github.com/dbcli/pgcli/commit/6aff7d96c2a3161e2d84373e45f9e2cdecfcbe08) on dbcli:master**.

Additional tests: 

```
SELECT * FROM foo WHERE bar = 10 OR <tab>
```

This might be a harder case to satisfy, so I'm fine if this is not handled

```
SELECT * FROM foo WHERE (bar > 10 AND <tab>
```

This is a weird case, but it should suggest cols. 

```
SELECT * FROM foo WHERE 10 < 
```

Thanks! I got all of those working, but found another one related to subqueries that breaks:
  `select * from foo where exists(`
which should suggest keywords, in order to do a subselect.

This one's even tricker:
  `select foo from bar where baz in (`
which should suggest either subqueries or columns, because both of these are legal:
  `select a from b where c in (select d from e)`
  `select a from b where c in (d, e)`

I think the solution to these intersects with the solution to the easier ones above, so I'll keep picking away at it.

[![Code Health](https://landscape.io/badge/156717/landscape.svg?style=flat)](https://landscape.io/diff/143811)
Repository health increased by 0.26% when pulling **[e060dd3](https://github.com/dbcli/pgcli/commit/e060dd398eef6a56e6050988196e828ba5f158f4) on darikg/bugfix-compound-where** into **[f0dcb38](https://github.com/dbcli/pgcli/commit/f0dcb3870881b1d6f76f67cc871fd6986c8684eb) on master**.
- [1 new problem was found](https://landscape.io/diff/143811) (including 0 errors and 0 code smells).
- No problems were fixed.

Ok, I think I got it finally! See tests for all the cases handled currently. One inchoate problem is that `suggest_based_on_last_token` is starting to get pretty long -- I'm not sure to handle that beyond breaking it up into a bunch of subfunctions like `suggest_when_last_token_ends_with_open_parens` et al.

I'm not quite done with the full review, but the initial perusal looks very promising. I'll get this reviewed tonight and merge in. 

I've updated the branch with the edits that I recommended. I'm happy with the changes in the PR.

@darikg You're welcome to spot check my commit and merge it in. 

[![Code Health](https://landscape.io/badge/158423/landscape.svg?style=flat)](https://landscape.io/diff/145516)
Repository health increased by 0.26% when pulling **[4897386](https://github.com/dbcli/pgcli/commit/48973863f98e4e66fe8a79cd1d7eadbcea026b24) on darikg/bugfix-compound-where** into **[f0dcb38](https://github.com/dbcli/pgcli/commit/f0dcb3870881b1d6f76f67cc871fd6986c8684eb) on master**.
- [1 new problem was found](https://landscape.io/diff/145516) (including 0 errors and 0 code smells).
- No problems were fixed.

I just noticed that there is an interaction between this branch and #230… I'm sorry I didn't notice this sooner… pitfalls of distributed, concurrent development I guess :}

My approach to fixing find_prev_keywords is different from @darikg's, so we should compare notes and see which bits we want to preserve from each. If nothing else, we probably want to keep the new test cases from my PR. But have a look and let's discuss! :)

@darikg and @drocco007 I hope you're not waiting on me. I'm perfectly fine with the changes in this PR. 

If you're good then one of you can merge it in. 
",2015-04-28 21:42:25,2015-05-07 21:46:25
974,223,"Closes #222
","Have Tab autocomplete at cursor
[![Code Health](https://landscape.io/badge/153447/landscape.svg?style=flat)](https://landscape.io/diff/140432)
Code quality remained the same when pulling **[810d202](https://github.com/dbcli/pgcli/commit/810d202df96be35f0717491a412031ce11723ed1) on dbcli:drocco/tab-completion** into **[6aff7d9](https://github.com/dbcli/pgcli/commit/6aff7d96c2a3161e2d84373e45f9e2cdecfcbe08) on dbcli:master**.

This is an interesting one. I still don't understand what dictates the Tab key. I presume that prompt_toolkit has some default behavior for the Tab key.

But anyway, the interesting bit is, the Tab key right now acts like how we expect it to behave in bash which is if there are multiple entries with same prefix then it will fill in the portion of the prefix that is common. 

But with the new PR that is gone, hitting the Tab key will automatically select the first entry in the suggestion menu. 

I think this is the artifact of using substring matching instead of prefix matching. I'm perfectly happy with merging the PR and losing the common prefix completion since that is a bit counter-intuitive. 

Any thoughts before I merge it in? 

/cc @dbcli/pgcli-core 

I think in linux the autosuggestion menu shows up constantly and automatically, right? On windows it doesn't, and the tab key displays the suggestion menu, without filling in any text, whereas control-space shows the suggestions menu, and fills in the first suggestion. So I use the two different keys in different contexts, and would dislike how this pr would take that away. Maybe a reasonable compromise would be to reverse the control-space and tab mappings, instead of mapping them to the same thing?

@amjith  yes, I think you're right that that is the default `Tab` behavior in `prompt_toolkit`, which (almost) serves to explain what's happening in the issue I originally reported. Without changing the default, the initial set of completions includes substring matches, but hitting `Tab` then expands the common prefix (`schema_information`), eliminating the first entry. I'm not sure why that first entry isn't included in the common prefix calculation, but it's probably either a bug in `prompt_toolkit` or in how we are providing completion entries to it.

I think @darikg's proposed solution is reasonable, incoming update that implements it. :) I don't have a Windows machine to test on, so please take a look and let me know if this change meets your expectations.

[![Code Health](https://landscape.io/badge/154344/landscape.svg?style=flat)](https://landscape.io/diff/141362)
Repository health decreased by 0.14% when pulling **[1f168bd](https://github.com/dbcli/pgcli/commit/1f168bd5b8c353c1ff590536cf8bc08028eb3b70) on drocco/tab-completion** into **[6aff7d9](https://github.com/dbcli/pgcli/commit/6aff7d96c2a3161e2d84373e45f9e2cdecfcbe08) on master**.
- [2 new problems were found](https://landscape.io/diff/141362) (including 0 errors and 2 code smells).
- No problems were fixed.

I'll leave this one for @darikg to test and merge. 

:+1: Thanks @drocco007!
",2015-04-28 02:28:39,2015-04-29 10:57:04
975,222,"Here is an example: `SELECT * FROM sch` matches three entries, one a schema name in the middle:

![before_tab](https://cloud.githubusercontent.com/assets/1424858/7361623/c239b1be-ed29-11e4-91db-3b9622372899.png)

After pressing `Tab`, the first selection disappears:

![after_tab](https://cloud.githubusercontent.com/assets/1424858/7361637/0bf25dce-ed2a-11e4-9df9-c890f76a145c.png)
","TAB makes certain completions disappear
So I dug around a little bit and discovered that `Ctrl-Space` behaves correctly with this example. Incoming pull request to treat `Tab` the same way :)
",2015-04-28 02:11:52,2015-04-29 10:57:04
976,221,"When I paste a query with line breaks into pgcli, the lines are joined without a space.

for example:

```
select col
from table
```

becomes

`select colfrom table`

which is a syntax error
","Format of pasted query
Actually in order to paste multi-line strings like the one in the example, you have to enable the multi-line mode (F3 key). 

If you notice the syntax error says 

```
misago> select colfrom table
column ""col"" does not exist
LINE 1: select col
```

Even though it printed it as `select colfrom table` what it actually did was it pasted `select col` and the newline after that was treated as <enter> and it sent the partial query to the server and then pasted the rest of the query into the buffer. 

But if you enable multiline-mode and then paste the same snippet, it will be pasted correctly and then you can end it with a semicolon and press enter to execute the query. 

Try it out and let me know if it works. 

thanks that works :+1: 

@amjith don't you think it should be default config for new users as the same setting is enabled by default for the offcial psql console. 

@iamrahulroy That's debatable. Some of the default behaviors in psql are just terrible, so I'm ok deviating from what is considered default in psql. 

But this one is a subjective call and I'm not sure there is a good way to objectively say one is better than the other. I've chosen what I think is the most common use case, which is people type in queries in a single line and multi-line queries are rare. So I've optimized based on that use case. But if a user prefers to emulate psql there is a config option that allows them to do that. 

The philosophy behind pgcli is ""Sane defaults out of the box"". 

I mentioned in #389 that it would be nice to detect newlines in pasted text, and auto-switch to multi-line mode. That'd be pretty sane imho.

That'd be a great addition @darikg.
",2015-04-23 22:13:49,2015-04-28 16:32:30
977,220,"It'd be awesome to use the `PGPASSWORD=""..."" pgcli` syntax like psql to set the connecting password

http://www.postgresql.org/docs/9.3/static/libpq-envars.html
","Support for psql environment variables
For some reason I thought we already had support for PGPASSWORD, but looks like we honor PGHOST, PGUSER etc but PGPASSWORD is missing. 

It shouldn't be hard to add. We'll take a stab at it. :)

This is now available in version 0.18.0. 
",2015-04-22 15:52:59,2015-07-27 03:25:24
978,219,,"pin sqlparse to 0.1.14 to fix failing tests on travis
[![Code Health](https://landscape.io/badge/148876/landscape.svg?style=flat)](https://landscape.io/diff/135806)
Code quality remained the same when pulling **[c29db86](https://github.com/darikg/pgcli/commit/c29db863abf3a863db50df3380382cb8821452c7) on darikg:sqlparse_version** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.

Yay! Passing tests.
",2015-04-21 01:46:59,2015-04-21 05:59:04
979,218,"There's some data that has YAML in a text field. When selected it is not formatted properly because of the line returns in the YAML

Actual output

```
+-----------------+---------------------+----------------------------------+
|       some_id   |      some_other_id  | my_text_field                    |
|-----------------+---------------------+----------------------------------|
| XX-999999       |                   1 | --- 
STUFF_ID: AB_1111
THINGS: BLAH_VALUE |
```

The output I would expect should be something like this. The challenge would be differentiating between a record with multiple lines, and multiple records where some fields are null.

```
+-----------------+---------------------+----------------------------------+
|       some_id   |      some_other_id  | my_text_field                    |
|-----------------+---------------------+----------------------------------|
| XX-999999       |                   1 | ---                              |
|                 |                     | STUFF_ID: AB_1111                |
|                 |                     | THINGS: BLAH_VALUE               |
```
","Text field with line returns not formatted properly
Yes, multi-line output is handled poorly by the tabulate library. It might be time to rewrite tabulate to something more relevant to pgcli. :(

This is a duplicate of #96. 
",2015-04-20 18:37:42,2015-05-26 17:39:51
980,217,"This PR is a cleanup of #213 to remove extraneous commits added in due to the repo move.

I've cleaned up the commit history. I should have waited to move the repo after merging all pending PRs. That was my bad. 

@j-bennet Doe this look good? 

I'll review the changes and merge it in. 
","Iryna's Editor Command PR
Looks good. Thanks! How did you do that? I could not figure it out!

[![Code Health](https://landscape.io/badge/148528/landscape.svg?style=flat)](https://landscape.io/diff/135429)
Repository health decreased by 0.32% when pulling **[4006c6d](https://github.com/amjith/pgcli/commit/4006c6d0cfa5a197710250f6b6e20837892875c3) on amjith:fixed_branch** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/135429) (including 0 errors and 2 code smells).
- No problems were fixed.

Steps to reproduce: 

```
# Clone your fork
$ git clone git@github.com:j-bennet/pgcli.git iryna_pgcli
$ cd iryna_pgcli

# Move the current working directory to the commit sha before you added your commits. 
$ git co cd1c9ea  

# Create a new branch from the current working directory state.
$ git co -b clean_state  

# Add in the main line repo as a new remote called upstream.
$ git remote add upstream git@github.com:dbcli/pgcli.git

# Bring in all the new changes from mainline. 
$ git pull upstream master

# Cherry-pick your commits on top. 
$ git cherry-pick 4315699
$ git cherry-pick a1b2d15

# Bask in the glory of success.
$ git log

# Push it to my own personal remote. My own fork is added in using the git remote add amjith-fork .....
$ git push amjith-fork fixed_branch

Open a PR from my fork to the mainline.
```

TADA!

There are many ways to achieve the same result, so if someone has a better way to do this, let me know. 

Longer comment as promised: 

`pgspecial.py` should be treated as a standalone package without any dependencies. My goal is to make it into a separate package that can be installed and reused by other application authors. For example, I know that [Catherine Devline](https://twitter.com/catherinedevlin)  is interested in using pgspecial for her own database repl at some point. The original goal of that file is to implement the backslash commands that are specific to postgres database like `\dt, \dv` etc. So pulling in `click` as a dependency is not a good idea. `\e` and `\c` are weird edge cases that are not really dealing with the database.

I'm sorry about sending this negative comment later on in the review. I should have caught this at the early stage. :(

I'm open to discussing this decision to keep pgspecial.py a standalone. 

Ok. I didn't know this was the intent. I agree that even though ""external editor"" is also a special command because it's a backslash command, it does not fit between the rest of them that follow the pattern of ""run some specific Postgres queries and return data"". I see two ways of solving this:

1) Pull this command out into main.py (which already has click dependency). This feels ugly, and I don't think that main.py should deal with commands at all.
2) Pull this command out into a new module (perhaps iocommands.py ?) that would be used by main.

What do you think?

It's admirable to have a goal to keep main.py as clean as possible and not deal with commands at all. But I've already set the precedent (a wrong one) to deal with `\c`. So if you're feeling up to it, I'm all for moving it into a separate file and compartmentalizing it. So main will just make call to these packages. 

Then I will move both \c and \e there.

@amjith So looks like \c has too much going on (setting internal state of pgexecute) to pull it out. But editor command is now separate from the pgspecial. Perhaps you can add https://github.com/j-bennet/pgcli/commit/9c215d25ea9d3d523929e6d58141e73b9f76fd99 to this PR.

[![Code Health](https://landscape.io/badge/150180/landscape.svg?style=flat)](https://landscape.io/diff/137247)
Repository health increased by 0.15% when pulling **[4231545](https://github.com/amjith/pgcli/commit/4231545763c07a7878197a2792a3a52e7bfbf13d) on amjith:fixed_branch** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/137247) (including 0 errors and 3 code smells).
- [3 problems were fixed](https://landscape.io/diff/137247/fixed) (including 0 errors and 3 code smells).

@amjith I already looked into changing this to ""endswith"", and it's not as simple as it seems. I'll explain later if you like, but it seems that it would require some more significant changes in main module. I was thinking perhaps this (smaller) change can be implementation stage 1, and I can add a stage 2 later.

I've added a new commit to do what I had in mind. You're right it wasn't as straight forward as I explained in the comments. 

So would yo mind reviewing the latest commit? I've checked it manually and it seems to work as expected. 

[![Code Health](https://landscape.io/badge/150213/landscape.svg?style=flat)](https://landscape.io/diff/137292)
Repository health increased by 0.35% when pulling **[5654cd1](https://github.com/amjith/pgcli/commit/5654cd16c0883b7a82b034df1cf6c4bd86ca52bf) on amjith:fixed_branch** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/137292) (including 0 errors and 3 code smells).
- [4 problems were fixed](https://landscape.io/diff/137292/fixed) (including 0 errors and 4 code smells).

@amjith Interesting... I remember seeing some odd behavior when I changed this to ""endswith"", in multiline mode it didn't accept ""select *\e"", and wanted "";"". I had to invent a workaround for that. I have no time to look now, but will check later.

@amjith I don't see that weird behavior anymore, seems to work fine. I'll check on mac (only verified on linux), but I think you're good to go.

![screenshot 2015-04-22 16 49 12](https://cloud.githubusercontent.com/assets/637013/7287978/02876afe-e910-11e4-8087-a4199eb1d85c.png)
I reproduced the problem that I was talking about on my macbook. I type in the query and \e, and instead of running the editor command, the CLI just goes to a new line and expects more input. The weirdest thing is - it did not happen on my Linux Mint.

That is a good catch. I'm surprised that it didn't happen in Linux. I know the reason why. I'll have to think about a good way to fix it. 

[![Code Health](https://landscape.io/badge/150429/landscape.svg?style=flat)](https://landscape.io/diff/137465)
Repository health increased by 0.36% when pulling **[a52aab7](https://github.com/amjith/pgcli/commit/a52aab7873990e26abcac4963475d78dbcf0819a) on amjith:fixed_branch** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/137465) (including 0 errors and 3 code smells).
- [4 problems were fixed](https://landscape.io/diff/137465/fixed) (including 0 errors and 4 code smells).

While adding the multi-line case I discovered another corner case for `\e`. 

Details: https://github.com/dbcli/pgcli/pull/217/files#diff-38f3aeda57742756afa677ca09dcea43R205

I've refactored the code. It probably needs more tests. But I'd appreciate another pair of eyes to check my work. 

[![Code Health](https://landscape.io/badge/150459/landscape.svg?style=flat)](https://landscape.io/diff/137482)
Repository health increased by 0.24% when pulling **[4adb83c](https://github.com/amjith/pgcli/commit/4adb83c3b4d8a4bb5b4abb8748a2c7dc2b11eaea) on amjith:fixed_branch** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [4 new problems were found](https://landscape.io/diff/137482) (including 0 errors and 4 code smells).
- [4 problems were fixed](https://landscape.io/diff/137482/fixed) (including 0 errors and 4 code smells).

@amjith I have two suggestions to this:

https://github.com/dbcli/pgcli/commit/587c5a3906fcc1ec2c48067c45107dd90ae2b8ff
https://github.com/dbcli/pgcli/commit/b3c5a3fb935e294a6342fc8c9504f5cd6744b350

[![Code Health](https://landscape.io/badge/151210/landscape.svg?style=flat)](https://landscape.io/diff/138200)
Repository health increased by 0.26% when pulling **[2acc831](https://github.com/amjith/pgcli/commit/2acc831afd4bb8d48263a4f5958d8e32c8a15d31) on amjith:fixed_branch** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [4 new problems were found](https://landscape.io/diff/138200) (including 0 errors and 4 code smells).
- [4 problems were fixed](https://landscape.io/diff/138200/fixed) (including 0 errors and 4 code smells).

Thank you for working with me on this PR. It was one of the tough commands with various corner cases. 

:key: 
",2015-04-20 16:15:36,2015-04-24 06:14:56
981,216,"It seems like the tests are failing on Travis because a new SQLParse library is out and the output format has changed. (Thanks to @darikg for catching that). 

We need to update the tests to match the new format. 
","Fix the failing tests in Travis
The tests are right, sqlparse is wrong. The easiest thing to do is just wait for sqlparse to release 0.1.16, where it's been fixed, then pin setup.py to that. In the interim we could pin sqlparse to 0.1.14, before the bug regression, but I don't know what that does to pgcli installed with 0.1.15 'in the wild'

It's an install time check, so if someone has 0.1.15 installed then it will continue to work as normal. 

If someone is installing it for the first time it will install 0.1.14 (as expected). But if someone has 0.1.15 installed then install a new version of pgcli it will downgrade their sqlparse to 0.1.14. 

So I think it is safe to assume that we can pin it to 0.1.14 without collateral damage. 

Thanks for the fix @darikg.
",2015-04-20 13:59:21,2015-04-27 05:11:57
982,215,"@dbcli/pgcli-core Can one of you review and merge? 
","Update repo references.
[![Code Health](https://landscape.io/badge/147892/landscape.svg?style=flat)](https://landscape.io/diff/134747)
Code quality remained the same when pulling **[508b2ee](https://github.com/amjith/pgcli/commit/508b2eefbe33f00aa0c4553e5d28dfca0f3cec0d) on amjith:master** into **[09abde0](https://github.com/dbcli/pgcli/commit/09abde0ce69538dc5068d017ad683e9be1380527) on dbcli:master**.

boom
",2015-04-19 05:56:05,2015-04-20 14:10:59
983,214,"### dbcli/pgcli now has a Chat Room on Gitter

@amjith has just created a chat room. You can visit it here: [https://gitter.im/dbcli/pgcli](https://gitter.im/dbcli/pgcli?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.rst:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dbcli/pgcli?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
","Add a Gitter chat badge to README.rst
[![Code Health](https://landscape.io/badge/147893/landscape.svg?style=flat)](https://landscape.io/diff/134748)
Repository health decreased by 3% when pulling **[77e2d31](https://github.com/gitter-badger/pgcli/commit/77e2d314376221326684cbbc1b5898d70e2d1080) on gitter-badger:gitter-badge-1** into **[09abde0](https://github.com/dbcli/pgcli/commit/09abde0ce69538dc5068d017ad683e9be1380527) on dbcli:master**.
- [1 new problem was found](https://landscape.io/diff/134748) (including 0 errors and 0 code smells).
- [18 problems were fixed](https://landscape.io/diff/134748/fixed) (including 0 errors and 14 code smells).
",2015-04-19 05:47:14,2015-04-20 01:02:04
984,213,,"Added external editor command.
[![Code Health](https://landscape.io/badge/147894/landscape.svg?style=flat)](https://landscape.io/diff/134745)
Repository health decreased by 0.33% when pulling **[07c9c7e](https://github.com/j-bennet/pgcli/commit/07c9c7ea2e7e7ef2157f3c2cf7c3dacbd1a1afb5) on j-bennet:master** into **[cd1c9ea](https://github.com/dbcli/pgcli/commit/cd1c9eaa7336c18f1229712fc4a1eb223640b83d) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/134745) (including 0 errors and 2 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/148177/landscape.svg?style=flat)](https://landscape.io/diff/135055)
Repository health decreased by 0.66% when pulling **[b527512](https://github.com/j-bennet/pgcli/commit/b527512eebc9b0a40efeaab9261dfec9f0c5fbcc) on j-bennet:master** into **[7fe802a](https://github.com/dbcli/pgcli/commit/7fe802a33ff534bead192ca8f83cee85f3963795) on dbcli:master**.
- [4 new problems were found](https://landscape.io/diff/135055) (including 0 errors and 4 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/148177/landscape.svg?style=flat)](https://landscape.io/diff/135341)
Repository health decreased by 0.49% when pulling **[b527512](https://github.com/j-bennet/pgcli/commit/b527512eebc9b0a40efeaab9261dfec9f0c5fbcc) on j-bennet:master** into **[508b2ee](https://github.com/dbcli/pgcli/commit/508b2eefbe33f00aa0c4553e5d28dfca0f3cec0d) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/135341) (including 0 errors and 3 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/148478/landscape.svg?style=flat)](https://landscape.io/diff/135372)
Repository health decreased by 0.49% when pulling **[a701206](https://github.com/j-bennet/pgcli/commit/a7012066f60dfe6f881773e11d58fdecc2bd0324) on j-bennet:master** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [3 new problems were found](https://landscape.io/diff/135372) (including 0 errors and 3 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/148482/landscape.svg?style=flat)](https://landscape.io/diff/135380)
Repository health decreased by 0.32% when pulling **[053d460](https://github.com/j-bennet/pgcli/commit/053d4604f7e0a31b18ef9b03b3775a606a7788f2) on j-bennet:master** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/135380) (including 0 errors and 2 code smells).
- No problems were fixed.

[![Code Health](https://landscape.io/badge/148483/landscape.svg?style=flat)](https://landscape.io/diff/135384)
Repository health decreased by 0.32% when pulling **[a1b2d15](https://github.com/j-bennet/pgcli/commit/a1b2d1539802a0adf724bdc29d4e11692c3491e8) on j-bennet:master** into **[3e4d63d](https://github.com/dbcli/pgcli/commit/3e4d63d87db43c5e68e7cef458a1909bf2933f73) on dbcli:master**.
- [2 new problems were found](https://landscape.io/diff/135384) (including 0 errors and 2 code smells).
- No problems were fixed.

This is now superceded by PR #217.
",2015-04-18 21:25:46,2015-04-20 16:37:25
985,212,"`SELECT … INTO` suggests the currently-available set of tables, but this is misleading as the `SELECT … INTO` command needs the name of a _new_, nonexistent table that will be created and populated with the output of the `SELECT`

![select_into_tables](https://cloud.githubusercontent.com/assets/1424858/7217282/dea82ce2-e5ed-11e4-97e3-34e65ab73631.png)

I'm actually not sure what the best user experience behavior is here, so I'd love to discuss our options.
","SELECT … INTO suggests existing tables
`create table` does the same thing. imo it actually kinda makes sense -- I can imagine wanting to make a new table with the same name as an existing one, but with an extra suffix. 

I'm actually with @darikg on this one for a couple of reasons. 
1. As Darik mentioned sometimes I tend to create a table that happens to a copy of an existing table in which case it has a suffix added to the existing table name. 
2. It serves as a reminder of what tables are already available. This is mostly for playing around, but I create tables called or 'test' or 'sample' to test a specific bug and it's good to see that it already exists so I can name it something different rather than get an error. 

oh, I agree, and I wasn't suggesting we remove the suggestions. Mostly I was just musing about this from a signaling perspective, trying to see if we could think of a way to convey to users that these are the table names that you _can't_ use, as opposed to the normal suggestion of ones that you can. But I haven't been able to think of a way that wouldn't be some combination of awkward, difficult, or confusing, so I think you folks are right that we should just leave this as it is.
",2015-04-18 21:10:02,2015-04-28 01:30:03
986,211,"In this screenshot, my_new_table does not appear in the list of table suggestions:

![select_into_no_refresh](https://cloud.githubusercontent.com/assets/1424858/7217263/d5cfc39c-e5ec-11e4-8178-b6a460e35267.png)
","SELECT … INTO new_table should update list of available tables
The auto-refresh of tables and columns are triggered by specific commands (https://github.com/amjith/pgcli/blob/master/pgcli/main.py#L391). 

I've never seen 'SELECT \* INTO new_table FROM existing_table'. That's an awesome feature. :)

But having an auto-refresh for SELECT statement seems overkill, since that is the most common statement. 

I wonder if there is an easy way to detect if the metadata has changed and then issue an auto-refresh. 

For example, after each command, run a query that returns a ""hash"" or a ""count"" of available tables/views etc from the current database. Then we check if that number has changed from previous time and then issue an auto-refresh. 

Thoughts?

That's a cool idea -- it would also handle cases like `SELECT my_function_that_creates_a_new_table()`

So I just found this talk by someone named @drocco007. https://www.youtube.com/watch?v=HvMj8srOh-o

I'm wondering if it's possible to setup a NOTIFY channel for table changes. So anytime a new table is created or altered, can I be notified? 

If so, can we use that in pgcli to setup completion refresh? 

<grin>

The immediate hurdle I can see here is that normally you set up a trigger
that fires the notification that you want when something changes in the
database. We could probably set a trigger up to fire when the catalog
changes, but that feels a little weird to me, since we'd effectively be
messing with end user's databases. But maybe that's just me being overly
cautious. What do you folks think?

In the meantime, I'm going to see if I can figure out what psql does to
handle this.

On Sun, Apr 26, 2015 at 3:57 AM Amjith Ramanujam notifications@github.com
wrote:

> So I just found this talk by someone named @drocco007
> https://github.com/drocco007.
> https://www.youtube.com/watch?v=HvMj8srOh-o
> 
> I'm wondering if it's possible to setup a NOTIFY channel for table
> changes. So anytime a new table is created or altered, can I be notified?
> 
> If so, can we use that in pgcli to setup completion refresh?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/issues/211#issuecomment-96341249.

Does that mean the user would have to have `create trigger` permissions?

Interesting point about user privileges to create triggers. I didn't even think about that. 

Also @drocco007 has a point about messing with user's notify triggers. It does make me nervous. So feel free to shoot down the suggestion, I just got excited when I saw the video, it just seemed like such an elegant solution. I didn't think it through fully (something about late night coding and lack of coffee).

We can go back to running an inexpensive query to detect if the number of tables have changed and trigger an auto-refresh based on that. It won't detect when a table schema is altered (say adding a new column), but that's a corner case I'm willing to live with.

I like the idea of an inexpensive query to find out table count. I think even finding table column counts may not end up to be a ""heavy"" query. Something like this:

select t.table_name, count(c.column_name) as column_count
from information_schema.tables t
join information_schema.columns c on c.table_name = t.table_name
where t.table_schema = 'public' group by t.table_name;

Especially if it's only run after an ""ALTER"" statement. Yes, it is possible to do ""SELECT my_function_that_alters_a_table()"", but I think this would be a very edgy edge case and maybe it's ok if we don't detect it.

P.S. Also, triggering a refresh when the query matches both ""SELECT"" and ""INTO"" may be an option, albeit not the best one.

Connected: https://github.com/dbcli/pgcli/issues/225

Here's a query that hashes the column metadata:

```
SELECT  md5(array_agg(
                    --schemaname, tablename, columnname
                ROW(nsp.nspname, cls.relname, att.attname)
                ORDER BY nsp.nspname, cls.relname, att.attname
            )::TEXT)
FROM    pg_catalog.pg_attribute att
        INNER JOIN pg_catalog.pg_class cls
            ON att.attrelid = cls.oid
        INNER JOIN pg_catalog.pg_namespace nsp
            ON cls.relnamespace = nsp.oid
WHERE   cls.relkind IN ('r', 'v', 'm')
        AND NOT att.attisdropped
        AND att.attnum  > 0
```

I think array_agg and ordered aggregate functions are a relatively new feature though

I took a look at psql's source, which takes a different tack here: instead of trying to keep a list of completions up to date, psql obtains the data lazily, issuing the queries for the needed artifacts on demand. They don't even bother caching the results within a single command (e.g. multiple tables joined in a single SELECT), which can easily be seen using `strace` on Linux. If you'd like to try it for yourself (I found using two terminals to be less confusing), do this:

```
$ strace -e sendto -s 2048 -o /tmp/psql_trace.log psql ## rest of psql args
```

and `tail -f /tmp/psql_trace.log` in the other terminal. In your psql shell, try doing a SELECT and Tab-completing table names; you can see the queries being issued in the strace log.

I copied one of the table name queries it issued by hand and ran it directly, which takes about 5 ms for a local psql process connected to a server in a Docker container. This seems like a viable approach to me, and would have the added benefit of handling some of the corner cases like table-generating functions. If you folks are interested, I'd be happy to try and put together a prototype implementing this for just table names, say, which would give us a feel for the complexity and performance without requiring a huge investment of effort. If we like the prototype, we could then proceed to implement some of the other completion checks the same way.

What do you folks think?

Go forth and take a stab. :)

Here are a few concerns: 
- The 5ms round trip is an ideal case (you already know this). When the database instance is remote, it could be much longer. So having some strict timeouts would be nice.
- Imagine a database with 100s or 1000s of tables. Running this query would send back payloads that are much bigger, which is a strain on the database instance. So all it takes is one user with pgcli to drastically reduce the performance of a database instance that could be serving tons of requests from a web app.

Take all these concerns with a grain of salt. Because, I've dismissed certain things as impossible and each one of you have proved me wrong in various occasions with creative solutions. So I've learned not to say no to things. 

This has been hanging around too long. Closing.",2015-04-18 21:04:56,2017-12-14 23:58:54
987,210,"Closes #196 
",Add the ability to reconnect.,2015-04-18 01:45:34,2015-04-18 01:45:57
988,209,"Closes #201. 

@drocco007 Can you please verify this PR? 

The json handler is trying to decode the incoming string into unicode based on the database encoding. But this is only required if we're in Python 2, because in Python 3 psycopg2 already converts the string to unicode. But I want to double check my understanding.

The test case shown in #201 clearly highlights the problem. 

```
pgcli>  select '{""foo"":42}'::json;
```
","Register the json handler only for PY2.
Hi @amjith,

psycopg2's default JSON handler also runs the result through `loads`, with the result that the displayed value will render as a Python dict instead of JSON. Here is an example that demonstrates the difference: this  branch running under Python 2 renders like this

```
postgres> SELECT '{""foo"":42, ""bar"":true}'::json;
+------------------------+
| json                   |
|------------------------|
| {""foo"":42, ""bar"":true} |
+------------------------+
SELECT 1
```

while under Python 3 the same query renders as

```
postgres> SELECT '{""foo"":42, ""bar"":true}'::json;
+--------------------------+
| json                     |
|--------------------------|
| {'foo': 42, 'bar': True} |
+--------------------------+
SELECT 1
```

I think that we want the JSON version: as a user, if I'm storing JSON, I would expect to be able to copy and paste values returned from pgcli into whatever JSON tools I'm using without having to go through an additional translation step from Python to JSON first. To get that behavior we need to register the typecaster regardless of the Python version, with the typecaster itself handling the spelling difference between Python 2 and Python 3.

I understand now. 

I've updated the PR with a new commit. Does this look good?

Looks good to me! :+1: 
",2015-04-18 00:54:34,2015-04-19 03:13:05
989,208,,"Support table completion for TRUNCATE
Weird. The tests pass locally but fail on Travis. I'll have to look at it tomorrow… >,<

I've been struggling with that myself. Even before your PR, it was showing that behavior. :(

Looks like the failures are due to a difference between sqlparse 0.1.14 and 0.1.15. setup.py has >= 0.1.14 so it was passing on your machine with 14 and failing on travis with 15. I think this is related to a PR I made for sqlparse so I'll look into whether this is a bug in sqlparse or just out-of-date tests in pgcli.

Ok, the failures are totally unrelated to this PR. They reflect a pretty cosmetic problem as far as pgcli is concerned, in that they don't affect any of the sql completion. See andialbrecht/sqlparse#185

@drocco007 The changes look good. I'm happy to merge. But a test would be nice. Let me know if you don't have time and I'll whip one up. 

:custard: 

Sure thing! I'll put some tests together this evening (or tomorrow at the
latest).

On Fri, Apr 17, 2015, 4:44 PM Amjith Ramanujam notifications@github.com
wrote:

> @drocco007 https://github.com/drocco007 The changes look good. I'm
> happy to merge. But a test would be nice. Let me know if you don't have
> time and I'll whip one up.
> 
> [image: :custard:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/208#issuecomment-94071262.

I have added some tests for all the code paths around this change. Please let me know how they look!

Tests look great! 

Thank you!! :ice_cream: 
",2015-04-17 04:11:13,2015-04-19 02:37:46
990,207,"Add TRUNCATE as a supported SQL command
",Support TRUNCATE,2015-04-17 03:21:23,2015-04-19 02:37:48
991,206,"Requested by a user on google groups. 

https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/pgcli/y6255Ix5JVo/PyCYGVEmzhUJ

eg:

```
$ psql -l 
                                    List of databases
        Name         |   Owner   | Encoding |   Collate   |    Ctype    | Access privileges
---------------------+-----------+----------+-------------+-------------+-------------------
 _test_db            | postgres  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 amjith              | amjith    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
```

It should be fairly straight forward to implement. 
","Add a command line argument -l to list available databases
I'd love this feature, too as it would allow to replace `psql` completely by `pgcli`.
",2015-04-16 16:31:54,2017-07-15 05:27:55
992,205,"When I try to change folder with \cd the parser thinks I am trying to connect to another database:

```
my_database> \cd whatever
FATAL:  database ""whatever"" does not exist
```
","Implement (\i) and (\cd) commands in pgcli
LOL!

Did you try creating a folder called ""whatever""? Just kidding. 

Yes `\cd` is not an available command. Right now any command that starts with a `\c` is treated as a change DB, which is wrong. The fix for that is already in the `master` branch, waiting to be released.

But I'm more interested in the use case that comes after it. 

What exactly do you do after you change the directory? Because pgcli does not have support for interacting with things that are in the current folder. So if you have a use case in mind, I'd be interested to hear it. 

Hi and thanks for replying.

I have a lot of pl/pgsql functions which I often reload from files with the  **\i** command.

Adding `\i` is the real goal then. 

I'm going to change the title of this issue to implementing `\i` since that is going to be much harder than implementing `\cd`. 

Thanks a lot.

Going along with `\i` support, `\o` support would be awesome.

Support for `\i` is now available in the latest release of pgcli. 
",2015-04-14 08:32:41,2015-11-26 12:27:08
993,204,"Added some commands yet-to-be implemented.
Added ""unimplemented"" message if such a command is called.
Reformatted help docstrings.
","Added to-be-implemented commands.
Thanks for the PR. I've left a couple of suggestions. I'd be interested to know your thoughts on those. 

Even though the goal is to be a drop-in replacement for psql, I wan to set realistic expectations for the users in terms of the things we can do. There are certain things that are not suitable to do in Python. 

Good point. I removed those two. I think it's better to not show them at all if we're not going to support them.

Thank you! 

:microscope: 
",2015-04-13 23:02:19,2015-04-15 18:09:53
994,203,"http://windows.microsoft.com/en-us/windows-8/what-appdata-folder

http://blogs.msdn.com/b/patricka/archive/2010/03/18/where-should-i-store-my-data-and-configuration-files-if-i-target-multiple-os-versions.aspx

This is not available in Win XP. So have a fallback. 

Right now the .pgclirc and .pgcli.log are defaulting to USERPROFILE which is wrong for Windows. 
","Use LOCALAPPDATA in Windows
Fix released in 0.20.0. 

Please upgrade:

```
pip install -U pgcli
```
",2015-04-13 20:38:48,2015-11-01 09:11:26
995,202,"When searching for completions in smart completion mode, a potential
suggestion of a user-specified name (e.g. tables, functions, etc.) is
considered a match if the search text appears anywhere in the
suggestion. Keywords, special commands, and built-in functions still
use startswith matching.

Closes #193
","Completion search text matches user-defined entities anywhere in the name
:+1: 

That's a clever idea to implement the start-only logic for built-ins. :clap: 

Thank you!

:blush: thanks! :)

An unexpected pleasant surprise is now the auto-escaping with quote is twice as awesome. 

For eg:

![screenshot 2015-04-16 07 21 32](https://cloud.githubusercontent.com/assets/49260/7182982/72a14456-e409-11e4-9add-69066d0c7897.png)

Previously I would have to start with a quote character in order to show table names with spaces. Now I don't have to. 

This is brilliant. :)
",2015-04-13 01:33:48,2015-04-15 13:29:43
996,201,"When a query returns a `json` or `jsonb` value, `pgcli` throws an exception: `'str' object has no attribute 'decode'`:

```
$ pgcli
Version: 0.16.3
Chat: https://gitter.im/amjith/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
ilmari> select '{""foo"":42}'::json; 
'str' object has no attribute 'decode'
ilmari> select '{""foo"":42}'::jsonb;
'str' object has no attribute 'decode'
ilmari> 
```
","Error when selecting json/jsonb values
@ilmari Can you tell me what version of python you are using and how you installed pgcli (did you do pip or brew)? 

Because I just tried it on my own installation and it seems to work. 

```
↪ pgcli -h 0.0.0.0 -p 49153 -U postgres
Version: 0.16.3
Chat: https://gitter.im/amjith/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres> SELECT '{""fo"":42}'::json;
+-----------+
| json      |
|-----------|
| {""fo"":42} |
+-----------+
SELECT 1
Command Time: 1.90734863281e-06
Format Time: 0.000227928161621
postgres> SELECT '{""fo"":42}'::jsonb;
+------------+
| jsonb      |
|------------|
| {""fo"": 42} |
+------------+
SELECT 1
Command Time: 5.96046447754e-06
Format Time: 0.000182867050171
postgres>
```

I'm on Debian Testing (Jessie/8.0-to-be) with Python 3.4.2. I installed pgcli with `pip3 pgcli`.

Confirmed that it's a bug in Python 3. I'll fix it soon. Thank you for reporting. :)
",2015-04-11 23:02:52,2015-04-19 03:13:05
997,200,"Spinning this off from a derailment in #193 

Python prompt toolkit has supporting for showing extra information in the completions menu, as seen in this screenshot:

![](https://raw.githubusercontent.com/jonathanslenders/ptpython/master/docs/images/file-completion.png)

This seems to be as easy as specifying the `display_meta` parameter when constructing each `Completion` object.

We could make use of this in pgcli.
- Indicate whether each suggestion is a schema, table, view, function, alias, column, or keyword
- Show the quick help text for all the \special commands
","Show meta info in the completions menu
I'm fairly certain we need to upgrade prompt_toolkit to the latest version before we can utilize this feature. So this has a hard dependency on #168.

Since prompt_toolkit is now upgraded, it'll be nice to add this feature. @darikg Are you interested in taking a stab? 

This is now merged into master. Thanks @darikg for the PR. 
",2015-04-11 21:17:34,2015-07-29 03:32:31
998,199,"``````
    * to build deb & rpm simply run
        ```
        version=<se.mv.er> vagrant provision
        ```
      vagrant shell provisioner will run the inline script and generate
      a deb and an rpm file in the local directory. This is achieved by
      multivm Vagrantfile one for centos and one for debian
    * To install the generated deb - run sudo dpkg -i
    * /pgcli/pgcli_<se.mv.er>.deb (then sudo apt-get install -f if deps
      are missing on a clean debian install)
    * To install generated rpm - sudo yum install path-to-rpm
    * package will be installed under /usr/share/pgcli
    * script pgcli will be a symlink in /usr/local/bin/pgcli ->
      /usr/share/pgcli/bin/pgcli (with right shebang line
      #!/usr/share/pgcli/bin/python)
``````
","Packaging: first cut of working deb and rpm build
@amjith added another provisioner for CentOS

I'm getting the following error:

```
There are errors in the configuration of this machine. Please fix
the following errors and try again:

vm:
* The box 'chef/debian-7.8' could not be found.
```

I presume that I need to download a vagrant box from here: http://www.vagrantbox.es/

I don't know which one to download. Can you help? 

Hey I think you'll have to update your version of vagrant - the box I've referenced is from [atlas](https://atlas.hashicorp.com/boxes/search) Hashicorp's vagrant repo

I upgraded vagrant and tried again. New errors:

```
==> debian: Installing collected packages: click, Pygments, jedi, docopt, six, wcwidth, prompt-toolkit, psycopg2, sqlparse, pgcli
==> debian:   Running setup.py install for jedi
==> debian:   Running setup.py install for docopt
==> debian:   Running setup.py install for prompt-toolkit
==> debian:   Running setup.py install for psycopg2
==> debian:   Running setup.py install for sqlparse
==> debian:   Running setup.py install for pgcli
==> debian: Successfully installed Pygments-2.0.2 click-4.0 docopt-0.6.2 jedi-0.8.1 pgcli-0.16.3 prompt-toolkit-0.26 psycopg2-2.6 six-1.9.0 sqlparse-0.1.14 wcwidth-0.1.4
==> debian: -> Cleaning Virtualenv
==> debian: -> Removing compiled files
==> debian: -> Creating PgCLI deb
==> debian: {:message=>""All flags should be before the first argument (stray flags found: -d-d-p--after-install--after-remove--url--description--license"", :level=>:warn, :timestamp=>""2015-04-15T04:36:04.   %6N+0000""}
==> debian: {:message=>""Invalid package configuration: Cannot package the path 'build/all', does it exist?"", :level=>:error, :timestamp=>""2015-04-15T04:36:04.   %6N+0000""}
```

I may have forgotten to add the version number. I'm trying it again. 

Cool. The deb package was created successfully. 

But rpm creation didn't start. 

```
==> centos: VM not created. Moving on...
```

I'm fairly new to vagrant, so I'm still learning by fire. If you have pointers on how to get the centos image going, please let me know. 

Woot! Woot! It works. I'll update the develop.rst to document the steps to get it working.

Thank you! :tangerine: 

@amjith can you try,

``` bash
version=1.2.3 vagrant up centos
```

@ceocoder I managed to get both rpm and deb packages building. I've documented the steps in DEVELOP.rst file. 

https://github.com/amjith/pgcli/commit/e1958c0f9bad34edd6cb9775a28c276655729505#diff-e499c009307a0b632d20c2ecaef3a127

Can you please check if those instructions look good? 

Thank you very much for creating the Vagrantfile. It was a great exercise for me to learn how to work with it. 

copied from twttr -  

I left a TODO in the license part https://github.com/amjith/pgcli/commit/b8d52953820085eeba47bfde3b51b89a68bc0f8f#diff-23b6f443c01ea2efcb4f36eedfea9089R88 … wasn't sure which license you were using

instructions make sense - `version=x.y.z` part is somewhat ambiguous, that allows someone to create a deb/rpm with different version number than what you have in `setup.py` - I can look that up and use it by default or add this to a `release.py`
",2015-04-11 18:27:57,2015-04-15 04:57:55
999,198,"Fixes #197
","Handle a ',' entered before any completions gracefully
:+1:  

Thank you!

:coffee: 
",2015-04-11 13:56:52,2015-04-11 16:28:41
1000,197,"Example when typing a `,` as the first character on a line:

```
~$ pgcli -h localhost postgres postgres
Version: 0.16.3
Chat: https://gitter.im/amjith/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres> ,Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 763, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/drocco/.envs/brighttrac/lib/python2.7/site-packages/prompt_toolkit/__init__.py"", line 472, in run
    CompleteEvent(text_inserted=True)))
  File ""/home/drocco/source/foss/pgcli/pgcli/pgcompleter.py"", line 180, in get_completions
    for suggestion in suggestions:
TypeError: 'NoneType' object is not iterable
```

The error also occurs if there is no prior completion, so `sel,` will also trigger it, for example.
",Exception raised when a comma appears before completion,2015-04-11 13:34:32,2015-04-11 16:28:41
1001,196,"`psql` will attempt to reestablish a connection to the server in case of a restart or `pg_terminate_backend` call. For example, if we establish a connection to a local service

```
~$ psql -h localhost postgres postgres
psql (9.3.5, server 9.4.1)
WARNING: psql major version 9.3, server major version 9.4.
         Some psql features might not work.
Type ""help"" for help.

postgres=# select 1;
 ?column? 
----------
        1
(1 row)
```

and then restart the server in another terminal, `psql` detects the broken connection and attempts to reset it:

```
postgres=# select 1;
server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or while processing the request.
The connection to the server was lost. Attempting reset: Succeeded.
postgres=# select 1;
 ?column? 
----------
        1
(1 row)

postgres=#
```

`pgcli` detects a broken connection gracefully but does not attempt to reset it:

```
~$ pgcli -h localhost postgres postgres
Version: 0.16.3
Chat: https://gitter.im/amjith/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres> SELECT 1
+------------+
|   ?column? |
|------------|
|          1 |
+------------+
SELECT 1
Command Time: 5.00679016113e-06
Format Time: 0.000869035720825
```

The first command issued after restarting the database produces:

```
postgres> SELECT 1
server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or while processing the request.
```

and subsequent commands yield:

```
postgres> SELECT 1
connection already closed
postgres> 
```

It would be nice if `pgcli` mimicked this behavior. In my development workflow, I frequently use the template option to CREATE DATABASE to create fast database snapshots or restore from a previous state, but this requires disconnecting active clients, so I see this behavior fairly frequently.

Notice that `psql` does not attempt to re-issue the command that failed. This is probably sensible behavior that we should preserve.
","Attempt to reconnect when server connection lost
Yes. I like this idea. I'm sure psycopg2 throws an exception when the connection is broken, we can find out the exception type and catch that and reattempt a connection? 
",2015-04-10 13:41:33,2015-04-18 01:45:57
1002,195,"Originally, tables and schemas starting with `pg_`, as well as `information_schema` were not stored, under the assumption they would generate too many superfluous suggestions. This broke as soon as someone tried to manually add pg_catalog to the search path. #192 

Now, metadata is stored for all tables and schemas, and pg_catalog is correctly reported as being on the search_path, even though it is so implicitly. In order to prevent extraneous suggestions from `pg_catalog`, suggestions starting with `pg_` are suppressed, unless the user has already typed `pg_`, which seems like a reasonable compromise to me. 
","Improve handling of pg_catalog in metadata
Sorry mate. Poor internet connection and lack of sleep is making it impossible to review code with clarity. 

Thank you for the quick turn around. I promise I'll get to it as soon as I'm back from PyCon, early next week. :)

Looks good. BTW, that's a clever idea to suggest temporary tables/schemas when the user types 'pg_'.

:circus_tent: 
",2015-04-09 16:45:04,2015-04-15 00:07:28
1003,194,"I want to add a easter egg for my friend -- command `\cf` -- her name abbreviation,
but when I type `\cf`, it raises `Database name missing.`,
so I have fixed it.

I think it might be useful in the future.
","Fix the checking to commands '\c' or 'use'
It warms my heart to know that people are adding easter eggs to pgcli. :)

Just make sure you add a check for `\connect` and you're good. Thanks!

OK :smiley:

:+1:  

Cheers! :bee: 

:smirk:
Cheers! :wine_glass:
",2015-04-09 09:48:43,2015-04-09 14:12:47
1004,193,"Taken from a reddit comment: http://www.reddit.com/r/programming/comments/31pkwf/mysqlcli_cli_with_autocompletion_and_syntax/cq5ftcy

>  A critical thing to notice is that the completion filtering is NOT based on the input being a string prefix of the completion (but that works too). The input needs to be a subsequence match of a completion. This is a fancy way of saying that any input characters need to be present in a completion string in the order in which they appear in the input. So abc is a subsequence of xaybgc, but not of xbyxaxxc. After the filter, a complicated sorting system ranks the completion strings so that the most relevant ones rise to the top of the menu (so you usually need to press TAB just once).

It should be a simple matter of changing this function [find_matches()](https://github.com/amjith/pgcli/blob/master/pgcli/pgcompleter.py#L160..L165) to do substring matching. 
","Switch the string prefix matching to subsequence matching. 
I took an initial stab at the “unanchored substring” formulation of this idea, where the search term `test` will match both `test_table` and `json_test` but not `tempest`. As you intimate in your comment, this isn't a difficult change, but it does introduce some interesting UI considerations. Here's an example:

![pgcli_select_fr](https://cloud.githubusercontent.com/assets/1424858/7089345/2e4ea9b4-df69-11e4-96a2-d845b8e3a77f.png)

This doesn't seem quite right: I definitely want FROM at the top of that list, which suggests that we need some sort of prioritization to the rankings, which I don't think is supported (yet). What do you think?

Maybe do the vanilla prefix matching on keyword and pgspecial suggestions, but the fancier substring matching on everything else?

I like @darikg's solution. It's simple and might be worth trying. 

But we do need some way of ranking the suggestions in the future. I don't have any bright ideas on how to rank them, so I'm open to suggestions. 

One other place the ranking would be useful is schemas vs tables vs functions. At the very least we need a way to distinguish them in the drop down. 

I can see us adding an opening bracket to functions, but schemas and tables are hard to distinguish. Even just a horizontal line to show the separation would be good. 

What about using the way ptpython distinguishes files and directories?

![](https://raw.githubusercontent.com/jonathanslenders/ptpython/master/docs/images/file-completion.png)

Holy potatoes that is awesome!

I'd love to see the categories like that. 'Schema', 'Table', 'View' etc.

We should file that as a separate issue and get back to the substring matching that @drocco007 is suggesting in this issue. 

I have taken a crack at @darikg's suggested approach, the implementation of which you can see here: https://github.com/drocco007/pgcli/commit/1df8ca3ac2a1faca735117d14143a22bb8df2e42

This version currently doesn't work when smart completion is off (and the corresponding test is failing), as that mode makes no distinction between kinds of suggestions. I'm still pondering the best approach to handle that.

I'm also trying to decide if it makes sense to split the hardcoded functions (like DISTINCT) out from user functions; it seems like I want `SELECT MA` to suggest `MAX` but not `FORMAT` but that it might make sense to treat user functions with the unanchored substring matches.

I'd love to hear your thoughts! :)

This is really cool. I like using it to quickly filter a small list of suggestions to the one I want by quickly typing an obviously unique three character substring and mashing TAB, instead of having to scroll to it with the arrow keys.

I think handling the functions the way you describe makes total sense. All the built-ins have such succinct names I can't imagine substring matching being useful.
",2015-04-09 00:51:30,2015-04-15 13:29:43
1005,192,"if ""search_path"" contains schema ""pg_catalog"" application may crash.

``` sh
File ""/home/ubuntu/tmp/env/local/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 199, in get_completions suggestion['schema'], 'tables')
File ""/home/ubuntu/tmp/env/local/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 268, in populate_schema_objects for obj in metadata[schema].keys()]
KeyError: u'pg_catalog'
```
","pg_catalog in search_path causes error in completion.
@asenyshyn Can you tell me which version of pgcli you're using? 

I believe @darikg actually fixed this in one of the previous releases.

Nope :( I can confirm this is a bug, another one I'm responsible for. Will fix tomorrow. Sorry!

This is now fixed in master. Thanks to @darikg.

You can install directly from master using the following command to check it out. 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

I'm planning to do a release sometime this weekend, so you should be able to upgrade directly from PyPI at that time. 
",2015-04-08 12:10:25,2015-04-15 17:39:05
1006,191,"A minor nitpick: since ""goodbye"" is one word, ""bye"" shouldn't be capitalized.
But otherwise, this is a huge improvement over `psql`!
","Fix typo
:+1: Thanks for the PR @davidcelis. 

:tractor: 

✨
",2015-04-07 17:42:35,2015-04-07 20:42:12
1007,190,"- fix some bugs where `t1 JOIN t2 ...` worked fine but `t1 INNER JOIN t2...` was broken
- support `t1 INNER JOIN t2 USING (` which suggests only columns in common
","some join-related improvements
does pgcli officially support python 2.6?

Yes it does. It's funny you got tripped up by Counter. I had to deal with that in one of my other projects last week and I was mildly annoyed by it. 

I ended up using http://code.activestate.com/recipes/576611-counter-class/ which is the official implementation of Counter class by the great Raymond Hettinger. :)

I think it's worth maintaining that compatibility since a lot of linux distros still ship with 2.6 as the default. 

But if it becomes too much of a trouble we can always reevaluate. 

That's fair. Where do you want it? Something like pgcli.backports.Counter?

I was thinking 'pgcli/packages/counter.py'. 

'packages' folder is supposed to be the folder for keeping all third-party packages. Sometime in the future they'll be spun off into separate projects (or dropped) and pgcli will install them as dependencies. 

now py26 compatible

@darikg I'm getting ready for PyCon. So I haven't been able to give it due attention. I'll have plenty of time to review it in the plane. I'll provide feedback or merge it in once I get to PyCon. 

Are you planning to attend this year? It'll be nice to meet you in person. :)

Yeah no worries. I can't make PyCon this year but have a great time! Montreal's amazing.

I finally got around to reviewing the code. I like the `endswith('join')` change. So :+1:  on that. 

I don't understand the changes made to `parse_utils.find_prev_keyword()`. If you could explain that one, I'll be happy to merge it in. 

Sorry about the delay getting back to you on that. Let me try to explain what I was thinking, and you can let me know if it makes sense, or if I'm just recklessly over-complicating things (it's probably the latter.) 

Consider the following two cases, where the asterisk indicates the cursor position:

**Case 1**:  `...s JOIN t USING (*`
  In `suggest_based_on_last_token`, the last token is `(`, and we need to check the preceding token to determine whether the opening parens is due to a subselect, `USING` clause, or function call. Easy peasy.

**Case 2**: `...s JOIN t USING (foo, bar, *`
  This is a bit trickier. The general strategy in `suggest_based_on_last_token` when the last token is `,` is to find the preceding keyword, and recursively call `suggest_based_on_last_token` with that as `token`, effectively requesting suggestions for the first column in the list, i.e.: reduce Case 2 to Case 1. The problem is of course Case 1 doesn't just depend on the ultimate token `(`, it also depends on the penultimate token, which it tries to extract from `text_before_cursor`, which in this case is `bar`, a not very informative token.

I figured there's two avenues to address this: either by complicating code in the `elif token == '('` branch, by smartening up its search for the penultimate token, or by complicating code in the original `suggest_based_on_last_token` call, in the `elif token == ','` branch. My rationale was that this recursive strategy was attempting to reduce the problem to being the first item in a list, so in addition to converting `token` from `,` to `(`, it should also convert `text_before_cursor` from Case 2 to Case 1. That's what the extra code in `find_prev_keyword` does -- instead of just returning the previous keyword, it also returns `text_before_cursor` with everything after that keyword removed.

Wow that was a lot of words. Definitely overcomplicating things. If you want I can pop off the `USING` commits into a separate PR so you can go ahead and merge the simple `endswith('join')` stuff.

I've read through your explanation (twice). I think I just need to go through some examples (maybe tests) and work it out for myself. 

I'll do that and then merge it in. I'll probably write a big fat comment on the line to remind my future self. :)

Thank you for the PR. I've merged it in since it was doing the right thing when I tried it out. 

But I still have a question. 

You mentioned that it was added to address the case of `... s JOIN USING (foo, bar, *`. But don't we already have to handle that case in `INSERT INTO demo (id, name, *`.

I'm going to read through the code to try and understand what made the `USING` case special.

ps: I got to learn about USING in Postgres as a result of this PR, which is always nice. :)

Alright, I'm finally caught up. 

Brilliant work! 

I think this paves the way for adding more suggestion types when we discover cases that are more complicated. I'll still go through and add the comments. 

Thank you very much for doing this. :)

:tractor: 
",2015-04-06 22:40:35,2015-04-17 05:30:38
1008,189,"http://www.postgresql.org/docs/9.1/static/functions-srf.html

Set-returning functions should be suggested after the FROM keyword. 
","Suggest set-returning functions after the FROM keyword
Totally agreed. Actually it doesn't even need to be restricted to SRFs -- all non-aggregate functions are valid table expressions. E.g. `select * from round(1.1)` returns a 1-row resultset. It's easy to suggest function names -- the tricky part is handling the column names so they can be autocompleted in the SELECT or WHERE clause.

Functions can
1. Declare named output arguments like `CREATE FUNCTION f1 (..., OUT col1 INT, OUT col2 INT)`
   in which case `SELECT * FROM f1(...) WHERE <tab>` should suggest col1 and col2. We need to parse the function input argument list to get these names. 
2. Return a table, like `CREATE FUNCTION f2 (...) RETURNS TABLE (col1 INT, col2 INT)`. We need to parse the return expression to get these names.
3. Return a composite type, in which case the column names are the field names of the composite type. 
4. Return an unspecified number of columns, like `CREATE FUNCTION f3 (...) RETURNS SETOF RECORD` in which case the columns need to be specified in the query itself, so e.g. `SELECT * FROM f3(...) AS myfunc (col1 INT, col2 TEXT, ...) WHERE <tab>` should suggest col1 and col2.  

I wrote a bunch of code a while ago to do 1 & 2, but IIRC it relied on some newer changes in sqlparse that haven't been released in a new version yet.

Looks like this got closed automatically when I merged #361. I'm going to keep this open until we merge #368.

@darikg I think the changes in #368 covers all the items you had listed here. Is that right?

#368 covers items 1 and 2 in the list above. 3 and 4 are a lot more esoteric and I won't be attempting to address them any time soon.

I'm going to declare this ""good enough implementation"" and close it.",2015-04-06 17:25:22,2017-12-14 23:51:04
1009,188,"\e, \ef, \sf, \z, \do, \dT, \du, \copy and \watch

From reddit: http://www.reddit.com/r/PostgreSQL/comments/31n0d9/screencast_pgcli_basics_intro_to_installation/cq31v4j?context=3
","Support for more back-slash commands
Amjith, do you mind if I take this one?

Go for it. 

Just a hint, the \e is supposed to launch an editor to edit the query. It is possible to do that, using the `click` module that is already used by pgcli. http://click.pocoo.org/4/utils/#launching-editors

+1. It would be nice if \x worked, as well.

@masonjm The \x is already implemented. It should work just like psql. Unless you have a very old version of pgcli. In which case you should consider upgrading.

You can upgrade using `pip install -U pgcli` or `brew update && brew upgrade pgcli`. Depending on how you installed it originally. 

Sure enough. Brew gave me 0.10.2 originally.

Thanks :).

+1 for `\copy`

+1 for `\copy`

I have to set some reasonable expectations. I have not used `\copy` myself. 

Little bit of researching makes me think that it is ridiculously hard to implement. But I did find some relevant functions in psycopg2 that might make it easy. http://initd.org/psycopg/docs/usage.html#using-copy-to-and-copy-from

@drocco007 @darikg Either of you have experience using `\copy`? 

@amjith This looks pretty amazing (psycopg2). I'm starting to think it's not as impossible as we thought.

one relevant distinction that should be made: the postgres `COPY` command is not the same as psql's `\copy` command.  from 9.4 docs:

> Do not confuse COPY with the psql instruction \copy. \copy invokes COPY FROM STDIN or COPY TO STDOUT, and then fetches/stores the data in a file accessible to the psql client. Thus, file accessibility and access rights depend on the client rather than the server when \copy is used.

that might constrain the development task significantly.  i bet limiting the expectations to supporting `\copy` behavior will satisfy many, many users.  it's often the case that non-superusers can't even execute `COPY`

**edit: sorry, here's the link to the doc page http://www.postgresql.org/docs/9.4/static/sql-copy.html

I'm +1 on \copy, but I don't know anything about how it works. From @boblannon's comment it sounds like a `\copy` command could be transformed into a SQL `COPY` command and then sent to `psycopg2.copy_expert`?

This release adds `\e` and `\dT`. 

Please upgrade using: 

```
pip install -U pgcli
```

I use `\copy` on a regular basis to export data to TSV or CSV with headers and was disappointed to find a lack of this functionality in pgcli. It's kind of a core feature of psql and as far as I can tell pgcli doesn't actually have another way to export queried data?

+1 for `\copy`

`\copy` is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-04-06 17:24:10,2016-06-29 04:34:48
1010,187,"Had this laying around from a while ago and realized today I never submitted it! Closes #39 
","Suggest view names
It works great. Woot!

Thanks for the additional cleanup and tests. Much appreciated. :)

:dolls: 
",2015-04-05 20:43:36,2015-04-06 00:24:00
1011,186,"Thank you for your encouragement.
","display width character string with wcwidth
It works beautifully. :)

Old: 
![2__0_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux_](https://cloud.githubusercontent.com/assets/49260/6998736/2ccc969a-dba0-11e4-9636-f903cc9d9e06.png)

New:
![2__0_0_python2_7_-__pgcli___users_amjith_dropbox_code_python_pgcli___tmux_](https://cloud.githubusercontent.com/assets/49260/6998738/353a7d6a-dba0-11e4-8cdf-43af13b44b9f.png)

Thank you! :confetti_ball: 
",2015-04-05 07:52:39,2015-04-05 21:30:28
1012,185,"![displaychinese](https://cloud.githubusercontent.com/assets/5081021/6993163/8fe92e82-db1e-11e4-9ec8-c1d782ef08f4.png)

Before computing the length of the string, encode it to `gbk` first,
the length of gbk bytecode is exactly equal to the visible length of the string.
And padding space manually instead of using function `format`.

By the way, it will crash when I type Chinese in windows,
I fix it with adding some code to `prompt_toolkit\terminal\win32_input.py`.
But who shall I give it to?
The prompt_toolkit in github is not version 0.26.

Finally, I am not sure whether it's robust and hope you can understand my poor English.
","Chinese display
Hi @xalley,

Thank you for the PR. You're addressed an important issue with the display. 

But the solution only addresses Chinese characters. Would you be willing to use this package [wcwidth](https://pypi.python.org/pypi/wcwidth/0.1.4) which is designed for calculating the printable length of a string? 

In fact wcwidth is already one of the dependencies for prompt_toolkit, so it's just a matter of calling the right apis. :)

BTW, can you send me the fix for the win32_input.py fix? 

If it is not fixed in the latest version of prompt_toolkit, then you should also send it to the author of prompt_toolkit, but if it is already fixed in the newer version, I'll just backport the fix for now and upgrade to the newer version later.

Thank you!

Oh, I see. Thank you very much ^^!
Here is my code. The solution to fix prompt_tookit only addresses Chinese characters too. 

```
diff --git a/win32_input.py b/win32_input.py

--- a/win32_input.py
+++ b/win32_input.py
@@ -110,6 +110,7 @@ class ConsoleInputReader(object):
             # Get next batch of input event.
             windll.kernel32.ReadConsoleInputA(self.handle, pointer(input_records), max_count, pointer(read))

+            gbk_char = b''
             for i in range(read.value):
                 ir = input_records[i]

@@ -118,6 +119,14 @@ class ConsoleInputReader(object):
                 # Process if this is a key event. (We also have mouse, menu and
                 # focus events.)
                 if type(ev) == KEY_EVENT_RECORD and ev.KeyDown:
+                    if 0xA1 <= ord(ev.AsciiChar) <= 0xFE:
+                        gbk_char += ev.AsciiChar
+                        if len(gbk_char) == 2:
+                            key_presses = KeyPress(gbk_char.decode('gbk'), gbk_char.decode('gbk'))
+                            result.append(key_presses)
+                            gbk_char = b''
+                        continue
+
                     key_presses = self._event_to_key_presses(ev)
                     if key_presses:
                         result.extend(key_presses)
```

I have use wcwidth now.

Did you push the new changes with wcwidth to the Pull Request? 

I don't see the new commit or the use of wcwidth in the file diff. 

I am sorry that I don't know how to update a Pull Request. I just push to my repo. I am finding the update button now /_\

That's very odd. Usually when you update your repo and if there is a pending Pull Request, then the changes will automatically updated into the Pull Request. 

But I don't see them in the PR. Which makes me wonder if there was a problem with the update. 

I'm going to close this PR, can you try creating a new PR once I close this? 

I seem that there is something wrong with github.
When I create a new PR, always appear ""Server Error · GitHub""

I'm getting the same error. I think there is a problem with Github. We can try in a few hours if that doesn't work, I'll just pull down your repo and manually merge them in tomorrow.

Thank a lot for your work. :+1: 
",2015-04-04 14:37:15,2015-04-05 01:53:18
1013,184,"In multi-line mode the query should be indented by a leading 4 spaces and a `->` prompt. 
","Indent a multi-line query
I'll do that.

Currently, when a user does a reverse-i-search (Control-R) or a repetition (meta+number), this is shown before the input instead of the actual prompt.  You get `(reverse-i-search `text`):` or `(arg: 3)` for instance. This means that while doing this, the width of the prompt changes. That is fine for single line input, but I noticed that if we indent all of the lines, this can become anoying, because long lines refloat.

For `ptpython`, I solved that by showing a complete separate `I-Search:` and `Arg:` prompt at the bottom. Would you agree to take the same approach as ptpython. I would implement this as an alternative for `prompt_toolkit.shortcuts.create_default_layout`.

So, the layout engine of `prompt_toolkit` supports all possibilities, but in the `shortcuts` module I try to expose only one or two sane defaults that are well tested. This will become the second default; a better multiline friendly one.

Yeah I think moving the search bar down is a reasonable solution. 

Thanks again for addressing this. 

Hi, indentation is working in the master branch of prompt-toolkit. All the examples I tested seem to work, but I'm probably going to give it a few more days before a release.

![pgsql](https://cloud.githubusercontent.com/assets/216638/9071081/7eeba2f6-3af3-11e5-974f-45a59ce38e20.png)

The only change for pgcli:

``` diff
diff --git a/pgcli/main.py b/pgcli/main.py
index 29ddddd..5b8d50b 100755
--- a/pgcli/main.py
+++ b/pgcli/main.py
@@ -241,6 +241,7 @@ class PGCli(object):
                                        reserve_space_for_menu=True,
                                        get_prompt_tokens=prompt_tokens,
                                        get_bottom_toolbar_tokens=get_toolbar_tokens,
+                                       multiline=True,
                                        extra_input_processors=[
                                            # Highlight matching brackets while editing.
                                            ConditionalProcessor(
```

However, I'd like to use another name instead of ""multiline"" here... It's a feature that reflows lines with indentation and shows search and arg toolbars at the bottom.

I think it's fine to call it a different name in prompt_toolkit but I think it should still be called multi-line mode in pgcli/mycli. 

Because as far as the user is concerned they have enabled a mode that lets them write queries that span multiple lines. It just so happens the lines are indented by default now. 

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-04-03 01:15:54,2016-06-29 03:51:58
1014,183,"```
select generate_series(1,9), round(random());
+-------------------+---------+
|   generate_series |   round |
|-------------------+---------|
|                 1 |       1 |
|                 2 |       1 |
|                 3 |       1 |
|                 4 |       0 |
|                 5 |       1 |
|                 6 |       1 |
|                 7 |       1 |
|                 8 |       1 |
|                 9 |       0 |
+-------------------+---------+
SELECT 9
> select generate_series(1,10), round(random());
?????????????????+?????????+?????????????????????++++++++??+++???++++++++'?+++%??++++++++??+++???++++++++??+++???++++++++`?+++???++++++++??+++???++++++++??+++%??++++++++??+++%??++++++++<?+++???+++++++?%?+++%??????????????????????
```

Of course everything works fine in linux.
","bizarre windows formatting bug
Hrm. It seems to work fine in OS X as well. 

Can you try the expanded output mode (`\x`) and see if it has the same problem? 

I'm wondering if the issue is in the formatter or in the output coming from psycopg2. 

Sorry I don't have a windows box to test this out locally. :(

bah, turns out it was just windows default pager
",2015-04-02 22:13:12,2015-04-04 17:09:37
1015,182,"\du should list all available roles. 
","Implement \du command
:dibs: 

I've started working on this issue. I'll have it ready for the next release. 
",2015-04-02 03:56:40,2015-05-31 07:47:01
1016,181,"Add a flat file with a list of contributors and randomly pick one and display a thank you message at startup of pgcli. 
",Add a startup message that thanks a contributor.,2015-03-28 00:08:35,2016-06-29 03:22:53
1017,180,"Users of a database can be suggested after the OWNER keyword in CREATE DATABASE. 

eg: 

```
CREATE DATABASE discourse_development OWNER <user>
```

Extensions in a database can be suggested for CREATE EXTENSION.

eg:

```
CREATE EXTENSION <extension_name>
```
","Add smart completion for USERS and EXTENSIONS
There is a function for this to feed the completer.

```
postgres> select name, comment from pg_available_extensions() order by name;
+--------------------+----------------------------------------------------------------------+
| name               | comment                                                              |
|--------------------+----------------------------------------------------------------------|
| adminpack          | administrative functions for PostgreSQL                              |
| autoinc            | functions for autoincrementing fields                                |
| bloom              | bloom access method - signature file based index                     |
| btree_gin          | support for indexing common datatypes in GIN                         |
| btree_gist         | support for indexing common datatypes in GiST                        |
| chkpass            | data type for auto-encrypted passwords                               |
| citext             | data type for case-insensitive character strings                     |
| cube               | data type for multidimensional cubes                                 |
| dblink             | connect to other PostgreSQL databases from within a database         |
| dict_int           | text search dictionary template for integers                         |
| dict_xsyn          | text search dictionary template for extended synonym processing      |
| earthdistance      | calculate great-circle distances on the surface of the Earth         |
| file_fdw           | foreign-data wrapper for flat file access                            |
| fuzzystrmatch      | determine similarities and distance between strings                  |
| hstore             | data type for storing sets of (key, value) pairs                     |
| insert_username    | functions for tracking who changed a table                           |
| intagg             | integer aggregator and enumerator (obsolete)                         |
| intarray           | functions, operators, and index support for 1-D arrays of integers   |
| isn                | data types for international product numbering standards             |
| lo                 | Large Object maintenance                                             |
| ltree              | data type for hierarchical tree-like structures                      |
| moddatetime        | functions for tracking last modification time                        |
| pageinspect        | inspect the contents of database pages at a low level                |
| pg_buffercache     | examine the shared buffer cache                                      |
| pg_freespacemap    | examine the free space map (FSM)                                     |
| pg_prewarm         | prewarm relation data                                                |
| pg_stat_statements | track execution statistics of all SQL statements executed            |
| pg_trgm            | text similarity measurement and index searching based on trigrams    |
| pg_visibility      | examine the visibility map (VM) and page-level visibility info       |
| pgcrypto           | cryptographic functions                                              |
| pgrowlocks         | show row-level locking information                                   |
| pgstattuple        | show tuple-level statistics                                          |
| plpgsql            | PL/pgSQL procedural language                                         |
| postgres_fdw       | foreign-data wrapper for remote PostgreSQL servers                   |
| refint             | functions for implementing referential integrity (obsolete)          |
| seg                | data type for representing line segments or floating-point intervals |
| sslinfo            | information about SSL certificates                                   |
| tablefunc          | functions that manipulate whole tables, including crosstab           |
| tcn                | Triggered change notifications                                       |
| timetravel         | functions for implementing time travel                               |
| tsearch2           | compatibility package for pre-8.3 text search functions              |
| tsm_system_rows    | TABLESAMPLE method which accepts number of rows as a limit           |
| tsm_system_time    | TABLESAMPLE method which accepts time in milliseconds as a limit     |
| unaccent           | text search dictionary that removes accents                          |
| uuid-ossp          | generate universally unique identifiers (UUIDs)                      |
| xml2               | XPath querying and XSLT                                              |
+--------------------+----------------------------------------------------------------------+
SELECT 46
Time: 0.030s
postgres>

```

Note, i suggest to split the issues.
@amjith Why would you suggest already existing extensions in `CREATE EXTENSION`?
`CREATE EXTENSION` was chosen for simplicity, it'll make more sense to suggest the extension after the word `EXTENSION` for commands like `DROP EXTENSION` and `ALTER EXTENSION`.
> @amjith Why would you suggest already existing extensions in `CREATE EXTENSION`?

I think this is okay, because already installed extensions are available in the `pg_extensions` view. 

````sql
select name from pg_available_extensions except select extname from pg_extension
````

could work for `CREATE EXTENSION`  I think.

Those views are available starting  with 9.1, what is the lowest PostgreSQL version pgcli works with? I've seen it being used successfully against PostgreSQL 8.4
",2015-03-27 10:41:12,
1018,179,,"Make color scheme configurable
@hammer It is configurable. Open the pgcli config file ~/.pgclirc and change the value set for `syntax_style`. 

The config file should have a list of possible colors. 

```
# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
```

Ah I used `brew install` to get `pgcli` installed and my `~/.pgclirc` doesn't have that key set by default. Any chance a solarized dark theme could be added?

The version available through brew is quite old. I need to update that one. 

In the mean time can you install it via pip? 

`pip install pgcli`

Right now it only has the colorschemes that are available by default in [Pygments](http://pygments.org/). Adding Solarized is possible, but it's not a high priority.

If you'd like to take a stab at it, I'd welcome a PR. :)

Here is the relevant file, if you choose to make an addition. https://github.com/amjith/pgcli/blob/master/pgcli/pgstyle.py

Cool filed an issue upstream: https://bitbucket.org/birkenfeld/pygments-main/issue/1098/add-solarized-and-solarized-dark-color.
",2015-03-24 18:22:57,2015-03-24 18:57:30
1019,178,"If I have a column name like `Gene Symbol` the autocomplete should add the double quotes for me and give me `""Gene Symbol""`.
","Quote column names with spaces when autocompleting
It does. But it does it in a weird way. When you type `SELECT * FROM table WHERE ""Ge` it will auto-complete the rest of the column name. The trick is to start the quote and it will complete the possible quoted column names. 

eg: 

![1__1_0_python2_7_-__pgcli___users_amjith_code_go_src_github_com_dogestry_dogestry___tmux_](https://cloud.githubusercontent.com/assets/49260/6810072/b5c114e6-d21b-11e4-98c8-48dc8cd80020.png)

You mentioned that you used brew to install pgcli, that is an old version of pgcli, so it might not have this feature. 

Can you install it using pip? 

You can try `pip install pgcli`. 

I'll work on upgrading the brew version to the latest. 

Good deal will clear my brew install and try `pip`. Thanks for the quick response!
",2015-03-24 18:17:36,2015-03-24 18:52:38
1020,177,"When using `raise` for debugging purposes the output is not shown in `pgcli` (even if `client_min_messages` is set accordingly). Here's an example using **0.16.2**:

```
-- Base function
create or replace function foo() returns void as $func$
  raise notice 'hello world!';
$func$ language plpgsql;
```

Here's the `pgcli` output:

```
jake> select foo()
+-------+
| foo   |
|-------|
|       |
+-------+
SELECT 1
Command Time: 2.86102294922e-06
Format Time: 0.000157833099365
```

And here's the `psql` output:

```
jake=# select foo();
NOTICE:  hello world!
 foo
-----

(1 row)
```
","raise messages not displayed (unless exception)
Interesting! I hadn't thought about stored procedures and doing exceptions inside them. I'll have to check how psycopg2 returns them.

Thanks for reporting it. I'll take a look soon. :)

@jabclab I'm not able to create that function. Here's the output from psql: 

```
misago=# create or replace function foo() returns void as $func$
misago$#   raise notice 'hello world!';
misago$# $func$ language plpgsql;
ERROR:  syntax error at or near ""raise""
LINE 2:   raise notice 'hello world!';
          ^
misago=#
```

Am I missing something?

@amjith sorry, my bad- I didn't put the `begin` and `end` around the plpgsql function body:

```
create or replace function foo() returns void as $$
begin
  raise notice 'hello world!';
end $$ language plpgsql;
```

Alright, I finally found a way to get the notices out from psycopg2 (http://initd.org/psycopg/docs/connection.html?highlight=notice#connection.notices). I'll get that feature added soon. 

Great, thanks @amjith :smile: 

This is now fixed in master.

Install from master using the following command, to try it out.

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```
",2015-03-24 16:39:01,2015-03-25 07:27:06
1021,176,"Example query:

CREATE DATABASE blah OWNER user;
","Add OWNER keyword to auto-completion
OWNER keyword added to the completion list.

Install directly from master using the following command.

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```
",2015-03-24 16:19:07,2015-03-25 06:42:53
1022,175,"```
 File ""setup.py"", line 51, in <module>
    'Topic :: Software Development :: Libraries :: Python Modules',
  File ""/usr/lib/python3.2/distutils/core.py"", line 148, in setup
    dist.run_commands()
  File ""/usr/lib/python3.2/distutils/dist.py"", line 917, in run_commands
    self.run_command(cmd)
  File ""/usr/lib/python3.2/distutils/dist.py"", line 936, in run_command
    cmd_obj.run()
  File ""/usr/lib/python3/dist-packages/setuptools/command/install.py"", line 73, in run
    self.do_egg_install()
  File ""/usr/lib/python3/dist-packages/setuptools/command/install.py"", line 101, in do_egg_install
    cmd.run()
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 368, in run
    self.easy_install(spec, not self.no_deps)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 588, in easy_install
    return self.install_item(None, spec, tmpdir, deps, True)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 640, in install_item
    self.process_distribution(spec, dist, deps)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 692, in process_distribution
    [requirement], self.local_index, self.easy_install
  File ""/usr/lib/python3/dist-packages/pkg_resources.py"", line 576, in resolve
    dist = best[req.key] = env.best_match(req, self, installer)
  File ""/usr/lib/python3/dist-packages/pkg_resources.py"", line 822, in best_match
    return self.obtain(req, installer) # try and download/install
  File ""/usr/lib/python3/dist-packages/pkg_resources.py"", line 834, in obtain
    return installer(requirement)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 608, in easy_install
    return self.install_item(spec, dist.location, tmpdir, deps)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 638, in install_item
    dists = self.install_eggs(spec, download, tmpdir)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 828, in install_eggs
    return self.build_and_install(setup_script, setup_base)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 1105, in build_and_install
    self.run_setup(setup_script, setup_base, args)
  File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 1094, in run_setup
    run_setup(setup_script, args)
  File ""/usr/lib/python3/dist-packages/setuptools/sandbox.py"", line 31, in run_setup
    lambda: exec(compile(open(
  File ""/usr/lib/python3/dist-packages/setuptools/sandbox.py"", line 73, in run
    return func()
  File ""/usr/lib/python3/dist-packages/setuptools/sandbox.py"", line 33, in <lambda>
    ).read(), ""setup.py"", 'exec'),
  File ""setup.py"", line 122
    east_asian_width_properties=(u'W', u'F',)):
```

Running from pip in Python3 or from Github crashes with that error. I may try to fix it nicely...
","Error using python3
Hmm, it's from wcwidth, not from pgcli, so I guess it should be reported upstream :)
OK, and Pygments is also not really Python3 ready.. So I'll just let it go... Maybe should be a challenge to have it python3 ready, but it seems quite far away.

Actually all of them are Python 3 ready just not Python 3.2 compatible. :)

It should work on Python 3.3 and above. Python 3.0 to 3.2 are much harder to support in a single code base. 3.3 introduced some features which made it possible to support Python 3 with a unified code base instead of maintaining two separate code bases. 

So try it on Python 3.3 and let me know if you're still having trouble. 

Here's an article that explains the reasons: http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/

There is a whole section on dropping 3.1 and 3.2 support. 

it works nicely in Python 3.4, but on Debian 7, Python3 is 3.2, so no luck.. But that's fine, it works in Python 2.7 for that platform. Since Debian 8 will be out shortly, and it will include Python 3.4, everything is fine, and I guess we can close that issue ;)
",2015-03-19 16:05:04,2015-03-19 18:32:55
1023,174,"Hi Guys, 

This is my first time opening an issue on gh so forgive my faults if any. I looked for open tickets pertaining to this but couldn't find any.

Whenever I connect to a new db using \connect my autocompletion for tables remains the same as the previous db table I was on.

-rafe 
","autocompletion when \connect -ing to different databases
Could you tell me how you installed pgcli? 

If it was installed via `brew` there was an old bug which was fixed in the newer versions. 

You can try installing the latest version using `pip install pgcli`. 

There are detailed instructions on how to install it using pip here: http://pgcli.com/install

I'll update the brew version to the latest when I get a chance.

Nope! You're right it's a bug. 

You can change to a new database using just `\c` which works as expected. But if you try `\connect` then it doesn't work. 

I'll fix it soon. Sorry about that. But in the mean time you can change to a different database using `\c databasename`. 

Thanks for reporting. 

Awesome ^-^ just trying to help, really like the software!

It is now fixed in the master branch. I'll plan on releasing it soon. 

You can try out the version from master by directly installing pgcli from the git repo using the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Cheers!

This is now released in 0.16.2.

http://pgcli.com/v0.16.2.html

You can upgrade using 

```
pip install -U pgcli 
```
",2015-03-13 16:24:33,2015-03-23 21:19:02
1024,173,"pgcli displays an empty value as well as a NULL string in the same way.

e.g.

```
postgres> select NULL as null_str
+------------+
|   null_str |
|------------|
|            |
+------------+

postgres> select ' ' as empty_str
+-------------+
| empty_str   |
|-------------|
|             |
+-------------+
```

It would be great if there is a way to be able to differentiate these two cases. 

FWIW, `psql` provides this via something like `\pset null '<<NULL>>'`
","Displaying NULL vs empty string
That is a valid request. 

I've put in a fix in master. 

```
misago_testforum> SELECT '' as empty_str;
+-------------+
| empty_str   |
|-------------|
|             |
+-------------+
SELECT 1
misago_testforum> SELECT NULL as null_str;
+------------+
|   null_str |
|------------|
|     <null> |
+------------+
SELECT 1
```

Can you verify?

You can install pgcli from master using the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Thanks!

Works perfectly! Thanks!
",2015-03-10 04:18:31,2015-03-13 17:01:43
1025,172,"The failure listed in the issue is rooted in how tabulate handles Decimal objects, which, at bottom, end up being rendered via

```
>>> format(float(Decimal(10000000)), 'g')
'1e+07'
```

The 'g' format specifier is parameterized in tabulate, but changing it to '' only fixes some of the cases.

Next, I tried asking psycopg2 to return these values as strings rather than Decimal objects, but this also fails due to tabulate's aggressive coercion logic, which ends up giving you

```
>>> format(float('10000000'), 'g')
'1e+07'
```

The best solution is to render Decimal values directly as strings, which will correctly handle the difference between 10000000 and 10000000.0. Here is an example in pgcli

```
postgres> SELECT * FROM numeric_test ORDER BY a
+---------------+
| a             |
|---------------|
| 1.0           |
| 1.01          |
| 10.0          |
| 100           |
| 10000000      |
| 10000000.0    |
| 1000000000000 |
+---------------+
SELECT 7
Command Time: 9.05990600586e-06
Format Time: 0.00118017196655
postgres> 
```

 and the same query in psql

```
postgres=# select * from numeric_test order by a;
       a       
---------------
           1.0
          1.01
          10.0
           100
      10000000
    10000000.0
 1000000000000
(7 rows)

postgres=# 
```

I would normally avoid patching a vendored library like this, but this seems like the cleanest solution under the circumstances and matches previous fixes to a few other types.

Closes #169 
","Format Decimal values directly as strings
I started poking around the `format()` function and the float format specifier. Eventually I found this answer: http://stackoverflow.com/a/2440786

Which renders a reasonably good output:

```
misago_testforum> SELECT * FROM numeric_test ORDER BY a;
+----------------------+
|                    a |
|----------------------|
|                 1    |
|                 1    |
|                 1.01 |
|                10    |
|               100    |
|               100    |
|          10000000    |
|       10000000000    |
|       10000000000    |
| 10000000000000000    |
+----------------------+
SELECT 10
```

Compared to psql output: 

```
         a
-------------------
               100
          10000000
                 1
               1.0
              1.01
              10.0
               100
       10000000000
     10000000000.0
 10000000000000000
```

But then it removes the decimals and insignificant zeros, which can be misleading in some rare cases. So I think you made the right choice by forcing them to render as strings. We'll miss out on the right alignment, oh well. 

BTW, the tests are [failing](https://travis-ci.org/amjith/pgcli/jobs/53747313) on Python 2.6 because the tests you wrote use a 2.7 feature for formatting strings. 

`""insert into numbertest (a) values ({})"".format(value))` should be rewritten as `""insert into numbertest (a) values ({0})"".format(value))`, notice the {0} in the place holder instead of the empty {}. 

Would you mind updating the test to have it pass on 2.6? I'll merge it in once that is resolved. 

Thank you for diving into the code and finding the root cause. :+1: 

Done! I always manage to forget that the shorter format syntax is a 2.7+ thing… :/

If, in the future, you wanted to add decimal alignment, I don't think it would be too hard: it would mostly be a matter of teaching tabulate how to treat the Decimal type. It would probably require some tabulate surgery, since the tool doesn't expose the hook points that would be needed, but the actual change would probably be pretty straightforward.

Cheers!
dan

Yeah I've been meaning to do a lot of improvements to Tabulate to feed it the types instead of having it guess them. But haven't found the time to do it yet. :P 

Thank you for updating the tests. 

:alien: 
",2015-03-10 02:43:44,2015-03-11 05:08:55
1026,171,"Hello,

My conf :

windows 7 64bits - French, with French keyboard layout.
python 2.7.9 x86
psycopg2-2.6.0.win32-py2.7-pg9.4.1-release.exe
cmder 1.1.4.100 with codepage 850

Installing pgcli works on windows (`pip install pgcli`).

But when I enter a non-ascii character (a character of cp 850, like this one : `é` ), pgcli crashes with the following error message : 

```
λ pgcli -h 127.0.0.1 postgres
Version: 0.16.1
Chat: https://gitter.im/amjith/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
postgres> Traceback (most recent call last):
  File ""C:\bin\python2-x86_32\Scripts\pgcli-script.py"", line 9, in <module>
    load_entry_point('pgcli==0.16.1', 'console_scripts', 'pgcli')()
  File ""C:\bin\python2-x86_32\lib\site-packages\click\core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""C:\bin\python2-x86_32\lib\site-packages\click\core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""C:\bin\python2-x86_32\lib\site-packages\click\core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""C:\bin\python2-x86_32\lib\site-packages\click\core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""C:\bin\python2-x86_32\lib\site-packages\pgcli\main.py"", line 344, in cli
    pgcli.run_cli()
  File ""C:\bin\python2-x86_32\lib\site-packages\pgcli\main.py"", line 189, in run_cli
    document = cli.read_input(on_exit=AbortAction.RAISE_EXCEPTION)
  File ""C:\bin\python2-x86_32\lib\site-packages\prompt_toolkit\__init__.py"", line 251, in read_input
    next(g)
  File ""C:\bin\python2-x86_32\lib\site-packages\prompt_toolkit\__init__.py"", line 313, in _read_input
    loop_result = self.eventloop.loop()
  File ""C:\bin\python2-x86_32\lib\site-packages\prompt_toolkit\eventloop\win32.py"", line 44, in loop
    keys = self._console_input_reader.read()
  File ""C:\bin\python2-x86_32\lib\site-packages\prompt_toolkit\terminal\win32_input.py"", line 121, in read
    key_presses = self._event_to_key_presses(ev)
  File ""C:\bin\python2-x86_32\lib\site-packages\prompt_toolkit\terminal\win32_input.py"", line 141, in _event_to_key_presses
    result = KeyPress(ev.AsciiChar.decode('ascii'), ev.AsciiChar.decode('ascii'))
UnicodeDecodeError: 'ascii' codec can't decode byte 0x82 in position 0: ordinal not in range(128)
```
","non-ascii character make pgcli crash
Thanks for reporting the bug. The issue seems to arise from [prompt_toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) which is a dependent library for pgcli.

It looks like there is already a pending github issue for this problem: https://github.com/jonathanslenders/ptpython/issues/13

I don't have a windows machine to try this, so I'm unable to try it out or fix it. 

@darikg I know you use pgcli on windows can you try it out and let me know if there is a way to fix it? 

Sure, I'll try poking around a bit.

@jradix Can you try out the latest version 0.17.0. This uses the very latest `prompt_toolkit`. 

Please upgrade using: 

```
pip install -U pgcli
```

I still get the same error message when I press a non-ascii key :

![image](https://cloud.githubusercontent.com/assets/11317551/7831451/2230b3da-0457-11e5-9d62-1f93f8e00d69.png)

Just for you to see that I have correctly installed pgcli :

![image](https://cloud.githubusercontent.com/assets/11317551/7831487/7f0c9312-0457-11e5-9eed-1c096722c4bc.png)

Thanks for checking that. I presume you're using cmd.exe as your terminal. If so, can you try changing the character encoding using the following command before launching `pgcli`? 

```
> chcp 65001
> pgcli
```

I'm not really familiar with Windows and I got that info from reading stackoverflow: http://stackoverflow.com/questions/1259084/what-encoding-code-page-is-cmd-exe-using

No, it's not an encoding problem. I'm using cmder but it's the same problem on cmd.exe :

![image](https://cloud.githubusercontent.com/assets/11317551/7859071/e6dfd9e0-053d-11e5-9de0-d23e228b6b37.png)

The 65001 encoding is not working :

![image](https://cloud.githubusercontent.com/assets/11317551/7859051/a6438828-053d-11e5-8b1b-8e167ce83d53.png)

Last time I tried looking into this, I got as far as [this](https://github.com/jonathanslenders/python-prompt-toolkit/blob/0b4a2424b1ed3cf4c4975492f34f37d53080ba0d/prompt_toolkit/terminal/win32_input.py#L114). It's calling `ReadConsoleInputA`, specically requesting an ascii character. According to [this](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684961%28v=vs.85%29.aspx) (linked in the comments there), it should be possible to replace that call with `ReadConsoleInputW` instead, but I got in over my head there with C types and gave up

@darikg That's impressive progress. We should report this progress back to @jonathanslenders, see if he has an insight into that method. I'll leave a comment on the prompt_toolkit ticket (https://github.com/jonathanslenders/ptpython/issues/13) with your findings. 

So, it looks like I got a fix for it in prompt_toolkit. As soon as I have a release ready, I'll try to create a pull request to upgrade pgcli as well. There are some more API changes.

@jradix This is now fixed in master. Can you try installing directly from master and trying again? 

```
pip install -U -e git+https://github.com/dbcli/pgcli.git#egg=pgcli
```

This is now fixed in the latest released version of pgcli. Please upgrade to v0.18.0. 
",2015-03-09 10:59:05,2015-07-05 23:24:20
1027,170,"short version: fixes a bug where `DROP TABLE schema_name.<TAB>` and `DROP FUNCTION schema_name.<TAB>` would both suggest both tables and functions from schema_name.

Previously, if the current word contained a period, `suggest_type` would parse text to the right of the period as `word_before_cursor`, so that characters to the left of the period were parsed as the final token. Then `suggest_based_on_last_token` would generate suggestions under the generic catch-all `elif token_v.endswith('.')`. This means that, for example, `DROP TABLE schema_name.<TAB>` and `DROP FUNCTION schema_name.<TAB>` would each suggest both tables and functions from schema_name.

This commit PR changes this behavior to include schema qualifications as part of word_before_cursor, so that `suggest_based_on_last_token` operates on the actual preceding token, not just the schema name. The schema name itself is parsed as an sqlparse Identifier, and passed as an extra argument to suggest_based_on_last_token. This allows each token value to handle dot-qualifications differently, and may eventually support things like function output arguments `func().fieldname` or custom types with `arbitrarily.deep.nested.child.fields`
","Better handle schema qualifications in current word
Haven't done a thorough reading of the changes yet. Cursory look seems good. I'll give it a good read tonight and provide feedback (or merge it in). 

Works beautifully. :)

I was a little embarrassed when I first added the var `most_punctuations`, since that is a terrible name for a variable. Now I see you've added `many_punctuations` which either adds to the injury or gives me comfort in the fact that I'm not alone in my inability to come up with a more descriptive variable name.

:boat: 

lol. I figure it's fine until someone wants `mostest_punctuation`
",2015-03-06 13:35:34,2015-03-09 00:50:23
1028,169,"```
misago_testforum> CREATE TABLE numeric_test (a numeric);
CREATE TABLE
misago_testforum> INSERT INTO numeric_test VALUES (100)
INSERT 0 1
misago_testforum> INSERT INTO numeric_test VALUES (10000000)
INSERT 0 1
misago_testforum> SELECT * FROM numeric_test;
+---------+
|       a |
|---------|
| 100     |
|   1e+07 |
+---------+
SELECT 2
misago_testforum>
```

This should not be the case. pgcli should always try and use non-scientific notation for displaying numbers. 
",Big Numbers are displayed in scientific notation,2015-03-04 18:19:29,2015-03-11 05:08:55
1029,168,"pgcli still depends on prompt_toolkit version 0.26. The current version of prompt_toolkit is 0.31. 

It's time to upgrade the dependency. 
","Upgrade prompt_toolkit dependency
:+1: In Arch, we usually have only the most recent version so pgcli is currently broken over there.

:(

I didn't know it was broken on Arch. 

Do you have the latest prompt_toolkit because you're using ptpython? Because you wouldn't be installing the latest version unless you have another package that is dependent on the newer version. 

There is an AUR package that I maintain that gets the current version of prompt toolkit and that happens to be 0.31.

You're killing me @svenstaro. :)

Just kidding. That's a good incentive for me to work on this issue. I'll tackle it once I get back from PyCon. 

Done!

Available in the latest version 0.17.0. Please upgrade using: 

```
pip install -U pgcli
```
",2015-03-03 23:02:09,2015-05-26 17:13:23
1030,167,"I am running into errors with the latest version of `pgcli`.

When I do:

```
> pgcli -hsome_host.net some_database -Uavazquez -p 54321
```

I get:

```
Traceback (most recent call last):
  File ""/Users/avazquez/anaconda3/envs/py34/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.16.0', 'console_scripts', 'pgcli')()
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/pgcli/main.py"", line 344, in cli
    pgcli.run_cli()
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/pgcli/main.py"", line 170, in run_cli
    self.refresh_completions()
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/pgcli/main.py"", line 297, in refresh_completions
    completer.extend_database_names(pgexecute.databases())
  File ""/Users/avazquez/anaconda3/envs/py34/lib/python3.4/site-packages/pgcli/pgexecute.py"", line 235, in databases
    cur.execute(self.databases_query)
psycopg2.ProgrammingError: column d.datcollate does not exist
LINE 4:        d.datcollate as ""Collate"",
               ^
```

This is with `psycopg2 v2.6`  and `pgcli v0.16`.

``` python
> import psycopg2 as pg
> pg.__version__
'2.6 (dt dec pq3 ext lo64)'

> import pgcli
> pgcli.__version__
'0.16.0'
```

I am in a python 3.4 conda environment with the latest version of Python:

```
$ python --version
Python 3.4.2 :: Anaconda 2.1.0 (x86_64)
```

 I installed `psycopg2` with `pip install pgcli` and did not get any errors. 

Any thoughts on what could be wrong?
","psycopg2. Programming error -- datcollate
What version of postgres database are you using? `pgcli` only has support for version 9.2 and above, but there is a pending issue to add support for the older versions. 

Did this issue crop up after you upgraded to the new version or is this the first time you're trying pgcli? 

I'm trying to find out if this is because of the new additions in the latest version. 

Thank you @amjith First time using `pgcli`. Sorry, I should have mentioned that.  I am working against an older version of a PostgreSQL database, so that probably explains it:

```
> select version();
PostgreSQL 8.2.15 (Greenplum Database 4.2.6.3 build 2) on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.4.2 compiled on Oct  7 2013 15:24:14
```

What issue is the one that you mentioned? (so that I can track it). Is it [this one](https://github.com/amjith/pgcli/issues/18)? 

Thanks.

Yes that's the one. 

The problem is, in order to populate the autocompletion I have to run sql queries against the database to get the list of tables and columns. That sql query is different between the various versions of the Postgres and I decided to stick with 9.2 and above since that's the one I had on my machine. :(

Now I have a few docker instances with older versions, so I'll try and get at least the basic stuff working. 

Thanks for reporting the bug. Cheers!

Support for postgres 8.x is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-03-02 15:09:58,2016-06-29 03:22:12
1031,166,"This query:

``` sql
SELECT jsonb_column->>'field' FROM tbl;
```

...results in an output table with a column named `?column?`. Is this intended?

For comparison, the query:

``` sql
SELECT jsonb_column->>'field' AS ""title"" FROM tbl;
```

... shows `title` as the column title.
","Table header shows ""?column?"" as column name
@wbolster That behavior is inherent to Postgres. When it return the results it returns the metadata such as the table name, column name etc. In this case it's returning the column name as `?column?`. 

This behavior is consistent with `psql` as I see the same output in psql as well. 

Ah, didn't know this was a PostgreSQL thing; I assumed it was some missing formatting stuff on the `pgcli` side. Nevermind, closing.
",2015-03-02 12:32:45,2015-03-02 16:05:49
1032,165,"Replace the default JSON (and JSONB, if defined) type casters with versions that handle the incoming data as strings instead of via json.loads. This fixes #163 and makes JSON render the same way in pgcli as it does in psql. The typecaster uses the current connection's encoding — which defaults to the database encoding — to interpret the incoming data; the implementation should continue to behave correctly if someone ever adds the ability to change the client encoding to pgcli.

I tested this against 9.3 and 9.4 servers (yay Docker!).

Comments welcome. :)
","Interpret incoming JSON as a string instead of via json.loads
Hmm. The build is failing because the test server's database doesn't have the JSON types. I'll adjust the skip conditions on those tests to check that the server has the types defined, which would also let anyone who installed the types via an extension run the tests as well.

OK, it passes Travis! :smiley:

Thank you for the PR to handle `json` types the right way. I appreciate the tests and the updates to make them pass in Travis. :)

There is one small corner case in the exception handling I commented about. Otherwise the change looks great!

:soccer: 

Done! Since the tests and the connection class used basically the same code, I made a common helper and eliminated some duplication.

Thank you! 

:cow2: 
",2015-03-01 02:11:08,2015-03-01 05:48:56
1033,164,"Auto-completion of a special command is not working if the special command is not the first statement in a multi-statement line. 

eg: 

```
> SELECT 1; \<tab>
```

That backslash should have auto-completed the special commands like \d, \c, \l, \dt etc. but it doesn't. 
","Completion of special commands after a semi-colon in a multi-statement line is broken
The new refactor by @darikg in PR #161 fixes this issue. :)

I love it when a code cleanup obliterates a bug.

/cc @drocco007 

PR #161 is now merged to master. I've verified that it fixes the issue. 

Fixed version 0.16.0 is now release to PyPI. 

https://pypi.python.org/pypi/pgcli/0.16.0
",2015-02-28 07:13:22,2015-03-01 09:12:15
1034,163,"When `pgcli` is run in Python 2, JSON fields (`json` and `jsonb` types in PostgreSQL), are shown with `u""...""` prefixes for strings. I guess this is a side-effect of using `repr()`. Maybe the `pprint` module can be leveraged instead?
","JSON display shows u""...""
The code doesn't use `repr()` at least not explicitly, so I'll have to find out where the unicode prefix is coming from. 

I don't have any table with json or jsonb, but I do have a table with `hstore` and it doesn't seem to have the 'u' prefix on `hstore`. I'll create a reproducible case and give it as shot tonight. 

Thanks for reporting.

Here is a simple case that demonstrates the issue:

```
_test_db> CREATE TABLE json_test (id serial, data JSON);           
CREATE TABLE
Command Time: 5.00679016113e-06
Format Time: 2.31266021729e-05
_test_db> INSERT INTO json_test (data) VALUES ('{""name"": ""Éowyn""}')
INSERT 0 1
Command Time: 3.2901763916e-05
Format Time: 3.40938568115e-05
_test_db> SELECT data FROM json_test                               
+------------------------+
| data                   |
|------------------------|
| {u'name': u'\xc9owyn'} |
+------------------------+
SELECT 1
Command Time: 2.69412994385e-05
Format Time: 0.000692844390869
_test_db>
```

It appears that psycopg2 is causing this: recent versions by default run json data through `json.loads` on the way out of the database: http://initd.org/psycopg/docs/extras.html#json-adaptation

Adapting psycopg2's recipe and placing the following top of `pgexecute.py` fixes this case:

```
psycopg2.extras.register_default_json(loads=lambda x: x.decode('utf-8'))
```

which renders the output correctly:

```
_test_db> SELECT data FROM json_test                               
+-------------------+
| data              |
|-------------------|
| {""name"": ""Éowyn""} |
+-------------------+
SELECT 1
Command Time: 4.05311584473e-06
Format Time: 0.000294923782349
_test_db> 
```

However, this probably only works if the database encoding is in fact UTF-8; it may throw decode errors for other encodings. If you'd like, I can submit a PR that uses the database connection's encoding (which seems to be what psql does).

Interesting. I thought psycopg2 treated everything that came out of the database as UTF-8. 

That's why I had to explicitly tell it to not convert unicode to UTF-8 using these register_type() calls. https://github.com/amjith/pgcli/blob/master/pgcli/pgexecute.py#L13..L16

I'll gladly accept a PR that uses the database's encoding. :)

Fix is now available in master. 

You can verify the fix by installing directly from the git repo as follows: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Thanks!  Fwiw, the problem I reported basically boiled down to this (Python 2 only):

``` python
>>> d = {u'foo': u'bar'}
>>> str(d)
""{u'foo': u'bar'}""
```

Before this issue was addressed `pgcli` showed a `str()` representation of a Python dict, which happens to look like JSON (but isn't JSON). After the change, the JSON string as it is sent by the DB is shown. This will work as long as `pgcli` doesn't to anything with the JSON result. I can imagine pretty-printing it   (especially in combination with #162) would make a lot of sense... ;)

Changing to pretty-print and fixing #162 will require a bit of overhaul to the tabulate library. So it's not an immediate priority but that is in the long list of nice to have items. :)
",2015-02-27 17:25:37,2015-03-01 05:48:56
1035,162,"It would be awesome if `pgcli` could grow a wrapped `fancy_grid` output, similar to what `\pset format wrapped` in `psql` does when long column values are shown.
","Wrapped grid mode
Yeah, that would be nice. Auto-detecting the screen-size and adjusting the table width seems a bit tricky, but probably doable.

We've started leveraging the pager to do horizontal scrolling when the output is too wide to fit the screen. 

Try an upgrade:

```
pip install -U pgcli
```

:tada: ",2015-02-27 17:23:42,2015-11-01 09:54:08
1036,161,"-  Move special-related suggestions out of `suggest_based_on_last_token` and into a new `suggest_special` method
  - Special commands don't really obey sql syntax so this makes it easier to work around sqlparse
  - Have \d, \dt, and \dv suggest schema and table names
- Add support for \df 
  - \df suggests schema and function names
- \dn suggests schema names
","Some small \special improvements
Change looks good except for that one corner case with leading whitespace. 

Would it be possible to also get a list of views and suggest that for `\dv` instead of just schemas and tables? Kinda like how `\df` suggests the list of functions? 

In fact, there is an old issue #39 requesting view names to be included in the completion list. That's completely optional of course. :) 

Right now \dt and \dv suggest views and table names interchangeably, because of [this](https://github.com/amjith/pgcli/blob/09da888f88d46eddf01b73c0453f603620f781cf/pgcli/pgexecute.py#L45). In order to separate them, I think we would have additional methods `pgexecute.views()` and `pgcompleter.extend_views()`, which would store view names/columns in `pgcompleter.dbmetadata['views']`, etc. Is that how you were picturing it? If so, I can do it as a separate PR sometime tomorrow.

New commit works as expected. Thanks for fixing it. 

Yes, I did envision having `pgexecute.views()`, it's extend version and an entry into dbmetadata. If you're planning to do it, I'll stay off. It's nothing urgent, so don't worry if you can't get to it right away. 
",2015-02-27 15:31:39,2015-02-28 16:56:22
1037,160,"In pgcli and psql, this works:

```
SELECT 1; SELECT 1;
```

However, using a special command after the first command only works in psql:

```
psql (9.3.5)
Type ""help"" for help.

postgres=# select 1; \l
 ?column? 
----------
        1
(1 row)

                             List of databases
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   
-----------+----------+----------+---------+-------+-----------------------
 _test_db  | postgres | UTF8     | C       | C     | 
 docker    | docker   | UTF8     | C       | C     | 
 foo       | postgres | UTF8     | C       | C     | 
 postgres  | postgres | UTF8     | C       | C     | 
 template0 | postgres | UTF8     | C       | C     | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
 template1 | postgres | UTF8     | C       | C     | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
(6 rows)

postgres=# 
```

while pgcli throws an error:

```
postgres> SELECT 1; \l
syntax error at or near ""\""
LINE 1: \l
        ^

postgres> 
```
","Special commands do not work after the first command in a series
You're right. This fails because the splitting of sql statements happens after an attempt is made to execute  special commands, whereas the splitting should really be happening before attempting any execution at all. 

Ref: https://github.com/amjith/pgcli/blob/master/pgcli/pgexecute.py#L141

I'll take a stab at it after I get some sleep. :)

It is now fixed in master. Can you give it a try and let me know if it works as expected? 

You can install directly from git using the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Looks good!

After I posted the issue, I noticed that psql only allows special commands as the last command in the sequence. That is, this command

```
\l ; SELECT 1;
```

now works in pgcli but produces warnings and does not execute the SELECT in psql. I probably wouldn't worry about it if it were me, but I thought I should mention it since I'm not sure how close to psql's behavior you're trying to tack.

Also, because of my change in #159, special commands aren't included in the suggestions if they are not the first command. Software is hard. :-/ This seems like a separate issue to me, so I'll be happy to open another issue for it if you'd like.

Yeah I knew about the psql limitations with multiple statements in the same line. But I'm sure it's a bug on their part and I decided not to copy that bug. 

I forgot about the completion of special command completion after a semi-colon. I've opened a new issue for that #164.

I probably won't get to it right away since it seems like a minor annoyance rather than a bug. 

Once again thanks for catching the corner cases. :)

Fixed version 0.16.0 is now release to PyPI. 

https://pypi.python.org/pypi/pgcli/0.16.0
",2015-02-24 19:10:22,2015-03-01 09:12:47
1038,159,"With pgcli 0.15.4, I get odd behavior when completing keywords starting with ""d""; before hitting [Tab]:

![image](https://cloud.githubusercontent.com/assets/1424858/6355493/75ffcd5a-bc24-11e4-9c32-995f38d02623.png)

After hitting [Tab]

![image](https://cloud.githubusercontent.com/assets/1424858/6355521/9cf4a818-bc24-11e4-86e9-7607f39a1215.png)

The ""DESCRIBE"" keyword (or its ""describe"" doppelganger in the menu) seems to clobber the other keywords. If I type enough disambiguating characters, the completion works correctly, e.g. ""dec"" [Tab] correctly completes to ""DECIMAL""
","Odd completion behavior with keywords starting with ""d""
Around line 212 of pgcompleter.py, we have this (added in 78288101):

```
        elif suggestion['type'] == 'keyword':
            keywords = self.keywords + self.special_commands
```

This is what is causing the problem, since describe is being pulled in as a special command (the '\' prefix special commands are as well… :-/). This also seems to contradict the comment earlier in the file (around line 72):

```
def extend_special_commands(self, special_commands):
    # Special commands are not part of all_completions since they can only
    # be at the beginning of a line.
    self.special_commands.extend(special_commands)
```

You're right. The comment got outdated and I failed to listen to 'past me'. Thanks for fixing it with the PR. 
",2015-02-24 18:02:36,2015-02-25 22:14:57
1039,158,"Closes #156
","Add completion for CREATE WITH TEMPLATE
I think apart from the two suggestions, it looks good.

Ah, that separation of keywords and special commands makes much more sense! I have updated the PR with your suggested changes. :)

Cheers! 

Thank you for fixing the issues and making sure to add tests. :ice_cream: 
",2015-02-24 17:47:41,2015-02-25 22:14:56
1040,157,"Hi,

Thanks for a great command line tool! Try running the following SQL statement in the interpreter. It'll crash the app.

```
CREATE TEMPORARY TABLE tbl (col INT);
```

The error:

```
File ""[...]/lib/python2.7/site-packages/pgcli/pgcompleter.py"", line 99, in extend_tables
    self.dbmetadata[schema][table] = ['*']
KeyError: u'pg_temp_4'
```
","Creating temporary table crashes pgcli 0.14.0
Thanks for reporting this issue. 

I think @darikg fixed this bug recently (unreleased) #151. 

Would you mind trying the version from master? 

You can install directly from master using the following command

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Creating a temporary table works with the current version of master. Thank you!
",2015-02-23 11:38:31,2015-02-24 06:54:18
1041,156,"There's not much in the postgres documentation about this, but it's super useful for cloning databases, and is much faster than a pg_restore.

http://stackoverflow.com/a/876565/188
","CREATE DATABASE <foo> WITH TEMPLATE <bar> does not autocomplete
Interesting! I've actually never heard of this one. But adding autocompletion support should be possible. Thanks for reporting. 
",2015-02-18 22:06:57,2015-02-25 22:14:56
1042,155,"This would suggest the names of functions create via `CREATE FUNCTION ...`

It doesn't get metadata from functions defined in the pg_catalog schema, which is where `max`, `count`, `sum`, et al. are defined. There's over 2000 functions there so I thought it made sense to stick with the hardcoded whitelist approach currently used for those.
",Autocomplete custom function names,2015-02-17 17:51:21,2015-02-18 22:17:45
1043,154,"For https://github.com/amjith/pgcli/issues/136
","Get vi mode working
Works like a charm. 

Thank you!

:pineapple: 
",2015-02-12 22:32:58,2015-02-13 02:26:43
1044,153,"Followed all instructions to install dependencies, made sure setuptools was updated. I get the following error with pip install:
/usr/local/bin/pip run on Thu Feb 12 18:50:18 2015
Downloading/unpacking pgcli
  Getting page https://pypi.python.org/simple/pgcli/
  URLs to search for versions for pgcli:
- https://pypi.python.org/simple/pgcli/
  Analyzing links from page https://pypi.python.org/simple/pgcli/
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.15.4.tar.gz#md5=373ea29d82c37f6339ae6a4ae4e8fecb (from https://pypi.python.org/simple/pgcli/), version: 0.15.4
  Downloading pgcli-0.15.4.tar.gz
  Downloading from URL https://pypi.python.org/packages/source/p/pgcli/pgcli-0.15.4.tar.gz#md5=373ea29d82c37f6339ae6a4ae4e8fecb (from https://pypi.python.org/simple/pgcli/)
  Cleaning up...
  Removing temporary dir /tmp/pip_build_root...
  Exception:
  Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/dist-packages/pip/basecommand.py"", line 122, in main
    status = self.run(options, args)
  File ""/usr/local/lib/python2.7/dist-packages/pip/commands/install.py"", line 278, in run
    requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle)
  File ""/usr/local/lib/python2.7/dist-packages/pip/req.py"", line 1229, in prepare_files
    req_to_install.run_egg_info()
  File ""/usr/local/lib/python2.7/dist-packages/pip/req.py"", line 292, in run_egg_info
    logger.notify('Running setup.py (path:%s) egg_info for package %s' % (self.setup_py, self.name))
  File ""/usr/local/lib/python2.7/dist-packages/pip/req.py"", line 265, in setup_py
    import setuptools
  File ""/usr/local/lib/python2.7/dist-packages/setuptools/**init**.py"", line 11, in <module>
    from setuptools.extension import Extension
  File ""/usr/local/lib/python2.7/dist-packages/setuptools/extension.py"", line 8, in <module>
    from .dist import _get_unpatched
  File ""/usr/local/lib/python2.7/dist-packages/setuptools/dist.py"", line 21, in <module>
    packaging = pkg_resources.packaging
  AttributeError: 'module' object has no attribute 'packaging'

and something pretty similar when I install from the repository:
Traceback (most recent call last):
  File ""setup.py"", line 3, in <module>
    from setuptools import setup, find_packages
  File ""/usr/local/lib/python2.7/dist-packages/setuptools/**init**.py"", line 11, in <module>
    from setuptools.extension import Extension
  File ""/usr/local/lib/python2.7/dist-packages/setuptools/extension.py"", line 8, in <module>
    from .dist import _get_unpatched
  File ""/usr/local/lib/python2.7/dist-packages/setuptools/dist.py"", line 21, in <module>
    packaging = pkg_resources.packaging
AttributeError: 'module' object has no attribute 'packaging'
","Install fails on !# linux
Sorry about the trouble. 

I believe this is a mismatch between the setuptools version and pip. 

Can you confirm that you can successfully install other packages? Say `pip install prompt_toolkit`. 

Since you mentioned that you already upgraded setuptools, I presume you're on the latest version there. Did you also try upgrading pip? 

You can try `pip install -U pip` to upgrade it. 

If you still have the same problem after all that upgrade, you can always try using easy_install. 

`easy_install pgcli`

Thanks for the quick response, it looks like I have a problem with both pip and easy_install- I upgraded pip as you suggested, installing other packages gives the same error, and easy_install also gives the same error. I'll do some digging, but feel free to close this issue as it's not a problem with pgcli

I'd like to keep this issue open. 

If you find a solution for it please post it here, if not I hope someone else who has a solution might post something. :)

Thanks- I actually ended up completely uninstalling pip and reinstalling from my package manager- but I ended up with different errors:
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.15.4', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/**init**.py"", line 521, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/**init**.py"", line 2632, in load_entry_point
    return ep.load()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/**init**.py"", line 2312, in load
    return self.resolve()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/**init**.py"", line 2318, in resolve
    module = **import**(self.module_name, fromlist=['**name**'], level=0)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 12, in <module>
    from prompt_toolkit import CommandLineInterface, AbortAction, Exit
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/**init**.py"", line 14, in <module>
    from .buffer import Buffer
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/buffer.py"", line 12, in <module>
    from .utils import EventHook
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/utils.py"", line 56, in <module>
    _CHAR_SIZES_CACHE = [wcwidth(six.unichr(i)) for i in range(0, 64000)]
AttributeError: 'module' object has no attribute 'unichr'

I made sure that six was up to date, which was the only thing I could see here- but otherwise I haven't managed to progress it at all

Does this error happens when you try to install or when you launch?
Can you also tell me what version of six you have installed on this machine? 

You can get a list of all installed python packages with their versions using `pip freeze`.

The version of six should be 1.9. I do see the unichr in the six module here: https://bitbucket.org/gutworth/six/src/986089f3d04e468458cc9f5b9b3be26fb3d75ade/six.py?at=default#cl-611

I've just tested this and pip freeze | grep six reports version 1.9.0

It happens when I run pgcli

Thanks

Jo
On Feb 14, 2015 3:55 PM, ""Amjith Ramanujam"" notifications@github.com
wrote:

> Does this error happens when you try to install or when you launch?
> Can you also tell me what version of six you have installed on this
> machine?
> 
> You can get a list of all installed python packages with their versions
> using pip freeze.
> 
> The version of six should be 1.9. I do see the unichr in the six module
> here:
> https://bitbucket.org/gutworth/six/src/986089f3d04e468458cc9f5b9b3be26fb3d75ade/six.py?at=default#cl-611
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/issues/153#issuecomment-74380199.

Hrm. That's odd. I suspect that prompt_toolkit isn't picking the right six module at runtime. Are you running this in a virtualenv or is it installed system wide? 

Can you try uninstalling 'six'? Try running `pip uninstall six`, please run it twice. I've noticed that sometimes it is necessary to uninstall a package twice to completely wipe it. :(

After the uninstall, install it again using `pip install six`. Then try again? 

Hi,

This is system wide. I completely uninstalled pip, pgcli, six, prompt_tools etc and then reinstalled them- and still get the same error when running pgcli, sorry!

Jo

Ha!

I cloned the repository to my local machine, and followed the development instructions for installing it from the local copy, and it worked fine!

Jo

I guess that's good. 

I have no idea what was causing the problem and why the development version works. :(

Sorry you had to go through so much trouble. 

Crunchbang linux can be a bit difficult sometimes, so I'm used to it! Happy to close this though since it's now working for me. Thanks for your help!

:+1: 

I'm also affected. I'm using pip 6.0.8 (current) and setuptools 14.3.1 (__version__ 0.6; current) on Ubuntu. Looks like a setuptools bug.

@remram44 What is the error message? I really wish I could reproduce it, so I can report to setuptools. :(

Did you try easy_install pgcli? I've heard from many sources that it succeeds even when pip fails. 

Somehow rebuilt the virtualenv and it worked? The error was the same, pip importing setuptools and setuptools importing pkg_resources.packaging, which wasn't found (although setuptools outside of pip works fine).

Aha. I'm wondering if the virtualenv was created by an older version of setuptools and when pip and setuptools were upgraded inside the virtualenv it probably didn't work? 

That's good to know, because I can recommend it to people if I run into this issue in the future. 

Thanks for replying. I'm glad you got it working. :)

I'm also facing same issue.
Pip version pip 6.0.8
and setuptools version upgraded to 14.3.1

Error that is occurring with traceback:
Exception:
  Traceback (most recent call last):
    File ""/usr/local/lib/python2.7/dist-packages/pip/basecommand.py"", line 232, in main
      status = self.run(options, args)
    File ""/usr/local/lib/python2.7/dist-packages/pip/commands/install.py"", line 339, in run
      requirement_set.prepare_files(finder)
    File ""/usr/local/lib/python2.7/dist-packages/pip/req/req_set.py"", line 385, in prepare_files
      req_to_install.run_egg_info()
    File ""/usr/local/lib/python2.7/dist-packages/pip/req/req_install.py"", line 310, in run_egg_info
      self.setup_py, self.name,
    File ""/usr/local/lib/python2.7/dist-packages/pip/req/req_install.py"", line 281, in setup_py
      import setuptools  # noqa
    File ""build/bdist.linux-x86_64/egg/setuptools/**init**.py"", line 11, in <module>
      from setuptools.extension import Extension
    File ""build/bdist.linux-x86_64/egg/setuptools/extension.py"", line 8, in <module>
    File ""build/bdist.linux-x86_64/egg/setuptools/dist.py"", line 21, in <module>
  AttributeError: 'module' object has no attribute 'packaging'

@sarang4 Are you installing inside a virtualenv? If so, can you try it in a fresh new virtualenv after you upgraded setuptools and pip? 

If that doesn't work, can you try easy_install? 

And what version of Python are you using? 

@amjith No, I was installing on my system. I have uninstalled it and back to 8.2.1 version. It seems there is bug in setuptools 14.3.1.

@sarang4 Were you able to install it using setuptools 8.2.1? 

Hi all,
I got same problem in setuptools v14.3.1 and created a bug for it.

https://bitbucket.org/pypa/setuptools/issue/368/module-object-has-no-attribute-packaging

@amjith  try `pip install setuptools==8.2.1`

Updated: 
After `sudo apt-get install python-setuptools` and it works.

Thank you @charz for chasing that bug and filing a bug report. I'll recommend setuptools 8.2.1 for the future. 
",2015-02-12 18:59:29,2015-02-21 06:48:37
1045,152,"this was also my fault!
","bugfix: \dt query shouldn't restrict schemas if schema qualifer supplied
Looks good. Thanks for catching this case. 

:bike: 
",2015-02-12 16:30:43,2015-02-12 21:13:05
1046,151,"pgcli crashed for me today after making a new schema:

```
 File ""C:\Users\dg\Anaconda3\envs\pgcli2\Scripts\pgcli-script.py"", line 9, in <module>
    load_entry_point('pgcli==0.15.2', 'console_scripts', 'pgcli')()
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""C:\Users\dg\Anaconda3\envs\pgcli2\lib\site-packages\click\core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""c:\users\dg\documents\python\pgcli\pgcli\main.py"", line 331, in cli
    pgcli.run_cli()
  File ""c:\users\dg\documents\python\pgcli\pgcli\main.py"", line 250, in run_cli
    self.refresh_completions()
  File ""c:\users\dg\documents\python\pgcli\pgcli\main.py"", line 287, in refresh_completions
    completer.extend_tables(pgexecute.tables())
  File ""c:\users\dg\documents\python\pgcli\pgcli\pgcompleter.py"", line 106, in extend_tables
    self.dbmetadata['tables'][schema][table] = ['*']
KeyError: u'pg_temp_4'
```

This was my mistake from the schema PR
","bugfix: make tables query schema filter match schematas query
Is it possible to guard against the runtime failure by adding an except clause for the KeyError? 

With the change in the tables query, this ""shouldn't"" happen again. I put the AttributeError catch in anyway as you suggested. Trade off is that might obfuscate any future insidious mistakes. Your call

> Trade off is that might obfuscate any future insidious mistakes.

Since you're logging the error message I think we can leave it in there for now. 

Looks good! I'll merge it in. 

:custard: 
",2015-02-12 16:29:59,2015-02-12 21:14:08
1047,150,"Created a fresh virtualenv (Python 2.7, OS X 64 bit, USC2).
Ran `pip install pgcli`.
Ran `pgcli` from the bash command line, got the following ImportError on dlopen:

(pgcli)~$ pgcli
Traceback (most recent call last):
  File ""/Volumes/meta/virtualenvs/pgcli/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.15.4', 'console_scripts', 'pgcli')()
  File ""/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/pkg_resources.py"", line 353, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/pkg_resources.py"", line 2321, in load_entry_point
    return ep.load()
  File ""/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/pkg_resources.py"", line 2048, in load
    entry = **import**(self.module_name, globals(),globals(), ['**name**'])
  File ""/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/pgcli/main.py"", line 28, in <module>
    from .pgexecute import PGExecute
  File ""/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 2, in <module>
    import psycopg2
  File ""/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/psycopg2/**init**.py"", line 50, in <module>
    from psycopg2._psycopg import BINARY, NUMBER, STRING, DATETIME, ROWID
ImportError: dlopen(/Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/psycopg2/_psycopg.so, 2): Symbol not found: _lo_lseek64
  Referenced from: /Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/psycopg2/_psycopg.so
  Expected in: /usr/lib/libpq.5.dylib
 in /Volumes/meta/virtualenvs/pgcli/lib/python2.7/site-packages/psycopg2/_psycopg.so

I got the same error when I installed pgcli with easy_install in a differeng virtualenv.
","ImportError on startup in psycopg2 dlopen 
It looks like the libpq installed on your OS X machine has some linking issues. This is related to psycopg2 installation which is required by pgcli to talk to Postgres database. There are a few possible workarounds covered in the articles below:

http://joshuakehn.com/2013/10/13/Postgresapp-and-psycopg2-on-OS-X.html
http://stackoverflow.com/a/21357519/8825

This is the same as #132 
",2015-02-09 19:20:02,2015-02-12 08:12:15
1048,149,"```
COPY table_name [ ( column_name [, ...] ) ]
    FROM { 'filename' | PROGRAM 'command' | STDIN }
    [ [ WITH ] ( option [, ...] ) ]

COPY { table_name [ ( column_name [, ...] ) ] | ( query ) }
    TO { 'filename' | PROGRAM 'command' | STDOUT }
    [ [ WITH ] ( option [, ...] ) ]

where option can be one of:

    FORMAT format_name
    OIDS [ boolean ]
    FREEZE [ boolean ]
    DELIMITER 'delimiter_character'
    NULL 'null_string'
    HEADER [ boolean ]
    QUOTE 'quote_character'
    ESCAPE 'escape_character'
    FORCE_QUOTE { ( column_name [, ...] ) | * }
    FORCE_NOT_NULL ( column_name [, ...] )
    ENCODING 'encoding_name'
```

see http://www.postgresql.org/docs/9.3/static/sql-copy.html
","requset support: COPY command WITH subcommand options auto-completion
Thank you! I'll look into adding more keywords for autocompletion. Is that what you're requesting or is there a more fundamental problem with the way the completion for COPY works? 

Keywords added to the completion list. 

Install from master using the following command, to try it out. 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```
",2015-02-09 11:59:19,2015-03-25 06:27:56
1049,148,"Hi there,

First great tool! Thank you for your effort :)

I installed the tool on my Linux VM (Ubuntu 12.04.5 LTS) and everything went well. I installed it with the dependencies mentioned in the detailed instructions. 

I can login to my PostgreSQL instance but every time I run a command in pgcli I received the following message: `There is no no-initXF option (""less --help"" for help)`
and nothing is returned except the ""Command Time"" and ""format Time"" output.

It seems a problem with Less pager. Google the problem but cannot find anything related to it.
Would you have any idea? The output of my `$less --version` is: `less 444`
","Having an error with less
That's interesting. I'm overriding the LESS env var to not clear the screen while inside the pgcli environment, I didn't think of the `--no-init` option. I've got a fix for that in the master. Would you mind trying it out? 

You can install it directly from the git repo as follows: 

```
pip uninstall pgcli         # This will uninstall the existing pgcli.
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Done it and it fixed the issue :)
Thanks!

0.15.4 released to PyPI. 
",2015-02-09 03:41:08,2015-02-09 06:17:21
1050,147,"Given the huge amount of data that one has to browse horizontally using pgcli, it would be a very big help being able to scroll (with cursor keys or similar) like in a window view
There is a few examples of CLI programs that allow viewport scrolling, one of this is vi, and also less can do it
An implementation idea, rather that having to actually recreate the scroll is to add a parameter to the query launcher so that the output would be shown inside a spawned process using an external less -S command.
","horizontal scrolling view of queries output
`pgcli` uses `less` already, so if you just type `-S`, followed by `Enter`, while the results are being shown through `less`, you get a wide display in which you can scroll horizontally using arrow keys (and any other way `less` supports).

great to know, lets close this then

Awesome! I had no idea you could do that with `less`. 

Thank you @wbolster. 
",2015-02-05 10:03:24,2015-02-27 18:57:14
1051,146,"see http://www.postgresql.org/docs/9.3/static/sql-copy.html
","requset support: COPY command auto-completion
Can you explain a little bit more? 

Would you like to see auto-completion support for the COPY command or is COPY command failing to run? 

requset support: <code>COPY</code> command auto-completion

I've added preliminary support for the COPY command in master. I say preliminary because when you type `COPY <tab>` it'll list all the schemas and tables, which is expected. But when you type `COPY table_name FROM <tab>`, it still displays the tables, which is not the expected behavior since it should be completing filenames. But that'll take some more work so I'm going to punt on that for a bit. :)

Would you mind trying it out? You can install directly from the git repo using the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

thanks.
",2015-02-03 11:45:01,2015-02-05 06:39:58
1052,145,"db> select \* FROM table
'ascii' codec can't decode byte 0xc3 in position 104: ordinal not in range(128)

it happens connecting to a us_ascii (non utf-8) encoded db
","query errors connecting to a non utf-8 db
Would you be able to give me an example to reproduce? I'm using psycopg2 for connecting to the postgres database and so far I've seen psycopg2 handle either utf-8 or ascii. So I don't understand how ascii encoding could be failing. 

Can you also send me the log files (they're located in ~/.pgcli.log). 

Thanks

sending you the logs for now...

> On 3 Feb 2015, at 17:34, Amjith Ramanujam notifications@github.com wrote:
> 
> Would you be able to give me an example to reproduce? I'm using psycopg2 for connecting to the postgres database and so far I've seen psycopg2 handle either utf-8 or ascii. So I don't understand how ascii encoding could be failing.
> 
> Can you also send me the log files (they're located in ~/.pgcli.log).
> 
> Thanks
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/amjith/pgcli/issues/145#issuecomment-72671025.

no zip files so here you are:

~ cat ~/.pgcli.log
2015-02-03 11:41:53,146 (33335/MainThread) pgcli.main ERROR - sql: u'select \* FROM annuncio400 limit 10', error: UnicodeDecodeError('ascii', 'TAVOLINO come da foto E 5 Spedisco con 9,00 dopo ricarica postepay o bonifico ritiro su Roma uscita del raccordo n\xc2\xb0 17 Torre Angela 1606@live.it                                                                                                                                                                                                                                 ', 114, 115, 'ordinal not in range(128)')
2015-02-03 11:41:53,147 (33335/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 106, in cli\n    res = pgexecute.run(document.text)\n  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 120, in run\n    return [(cur.fetchall(), headers, cur.statusmessage)]\nUnicodeDecodeError: \'ascii\' codec can\'t decode byte 0xc2 in position 114: ordinal not in range(128)\n'
2015-02-03 11:41:56,067 (33335/MainThread) pgcli.main ERROR - sql: u'select \* FROM annuncio400 limit 10', error: UnicodeDecodeError('ascii', 'TAVOLINO come da foto E 5 Spedisco con 9,00 dopo ricarica postepay o bonifico ritiro su Roma uscita del raccordo n\xc2\xb0 17 Torre Angela 1606@live.it                                                                                                                                                                                                                                 ', 114, 115, 'ordinal not in range(128)')
2015-02-03 11:41:56,068 (33335/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 106, in cli\n    res = pgexecute.run(document.text)\n  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 120, in run\n    return [(cur.fetchall(), headers, cur.statusmessage)]\nUnicodeDecodeError: \'ascii\' codec can\'t decode byte 0xc2 in position 114: ordinal not in range(128)\n'
2015-02-03 11:42:13,645 (33335/MainThread) pgcli.main ERROR - sql: u'select \* FROM annuncio limit 10', error: UnicodeDecodeError('ascii', ""MONTEVERDE Donna Olimpia adiac. Villa Pamphili ottimo punto comm.le locali C/1 vari tagli con possibilit\xc3\xa0 di canna fumaria e ampliamento di pi' vetrine a partire da E 650                                                                                                                                 "", 104, 105, 'ordinal not in range(128)')
2015-02-03 11:42:13,646 (33335/MainThread) pgcli.main ERROR - traceback: 'Traceback (most recent call last):\n  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/main.py"", line 106, in cli\n    res = pgexecute.run(document.text)\n  File ""/usr/local/Cellar/pgcli/0.10.2/libexec/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 120, in run\n    return [(cur.fetchall(), headers, cur.statusmessage)]\nUnicodeDecodeError: \'ascii\' codec can\'t decode byte 0xc3 in position 104: ordinal not in range(128)\n'
~

Thank you! 

I think it might be a table name with unicode characters. That is a case I have not tested yet. I'll give it a shot.

It is now fixed in master. 

You can install directly from github with the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Can you give it a shot and let me know? 

it works :)

> On 5 Feb 2015, at 08:00, Amjith Ramanujam notifications@github.com wrote:
> 
> It is now fixed in master.
> 
> You can install directly from github with the following command:
> 
> pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
> Can you give it a shot and let me know?
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/amjith/pgcli/issues/145#issuecomment-72998685.

Yay!! I'll release the new version this weekend. Thank you for testing it. 

it is now showing 

argument 2 to map() must support iteration

every time I hit enter without a command..

> On 5 Feb 2015, at 09:09, Amjith Ramanujam notifications@github.com wrote:
> 
> Yay!! I'll release the new version this weekend. Thank you for testing it.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/amjith/pgcli/issues/145#issuecomment-73003762.

Good catch. 

I forgot about that case. I've fixed it now. You should be able to run the pip install once more to install from the git repo and it should work as expected. 

yes!
even though it doesn’t harm I’d remove the 

> Command Time: 7.15255737305e-06
> Format Time: 5.96046447754e-06

when you don’t issue any command ...it only reminds you how imprecise the system clock is :)

> On 5 Feb 2015, at 09:41, Amjith Ramanujam notifications@github.com wrote:
> 
> Good catch.
> 
> I forgot about that case. I've fixed it now. You should be able to run the pip install once more to install from the git repo and it should work as expected.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/amjith/pgcli/issues/145#issuecomment-73006457.

You're right. I should be more clever about this sort of thing. :) 

you are doing a very nice job already.
PS: where could I contribute with a feature request? I was wondering that it would be very nice to have an horizontal scroll view for big tables full of columns.

> On 5 Feb 2015, at 10:37, Amjith Ramanujam notifications@github.com wrote:
> 
> You're right. I should be more clever about this sort of thing. :)
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/amjith/pgcli/issues/145#issuecomment-73011714.

The best place for feature requests is the Github Issues or you can drop in on the gitter chat channel (https://gitter.im/amjith/pgcli) to talk about it. 

Having a horizontal scroll would be impossible in a CLI. I'm not really sure how you could scroll horizontally in CLI. If you have thoughts, I'm eager to hear them. 

Pgcli does support the \x command which is equivalent to psql where the data is displayed in an expanded format. 

Eg:

```
misago_testforum> \x
Expanded display is on.

misago_testforum> SELECT * FROM django_migrations
-[ RECORD 0 ]-----------------------------
id      | 1
app     | misago_acl
name    | 0001_initial
applied | 2014-11-24 14:26:43.153977-08:00
-[ RECORD 1 ]-----------------------------
id      | 2
app     | contenttypes
name    | 0001_initial
applied | 2014-11-24 14:26:43.163630-08:00
```
",2015-02-03 09:50:50,2015-02-05 09:54:59
1053,144,"see #82
","make \dt and \dv use verbose and pattern arguments
Apart from the minor nitpick. PR looks great. 

Thank you!  :penguin: 

Sure thing. I also just realized that \di uses the same sql so that accepts verbose & pattern args now too

It's so nice when things come together like this. :)

Good work on spotting it. :snowman: 
",2015-02-01 14:08:26,2015-02-03 02:58:31
1054,143,"This is pgcli 0.13:

```
db> select boolean_column from table;
+----------------------+
|       boolean_column |
|----------------------|
|                    1 |
|                    0 |
|                    1 |
|                    0 |
```

psql reports them correctly:

```
db=> select boolean_column from table;
 boolean_column 
--------------------
 t
 f
 t
 f
```

That could mislead people believing that a column has an integer data type instead of a boolean.
","Booleans are displayed as 0 1 and not as false true 
Yes. This is a valid concern. I'll see if I can register a handler for booleans in psycopg2 to return them as strings. 

Fixed in master. 6e3da4c5b1d1369348dd333c8510f516ec76a5cf

Can you try the latest HEAD? You can install directly from master: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

It works, I get `False` and `True` now. That could be better (more clear) or worse (more verbose) than pgsql `f` and `t` but I'm not a large enough sample to judge.  
",2015-01-31 11:38:04,2015-02-01 09:17:39
1055,142,,"Fix #106 - autocompletion in multiple statements
Looks good. 

:melon: 
",2015-01-28 23:23:48,2015-01-29 18:24:53
1056,141,"postgresql is case-insensitive for table names (technically, downcasing all of them), so `DEC_00_SF3_QTP16` refers to the same table as `dec_00_sf3_qtp16`. 

For reasons that are fairly abstruse, I refer to my tables in my codebase in partial/all caps, e.g. `DEC_00_SF3_QTP16`, so in my head, that's the name of my table. However, in pgcli, when I try to autocomplete from `DEC`, I get nothing, and have to downcase what I've typed. Could you make the autocomplete be case-insensitive?

BTW: pgcli is awesome, thanks for your work! I'm very glad to have found this.
","postgres is case-insensitive for table names, but pgcli isn't
You serious? I thought you could have case-sensitive table names but you'd have to use double quotes to preserve the casing. 

Can you try SELECT \* FROM ""DEC<tab>  ? 

I believe that should work. 

Sorry, maybe I explained this poorly. The issue is with an inconsistency between postgres and pgcli's treatment of case in the context of pgcli's autocomplete behavior.

PG is case-insensitive -- it stores my table as `dec_...`, but lets me query it like `DEC_...`. pgcli won't autocomplete from `DEC_`. My expected behavior is that pgcli would let me autocomplete from `DEC_` (because postgres accepts queries case-insensitively).

Although maybe you're saying that this would break in the (relatively rare?) instance that someone had an actually upper-cased table name (using the double quote method you mention)?

Got it. 

Try the latest master. You can install from master using pip as follows:

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Fixed by c08d4a51e5540e7ada833bd4beb6ba2f4bdba37e

Tested and it works great! Thanks very much for your help. As I said before, great tool!

Thank you for checking it. I'm glad it works. I'll release the new version to PyPI this weekend. 
",2015-01-28 21:11:28,2015-01-29 22:11:25
1057,140,"Right now pgcli won't work in pypy because psycopg2 won't install for pypy. But there is psycopg2cffi for pypy. 
","Add support for pypy
It also works for PyPy 3 FYI.

An alternative is to use pg8000. Is there a really hard dependency on psycopg2?

@veegee That's interesting. I didn't know of it's existence. There is no hard dependency but I'd like the library to handle unicode stuff correctly. I'll check it out. Thank you!

Pyscopg2cffi is a good library and you'll use it anyway if you're using PyPy.

AFAIK both psycopg2cffi and psycopg2ct are drop-in PyPy-compaible replacements for psycopg2.

This is how txpostgres handles it: https://github.com/wulczer/txpostgres/blob/master/txpostgres/psycopg2_impl.py

@wulczer Thank you for the reference implementation. That looks useful.

The piece that confuses me, is how to list the necessary dependency for it in setup.py based on the interpreter. Because I need to choose psycopg2 for CPython and psycopg2cffi for PyPy at installation time.

Maybe psycopg2cffi just work in both CPython and PyPy and I can include that as the dependency instead of psycopg2. 

I have not tried that. 

@amjith cffi is slower on CPython.

@thedrow I just tried it out locally. It doesn't seem noticeably slower. Since this is a CLI, I think the speed difference will be negligible. It's not like people going to expect high throughput because the number of queries executed will be limited by how fast you can type them in. 

Unless it is significantly slower for some use cases that I haven't tried yet. 

I haven't tried every possible usecase but that's a rule of thumb.
Also note that psycopg2cffi is a few patch versions behind.

I tried using psycopg2cffi but it breaks on unicode. I've filed a bug https://github.com/chtd/psycopg2cffi/issues/32. 

Waiting to hear back. 

What's the current status of the issue? Is there any patch that I could test and work on?

This is in the back burner now. I'm not really interested in making this a priority since psycopg2cffi isn't quite as stable as psycopg2. 

Without that it is not possible to add pypy support. 

Is there a specific reason you're interested in getting this working in PyPy? 

I'm interested in testing pgcli on a billion-row-scale database and I'm a bit worried about the performance.

I doubt that you'll get significant boost from using PyPy. Because most of the time is spent in I/O which PyPy won't be of help.

Since psycopg2 is C-extension you'll get the same performance characteristic between CPython and PyPy. 

+1 on this, we run nothing but PyPy (and have been running psycopg2cffi in prod directly for awhile with no issue) so would be great to be able to use pgcli.",2015-01-27 07:28:01,2019-10-17 04:10:55
1058,139,"Django has a helper method to launch the respective database client using the django-admin.py dbshell.

Right now it defaults to psql for postgres, it'll be nice to use pgcli if it is installed and then fall back to psql. 

https://github.com/django/django/blob/master/django/db/backends/postgresql_psycopg2/client.py
","Make pgcli the default for django's dbshell command. 
Yes please!

You could just write a management command: although that would require installing an app in your `settings.INSTALLED_APPS`.

https://github.com/ashchristopher/django-pgcli

Created by a friend. :)

Thanks @ashchristopher. 
",2015-01-25 06:36:51,2015-04-26 06:08:06
1059,138,"In windows,when I entered the sql,then press enter key,but there is no response in command line.
","in windows there is no response when entered sql
I believe that's [this issue](jonathanslenders/python-prompt-toolkit#86) which is happening in python-prompt-toolkit on windows in python 2.7. If it is, you can press control+enter instead.

Issue: https://github.com/jonathanslenders/python-prompt-toolkit/issues/86

Fixing the link in the Darik's comment. 

my python version is 3.4.
If I press ctrl+enter ,It will produces errors like this.
![error](https://cloud.githubusercontent.com/assets/1825425/5914394/ee136b40-a62f-11e4-9861-0f30a59400c0.png)

@yukungis  Can you try the latest version? It has a new upgraded version of prompt_toolkit. 

You can upgrade using: 

```
pip install -U pgcli
```

Feel free to reopen if the issue still persists. 
",2015-01-24 06:17:43,2015-11-26 12:25:01
1060,137,"I've been slowly working on a pgcli autocompletion plugin for Sublime Text 3, and found myself importing and copy/pasting a little more than I'd like. This PR simply moves pgcompleter construction to PGCli.**init**, and adds a convenience method PGCli.get_completions(text, cursor_position) which delegates to self.completer.get_completions.
","Minor PGCli API improvements
:+1: 
",2015-01-24 03:22:03,2015-01-24 05:08:00
1061,136,,"Add Vi Keybindings
Now available in master. Thanks @jayzeng.
",2015-01-23 20:58:36,2015-02-13 02:27:15
1062,135,"Hi,

the homebrew formula contains postgresql as a dependency. I don't think this is optimal since people who want to use pgcli will propably already have a postgres instance up and running, but it must not necessarily be the homebrew variant. Fixing this issue will be trivial but it should be coordinated with the person who contributed the formula.
","homebrew formula should not include postgresql as a dependency
I'm actually on the fence on this one. 

I asked the same question in the original issue #73 for the homebrew formula. But without that dependency the formula won't succeed in a sandboxed environment. If it doesn't succeed in the sandboxed env, then the formula is not accepted. 

So that dependency became mandatory. There is an alternative to that which is brew installing from source `brew install --build-from-source`, which will skip installing postgres if it is available in the $PATH.

I'll highlight that in the README. 

I've updated the README (897934711872ecfa5cd66e967f1dc1d045464adc) and the website (https://github.com/amjith/pgcli.com/commit/37d37d4e150af8174e147ac5afb92c51bc943fe6). 

I see the problem ... sorry I only looked through the open issues. 
This issue can be closed and marked as a dupe. Maybe it could be discussed later (when the source code is more stable) if building from source, and not having the dependency, is preferable.
",2015-01-22 23:47:30,2015-01-23 14:59:04
1063,134,"It seems, that multibyte characters are not supported at all. 

The following example uses Japanese characters:

With PSQL:

```
testdb=# SELECT '日本語' AS japanese;
 japanese 
----------
 日本語
(1 row)
```

With PGCLI:

```
testdb> SELECT '日本語' AS japanese;
'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
```

You will receive the same error for every query, that has to deal with a table containing multibyte characters.
","Cannot handle multibyte characters (ie. Japanese)
Confirmed that this is a bug. I'll have to drill down and find out where that error is coming from (possibly in psycopg2). 

Sorry about the trouble. I'll see if I can fix it soon. 

Thank you for reporting. 

This works correctly in Python 3. I think I just need to wrap the inputs in unicode and it should work. 

I did some testing and found out that this is an inconsistency in `psycopg2`. I've filed a bug with `psycopg2` (https://github.com/psycopg/psycopg2/issues/282). 

But this bug doesn't affect the sql statments that return unicode values that are stored in the database. 

For ex: 

```
misago_testforum> insert into abc values ('日本語', '日本語')
INSERT 0 1
misago_testforum> select * FROM abc;
+-----+-----+
| a   | b   |
|-----+-----|
| 日本語 | 日本語 |
+-----+-----+
SELECT 2
```

So if multi-byte char values are stored in the database and we retrieve them, then they are rendered correctly. But it fails to render correctly when we do a no op such as 

```
misago_testforum> SELECT '日本語' AS japanese;
'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
```

Thank you for looking at this!

My initial test was with a table that contained Japanese characters, so if that works now, that's great!
The sample query I posted was just an easy way to reproduce it without a table.

I can help to test, if it's working, but can I just install the latest version with `pip install pgcli`?

It seems that this is a postgresql feature. Not a bug.

@dkastl I haven't released the latest version to PyPI. 

You can install pgcli directly from this git repo using the following command: 

```
pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli
```

Can you please try that and let me know if that fixes your issue? 

Thanks!

@amjith Thank you! It worked now as you said, when I select from an actual table.

So for ""normal"" tables it works, but for tables with an `hstore` column inside, which again contains Japanese, the error seems to remain.

Well, this is now a not so common use case, and it was just a coincidence, that I tested it with a table, that uses `hstore`, so this probably affects only very few people.

But for completeness, here the SQL to reproduce it:

```
CREATE EXTENSION hstore;

CREATE TABLE test (
    id serial PRIMARY KEY,
    name varchar,
    attributes hstore
);

INSERT INTO test (id, name, attributes) VALUES 
    (1, 'Alphabet', 'key => ""alphabet""'), 
    (2, '日本語',   'key => ""alphabet""'),
    (3, '日本語',   'key => ""日本語""')
;
```

Then the query for id 1 and 2 work, the query for id 3 fails:

```
testdb> SELECT * FROM test WHERE id != 3;
+------+----------+-------------------+
|   id | name     | attributes        |
|------+----------+-------------------|
|    1 | Alphabet | ""key""=>""alphabet"" |
|    2 | 日本語      | ""key""=>""alphabet"" |
+------+----------+-------------------+
SELECT 2

testdb> SELECT * FROM test WHERE id = 3;
'ascii' codec can't decode byte 0xe6 in position 8: ordinal not in range(128)

```

Using psql console works for all cases.

I'm not too familiar with the hstore. I know it's the no-sql feature of postgres. Does it mean that the 'attribute' column won't have a datatype (such as varchar?). 

Because the author of psycopg2 shed some light on why the simple case of `SELECT '日本語' AS japanese;` didn't work. It's because postgres returns the type as 'unknown'. 

I'll have to check what is the type returned by hstore. I'll see how to handle this properly.

Thanks for the detailed test case. I appreciate it very much. :)

Well, I just use `hstore` sometimes because it's convenient for certain use cases, but I don't know about details. When you look at the `hstore` documentation, then there are various ways to return the hstore content using functions, for example `svals(attributes)` and then it works correctly.

```
> SELECT svals(attributes) FROM test WHERE id = 3;
+---------+
| svals   |
|---------|
| 日本語     |
+---------+
```

The following query actually works, if you cast as `text`:

```
testdb> SELECT '日本語'::text AS japanese;
+------------+
| japanese   |
|------------|
| 日本語        |
+------------+
```

So the explanation makes sense and it seems to be a problem of unknown datatype.

If you cast the hstore column as `text` it also works:

```
> SELECT attributes::text FROM test WHERE id = 3;
+--------------+
| attributes   |
|--------------|
| ""key""=>""日本語"" |
+--------------+
```

Would it make sense to cast any `unknown` datatype as text to get rid of the error?

I've fixed it temporarily by adding a unicode type-caster for hstore. But I've also requested psycopg2 author to default to unicode instead of utf-8 string. Can you try installing the code from master and try again? 

```
pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli
```

Thanks!

Thanks!
Could you tell me, how I can make sure, to pull the most recent version?
I think just running `pip install` didn't update.

```
$ sudo pip uninstall pgcli
Can't uninstall 'pgcli'. No files were found to uninstall.
```

The way I uninstalled it before didn't work.
So I just run again 

```
sudo pip install -e git+https://github.com/amjith/pgcli.git#egg=pgcli
Obtaining pgcli from git+https://github.com/amjith/pgcli.git#egg=pgcli
  Updating ./src/pgcli clone
  Running setup.py (path:/home/daniel/src/pgcli/setup.py) egg_info for package pgcli

  Installing extra requirements: 'egg'
Requirement already satisfied (use --upgrade to upgrade): click>=3.2 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): Pygments>=2.0 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): jedi==0.8.1 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): prompt-toolkit==0.26 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): psycopg2>=2.5.4 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): sqlparse>=0.1.14 in /usr/local/lib/python2.7/dist-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): docopt in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.26->pgcli)
Requirement already satisfied (use --upgrade to upgrade): six>=1.8.0 in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.26->pgcli)
Requirement already satisfied (use --upgrade to upgrade): wcwidth in /usr/local/lib/python2.7/dist-packages (from prompt-toolkit==0.26->pgcli)
Installing collected packages: pgcli
  Running setup.py develop for pgcli

    Creating /usr/local/lib/python2.7/dist-packages/pgcli.egg-link (link to .)
    pgcli 0.13.0 is already the active version in easy-install.pth
    Installing pgcli script to /usr/local/bin

    Installed /home/daniel/src/pgcli
Successfully installed pgcli
Cleaning up...
```

... but it seems it didn't update or it still doesn't work to run `SELECT * FROM test WHERE id = 3;`.

I think you might need a `-U` option to make sure it is upgraded. 

```
sudo pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Hmm, did not work after upgrading (which required the flag `--force-reinstall` to upgrade).
But let's see if psycopg2 can provide a solution for this. I don't think hstore support is a blocking issue.

I've reopened the issue. 

This is what I did to test the hstore issue after the fix.

```
misago_testforum> \d test
+-----------+-------------------+---------------------------------------------------+
| Column    | Type              | Modifiers                                         |
|-----------+-------------------+---------------------------------------------------|
| id        | integer           | not null default nextval('test_id_seq'::regclass) |
| name      | character varying |                                                   |
| attribute | hstore            |                                                   |
+-----------+-------------------+---------------------------------------------------+
Indexes:
    ""test_pkey"" PRIMARY KEY, btree (id)

misago_testforum> SELECT * FROM test
+------+----------+-------------------+
|   id | name     | attribute         |
|------+----------+-------------------|
|    1 | Alphabet | ""key""=>""alphabet"" |
|    2 | 日本語      | ""key""=>""alphabet"" |
|    3 | 日本語      | ""key""=>""日本語""      |
+------+----------+-------------------+
SELECT 3
misago_testforum>
```

Can you tell me what's the structure of the table you're trying this on? 

It's exactly the same example you're using as described in a previous comment. 
Maybe I'm just not able to upgrade using the Git repository.
So if it works for you, I would close the ticket.

I'll try and release the new version soon. I'm waiting to merge in a big pull request that adds schema support. Otherwise I'd release it today. Sorry about the wait. 

No problem at all. I was just interested trying out pgcli. The schema support is even more important for me. Thanks a lot for your work!

I don't know if this is relevant or not, but pressing any key in Persian layout, crash pgcli , Can not even type a single persian character.  

```
postgres> Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.13.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/home/develop/src/pgcli/pgcli/main.py"", line 327, in cli                                                                                 
    pgcli.run_cli()
  File ""/home/develop/src/pgcli/pgcli/main.py"", line 179, in run_cli
    document = cli.read_input(on_exit=AbortAction.RAISE_EXCEPTION)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 251, in read_input
    next(g)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 348, in _read_input
    self._redraw()
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 191, in _redraw
    self.renderer.render(self)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/renderer.py"", line 469, in render
    output.flush()
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/terminal/vt100_output.py"", line 150, in flush
    self.stdout.write(data)
UnicodeEncodeError: 'ascii' codec can't encode character u'\u063a' in position 4: ordinal not in range(128)
```

Using the current master 27a363ee06d8c3e2faadeebf3031a3f1c71b46ad in a Debian 7 (whezy) in a docker container.

It looks like the error might be coming from prompt_toolkit library. 

Since you have prompt_toolkit installed (as part of the dependency), can you try launching `ptpython`. It's a python repl that comes bundled with prompt_toolkit. If you get the same problem with ptpython, I'll at least know it's contained within the prompt_toolkit lib. 

Yes. I think its prompt_toolkit 

```
In [2]: Traceback (most recent call last):
  File ""/usr/local/bin/ptpython"", line 9, in <module>
    load_entry_point('prompt-toolkit==0.26', 'console_scripts', 'ptpython')()
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/contrib/entry_points/ptpython.py"", line 77, in run
    startup_paths=startup_paths, always_multiline=always_multiline)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/contrib/repl.py"", line 189, in embed
    cli.start_repl(startup_paths=startup_paths)ode (off) [F7] Multiline (off) - CPython 2.7.3                                                    
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/contrib/repl.py"", line 48, in start_repl
    on_exit=AbortAction.RAISE_EXCEPTION)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 251, in read_input
    next(g)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 348, in _read_input
    self._redraw()
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 191, in _redraw
    self.renderer.render(self)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/renderer.py"", line 469, in render
    output.flush()
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/terminal/vt100_output.py"", line 150, in flush
    self.stdout.write(data)
UnicodeEncodeError: 'ascii' codec can't encode character u'\u0635' in position 22: ordinal not in range(128)
```

Do I need to report it some where else?

This is prompt-toolkit's github issues page: https://github.com/jonathanslenders/python-prompt-toolkit/issues

I'd file it myself, but without the ability to reproduce it, I'm not sure I can provide enough details. 

@dkastl Previously when I fixed the unicode issue with hstore, I didn't fix it the right way. That's why you weren't able to get it to work. I was basically hardcoding the oid for hstore which is wrong. Because the oid for hstore will be different for each database. 

I have now fixed the issue (the right way) and released a new version (0.16.1) to PyPI. If you do a `pip install -U pgcli` it should get you the new version with the fix. 

Sorry about the wrong fix. :(

@amjith Thanks a lot!
It seems to work.
",2015-01-22 13:19:10,2015-01-26 08:19:57
1064,133,"In the current version of pgcli, `bytea` fields trigger Unicode decode errors when queried:

```
_test_db> CREATE TABLE binarydata(c bytea) 
CREATE TABLE
_test_db> INSERT INTO binarydata VALUES (decode('DEADBEEF', 'hex'))
INSERT 0 1
_test_db> SELECT * FROM binarydata
'ascii' codec can't decode byte 0xde in position 0: ordinal not in range(128)
_test_db> 
```

Casting the field to a string for display allows tables with `bytea` fields to be queried as expected. This pull request adds a type converter to have psycopg2 automatically perform the conversion on all `bytea` fields:

```
_test_db> SELECT * FROM binarydata
+------------+
| c          |
|------------|
| \xdeadbeef |
+------------+
SELECT 1
_test_db> 
```
","Cast bytea fields to text for output.
Awesome! Thank you for the PR. 

:tulip: 
",2015-01-22 04:03:40,2015-01-22 05:33:48
1065,132,"I get this error:

```
> pgcli
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.13.0', 'console_scripts', 'pgcli')()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 357, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 2394, in load_entry_point
    return ep.load()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 2108, in load
    entry = __import__(self.module_name, globals(),globals(), ['__name__'])
  File ""/Library/Python/2.7/site-packages/pgcli/main.py"", line 24, in <module>
    from .pgexecute import PGExecute
  File ""/Library/Python/2.7/site-packages/pgcli/pgexecute.py"", line 2, in <module>
    import psycopg2
  File ""/Library/Python/2.7/site-packages/psycopg2/__init__.py"", line 50, in <module>
    from psycopg2._psycopg import BINARY, NUMBER, STRING, DATETIME, ROWID
ImportError: dlopen(/Library/Python/2.7/site-packages/psycopg2/_psycopg.so, 2): Library not loaded: @loader_path/../lib/libssl.1.0.0.dylib
  Referenced from: /Library/Python/2.7/site-packages/psycopg2/_psycopg.so
  Reason: image not found
```
","Crash: image not found
Sorry about the crash. 

It looks like psycopg2 is having trouble loading. 

Do you have postgres installed on the machine you're trying to run this? 

Can you launch the python interpreter and try importing psycopg2? 

```
$ python
>>> import psycopg2
```

If that doesn't succeed then you probably don't have psycopg2 installed correctly. I'd recommend installing postgres first and then trying a `pip install psycopg2`. 

Alternatively, if you're okay with a slightly older version of pgcli you can install it via brew. 

```
brew install pgcli
```

It looks like the libpq installed on your OS X machine has some linking issues. This is related to psycopg2 installation which is required by pgcli to talk to Postgres database. There are a few possible workarounds covered in the articles below:

http://joshuakehn.com/2013/10/13/Postgresapp-and-psycopg2-on-OS-X.html
http://stackoverflow.com/a/21357519/8825

Were you able to get this resolved?

I'm closing this issue as I haven't heard back in a while. If you have more trouble feel free to reopen. 

I'm having this problem, in my case it's definitely related to libssl.1.0.0.dylib, but following these directions just made my problem worse since now my /usr/lib version of libssl is broken. 

I don't understand what's happening b/c anaconda has its own pointer to openssl, and that seemed to work fine for other things, but psycopg2 doesn't seem to be able to find it even though it's right there in the same virtualenv. Now I have to figure out how to fix what I just broke. :-1: 

@szeitlin Sorry about the crash. Can you tell me what OS you're using and how you're installing pgcli? 

Do you have postgres on the machine? What is the error message you're getting? 

If you're on OS X, can you try installing it via brew? 

well, the good news is, pgcli installed just fine and python seems to be able to find psycopg2 just fine! 

unfortunately, django is confused (which is why I wanted to install postgres in the first place). 

I've run into problems with this before - I think anaconda and brew don't play together quite as well as they should, at least for some things (and libssl seems to be one of those).  
",2015-01-21 14:29:02,2015-05-26 17:09:07
1066,131,"Many people have set their terminal colour scheme to something like Solarized. By using 256 colours, you're ignoring the custom ANSI colours that have been set, and text becomes hard to read. It is always best to stick to ANSI 16-colour mode.
","Use ANSI terminal colours instead of 256 colour mode
Hrm. This might be harder to do, since I rely on prompt_toolkit library to handle all of that for me. But I'll check if there is an easy way to detect and set the color mode accordingly. 

If changing the color mode is difficult, would it be possible to add a setting in the .pgclirc file to disable syntax highlighting? I'm using Solarized in iTerm2 on a Mac and certain characters in my queries disappear against the background color.

@tonymcdaniel Yes. I'll add that feature. It's on my todo list to make the colorschemes selectable from the config file, I'll also add an option to turn it off completely.

Ok. I've added the ability to pick a different color scheme via the ~/.pgclirc config file to master. 

You can install directly from master using the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Then add this line to your config file (~/.pgclirc)

```
syntax_style = native
```

All the built-in pygments styles are available to choose: 

```
# manni, igor, xcode, vim, autumn, vs, rrt, 
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark, 
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
```

I still have to figure out how to completely turn off all coloring. 

If you can try it out and give me some feedback whether it's satisfactory, I'd appreciate it. 

I think there should be a way to define your own colours for all UI elements. That might solve the issue.

Version 0.15.4 released to PyPI. 
",2015-01-20 20:27:27,2015-02-09 06:17:55
1067,130,"""LIMIT"" doesn't seem to be autocompleting, or even showing up in the popup menu.
","Autocomplete ""LIMIT"" keyword
Yeah, I missed that keyword in the original list. It is now fixed in master. It'll be available in the next release (probably this weekend). 

This is now added to master. If you have time please try out the latest from master. Thanks!

```
pip install -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Version 0.14.0 released to PyPI. 

```
pip install -U pgcli
```
",2015-01-20 20:18:46,2015-01-31 23:53:57
1068,129,"Added a section about meta-commands to developer documentation.
ON keyword now suggests tables and aliases on the right side of equal sign also.
","Documentation and an addition to smart completion for ON keyword.
Thank you for adding more docs. :headphones: 

I like the new addition to the completion. :+1: 
",2015-01-19 23:28:25,2015-01-20 06:35:41
1069,128,"### amjith/pgcli now has a Chat Room on Gitter

@amjith has just created a chat room. You can visit it here: [https://gitter.im/amjith/pgcli](https://gitter.im/amjith/pgcli?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/amjith/pgcli?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",Add a Gitter chat badge to README.md,2015-01-19 19:29:19,2015-01-31 01:50:10
1070,127,"This PR would fix #22, and also I think #39 as a side-effect

Issues:
- I used pandas DataFrames for working with database metadata -- I found them a lot more flexible than a pure standard lib dict/list based approach. But I'm not sure how you'd feel about adding pandas as a requirement.
- We don't have any tests for ""DoubleQuoted"" identifiers -- I'm not confident I didn't break that.
","Make autocomplete schema-aware
Taking a look now. It might take me a while to fully review. 

I'm a bit hesitant to add Pandas as a requirement since it's not quite straight-forward to install. But if it really does make it easy to do certain things, then I'm open to adding it. 

I've been meaning to learn Pandas for a while now, this will be a great opportunity. :)

I'm really sorry about that. Right now I only know how to squash commits in
git, I haven't figured out how to split them apart yet, haha. Mostly I
wanted to find out what you thought about the overall approach before I
spent too much more time on it. What I should've had as the first commit
was refactoring packages.sqlcompletion.suggest_type to return an array of
suggestion objects (right now they're just dicts, but they could be
namedtuples or actual custom classes or whatever) instead of the type as a
string like 'columns-and-functions'  or whatever, since that doesn't scale
too well as the number of different possibilities expands.

I'm totally cool with not merging right away, since I think this would
provide the foundation for more complicated autocompletion (CTEs, user
defined functions (especially set-returning functions, which can act as
tables), arbitrary-depth-nested composite types...) so we might as well get
it right.

I also totally understand your hesitations regarding pandas (even if we
don't end up using it, you should still learn it, it's awesome!) it's
totally feasible to rewrite in a more straightforward way -- it just saved
me some time in development.

On Sun, Jan 18, 2015 at 6:19 PM, Amjith Ramanujam notifications@github.com
wrote:

> Taking a look now. It might take me a while to fully review.
> 
> I'm a bit hesitant to add Pandas as a requirement since it's not quite
> straight-forward to install. But if it really does make it easy to do
> certain things, then I'm open to adding it.
> 
> I've been meaning to learn Pandas for a while now, this will be a great
> opportunity. :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/127#issuecomment-70431614.

No worries!!

I like the refactoring done to suggest_type method.

I'm pulling down your repo to play around a little. I might send PRs to
your repo to make some corrections. Then we can finally merge it back into
mainline.

On Sun Jan 18 2015 at 3:59:40 PM darikg notifications@github.com wrote:

> I'm really sorry about that. Right now I only know how to squash commits
> in
> git, I haven't figured out how to split them apart yet, haha. Mostly I
> wanted to find out what you thought about the overall approach before I
> spent too much more time on it. What I should've had as the first commit
> was refactoring packages.sqlcompletion.suggest_type to return an array of
> suggestion objects (right now they're just dicts, but they could be
> namedtuples or actual custom classes or whatever) instead of the type as a
> string like 'columns-and-functions' or whatever, since that doesn't scale
> too well as the number of different possibilities expands.
> 
> I'm totally cool with not merging right away, since I think this would
> provide the foundation for more complicated autocompletion (CTEs, user
> defined functions (especially set-returning functions, which can act as
> tables), arbitrary-depth-nested composite types...) so we might as well
> get
> it right.
> 
> I also totally understand your hesitations regarding pandas (even if we
> don't end up using it, you should still learn it, it's awesome!) it's
> totally feasible to rewrite in a more straightforward way -- it just saved
> me some time in development.
> 
> On Sun, Jan 18, 2015 at 6:19 PM, Amjith Ramanujam <
> notifications@github.com>
> wrote:
> 
> > Taking a look now. It might take me a while to fully review.
> > 
> > I'm a bit hesitant to add Pandas as a requirement since it's not quite
> > straight-forward to install. But if it really does make it easy to do
> > certain things, then I'm open to adding it.
> > 
> > I've been meaning to learn Pandas for a while now, this will be a great
> > opportunity. :)
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/amjith/pgcli/pull/127#issuecomment-70431614.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/127#issuecomment-70433123.

@darikg You're right about the auto-escaped tables and columns being broken. 

I've added new tests to the master branch to properly test the auto-escaped identifiers.

I also pulled in your PR into a branch in the mainline. https://github.com/amjith/pgcli/tree/darikg/schema-completion and merged it in with the master. 

The tests are failing. 

My attempts to fix them have been unsuccessful because of my inexperience with pandas. But I've narrowed it down to this line. https://github.com/amjith/pgcli/blob/darikg/schema-completion/pgcli/pgcompleter.py#L94

I think your intention is to apply the escaping to all the relevant values in the DataFrame, but it doesn't apply the transformation in place, it actually applies the transformation and returns the transformed copy. 

So I tried changing it to this: 

```
      # data is a DataFrame with columns [schema, table, is_visible]
        tmp = data[['schema', 'table']].apply(self.escaped_names)
        self.tables = self.tables.append(tmp)
```

But that didn't work because we want `tmp` to have the `is_visible` col but that's not present in the transformed `tmp` var. 

I'm also confused by how the `apply()` method works. Because I would have expected it to work with `apply(self.escape_name)` but that gives an error. 

I might start updating that branch https://github.com/amjith/pgcli/tree/darikg/schema-completion with a non-pandas version of the change you've made, if you don't mind. 

Thanks for the auto-escaped identifiers tests, they made it a lot easier to find all my mistakes (there were a lot). 

You're right about DataFrame.apply operating in-place, so it should be
`data[['schema', 'table']] = data[['schema', 'table']].apply(self.escaped_names)`

Looks like the tests are passing in python 2, but failing in 3 because of the dict-sorting in the test files. I'll have to figure out a better way to do that. I should probably write a lot more schema-autocompletion tests in general too -- I assume there's a whole bunch of weird edge cases

@darikg Thanks for fixing that. I'll take a look at the failing Py3 tests. 

I'll dig into this a little more tonight. It's been fun seeing how simplified the code can be when pandas is used. But I'm still not sure why `apply()` didn't take `self.escape_name` as an arg. 

Also if you have any docs for quick start on Pandas, I'd appreciate some pointers. :)

In a DataFrame, each column is a Series object, and DataFrame.apply(func)
calls func on each Series in turn. Series are duck-typed like lists, so you
need basically func to accept a list-like object. You can do
DataFrame.applymap() instead, which applies func on individual elements in
the frame.

The pandas docs are actually really good. Also the guy who wrote pandas has
a book (python for data analysis) with a bunch of chapters on pandas.

On Mon, Jan 19, 2015 at 4:19 PM, Amjith Ramanujam notifications@github.com
wrote:

> @darikg https://github.com/darikg Thanks for fixing that. I'll take a
> look at the failing Py3 tests.
> 
> I'll dig into this a little more tonight. It's been fun seeing how
> simplified the code can be when pandas is used. But I'm still not sure why
> apply() didn't take self.escape_name as an arg.
> 
> Also if you have any docs for quick start on Pandas, I'd appreciate some
> pointers. :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/127#issuecomment-70562712.

I tried it out last night. It works well. 

I did run into one issue. When you type:

```
SELECT * FROM django_migration WHERE <tab>
```

The column names are listed twice. I was debugging it for a while and I think it's coming from `populate_scoped_cols()` when you do an inner join merge, I haven't confirmed it yet. 

But the weird thing is, I can't reproduce it in the unit-tests. At first I thought I couldn't reproduce it in tests because the tests call `set()` on the list of suggestions which removes duplicates, but even if I replaced the set() with list() it still doesn't trigger that behavior in tests. Which makes it harder to debug. 

I've been adding a ton of _logger.debug() statements to debug this  (caveman-style) while running the repl. 

Wow, nice find. I was able to replicate something like that by creating two identical tables, one in the public schema and one inside another (non-visible) schema. Then get_scoped_cols was ultimately combining rows from unqualed_tables and columns dataframes and on just the table column, instead of schema and table. So two different tables of the same name ended up contributing columns to the suggestion list. I just pushed a commit that should fix that. Is this the case in your database by any chance?

I was going to add a test for this issue as well, but I was thinking, does it make sense to make the mock database structure in test_smart_completion more and more complicated, or should it be split up into a simple mock database with only a public schema, and then a separate set of tests for a more complicated db design?

Nope. That wasn't it. 

It was actually this line: 

```
return list(qualed['column']) + list(unqualed['column'])
```

Screenshot: 

![screen shot 2015-01-20 at 10 34 29 pm](https://cloud.githubusercontent.com/assets/49260/5832106/bb8cc88c-a0f4-11e4-9da9-03201aa9b5cd.png)

It's picking the columns from a qualed table `public.django_migrations` and an unqualed table `django_migrations` and appending them together and returning it. 

But both of them are the same table so the columns appear twice. 

I think the simple solution is make those lists into sets an do a union operation. That will get rid of duplicates, but that's really treating the symptoms. The root cause fix would be excluding the qual table name from the unqualed table name list. 

BTW, I'm totally fine with separating the more complicated tests to a different file. 

Hmm... if the table in the query isn't qualifed, then the corresponding value of `scoped_tbls['schema']` should be null, and `django_migrations` shouldn't show up in `qualed` (because of the missing inner join condition on `schema`. Right?

Anyway, I was thinking about how to do this without pandas, and I think I would define namedtuples `Table('schema_name', 'table_name', 'is_visible')` and `Column('schema_name', 'table_name', 'column_name')' and store the database metadata as lists of namedtuples instead of dataframes. 

I think I should also have `suggest_type` return tuples of namedtuple suggestion types, instead of my current dict-based approach. Doing everything with tuples would make everything immutable, so I could get rid of my stupid assert_equals kludge in the tests, and the tests would then start passing again in python 3.

What do you think? 

> Hmm... if the table in the query isn't qualifed, then the corresponding value of scoped_tbls['schema'] should be null, and django_migrations shouldn't show up in qualed (because of the missing inner join condition on schema. Right?

It doesn't happen on an unqualed table name, only on qualed table name and the schema has to be 'public' and the table needs to be visible. 

So try this: 

```
SELECT * FROM public.users WHERE 
```

The table 'users' has to be visible and it should be qualed with a schema name. 

I have some thoughts on the panda-less implementation. I'll write up my thoughts later tonight. 

About the data-structures to use in place of Panda.

I don't think using a namedtuple for Tables and Columns is going to work for a couple of reasons. 

Having `Table(schema, table_name, is_visible)` will result in a lot of duplication of data. For eg: All the tables in `public` schema will have ('public', 'table1', True), ('public', 'table2', True), ('public', 'table3', True) etc. Where the schema and is_visible columns are redundant. When you have to lookup all the tables in the 'custom' schema, you have to iterate over a list of namedtuples to filter them by the schema column that matches 'custom'. 

So here's my proposal. 

The `parseutils.extract_tables()` should return a tuple (or a namedtuple) with (schema, table, alias). 
- 'schemata' should be a list of schemas.
- 'schema_tables' should be a dictionary with schema as key and a list of table names in the schema. eg: {'public' : ['table1', 'table2'], 'custom' :['table1', 'table2']}
- 'visible_tables' should be a `set()` of all the visible table names from schemas. This is used for unqaled completion. If we don't have this, then we would have to iterate through the schema_tables dictionary to gather all the values and build a set of all the table name on the fly (which is inefficient). 
- 'columns' should be a dictionary with keys as 'tables' and values as a list of column names that are in that table. 

What do you think?

Good call on setting up the metadata storage for finding stuff more efficiently.

> 'columns' should be a dictionary with keys as 'tables' and values as a list of column names that are in that table.

What about when two tables in different schemas have the same name? I guess we could have two (redundant) dictionaries, one indexed by 'table' for unqualed references, and another indexed by the tuple ('schema', 'table') for qualified references?

Yes. There are two structures with tables in them. One is `schema_tables` for qualified references and the other is `visible_tables` which is just a set() of all tables from all the schemas without a qualified reference. 

So when someone types `SELECT * FROM custom.u`, we can look up all the tables in the schema named `custom` from the `schema_tables` dictionary and find the tables that start with 'u'. Or if the user types `SELECT * FROM u` without a schema name, we'll look up all the tables that start with 'u' in the `visible_tables` + all the `schemas`. 

I'm not sure if I'm making this clear.

If you're constrained for time or have other priorities, let me know and I can build on top of the work you've done. I have touched it so far (apart from testing it locally) because I didn't want to duplicate any work you might have done. 

BTW, thank you for talking through the design with me. It's been very helpful. :)

I'm thinking of a case like this:

```
> CREATE SCHEMA s1;
> CREATE TABLE s1.tbl (a INT, b INT);
> CREATE SCHEMA s2;
> CREATE TABLE s2.tbl (c INT, d INT);
> SELECT <autocomplete> FROM s1.tbl;
```

Now, you need to look up the columns so you can suggest (a, b) and not (c, d). There's a `columns` dictionary, but how is it indexed? It can't just be `columns['tbl']`, but needs to be something like `columns[('s1', 'tbl')]`... right?

Oh good catch. 

Here's my current thinking. Instead of having multiple data-structures for schemas, tables and columns we have one data-structure. Let's call it `metadata`. 

`metadata` is a nested dictionary like this:

```
{'schema': {'table': [columns,....] } }
```

We always maintain a state called default schema (initially set to 'public'). 

Now 

```
> SELECT * FROM <tab>            # will autocomplete all the tables from the default schema.
> SELECT * FROM custom.          # will autocomplete all tables from 'custom' schema and columns from 'public.custom' table if it exists. 
> SELECT <tab> FROM table        # will autocomplete all columns from 'table' in the default schema. 
> SELECT <tab> FROM custom.table # all columns from 'custom.table'
> SELECT * FROM blah WHERE <tab> # all columns from a table 'blah' in the default schema.
```

The way to change the default schema is to use `set search_path TO custom`. That will make 'custom' to be the new default. 

What do you think? 

That would definitely work for the way **I** use postgresql :). The question is how many other people's weird usage patterns do you want to support?
1. search_path can be a list of schemas, not just one.
   - `set search_path to custom, public, other_schema`
2. Given (1), tables of the same name in different schemas on the search_path can shadow each other.
   - E.g. given tables s1.tbl and s2.tbl, `SET search_path TO s1, s2; SELECT * FROM tbl` will select all from s1.tbl, not s2.tbl. (Or maybe the other way around? I can't remember)
3. The default search_path can be set at the database or user level, and doesn't have to default to `public`. 
   - Actually, at least on my local server, it defaults to ""$user"", public

I think these issues won't be a problem as long as we grab the search path as a list of schema names while grabbing the rest of the metadata, and search for unqualified tables by iterating over the search_path one schema at a time (so correct shadowing behavior is exhibited.)

One extra thing to keep in mind for the future is eventually I'd like to be able to support user-defined functions, especially table-returning functions, and even more especially, somehow hinting function argument names. I think that's a bunch of extra metadata that would probably be stored in separately from the table and column metadata, but I thought it was at least worth bringing up.

I don't use schemas very much. So I'm glad you're thinking of all these possibilities. 

If I understand your correctly, if we make the default schema as a list, then we can stick with the nested-dict as the data-structure for metadata, right?

About the default search_path, do you happen to know how it's set at the user level? If that comes from the database server then can we read that in while starting up? 

I think adding support for user-defined functions could be handled separately. We currently have built-in functions and keywords that are statically initialized, similarly we can populate a user-defined functions at startup time. 

Hinting the args is possible but that'll require a bit more plumbing. We'll let future @darikg and @amjith  worry about that. :P 

You do have a point about various ways of setting the default, but I can't think of another way to handle it. Even if we decide to go with a different data-structure we'd still need to support a way to complete unqualed references, which means we'll either show way more table names for auto-completion or none at all.

I'm sure there is a way to get the search_path from the server itself, so we can merely refresh the default path whenever we encounter a `set` command instead of parsing the path from the sql statement itself.

> If I understand your correctly, if we make the default schema as a list, then we can stick with the nested-dict as the data-structure for metadata, right?

Yeah, exactly. 

> About the default search_path, do you happen to know how it's set at the user level? If that comes from the database server then can we read that in while starting up?

I know the query `SHOW search_path` returns a string containing a comma separated list of schema names. We could parse that (I guess taking special care for the edge case where a schema is double-quoted and contains a comma) in to a list of schema names. There might be a function in postgresql somewhere that returns a column of schema names instead, which would be nicer.

> You do have a point about various ways of setting the default, but I can't think of another way to handle it. Even if we decide to go with a different data-structure we'd still need to support a way to complete unqualed references

Well, it's [handled currently](https://github.com/darikg/pgcli/blob/78288101c20972b4749c04ab49bfba6dfd68717a/pgcli/pgexecute.py#L60) with the pg_catalog.pg_table_is_visible function, which does all the work for us. But then you'd either need to store the is_visible tag for each table (as in the current PR), or keep two redundant data structures (as we discussed upthread). 

I think we can settle for using `SHOW search_path` and parsing the output right now using a new method called `refresh_search_path()`. 

We can trigger a refresh_search_path() when a `set` statement is entered. Let's punt on maintaining two different data-structures unless we run into a situation that demands it.

Sounds good. Turns out there's a slightly better way to get the search path:
`select unnest(current_schemas(false))` which returns a column of schema names, instead of a single string.

Anyway, I can start implementing this, or if you'd prefer to, let me know.

If you can implement it, I'd very much appreciate it. But if you're swamped
let me know.

On Sat, Jan 24, 2015, 06:17 darikg notifications@github.com wrote:

> Sounds good. Turns out there's a slightly better way to get the search
> path:
> select unnest(current_schemas(false)) which returns a column of schema
> names, instead of a single string.
> 
> Anyway, I can start implementing this, or if you'd prefer to, let me know.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/127#issuecomment-71318802.

Sure, I can start working on it. Does it make sense to keep working on this branch, or make a new pr from master?

Same branch. But merge in master to bring this branch up to date.

On Sat, Jan 24, 2015, 08:19 darikg notifications@github.com wrote:

> Sure, I can start working on it. Does it make sense to keep working on
> this branch, or make a new pr from master?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/127#issuecomment-71324956.

Done!

todo: 
- [x] Figure out a way to compare lists of dictionaries in test_sqlcompletion so the tests stop failing in python 3
- [ ] Use itertools.groupby to avoid unnecessary name escaping on the same schema & table names over and over
- [x] Split test_smart_completion into two files, on for simpler tests on a public-schema-only database, and another for a more complicated structure
- [x] More schema-related tests in general
- [x] Fix \d autocompletion
- [x] Check for `set search_path` commands and refresh search path

Just tried it out. The completion works great. I haven't tested the path stuff yet, but I'll check it soon. 

One tiny issue found so far is the completion for special commands need to be adjusted. 

```
\d custom.<tab> 
```

That should show only tables from the custom schema. But that could be a future enhancement. 

Thank you for working on this feature. I'll read through the code later today. 

Cheers! 

The way I handled the \d command looks a little fragile, have a look and tell me what you think

You've been very productive!

I pulled the changes and tried it out it does work as expected. 

I looked at the code and you're right it's a wee bit fragile. I'm wondering why it wasn't handled by the elif condition below `elif token_v.endswith('.'):`. 

I still haven't had time (stuck on a unicode issue #134) to review the full change-set but the initial perusal looks good. I'll give it a good look tonight. 

Thanks!

I think it's something wonky with sending non-sql through sqlparse:

```
In [1]: from sqlparse import parse

In [2]: p = parse(r'\d xxx')[0]

In [3]: p.tokens
Out[3]: [<Error '\' at 0x345ec28>, <Identifier 'd xxx' at 0x4457f48>]

In [4]: p.tokens[-1].value
Out[4]: u'd'
```

This is quite the PR. :sparkles:

I appreciate the time you've put into this. Thank you very much!!

I've finally given it a thorough reading and I'm quite satisfied with all the changes. I'll come back to the suggestion for '.' at a later time. 

This is good for merge. :shaved_ice: 
",2015-01-18 21:40:48,2015-01-27 04:26:52
1071,126,,"ON keyword suggests either table aliases, or table names.
Works great!!

Thank you!

:turtle: 
",2015-01-18 06:17:45,2015-01-18 06:25:06
1072,125,"When I try to use Tab key after the next command, the LIMIT option does not appear.
`testdb> SELECT * FROM test_table L`
","Auto-completion does not work for LIMIT sql keyword
I use pgcli 0.13.0 pip package.

Yep! You're right. Looks like I don't have the LIMIT listed in the Keywords (https://github.com/amjith/pgcli/blob/master/pgcli/pgcompleter.py#L12). 

I'll fix that. 

Thanks for reporting. :)
",2015-01-16 15:51:31,2015-01-18 06:51:42
1073,124,"When I try to connect using a role that does not exist, pgcli display `'ascii' codec can't decode byte 0xe2 in position 14: ordinal not in range(128)` as it obviously trips over a „ character.
","Encoding issues within error messages
That is quite bizarre. 

I'm able to reproduce it. I'll see if I can track it down. 

Thanks for reporting the bug. :)

This is now fixed in the master. Can you please try it out and let me know? Thanks!

```
pip install -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Unfortunately after running that command I still get the same error.

```
cschramm@y ~ % pip list | grep pgcli
pgcli (0.13.0, /home/cschramm/src/pgcli)
cschramm@y ~ % pgcli                
'ascii' codec can't decode byte 0xe2 in position 14: ordinal not in range(128)
```

My bad. I thought I had fixed it, but looks like I fixed a related issue but not this specific one. Thanks for trying it out.

I am also running into a character encoding issue while trying to view a table using a bytea data type. 

brian@theon ~ $ pgcli tracker
tracker> select \* from torrents;
'ascii' codec can't decode byte 0xfa in position 0: ordinal not in range(128)

@bpina This is a different issue, which is actually fixed in master. Can you try the latest from master? 

You can install directly from github: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

:+1:  that helped, thanks

@cschramm This time I definitely fixed it. :)

Can you give it a shot? 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

From my limited testing: 

![screen shot 2015-01-26 at 11 08 16 pm](https://cloud.githubusercontent.com/assets/49260/5914751/4706ecfc-a5b0-11e4-9c7e-b7b2c2cbb08d.png)

Yeap, now I get my error message. :smiley: 

Thanks!

I still get a exception when I connect to a database and run `rollback` without a transaction in place.

```
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 716, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 696, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 889, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 534, in invoke
    return callback(*args, **kwargs)
  File ""/Users/yaochunlin/src/pgcli/pgcli/main.py"", line 704, in cli
    pgcli.run_cli()
  File ""/Users/yaochunlin/src/pgcli/pgcli/main.py"", line 393, in run_cli
    click.echo_via_pager('\n'.join(output))
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 0: ordinal not in range(128)
```

@amjith `pgcli -U √ab √abc` test passed.
",2015-01-16 08:44:46,2015-01-27 07:07:17
1074,123,"Right now the Readme has a lot of information about installing pip, this can be replaced with a link to https://pip.pypa.io/en/latest/installing.html
","Link to pypa docs for pip installation instructions
e1311fc892bbcca6486e91e43bca4c6927f40156
",2015-01-15 21:27:11,2015-01-27 14:08:50
1075,122,"Right now we're using the 'psql' style for rendering tables using the tabulate module. Add an option to set the style through the config file as well as at runtime (maybe cycle through the styles on a keystroke). 
","Add an option to use fancy-grid for printing tables
Version 0.14.0 released to PyPI. That has support for choosing style via the config file. 

```
pip install -U pgcli
```
",2015-01-15 21:21:39,2015-01-31 23:56:41
1076,121,"Look into rendering tables in chunks if possible instead of loading all the rows and trying to figure out the spacing. 
","Rendering large amounts of rows is taking *forever*
Added a confirmation before printing large tables. 
",2015-01-15 21:19:21,2015-01-31 23:54:56
1077,120,"Not sure if there's more standard way to get a dict iterator in both 2 & 3. 
","fix bug where show_help command failed in python 3 due to iteritems() de...
Thank you for fixing that!!

:deciduous_tree: 

I wish there was a way to get notified when a PR gets updated. 

ah sorry, I just assumed you'd get notified. thanks for merging!
",2015-01-14 13:04:07,2015-01-14 21:46:27
1078,119,"I broke the special commands :( sorry!!
","don't try to spilt None - fixes AttributeError: 'NoneType' object has no...
No worries. Thanks for noticing it and fixing it. :)

Cheers!
:train: 
",2015-01-14 13:01:09,2015-01-14 17:19:01
1079,118,"Installation fails if you don't have one or some of the following packages:
- python2.7-dev
- libevent-dev

The error: `error: command 'x86_64-linux-gnu-gcc' failed with exit status 1`
I would put in a PR to add this info to the README but I don't know which one fixed it or if it was both and don't want to put false info in it so figured I'd at least leave this here
","pip install fails
You're right the detailed instructions in the readme should have that information. 

Feel free to make a PR. If not, I'll make the necessary changes later tonight when I get home. Thanks!

Readme is now updated. 

Thanks for reporting it. :umbrella: 
",2015-01-13 22:45:57,2015-01-14 06:25:08
1080,117,"When the `\c` fails because of a non-existent database, it crashes pgcli. 

/cc @macobo 
",Changing to a non-existent database using \c crashes pgcli,2015-01-13 08:26:32,2015-01-14 05:07:44
1081,116,"I got following error while executing `sudo pip install pgcli`

```
Error: pg_config executable not found.



Please add the directory containing pg_config to the PATH

or specify the full executable path with the option:



    python setup.py build_ext --pg-config /path/to/pg_config build ...



or with the pg_config option in 'setup.cfg'.

----------------------------------------

Command python setup.py egg_info failed with error code 1 in /tmp/pip-build-root/psycopg2

Exception information:
Traceback (most recent call last):
  File ""/usr/lib/python2.6/site-packages/pip/basecommand.py"", line 139, in main
    status = self.run(options, args)
  File ""/usr/lib/python2.6/site-packages/pip/commands/install.py"", line 266, in run
    requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle)
  File ""/usr/lib/python2.6/site-packages/pip/req.py"", line 1057, in prepare_files
    req_to_install.run_egg_info()
  File ""/usr/lib/python2.6/site-packages/pip/req.py"", line 236, in run_egg_info
    command_desc='python setup.py egg_info')
  File ""/usr/lib/python2.6/site-packages/pip/util.py"", line 662, in call_subprocess
    % (command_desc, proc.returncode, cwd))
InstallationError: Command python setup.py egg_info failed with error code 1 in /tmp/pip-build-root/psycopg2

```
","sudo pip install pgcli not working.
One of the requirements for `pgcli` is `psycopg2`. Which requires postgres-dev packages and python-dev packages installed on the system. 

So try one of the following, depending on your linux distro: 

```
$ sudo apt-get install libpq-dev python-dev   # debian

or

$ sudo yum install postgresql-devel python-devel  # redhat
```

and then try `sudo pip install pgcli`. 

@amjith `sudo yum install postgresql-devel python-devel  # redhat` this command work perfectly.

Thank you.

I'm glad that worked for you. 

Happy hacking!
",2015-01-13 08:21:06,2015-01-13 08:55:36
1082,115,"Right now the output of the tables are printed without any table name at the top. 

eg: 

```
misago_testforum> SELECT * FROM django_migrations; SELECT * FROM django_session;
+------+----------------------+---------------------------+----------------------------------+
|   id | app                  | name                      | applied                          |
|------+----------------------+---------------------------+----------------------------------|
|    1 | misago_acl           | 0001_initial              | 2014-11-24 14:26:43.153977-08:00 |
|    2 | contenttypes         | 0001_initial              | 2014-11-24 14:26:43.163630-08:00 |
|    3 | auth                 | 0001_initial              | 2014-11-24 14:26:43.193472-08:00 |
|    4 | misago_users         | 0001_initial              | 2014-11-24 14:26:43.553596-08:00 |
|    5 | admin                | 0001_initial              | 2014-11-24 14:26:43.625938-08:00 |
|    6 | misago_core          | 0001_initial              | 2014-11-24 14:26:43.633080-08:00 |
|    7 | misago_acl           | 0002_acl_version_tracker  | 2014-11-24 14:26:43.639174-08:00 |
|    8 | misago_acl           | 0003_default_roles        | 2014-11-24 14:26:43.648901-08:00 |
|    9 | misago_conf          | 0001_initial              | 2014-11-24 14:26:43.676890-08:00 |
|   10 | misago_core          | 0002_basic_settings       | 2014-11-24 14:26:43.698287-08:00 |
|   11 | misago_forums        | 0001_initial              | 2014-11-24 14:26:43.855748-08:00 |
|   12 | misago_threads       | 0001_initial              | 2014-11-24 14:26:44.735701-08:00 |
|   13 | misago_forums        | 0002_default_forums       | 2014-11-24 14:26:44.829111-08:00 |
|   14 | misago_forums        | 0003_forums_roles         | 2014-11-24 14:26:45.048909-08:00 |
|   15 | misago_forums        | 0004_forum_last_thread    | 2014-11-24 14:26:45.343200-08:00 |
|   16 | misago_legal         | 0001_initial              | 2014-11-24 14:26:45.358834-08:00 |
|   17 | misago_notifications | 0001_initial              | 2014-11-24 14:26:45.431518-08:00 |
|   18 | misago_readtracker   | 0001_initial              | 2014-11-24 14:26:45.630198-08:00 |
|   19 | misago_threads       | 0002_threads_settings     | 2014-11-24 14:26:45.793879-08:00 |
|   20 | misago_users         | 0002_users_settings       | 2014-11-24 14:26:45.930043-08:00 |
|   21 | misago_users         | 0003_bans_version_tracker | 2014-11-24 14:26:46.043154-08:00 |
|   22 | misago_users         | 0004_default_ranks        | 2014-11-24 14:26:46.210618-08:00 |
|   23 | sessions             | 0001_initial              | 2014-11-24 14:26:46.218419-08:00 |
+------+----------------------+---------------------------+----------------------------------+
SELECT 23
+----------------------------------+--------------------------------------------------------------+----------------------------------+
| session_key                      | session_data                                                 | expire_date                      |
|----------------------------------+--------------------------------------------------------------+----------------------------------|
| j6hlq374agh2iid7et600yoi0a8skp56 | MmE5MTMyMGMzMjcyODVlZDM5MWUyOWM2MTk1MDIzYWZkOGZkNjI3OTp7fQ== | 2014-12-08 14:34:49.763643-08:00 |
| zoc7fhrxt35pg2y4cmlyz127nkvh7wwi | MmE5MTMyMGMzMjcyODVlZDM5MWUyOWM2MTk1MDIzYWZkOGZkNjI3OTp7fQ== | 2014-12-08 14:35:48.931447-08:00 |
+----------------------------------+--------------------------------------------------------------+----------------------------------+
SELECT 2
misago_testforum>
```

It would be nice to add the table name at the top of each table. 
","Add the table name when printing the results in a table
Where do you get the table name ? What about `SELECT 1;` ?
Another question: how to handle joined table? We print only `FROM` table?
We'll be emulating whatever psql does in those cases. 


Although it would be a nice feature, I don't see psql showing the table name.
LOL! 

I guess I was just imagining things. I thought psql did show table names. My bad. 

So join queries are a bit weird to handle but I think we can try to list all the table names from the query. We already have some level of rudimentary table name detection available.


This is an old issue, not crucial (you should be able to know what tables you're selecting from), and nobody attempted a PR. I'm closing it. Sorry!",2015-01-13 08:04:49,2017-12-14 23:46:05
1083,114,"Check if it's possible to use http://www.appveyor.com/ for testing on Windows. 
","Add automatic testing on windows platform using AppVeyor
It is high time we do this. I don't want new features to silently break in Windows. 

@dbcli/pgcli-core Any takers? If I don't hear back by Friday, I'll start investigating how to add this. 

I'm interested. Let me look into this. 

I played with this for wharfee and found that pexpect is not available on Windows. In fact, it's available there starting with version 4, but we're pinning it to 3.3 because 4.0 can't run under python 2.6 (see #375).

I think I'll add the config to run unit tests without functional (behave) tests to start with, and then look for ways to replace (or upgrade) pexpect and run functional tests.

Would it be possible to do linux tests with pexpect=3.3 and windows tests with pexpect=4? The number of windows python 2.6 users has to be pretty small and it might not be worth worrying about. 

@darikg So only test under 2.7, 3.3 and 3.4 on Windows? That may be an option.

Yeah, exactly

I like this suggestion. :)

https://ci.appveyor.com/project/j-bennet/pgcli/build/job/qdqvwl9hpexmrcbp

Hmm... it fails trying to install psycopg2 on Win? What the...

Interestingly, that's what I expected. It's not easy to install psycopg on
windows using pip.

I had to download an exe file and use easy install to install it.
On Nov 4, 2015 8:22 AM, ""Iryna Cherniavska"" notifications@github.com
wrote:

> https://ci.appveyor.com/project/j-bennet/pgcli/build/job/qdqvwl9hpexmrcbp
> 
> Hmm... it fails trying to install psycopg2 on Win? What the...
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/dbcli/pgcli/issues/114#issuecomment-153554995.

@j-bennet I played around with your appveyor.yml and got this to install psycopg2 and run the tests. You can see it downloads psycopg2 pre-compiled binaries [from here](http://www.stickpeople.com/projects/python/win-psycopg/). The problem is I had to hardcode the path to a specific python/arch, so I'm not sure go to get that to work with the environmental matrix. 

```
build: false

services:
  - postgresql

environment:
  matrix:
    - PYTHON: ""C:\\Python34""
      PYTHON_VERSION: ""3.4.1""
      PYTHON_ARCH: ""32""

init:
  - ""PATH=C:\\Program Files\\PostgreSQL\\9.3\\bin\\;%PYTHON%;%PYTHON%\\Scripts;%PATH%""
  - ""SET PGUSER=postgres""
  - ""SET PGPASSWORD=Password12!""
  - ""ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%""

install:
  - ps: (new-object net.webclient).DownloadFile('http://www.stickpeople.com/projects/python/win-psycopg/2.6.1/psycopg2-2.6.1.win32-py3.4-pg9.4.4-release.exe', 'C:/psycopg.exe')
  - ""easy_install c:/psycopg.exe""
  - ""pip install -r requirements-win.txt""
  - ""pip install .""

test_script:
  - ""py.test""
  - ""cd tests"" 
  - ""behave""
```

@darikg Yes, I was still playing with it, trying to force a pip install from github. The thing is, if you install from elsewhere, and then run `pip install .`, it will uninstall previously installed psycopg2 and will try installing from pip and fail. Like this here:

https://ci.appveyor.com/project/j-bennet/pgcli/build/1.0.10/job/bt7jwcrd7b3ehk98

Notice this:

```
Found existing installation: psycopg2 2.5.2
    Uninstalling psycopg2-2.5.2:
      Successfully uninstalled psycopg2-2.5.2
  Running setup.py install for psycopg2
```

Did you do anything with `setup.py` to avoid that?

I don't think so...
Here's mine: https://ci.appveyor.com/project/DarikGamble/pgcli
It just says `Requirement already satisfied (use --upgrade to upgrade): psycopg2>=2.5.4 in c:\python34\lib\site-packages\psycopg2-2.6.1-py3.4-win32.egg (from pgcli==0.20.0)`

Oh I think you were tweaking setup.py under the `if platform.system() != 'Windows':` block, not the else block

@darikg Yeah I fixed it here:

https://ci.appveyor.com/project/j-bennet/pgcli/build/job/ny73faqgj3ntula3

@darikg Yay. Got it working here:

https://ci.appveyor.com/project/j-bennet/pgcli/build/job/s1phectgu35b77g3

Now to figure out why there's no `pexpect.spawnu` on Win.

Awesome. I guess they just got rid of spawnu in pexpect v4 and made spawn work with unicode strings by default?

No it looks like there's no spawn or spawnu, it's a different object entirely:

http://pexpect.readthedocs.org/en/stable/install.html
http://pexpect.readthedocs.org/en/stable/overview.html#windows

Trying that out.

Well, it's working now and running tests.

https://ci.appveyor.com/project/j-bennet/pgcli/build/job/100u2tc3vqjtn5rh

Breaks on pgcli trying to write to log.

It's weird that we default the pgclirc filepath to `USERPROFILE\AppData\Local\dbcli\pgcli\config` but the log and history files to `USERPROFILE\.config\pgcli`. @amjith is that correct?

I think we may be not creating dirs in that path or something? I don't see a `makedirs` call anywhere.

Yeah. I think originally all the pgclirc files and log/history files were in the same place, so we only had to make one directory. Then pgclirc got moved and the makedir call went along with it, but the original directory stuck around on my computer, which is why I never got that error on startup. Now I'm wondering if we should just enforce keeping all the files together so we don't need to check multiple paths for existence

@darikg It looks like it's because `log_file` and `history_file` are absolute paths in pgclirc. So if user wants to specify `AppData\Local\dbcli\pgcli\config` he can do it there. I wonder if we want to keep it that way, or only store file names in pgclirc and force the same path for all.

Ah... next hurdle in prompt_toolkit.

https://ci.appveyor.com/project/j-bennet/pgcli/build/job/2rgkk83l53pn0ig9

Perhaps @jonathanslenders could take a look?

> It's weird that we default the pgclirc filepath to USERPROFILE\AppData\Local\dbcli\pgcli\config but the log and history files to USERPROFILE.config\pgcli. @amjith is that correct?

That is not correct. It was an unintentional bug. This will break pgcli for all new windows users (see #406). This sucks and should be fixes ASAP. 

Let's set the logfile to 'default' in `pgclirc` and if it is set to default, then we'll use their corresponding folder locations based on operating system. We'll document this in a comment so users know what 'default' means in this context. 

My internet connection is spotty at best for the next week. Can you one of you please implement this and do a release (0.20.1)? 

@amjith So that means we should only store the file name in .pgclirc, not file path:

https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L19
https://github.com/dbcli/pgcli/blob/master/pgcli/pgclirc#L22

Hi, I see that this results also in the ""Nonetype object has no attribute srWindow"" error. For some reason, `windll.kernel32.GetConsoleScreenBufferInfo` returns `None`. Could it be that AppVeyor runs the application without allocating a console?

@jonathanslenders I thought it may be related to the fact that pexpect, while wrapping some windows calls, does not fully emulate terminal (see https://github.com/pexpect/pexpect/issues/17#issuecomment-112131349). So I created a minimal cli here: https://github.com/j-bennet/prompt-pptk and a Windows 10 VM to test with. Interestingly, I get the same error when trying to run the CLI from ""git bash"" - that's a shell that comes bundled with msysgit installation. And in this case, pexpect is not even in the picture:

```
Irina@DESKTOP-LGPR58K MINGW64 /c/src/prompt-pptk (master)
$ pptk
Traceback (most recent call last):
  File ""C:\src\venvs\prompt-pptk\Scripts\pptk-script.py"", line 9, in <module>
    load_entry_point('prompt-pptk==0.1', 'console_scripts', 'pptk')()
  File ""c:\src\prompt-pptk\prompt_pptk\main.py"", line 14, in main
    text = prompt(""pptk> "", history=history)
  File ""C:\src\venvs\prompt-pptk\lib\site-packages\prompt_toolkit\shortcuts.py"", line 461, in prompt
    output=create_output())
  File ""C:\src\venvs\prompt-pptk\lib\site-packages\prompt_toolkit\interface.py"", line 87, in __init__
    mouse_support=application.mouse_support)
  File ""C:\src\venvs\prompt-pptk\lib\site-packages\prompt_toolkit\renderer.py"", line 230, in __init__
    self.reset(_scroll=True)
  File ""C:\src\venvs\prompt-pptk\lib\site-packages\prompt_toolkit\renderer.py"", line 259, in reset
    self.output.scroll_buffer_to_prompt()
  File ""C:\src\venvs\prompt-pptk\lib\site-packages\prompt_toolkit\terminal\win32_output.py"", line 242, in scroll_buffer_to_prompt
    sr = info.srWindow
AttributeError: 'NoneType' object has no attribute 'srWindow'
```

@darikg - what shell are you using to run pgcli on Windows?
I was able to have the CLI run by using PowerShell. However, I get a different error there when running integration tests with pexpect:

```
(prompt-pptk) C:\src\prompt-pptk [master]> behave
Feature: run the cli, # features\basic_commands.feature:1
  type in text,
  exit the cli
  Scenario: run the cli, type something, exit   # features\basic_commands.feature:5
    Given the module ""prompt_pptk"" is installed # features\steps\step_definitions.py:9
    When we run cli                             # features\steps\step_definitions.py:17
    And we wait for prompt                      # features\steps\step_definitions.py:30
    And we type in ""boo""                        # features\steps\step_definitions.py:38
      Traceback (most recent call last):
        File ""c:\src      envs\prompt-pptk\lib\site-packageehave\model.py"", line 1456, in run
          match.run(runner.context)
        File ""c:\src      envs\prompt-pptk\lib\site-packageehave\model.py"", line 1903, in run
          self.func(context, *args, **kwargs)
        File ""features\steps\step_definitions.py"", line 43, in step_send_text
          context.cli.sendline(txt)
        File ""c:\src      envs\prompt-pptk\lib\site-packages\pexpect\popen_spawn.py"", line 144, in sendline
          n = self.send(s)
        File ""c:\src      envs\prompt-pptk\lib\site-packages\pexpect\popen_spawn.py"", line 137, in send
          self.proc.stdin.write(b)
      IOError: [Errno 22] Invalid argument

    Then we see ""You entered: boo""              # None
    When we send ""ctrl + d""                     # None
    Then cli exits                              # None


Failing scenarios:
  features\basic_commands.feature:5  run the cli, type something, exit

0 features passed, 1 failed, 0 skipped
0 scenarios passed, 1 failed, 0 skipped
3 steps passed, 1 failed, 3 skipped, 0 undefined
Took 0m0.345s
```

@j-bennet pgcli runs even in cmd.exe on my machine, in python 2 or 3. What version/distribution of python are you using? I use Anaconda python, I wonder if that matters somehow

@darikg I think it was more about the shell. I tried with `cmd`, and the cli is also runnable, but pexpect fails with the same IOError as with powershell attempt above. Just for the record, I was using python 2.7 from https://www.python.org/downloads/windows/.
",2015-01-13 00:49:19,
1084,113,"Right now, up/down arrow will navigate the history. 

But if someone enters a partial query in the REPL (such as 'SEL') and hit up arrow then it should only cycle through the entries that start with 'SEL' such as 'SELECT \* FROM abc'. 

This is probably a prompt_toolkit addition, but adding it here to keep track. 

/cc @jonathanslenders your thought on this would be appreciated. 
","Overload up/down arrow to match partially typed in query from history.
True. There is an issue for this: https://github.com/jonathanslenders/python-prompt-toolkit/issues/36

It's not an easy one. I'm not sure whether this can be handled correctly in a multiline context. Also not the biggest priority for me, but certainly on the to do list.

I'll take a stab when I get some time. I think it's a useful feature, but you're right about having complications in multi-line mode. 

Hi @amjith @shanusmagnus @Vayn @ianozsvald @j-bennet,
`prompt_toolkit` does now support this kind of history substring matching when pressing arrow-up.

Right now, it works by passing `Always()` to `Buffer.enable_history_search`:
https://github.com/jonathanslenders/python-prompt-toolkit/blob/f9c54569d98603c98a6f34134c287399f70ed283/prompt_toolkit/buffer.py#L157

Please tell me whether I should rename `enable_history_search` by `enable_history_substring_matching`! I'd like to use the correct terminology. I'm not sure how readline calls this option exactly.

There is one issue however. When `complete_while_typing` is enabled, and there are completions, then the up and down arrows traverse all these completions rather than going through the history.
So, what I did for `ptpython` (master branch -- not on Pypi yet), I disabled `complete_while_typing` as soon as somebody enable `history_search` from the menu.

Suggestions are very welcome.

Jonathan

@jonathanslenders I believe it is called 'history-search-backward()' in [readline](http://www.gnu.org/software/bash/manual/bashref.html#Commands-For-History). It's not all that clear from the name. 

I have a suggestion for the up/down arrow traversing the suggestion menu. When this option is enabled you can still have complete_while_typing enabled, but then disable the up/down arrow to choose the items in the menu. But instead use tab/shift-tab for selecting menu items. Because I hardly ever use the arrow key to select an item from the menu, I always use tab keys. 

This has been in `python-prompt-toolkit` for a long time now, but between partial history match and autocomplete-as-you-type, autocomplete is the more useful one, and we can't have both. I'm closing the issue.",2015-01-12 22:43:09,2017-12-14 23:42:39
1085,112,"closes #107
","print sql magic connection alias when using %pgcli magic
Yay!! Thank you!

@darikg Can you please send me an email (my github profile has the email)? I have a few question and I'd like to discuss offline. Thanks!

:apple: 
",2015-01-12 18:03:42,2015-01-12 18:33:41
1086,111,"In psql `\timing` is used to toggle the timing of a query. 

This should be easy to do by timing the calls to the PGExecute.run() method. 

It would be useful to break out the time spent in building the table as well. 
","Implement \timing command
This is now available in master. 151a018

Version 0.14.0 released to PyPI.

```
pip install -U pgcli
```
",2015-01-12 09:11:11,2015-01-31 23:56:50
1087,110,"i use pgcli and psql to access db.

i found pgcli is slow when i post a query,  psql is faster.

""\timing off/on"" is not support in pgcli,  it works better on psql

""\h create table"" is not support in pgcli,  it works better on psql

""\h XXX XXX "" is not support in pgcli?
","pgcli compare to psql?
Not all of the back-slash commands are supported yet. To get a list of supported back-slash commands try \?. That will give you the list of supported back-slash commands. 

\timing is interesting, I didn't know about it. But it should be easy to add. So thanks for requesting that. 

\h is a much harder command to implement, since it involves copying tons of documentation text into the source code. So that might take a bit longer to implement. 

Regarding the speed of execution of a query, they should both be executing the query at the same speed, but the difference might be from building the table of results. It's faster to build a table of data in C compared to Python. So for large tables, it might be noticeably slower. 

Can you tell me how large is the result dataset? How many rows and columns? 

my query table is 27MB, columns 7 rows 271299  use psql expense 38.530 

but pgcli more than 5 seconds 

Sorry that's a bit unclear. 

Will the results have 271299 rows? 

What query did you run? Can you paste the query? (please remove any sensitive information from the query). 

Finally you mention psql expense was 38.530, is that in seconds?

I should point out that running the actual query itself will take the same time in both psql and pgcli, but pgcli might take a little bit longer to render the results. I don't know if I made that clear in the previous comment. 

select \* from table;

sorry ,psql expense 38.53ms

i feel slow in pgcli

Yeah I can believe that. 

On a table with 271,299 rows displaying every single row will require reading all the rows into memory and then trying to determine the table cell width. I think that's the problem. 

I don't have an easy answer for this one right now. Unless I end up rewriting the table rendering as a C-extension, this will continue being slow. 

In an interactive scenario, requesting hundreds of thousands of rows is not a common use case. So I'm tempted to say that this is a low priority item. 

With psql, execute the sql ""select \* from table"", no matter the query returns how many rows, it returns the proper rows according to you terminal height,  then you can press ""enter"" key to view the next.
i think this is good . 

that;'s  the reason  why psql is faster than pgcli when query .

just like use page

my english is not very good ,  i wish you cound unserstand my meaning .  :)

Don't worry about english. My native tongue isn't english either. I think I understand what you're saying, correct me if I'm wrong. 

Instead of loading all the rows into memory and try to render the table all at once, I should try and load maybe 50 rows at a time and only load more when the next page is requested. 

That's an interesting idea. I hadn't thought of that. I'll give it a shot and see if that works. 

Thank you for the suggestion. 

Version 0.14.0 released to PyPI.

This adds support for `\timing` and requires you to confirm before rendering a table with more than 1000 rows. 

```
pip install -U pgcli
```

gets, thanks a lot.

pcsuccess@sina.com

From: Amjith Ramanujam
Date: 2015-02-01 07:56
To: amjith/pgcli
CC: jerome-peng
Subject: Re: [pgcli] pgcli compare to psql? (#110)
Version 0.14.0 released to PyPI.
This adds support for \timing and requires you to confirm before rendering a table with more than 1000 rows. 
pip install -U pgcli

—
Reply to this email directly or view it on GitHub.
",2015-01-12 09:01:14,2015-01-31 23:56:07
1088,109,"I would love to get some help on creating a single standalone pgcli.exe binary for windows. 

I've heard that it is possible to do that using py2exe, but I don't have personal experience with that. 
","Create a standalone pgcli.exe for windows
Let's face the facts. This is probably not going to happen. 
Since Microsoft released Bash for Windows, I'd rather advise people to try that.",2015-01-12 08:53:05,2017-03-07 03:26:42
1089,108,"my pc is win7 32bit system, i want to use pgcli, then i get some errors.

my operation is bellow:

1 download python3.4.2 from https://www.python.org/downloads/release/python-342/
 installed in D:\Python‍

2 install python-pip
   download get-pip.py from ‍https://bootstrap.pypa.io/get-pip.py to D:\‍
   run command: python d:\get-pip.py‍

3  pip install pgcli ‍
D:\Python\Scripts>pip install pgcli
Collecting pgcli
  Downloading pgcli-0.11.0.tar.gz
Collecting click>=3.2 (from pgcli)
  Downloading click-3.3-py2.py3-none-any.whl (58kB)
    100% |################################| 61kB 71kB/s ta 0:00:011
Collecting Pygments>=2.0 (from pgcli)
  Downloading Pygments-2.0.1-py3-none-any.whl (672kB)
    100% |################################| 675kB 347kB/s ta 0:00:01
Collecting jedi==0.8.1 (from pgcli)
  Downloading jedi-0.8.1.tar.gz (304kB)
    100% |################################| 307kB 196kB/s ta 0:00:01
Collecting prompt-toolkit==0.25 (from pgcli)
  Downloading prompt_toolkit-0.25.tar.gz (93kB)
    100% |################################| 94kB 255kB/s ta 0:00:01
Collecting psycopg2>=2.5.4 (from pgcli)
  Downloading psycopg2-2.5.4.tar.gz (682kB)
    100% |################################| 684kB 251kB/s ta 0:00:01
Collecting sqlparse>=0.1.14 (from pgcli)
  Downloading sqlparse-0.1.14.tar.gz (55kB)
    100% |################################| 57kB 203kB/s ta 0:00:011
Collecting docopt (from prompt-toolkit==0.25->pgcli)
  Downloading docopt-0.6.2.tar.gz
Collecting six>=1.8.0 (from prompt-toolkit==0.25->pgcli)
  Downloading six-1.9.0-py2.py3-none-any.whl
Collecting wcwidth (from prompt-toolkit==0.25->pgcli)
  Downloading wcwidth-0.1.4-py2.py3-none-any.whl
Installing collected packages: wcwidth, six, docopt, sqlparse, psycopg2, prompt-
toolkit, jedi, Pygments, click, pgcli

  Running setup.py install for docopt
  Running setup.py install for sqlparse
    Fixing build\lib\sqlparse\exceptions.py build\lib\sqlparse\filters.py build\
lib\sqlparse\formatter.py build\lib\sqlparse\functions.py build\lib\sqlparse\key
words.py build\lib\sqlparse\lexer.py build\lib\sqlparse\pipeline.py build\lib\sq
lparse\sql.py build\lib\sqlparse\tokens.py build\lib\sqlparse\utils.py build\lib
\sqlparse__init__.py build\lib\sqlparse\engine\filter.py build\lib\sqlparse\eng
ine\grouping.py build\lib\sqlparse\engine__init__.py
    Fixing build\lib\sqlparse\exceptions.py build\lib\sqlparse\filters.py build\
lib\sqlparse\formatter.py build\lib\sqlparse\functions.py build\lib\sqlparse\key
words.py build\lib\sqlparse\lexer.py build\lib\sqlparse\pipeline.py build\lib\sq
lparse\sql.py build\lib\sqlparse\tokens.py build\lib\sqlparse\utils.py build\lib
\sqlparse__init__.py build\lib\sqlparse\engine\filter.py build\lib\sqlparse\eng
ine\grouping.py build\lib\sqlparse\engine__init__.py
  Running setup.py install for psycopg2
    building 'psycopg2._psycopg' extension
    error: Unable to find vcvarsall.bat
    Complete output from command D:\Python\python.exe -c ""import setuptools, tok
enize;__file__='C:\Users\JEROME~1\AppData\Local\Temp\pip-build-iu4ck56w\p
sycopg2\setup.py';exec(compile(getattr(tokenize, 'open', open)(**file**).read()
.replace('\r\n', '\n'), **file**, 'exec'))"" install --record C:\Users\JEROME~1\A
ppData\Local\Temp\pip-t1lhcf2s-record\install-record.txt --single-version-extern
ally-managed --compile:
    running install

```
running build

running build_py

creating build

creating build\lib.win32-3.4

creating build\lib.win32-3.4\psycopg2

copying lib\errorcodes.py -> build\lib.win32-3.4\psycopg2

copying lib\extensions.py -> build\lib.win32-3.4\psycopg2

copying lib\extras.py -> build\lib.win32-3.4\psycopg2

copying lib\pool.py -> build\lib.win32-3.4\psycopg2

copying lib\psycopg1.py -> build\lib.win32-3.4\psycopg2

copying lib\tz.py -> build\lib.win32-3.4\psycopg2

copying lib\_json.py -> build\lib.win32-3.4\psycopg2

copying lib\_range.py -> build\lib.win32-3.4\psycopg2

copying lib\__init__.py -> build\lib.win32-3.4\psycopg2

creating build\lib.win32-3.4\psycopg2\tests

copying tests\dbapi20.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\dbapi20_tpc.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\testconfig.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\testutils.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_async.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_bugX000.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_bug_gc.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_cancel.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_connection.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_copy.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_cursor.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_dates.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_extras_dictcursor.py -> build\lib.win32-3.4\psycopg2\test
```

s

```
copying tests\test_green.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_lobject.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_module.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_notify.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_psycopg2_dbapi20.py -> build\lib.win32-3.4\psycopg2\tests


copying tests\test_quote.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_transaction.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_types_basic.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_types_extras.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_with.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\__init__.py -> build\lib.win32-3.4\psycopg2\tests

Skipping implicit fixer: buffer

Skipping implicit fixer: idioms

Skipping implicit fixer: set_literal

Skipping implicit fixer: ws_comma

running build_ext

building 'psycopg2._psycopg' extension

error: Unable to find vcvarsall.bat

----------------------------------------
Command ""D:\Python\python.exe -c ""import setuptools, tokenize;__file__='C:\\
```

Users\JEROME~1\AppData\Local\Temp\pip-build-iu4ck56w\psycopg2\setup.py';e
xec(compile(getattr(tokenize, 'open', open)(**file**).read().replace('\r\n', '\n
'), **file**, 'exec'))"" install --record C:\Users\JEROME~1\AppData\Local\Temp\pi
p-t1lhcf2s-record\install-record.txt --single-version-externally-managed --compi
le"" failed with error code 1 in C:\Users\JEROME~1\AppData\Local\Temp\pip-build-i
u4ck56w\psycopg2

i get some help from google: maybe i need install MinGW ,so i install MinGW

then i retry step 3

D:>pip install pgcli
Collecting pgcli
  Using cached pgcli-0.11.0.tar.gz
Collecting click>=3.2 (from pgcli)
  Using cached click-3.3-py2.py3-none-any.whl
Collecting Pygments>=2.0 (from pgcli)
  Using cached Pygments-2.0.1-py3-none-any.whl
Collecting jedi==0.8.1 (from pgcli)
  Using cached jedi-0.8.1.tar.gz
Collecting prompt-toolkit==0.25 (from pgcli)
  Using cached prompt_toolkit-0.25.tar.gz
Collecting psycopg2>=2.5.4 (from pgcli)
  Using cached psycopg2-2.5.4.tar.gz
Requirement already satisfied (use --upgrade to upgrade): sqlparse>=0.1.14 in d:
\python\lib\site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): docopt in d:\python\li
b\site-packages (from prompt-toolkit==0.25->pgcli)
Requirement already satisfied (use --upgrade to upgrade): six>=1.8.0 in d:\pytho
n\lib\site-packages (from prompt-toolkit==0.25->pgcli)
Requirement already satisfied (use --upgrade to upgrade): wcwidth in d:\python\l
ib\site-packages (from prompt-toolkit==0.25->pgcli)
Installing collected packages: psycopg2, prompt-toolkit, jedi, Pygments, click,
pgcli
  Running setup.py install for psycopg2
    building 'psycopg2._psycopg' extension
    error: Microsoft Visual C++ 10.0 is required (Unable to find vcvarsall.bat).

```
Complete output from command D:\Python\python.exe -c ""import setuptools, tok
```

enize;**file**='C:\Users\JEROME~1\AppData\Local\Temp\pip-build-fj7njncs\p
sycopg2\setup.py';exec(compile(getattr(tokenize, 'open', open)(**file**).read()
.replace('\r\n', '\n'), **file**, 'exec'))"" install --record C:\Users\JEROME~1\A
ppData\Local\Temp\pip-8ay3ynz7-record\install-record.txt --single-version-extern
ally-managed --compile:
    running install

```
running build

running build_py

creating build

creating build\lib.win32-3.4

creating build\lib.win32-3.4\psycopg2

copying lib\errorcodes.py -> build\lib.win32-3.4\psycopg2

copying lib\extensions.py -> build\lib.win32-3.4\psycopg2

copying lib\extras.py -> build\lib.win32-3.4\psycopg2

copying lib\pool.py -> build\lib.win32-3.4\psycopg2

copying lib\psycopg1.py -> build\lib.win32-3.4\psycopg2

copying lib\tz.py -> build\lib.win32-3.4\psycopg2

copying lib\_json.py -> build\lib.win32-3.4\psycopg2

copying lib\_range.py -> build\lib.win32-3.4\psycopg2

copying lib\__init__.py -> build\lib.win32-3.4\psycopg2

creating build\lib.win32-3.4\psycopg2\tests

copying tests\dbapi20.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\dbapi20_tpc.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\testconfig.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\testutils.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_async.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_bugX000.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_bug_gc.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_cancel.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_connection.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_copy.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_cursor.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_dates.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_extras_dictcursor.py -> build\lib.win32-3.4\psycopg2\test
```

s

```
copying tests\test_green.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_lobject.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_module.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_notify.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_psycopg2_dbapi20.py -> build\lib.win32-3.4\psycopg2\tests


copying tests\test_quote.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_transaction.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_types_basic.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_types_extras.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\test_with.py -> build\lib.win32-3.4\psycopg2\tests

copying tests\__init__.py -> build\lib.win32-3.4\psycopg2\tests

Skipping implicit fixer: buffer

Skipping implicit fixer: idioms

Skipping implicit fixer: set_literal

Skipping implicit fixer: ws_comma

running build_ext

building 'psycopg2._psycopg' extension

error: Microsoft Visual C++ 10.0 is required (Unable to find vcvarsall.bat).


----------------------------------------
Command ""D:\Python\python.exe -c ""import setuptools, tokenize;__file__='C:\\
```

Users\JEROME~1\AppData\Local\Temp\pip-build-fj7njncs\psycopg2\setup.py';e
xec(compile(getattr(tokenize, 'open', open)(**file**).read().replace('\r\n', '\n
'), **file**, 'exec'))"" install --record C:\Users\JEROME~1\AppData\Local\Temp\pi
p-8ay3ynz7-record\install-record.txt --single-version-externally-managed --compi
le"" failed with error code 1 in C:\Users\JEROME~1\AppData\Local\Temp\pip-build-f
j7njncs\psycopg2

so i need to install Microsoft Visual C++ 10.0 ?

so much to install!

Is there a simple way to fix this problem,  i just want to use pgcli, the simple  the better.
","how to use pgcli on win7
:(

I'm sorry you're having to install so many different things. I believe this is due to the required  dependencies for psycopg2. But I have limited experience with installing python packages in Windows so I'm not the best person to give you advice. I hope someone else has a solution for this. 

I've also created a new issue #109 to try and create a single executable using py2exe or something similar that will ease the pain. I would appreciate if someone has the time and expertise to contribute for that. 

install psycopg2 from a binary [here](http://www.stickpeople.com/projects/python/win-psycopg/) instead of through pip

@jerome-peng Were you able to get pscypg2 installed on Win 7 using the binary suggested by darikg? 

Did you manage to get `pgcli` working in Win 7? 

yes ,i use darikg's suggestion install psycopg2, then use pip install pgcli, the install process is normal.
here is log:

  Running setup.py install for pgcli
    Installing pgcli-script.py script to D:\Python\Scripts
    Installing pgcli.exe script to D:\Python\Scripts
    Installing pgcli.exe.manifest script to D:\Python\Scripts
Successfully installed Pygments-2.0.1 click-3.3 jedi-0.8.1 pgcli-0.12.0 prompt-t
oolkit-0.26

D:>pgcli -h 192.168.20.19 -U afc edb

then i lose of control, it out of response. Even i can't use ""Ctrl"" +""C"" to disrupt it.

:)
it works !
D:\Python>pgcli -h 192.168.20.19 -p 5444 -U afc edb

it must add -h -p option

It uses the default port of 5432, if it is not specified explicitly with the -p option. 

I'm guessing you have some other service listening on 5432 and pgcli is trying to connect to that port. 

Looks like you got it working. I'll close this ticket for now. 

yes it working. thanks all.
",2015-01-12 08:47:57,2015-01-14 07:14:39
1090,107,"In the original ipython-sql magic extension when a connection is made, the alias used to store that connection is printed to the console.

eg:

```
In [1]: %load_ext sql

In [2]: %sql postgres://localhost/misago_testforum
Out[2]: u'Connected: None@misago_testforum'
```

It will be useful to do the same for `%pgcli` as well. 
",Print the alias used by ipython-sql when using %pgcli magic,2015-01-11 08:23:55,2015-01-12 18:33:41
1091,106,"eg: Let's assume $ is the cursor position.

```
misago_testforum> SELECT * FROM django_migrations; SELECT * FROM $
```

That should suggest table names, but instead I'm getting keywords. 
",Auto-completion is broken for multiple queries in the same line,2015-01-11 01:13:56,2015-01-29 18:24:54
1092,105,"... when database name is omitted

Fix #101
","allows pgcli to connect to specified user's database
Awesome! Tested it locally and it works as expected. Thank you!

:sunflower: 
",2015-01-11 00:46:13,2015-01-11 01:05:50
1093,104,"`%pgcli` magic now persists pgcli objects by stashing them in sql-magic connection objects. after first connecting with `%pgcli postgresql://blahblahblah` you can return to that same connection with simply `%pgcli`. if you have multuple pgcli connections open, you can refer to them with an alias like `%pgcli username@dbname`

also, mutating queries aren't rerun in sql magic
","ipython magic improvements
The changes look good. Let me know if you can address the comments I left inline. 

Thank you!

:green_apple: 

thanks for the careful comments :) i made the changes you suggested, squashed them, and rebased on master

Appreciate the quick turn around on addressing the comments. 

Merged. Cheers!

:seedling: 
",2015-01-11 00:40:12,2015-01-11 02:04:42
1094,103,"file handler was attached to the pgcli.main logger instead of pgcli
","fix logging bug: log statements outside pgcli.main not logged to file
Damn, that was quick. :)

I'll try it out. Thanks!

hah, i actually figured it out yesterday and then forgot about it until i
saw the issue

On Sat, Jan 10, 2015 at 7:45 PM, Amjith Ramanujam notifications@github.com
wrote:

> Damn, that was quick. :)
> 
> I'll try it out. Thanks!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/103#issuecomment-69478698.

Thank you! Just tested it and works great. 

Cheers! :bulb: 
",2015-01-11 00:36:03,2015-01-11 00:59:47
1095,102,"Looks like logging from other files is currently broken. 

I presume it's because we initialize the loggers on the instance variable of the PGCli class. Need to read through the logging cookbook to understand how to do this correctly. 
","Logging only works in main.py
just fixed that in #103 

Fix merged to master. 

Thanks @darikg
",2015-01-11 00:28:11,2015-01-11 01:14:36
1096,101,"When I usually connect to a postgres server I just type the following:

```
psql -U postgres
```

This automatically connects me to postgres database. Here, `pgcli` is connecting me to my current user database.
I don't know if this is a Debian specificity, but I coudn't see anything about it in my config files nor on postgresql documentation.
Isn't it a difference of behavior?
","Connecting to server only specifying `postgres` user
You're right, this discrepancy should be fixed. Right now we're falling back to the $USER env var to use for both user name and database name. But if a Username is provided and the database name is omitted then we should fall back to the Username as the database name. 

Thanks for reporting it. I'll fix it soon. 
",2015-01-11 00:18:50,2015-01-11 01:05:50
1097,100,"Hi,

On Linux, with Python 3.4.2 and psycopg2 2.5.4, I have this error when I try to connect to a database with a password:

<pre>(pyvenv) lg@steroids:~/Documents/IDEA/LGbo$ pgcli -h localhost -p 5432 -U asterisk asterisk
'OperationalError' object has no attribute 'message'</pre>


With this commit, I have no more issues.
I've quickly tested with Python 2.7.6, it continues to work.

Regards.
","Fix auto passwd prompt
Works as expected!  

Thank you for fixing the issue. :birthday: 

You're welcome :-)
",2015-01-10 14:24:45,2015-01-11 00:31:34
1098,99,"Similar to the bash shell, psql allows you to search backwards in history using a substring of a previous query. We should emulate this in pgcli.

This seems like something prompt_toolkit should handle, so I'll go dig in the docs.
","Reverse history search - CTRL+R
This was working out of the box in prompt_toolkit 0.25. I wonder if this is accidentally broken in 0.26. 

Try pgcli 0.11 the reverse search works fine in that version. 

I tried adding 'load_emacs_search_bindings(registry)' to key_bindings.py but then pressing Ctrl-R crashes pgcli. 

I've sent an email to prompt_toolkit author to request help. I'll update once I hear back. 

This is now fixed by the changes that are merged by this commit: 6018308a72dd3ad41f1d18a86e32a3c2e41da099

This is now released in v0.12.0.

https://pypi.python.org/pypi/pgcli/0.12.0
",2015-01-10 11:08:46,2015-01-13 08:43:40
1099,98,"See #93.

Note that if any of the queries raises an error, nothing besides the error is output. This is different behavior from psql which outputs separately for each query:

```
_test_db=# select 1; invalid syntax; select 2;
 ?column?
----------
        1
(1 row)

ERROR:  syntax error at or near ""invalid""
LINE 1: invalid syntax;
        ^
 ?column?
----------
        2
(1 row)
```

Let me know if we want to be fully psql-compatible with this or if this acceptable behavior.
","Support having multiple queries on the same line.
Thank you for implementing this. 

I'm perfectly fine with quitting early if one of the sql statements fail. I think failing early is a desirable behavior and I'm ok with deviating from `psql` on that. 

Thank you! :zap: 
",2015-01-10 10:00:48,2015-01-10 23:00:25
1100,97,,"Typo in README.rst
Thank you for fixing that. 

I'm glad you noticed it. :rocket: 
",2015-01-10 01:06:57,2015-01-10 01:34:46
1101,96,"Test example:

``` python
    >>> print(tabulate([[""spam"", 41.9999], [""new\\nline"", ""451.0""]], tablefmt=""grid""))
    +------+----------+
    | spam |  41.9999 |
    +------+----------+
    | new  | 451      |
    | line |          |
    +------+----------+
```

But instead of expected output we will get:

``` python
    +----------+----------+
    | spam     |  41.9999 |
    +----------+----------+
    | new
    line | 451      |
    +----------+----------+
```
","pgcli.packages.tabulate.tabulate is not aware of multiline strings
This is a feature request for [Tabulate](https://bitbucket.org/astanin/python-tabulate) and it looks like someone is already working on it. 

https://bitbucket.org/astanin/python-tabulate/issue/28/feature-request-multiline-cells-and

@CyberDem0n this is the current output of tabulate in pgcli:

``` console
>>> print(tabulate([[""spam"", 41.9999], [""new\\nline"", ""451.0""]], tablefmt=""grid"")[0])
+-----------+---------+
| spam      | 41.9999 |
+-----------+---------+
| new\nline | 451.0   |
+-----------+---------+
>>>
```

Are you ok with that ?
tabulate is gone now, and terminaltables handle newline fine. Although output is still broken in pgcli.
Anyway, maybe this issue should be closed for a new one, until this display bug is fixed.
@fpietka Thanks for mentioning the recent output change in pgcli.

Actually, tabulate is still used. It's the default package used to display output in pgcli. Users can optionally use terminaltables by setting their `table_format` to `ascii` or `double` (and I don't think that's in the current release, yet).

Now that pgcli is following the official tabulate package, this bug relies on the [upstream issue](https://bitbucket.org/astanin/python-tabulate/issues/28/feature-request-multiline-cells-and) being addressed.
Ok I see it in `cli-helpers`. I thought it was simply gone since 6a33014, sorry
@fpietka No problem! It's hard keeping track of all the dependencies 😄 
This is now fixed in the latest version. 
I misspoke. It is not fixed by default you still have to make a change in your config file. 

Change the table_format to `ascii` in your config file (~/.config/pgcli/config) and that will support multi-line strings. 

",2015-01-09 14:54:11,2017-12-15 00:00:57
1102,95,"I fixed the remarks for the pull request #83 
","Renamed escape_* functions and fixed case-insensitive compare
Looks good. Thanks for addressing those. :)

:tada: 
",2015-01-09 12:14:26,2015-01-09 18:39:47
1103,94,"PR #71 introduced a bug, where the python version that was used by travis did not match the version intended.

Also fix the problems plaguing current master builds failing under python 3, with tests! :)

@amjith
","Fix travis and build errors under python 3.
Thank you for fixing Travis as well as the breaking tests. 

Cheers! :gem: 
",2015-01-09 10:56:03,2015-01-09 17:08:02
1104,93,"Only the last query result is output.

Got:

```
$ pgcli -U postgres -h localhost _test_db
_test_db> select 1; select 2
+------------+
|   ?column? |
|------------|
|          2 |
+------------+
SELECT 1
```

Expected: PSQL

```
$ psql -U postgres -h localhost _test_db
psql (9.3.5)
Type ""help"" for help.

_test_db=# select 1; select 2;
 ?column? 
----------
        1
(1 row)

 ?column? 
----------
        2
(1 row)
```
","Multiple queries on the same line
This is a tricky one (or maybe not). 

We'll have to split by semi-colons and run them one at a time using pyscopg2 and print the results.

But the splitting has to take into account that a semi-colon could be inside a quoted string.

OT: I noticed in the pasted output, that the headers have ? around the column name. Is there a problem with displaying unicode chars? 

I _think_ sqlparse has a function for doing the splitting, I'll dig a bit and do a PR.

Re OT: as psql does the same thing I think it's the intended behavior.

This is now released in v0.12.0.

https://pypi.python.org/pypi/pgcli/0.12.0
",2015-01-09 10:02:07,2015-01-13 08:45:12
1105,92,"See #77
","Support for cancelling queries
The build is broken because the build on the current master is broken.

Thanks for doing this. 

:beetle: 
",2015-01-09 09:57:32,2015-01-09 21:10:17
1106,91,"I really like @catherinedevlin's [ipython-sql](https://github.com/catherinedevlin/ipython-sql) for getting data from postgresql into python for data munging and visualization, but it's inconvenient writing queries in ipython without autocompletion and syntax highlighting. Since this is obviously pgcli's forte, it seems like the two projects really complement each other. This is my naive attempt to combine them. The general idea is you can drop into a pgcli session from ipython, iterate a query, then quit pgcli to find the query results in your ipython workspace. 
## Requirements

ipython-sql (`pip install ipython-sql`) 
## Usage

From an ipython console (not the notebook though, it'll hang), run `%load_ext pgcli.magic` to load the extension. This also loads the ipython-sql magic if it hasn't been already. Then the command `%pgcli postgresql://yourdbhere` should start a pgcli session. Quit the session with `\q` to return to ipython. The resultset from the last successful query should be available in the local variable `_`. See ipython-sql documentation for controlling the return type.
## Example

```
In [1]: %load_ext pgcli.magic

In [2]: %pgcli postgresql://dg@localhost/temp
temp> select generate_series(5, 10), random()
+-------------------+----------+
|   generate_series |   random |
|-------------------+----------|
|                 5 | 0.546024 |
|                 6 | 0.261947 |
|                 7 | 0.19185  |
|                 8 | 0.186082 |
|                 9 | 0.944421 |
|                10 | 0.963471 |
+-------------------+----------+
SELECT 6
temp> \q
GoodBye!
6 rows affected.
Out[2]:
[(5, 0.385186035186052),
 (6, 0.114940960425884),
 (7, 0.547451738733798),
 (8, 0.333624354097992),
 (9, 0.0919555663131177),
 (10, 0.453994856681675)]

In [3]: _[0]
Out[3]: (5, 0.385186035186052)
```
## TODO
- [x] Refactor most of pgcli.main into a standalone PGCli class. This should dovetail with #23 and other editor plugins
  - [x] Support querying the PGCli object for the last successful query after leaving a cli session
  - [ ] Persist the database connection between multiple %pgcli calls. 
- [ ] Better ipython-sql integration
  - [ ] %sql magic supports working with multiple database connections, and referring to previous connections with a username@hostname alias. %sql without any connection string simply reuses the previous connection. %pgcli should either attempt to emulate this, or even get database connections directly from %sql
  - [ ] Possibly pass a resultset directly to %sql instead of having it re-evaluate the query, which is not only inefficient but also dangerous if the query is mutating
- [ ] Plotting directly in pgcli. I'm envisioning something that lets you call matplotlib and treat the column names from the most recent query as local variables, like

```
> select foo from bar;
> \pylab hist(foo)
```

which should open a figure window with a histogram of the `foo` values
","ipython magic for faster exploratory data analysis
Holy cow!! This would be awesome!! :D 

I had no idea pgcli could be used this way, but I'm glad someone does.

Would you prefer to have this PR open until all the items in the TODO list are done? 

I'd prefer to merge this as we go along to make sure the branches don't fall out of sync too much. Also it'll encourage us to do this iteratively instead of merging it all in one big chunk. Thoughts? 

BTW, it is confusing to see some of the commits from PR #42 show up in this PR. I'm not sure what to do about it. 

Sure, merging early makes sense to me. Sorry about that errant commit showing up. Can I rebase on master and push --force or will that blow something up?

You should be able to rebase and push force.  I'd say make a copy of the
files first.

On Fri, Jan 9, 2015, 06:41 darikg notifications@github.com wrote:

> Sure, merging early makes sense to me. Sorry about that errant commit
> showing up. Can I rebase on master and push --force or will that blow
> something up?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/91#issuecomment-69342046.

I _think_ that worked

> I think that worked

LOL! 

I'll give it a shot when I get back home. Thanks for doing this. This is quite brilliant.

I had to manually merge it in via command line since auto merge had some conflicts. 

It is now up to date and available in master. 

Thank you very much for doing this. This is quite a nice feature that I had not envisioned for pgcli. I'm happy you took the initiative to start this. 

I'm quite excited to see it progress through the rest of the items in the TODO. 

Especially item: 

> ""Possibly pass a resultset directly to %sql instead of having it re-evaluate the query, which is not only inefficient but also dangerous if the query is mutating"".

Thanks again for the contribution. 

Cheers!
:snail: 
",2015-01-09 02:03:16,2015-01-10 08:42:44
1107,90,"psql uses `PGHOST`, `PGPORT`, `PGUSER`, and `PGDATABASE` as it's environment variables, this is my humble suggestion that pgcli behaves the same way.
","Update environment variables to those used by psql.
Didn't notice that a similar PR was in play, my bad.  This one doesn't change any other existing behaviour so should work out of the box.  But if you want to discard it, I have no problem with that either.

Thank you for the PR. 

The other PR #42 has been merged which covers the same ground. 

Cheers! :bee:  

No problem at all.
",2015-01-08 22:47:51,2015-01-09 06:53:50
1108,89,"See #9.

Note that the new version has a slightly different API, which is why this PR is the size it is.
","Support CTRL+arrow shortcuts, bump prompt_toolkit to 0.26
Damn! You're fast. I was going to spend some time understanding the changes in API and work on upgrading. But this makes life so much easier. 

I'll test it out when I get home and merge it. Thanks!!

Thank you for taking the time to do the necessary changes to make it compatible with the new version of prompt_toolkit. 

Your contributions are appreciated very much. 

:bike: 
",2015-01-08 20:13:27,2015-01-10 07:37:40
1109,88,"SQL queries returned empty row, found out that it was caused by unicode character.

```
create table my_table (val text);
insert into my_table (val) values ('a'), ('b'), ('unicode \u2013 is – here');
```

```
my-db> select * from my_table limit 2
+-------+
| val   |
|-------|
| a     |
| b     |
+-------+
SELECT 2
my-db> select * from my_table limit 3

my-db>
```

We get the expected rows if we use the row_to_json function

```
my-db> select row_to_json(row(val)) from my_table limit 3
+--------------------------------------------+
| row_to_json                                |
|--------------------------------------------|
| {u'f1': u'a'}                              |
| {u'f1': u'b'}                              |
| {u'f1': u'unicode \\u2013 is \u2013 here'} |
+--------------------------------------------+
SELECT 3
my-db>
```
","No rows returned if a row contains unicode character
This _should_ be fixed in the latest version and I am not able to reproduce it either - what version of pgcli do you have installed?

```
$ pip list | grep pgcli
pgcli (0.10.0)
```

and I can confirm that it works correctly in 0.10.3, will close the issue.
The bug seems to be fixed in 0.10.1 by https://github.com/amjith/pgcli/commit/4aaa117cddb61e20a40ea63adc7a61d4be4e8e39

@frodeaa Can you try upgrading pgcli? 

`pip install -U pgcli`. 

yes, upgrading fixes the problem @amjith 
",2015-01-08 18:23:03,2015-01-08 19:42:24
1110,87,"See at https://github.com/msabramo/pgcli/blob/patch-5/README.rst
","README.rst: small tweaks
:+1: 

Thank you for the finer touch. :)

:tractor: 
",2015-01-08 17:26:43,2015-01-08 19:29:57
1111,86,,"README.rst: small tweaks
Replaced by #87
",2015-01-08 17:22:08,2015-01-08 17:28:23
1112,85,"This commit fixes a crash in autocompletion, when a comma character is entered before any valid sql keyword, e.g., 

```
database_name> asd,Exception in thread Thread-309:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 552, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 505, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/prompt_toolkit/__init__.py"", line 466, in run
    CompleteEvent(text_inserted=True)))
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgcompleter.py"", line 92, in get_completions
    document.text_before_cursor)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/packages/sqlcompletion.py"", line 46, in suggest_type
    return suggest_based_on_last_token(last_token, text_before_cursor, full_text)                                                                              
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/packages/sqlcompletion.py"", line 83, in suggest_based_on_last_token
    return suggest_based_on_last_token(prev_keyword, text_before_cursor, full_text)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/packages/sqlcompletion.py"", line 61, in suggest_based_on_last_token
    token_v = token.value
AttributeError: 'NoneType' object has no attribute 'value'

```

**Note for future refence:** Whenever `find_prev_keyword()` is used, a check should be made in case `None` was returned.
","Fix a crash in autocompletion
Thank you!

:koala: 
",2015-01-08 16:52:46,2015-01-08 19:50:53
1113,84,"Some very minor corrections in the README and sanity_checks.txt files
","Corrected some typos
Thank you!

:melon: 
",2015-01-08 15:29:37,2015-01-08 19:45:35
1114,83,"this patch supports table and column names that have space, special chars, non-ascii word characters and names that conflict with build in function names and keywords.

It also fixes a minor issue where the table columns where not refreshed because of a case-sensitive comparison of the tokens.

For example the following tables/columns can be autocompleted with this patch:

``` sql
CREATE TABLE ""CamelCase"" (
  ""has space"" text,
  ""has %^$&"" text,
  ""φρόνησις"" text,
  ""MIN"" text,
  ""DROP"" text,
  ""CamelCase"" text
);
CREATE TABLE ""foo bar"" (
  ""has space"" text,
  ""has %^$&"" text,
  ""φρόνησις"" text,
  ""MIN"" text,
  ""DROP"" text,
  ""CamelCase"" text
);
CREATE TABLE ""foo *@#^!$"" (
  ""has space"" text,
  ""has %^$&"" text,
  ""φρόνησις"" text,
  ""MIN"" text,
  ""DROP"" text,
  ""CamelCase"" text
);
CREATE TABLE ""εὐδαιμονία"" (
  ""has space"" text,
  ""has %^$&"" text,
  ""φρόνησις"" text,
  ""MIN"" text,
  ""DROP"" text
);
CREATE TABLE ""MIN"" (
  ""has space"" text,
  ""has %^$&"" text,
  ""φρόνησις"" text,
  ""MIN"" text,
  ""DROP"" text,
  ""CamelCase"" text
);
```
","support for table/column names which should be escaped
Thank you for adding the auto-escaping. 

I appreciate it very much. 

I'm going to merge this in, but I think there are still a few things that need to be done to make it more robust. 

eg: Auto-completion isn't working when I start a quote. 

```
SELECT * FROM ""IN
```

But I'll create a new issue for that and track it separately.

:mega: 
",2015-01-08 13:44:24,2015-01-09 06:50:32
1115,82,"`\dt *.*` and `\dt schema.*` has no effect at all. its always show public schema tables.  
","\dt schema.*
I don't know if compatibility with psql is a goal or not? since I found the `\dn` is not implemented also. 

Yes `schema` support is still pending #22. 

Compatibility with psql is indeed a goal. But it takes time to catch up with years of work. :)

`\dn` is currently pending in a PR #62. I'll merge it in once I get a chance to review it. 

Thank you for your fast response!
So this is duplicate of them, I close this one. 

Schema support is added to master. Sql statements with schema names now have auto-completion (thanks @darikg). 

But \dt schema is still broken. So I'm reopening the issue. 

\dn is available in master.

Looking into this a bit, the problem is that the \dt special command currently ignores the following argument, so no filtering of any sort is done, it just shows all public tables no matter what.

psql seems to work like the following pseudo-python:

```
# Accept an argument of the form [schema_filter.][table_filter]
if schema_filter:
    if schema_filter == '*':
        pass
    else:
        sql += "" AND n.nspname ~ '^(schema_filter)$' ""
else:
    sql += "" AND pg_catalog.pg_table_is_visible(c.oid) ""

if table_filter:
    if table_filter == '*':
        pass
    else:
        sql += "" AND c.relname ~ '^(table_filter)$' ""
```

So the biggest impediment to fixing this issue is figuring out how to parse the argument into a schema filter and table filter, converting wildcards '*' and '?' into regex syntax, and respecting double quotes

There's already functions in pgspecial.py to do the wildcard conversion and double quotes escaping. 

https://github.com/amjith/pgcli/blob/master/pgcli/packages/pgspecial.py#L706

This is now fixed in master. Thanks to @darikg. 

Can you try it out? You can install from the git repo directly:

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

@amjith  I get this error on debian, and archlinux right after launch pgcli : 

```
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 3018, in <module>
    working_set = WorkingSet._build_master()
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 614, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 627, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 805, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pgcli==0.14.0
```

You probably have an older version of pgcli installed from the git repo. 

Did you try the `pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli`? 

If you have then can you do `pip uninstall pgcli` and then try `pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli`? 

```
pip uninstall pgcli
Uninstalling pgcli:
  /usr/bin/pgcli
  /usr/lib/python2.7/site-packages/pgcli.egg-link
Proceed (y/n)? y
  Successfully uninstalled pgcli
```

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli                                        
Obtaining pgcli from git+https://github.com/amjith/pgcli.git#egg=pgcli
  Updating ./src/pgcli clone
  Running setup.py egg_info for package pgcli

Requirement already up-to-date: click>=3.2 in /usr/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: Pygments>=2.0 in /usr/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: jedi==0.8.1 in /usr/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: prompt-toolkit==0.26 in /usr/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: psycopg2>=2.5.4 in /usr/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: sqlparse>=0.1.14 in /usr/lib/python2.7/site-packages (from pgcli)
Requirement already up-to-date: docopt in /usr/lib/python2.7/site-packages (from prompt-toolkit==0.26->pgcli)
Requirement already up-to-date: six>=1.8.0 in /usr/lib/python2.7/site-packages (from prompt-toolkit==0.26->pgcli)
Requirement already up-to-date: wcwidth in /usr/lib/python2.7/site-packages (from prompt-toolkit==0.26->pgcli)
Installing collected packages: pgcli
  Running setup.py develop for pgcli

    Creating /usr/lib/python2.7/site-packages/pgcli.egg-link (link to .)
    Adding pgcli 0.14.0 to easy-install.pth file
    Installing pgcli script to /usr/bin

    Installed /root/src/pgcli
Successfully installed pgcli
Cleaning up...
```

```
$ pgcli 
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 3018, in <module>
    working_set = WorkingSet._build_master()
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 614, in _build_master
    return cls._build_from_requirements(__requires__)
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 627, in _build_from_requirements
    dists = ws.resolve(reqs, Environment())
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 805, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pgcli==0.14.0
```

That's odd. Can you try uninstalling twice and try again?

I've seen this happen occasionally. Try `pip uninstall pgcli` and then
issue that command again `pip uninstall pgcli` then try installing?
On Thu Feb 05 2015 at 9:40:21 AM fzerorubigd notifications@github.com
wrote:

> pip uninstall pgcli
> Uninstalling pgcli:
>   /usr/bin/pgcli
>   /usr/lib/python2.7/site-packages/pgcli.egg-link
> Proceed (y/n)? y
>   Successfully uninstalled pgcli
> 
> pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
> Obtaining pgcli from git+https://github.com/amjith/pgcli.git#egg=pgcli
>   Updating ./src/pgcli clone
>   Running setup.py egg_info for package pgcli
> 
> Requirement already up-to-date: click>=3.2 in /usr/lib/python2.7/site-packages (from pgcli)
> Requirement already up-to-date: Pygments>=2.0 in /usr/lib/python2.7/site-packages (from pgcli)
> Requirement already up-to-date: jedi==0.8.1 in /usr/lib/python2.7/site-packages (from pgcli)
> Requirement already up-to-date: prompt-toolkit==0.26 in /usr/lib/python2.7/site-packages (from pgcli)
> Requirement already up-to-date: psycopg2>=2.5.4 in /usr/lib/python2.7/site-packages (from pgcli)
> Requirement already up-to-date: sqlparse>=0.1.14 in /usr/lib/python2.7/site-packages (from pgcli)
> Requirement already up-to-date: docopt in /usr/lib/python2.7/site-packages (from prompt-toolkit==0.26->pgcli)
> Requirement already up-to-date: six>=1.8.0 in /usr/lib/python2.7/site-packages (from prompt-toolkit==0.26->pgcli)
> Requirement already up-to-date: wcwidth in /usr/lib/python2.7/site-packages (from prompt-toolkit==0.26->pgcli)
> Installing collected packages: pgcli
>   Running setup.py develop for pgcli
> 
> ```
> Creating /usr/lib/python2.7/site-packages/pgcli.egg-link (link to .)
> Adding pgcli 0.14.0 to easy-install.pth file
> Installing pgcli script to /usr/bin
> 
> Installed /root/src/pgcli
> ```
> 
> Successfully installed pgcli
> Cleaning up...
> 
> $ pgcli
> Traceback (most recent call last):
>   File ""/usr/bin/pgcli"", line 5, in <module>
>     from pkg_resources import load_entry_point
>   File ""/usr/lib/python2.7/site-packages/pkg_resources/**init**.py"", line 3018, in <module>
>     working_set = WorkingSet._build_master()
>   File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 614, in _build_master
>     return cls._build_from_requirements(__requires__)
>   File ""/usr/lib/python2.7/site-packages/pkg_resources/**init**.py"", line 627, in _build_from_requirements
>     dists = ws.resolve(reqs, Environment())
>   File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 805, in resolve
>     raise DistributionNotFound(req)
> pkg_resources.DistributionNotFound: pgcli==0.14.0
> 
> —
> 
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/issues/82#issuecomment-73090585.

I do it 3 time, first just ask my to remove, next it print a bunch of file for delete and third time : 

```
pip uninstall pgcli
Cannot uninstall requirement pgcli, not installed
```

And after installing, the problem still there. 

```
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 3018, in <module>
    working_set = WorkingSet._build_master()
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 612, in _build_master
    ws.require(__requires__)
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 918, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/usr/lib/python2.7/site-packages/pkg_resources/__init__.py"", line 805, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pgcli==0.14.0

```

Do I miss something? :/

Can you jump on https://gitter.im/amjith/pgcli? 

@amjith thanks for your time and help. I can confirm that the the `\dt` is working as expected. 
and thank you @darikg  
",2015-01-08 12:25:39,2015-02-05 19:39:28
1116,81,"More useful to see on PyPI.
","setup.py: license='BSD'
I have vendored in the Tabulate package, which is licensed under MIT. This might change in the future when a new version of Tabulate is released that has the changes I need.

So I wouldn't want to blanket it under BSD without the author's consent. 

Gotcha.

I don't think we'll do this for a while, since we've vendored in OrderedDict now. I'm going to close this for now.

@msabramo It took us a while, but we're finally ready to call pgcli 'BSD' licensed. We're no longer packaging in tabulate library. 

Looks like the PR has grown outdated, but rest assured I'll be updating the setup.py with your change. 

Thank you!",2015-01-08 11:19:56,2017-06-26 17:43:40
1117,80,"A PEP 440 compliant version of Jedi was released to PyPI. See https://github.com/davidhalter/jedi/issues/521#issuecomment-68700893
","setup.py: Remove jedi hack
Not quite yet. I still see problems being reported by people trying to install it. I'll merge this in once the next version of jedi is released. :)

Thanks! :coffee: 

Jedi 0.9.0 has been released https://github.com/davidhalter/jedi/issues/566

Awesome!

I can't merge this PR as is, since it has fallen out of sync. I've created a new PR #226.
",2015-01-08 11:18:19,2015-04-29 06:19:28
1118,79,"See at https://github.com/msabramo/pgcli/blob/patch-1/README.rst
","Update README.rst
Thanks!

:confetti_ball: 
",2015-01-08 11:13:29,2015-01-08 19:47:25
1119,78,"Do only one query for all columns, instead of len(tables) queries. Should fix #25.

Note that as I wanted to have tests, you should probably merge in #75 first. For an accurate diff, see the last commit!
","Faster startup
Looks good. I appreciate you taking the initiative to address #25. 

I can't get the tests to pass. I'm having a hard time tracking down why that's the case, since I see the create_database call. I'll dig in a little bit and see if I can find out what's going on.

Thanks!

Merged via command line (caveman style). 

Thank you for the performance boost. :apple: 
",2015-01-08 10:58:33,2015-01-09 08:26:23
1120,77,"When using psql, I can cancel a slow query (e.g. when I accidentally forgot a LIMIT clause) by pressing ctrl-c. This would be useful for pgcli, too.
","Canceling slow query
Yes. That would be useful. I'll look into this. 

Thank you!

Note to dev:

Check out how to how to hook up [on_abort](https://github.com/jonathanslenders/python-prompt-toolkit/blob/master/prompt_toolkit/__init__.py#L233) to cancel a query. 

[Psycopg2.cancel](http://initd.org/psycopg/docs/connection.html#connection.cancel)

This is now available via the pr #92 by @macobo. 

It will be available in the next release. 

If you're itching to try it out you can install from master using the following command: 

```
pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli
```

That was quick! Thanks!

On Fri, Jan 9, 2015 at 10:11 PM, Amjith Ramanujam notifications@github.com
wrote:

> This is now available via the pr #92
> https://github.com/amjith/pgcli/pull/92 by @macobo
> https://github.com/macobo.
> 
> It will be available in the next release.
> 
> If you're itching to try it out you can install from master using the
> following command:
> 
> pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/issues/77#issuecomment-69399610.

This is now released in 0.11.0. 

https://pypi.python.org/pypi?:action=display&name=pgcli&version=0.11.0
",2015-01-08 10:35:22,2015-01-10 06:13:44
1121,76,"Using \c with an invalid database name result in crash. 

```
postgres> \c aaa
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.2', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 119, in cli
    click.secho(e.pgerror, err=True, fg='red')
  File ""/usr/local/lib/python2.7/dist-packages/click/termui.py"", line 381, in secho
    text = style(text, **styles)
  File ""/usr/local/lib/python2.7/dist-packages/click/termui.py"", line 354, in style
    return ''.join(bits)
TypeError: sequence item 1: expected string, NoneType found
```
","\c invalid_database 
Yup! I found out about it earlier today. :(

This will be fixed in the next release. 

This now fixed by 803e460. 

Fixed in 0.10.3. 

https://pypi.python.org/pypi/pgcli/0.10.3
",2015-01-08 07:11:35,2015-01-08 07:56:14
1122,75,"Note that this is not meant to be a complete solution, rather an experiment to see what tests that use postgres could look like. Any and all feedback is welcome, @amjith.

See also #68 
","Simplistic db tests 
Overall I like the structure of the test. I'd recommend adding the first test and then refactoring the pieces such as moving the ''.join(output) into a format_output() function. But it's not an absolute requirement. I just prefer small, atomic commits. :)

If you can address the `output` being a list, I'm happy with the new addition.

Thanks for the comments - fixed and rebased!

I can't get the test to pass. I created a user called `postgres` and tried it. 

Traceback:

```

        if dsn is None:
            if not items:
                raise TypeError('missing dsn and no parameters')
            else:
                dsn = "" "".join([""%s=%s"" % (k, _param_escape(str(v)))
                    for (k, v) in items])

>       conn = _connect(dsn, connection_factory=connection_factory, async=async)
E       OperationalError: FATAL:  database ""_test_db"" does not exist

async      = False
connection_factory = None
cursor_factory = None
database   = None
dsn        = 'user=postgres host=localhost dbname=_test_db'
host       = 'localhost'
items      = [('user', 'postgres'), ('host', 'localhost'), ('dbname', '_test_db')]
k          = 'dbname'
kwargs     = {'dbname': '_test_db'}
password   = None
port       = None
user       = 'postgres'
v          = '_test_db'

.tox/py27/lib/python2.7/site-packages/psycopg2/__init__.py:164: OperationalError
================================================================================ 50 passe
```

My bad. The `postgres` user I created didn't have privileges to create a db. It is fixed now.

I'll merge this in by hand since it won't merge cleanly. 

Thanks a lot!! :wine_glass: 

The changes in this PR are now merged in by the subsequent PR #78. 

Thank you! :clap: 

No problem, glad to have helped!

Sad to see that the UX of tests was that bad, I just might refactor some code underneath.
",2015-01-07 22:26:03,2015-01-09 08:27:22
1123,74,,"Fix typos in README
Thank you!

:100: 
",2015-01-07 22:21:22,2015-01-07 22:22:34
1124,73,"I have a WIP formula, I just need to figure out how to write a proper test for it.

You can try it by running

```
brew install https://raw.githubusercontent.com/tvon/homebrew/pgcli/Library/Formula/pgcli.rb
```

Any feedback would be appreciated.
","Homebrew formula
Awesome!! I'll give it a shot. 

I notice that you have `depends_on :postgresql`. Will that force an install of postgres via brew even if someone has postgres installed via a different mechanism (say PostgresApp or MacPorts)? 

This is true, I can try removing that dep as it may not be necessary for psycopg to build.

> On Jan 7, 2015, at 5:43 PM, Amjith Ramanujam notifications@github.com wrote:
> 
> Awesome!! I'll give it a shot.
> 
> I notice that you have depends_on :postgresql. Will that force an install of postgres via brew even if someone has postgres installed via a different mechanism (say PostgresApp or MacPorts)?
> 
> —
> Reply to this email directly or view it on GitHub.

Regarding a test. Can you just do `pgcli --help`? 

The url for pgcli seems to point to github instead of pypi. I'd probably set it to pypi (https://pypi.python.org/packages/source/p/pgcli/pgcli-0.10.2.tar.gz) so it's similar to the rest of the packages. 

Ohhh, looking forward to when this works properly. (:

Switched to pypi and bumped to 0.10.2.

As for postgres, it is needed for psycopg2 to build, and AFAIK homebrew offers no means to check for existing/external installations outside of homebrew.

I suspect `pgcli --help` will be considered insufficient by homebrew since they don't like people using `pgcli --version` (as an example).

I think having 'postgres' as a dependency is reasonable in this case.

I can't think of a better test than pgcli --help since this is an interactive app. 

Thanks for updating the url to pypi. 

Is there an automated way to compute the sha for all those packages?

@tvon Will you be submitting a PR to homebrew or should I take over from here? 

Please let me know. 

@amjith I went ahead and submitted https://github.com/Homebrew/homebrew/pull/35709

There is no current means to compute the shas for the dependencies, I did it the hard way... Though it could be easily scripted.

Thank you for submitting the PR.

After I asked you about the sha I went researching a little bit and found this script in the homebrew [cookbook](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md#formula-cookbook).

https://raw.githubusercontent.com/tdsmith/labmisc/master/mkpydeps

> I notice that you have depends_on :postgresql. Will that force an install of postgres via brew even if someone has postgres installed via a different mechanism (say PostgresApp or MacPorts)?

Two scenarios:
- If pgcli is installed from a bottle (a Homebrew-generated binary package), `depends_on :postgresql` will force an installation of Homebrew postgresql.
- If pgcli is installed from source, either because Homebrew does not provide a bottle or a user passes `--build-from-source` to `brew install`, Homebrew postgresql will only be installed if there is not another postgresql in $PATH.

Most users will experience the first condition.

That doesn't really answer the original question though.
If I read your reply correctly, the answer is: _yes_, a brew install of pgcli will force a brew installation of postgresql even if the user previously installed Postgres via other means.

Could this lead to problems? (Especially for lesser experienced users.)

Ah, yes, installing pgcli will force a brew installation of postgresql.

Generally speaking I don't think this will cause problems, but here are some potential pitfalls (in rough order of likelihood):
1. The brew install is in the `PATH` before the non-brew install and the user relies on the command line tools.  This may or may not be an issue depending on the tools being used, but it's worth mentioning (and easy for the user to check).
2. The non-brew installation exists in the same place as homebrew.  E.g., if the user installed homebrew by the recommended means to `/usr/local` and also has postgresql installed to `/usr/local` then the postgresql installation by homebrew will fail in the final step of the installation (where it links installed files to `bin` and `lib`) and pgcli won't be installed.
3. The brew version of postgresql is protocol-incompatible with the non-brew installation.  I don't think this is even currently possible (I think you can use psql 8.3 to connect to a postgres 9.4 server).

Does that answer your question?

@tvon Thanks for working through the issues and addressing the requests of the homebrew maintainers. 

I see that it is now merged. I'm grateful for your help and resolve in getting this done. :)

I'll update site to include the brew install method in install pages. 

:guitar: 

http://pgcli.com/install is updated. 

Thanks!
",2015-01-07 21:49:35,2015-01-12 08:11:05
1125,72,"Standard pgsql supports a lot of \dX commands, for example \dn (to show schemas), \ds to show sequences, etc., but pgcli only seems to know about \d, \dv, \dt and \dt. 

Any other \dX gives a syntax error:

```
postgres> \dn
ERROR:  syntax error at or near ""\""
LINE 1: \dn
        ^
```
","Add support for several ""\dX"" commands
The rest of the commands are slowly being added (in fact, there is a pending PR for `\dn`). 

Unfortunately this will be a slow progress to add them in one at a time since I can't just pass on the special commands directly to Postgres. Each command requires reimplementing the functionality from psql into pgcli. 

So I'll start adding new ones. 

Added `\dn` in version 0.11.0

https://pypi.python.org/pypi?:action=display&name=pgcli&version=0.11.0

All the special commands requested here are now added. 

\dv, \dn, \ds. 

You can install directly from the git repo to test it out: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```
",2015-01-07 21:38:32,2015-02-12 08:10:44
1126,71,"Current version of pgcli runs tests too many times in travis, total 12 times instead of 4.

Example: https://travis-ci.org/amjith/pgcli/builds/46215230
Idea for the solution was taken from https://github.com/eventlet/eventlet/blob/master/.travis.yml
","Travis - run tox only once per python version
:+1:

Thank you! Thanks for adding 3.4 as well. 

:cake: 
",2015-01-07 20:22:28,2015-01-07 22:10:44
1127,70,"@herlo Volunteered to build a Fedora RPM package for pgcli. Thank you for your help!
","RPM Package
If you need more people working on this, let me know.

Feel free to start on it, I'm likely going to be a little while before I
can get started.
On Jan 9, 2015 6:31 AM, ""Dionysis Grigoropoulos"" notifications@github.com
wrote:

> If you need more people working on this, let me know.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/issues/70#issuecomment-69334112.

:+1: 

@amjith Is this still an issue? I can help on this one.

I have some experience in it: https://github.com/sobolevn/git-secret/blob/master/Makefile#L111

@sobolevn I'd welcome any help. This is not a solved problem. Thank you for your help. 

Isn't is solved via https://github.com/dbcli/pgcli/blob/master/Vagrantfile#L79 ?
`DEVELOP.rst` also says that there's a way to create RPM: https://github.com/dbcli/pgcli/blob/master/DEVELOP.rst#building-rpm-and-deb-packages

That didn't work out as I expected. When I created an RPM package it wouldn't install inside a test Centos container. I think there was some problem with assuming that some files existed or hardcoded path. 

I should probably remove that file and update the docs. 

Ok, I have managed to run it. But there's an issue with `prompt_toolkit`.

## Environment

I have used this docker-image: https://hub.docker.com/r/sobolevn/git-secret with `fedora-latest` tag.

> [root@30722cfb4b5b code]# yum install -y python python-devel postgresql postgresql-server postgresql-devel createrepo

## Preparation

> [root@bc3d887d95d3 code]# gem install fpm
> Fetching: fpm-1.6.3.gem (100%)
> Successfully installed fpm-1.6.3
> Parsing documentation for fpm-1.6.3
> Installing ri documentation for fpm-1.6.3
> Done installing documentation for fpm after 1 seconds
> 1 gem installed

## Dependencies

> [root@30722cfb4b5b pgcli]# pip install .
> [root@30722cfb4b5b pgcli]# pip uninstall -y pgcli prompt-toolkit # fixing the prompt-toolkit bug
> [root@30722cfb4b5b pgcli]# mkdir repo && cd repo
> [root@30722cfb4b5b repo]# pip freeze | xargs -n1 fpm -s python -t rpm --python-pip pip
> You are using pip version 8.0.2, however version 8.1.2 is available.
> You should consider upgrading via the 'pip install --upgrade pip' command.
> Created package {:path=>""python-click-6.6-1.noarch.rpm""}
> Created package {:path=>""python-configobj-5.0.6-1.noarch.rpm""}
> Created package {:path=>""python-humanize-0.5.1-1.noarch.rpm""}
> Created package {:path=>""python-iniparse-0.4-1.noarch.rpm""}
> Created package {:path=>""python-pgspecial-1.6.0-1.noarch.rpm""}
> Created package {:path=>""python-psycopg2-2.6.2-1.x86_64.rpm""}
> Created package {:path=>""python-pygments-2.1.3-1.noarch.rpm""}
> Created package {:path=>""python-setproctitle-1.1.10-1.x86_64.rpm""}
> Created package {:path=>""python-six-1.10.0-1.noarch.rpm""}
> Created package {:path=>""python-sqlparse-0.2.1-1.noarch.rpm""}
> Created package {:path=>""python-wcwidth-0.1.7-1.noarch.rpm""}

## Package creation

At this point due to some kind of bug (possibly https://github.com/jordansissel/fpm/issues/65) I had to comment out the line `# 'prompt_toolkit>=1.0.0,<1.1.0',`. Another option is to provide all the deps by hand with `--no-auto-depends` flag. I will also create a separate bug report for it.

> [root@30722cfb4b5b repo]# fpm -s python -t rpm --after-install ../post-install --after-remove ../post-remove -d python-devel -d postgresql-devel -d python2-prompt_toolkit --python-pip pip ../setup.py
> Created package {:path=>""python-pgcli-1.2.0-1.noarch.rpm""}

## Creating repo

I was just following the steps from http://stackoverflow.com/questions/13876875/how-to-make-rpm-auto-install-dependencies I have also provided these options to disable caching: `metadata_expire=1 mirrorlist_expire=1`

> [root@30722cfb4b5b repo]# createrepo .
> Spawning worker 0 with 6 pkgs
> Spawning worker 1 with 6 pkgs
> Workers Finished
> Saving Primary metadata
> Saving file lists metadata
> Saving other metadata
> Generating sqlite DBs
> Sqlite DBs complete

## Package information

> [root@30722cfb4b5b repo]# rpm -qip python-pgcli-1.2.0-1.noarch.rpm 
> Name        : python-pgcli
> Version     : 1.2.0
> Release     : 1
> Architecture: noarch
> Install Date: (not installed)
> Group       : default
> Size        : 391133
> License     : LICENSE.txt
> Signature   : (none)
> Source RPM  : python-pgcli-1.2.0-1.src.rpm
> Build Date  : Sat Oct  8 10:01:23 2016
> Build Host  : 30722cfb4b5b
> Relocations : / 
> Packager    : @30722cfb4b5b
> Vendor      : none
> URL         : http://pgcli.com
> Summary     : CLI for Postgres Database. With auto-completion and syntax highlighting.
> Description :
> CLI for Postgres Database. With auto-completion and syntax highlighting.

## Checking for deps

> [root@30722cfb4b5b repo]# rpm -qRp python-pgcli-1.2.0-1.noarch.rpm 
> /bin/sh
> /bin/sh
> postgresql-devel
> python-click >= 4.1
> python-configobj >= 5.0.6
> python-devel
> python-humanize >= 0.5.1
> python-pgspecial >= 1.6.0
> python-psycopg2 >= 2.5.4
> python-pygments >= 2.0
> python-setproctitle >= 1.1.9
> python-sqlparse >= 0.2.0
> python-sqlparse < 0.3.0
> python-wcwidth >= 0.1.6
> python2-prompt_toolkit
> rpmlib(CompressedFileNames) <= 3.0.4-1
> rpmlib(PayloadFilesHavePrefix) <= 4.0-1

## Testing

> [root@30722cfb4b5b repo]# yum install python-pgcli
> Redirecting to '/usr/bin/dnf install python-pgcli' (see 'man yum2dnf')
> 
> My Awesome Repo                                 3.0 MB/s | 6.9 kB     00:00  
> Dependencies resolved.
> ...

Running:

> [root@30722cfb4b5b repo]# pgcli
> could not connect to server: No such file or directory
>   Is the server running locally and accepting
>   connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5432""?

Sorry about the delayed response. I've run into issues with psycopg2 when I generated an rpm with the fpm package. 

Something about the python-dev package and not having the right requirement for it. 

Try ``pip install --user -U pip`` before you call ``fpm`` (you need pip>8 for proper PyPI handling). At least on Xenial creating a DEB shows no problems, and creates this for dependencies:

    Depends: python-pgspecial (>= 1.8.0), python-click (>= 4.1), python-pygments (>= 2.0),
     python-prompt-toolkit (>= 1.0.10), python-prompt-toolkit (<< 1.1.0), python-psycopg2 (>= 2.5.4),
     python-sqlparse (<< 0.3.0), python-sqlparse (>= 0.2.2), python-configobj (>= 5.0.6),
     python-humanize (>= 0.5.1), python-wcwidth (>= 0.1.6), python-setproctitle (>= 1.1.9)

Any update on this?

We'd really like to have it properly packaged for os-wide version control and for deployment to servers that we don't want to install pip on.

I made a quick and dirty package for CentOS 7 using [fpm](https://github.com/jordansissel/fpm)

```bash
fpm -s python -t rpm --python-pip pip pgcli
```

[python-pgcli-1.7.0-1.noarch.rpm.zip](https://github.com/dbcli/pgcli/files/1158072/python-pgcli-1.7.0-1.noarch.rpm.zip)

And for Debian 8/9:

```bash
fpm -s python -t deb --python-pip pip pgcli
```

[python-pgcli_1.7.0_all.deb.zip](https://github.com/dbcli/pgcli/files/1158081/python-pgcli_1.7.0_all.deb.zip)

@sammcj I've search at https://bugzilla.redhat.com/ but there's no request for it (yet). I'll have a look if I can use the mysql package as a template for a pgcli package.

Maybe I can combine this with my attempt to get mycli in EPEL (CentOS repository).
It doesn’t have to be in the official RedHat repo!

You could for example use packagecloud.io to host an rpm repo for it.

--
Sam

> On 19 Jul 2017, at 9:26 pm, Dick Marinus <notifications@github.com> wrote:
> 
> @sammcj I've search at https://bugzilla.redhat.com/ but there's no request for it (yet). I'll have a look if I can use the mysql package as a template for a pgcli package.
> 
> Maybe I can combine this with my attempt to get mycli in EPEL (CentOS repository).
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 

Or bintray
Thanks, those are great suggestions, but I'm using the .spec files from the RPMs which are already in Fedora so I think I should keep it at RedHat. Fedora has COPR where everyone can host/build RPMs, I'm already using that for a EPEL mycli repository.
@meeuw Is this now addressed? Can we close this? 
nope, haven't finished this
Does anyone want help landing this?  Is there any partial work to land?

A friend pointed out your request for assistance on your [main page](https://www.pgcli.com/).  I've spent most of the last few months doing packaging a python application.  I'm happy to help if help is still desired.
Hi @chicks-net! Thanks for offering your help!
I've submitted it as a package for Fedora but it isn't accepted (and I don't see any progress). I need a supporter from Red Hat / Fedora to be accepted as a packager.
https://bugzilla.redhat.com/show_bug.cgi?id=1570551

I'm not sure for what OS you'd like to have a package but I have created copr packages here:
https://copr.fedorainfracloud.org/coprs/meeuw/pgcli/",2015-01-07 20:10:18,2019-10-17 04:09:54
1128,69,"See #58 
","Fix syntaxerror for special commands like \d+
Great!

Thank you for fixing that. :ice_cream: 
",2015-01-07 19:38:08,2015-01-07 22:47:14
1129,68,"It's currently quite hard to make sure that no new regressions are introduced while adding new functionality or fixing bugs.

I would propose adding support for a tests that have access to a running postgres instance and can use it to run commands against. If postgres is not running, such tests would be skipped.

Travis [does have support for postgres](http://docs.travis-ci.com/user/using-postgresql/) and with some experimentation I'm sure turning it on in wouldn't be a problem.

@amjith, how do you feel about this? Would it be something that agrees with your plans for the project?
","Database access in tests
Yes. That is indeed in the grand plan. https://github.com/amjith/pgcli/blob/master/tests/test_plan.wiki

Just haven't gotten enough hours in a day. :) 

Woot. We'll see, maybe I'll throw something together. :)

Cheers!

I think this can now be closed! :)
",2015-01-07 19:35:31,2015-01-09 09:05:51
1130,67,"Is it easy to include double quotes around tables or columns that contain capital letters for auto-complete?  If quotes are not included, then postgres takes that name, puts it in all lowercase, does a case-sensitive comparison, and does not find the column or table.  Put it in quotes, it skips the lowercase step and finds it.
","Auto-complete double quotes for tables/columns with capital letters
Yes it would be a useful feature and I want to do it.

It's hard to tell if it'll be easy to do or not. It'll require some parsing changes to parse_utils file. 

https://github.com/amjith/pgcli/blob/master/pgcli/packages/parseutils.py#L11

You're welcome to take a stab at it.

hi,
i submitted a pull request (#83) that adds double quote escapes for table/column names with spaces, symbols, non-ascii chars and mixed-cased letters.

PR #83 overlaps with this feature request. It add auto-escaping to the columns/tables that are keywords or Uppercased or spaces. But it doesn't do auto-completion if the user opens a double quote. 

So I'm leaving this issue open to track that feature. :)

Cheers!

Hi,

yes I noticed this too but I wasn't sure what had to changed. Maybe just the `cleanup_regex` in `parseutils.py`?
If it's something that requires more work you could give me some pointers an i'll look into it ... but maybe your quicker doing it yourself.

I think it should be a as simple as adding/removing stuff in the [cleanup_regex](https://github.com/amjith/pgcli/blob/master/pgcli/packages/parseutils.py#L11). 

I haven't had time to deep dive into the code since I announced it. Barely keeping up with reviewing PRs and answering Issues. You're welcome to take a stab at it, otherwise I hope to spend some time this weekend to work on it. :)

Cheers!

This commit afef77a6193931915d2cbf6c77b3295f6c64b57d fixes the auto-completion for quoted tables/columns that are auto-escaped. 

This is now released in v0.12.0.

https://pypi.python.org/pypi/pgcli/0.12.0
",2015-01-07 19:04:29,2015-01-13 08:44:15
1131,66,"I just installed pgcli.  Sometimes, \d works.  Other times it doesn't. 

```
giftgram_dev> \d sent_giftgrams
local variable 'indexdef' referenced before assignment
```

Also, \h doesn't work for me:

```
giftgram_dev> \h alter TABLE alter COLUMN
ERROR:  syntax error at or near ""\""
LINE 1: \h alter TABLE alter COLUMN
        ^
```

Thanks for starting this project!
","weird bugs after trying out pgcli
Hrm. I thought I had tested all the code paths for \d but I'll start adding some tests to make sure things work ok. \d is a bit of a beast since it can be called on a table or an index or a view or sequence etc. So there is probably some branch in the code path I missed. I'll take a look. 

\h is not yet implemented. Unfortunately the back-slash commands can't be passed on directly to the database. They are implemented by `psql`, so I have to implement them one at a time to duplicate it. 

Can you tell me what is the type of sent_giftgrams in your example? Is it a table/view/seq/index or something else? 

Also what is the version of Postgres?

Hey, thanks for writing back!

I'm using 9.3.

Here is the \d output for sent_giftgrams:

Sorry about the formatting.

```
> \d sent_giftgrams
                             Table ""public.sent_giftgrams""
    +-------------------------+--------------------------+------------------------+
    |         Column          |           Type           |       Modifiers
       |
    +-------------------------+--------------------------+------------------------+
    | gg_uuid                 | uuid                     | not null
      |
    | recipient_email_address | email_address_type       |
       |
    | sent                    | timestamp with time zone |
       |
    | delivery_datetime       | timestamp with time zone |
       |
    | when_to_deliver         | citext                   | not null
      |
    | shipper                 | citext                   |
       |
    | tracking_number         | text                     |
       |
    | inserted                | timestamp with time zone | not null default now() |
    | updated                 | timestamp with time zone |
       |
    | easypost_id             | text                     |
   |
| bad_tracking_data       | boolean                  |
   |
| recipient_text_number   | usa_phone_number_type    |
   |
+-------------------------+--------------------------+------------------------+
Check constraints:
    ""email_giftgrams_check"" CHECK (shipper IS NULL OR shipper IS NOT NULL
AND tracking_number IS NOT NULL)
    ""email_giftgrams_check1"" CHECK (when_to_deliver <> 'after
delivery'::citext OR shipper IS NOT NULL AND tracking_number IS NOT NULL)
    ""email_or_sms_not_null"" CHECK (recipient_email_address IS NOT NULL OR
recipient_text_number IS NOT NULL)
Foreign-key constraints:
    ""email_giftgrams_shipper_fkey"" FOREIGN KEY (shipper) REFERENCES shippers(title) ON UPDATE CASCADE ON DELETE CASCADE
    ""email_giftgrams_when_to_deliver_fkey"" FOREIGN KEY (when_to_deliver) REFERENCES when_to_deliver_allowed_values(title) ON UPDATE CASCADE ON DELETE CASCADE
    ""giftgrams_email_giftgrams_fkey"" FOREIGN KEY (gg_uuid) REFERENCES giftgrams(gg_uuid) ON UPDATE CASCADE ON DELETE CASCADE
Triggers:
    email_giftgrams_set_updated_column BEFORE UPDATE ON sent_giftgrams FOR EACH ROW EXECUTE PROCEDURE set_updated_column()

```

I found the code path that was referencing the wrong arg. It is now fixed. 

Thanks for reporting it. :green_apple: 
",2015-01-07 15:46:12,2015-01-14 06:02:38
1132,65,"I expected pgcli to understand all the params of psql, including `-d`/`--dbname` for database name. It would be a nice tweak if it could work as a drop in for psql as far as possible.
","Should understand -d param
Yes it should. I'll add that in. 

Thank you!
",2015-01-07 14:45:55,2015-01-14 05:53:58
1133,64,"I just installed using `pip install pgcli` (using Python + pip from Homebrew). I get this traceback error trying to run the `pgcli` command:

``` shell
~ ❯ pgcli gadm
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""build/bdist.macosx-10.10-x86_64/egg/pkg_resources.py"", line 2912, in <module>
  File ""build/bdist.macosx-10.10-x86_64/egg/pkg_resources.py"", line 550, in _build_master
  File ""build/bdist.macosx-10.10-x86_64/egg/pkg_resources.py"", line 563, in _build_from_requirements
  File ""build/bdist.macosx-10.10-x86_64/egg/pkg_resources.py"", line 742, in resolve
pkg_resources.DistributionNotFound: jedi>=0.8.1
```

Looks like an issue with the jedi package, but it shows that it's installed:

``` shell
~ ❯ pip show jedi                                                                                                                                                                  ⏎

---
Name: jedi
Version: 0.8.1-final0
Location: /usr/local/lib/python2.7/site-packages
Requires:
```
","Error with jedi dependency
I'm having the same issue, also with Python/pip from Homebrew. Based off of [this](https://github.com/tkf/emacs-jedi/issues/184), I think it's got something to do with the `-final0` tag on the version. I also attempted to upgrade jedi to make sure something weird wasn't going on, but that didn't help. 

According to yolk, the version we have is all that's available. 

Yeah this is a known issue caused by enforcing PEP 440 in the recent days. 

Please try `pip install jedi==0.8.1`, that should fix it. 

ref: https://github.com/davidhalter/jedi/issues/521

Thanks, @amjith - that worked, just had to delete the temp install directory in `/private/var` first, then reinstalled.

:+1: worked for me

I've added an explicit dependency for Jedi in pgcli's setup.py file (https://github.com/amjith/pgcli/blob/master/setup.py#L28). 

This shouldn't happen anymore with pgcli version 0.10.2 and above. 
",2015-01-07 14:13:51,2015-01-07 19:52:01
1134,63,"Hi @amjith
I've added an expanded output flag, it attempts to emulate the psql version as much as possible.
Unfortunately I couldn't find a nice way of doing this with tabulate so added my own `expanded.py`.
Let me know if anything needs modified!

Thanks
","Add expanded output (\x) support
Thank you for adding this, I appreciate it very much. I'll have to spend a bit more time on this. 

In the meantime, it looks like the tests are failing on Python 3. https://travis-ci.org/amjith/pgcli/builds/46178430

I pulled it locally and tested it out. It works beautifully. Thank you!!

If you can address the two comments mentioned above, I'll have no concerns with merging this in. 

:evergreen_tree: 

Oh and thanks for adding tests!! Very much appreciated. 

Merging this in, so I can make it work for Python 3. 

Thanks again @stuartquin. 

:cocktail: 

Merged it via command line to resolve some conflicts. 

Thank you! 
",2015-01-07 10:49:24,2015-01-09 07:50:10
1135,62,"This command is used in standard psql for listing of schemas
","Add support of \dn [PATTERN] command
Apart from the pattern conversion stuff, things look good. If you can update that, I'll test it locally and merge it in. 

Thanks for doing this.

:+1: Thank you!!

Looks good. :soccer: 
",2015-01-07 10:48:53,2015-01-09 04:51:20
1136,61,,"README fix for #59
Thanks for fixing it in Readme. 

I've also fixed the site. Thanks for reporting. 

:+1: 
",2015-01-07 10:10:37,2015-01-07 16:02:41
1137,60,"Listed pretty printing as one of features.
","Update for README.rst features
Thank you! 

:100: 
",2015-01-07 09:57:56,2015-01-07 16:16:36
1138,59,"Hi,

there is an error on install page, it should be 

sudo easy_install pip not sudo easy_install install pip
","install page
I guess you meant the `sudo easy_install install pgcli` error and not `sudo easy_install install pip`, right?

nope :) there's no install command in easy_install 

Re-read my question :smile: 

ok, I ment every occurence of easy_install on http://pgcli.com/install :)

easy_install install pgcli  -> easy_install pgcli
sudo easy_install install pip -> sudo easy_install pip

Aha then you should submit your issue here https://github.com/amjith/pgcli.com/issues

Merged and updated. Thank you for catching that. 
",2015-01-07 09:57:50,2015-01-07 17:53:12
1139,58,"searchdb> \d+
ERROR:  syntax error at or near ""\""
LINE 1: \d+
        ^

searchdb> \l+
ERROR:  syntax error at or near ""\""
LINE 1: \l+
        ^
Looks like they are not properly parsed (Are you using Python ""cmd"" based REPL ?)
These are Python syntax errors clearly.
","Commands with + at end fails
This is a bug. I'll take a look. 

I'm not using the 'cmd' module for the REPL. I'm using https://github.com/jonathanslenders/python-prompt-toolkit to build the repl. 

Fixed in 0.10.3

https://pypi.python.org/pypi/pgcli/0.10.3
",2015-01-07 09:00:03,2015-01-08 07:56:49
1140,57,"searchdb> \d cacheaddresslookup
coercing to Unicode: need string or buffer, int found

This is clearly coming from Python, when you are trying to convert a int to a string without a proper cast or format. 
","\d <table> fails
If you're using 0.10.0 of pgcli, can you try updating it. I just released 0.10.1 that fixes a bug related to unicode.

If that doesn't fix it, can you send me the output of `pip freeze`? Also is this error only happening on that particular table or is it happening for all the tables? 

In case this is about the latest version:

You can also look at `~/.pgcli.log` and copy the output of traceback, which should be one of the last lines in the file.

@pythonhacker Can you please confirm if you're still seeing the issue on the latest version?

Version 0.14.0 released to PyPI.

Multiple fixes to unicode handling in this release. 

```
pip install -U pgcli
```
",2015-01-07 08:58:36,2015-01-31 23:57:42
1141,56,"Instead of using the parse_url function try the urlparse from the std lib. 
","Use urlparse to parse the postgres:// url
Version 0.14.0 released to PyPI.

```
pip install -U pgcli
```
",2015-01-07 08:20:14,2015-01-31 23:57:53
1142,55,"Because it uses click.termui.secho() with the keyword argument 'err' that has
been added in click 3.2.

Fixes #54
","click version must be >= 3.2
Thank you for checking it with different versions of `click`. 

I appreciate the PR. :icecream: 
",2015-01-07 08:11:42,2015-01-07 08:15:30
1143,54,"When an error happens, it calls `click.termui.secho()` with a keyword argument `err`.
This keyword argument has been introduced in the release 3.2 of click, so if a
version 3.0 or 3.1 is used, and any error happens, such as if I do:

```
$ pgcli mydb
mydb> invalid command;
```

I get a crash

```
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 572, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 552, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 744, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 388, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli-0.10.0-py2.7.egg/pgcli/main.py"", line 119, in cli
    click.secho(e.pgerror, err=True, fg='red')
  File ""/usr/local/lib/python2.7/dist-packages/click/termui.py"", line 381, in secho
    text = style(text, **styles)
TypeError: style() got an unexpected keyword argument 'err'
```
",Not compatible with click 3.0-3.1,2015-01-07 08:10:05,2015-01-07 08:15:30
1144,53,"it seems pgcli is not making use of this file 
https://wiki.postgresql.org/wiki/Pgpass
","Add support for .pgpass
Yeah, I didn't know about .pgpass. I'll add support for it. 

Thanks for reporting it. 

pgpass already works on my computer without having to do anything. I think it's handled by [psycopg2](http://psycopg.lighthouseapp.com/projects/62710/tickets/54-feature-request-add-support-for-a-pgpass-connect-parameter). I have psycopg2 2.5.4 on a windows machine.

Does not work for me on Ubuntu 12.04 with

```
$ python -c 'import psycopg2; print psycopg2.__version__'
2.5.4 (dt dec pq3 ext)
$ python -c 'import pgcli; print pgcli.__version__'
0.10.2
```

I suspect that this might be the doing of `libpq` and not `psycopg2`. I have to read through the docs to further under how .pgpass is used and where it's accessed. 

Can you both (@felixhummel and @darikg) tell me the versions of postgres and postgres-dev packages? 

postgres 9.4 on one machine and 9.2 on another. I'm not sure how to check libpq version in windows.

To add another data point:

.pgpass works for me with the following command:
`pgcli -h localhost -U <user_name> <database_name>`

I confirmed by renaming .pgpass and observing pgcli fail with the following error message:
`fe_sendauth: no password supplied`

Environment:
- OSX 10.10
- PostgreSQL 9.4.0 (installed w/ brew)
- pgcli (0.10.3) (also worked w/ 0.10.1)
- Python 2.7.9
- pip 1.5.6

@amjith For me it's postgres 9.3. Same goes for the dev package. Got it via postgresql.org's debian repo.
This works, btw:

```
psql DBNAME USERNAME
```

Confirming this already works.

`pgcli -h HOST -U USER DB`

This is a feature of libpq as described in the original wiki page. https://wiki.postgresql.org/wiki/Pgpass

libpq is the library used by psycopg2 and pgcli. So pgpass should already work as expected. 

I've tested this on OS X and the overwhelming confirmation from multiple users confirm that it does work as expected. 

So I'm closing this ticket. 

Whether pgcli works or not depends on the order of arguments.  

`pgcli -h HOST -U USER DBNAME` works fine, but `pgcli -U USER -h HOST DBNAME` does not.  

Both versions would work with the `psql` command.

@j4sper I tried it on OS X and I still can't reproduce it. 

Can you tell me what's the version of pgcli you're using? 

Also what is the version of postgres are you connecting to? 

@amjith Maybe I had an error in my .pgpass.  I couldn't reproduce it today either.
",2015-01-07 06:56:26,2015-04-03 05:05:23
1145,52,"I have an '@' symbol in a password. I tried escaping it with '\@' but this also didn't work.
","'@' in password
That's most definitely a bug. I wonder how psql handles this. 

In the meantime you can try using the command line switches to prompt for the password instead of using the postgres:// style url. 

```
pgcli -h localhost -p 5432 -U amjith -W app_db
```

Launching that way will prompt for the password. 

Have you tried URL-escaping the `@` to `%40`?

Have you tried with the latest pgcli? I successfully connected using a role with an '@' character using pgcli 0.16.0 against a 9.4 server:

```
postgres=# create role atpw LOGIN PASSWORD '@at';
CREATE ROLE
postgres=# create database atdb owner atpw;
CREATE DATABASE
postgres=# \q

$ pgcli postgres://atpw:@at@localhost:5432/atdb
Version: 0.16.0
Chat: https://gitter.im/amjith/pgcli
Mail: https://groups.google.com/forum/#!forum/pgcli
Home: http://pgcli.com
atdb> 
```

Previously I was using my own custom built parsing routine for extracting the password and username from the postgres url. I've replaced that routine with `urlparse` from python stdlib. So this might not be an issue anymore. 

Thanks @drocco007 for testing it. I'll close the issue. 

The issue seems to persist/have returned:

```bash
pgcli postgres://atpw:@at@localhost:5432/atdb
could not translate host name ""at@localhost"" to address: nodename nor servname provided, or not known
```

A workaround is to escape the `@`s with sed:
```bash
pgcli postgres://atpw:""$(echo '@at'|sed -e s/@/\%40/g)""@localhost:5432/atdb
```
```
@catando What is your `pip freeze` output?",2015-01-07 06:47:32,
1146,51,"Didn't have enough time to do more, but it's a start.
","made a little bit of the sql prettier
Thank you!! The sql looks so much nicer. :)

I'll run through some tests and merge them in soon. 

Thank you for the quick turn around. 

Cheers! :ghost: 
",2015-01-07 06:32:01,2015-01-08 05:45:18
1147,50,"Check PEP 352. To put it simple, from 2.6 the message attribute is deprecated and removed in 3.x.
","Fix #45
I didn't know about the deprecation of e.message attribute.

Thank you for the fix. :racehorse: 
",2015-01-07 05:51:48,2015-01-07 06:29:40
1148,49,"```
Catching specific errors from psycopg2 and using
the pgerror prop instead of message to avoid app
crashing.
```
","ISSUE #32 More graceful error management
Thank you for the PR. 

:camel: 
",2015-01-07 04:57:25,2015-01-07 06:28:34
1149,48,"Error dump:

```
    x86_64-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/psycopgmodule.c -o build/temp.linux-x86_64-2.7/psycopg/psycopgmodule.o -Wdeclaration-after-statement

    In file included from psycopg/psycopgmodule.c:27:0:

    ./psycopg/psycopg.h:30:20: fatal error: Python.h: No such file or directory

     #include <Python.h>

                        ^

    compilation terminated.

    error: command 'x86_64-linux-gnu-gcc' failed with exit status 1

    ----------------------------------------
    Command ""/usr/bin/python -c ""import setuptools, tokenize;__file__='/tmp/pip-build-MicY5A/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-RwmUEB-record/install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in /tmp/pip-build-MicY5A/psycopg2
```
","Cannot install (Linux Mint)
Yeah I found out that installing `psycopg2` needs python-dev packages. 

You'll need to do `sudo apt-get install libpq-dev python-dev` and try again.

I've updated the installation instructions to include that http://pgcli.com/install

Great!  I'll try that tonight.  Thanks for the fast turnaround.

That fixed it, thanks so much!
",2015-01-07 03:36:43,2015-01-10 18:18:28
1150,47,"Tested on Python 2.6 (Cent 6).

```
$ pgcli
/usr/lib/python2.6/site-packages/pgcli/main.py:75: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
  _logger.debug('Database connection failed: %r.', e.message)
/usr/lib/python2.6/site-packages/pgcli/main.py:76: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
  click.secho(e.message, err=True, fg='red')
could not translate host name ""port=5432"" to address: Name or service not known
```
","Deprecation warnings for BaseException.message
Apparently e.message is deprecated. Who woulda thunk? 

This should be fixed by pr #49 and #50. 

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1

Thanks! :-)
",2015-01-07 03:26:40,2015-01-07 08:37:53
1151,46,"Cent 6 has a very outdated python-pygments package. (It was already installed on my system as a dep for an unrelated package.) I didn't dive in to the traceback to see if Pygments changed something or if SQL support is new (would be weird but maybe?). In any case the traceback is below. Upgrading Pygments (installed via pip) fixed the problem. Perhaps a pre-flight version check is needed?

```
$ pgcli
Traceback (most recent call last):
  File ""/usr/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/lib/python2.6/site-packages/pkg_resources.py"", line 299, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/lib/python2.6/site-packages/pkg_resources.py"", line 2229, in load_entry_point
    return ep.load()
  File ""/usr/lib/python2.6/site-packages/pkg_resources.py"", line 1948, in load
    entry = __import__(self.module_name, globals(),globals(), ['__name__'])
  File ""/usr/lib/python2.6/site-packages/pgcli/main.py"", line 16, in <module>
    from pygments.lexers.sql import SqlLexer
ImportError: No module named sql
```
","Minimum Pygments version
Yes! I'm adding a version check to setup.py to make sure Pygments and other libs are recent enough. 

Fixed by commit d437a12a03f7afce97340c11084139c8a08bb6eb.

This will go out in next release. 

Thank you for the report. :rocket: 

Thanks for the quick fix! :-)
",2015-01-07 03:22:06,2015-01-07 03:48:25
1152,45,"Add in a doc to display when typing a pg special command that starts with back-slash. 
",Add doc string to the back-slash commands,2015-01-07 02:57:35,2015-01-07 06:29:40
1153,44,,"fix type in README
Thank you!!

:ice_cream: 
",2015-01-07 01:15:49,2015-01-07 01:16:51
1154,43,"Using `pgcli` I get this:

``` sql
digdb> select last_value from pages_id_seq;
+--------------+
|   last_value |
|--------------|
|  2.07641e+06 |
+--------------+
SELECT 1
digdb> 
```

With `psql`:

``` sql
digdb=> select last_value from pages_id_seq;
 last_value 
------------
    2076410
(1 row)

digdb=> 
```

Can I get an output like which I got from `psql` or this won't fix?
","BIGSERIAL type printing
I think it should be possible to get an output like psql. I'll see if I can fix this soon. 

I'm starting to look into this bug now. I can't seem to reproduce it. 

I tried the following: 

```
misago_testforum> SELECT id from django_migrations WHERE id > 10000;
+----------+
|       id |
|----------|
|   200045 |
|  2000450 |
| 20004501 |
|  2076410 |
+----------+
SELECT 4
```

Can you tell me what's the column type? 

Never mind I was able to reproduce it. I just read the title of the ticket and created a column of type BIGSERIAL. I'll work on fixing it. 

:+1: 

It is now fixed in master. 

```
misago_testforum> \d bigserial_tbl
+----------+--------+-----------------------------------------------------------+
| Column   | Type   | Modifiers                                                 |
|----------+--------+-----------------------------------------------------------|
| a        | bigint | not null default nextval('bigserial_tbl_a_seq'::regclass) |
+----------+--------+-----------------------------------------------------------+
misago_testforum> SELECT * FROM bigserial_tbl;
+---------+
|       a |
|---------|
| 1234567 |
+---------+
SELECT 1
```

You can try installing directly from master using the following command: 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

Would you mind trying the latest from master and let me know if it fixes your issue? 

It works now.

```
$ pgcli -U digmaster -d digdb
Password: 
digdb> select last_value from pages_id_seq;
+--------------+
|   last_value |
|--------------|
|      2076410 |
+--------------+
SELECT 1
Command Time: 0.00484204292297
Format Time: 0.000274896621704
```

Awesome! 

Thank you for checking it for me. 

I'll release this out to PyPI this weekend. Cheers!

Welcome! Keep up the good work.
",2015-01-07 00:05:06,2015-02-13 08:55:07
1155,42,"so the pgcli command behaves more similarly to the psql command
","Use standard postgres environmental tags
This is going to need more work to add reasonable defaults when these env vars don't exist. 

For example, I don't have any of those env vars defined on my box (I'm on OS X). 

When I launch `pgcli` without any args I get the following error: 

```
$ pgcli                                               
Usage: pgcli [OPTIONS] DATABASE

Error: Missing argument ""database"".
```

I'll leave this PR open for now. Either you can update it with some defaults or I can take a stab at it later this week. 

Hmm... If connection arguments are supplied neither from the command line arguments nor from the environmental variables, what possible default action is there? psql apparently resorts to compile-time-specified defaults. I guess I could hardcode in defaults postgres@localhost/postgres ?

I think psql falls back to using the current username as the database name. At least that's what it does in my installation.

You're right. It's pretty easy to grab the username to replace empty defaults, but it's trickier to match psql behavior with the password:
- if no password is supplied, attempt to connect without one (which is where pgpass comes into play)
  - unless -W is specified, in which case prompt for password immediately
    - so we need to parse URIs immediately to see if the password was supplied or not
- if authentication fails without a password, prompt for it, then attempt to connect again
  - unless -w is specified 

Anyway, I think I got this all working as it should, but I'm used to mercurial and git is pretty bewildering to me right now. I realize now that I submitted this PR as a commit directly on master. Should I close the PR and submit a new one on a feature branch instead? 

No need to close this PR. If you push your changes to master (in your fork) this PR will be automatically updated to reflect the changes. 

I'll take a look at the diff and test it out. Thanks!

Thanks a lot for making it robust. I really appreciate the time you've put into making this behave just like psql. 

I'll be happy to merge it as soon as you address the comments I've left. 

:palm_tree: 

thanks for your help!

Awesome! Thank you for making the edits. Looks great!

:tangerine: 
",2015-01-06 23:58:25,2015-01-09 02:48:30
1156,41,"It seems like some of the issues (see #38, #26) in the tracker are caused by people having older versions of psycopg2 installed. This pull request aims to fix that.

Note that it might also be good to pin down other requirements, especially for prompt_toolkit!
","Pin down minimum psycopg2 version
@macobo Thank you for the PR. I'll pin the versions for other libraries as well.

Thank you!
",2015-01-06 22:06:48,2015-01-06 22:20:19
1157,40,"Great tool, thanks for developing!

I ran into some trouble getting it to work with a databases containing unicode data and this pull request aims to mend that. See also #24

I also added some extra debugging information to ensure that the proper error message is shown and always logged for ease of debugging.
","Fix UnicodeDecodeError in python2
It seems like there was a transient error when running travis on this branch - after rebase it went away.

Thank you for taking the time to fix this issue.

I'll test this change manually and merge it in soon. 

Yay! This totally fixed the issue reported by #24. 

Thanks a lot! :shaved_ice: 
",2015-01-06 21:58:28,2015-01-07 05:21:41
1158,39,"Much like table names, it would be nice to have the names of views (shown via \dv) included in the auto-complete list.
","Auto-complete view names
Yup. That will be added in the future release. 

Also schema names, as in `SELECT * FROM schema_name.table_name`

:+1: 

Thanks, works like a charm.
",2015-01-06 21:28:47,2015-04-06 00:24:00
1159,38,"psycopg2 did not support the `with` keyword on cursors until v2.5, I believe.  This version should be encoded in setup.py.

https://github.com/amjith/pgcli/blob/master/pgcli/pgexecute.py#L102
http://psycopg.lighthouseapp.com/projects/62710/tickets/102-cursor-is-not-compatible-with-the-with-statement
","psycopg2 v2.5 or later required
Thank you for the report. The PR #41 by @macobo fixes this problem. It'll be released in the next ver.
",2015-01-06 21:21:15,2015-01-07 00:02:42
1160,37,"When connecting to a local database configured with a local socket, `pgcli` fails:

```
pgcli -U postgres data_entry

    could not connect to server: No such file or directory
    Is the server running locally and accepting
    connections on Unix domain socket ""/var/run/postgresql/.s.PGSQL.5432""?
```

The equivalent call to `psql` succeeds:

```
psql -U postgres data_entry
psql (8.4.22)
Type ""help"" for help.

data_entry#
```

Running `strace` against `psql` shows that it reads the socket configuration directory from the `unix_socket_directory` of the postgresql.conf file. I can get `pgcli` to run by specifying `-h /tmp` which is the socket location on this distribution (Ubuntu 12.04.5), perhaps because this Postgres release is backported. The psql code executes [this search](https://github.com/jbq/postgresql-common/blob/master/PgCommon.pm#L354-381) to find the appropriate path.

Some defaults for sockets on various distributions and OSes:
- ""/var/run/postgresql"" # Debian default
- ""/var/pgsql_socket"" # MacOS default
- ""/usr/local/var/postgres"" # FreeBSD default; custom installation
- ""/tmp"" # custom installation

May be worth just iterating over these for an appropriate socket directory before failing with a blank 'host' parameter.
","Read socket configuration information
Awesome bug report! :)

When I fall back to empty string for host, I'm relying to `psycopg2` to do the right thing. But I'll see if I can iterate over the common locations to find the socket before doing that. 

On a related note, if you specify a port with the `-p` command-line option, but no host with the `-h` option, `pgcli` still tries to use a unix domain socket. Maybe it should assume an inet socket and `localhost` as the default hostname in that case, since specifying a port doesn't make sense with unix domain sockets.

Good point. Added #229

Hey there, I have the same error (os x, `pgcli` v.1.5.1, installed via brew, `postgresql` v.9.6.2)
```
pgcli
	could not connect to server: No such file or directory
	Is the server running locally and accepting
	connections on Unix domain socket ""/tmp/.s.PGSQL.5432""?
```
upd.: [this](http://dba.stackexchange.com/questions/21587/postgresql-is-running-locally-but-i-cannot-connect-why) helped

```
sudo mkdir /var/pgsql_socket
sudo chown -R whoami /var/pgsql_socket
cat ""unix_socket_directory = /var/pgsql_socket"" > /usr/local/var/postgres/postgresql.conf
/usr/local/bin/pg_ctl init -D DB_DIRECTORY

Success. You can now start the database server using:

    /usr/local/Cellar/postgresql/9.6.2/bin/pg_ctl -D DB_DIRECTORY -l logfile start
```
@j-bennet @amjith should we close this too then ?
Recent changes in psycopg2 and libpq seem to do the right thing. No additional work required on pgcli.",2015-01-06 21:14:40,2017-08-31 14:41:36
1161,36,"It looks like it requires PostgreSQL development packages as well?

OSX 10.10

```
Downloading/unpacking pgcli
  Downloading pgcli-0.10.0.tar.gz
  Running setup.py egg_info for package pgcli

Downloading/unpacking Click (from pgcli)
  Downloading click-3.3.tar.gz (259kB): 259kB downloaded
  Running setup.py egg_info for package Click

    warning: no previously-included files matching '*.pyc' found under directory 'docs'
    warning: no previously-included files matching '*.pyo' found under directory 'docs'
    warning: no previously-included files matching '*.pyc' found under directory 'tests'
    warning: no previously-included files matching '*.pyo' found under directory 'tests'
    warning: no previously-included files matching '*.pyc' found under directory 'examples'
    warning: no previously-included files matching '*.pyo' found under directory 'examples'
    no previously-included directories found matching 'docs/_build'
Downloading/unpacking prompt-toolkit (from pgcli)
  Downloading prompt_toolkit-0.25.tar.gz (93kB): 93kB downloaded
  Running setup.py egg_info for package prompt-toolkit

Downloading/unpacking psycopg2 (from pgcli)
  Downloading psycopg2-2.5.4.tar.gz (682kB): 682kB downloaded
  Running setup.py egg_info for package psycopg2

    Error: pg_config executable not found.

    Please add the directory containing pg_config to the PATH
    or specify the full executable path with the option:

        python setup.py build_ext --pg-config /path/to/pg_config build ...

    or with the pg_config option in 'setup.cfg'.
    Complete output from command python setup.py egg_info:
    running egg_info

creating pip-egg-info/psycopg2.egg-info

writing pip-egg-info/psycopg2.egg-info/PKG-INFO

writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt

writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt

writing manifest file 'pip-egg-info/psycopg2.egg-info/SOURCES.txt'

warning: manifest_maker: standard file '-c' not found



Error: pg_config executable not found.



Please add the directory containing pg_config to the PATH

or specify the full executable path with the option:



    python setup.py build_ext --pg-config /path/to/pg_config build ...



or with the pg_config option in 'setup.cfg'.

----------------------------------------
Cleaning up...
Command python setup.py egg_info failed with error code 1 in /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm/psycopg2
Storing complete log in /Users/samm/Library/Logs/pip.log
systems-samm ~ <1> % cat /Users/samm/Library/Logs/pip.log
------------------------------------------------------------
/usr/local/bin/pip run on Wed Jan  7 08:07:41 2015
Downloading/unpacking pgcli

  Getting page https://pypi.python.org/simple/pgcli/
  URLs to search for versions for pgcli:
  * https://pypi.python.org/simple/pgcli/
  Analyzing links from page https://pypi.python.org/simple/pgcli/
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.10.0.tar.gz#md5=c9a54942543365f2f95ad31a6a8e70cc (from https://pypi.python.org/simple/pgcli/), version: 0.10.0
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.2.tar.gz#md5=a5694a3babc166f95c5c46295e01ff89 (from https://pypi.python.org/simple/pgcli/), version: 0.2
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.3.1.tar.gz#md5=0ff42808af8cac9a5643fa42e0731b88 (from https://pypi.python.org/simple/pgcli/), version: 0.3.1
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.3.2.tar.gz#md5=56226a46a73512ce375b48224497aab8 (from https://pypi.python.org/simple/pgcli/), version: 0.3.2
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.3.tar.gz#md5=62031e7d66c9175becc7faacf57643ea (from https://pypi.python.org/simple/pgcli/), version: 0.3
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.4.0.tar.gz#md5=fbcadd95210bd36fd93426848bf0abfd (from https://pypi.python.org/simple/pgcli/), version: 0.4.0
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.4.1.tar.gz#md5=5803d4521e696dec753c1e63cd5c0c55 (from https://pypi.python.org/simple/pgcli/), version: 0.4.1
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.4.2.tar.gz#md5=7b8affb1976eae0e573099909d0cc4bf (from https://pypi.python.org/simple/pgcli/), version: 0.4.2
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.4.3.tar.gz#md5=d20c6b5d016cead391681eeb4cc970fb (from https://pypi.python.org/simple/pgcli/), version: 0.4.3
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.4.4.tar.gz#md5=47f7775eb05c70f86e866b1754811f69 (from https://pypi.python.org/simple/pgcli/), version: 0.4.4
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.5.0.tar.gz#md5=9a47eb77a24e9b7c722fb6b1fd409b7d (from https://pypi.python.org/simple/pgcli/), version: 0.5.0
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.5.1.tar.gz#md5=a6496960094cc00882d6b7487bad0bd0 (from https://pypi.python.org/simple/pgcli/), version: 0.5.1
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.6.0.tar.gz#md5=40ed143f626c5df12770ce8463fa4ff8 (from https://pypi.python.org/simple/pgcli/), version: 0.6.0
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.7.0.tar.gz#md5=39e186b36b1c7df7b63b1daace81b161 (from https://pypi.python.org/simple/pgcli/), version: 0.7.0
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.7.1.tar.gz#md5=f3a980877b4eb84b665c9778558a9f09 (from https://pypi.python.org/simple/pgcli/), version: 0.7.1
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.8.0.tar.gz#md5=b9131c5c5d690c703c244089b4687d99 (from https://pypi.python.org/simple/pgcli/), version: 0.8.0
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.8.1.tar.gz#md5=2ff79561ed2d4903d76885aec529448b (from https://pypi.python.org/simple/pgcli/), version: 0.8.1
    Found link https://pypi.python.org/packages/source/p/pgcli/pgcli-0.9.0.tar.gz#md5=3ce9a49388e5d2ac55e9ee47592ae06e (from https://pypi.python.org/simple/pgcli/), version: 0.9.0
  Using version 0.10.0 (newest of versions: 0.10.0, 0.9.0, 0.8.1, 0.8.0, 0.7.1, 0.7.0, 0.6.0, 0.5.1, 0.5.0, 0.4.4, 0.4.3, 0.4.2, 0.4.1, 0.4.0, 0.3.2, 0.3.1, 0.3, 0.2)
  Downloading pgcli-0.10.0.tar.gz

  Downloading from URL https://pypi.python.org/packages/source/p/pgcli/pgcli-0.10.0.tar.gz#md5=c9a54942543365f2f95ad31a6a8e70cc (from https://pypi.python.org/simple/pgcli/)
  Running setup.py egg_info for package pgcli

    running egg_info
    creating pip-egg-info/pgcli.egg-info
    writing requirements to pip-egg-info/pgcli.egg-info/requires.txt
    writing pip-egg-info/pgcli.egg-info/PKG-INFO
    writing top-level names to pip-egg-info/pgcli.egg-info/top_level.txt
    writing dependency_links to pip-egg-info/pgcli.egg-info/dependency_links.txt
    writing entry points to pip-egg-info/pgcli.egg-info/entry_points.txt
    writing manifest file 'pip-egg-info/pgcli.egg-info/SOURCES.txt'
    warning: manifest_maker: standard file '-c' not found


    reading manifest file 'pip-egg-info/pgcli.egg-info/SOURCES.txt'
    writing manifest file 'pip-egg-info/pgcli.egg-info/SOURCES.txt'
  Source in /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm/pgcli has version 0.10.0, which satisfies requirement pgcli
Downloading/unpacking Click (from pgcli)

  Getting page https://pypi.python.org/simple/Click/
  URLs to search for versions for Click (from pgcli):
  * https://pypi.python.org/simple/Click/
  Analyzing links from page https://pypi.python.org/simple/click/
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.1-py2.py3-none-any.whl#md5=0cc6bb5069cd4aded45df121da94b482 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.2-py2.py3-none-any.whl#md5=a8107b8c2ef4c28c0cb13957688656ee (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.3-py2.py3-none-any.whl#md5=5bcb7aee93c18342927bf1ff0f475462 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.4-py2.py3-none-any.whl#md5=f987186fcd3ceb83405542aeada54709 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.5-py2.py3-none-any.whl#md5=383371917b60bc71e94124f4ee76a396 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.5.1-py2.py3-none-any.whl#md5=5eec0adef35a10bab82f5bdeb318e4ca (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.6-py2.py3-none-any.whl#md5=f66a36e97a157788ab40168d1c696593 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-0.7-py2.py3-none-any.whl#md5=4ed8c0b279f982048f0852088aca0389 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-1.0-py2.py3-none-any.whl#md5=3914880d0f97a722248d42a7d16e6b88 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-1.1-py2.py3-none-any.whl#md5=ac934d5f166064d4b22ef9814f31f8b8 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.0-py2.py3-none-any.whl#md5=73f58892ba05d0fbdb56fa7c2c822c4a (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.1-py2.py3-none-any.whl#md5=d1003edfac1fd82eb539b1b3ba01cb61 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.2-py2.py3-none-any.whl#md5=70cd3b28d696c6e882b0818352352505 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.3-py2.py3-none-any.whl#md5=7898be3bf41c91d003dd9cced5a8b183 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.4-py2.py3-none-any.whl#md5=52fb03573ab024cca207bd421888b08a (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.5-py2.py3-none-any.whl#md5=c1af149f5e10491831311f0e32aa7001 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-2.6-py2.py3-none-any.whl#md5=75941e4e80563ca134fda5045b537c78 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-3.0-py2.py3-none-any.whl#md5=13cead4d730cf0184e981bc2b5748248 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-3.1-py2.py3-none-any.whl#md5=008bac40c0e11f6be2226a5667b67095 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-3.2-py2.py3-none-any.whl#md5=7d0bf0ca4e8ce6056e35cc8135d21abd (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Skipping link https://pypi.python.org/packages/2.7/c/click/click-3.3-py2.py3-none-any.whl#md5=5ca07a6c8b1eaca8e529cdb50a8a8349 (from https://pypi.python.org/simple/click/); unknown archive format: .whl
    Found link https://pypi.python.org/packages/source/c/click/click-0.1.tar.gz#md5=9f1eb0ea0d713e61c0a1a805095092a3 (from https://pypi.python.org/simple/click/), version: 0.1
    Found link https://pypi.python.org/packages/source/c/click/click-0.2.tar.gz#md5=5dfdd49507748b776db6c051191b367f (from https://pypi.python.org/simple/click/), version: 0.2
    Found link https://pypi.python.org/packages/source/c/click/click-0.3.tar.gz#md5=5d9563adb701eb6508dd03180b69d0a7 (from https://pypi.python.org/simple/click/), version: 0.3
    Found link https://pypi.python.org/packages/source/c/click/click-0.4.tar.gz#md5=f5d95b8bafd0cf2e1c8938fade7058d0 (from https://pypi.python.org/simple/click/), version: 0.4
    Found link https://pypi.python.org/packages/source/c/click/click-0.5.1.tar.gz#md5=03aea68acd0402273d10846581c154ba (from https://pypi.python.org/simple/click/), version: 0.5.1
    Found link https://pypi.python.org/packages/source/c/click/click-0.5.tar.gz#md5=7717647596f0dbac3ea2abfbb14e9e8e (from https://pypi.python.org/simple/click/), version: 0.5
    Found link https://pypi.python.org/packages/source/c/click/click-0.6.tar.gz#md5=49268a0b714d88499b0ae74ea315b706 (from https://pypi.python.org/simple/click/), version: 0.6
    Found link https://pypi.python.org/packages/source/c/click/click-0.7.tar.gz#md5=970c4f58099d8f0132e5c53ad26729a8 (from https://pypi.python.org/simple/click/), version: 0.7
    Found link https://pypi.python.org/packages/source/c/click/click-1.0.tar.gz#md5=1b373dba472fbb9328cfbddfde61da9e (from https://pypi.python.org/simple/click/), version: 1.0
    Found link https://pypi.python.org/packages/source/c/click/click-1.1.tar.gz#md5=cb5a9b715bfffe7a297d107829978f45 (from https://pypi.python.org/simple/click/), version: 1.1
    Found link https://pypi.python.org/packages/source/c/click/click-2.0.tar.gz#md5=259ebb6fcf28a72df2104db8f5a22962 (from https://pypi.python.org/simple/click/), version: 2.0
    Found link https://pypi.python.org/packages/source/c/click/click-2.1.tar.gz#md5=0ba97ba09af82c56e2d35f3412d0aa6e (from https://pypi.python.org/simple/click/), version: 2.1
    Found link https://pypi.python.org/packages/source/c/click/click-2.2.tar.gz#md5=e07460aab221e1b7ceee0018122e04a9 (from https://pypi.python.org/simple/click/), version: 2.2
    Found link https://pypi.python.org/packages/source/c/click/click-2.3.tar.gz#md5=ce4852da9d4c33855e6f55e1fd06c1ac (from https://pypi.python.org/simple/click/), version: 2.3
    Found link https://pypi.python.org/packages/source/c/click/click-2.4.tar.gz#md5=7affaac2973184810c018fab7cedca4f (from https://pypi.python.org/simple/click/), version: 2.4
    Found link https://pypi.python.org/packages/source/c/click/click-2.5.tar.gz#md5=a1bff2d2270745affd5bc60e66e50c23 (from https://pypi.python.org/simple/click/), version: 2.5
    Found link https://pypi.python.org/packages/source/c/click/click-2.6.tar.gz#md5=bf5fbaecc1370934347b82ec707e3413 (from https://pypi.python.org/simple/click/), version: 2.6
    Found link https://pypi.python.org/packages/source/c/click/click-3.0.tar.gz#md5=6919bcf8dcbe99197893464a97f640d5 (from https://pypi.python.org/simple/click/), version: 3.0
    Found link https://pypi.python.org/packages/source/c/click/click-3.1.tar.gz#md5=6fc0aa839e01ac1d05c4a823c698b6b2 (from https://pypi.python.org/simple/click/), version: 3.1
    Found link https://pypi.python.org/packages/source/c/click/click-3.2.tar.gz#md5=f8a439029337ff39ed814ae5ce948318 (from https://pypi.python.org/simple/click/), version: 3.2
    Found link https://pypi.python.org/packages/source/c/click/click-3.3.tar.gz#md5=40edaba4d216915a8326c5b2cb52781d (from https://pypi.python.org/simple/click/), version: 3.3
  Using version 3.3 (newest of versions: 3.3, 3.2, 3.1, 3.0, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.1, 1.0, 0.7, 0.6, 0.5.1, 0.5, 0.4, 0.3, 0.2, 0.1)
  Downloading from URL https://pypi.python.org/packages/source/c/click/click-3.3.tar.gz#md5=40edaba4d216915a8326c5b2cb52781d (from https://pypi.python.org/simple/click/)
  Running setup.py egg_info for package Click

    running egg_info
    creating pip-egg-info/click.egg-info
    writing pip-egg-info/click.egg-info/PKG-INFO
    writing top-level names to pip-egg-info/click.egg-info/top_level.txt
    writing dependency_links to pip-egg-info/click.egg-info/dependency_links.txt
    writing manifest file 'pip-egg-info/click.egg-info/SOURCES.txt'
    warning: manifest_maker: standard file '-c' not found


    reading manifest file 'pip-egg-info/click.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    warning: no previously-included files matching '*.pyc' found under directory 'docs'

    warning: no previously-included files matching '*.pyo' found under directory 'docs'

    warning: no previously-included files matching '*.pyc' found under directory 'tests'

    warning: no previously-included files matching '*.pyo' found under directory 'tests'

    warning: no previously-included files matching '*.pyc' found under directory 'examples'

    warning: no previously-included files matching '*.pyo' found under directory 'examples'

    no previously-included directories found matching 'docs/_build'

    writing manifest file 'pip-egg-info/click.egg-info/SOURCES.txt'
  Source in /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm/Click has version 3.3, which satisfies requirement Click (from pgcli)
Downloading/unpacking prompt-toolkit (from pgcli)

  Getting page https://pypi.python.org/simple/prompt_toolkit/
  URLs to search for versions for prompt-toolkit (from pgcli):
  * https://pypi.python.org/simple/prompt_toolkit/
  Analyzing links from page https://pypi.python.org/simple/prompt-toolkit/
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.1.tar.gz#md5=dea19326a6645e8b77c864477ea2adf8 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.1
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.10.tar.gz#md5=acaad96aad20d15796df1ba96a6b9989 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.10
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.11.tar.gz#md5=2f2f4c7970685b8080eddfe524c0705a (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.11
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.12.tar.gz#md5=e1741b1a0d3d06bac689ab4cffa47f55 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.12
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.13.tar.gz#md5=2b8c3ec7e8a00a241af57a3178c7cf9e (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.13
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.14.tar.gz#md5=f5a2ad872f662e3bf7950b803deba226 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.14
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.15.tar.gz#md5=3e7612b837cc60364b17cdf16a97676f (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.15
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.16.tar.gz#md5=e4fa5b630187eef39db647adc9482bd6 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.16
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.17.tar.gz#md5=ea41be587d32f068ed9ec66f804455cc (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.17
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.18.tar.gz#md5=80a256e77ab159ac69c50b0950937312 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.18
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.19.tar.gz#md5=1cbeaf3d01eec0ca31090fb9b5046648 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.19
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.2.tar.gz#md5=1ac53b41e13420be3c77cbb955cf8dc8 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.2
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.20.tar.gz#md5=432b1489989e52e3377caf8b967e6c58 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.20
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.21.tar.gz#md5=939d26f5cafe606ef2c9313561c4e4e3 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.21
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.22.tar.gz#md5=0d8ff72ed09901a14d5a1909603b270c (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.22
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.23.tar.gz#md5=06ab9b2775b6c5f5e393792b8ab82a41 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.23
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.25.tar.gz#md5=be64d70110358e937163e8fd548a00e0 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.25
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.3.tar.gz#md5=c93ad0b508d9f8408f71fbfe0defa6db (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.3
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.4.tar.gz#md5=b911eadf4b2bd149443c1184a0543272 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.4
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.5.tar.gz#md5=472f1fde93da89e194f1f5f9c0a2ea91 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.5
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.6.tar.gz#md5=4c54d52a140c2fbc95631f9e63b74b65 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.6
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.8.tar.gz#md5=3ef78a0992f3417fbb39222cd8883136 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.8
    Found link https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.9.tar.gz#md5=1c78adccc7f98735ab75055931689f68 (from https://pypi.python.org/simple/prompt-toolkit/), version: 0.9
  Using version 0.25 (newest of versions: 0.25, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.10, 0.9, 0.8, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)
  Downloading from URL https://pypi.python.org/packages/source/p/prompt_toolkit/prompt_toolkit-0.25.tar.gz#md5=be64d70110358e937163e8fd548a00e0 (from https://pypi.python.org/simple/prompt-toolkit/)
  Running setup.py egg_info for package prompt-toolkit

    running egg_info
    creating pip-egg-info/prompt_toolkit.egg-info
    writing requirements to pip-egg-info/prompt_toolkit.egg-info/requires.txt
    writing pip-egg-info/prompt_toolkit.egg-info/PKG-INFO
    writing top-level names to pip-egg-info/prompt_toolkit.egg-info/top_level.txt
    writing dependency_links to pip-egg-info/prompt_toolkit.egg-info/dependency_links.txt
    writing entry points to pip-egg-info/prompt_toolkit.egg-info/entry_points.txt
    writing manifest file 'pip-egg-info/prompt_toolkit.egg-info/SOURCES.txt'
    warning: manifest_maker: standard file '-c' not found


    reading manifest file 'pip-egg-info/prompt_toolkit.egg-info/SOURCES.txt'
    writing manifest file 'pip-egg-info/prompt_toolkit.egg-info/SOURCES.txt'
  Source in /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm/prompt-toolkit has version 0.25, which satisfies requirement prompt-toolkit (from pgcli)
  skipping extra ptipython
Downloading/unpacking psycopg2 (from pgcli)

  Getting page https://pypi.python.org/simple/psycopg2/
  URLs to search for versions for psycopg2 (from pgcli):
  * https://pypi.python.org/simple/psycopg2/
  Getting page http://initd.org/projects/psycopg2
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.10.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.11.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.12.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.13.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.14.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.2.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.3.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.4.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.5.1.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.6.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.7.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.8.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-2/psycopg2-2.2.0.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-2/psycopg2-2.2.1.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-2/psycopg2-2.2.2.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-3/psycopg2-2.3.0.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-3/psycopg2-2.3.1.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-3/psycopg2-2.3.2.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.1.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.2.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.3.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.4.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.5.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.6.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.1.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.2.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.3.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.4.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Skipping page http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.tar.gz (from https://pypi.python.org/simple/psycopg2/) because of Content-Type: application/x-gzip
  Analyzing links from page https://pypi.python.org/simple/psycopg2/
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.0.10.tar.gz#md5=2dc60d0fd90ad681e1e9106edef34e97 (from https://pypi.python.org/simple/psycopg2/), version: 2.0.10
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.0.11.tar.gz#md5=eec2a45bcea75a00cbf20a15ab1b8bae (from https://pypi.python.org/simple/psycopg2/), version: 2.0.11
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.0.12.tar.gz#md5=5c8080d0d0568479f041bb8534caf1f8 (from https://pypi.python.org/simple/psycopg2/), version: 2.0.12
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.0.13.tar.gz#md5=f520260595f4fcf035d26cfd57a75f19 (from https://pypi.python.org/simple/psycopg2/), version: 2.0.13
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.0.14.tar.gz#md5=30136c7753acc9cbdc36cc5c2448fdee (from https://pypi.python.org/simple/psycopg2/), version: 2.0.14
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.2.0.tar.gz#md5=4a69436dc8efbfe2859ae3aeed85d03e (from https://pypi.python.org/simple/psycopg2/), version: 2.2.0
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.2.1.tar.gz#md5=70b50773aefe5fb371ff4a018382012f (from https://pypi.python.org/simple/psycopg2/), version: 2.2.1
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.2.2.tar.gz#md5=571af2ad9dfeb522ee5f8553278a4c38 (from https://pypi.python.org/simple/psycopg2/), version: 2.2.2
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.3.0.tar.gz#md5=0b52101b47f1e73001c6412d9a476222 (from https://pypi.python.org/simple/psycopg2/), version: 2.3.0
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.3.1.tar.gz#md5=15d1c7f821f3a0306955d6cde3e762af (from https://pypi.python.org/simple/psycopg2/), version: 2.3.1
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.3.2.tar.gz#md5=11e8021a4fda49faa15495f8bea65f4d (from https://pypi.python.org/simple/psycopg2/), version: 2.3.2
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.1.tar.gz#md5=4e79c822ab75dd89d931ee627c66032f (from https://pypi.python.org/simple/psycopg2/), version: 2.4.1
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.2.tar.gz#md5=58cfd294d28b7e8ef059d72085d71ac2 (from https://pypi.python.org/simple/psycopg2/), version: 2.4.2
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.3.tar.gz#md5=5f67ca0c8b6c1ac5c4afd82811e0facc (from https://pypi.python.org/simple/psycopg2/), version: 2.4.3
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.4.tar.gz#md5=639e014ea9ce3aa3306724f12d16d79b (from https://pypi.python.org/simple/psycopg2/), version: 2.4.4
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.5.tar.gz#md5=075e4df465e9a863f288d5bdf6e6887e (from https://pypi.python.org/simple/psycopg2/), version: 2.4.5
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.6.tar.gz#md5=79d7f05e67bf70a0ecc6e9103ccece5f (from https://pypi.python.org/simple/psycopg2/), version: 2.4.6
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160 (from https://pypi.python.org/simple/psycopg2/), version: 2.4
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.1.tar.gz#md5=1b433f83d50d1bc61e09026e906d84c7 (from https://pypi.python.org/simple/psycopg2/), version: 2.5.1
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.2.tar.gz#md5=53d81793fbab8fee6e732a0425d50047 (from https://pypi.python.org/simple/psycopg2/), version: 2.5.2
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.3.tar.gz#md5=09dcec70f623a9ef774f1aef75690995 (from https://pypi.python.org/simple/psycopg2/), version: 2.5.3
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.4.tar.gz#md5=25216543a707eb33fd83aa8efb6e3f26 (from https://pypi.python.org/simple/psycopg2/), version: 2.5.4
    Found link https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.tar.gz#md5=facd82faa067e99b80146a0ee2f842f6 (from https://pypi.python.org/simple/psycopg2/), version: 2.5
    Skipping link http://initd.org/projects/psycopg2 (from https://pypi.python.org/simple/psycopg2/); not a file
    Skipping link http://initd.org/psycopg/ (from https://pypi.python.org/simple/psycopg2/); not a file
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.10.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.10
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.11.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.11
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.12.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.12
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.13.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.13
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.14.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.14
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.2.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.2
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.3.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.3
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.4.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.4
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.5.1.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.5.1
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.6.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.6
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.7.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.7
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-0/psycopg2-2.0.8.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.0.8
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-2/psycopg2-2.2.0.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.2.0
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-2/psycopg2-2.2.1.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.2.1
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-2/psycopg2-2.2.2.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.2.2
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-3/psycopg2-2.3.0.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.3.0
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-3/psycopg2-2.3.1.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.3.1
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-3/psycopg2-2.3.2.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.3.2
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.1.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4.1
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.2.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4.2
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.3.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4.3
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.4.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4.4
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.5.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4.5
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.6.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4.6
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-4/psycopg2-2.4.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.4
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.1.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.5.1
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.2.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.5.2
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.3.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.5.3
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.4.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.5.4
    Found link http://initd.org/psycopg/tarballs/PSYCOPG-2-5/psycopg2-2.5.tar.gz (from https://pypi.python.org/simple/psycopg2/), version: 2.5
  Analyzing links from page http://initd.org/psycopg/
    Skipping link http://initd.org/psycopg/download/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/docs/install.html (from http://initd.org/psycopg/); unknown archive format: .html
    Skipping link http://initd.org/psycopg/docs/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/tag/news/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/development/ (from http://initd.org/psycopg/); not a file
    Skipping link http://www.postgresql.org/ (from http://initd.org/psycopg/); not a file
    Skipping link http://www.python.org/ (from http://initd.org/psycopg/); not a file
    Skipping link http://www.python.org/dev/peps/pep-0249/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/license/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/features/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/docs/faq.html (from http://initd.org/psycopg/); unknown archive format: .html
    Skipping link http://initd.org/psycopg/articles/2014/08/30/psycopg-254-released/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/author/piro/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/tag/release/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/2014/07/20/cancelling-postgresql-statements-python/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/tag/recipe/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/2014/05/13/psycopg-253-released/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/2014/01/07/psycopg-252-released/ (from http://initd.org/psycopg/); not a file
    Skipping link http://initd.org/psycopg/articles/2013/06/23/psycopg-251-released/ (from http://initd.org/psycopg/); not a file
    Skipping link http://www.psycopg.org/ (from http://initd.org/psycopg/); not a file
    Skipping link http://www.stickpeople.com/projects/python/win-psycopg/ (from http://initd.org/psycopg/); not a file
    Skipping link https://github.com/psycopg/psycopg2/issues (from http://initd.org/psycopg/); not a file
    Skipping link http://mail.postgresql.org/mj/mj_wwwusr/domain=postgresql.org?func=lists-long-full&extra=psycopg (from http://initd.org/psycopg/); unknown archive format: .org
    Skipping link http://twitter.com/psycopg (from http://initd.org/psycopg/); not a file
    Skipping link http://search.twitter.com/search?q=%23psycopg2 (from http://initd.org/psycopg/); not a file
    Skipping link http://search.twitter.com/search?q=%23GitHub (from http://initd.org/psycopg/); not a file
    Skipping link https://t.co/sCAIy61t (from http://initd.org/psycopg/); not a file
    Skipping link http://twitter.com/mikeyk (from http://initd.org/psycopg/); not a file
    Skipping link http://t.co/gc76xQpw (from http://initd.org/psycopg/); not a file
    Skipping link http://twitter.com/mancho_z (from http://initd.org/psycopg/); not a file
    Skipping link http://twitter.com/fogzot (from http://initd.org/psycopg/); not a file
    Skipping link http://twitter.com/instagram (from http://initd.org/psycopg/); not a file
  Analyzing links from page http://initd.org/psycopg/
  Using version 2.5.4 (newest of versions: 2.5.4, 2.5.4, 2.5.3, 2.5.3, 2.5.2, 2.5.2, 2.5.1, 2.5.1, 2.5, 2.5, 2.4.6, 2.4.6, 2.4.5, 2.4.5, 2.4.4, 2.4.4, 2.4.3, 2.4.3, 2.4.2, 2.4.2, 2.4.1, 2.4.1, 2.4, 2.4, 2.3.2, 2.3.2, 2.3.1, 2.3.1, 2.3.0, 2.3.0, 2.2.2, 2.2.2, 2.2.1, 2.2.1, 2.2.0, 2.2.0, 2.0.14, 2.0.14, 2.0.13, 2.0.13, 2.0.12, 2.0.12, 2.0.11, 2.0.11, 2.0.10, 2.0.10, 2.0.8, 2.0.7, 2.0.6, 2.0.5.1, 2.0.4, 2.0.3, 2.0.2)
  Downloading from URL https://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.5.4.tar.gz#md5=25216543a707eb33fd83aa8efb6e3f26 (from https://pypi.python.org/simple/psycopg2/)
  Running setup.py egg_info for package psycopg2

    running egg_info
    creating pip-egg-info/psycopg2.egg-info
    writing pip-egg-info/psycopg2.egg-info/PKG-INFO
    writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt
    writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt
    writing manifest file 'pip-egg-info/psycopg2.egg-info/SOURCES.txt'
    warning: manifest_maker: standard file '-c' not found


    Error: pg_config executable not found.



    Please add the directory containing pg_config to the PATH

    or specify the full executable path with the option:



        python setup.py build_ext --pg-config /path/to/pg_config build ...



    or with the pg_config option in 'setup.cfg'.

    Complete output from command python setup.py egg_info:

    running egg_info

creating pip-egg-info/psycopg2.egg-info

writing pip-egg-info/psycopg2.egg-info/PKG-INFO

writing top-level names to pip-egg-info/psycopg2.egg-info/top_level.txt

writing dependency_links to pip-egg-info/psycopg2.egg-info/dependency_links.txt

writing manifest file 'pip-egg-info/psycopg2.egg-info/SOURCES.txt'

warning: manifest_maker: standard file '-c' not found



Error: pg_config executable not found.



Please add the directory containing pg_config to the PATH

or specify the full executable path with the option:



    python setup.py build_ext --pg-config /path/to/pg_config build ...



or with the pg_config option in 'setup.cfg'.

----------------------------------------

Cleaning up...

  Removing temporary dir /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm...
Command python setup.py egg_info failed with error code 1 in /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm/psycopg2

Exception information:
Traceback (most recent call last):
  File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/basecommand.py"", line 134, in main
    status = self.run(options, args)
  File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/commands/install.py"", line 236, in run
    requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle)
  File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/req.py"", line 1134, in prepare_files
    req_to_install.run_egg_info()
  File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/req.py"", line 259, in run_egg_info
    command_desc='python setup.py egg_info')
  File ""/Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg/pip/util.py"", line 670, in call_subprocess
    % (command_desc, proc.returncode, cwd))
InstallationError: Command python setup.py egg_info failed with error code 1 in /private/var/folders/pd/xt410rg54rgf0595nx62wt6r0000gn/T/pip_build_samm/psycopg2
```
","Error: pg_config executable not found
This error happens if you don't have Postgres available locally. `pgcli` uses `psycopg2` to talk to the Postgres database. In order to install `psycopg2` you need a C library called `libpq`. The only way (that I know of) to get that package in OS X is to `brew install postgresql`. 

Were you able to get this working after you installed Postgresql? 

Do you need more assistance? 

Thanks yes it works once PostgreSQL is installed.

## 

Sam McLeod

On Thu, 8 Jan 2015, at 06:58 PM, Amjith Ramanujam wrote:

> Were you able to get this working after you installed Postgresql? 
> 
> Do you need more assistance? 
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/amjith/pgcli/issues/36#issuecomment-69147243

Cheers!
",2015-01-06 21:14:38,2015-01-08 08:09:52
1162,35,"Love the app, but I wouldn't like to be installing it from pip everywhere - It would be great if this could be packaged and available on an apt mirror somewhere.

This would:
- Make installs easier
- Make upgrades easier
- Ensure installations are properly logged
- Ensure clean uninstallations when required
- Reduce dependancies
- Allow for easy on-site mirroring / caching

FYI packagecloud.io is pretty good, supports different package formats and their free plan would easily suffice.
","Debian Packages
Yes. I agree with all of the points you've made. I have no experience in creating deb packages. But I'll read up on it and see if I can put together something. 

Thank you for the feedback. 

Hey @amjith thanks for that, again I love the project and want to use it but I really need packages before I can think about rolling it out.

Take a look at FPM, which can easily generate packages for any platform: https://github.com/jordansissel/fpm

Something like FPM would be a quick way to start. Creating .deb's the Right Way (TM) takes some serious dedication. ;-)

There's an intent-to-package notification filed in Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=794250

I saw that but I didn't know the process of debian. It'll be nice if it is released. :)
",2015-01-06 21:11:04,2016-06-29 03:21:30
1163,34,"Running `\d table_name` would always fail with the error `global name 'true' is not defined`.
","Fix \d [pattern] to not fail with (global name 'true' is not defined)
Wow. That was quite dumb of me to do that. :P 

Thanks for the PR. 
",2015-01-06 20:49:11,2015-01-06 22:19:16
1164,33,"Here is the error I get when I try to run it on Ubuntu 12.04:

Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 337, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 2279, in load_entry_point
    return ep.load()
  File ""/usr/lib/python2.7/dist-packages/pkg_resources.py"", line 1989, in load
    entry = **import**(self.module_name, globals(),globals(), ['**name**'])
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 16, in <module>
    from pygments.lexers.sql import SqlLexer
ImportError: No module named sql
","ImportError: No module named sql
Looks like you have an older version of pygments installed. Can you try `pip install -U pygments` and try again? 

I'll make sure to pin the version for dependent libraries. Thanks!

Yes, that fixed it thanks.
",2015-01-06 20:39:43,2015-01-07 02:31:01
1165,32,"Currently, on syntax errors in psycopg2 and connection error, the error isn't caught and pgcli fails and exits. Perhaps you should handle that more gracefully.
","More graceful error management
Can you give me a sample error that you're getting?

I tried `pgcli non-existent-db` and I get a `FATAL:  database ""abc"" does not exist`. 

I presume you're triggering a different scenario. If you can tell me how you're triggering the error that'll be useful as well. 

Syntax errors in the sql will cause an exit for me. 

For instance if my sql is just 'SELECT' I get :

```
amorini> SELECT                        
Traceback (most recent call last):
  File ""/usr/local/lib/python3.3/dist-packages/pgcli/packages/pgspecial.py"", line 746, in execute
    command_executor = CASE_SENSITIVE_COMMANDS[command][0]
KeyError: 'SELECT'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/usr/local/lib/python3.3/dist-packages/pgcli/pgexecute.py"", line 105, in run
    return pgspecial.execute(cur, sql)
  File ""/usr/local/lib/python3.3/dist-packages/pgcli/packages/pgspecial.py"", line 748, in execute
    command_executor = NON_CASE_SENSITIVE_COMMANDS[command.lower()][0]
KeyError: 'select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/usr/local/lib/python3.3/dist-packages/pgcli/main.py"", line 104, in cli
    res = pgexecute.run(document.text)
  File ""/usr/local/lib/python3.3/dist-packages/pgcli/pgexecute.py"", line 108, in run
    cur.execute(sql)
psycopg2.ProgrammingError: syntax error at end of input
LINE 1: SELECT
              ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python3.3/dist-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python3.3/dist-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python3.3/dist-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python3.3/dist-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python3.3/dist-packages/pgcli/main.py"", line 116, in cli
    _logger.debug(""sql: %r, error: %r"", document.text, e.message)
AttributeError: 'ProgrammingError' object has no attribute 'message'
```

In main.py 
Chaning e.message to e.pgerror seems to fix it.

```
115             except Exception as e:
116                 _logger.debug(""sql: %r, error: %r"", document.text, e.pgerror)
117                 click.secho(e.pgerror, err=True, fg='red')
```

http://initd.org/psycopg/docs/module.html#psycopg2.Error psycopg2 errros don't seem to have a message prop. This may be something that is different across version.

I've got similar errors under Python 3.4.2

```
» python --version                                                                                                  
Python 3.4.2
```

```
» pgcli
Traceback (most recent call last):
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/main.py"", line 73, in cli
    pgexecute = PGExecute(database, user, passwd, host, port)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/pgexecute.py"", line 68, in __init__
    password=self.password, host=self.host, port=self.port)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/psycopg2/__init__.py"", line 164, in connect
    conn = _connect(dsn, connection_factory=connection_factory, async=async)
psycopg2.OperationalError: FATAL:  database ""wangyandong"" does not exist


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/main.py"", line 75, in cli
    _logger.debug('Database connection failed: %r.', e.message)
AttributeError: 'OperationalError' object has no attribute 'message'
```

```
» pgcli djangodb                                                                                                    
djangodb> SELECT
Traceback (most recent call last):
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/packages/pgspecial.py"", line 746, in execute
    command_executor = CASE_SENSITIVE_COMMANDS[command][0]
KeyError: 'SELECT'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/pgexecute.py"", line 105, in run
    return pgspecial.execute(cur, sql)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/packages/pgspecial.py"", line 748, in execute
    command_executor = NON_CASE_SENSITIVE_COMMANDS[command.lower()][0]
KeyError: 'select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/main.py"", line 104, in cli
    res = pgexecute.run(document.text)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/pgexecute.py"", line 108, in run
    cur.execute(sql)
psycopg2.ProgrammingError: syntax error at end of input
LINE 1: SELECT
              ^


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/Users/wangyandong/.pyenv/versions/3.4.2/lib/python3.4/site-packages/pgcli/main.py"", line 116, in cli
    _logger.debug(""sql: %r, error: %r"", document.text, e.message)
AttributeError: 'ProgrammingError' object has no attribute 'message'
```

It works fine under Python 2.7.8

PR #49 and #50 fix this issue. It will be released in the next ver. 

Thank you for reporting.

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1
",2015-01-06 20:08:18,2015-01-07 08:36:03
1166,31,"For instance, my postgresql database has a column called ""order"" but obviously typing that in will result in a syntax error as it expects this to be the ORDER BY clause. You should detect some of these keywords which are actually columns and quote them with double quotes.
","Automatically quote some arguments
I'm hesitant to have `pgcli` do ""magicky"" things to a query, since that's a slippery slope. 

There is no reliable way to detect if something is a column name or a keyword. So doing this would require a full sql parser and even then it could lead to some undesirable behavior in odd edge cases.

So I'm leaning towards to ""Won't Fix"" for this one, unless you manage to convince me otherwise. :)

Well its autocompletion already is kinda magicky. But I agree, now that I think about it, it's not easily do-able.
",2015-01-06 20:07:38,2015-01-07 07:08:49
1167,30,"I'm a distro packager and the generated /usr/bin/pgcli doesn't work for me and I need more control. I need my own entry point so I can execute the module using python -m pgcli.main.
","Add entry point
@svenstaro Thank you for the PR. I'll check it out when I get home and merge it. Thanks!

:+1: Thank you for the PR. 

:rabbit2: 
",2015-01-06 19:50:52,2015-01-07 04:11:43
1168,29,"Installation on OSX using `pip` or `easy_install` fails with 

```
Error: pg_config executable not found.
```

I have no local installation of Postgres. I'm using a Docker container to run the database. 
","Cannot install without local Postgres
This is because pgcli requires psycopg2. Check if you have prebuild package, then installation will be able to skip this step.

Thank you!

How do I do this?

See http://initd.org/psycopg/docs/install.html#install-from-a-package

But I'm not sure how fink/MacPorts installation will work with pip. 

Thank you!
",2015-01-06 19:27:36,2015-01-06 21:13:31
1169,28,"I get an uncaught exception with backslash-commands that take arguments, like \c.

Consider the following interaction with a freshly installed database.

``` bash
$ pgcli testdb
testdb> \c testdb
You are now connected to database ""testdb"" as user ""<my_user>""
testdb>
```

From here, if I type \c without specifying which database I wish to connect to, I get an uncaught exception:

``` bash
testdb> \c
```

``` python
Traceback (most recent call last):
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/pgcli/pgexecute.py"", line 89, in run
    dbname = sql.split()[1]
IndexError: list index out of range

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/pgcli/main.py"", line 104, in cli
    res = pgexecute.run(document.text)
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/pgcli/pgexecute.py"", line 91, in run
    _logger.debug('Failed to switch. DB missing: %r', dbname)
UnboundLocalError: local variable 'dbname' referenced before assignment

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/<my_user>/.local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/home/<my_user>/.local/lib/python3.4/site-packages/pgcli/main.py"", line 116, in cli
    _logger.debug(""sql: %r, error: %r"", document.text, e.message)
AttributeError: 'UnboundLocalError' object has no attribute 'message'
```

A proper way of handling this is to inform the user that a database (or other argument for other backslash-commands) must be provided and return to the prompt gracefully.

System details:
OS: 3.17.6-1-ARCH
Python 3.4.2
postgres (PostgreSQL) 9.3.5
Latest pip-release of pgcli.
","""UnboundError"" with backslash-command without argument (\c)
You're right. My bad. I'll fix this issue.

Gazing over the code, the fix (of an uncaught exception while handling an exception) should be easy:
Change line 91 of pgexecute.py from:

``` python
 _logger.debug('Failed to switch. DB missing: %r', dbname)
```

to

``` python
_logger.debug('Failed to switch. DB missing.')
```

Maybe?

This issue is now fixed by PR #49, #50 and commit: eed1931b3f77d5f9b4553ea41ebeeb3188d2a769

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1
",2015-01-06 18:34:55,2015-01-07 08:36:32
1170,27,"Ubuntu 14.04, Python 2.7.3 (inside an activated virtualenv)
pgcli==0.10.0 (installed inside activated virtualenv)

I get the following...

``` bash
665 18:30:11 [~/code/ottoman] J:0 venv λ customcart ▼ pgcli ottoman
Traceback (most recent call last):
  File ""/home/vagrant/code/ottoman/venv/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/home/vagrant/code/ottoman/venv/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py"", line 2603, in <module>
  File ""/home/vagrant/code/ottoman/venv/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py"", line 666, in require
  File ""/home/vagrant/code/ottoman/venv/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py"", line 565, in resolve
pkg_resources.DistributionNotFound: Click
668 18:31:29 [~/code/ottoman] J:0 venv λ customcart ▼ psql ottoman
psql (9.3.5)
Type ""help"" for help.

ottoman=# \q
```
","Traceback on first run
Forgot to say thank you for this project. If there's 2 things I love, they're powerful CLIs and Postgres!

@treystout Can you tell me how you installed `pgcli`? 

This error message: `pkg_resources.DistributionNotFound: Click` says that Click is not installed which is a dependency for pgcli. 

That dependency should be automatically installed when you `pip install pgcli`. 

Sure thing, I saved the install log, inline below...

``` bash
654 17:32:50 [~/code/ottoman] J:0 venv λ customcart ▼ pip install pgcli
Downloading/unpacking pgcli
  Downloading pgcli-0.10.0.tar.gz
  Running setup.py (path:/home/vagrant/code/ottoman/venv/build/pgcli/setup.py) egg_info for package pgcli

Downloading/unpacking Click (from pgcli)
  Downloading click-3.3-py2.py3-none-any.whl (58kB): 58kB downloaded
Downloading/unpacking prompt-toolkit (from pgcli)
  Downloading prompt_toolkit-0.25.tar.gz (93kB): 93kB downloaded
  Running setup.py (path:/home/vagrant/code/ottoman/venv/build/prompt-toolkit/setup.py) egg_info for package prompt-toolkit

Requirement already satisfied (use --upgrade to upgrade): psycopg2 in ./venv/lib/python2.7/site-packages (from pgcli)
Downloading/unpacking sqlparse (from pgcli)
  Downloading sqlparse-0.1.14.tar.gz (55kB): 55kB downloaded
  Running setup.py (path:/home/vagrant/code/ottoman/venv/build/sqlparse/setup.py) egg_info for package sqlparse

Requirement already satisfied (use --upgrade to upgrade): docopt in ./venv/lib/python2.7/site-packages (from prompt-toolkit->pgcli)
Downloading/unpacking jedi>=0.8.1 (from prompt-toolkit->pgcli)
  Downloading jedi-0.8.1-final0.tar.gz (298kB): 298kB downloaded
  Running setup.py (path:/home/vagrant/code/ottoman/venv/build/jedi/setup.py) egg_info for package jedi

    warning: no previously-included files matching '*.pyc' found under directory '*'
Requirement already satisfied (use --upgrade to upgrade): pygments in ./venv/lib/python2.7/site-packages (from prompt-toolkit->pgcli)
Downloading/unpacking six>=1.8.0 (from prompt-toolkit->pgcli)
  Downloading six-1.9.0-py2.py3-none-any.whl
Downloading/unpacking wcwidth (from prompt-toolkit->pgcli)
  Downloading wcwidth-0.1.4-py2.py3-none-any.whl
Installing collected packages: pgcli, Click, prompt-toolkit, sqlparse, jedi, six, wcwidth
  Running setup.py install for pgcli

    Installing pgcli script to /home/vagrant/code/ottoman/venv/bin
  Running setup.py install for prompt-toolkit

    Installing ptpython script to /home/vagrant/code/ottoman/venv/bin
    Installing ptipython script to /home/vagrant/code/ottoman/venv/bin
  Running setup.py install for sqlparse
    changing mode of build/scripts-2.7/sqlformat from 664 to 775

    changing mode of /home/vagrant/code/ottoman/venv/bin/sqlformat to 775
  Running setup.py install for jedi

    warning: no previously-included files matching '*.pyc' found under directory '*'
Successfully installed pgcli Click prompt-toolkit sqlparse jedi six wcwidth
Cleaning up...
670 18:43:55 [~/code/ottoman] J:0 venv λ customcart ▼ pip freeze | grep click
click==3.3
```

I'm seeing the same issue.  Mac OS, system python 2.7.5, pip 1.5.6

```
$ pip show pgcli
---
Name: pgcli
Version: 0.10.0
Location: /Library/Python/2.7/site-packages
Requires: Click, prompt-toolkit, psycopg2, sqlparse

$ pip show click
---
Name: click
Version: 3.3
Location: /Library/Python/2.7/site-packages
Requires:
```

Let's try a couple of things. 
1. What shell are you using? If you're using zsh, can you issue a `hash -r` before trying? 
2. Can you try: `python -c 'import click; print (click.__version__)'`. This will check if click is successfully imported by python. 

Something to try is case-sensitivity - what happens if you clone pgcli and change `Click` to `click` in `setup.py`. 

Would check myself, but don't have a mac to test it with.

I think @macobo might be right in pointing out that this is a case-sensitivity issue in setup.py. 

Although I haven't been able to reproduce it I've changed the requirement from 'Click' to 'click'. Hopefully this will fix the issue. 

https://github.com/amjith/pgcli/blob/master/setup.py#L26

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1

Can you please try this new version to see if it fixes the issue? 

Hi @amjith the changes you made definitely fixed the problem with `click` dependency.
However, the same issue is now happening to `pygments`, I believe it's the exact same problem, so I tried to do what @macobo said, I tried to change dependency name in `setup.py`, but it didn't work.

I'm pretty sure I'm doing something wrong, because I'm not really sure what the steps are to make this change.

Here's what I did:
- Followed instructions in this page https://github.com/amjith/pgcli/blob/master/DEVELOP.rst
- Cloned the repository
- pip install -e .
- changed `setup.py` in my local cloned repository
- pip install -e .
- pgcli - same error

Can you tell me what are the steps I need to go through in order to make this change?
Then, I'll be able to make sure that all dependencies are working fine.

**UPDATE**

After changing  `setup.py` from `pygments` to `Pygments` and run `python setup.py install`, it worked. :+1: 

Thanks.

0.10.1 fixed the Click dependency issue originally reported, otherwise I had the exact same experience as @thiagophx. 

> There are only two hard things in Computer Science: cache invalidation and naming things.
> -- Phil Karlton

@thiagophx Can you paste the snippet of code in setup.py that made it finally work? 

If I understand you correctly, `click` has to be all lowercase and `Pygments` has to be capital case? This is nuts. 

@treystout Did you also have to change `pygments` to `Pygments` in setup.py? I'm starting to think that cache invalidation might be an easier problem to deal with. :P 

That's right, @amjith, it seems that `click` has to be all lowercase and `Pygments` has to be capital case :sob:
Here's my current `setup.py`:

``` python
import re
import ast
from setuptools import setup, find_packages

_version_re = re.compile(r'__version__\s+=\s+(.*)')

with open('pgcli/__init__.py', 'rb') as f:
    version = str(ast.literal_eval(_version_re.search(
        f.read().decode('utf-8')).group(1)))

description = 'CLI for Postgres Database. With auto-completion and syntax highlighting.'


setup(
        name='pgcli',
        author='Amjith Ramanujam',
        author_email='amjith[dot]r[at]gmail.com',
        version=version,
        license='LICENSE.txt',
        url='http://pgcli.com',
        packages=find_packages(),
        package_data={'pgcli': ['pgclirc']},
        description=description,
        long_description=open('README.rst').read(),
        install_requires=[
            'click >= 3.2',
            'prompt_toolkit==0.25',  # Need to pin this to 0.25 since APIs change quite a bit after this.
            'psycopg2 >= 2.5.4',
            'sqlparse >= 0.1.14',
            'Pygments >= 2.0'
            ],
        entry_points='''
            [console_scripts]
            pgcli=pgcli.main:cli
        ''',
        classifiers=[
            'Intended Audience :: Developers',
            'License :: OSI Approved :: BSD License',
            'Operating System :: Unix',
            'Programming Language :: Python',
            'Programming Language :: Python :: 2.6',
            'Programming Language :: Python :: 2.7',
            'Programming Language :: Python :: 3',
            'Programming Language :: Python :: 3.3',
            'Programming Language :: Python :: 3.4',
            'Programming Language :: SQL',
            'Topic :: Database',
            'Topic :: Database :: Front-Ends',
            'Topic :: Software Development',
            'Topic :: Software Development :: Libraries :: Python Modules',
            ],
        )

```

New version in PyPI to address this issue. https://pypi.python.org/pypi/pgcli/0.10.2

Thank you for reporting it. 

In case this helps someone else:  I still had issues with `pkg_resources.DistributionNotFound: Pygments` after installing version 0.10.2 with pip, but it worked after using `pip install --download`, then directly running `python setup.py install` in the downloaded pgcli directory.

Thanks for your help, and after trying it out, I love it, it's going to be a part of my workflow for sure.

Would recommend re-opening this til pip can install it cleanly. 

Here's a log on my machine of making a brand-new virtual env, install pgcli, and then seeing the pygments error on first run (0.10.2)

``` bash
02 20:39:59 [~] J:1 !  ▼ mkdir test
803 20:40:06 [~] J:1 !  ▼ cd test/
804 20:40:08 [~/test] J:1 !  ▼ ll
total 8
drwxrwxr-x  2 vagrant vagrant 4096 Jan  7 20:40 ./
drwxr-xr-x 18 vagrant vagrant 4096 Jan  7 20:40 ../
805 20:40:08 [~/test] J:1 !  ▼ virtualenv venv
New python executable in venv/bin/python
Installing setuptools...............................done.
Installing pip............................done.
806 20:40:24 [~/test] J:1 !  ▼ . venv/bin/activate
807 20:40:28 [~/test] J:1 venv  ▼ pip install pgcli
Collecting pgcli
  Downloading pgcli-0.10.2.tar.gz
Collecting click>=3.2 (from pgcli)
  Downloading click-3.3-py2.py3-none-any.whl (58kB)
    100% |################################| 61kB 957kB/s
Collecting Pygments>=2.0 (from pgcli)
  Downloading Pygments-2.0.1-py2-none-any.whl (672kB)
    100% |################################| 675kB 1.7MB/s
Collecting jedi==0.8.1 (from pgcli)
  Downloading jedi-0.8.1.tar.gz (304kB)
    100% |################################| 307kB 1.6MB/s
Collecting prompt-toolkit==0.25 (from pgcli)
  Downloading prompt_toolkit-0.25.tar.gz (93kB)
    100% |################################| 94kB 1.1MB/s
Collecting psycopg2>=2.5.4 (from pgcli)
  Downloading psycopg2-2.5.4.tar.gz (682kB)
    100% |################################| 684kB 1.4MB/s
Collecting sqlparse>=0.1.14 (from pgcli)
  Downloading sqlparse-0.1.14.tar.gz (55kB)
    100% |################################| 57kB 1.7MB/s
Collecting docopt (from prompt-toolkit==0.25->pgcli)
  Downloading docopt-0.6.2.tar.gz
Collecting six>=1.8.0 (from prompt-toolkit==0.25->pgcli)
  Downloading six-1.9.0-py2.py3-none-any.whl
Collecting wcwidth (from prompt-toolkit==0.25->pgcli)
  Downloading wcwidth-0.1.4-py2.py3-none-any.whl
Installing collected packages: wcwidth, six, docopt, sqlparse, psycopg2, prompt-toolkit, jedi, Pygments, click, pgcli


  Running setup.py install for docopt
  Running setup.py install for sqlparse
    changing mode of build/scripts-2.7/sqlformat from 664 to 775
    changing mode of /home/vagrant/test/venv/bin/sqlformat to 775
  Running setup.py install for psycopg2
    building 'psycopg2._psycopg' extension
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/psycopgmodule.c -o build/temp.linux-x86_64-2.7/psycopg/psycopgmodule.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/green.c -o build/temp.linux-x86_64-2.7/psycopg/green.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/pqpath.c -o build/temp.linux-x86_64-2.7/psycopg/pqpath.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/utils.c -o build/temp.linux-x86_64-2.7/psycopg/utils.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/bytes_format.c -o build/temp.linux-x86_64-2.7/psycopg/bytes_format.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/connection_int.c -o build/temp.linux-x86_64-2.7/psycopg/connection_int.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/connection_type.c -o build/temp.linux-x86_64-2.7/psycopg/connection_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/cursor_int.c -o build/temp.linux-x86_64-2.7/psycopg/cursor_int.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/cursor_type.c -o build/temp.linux-x86_64-2.7/psycopg/cursor_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/diagnostics_type.c -o build/temp.linux-x86_64-2.7/psycopg/diagnostics_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/error_type.c -o build/temp.linux-x86_64-2.7/psycopg/error_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/lobject_int.c -o build/temp.linux-x86_64-2.7/psycopg/lobject_int.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/lobject_type.c -o build/temp.linux-x86_64-2.7/psycopg/lobject_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/notify_type.c -o build/temp.linux-x86_64-2.7/psycopg/notify_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/xid_type.c -o build/temp.linux-x86_64-2.7/psycopg/xid_type.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_asis.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_asis.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_binary.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_binary.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_datetime.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_datetime.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_list.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_list.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_pboolean.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_pboolean.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_pdecimal.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_pdecimal.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_pint.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_pint.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_pfloat.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_pfloat.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/adapter_qstring.c -o build/temp.linux-x86_64-2.7/psycopg/adapter_qstring.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/microprotocols.c -o build/temp.linux-x86_64-2.7/psycopg/microprotocols.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/microprotocols_proto.c -o build/temp.linux-x86_64-2.7/psycopg/microprotocols_proto.o -Wdeclaration-after-statement
    gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=""2.5.4 (dt dec pq3 ext)"" -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -DPG_VERSION_HEX=0x090305 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/usr/include/python2.7 -I. -I/usr/include/postgresql -I/usr/include/postgresql/9.3/server -c psycopg/typecast.c -o build/temp.linux-x86_64-2.7/psycopg/typecast.o -Wdeclaration-after-statement
    gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro build/temp.linux-x86_64-2.7/psycopg/psycopgmodule.o build/temp.linux-x86_64-2.7/psycopg/green.o build/temp.linux-x86_64-2.7/psycopg/pqpath.o build/temp.linux-x86_64-2.7/psycopg/utils.o build/temp.linux-x86_64-2.7/psycopg/bytes_format.o build/temp.linux-x86_64-2.7/psycopg/connection_int.o build/temp.linux-x86_64-2.7/psycopg/connection_type.o build/temp.linux-x86_64-2.7/psycopg/cursor_int.o build/temp.linux-x86_64-2.7/psycopg/cursor_type.o build/temp.linux-x86_64-2.7/psycopg/diagnostics_type.o build/temp.linux-x86_64-2.7/psycopg/error_type.o build/temp.linux-x86_64-2.7/psycopg/lobject_int.o build/temp.linux-x86_64-2.7/psycopg/lobject_type.o build/temp.linux-x86_64-2.7/psycopg/notify_type.o build/temp.linux-x86_64-2.7/psycopg/xid_type.o build/temp.linux-x86_64-2.7/psycopg/adapter_asis.o build/temp.linux-x86_64-2.7/psycopg/adapter_binary.o build/temp.linux-x86_64-2.7/psycopg/adapter_datetime.o build/temp.linux-x86_64-2.7/psycopg/adapter_list.o build/temp.linux-x86_64-2.7/psycopg/adapter_pboolean.o build/temp.linux-x86_64-2.7/psycopg/adapter_pdecimal.o build/temp.linux-x86_64-2.7/psycopg/adapter_pint.o build/temp.linux-x86_64-2.7/psycopg/adapter_pfloat.o build/temp.linux-x86_64-2.7/psycopg/adapter_qstring.o build/temp.linux-x86_64-2.7/psycopg/microprotocols.o build/temp.linux-x86_64-2.7/psycopg/microprotocols_proto.o build/temp.linux-x86_64-2.7/psycopg/typecast.o -L/usr/lib/x86_64-linux-gnu -lpq -o build/lib.linux-x86_64-2.7/psycopg2/_psycopg.so
  Running setup.py install for prompt-toolkit
    Installing ptpython script to /home/vagrant/test/venv/bin
    Installing ptipython script to /home/vagrant/test/venv/bin
  Running setup.py install for jedi


  Running setup.py install for pgcli
    Installing pgcli script to /home/vagrant/test/venv/bin
Successfully installed Pygments-2.0.1 click-3.3 docopt-0.6.2 jedi-0.8.1 pgcli-0.10.2 prompt-toolkit-0.25 psycopg2-2.5.4 six-1.9.0 sqlparse-0.1.14 wcwidth-0.1.4
808 20:40:41 [~/test] J:1 venv  ▼ pgcli
Traceback (most recent call last):
  File ""/home/vagrant/test/venv/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/home/vagrant/test/venv/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py"", line 2603, in <module>
  File ""/home/vagrant/test/venv/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py"", line 666, in require
  File ""/home/vagrant/test/venv/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py"", line 565, in resolve
pkg_resources.DistributionNotFound: Pygments>=2.0
```

Damn! I have no idea why this is happening. :(

@duffytilleman and @treystout Can you tell me what version of `pip` you're using? 

I'm reopening this issue. 

I'm on pip version 1.5.6, just noticed they appear to have jumped up to 6.x series

pip 1.5.6

My one suggestion is try upgrading both `setuptools` and `pip`. 

I suspect that there is a mismatch between setuptools and pip which is causing this behavior. 

Another suggestion is try using `easy_install` (I know that sounds terrible), but I've heard from someone that when they couldn't get it to install via pip they tried it via easy_install and it worked. 

So those are the two options.

Hello,

just for information; I was also getting traceback on first run on Debian 7 stable (Wheezy)

```
borisko@sandbox:~$ pgcli test
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.3', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python3.2/dist-packages/pkg_resources.py"", line 339, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/local/lib/python3.2/dist-packages/pkg_resources.py"", line 2470, in load_entry_point
    return ep.load()
  File ""/usr/local/lib/python3.2/dist-packages/pkg_resources.py"", line 2184, in load
    ['__name__'])
  File ""/usr/local/lib/python3.2/dist-packages/pgcli/main.py"", line 11, in <module>
    from prompt_toolkit import CommandLineInterface, AbortAction, Exit
  File ""/usr/local/lib/python3.2/dist-packages/prompt_toolkit/__init__.py"", line 20, in <module>
    from .layout import Layout
  File ""/usr/local/lib/python3.2/dist-packages/prompt_toolkit/layout/__init__.py"", line 6, in <module>
    from pygments.token import Token
  File ""/usr/local/lib/python3.2/dist-packages/pygments/__init__.py"", line 37, in <module>
    from pygments.util import StringIO, BytesIO
  File ""/usr/local/lib/python3.2/dist-packages/pygments/util.py"", line 222
    return u'[%s-%s]' % (unichr(a), unichr(b))
                    ^
SyntaxError: invalid syntax
```

Thanks @amjith , problem solved by installing using `easy_install`!

@borissamardzija Did you try upgrading `setuptools` and `pip`. 

I've heard from someone else that after they did 

`pip install -U setuptools pip`

they were able to install `pgcli` and get it to work without problems. 

But if easy_install works for you then more power. :)

Thanks for letting me know. 

Now I tried to update `setuptools` and `pip`, but the problem is still here.

```
borisko@sandbox:~$ sudo pip install -U setuptools pip
Downloading/unpacking setuptools from https://pypi.python.org/packages/3.4/s/setuptools/setuptools-11.3.1-py2.py3-none-any.whl#md5=59cd761f2f2b926313bed7f83337e4d7
  Downloading setuptools-11.3.1-py2.py3-none-any.whl (500kB): 500kB downloaded
Downloading/unpacking pip from https://pypi.python.org/packages/py2.py3/p/pip/pip-6.0.6-py2.py3-none-any.whl#md5=0472d9dc76a0df6cc6ab545e40aef832
  Downloading pip-6.0.6-py2.py3-none-any.whl (1.3MB): 1.3MB downloaded
Installing collected packages: setuptools, pip
  Found existing installation: setuptools 7.0
    Uninstalling setuptools:
      Successfully uninstalled setuptools
  Found existing installation: pip 1.5.6
    Uninstalling pip:
      Successfully uninstalled pip
Successfully installed setuptools pip
Cleaning up...
```

Installed again with `easy_install` and works great ;)

Please let me know if I can do anything else to help you with this, if needed.

updating pip and setuptools worked for me.

Cleaning out old issues.
",2015-01-06 18:33:31,2015-05-31 07:04:42
1171,26,"Whenever I try to use the program I get a python error:

```
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 86, in cli
    refresh_completions(pgexecute, completer)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 176, in refresh_completions
    tables = pgexecute.tables()
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/pgexecute.py"", line 120, in tables
    with self.conn.cursor() as cur:
AttributeError: __exit__
```

Using python 2.7 and psql 9.3.5 on Ubuntu 14.04.
","Getting an error trying to run
I get a slightly different error on OSX 10.10, using Python 2.7 and Postgresql 9.2.4.

```
~ $pgcli --help
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 2603, in <module>
    working_set.require(__requires__)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 666, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 565, in resolve
    raise DistributionNotFound(req)  # XXX put more info here
pkg_resources.DistributionNotFound: Click
```

@rpoole Can you tell me how you're launching pgcli? What are the command line params?

It looks like the database connection is failing. I should report a more sensible error message for that.

@sillypog Your error message is because `Click` is not installed. `Click` is a dependency of `pgcli` that should be installed when you do a `pip install pgcli`.

Can you tell me how you installed pgcli? 

Hi @amjith, thanks a lot for this project!
I get the same error as @sillypog, and I did install `pgcli` using `pip`.
Here's the output:

``` text
$ pgcli
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 2603, in <module>
    working_set.require(__requires__)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 666, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 565, in resolve
    raise DistributionNotFound(req)  # XXX put more info here
pkg_resources.DistributionNotFound: Click

$ pip install pgcli
Requirement already satisfied (use --upgrade to upgrade): pgcli in /Library/Python/2.7/site-packages
Requirement already satisfied (use --upgrade to upgrade): Click in /Library/Python/2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): prompt-toolkit in /Library/Python/2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): psycopg2 in /Library/Python/2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): sqlparse in /Library/Python/2.7/site-packages (from pgcli)
Requirement already satisfied (use --upgrade to upgrade): docopt in /Library/Python/2.7/site-packages (from prompt-toolkit->pgcli)
Requirement already satisfied (use --upgrade to upgrade): jedi>=0.8.1 in /Library/Python/2.7/site-packages (from prompt-toolkit->pgcli)
Requirement already satisfied (use --upgrade to upgrade): pygments in /Library/Python/2.7/site-packages (from prompt-toolkit->pgcli)
Requirement already satisfied (use --upgrade to upgrade): six>=1.8.0 in /Library/Python/2.7/site-packages (from prompt-toolkit->pgcli)
Requirement already satisfied (use --upgrade to upgrade): wcwidth in /Library/Python/2.7/site-packages (from prompt-toolkit->pgcli)
Cleaning up...

$ which python
/usr/bin/python

$ pip freeze | grep 'click\|pgcli'
click==3.3
pgcli==0.10.0
```

It seems that `pgcli` and `click` were installed successfully, but it still doesn't work.
Any idea why?

Thanks in advance.

@sillypog @thiagophx Let's track this issue on #27. The original issue reported by @rpoole seems unrelated to the ones you guys are facing. 

@rpoole Which psycopg version you're using? Context Manager support in cursor was added in 2.5 http://pythonhosted.org//psycopg2/news.html#what-s-new-in-psycopg-2-5 

@cezio that was it! I had an old version of psycopg2 (2.4.5).

Thanks for the help and the hard work on the tool - it looks great!

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1
",2015-01-06 18:16:57,2015-01-07 08:36:21
1172,25,"It takes it well over a minute to start up on my database - I suspect it is due to the inefficiency of iterating over all the tables and then issuing separate selects to pull in column names. (I am seeing boatloads of queries like SELECT column_name FROM information_schema.columns WHERE\n    table_name ='')

Would likely be faster to do a single select table_name, column_name from information_schema.columns.
","Extremely Slow Startup
That's an awesome idea. Thanks for the suggestion. I'll add that to the next ver. 
",2015-01-06 18:12:53,2015-01-09 08:24:24
1173,24,"OS X Terminal.app. My environment:

```
# env | grep ""LANG|LC"" 
LANG=en_US.UTF-8
```

pgcli examples:

```
test> create table unicodechars (t text);
CREATE TABLE
test> insert into unicodechars (t) values ('e');
INSERT 0 1
test> insert into unicodechars (t) values ('é');
INSERT 0 1
test> select * from unicodechars limit 1;
+-----+
| t   |
|-----|
| e   |
+-----+
SELECT 1
test> select * from unicodechars;

test>
```

The last query returns nothing, not even an error. Also:

```
test> select 'e';
+------------+
| ?column?   |
|------------|
| e          |
+------------+
SELECT 1
test> select 'é';

test> select '😁';

test>
```

The prompt is also screwed up by  UTF-8 chars. For example, using the up-arrow to go back leads to:

```
test> selecté';
```
","Unicode chars in results cause query to return nothing
That's awful. Sorry about that. 

I'll take a look at it. Thank you for the detailed report. 

This is fixed by pr #40. 

The fix will be released in next ver. 

Awesome, thanks!

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1
",2015-01-06 18:11:08,2015-01-07 08:35:43
1174,23,"http://www.emacswiki.org/emacs/SqlMode
","Investigate if it's possible to embed pgcli inside emacs 
Closing it since it's a rare use case. 

I would like this.. not so rare if you're an emacs user. 

Sql-mode is pretty lacking in completion and more dynamic stuff, I think we could build (I would be willing to try to build) tooling over dbcli if out-of-band or client/server style interaction is possible.  Sql-mode is really handy for iteratively building out complex queries.
+1
+1
+1
pgcli would be awesome as a back-end for ob-sql, so then you could query from org-mode source blocks and have autocompletion, etc. Can we please re-open this?",2015-01-06 18:09:48,2015-05-26 17:38:02
1175,22,"Right now the tables are only populated from the public schema. Change this to include tables from all schemas. 
","Add auto-completion for tables other than public schema
Or maybe include first all the schemas, and then all the tables like:

``` sql
SELECT * FROM p<TAB>
```

Should show schemas like public, products and payments and put a dot in front after selection, and

``` sql
SELECT * FROM products.ca<TAB>
```

Should autocomplete to the products.catalog table.

This going to wreck the auto-completion code. :)

Right now auto-completion assumes that a 'dot' will trigger a column name completion. But I didn't fully think about schemas. 

Thanks for the suggestion, it'll take a bit longer to implement (I think), but I'll definitely get to it. 

There's a [ORM](https://github.com/jeremyevans/sequel#qualifying-identifiers-columntable-names) on rubyland who handles schemas name with double underscores, but it's kinda strange.

And I don't know about the average pguser, but on our team we have a bigdatabase, with all tables on schemas other than public, grouped by topic.

I'm also missing general schema support in other commands, e.g. \dt. `\dt moon.*` apparently ignores the `moon` part and just lists tables in the `public` schema.

We never put anything in the  `public` schema. `pgcli` looks very promising, but missing schema support is a deal breaker for us.

This feature is finally available in master. Thanks to @darikg's hard work on this.

You can try it out by installing pgcli from github directly (since I haven't release the new version to PyPI yet). 

```
pip install -U -e git+https://github.com/amjith/pgcli.git#egg=pgcli
```

I would appreciate if some of you could try it out and let me know if it works to your satisfaction. 

I have tested it for non-public schema. Works well and good. Can be released to PyPI.

This has been released to PyPI a long time ago.

I was installing it from [Homebew](http://brewformulas.org/Pgcli) couple of weeks back. This feature was not available. Should we release it to Homebrew separately?

Can you try `brew update` and then try `brew upgrade pgcli`? 

I had updated brew as well. 
",2015-01-06 18:05:46,2015-01-27 04:26:52
1176,21,"```
$ psql mydb
psql: FATAL:  role ""me"" does not exist
```

vs

```
$ pgcli mydb
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 572, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 552, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 744, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/dist-packages/click/core.py"", line 388, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/pgcli/main.py"", line 76, in cli
    click.secho(e.message, err=True, fg='red')
  File ""/usr/local/lib/python2.7/dist-packages/click/termui.py"", line 381, in secho
    text = style(text, **styles)
TypeError: style() got an unexpected keyword argument 'err'
```

First thought: there is something wrong in my installation, too bad. I did a little googling then `pgcli --help` and rerun it as `pgcli -U myuser mydb`. That worked, nevertheless, as a low priority enhancement, try mimicking psql's error messages we are all familiar with.
","Better error message for failed connections
Valid point. I'll try to mimic psql errors. 

Although the error trace you pasted leads me to believe that the connection error actually triggered a different issue with the Click library used by pgcli. Are you using Windows?

No,  I'm on Ubuntu 12.04. Can I do anything to help you debugging this error? 

This issue should be fixed now by PR #49 and #50. Can you try installing it straight from git HEAD and see if that fixes it. 

You can install it directly from the git repo using the following command: 

`pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli`

I got the same stack trace but probably the problem is due to #54 because I have click 3.1

I just merged that PR to master. Can you try it again? Sorry about that. 

Version 0.10.1 released to PyPI. https://pypi.python.org/pypi/pgcli/0.10.1

Can you please try this and confirm if this fixes the issue? 

Works like a charm. It upgraded click to 3.3 and the new error message is nice.
",2015-01-06 17:53:29,2015-01-07 08:44:09
1177,20,"Does pgcli integrate with .psqlrc?  If not, do you have any plans to add support for it?

Here is an example of my .psqlrc file: https://gist.github.com/jaytaylor/e5aa89c8f3aaab3f576f
","Does pgcli integrate with .psqlrc?
:+1: 

Right now it doesn't have support for .psqlrc. But that's not a bad idea. 

That said, I looked at your .psqlrc, man it's a beast. That'll take some time to get done. 

I should probably mention that it does create a .pgclirc file in your home folder.

:+1: 

:+1:

:+1:

:+1: 
please add the support for .psqlrc
I think so integration .psqlrc is bad idea - it create strong dependency in design - and probably nobodu expect compatibility between psql and pgcli. But the idea is correct, and some like .pgclirc should be implemented. Somebody can use symlink to .psqlrc
@okbob Thanks for articulating my concerns. 

We will never be able to catch up to the features supported by `psql`. Rather than playing catch up with psql, I'd rather stand apart as an alternative that has overlapping features. 

There is a pgclirc which is located under ~/.config/pgcli/config and it is well-documented about the things one can tweak.

I'm closing this as ""Won't Fix"". ",2015-01-06 17:38:19,2017-12-22 22:47:41
1178,19,"The `tabulate` output looks very pretty, but a feature I love from `psql` is the expanded display option (`\x`) for looking at rows in really wide tables (ie tables with rows that are too big to fit in one line on the terminal). However, this isn't yet supported in pgcli:

```
$ pgcli
[dbname]> \x
syntax error at or near ""\""
LINE 1: \x
        ^
```
","Support \x for Expanded Display
+1

This was requested by a few people. Need to look at how to do this effectively. 

+1

+1

+1

+1

+1

Merged in PR #63 that adds \x support to master. 

This currently fails on Python 3, but that will be fixed before the next release. 

Can someone install the latest master and try it out? 

You can install the latest master using the following command. 

`pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli`

It mostly works, but it seems to be printing extra information:

```
$ pgcli
[dbname]> \x
Expanded display is on.
Expanded display is on.
[dbname]> select generate_series(1,5);
-[ RECORD 0 ]---+--
generate_series | 1
-[ RECORD 1 ]---+--
generate_series | 2
-[ RECORD 2 ]---+--
generate_series | 3
-[ RECORD 3 ]---+--
generate_series | 4
-[ RECORD 4 ]---+--
generate_series | 5

SELECT 5
+-------------------+
|   generate_series |
|-------------------|
|                 1 |
|                 2 |
|                 3 |
|                 4 |
|                 5 |
+-------------------+
SELECT 5
```

Whoah...it's not just with `\x`. I'm seeing double (`blarg` is just a test table):

```
$ pgcli
[dbname]> select * from blarg;
+-----------+
|         x |
|-----------|
|         2 |
|         3 |
| -17171717 |
+-----------+
SELECT 3
+-----------+
|         x |
|-----------|
|         2 |
|         3 |
| -17171717 |
+-----------+
SELECT 3
```

@jackmaney Fixed. Can you try again? 

9a6292170b909b200be3ea8082afb7296e002151 - fixes the double printing of output.

That did it. :smile: 

Awesome work everybody!

On Fri, Jan 9, 2015 at 1:05 AM, Jack Maney notifications@github.com wrote:

> That did it. [image: :smile:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/issues/19#issuecomment-69309311.

This is now available in the release version 0.11.0

https://pypi.python.org/pypi?:action=display&name=pgcli&version=0.11.0
",2015-01-06 17:35:05,2015-01-10 06:14:22
1179,18,"So, after [getting past the `jedi` issue](https://github.com/amjith/pgcli/issues/16), I got pgcli to work on a local PostgreSQL instance. I'm now trying to connect to a [Greenplum database](http://www.pivotal.io/big-data/pivotal-greenplum-database) (a distributed database built on top of PostgreSQL. Anything that can talk to vanilla Postgres should be able to talk to Greenplum...I've had no issues with, eg, pgAdmin or psycopg2). Here's what happens:

```
$ pgcli postgresql://[username]:[password]@[host]/[dbname]
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/usr/local/lib/python2.7/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/main.py"", line 86, in cli
    refresh_completions(pgexecute, completer)
  File ""/usr/local/lib/python2.7/site-packages/pgcli/main.py"", line 180, in refresh_completions
    completer.extend_database_names(pgexecute.databases())
  File ""/usr/local/lib/python2.7/site-packages/pgcli/pgexecute.py"", line 138, in databases
    cur.execute(self.databases_query)
psycopg2.ProgrammingError: column d.datcollate does not exist
LINE 4:        d.datcollate as ""Collate"",
```

Googling seems to turn up nothing.

Thanks again for your time.
","Can't connect to Greenplum server (psycopg2.ProgrammingError: column d.datcollate does not exist)
Ah, I think I see the issue. This error occurs when trying to run the following query:

```
SELECT d.datname as ""Name"",
       pg_catalog.pg_get_userbyid(d.datdba) as ""Owner"",
       pg_catalog.pg_encoding_to_char(d.encoding) as ""Encoding"",
       d.datcollate as ""Collate"",
       d.datctype as ""Ctype"",
       pg_catalog.array_to_string(d.datacl, E'\n') AS ""Access privileges""
    FROM pg_catalog.pg_database d
    ORDER BY 1;
```

(which grabs metadata about databases). The `datcollate` column [exists in that table in PostgreSQL 9.4](http://www.postgresql.org/docs/9.4/static/catalog-pg-database.html), but [not in PostgreSQL 8.2.15](http://www.postgresql.org/docs/8.2/static/catalog-pg-database.html) (which is the psql version upon which Greenplum is built).

The column seems to specify the `LC_COLLATE` configuration variable for a given database (which, along with the `datctype` column, specifies a locale for the database). Please let me know if I'm wrong, but I don't seem to see these columns used anywhere in the rest of the code. Are they necessary?

@jackmaney You're right about the dependency of Postgres 9.4. In order to mimic the special back-slash commands from psql, I had to translate a giant chunk of C-code from psql source to Python. 

I chose to stick with the minimum viable implementation that supported the latest PG (it was 9.2 at the time). I'll work on adding graceful fallback when an older version is use.

Excellent. Thanks!

Just wanted to chime in and mention that this unfortunately means pgcli won't work with Amazon's Redshift platform either. Would be happy to help try and add support if you'd like a hand and this issue isn't high priority

I would love to get some help on this one. 

The code for dealing with the special command can be found here: https://github.com/amjith/pgcli/blob/master/pgcli/packages/pgspecial.py#L76

The code is a translation of C code from psql source code. 

You can see the conditions that check for postgres versions in psql code here: 
https://github.com/postgres/postgres/blob/master/src/bin/psql/describe.c#L1252

I don't know how to detect the version of Postgres using psycopg2, but it might not be necessary to detect the version if it can be wrapped in a retry loop if a command fails. 

It's a fragile approach, but I know that `select version();` produces a version string:

```
# select version();
                                                                              version
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PostgreSQL 9.4.0 on x86_64-apple-darwin, compiled by i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00), 64-bit
(1 row)
```

Awesome! I forgot about `select version()`. 

I'll take fragile over non-existent. :)

Aha. There is a way to find the server version using psycopg2. http://initd.org/psycopg/docs/connection.html#connection.server_version

:)

Excellent. I'll try to scrape together a bit of time this weekend to give this a shot.

Anyone working on this? Considering doing this myself but I don't want to duplicate effort.

@hollobon No one is working on it as far as I know. That's why I put a back_burner label on it. Because I couldn't find time to work on it. 

If you need some help getting started please feel free to leave a comment. 

I got this connected to Redshift (PostgreSQL 8.0.2) and am currently working on getting the meta commands working. I'll make a pull request this weekend but I'll need some help getting my code cleaned up since I'm still very much a beginner python developer.

Great news. :+1: Happy to help with beta testing or in any other way possible.

I'll be happy to help clean up the code. Feel free to open the PR. 

The meta commands (or back-slash) command can be challenging to implement. So I'll be fine if you want to do that as a separate PR. :)

Thank you for taking a stab at it. :)

I'm planning to translate the version-dependent bits from psql (mainly in src/tools/bin/psql/describe.c). Hoping to make a start tonight / tomorrow, but don't want to tread on toes so I'll hold off if others doing the same.

I'd also like to use `pgcli` with Redshift, so +1 to this effort. I'm happy to participate in code review when a PR comes together.

+1
Using pgcli with Redshift, and getting the same error

This is now available in v1.0. Please upgrade. 

```
pip install -U pgcli
```
",2015-01-06 17:30:07,2016-06-29 03:23:08
1180,17,"Not sure if this is a problem with Windows x64, python 3.3, or the conda virtual environment, but I get this error immediately after connecting to a database. Everything works fine if I use a python 2.7 venv instead.

Traceback (most recent call last):
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\Scripts\pgcli-script.py"", line 9,
in <module>
    load_entry_point('pgcli==0.10.0', 'console_scripts', 'pgcli')()
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\click\core.py"",
line 610, in **call**
    return self.main(_args, *_kwargs)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\click\core.py"",
line 590, in main
    rv = self.invoke(ctx)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\click\core.py"",
line 782, in invoke
    return ctx.invoke(self.callback, *_ctx.params)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\click\core.py"",
line 416, in invoke
    return callback(_args, **kwargs)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\pgcli\main.py"",
line 95, in cli
    document = cli.read_input(on_exit=AbortAction.RAISE_EXCEPTION)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit_
_init__.py"", line 243, in read_input
    next(g)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit_
_init__.py"", line 295, in _read_input
    self._redraw()
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit\_
_init__.py"", line 182, in _redraw
    self.renderer.render(self)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit\r
enderer.py"", line 465, in render
    style=self._style, grayed=cli.is_aborting,
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit\r
enderer.py"", line 345, in output_screen_diff
    current_pos = move_cursor(screen.get_cursor_position())
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit\r
enderer.py"", line 232, in move_cursor
    output.cursor_up(current_y - new.y)
  File ""C:\Users\dg\Anaconda3\envs\pycli_py33\lib\site-packages\prompt_toolkit\t
erminal\win32_output.py"", line 166, in cursor_up
    sr = self._screen_buffer_info().dwCursorPosition
AttributeError: 'NoneType' object has no attribute 'dwCursorPosition'
","Error when running in python 3 (Windows)
It looks like the issue could be on the prompt_toolkit library, but I'll try this tonight on Azure or something and see if I can fix it.  

I'm closing this for now, since this is not an issue anymore.
",2015-01-06 17:23:37,2015-05-26 17:36:56
1181,16,"It seems as though `pgcli` can't find a package called `jedi`:

```
$ pgcli localhost
Traceback (most recent call last):
  File ""/usr/local/bin/pgcli"", line 5, in <module>
    from pkg_resources import load_entry_point
  File ""build/bdist.macosx-10.9-x86_64/egg/pkg_resources.py"", line 2912, in <module>
  File ""build/bdist.macosx-10.9-x86_64/egg/pkg_resources.py"", line 550, in _build_master
  File ""build/bdist.macosx-10.9-x86_64/egg/pkg_resources.py"", line 563, in _build_from_requirements
  File ""build/bdist.macosx-10.9-x86_64/egg/pkg_resources.py"", line 742, in resolve
pkg_resources.DistributionNotFound: jedi>=0.8.1
```

However, I already have a sufficient version of this package installed:

```
$ python
Python 2.7.9 (default, Dec 15 2014, 10:15:39)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import jedi
>>> jedi.__version__
'0.8.1-final0'
```

Am I missing anything obvious here?

Thank you for your time.
","Can't start (pkg_resources.DistributionNotFound: jedi>=0.8.1)
I should add that I'm using the Python 2.7.9 provided by Homebrew.

Can you try `pip install jedi==0.8.1`? 

There was a recently a change in pip that disallowed packages that didn't conform to PEP 440 from being installed. It was rectified by Jedi just two days ago. So it's worth upgrading jedi. 

Ref: https://github.com/davidhalter/jedi/issues/521

A `pip install jedi==0.8.1` seemed to do the trick. I'm having another issue in connecting to a server, however. I'll open up a separate issue for that.

Thanks!

I had the same error and a quick `pip freeze` told me the jedi I had installed was `jedi==0.8.1-final0`.

Explicitly installing `pip install jedi==0.8.1` fixed the problem, but I'm not sure where the issue started.
",2015-01-06 17:14:05,2015-01-06 17:25:32
1182,15,,"Added \di and \dv meta-commands.
Looks good!

Thank you for adding the commands.  :japanese_goblin: 
",2015-01-03 21:43:58,2015-01-04 03:16:51
1183,14,,"Fix for bug #12: Config reading is failing when an option is missing.
Works great! 

Thank you! :kimono: 
",2014-12-30 23:37:59,2014-12-30 23:53:30
1184,13,,"Fix for bug #12: Config reading is failing when an option is missing.
This doesn't fix the issue if someone has removed the smart-completion option from the file. 

I also think it can be quite cumbersome in the future to do this check for every option. 

I think SafeConfigParser() constructor takes a defaults param where you can specify the defaults for all the options. 

That might be a better approach. So see if you can write a helper method that reads the default pgclirc file in the project directory and populate the defaults and then overlay the values from the actual config file .pgclirc.

Feel free to refactor (or remove completely) the helpers in config.py if you think they're too crude or cumbersome. 

Ah ok.
On 30 Dec 2014 14:57, ""Amjith Ramanujam"" notifications@github.com wrote:

> This doesn't fix the issue if someone has removed the smart-completion
> option from the file.
> 
> I also think it can be quite cumbersome in the future to do this check for
> every option.
> 
> I think SafeConfigParser() constructor takes a defaults param where you
> can specify the defaults for all the options.
> 
> That might be a better approach. So see if you can write a helper method
> that reads the default pgclirc file in the project directory and populate
> the defaults and then overlay the values from the actual config file
> .pgclirc.
> 
> Feel free to refactor (or remove completely) the helpers in config.py if
> you think they're too crude or cumbersome.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/13#issuecomment-68408093.
",2014-12-30 22:40:11,2014-12-30 23:37:08
1185,12,"Steps to reproduce. 

Open ~/.pgclirc, delete the line with multi-line option. 

Launch pgcli and it crashes with the following error: 

```
  File ""/Users/amjith/.virtualenvs/pg-cli/bin/pgcli"", line 9, in <module>
    load_entry_point('pgcli==0.8.1', 'console_scripts', 'pgcli')()
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 610, in __call__
    return self.main(*args, **kwargs)
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 590, in main
    rv = self.invoke(ctx)
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 782, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 416, in invoke
    return callback(*args, **kwargs)
  File ""/Users/amjith/Dropbox/code/python/pgcli/pgcli/main.py"", line 55, in cli
    multi_line = config.getboolean('main', 'multi_line')
  File ""/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py"", line 368, in getboolean
    v = self.get(section, option)
  File ""/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py"", line 618, in get
    raise NoOptionError(option, section)
ConfigParser.NoOptionError: No option u'multi_line' in section: u'main'
```

This is because the ConfigParser is reading a config option without providing a default value to fall back. 

@j-bennet Would you mind taking a stab at this bug? If you don't have time, let me know. 
","Config reading is failing when an option is missing
Yeah I will look today during baby nap.
On 30 Dec 2014 00:38, ""Amjith Ramanujam"" notifications@github.com wrote:

> Steps to reproduce.
> 
> Open ~/.pgclirc, delete the line with multi-line option.
> 
> Launch pgcli and it crashes with the following error:
> 
>   File ""/Users/amjith/.virtualenvs/pg-cli/bin/pgcli"", line 9, in <module>
>     load_entry_point('pgcli==0.8.1', 'console_scripts', 'pgcli')()
>   File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 610, in **call**
>     return self.main(_args, *_kwargs)
>   File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 590, in main
>     rv = self.invoke(ctx)
>   File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 782, in invoke
>     return ctx.invoke(self.callback, *_ctx.params)
>   File ""/Users/amjith/.virtualenvs/pg-cli/lib/python2.7/site-packages/click/core.py"", line 416, in invoke
>     return callback(_args, **kwargs)
>   File ""/Users/amjith/Dropbox/code/python/pgcli/pgcli/main.py"", line 55, in cli
>     multi_line = config.getboolean('main', 'multi_line')
>   File ""/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py"", line 368, in getboolean
>     v = self.get(section, option)
>   File ""/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py"", line 618, in get
>     raise NoOptionError(option, section)
> ConfigParser.NoOptionError: No option u'multi_line' in section: u'main'
> 
> This is because the ConfigParser is reading a config option without
> providing a default value to fall back.
> 
> @j-bennet https://github.com/j-bennet Would you mind taking a stab at
> this bug? If you don't have time, let me know.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/issues/12.
",2014-12-30 08:38:19,2014-12-31 05:48:29
1186,11,,"Set multi-line via config file.
:+1: 

Thank you! :dango: 
",2014-12-29 22:16:32,2014-12-29 22:31:46
1187,10,"When you want to write a subquery, part of it won't have auto-complete hints:
- completion of `select` keyword in subquery,
- completion of table name after `from`. 

After you state a table, columns will be hinted correctly. 
","Add auto-completion for subqueries
Thank you for the bug report. You're right the `SELECT`` keyword isn't being completed. 

But I do see the table names being completed after the `FROM` keyword. If it's not working for you can you provide an example? 

![1__0_2_python_-__pgcli_misago_testforum___tmux_](https://cloud.githubusercontent.com/assets/49260/5570536/d510b5e4-8f37-11e4-86bc-2fde837cc9ee.png)

This issue is now fixed by commit: 16af5d0ec14e6b3d7498a9724de4bfa388445ec8 

@cezio Can you please try it out and let me know if it works as expected? 

You can install pgcli directly from the repo using the following command. 

```
 pip install -e git+git@github.com:amjith/pgcli.git#egg=pgcli   
```

Once you've verified the fix, I'll cut a new release and release it on PyPI. 

Thanks!

Updated version (0.10.0) released to PyPI. 
",2014-12-29 14:18:32,2015-01-06 08:19:13
1188,9,"You can jump to next word in psql with CTRL + right arrow sequence (or get back one word with left arrow). In pgcli this will produce bare sequence codes:

(arrow right, arrow left)

```
dev> sel[1;5D[1;5Cect * from 
```
","handle CTRL+arrow sequences
You're right the C-Left and C-Right seem to insert gibberish text. This is an artifact of the prompt-toolkit library that is used by pgcli. 

I'm talking to the author of prompt-toolkit lib to find a solution for this. I'll update this ticket once it's fixed in prompt-toolkit. 

Thanks!

Pull request made against Prompt Toolkit to add support for C-Left and C-Right keys. Waiting to hear back from the library author. 

PR Link: https://github.com/jonathanslenders/python-prompt-toolkit/pull/74

This is now released in v0.12.0.

https://pypi.python.org/pypi/pgcli/0.12.0
",2014-12-29 14:08:32,2015-01-13 08:44:30
1189,8,,"Added tests for multiple column suggestion, dot and alias.
Yay! More tests. 

Thank you! :tangerine: 
",2014-12-28 23:00:09,2014-12-28 23:11:00
1190,7,,"added tests for dot and alias
Awesome!

:rabbit: 
",2014-12-27 22:44:28,2014-12-27 22:48:10
1191,6,,"added functions to all completions; added naive completion tests
Thank you for the tests and the fix to include functions. :sake: 
",2014-12-27 21:53:51,2014-12-27 22:09:14
1192,5,,"added functions to all-completions; added naive completer tests
Closing this one. This is replaced by PR #6. 
",2014-12-27 18:01:39,2014-12-27 22:39:00
1193,4,"Added some tests for smart completion.
","Smart completion tests
Thanks for adding the tests. I might squash them into a single commit before merging it in. 

How do I do that?
On Dec 23, 2014 10:19 PM, ""Amjith Ramanujam"" notifications@github.com
wrote:

> Thanks for adding the tests. I might squash them into a single commit
> before merging it in.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/4#issuecomment-68029891.

If you'd like to do it, you can issue:

```
git rebase -i HEAD~4
```

That'll pop you into an editor. Then you can squash the commits by changing the word `pick` to `squash`. 

Then it'll squash the commits into a single commit and you'll get a chance to change the commit message. Then you'll have to force push that new commit to your repo. 

I've cherry picked the commit that adds the smart_completion tests. Thank you for the PR. 

:cake: 
",2014-12-23 23:08:30,2014-12-24 08:00:07
1194,3,"- added autocompletion key binding on control-space
- changed ""order"" keyword to ""order by""
","Added key binding on control-space; changed order to order by
Merged from upstream, resolved conflict.

Reformatted and added some keywords.

Thank you for adding more keywords and the new keybinding. If you can address the comment above, I'll be happy to merge it in. 

ok!

On Fri, Dec 19, 2014 at 9:06 PM, Amjith Ramanujam notifications@github.com
wrote:

> Thank you for adding more keywords and the new keybinding. If you can
> address the comment above, I'll be happy to merge it in.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/3#issuecomment-67725369.

## 

/i.

Binding on selection mode is now removed. Works without it!

Thank you! :ghost: 
",2014-12-19 18:53:00,2014-12-20 07:05:13
1195,2,,"attempt to suggest column name when function is typed
I've fixed the completion engine (632ce9d3573a50343fca27ff56689679abd92f91) to ignore special characters in the beginning of a word when looking for a match. 

So your changes are suggesting the column names for function args. 

:ice_cream: 
",2014-12-19 08:03:33,2014-12-19 08:10:15
1196,1,"added support for ansi sql functions
added CASE, WHEN, FULL keywords
changed GROUP to GROUP BY
","Keyword additions
I was going to add SQL functions into the whole keywords mix, but decided they better be their own separate group. They are mostly used after SELECT, WHERE and HAVING, but rarely after ORDER BY and GROUP BY.

Thank you for the PR. Everything looks good. I'm happy with the separation of functions. 

If you can update the PR as per the comment above, I'll be happy to merge it in. 

I decided to merge it now, since I'm making some changes to the sqlcompletion.py file and I didn't want it to have a bunch of conflicts the next time you try to make a PR. 

Ok! I'll take another look tomorrow.
On Dec 17, 2014 10:31 PM, ""Amjith Ramanujam"" notifications@github.com
wrote:

> I decided to merge it now, since I'm making some changes to the
> sqlcompletion.py file and I didn't want it to have a bunch of conflicts the
> next time you try to make a PR.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/amjith/pgcli/pull/1#issuecomment-67446406.
",2014-12-18 05:19:25,2014-12-18 06:30:15
